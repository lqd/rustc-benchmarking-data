<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (45,142,769 samples, 14.56%)</title><rect x="0.2639%" y="165" width="14.5594%" height="15" fill="rgb(227,0,7)"/><text x="0.5139%" y="175.50">LLVM_passes</text></g><g><title>mir_const (1,270,155 samples, 0.41%)</title><rect x="16.9533%" y="101" width="0.4096%" height="15" fill="rgb(217,0,24)"/><text x="17.2033%" y="111.50"></text></g><g><title>unsafety_check_result (1,037,911 samples, 0.33%)</title><rect x="17.0282%" y="85" width="0.3347%" height="15" fill="rgb(221,193,54)"/><text x="17.2782%" y="95.50"></text></g><g><title>mir_built (915,669 samples, 0.30%)</title><rect x="17.0676%" y="69" width="0.2953%" height="15" fill="rgb(248,212,6)"/><text x="17.3176%" y="79.50"></text></g><g><title>mir_promoted (4,022,006 samples, 1.30%)</title><rect x="16.7604%" y="117" width="1.2972%" height="15" fill="rgb(208,68,35)"/><text x="17.0104%" y="127.50"></text></g><g><title>mir_const_qualif (2,153,718 samples, 0.69%)</title><rect x="17.3629%" y="101" width="0.6946%" height="15" fill="rgb(232,128,0)"/><text x="17.6129%" y="111.50"></text></g><g><title>mir_const (1,782,614 samples, 0.57%)</title><rect x="17.4826%" y="85" width="0.5749%" height="15" fill="rgb(207,160,47)"/><text x="17.7326%" y="95.50"></text></g><g><title>unsafety_check_result (1,221,984 samples, 0.39%)</title><rect x="17.6634%" y="69" width="0.3941%" height="15" fill="rgb(228,23,34)"/><text x="17.9134%" y="79.50"></text></g><g><title>mir_built (1,054,233 samples, 0.34%)</title><rect x="17.7175%" y="53" width="0.3400%" height="15" fill="rgb(218,30,26)"/><text x="17.9675%" y="63.50"></text></g><g><title>MIR_borrow_checking (10,025,203 samples, 3.23%)</title><rect x="14.9433%" y="149" width="3.2333%" height="15" fill="rgb(220,122,19)"/><text x="15.1933%" y="159.50">MIR..</text></g><g><title>mir_borrowck (9,858,371 samples, 3.18%)</title><rect x="14.9971%" y="133" width="3.1795%" height="15" fill="rgb(250,228,42)"/><text x="15.2471%" y="143.50">mir..</text></g><g><title>MIR_effect_checking (1,205,073 samples, 0.39%)</title><rect x="18.1766%" y="149" width="0.3887%" height="15" fill="rgb(240,193,28)"/><text x="18.4266%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,089,573 samples, 0.35%)</title><rect x="18.2138%" y="133" width="0.3514%" height="15" fill="rgb(216,20,37)"/><text x="18.4638%" y="143.50"></text></g><g><title>hir_module_items (368,385 samples, 0.12%)</title><rect x="18.5652%" y="149" width="0.1188%" height="15" fill="rgb(206,188,39)"/><text x="18.8152%" y="159.50"></text></g><g><title>codegen_fn_attrs (472,063 samples, 0.15%)</title><rect x="18.7730%" y="117" width="0.1522%" height="15" fill="rgb(217,207,13)"/><text x="19.0230%" y="127.50"></text></g><g><title>check_mod_attrs (700,149 samples, 0.23%)</title><rect x="18.6996%" y="133" width="0.2258%" height="15" fill="rgb(231,73,38)"/><text x="18.9496%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (625,217 samples, 0.20%)</title><rect x="18.9931%" y="133" width="0.2016%" height="15" fill="rgb(225,20,46)"/><text x="19.2431%" y="143.50"></text></g><g><title>misc_checking_1 (1,734,329 samples, 0.56%)</title><rect x="18.6842%" y="149" width="0.5594%" height="15" fill="rgb(210,31,41)"/><text x="18.9342%" y="159.50"></text></g><g><title>misc_checking_2 (328,264 samples, 0.11%)</title><rect x="19.2435%" y="149" width="0.1059%" height="15" fill="rgb(221,200,47)"/><text x="19.4935%" y="159.50"></text></g><g><title>death_checking (451,885 samples, 0.15%)</title><rect x="19.4009%" y="133" width="0.1457%" height="15" fill="rgb(226,26,5)"/><text x="19.6509%" y="143.50"></text></g><g><title>crate_lints (929,500 samples, 0.30%)</title><rect x="19.5472%" y="117" width="0.2998%" height="15" fill="rgb(249,33,26)"/><text x="19.7972%" y="127.50"></text></g><g><title>type_of (396,705 samples, 0.13%)</title><rect x="19.7190%" y="101" width="0.1279%" height="15" fill="rgb(235,183,28)"/><text x="19.9690%" y="111.50"></text></g><g><title>lint_checking (1,053,861 samples, 0.34%)</title><rect x="19.5466%" y="133" width="0.3399%" height="15" fill="rgb(221,5,38)"/><text x="19.7966%" y="143.50"></text></g><g><title>privacy_checking_modules (470,186 samples, 0.15%)</title><rect x="19.9494%" y="133" width="0.1516%" height="15" fill="rgb(247,18,42)"/><text x="20.1994%" y="143.50"></text></g><g><title>check_mod_privacy (466,946 samples, 0.15%)</title><rect x="19.9504%" y="117" width="0.1506%" height="15" fill="rgb(241,131,45)"/><text x="20.2004%" y="127.50"></text></g><g><title>misc_checking_3 (2,340,767 samples, 0.75%)</title><rect x="19.3494%" y="149" width="0.7549%" height="15" fill="rgb(249,31,29)"/><text x="19.5994%" y="159.50"></text></g><g><title>impl_parent (594,014 samples, 0.19%)</title><rect x="25.1128%" y="85" width="0.1916%" height="15" fill="rgb(225,111,53)"/><text x="25.3628%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (346,891 samples, 0.11%)</title><rect x="25.1925%" y="69" width="0.1119%" height="15" fill="rgb(238,160,17)"/><text x="25.4425%" y="79.50"></text></g><g><title>impl_trait_ref (1,581,650 samples, 0.51%)</title><rect x="25.3052%" y="85" width="0.5101%" height="15" fill="rgb(214,148,48)"/><text x="25.5552%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,337,896 samples, 0.43%)</title><rect x="25.3838%" y="69" width="0.4315%" height="15" fill="rgb(232,36,49)"/><text x="25.6338%" y="79.50"></text></g><g><title>coherent_trait (21,938,817 samples, 7.08%)</title><rect x="20.1351%" y="117" width="7.0757%" height="15" fill="rgb(209,103,24)"/><text x="20.3851%" y="127.50">coherent_..</text></g><g><title>specialization_graph_of (21,914,077 samples, 7.07%)</title><rect x="20.1431%" y="101" width="7.0677%" height="15" fill="rgb(229,88,8)"/><text x="20.3931%" y="111.50">specializ..</text></g><g><title>visible_parent_map (4,060,295 samples, 1.31%)</title><rect x="25.9013%" y="85" width="1.3095%" height="15" fill="rgb(213,181,19)"/><text x="26.1513%" y="95.50"></text></g><g><title>module_children (3,690,461 samples, 1.19%)</title><rect x="26.0205%" y="69" width="1.1902%" height="15" fill="rgb(254,191,54)"/><text x="26.2705%" y="79.50"></text></g><g><title>metadata_decode_entry_module_children (3,605,711 samples, 1.16%)</title><rect x="26.0479%" y="53" width="1.1629%" height="15" fill="rgb(241,83,37)"/><text x="26.2979%" y="63.50"></text></g><g><title>coherence_checking (22,076,728 samples, 7.12%)</title><rect x="20.1288%" y="133" width="7.1201%" height="15" fill="rgb(233,36,39)"/><text x="20.3788%" y="143.50">coherence_..</text></g><g><title>evaluate_obligation (559,026 samples, 0.18%)</title><rect x="28.5579%" y="85" width="0.1803%" height="15" fill="rgb(226,3,54)"/><text x="28.8079%" y="95.50"></text></g><g><title>param_env (774,838 samples, 0.25%)</title><rect x="28.8122%" y="85" width="0.2499%" height="15" fill="rgb(245,192,40)"/><text x="29.0622%" y="95.50"></text></g><g><title>predicates_of (354,513 samples, 0.11%)</title><rect x="28.9477%" y="69" width="0.1143%" height="15" fill="rgb(238,167,29)"/><text x="29.1977%" y="79.50"></text></g><g><title>item_bodies_checking (5,803,635 samples, 1.87%)</title><rect x="27.2825%" y="133" width="1.8718%" height="15" fill="rgb(232,182,51)"/><text x="27.5325%" y="143.50">i..</text></g><g><title>typeck_item_bodies (5,801,405 samples, 1.87%)</title><rect x="27.2832%" y="117" width="1.8711%" height="15" fill="rgb(231,60,39)"/><text x="27.5332%" y="127.50">t..</text></g><g><title>typeck (5,693,865 samples, 1.84%)</title><rect x="27.3179%" y="101" width="1.8364%" height="15" fill="rgb(208,69,12)"/><text x="27.5679%" y="111.50">t..</text></g><g><title>item_types_checking (416,565 samples, 0.13%)</title><rect x="29.1543%" y="133" width="0.1343%" height="15" fill="rgb(235,93,37)"/><text x="29.4043%" y="143.50"></text></g><g><title>check_mod_item_types (412,165 samples, 0.13%)</title><rect x="29.1557%" y="117" width="0.1329%" height="15" fill="rgb(213,116,39)"/><text x="29.4057%" y="127.50"></text></g><g><title>generics_of (354,784 samples, 0.11%)</title><rect x="29.5462%" y="101" width="0.1144%" height="15" fill="rgb(222,207,29)"/><text x="29.7962%" y="111.50"></text></g><g><title>late_bound_vars_map (744,367 samples, 0.24%)</title><rect x="30.1178%" y="53" width="0.2401%" height="15" fill="rgb(206,96,30)"/><text x="30.3678%" y="63.50"></text></g><g><title>resolve_lifetimes (620,626 samples, 0.20%)</title><rect x="30.1577%" y="37" width="0.2002%" height="15" fill="rgb(218,138,4)"/><text x="30.4077%" y="47.50"></text></g><g><title>explicit_predicates_of (1,691,928 samples, 0.55%)</title><rect x="29.8270%" y="69" width="0.5457%" height="15" fill="rgb(250,191,14)"/><text x="30.0770%" y="79.50"></text></g><g><title>predicates_of (2,127,956 samples, 0.69%)</title><rect x="29.7178%" y="101" width="0.6863%" height="15" fill="rgb(239,60,40)"/><text x="29.9678%" y="111.50"></text></g><g><title>predicates_defined_on (1,995,903 samples, 0.64%)</title><rect x="29.7604%" y="85" width="0.6437%" height="15" fill="rgb(206,27,48)"/><text x="30.0104%" y="95.50"></text></g><g><title>type_collecting (4,212,719 samples, 1.36%)</title><rect x="29.2894%" y="133" width="1.3587%" height="15" fill="rgb(225,35,8)"/><text x="29.5394%" y="143.50"></text></g><g><title>collect_mod_item_types (4,197,247 samples, 1.35%)</title><rect x="29.2944%" y="117" width="1.3537%" height="15" fill="rgb(250,213,24)"/><text x="29.5444%" y="127.50"></text></g><g><title>type_of (679,304 samples, 0.22%)</title><rect x="30.4290%" y="101" width="0.2191%" height="15" fill="rgb(247,123,22)"/><text x="30.6790%" y="111.50"></text></g><g><title>check_impl_item_well_formed (693,800 samples, 0.22%)</title><rect x="30.7354%" y="117" width="0.2238%" height="15" fill="rgb(231,138,38)"/><text x="30.9854%" y="127.50"></text></g><g><title>implied_outlives_bounds (453,548 samples, 0.15%)</title><rect x="35.9284%" y="101" width="0.1463%" height="15" fill="rgb(231,145,46)"/><text x="36.1784%" y="111.50"></text></g><g><title>param_env (896,390 samples, 0.29%)</title><rect x="36.0747%" y="101" width="0.2891%" height="15" fill="rgb(251,118,11)"/><text x="36.3247%" y="111.50"></text></g><g><title>check_item_well_formed (16,955,696 samples, 5.47%)</title><rect x="30.9591%" y="117" width="5.4685%" height="15" fill="rgb(217,147,25)"/><text x="31.2091%" y="127.50">check_i..</text></g><g><title>analysis (67,120,576 samples, 21.65%)</title><rect x="14.8233%" y="165" width="21.6476%" height="15" fill="rgb(247,81,37)"/><text x="15.0733%" y="175.50">analysis</text></g><g><title>type_check_crate (50,746,172 samples, 16.37%)</title><rect x="20.1043%" y="149" width="16.3666%" height="15" fill="rgb(209,12,38)"/><text x="20.3543%" y="159.50">type_check_crate</text></g><g><title>wf_checking (18,044,833 samples, 5.82%)</title><rect x="30.6511%" y="133" width="5.8198%" height="15" fill="rgb(227,1,9)"/><text x="30.9011%" y="143.50">wf_chec..</text></g><g><title>predicates_of (324,434 samples, 0.10%)</title><rect x="39.4446%" y="101" width="0.1046%" height="15" fill="rgb(248,47,43)"/><text x="39.6946%" y="111.50"></text></g><g><title>param_env (885,097 samples, 0.29%)</title><rect x="39.2640%" y="117" width="0.2855%" height="15" fill="rgb(221,10,30)"/><text x="39.5140%" y="127.50"></text></g><g><title>fn_abi_of_instance (2,209,383 samples, 0.71%)</title><rect x="38.8739%" y="133" width="0.7126%" height="15" fill="rgb(210,229,1)"/><text x="39.1239%" y="143.50"></text></g><g><title>codegen_module (8,710,609 samples, 2.81%)</title><rect x="36.8744%" y="149" width="2.8093%" height="15" fill="rgb(222,148,37)"/><text x="37.1244%" y="159.50">co..</text></g><g><title>item_attrs (420,215 samples, 0.14%)</title><rect x="39.8597%" y="85" width="0.1355%" height="15" fill="rgb(234,67,33)"/><text x="40.1097%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (404,113 samples, 0.13%)</title><rect x="39.8649%" y="69" width="0.1303%" height="15" fill="rgb(247,98,35)"/><text x="40.1149%" y="79.50"></text></g><g><title>codegen_fn_attrs (874,051 samples, 0.28%)</title><rect x="39.8267%" y="101" width="0.2819%" height="15" fill="rgb(247,138,52)"/><text x="40.0767%" y="111.50"></text></g><g><title>should_inherit_track_caller (351,593 samples, 0.11%)</title><rect x="39.9952%" y="85" width="0.1134%" height="15" fill="rgb(213,79,30)"/><text x="40.2452%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (554,224 samples, 0.18%)</title><rect x="40.2432%" y="85" width="0.1787%" height="15" fill="rgb(246,177,23)"/><text x="40.4932%" y="95.50"></text></g><g><title>optimized_mir (790,416 samples, 0.25%)</title><rect x="40.1919%" y="101" width="0.2549%" height="15" fill="rgb(230,62,27)"/><text x="40.4419%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (682,052 samples, 0.22%)</title><rect x="40.5263%" y="85" width="0.2200%" height="15" fill="rgb(216,154,8)"/><text x="40.7763%" y="95.50"></text></g><g><title>resolve_instance (1,405,058 samples, 0.45%)</title><rect x="40.4468%" y="101" width="0.4532%" height="15" fill="rgb(244,35,45)"/><text x="40.6968%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (3,900,524 samples, 1.26%)</title><rect x="39.6926%" y="117" width="1.2580%" height="15" fill="rgb(251,115,12)"/><text x="39.9426%" y="127.50"></text></g><g><title>monomorphization_collector (3,944,495 samples, 1.27%)</title><rect x="39.6918%" y="133" width="1.2722%" height="15" fill="rgb(240,54,50)"/><text x="39.9418%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (514,866 samples, 0.17%)</title><rect x="40.9685%" y="117" width="0.1661%" height="15" fill="rgb(233,84,52)"/><text x="41.2185%" y="127.50"></text></g><g><title>symbol_name (471,174 samples, 0.15%)</title><rect x="40.9826%" y="101" width="0.1520%" height="15" fill="rgb(207,117,47)"/><text x="41.2326%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (4,706,934 samples, 1.52%)</title><rect x="39.6850%" y="149" width="1.5181%" height="15" fill="rgb(249,43,39)"/><text x="39.9350%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (741,339 samples, 0.24%)</title><rect x="40.9639%" y="133" width="0.2391%" height="15" fill="rgb(209,38,44)"/><text x="41.2139%" y="143.50"></text></g><g><title>codegen_crate (14,678,625 samples, 4.73%)</title><rect x="36.4746%" y="165" width="4.7341%" height="15" fill="rgb(236,212,23)"/><text x="36.7246%" y="175.50">codege..</text></g><g><title>codegen_module_optimize (62,027,059 samples, 20.00%)</title><rect x="41.2087%" y="165" width="20.0049%" height="15" fill="rgb(242,79,21)"/><text x="41.4587%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (58,320,289 samples, 18.81%)</title><rect x="42.4042%" y="149" width="18.8094%" height="15" fill="rgb(211,96,35)"/><text x="42.6542%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (15,947,429 samples, 5.14%)</title><rect x="62.2493%" y="149" width="5.1433%" height="15" fill="rgb(253,215,40)"/><text x="62.4993%" y="159.50">LLVM_l..</text></g><g><title>LLVM_module_codegen (30,102,080 samples, 9.71%)</title><rect x="67.3926%" y="149" width="9.7085%" height="15" fill="rgb(211,81,21)"/><text x="67.6426%" y="159.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (29,303,218 samples, 9.45%)</title><rect x="67.6502%" y="133" width="9.4508%" height="15" fill="rgb(208,190,38)"/><text x="67.9002%" y="143.50">LLVM_module_co..</text></g><g><title>LLVM_thin_lto_import (2,086,684 samples, 0.67%)</title><rect x="77.1011%" y="149" width="0.6730%" height="15" fill="rgb(235,213,38)"/><text x="77.3511%" y="159.50"></text></g><g><title>codegen_module_perform_lto (51,487,518 samples, 16.61%)</title><rect x="61.2136%" y="165" width="16.6057%" height="15" fill="rgb(237,122,38)"/><text x="61.4636%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (14,385,102 samples, 4.64%)</title><rect x="78.0026%" y="149" width="4.6395%" height="15" fill="rgb(244,218,35)"/><text x="78.2526%" y="159.50">macro..</text></g><g><title>expand_crate (14,368,212 samples, 4.63%)</title><rect x="78.0081%" y="133" width="4.6340%" height="15" fill="rgb(240,68,47)"/><text x="78.2581%" y="143.50">expan..</text></g><g><title>late_resolve_crate (1,770,860 samples, 0.57%)</title><rect x="82.7903%" y="133" width="0.5711%" height="15" fill="rgb(210,16,53)"/><text x="83.0403%" y="143.50"></text></g><g><title>configure_and_expand (17,298,194 samples, 5.58%)</title><rect x="77.8192%" y="165" width="5.5790%" height="15" fill="rgb(235,124,12)"/><text x="78.0692%" y="175.50">configu..</text></g><g><title>resolve_crate (2,164,475 samples, 0.70%)</title><rect x="82.7001%" y="149" width="0.6981%" height="15" fill="rgb(224,169,11)"/><text x="82.9501%" y="159.50"></text></g><g><title>early_lint_checks (345,864 samples, 0.11%)</title><rect x="83.4620%" y="165" width="0.1115%" height="15" fill="rgb(250,166,2)"/><text x="83.7120%" y="175.50"></text></g><g><title>free_global_ctxt (3,302,207 samples, 1.07%)</title><rect x="83.5736%" y="165" width="1.0650%" height="15" fill="rgb(242,216,29)"/><text x="83.8236%" y="175.50"></text></g><g><title>optimized_mir (942,420 samples, 0.30%)</title><rect x="85.3286%" y="149" width="0.3039%" height="15" fill="rgb(230,116,27)"/><text x="85.5786%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (384,316 samples, 0.12%)</title><rect x="85.5086%" y="133" width="0.1239%" height="15" fill="rgb(228,99,48)"/><text x="85.7586%" y="143.50"></text></g><g><title>generate_crate_metadata (3,129,485 samples, 1.01%)</title><rect x="84.6386%" y="165" width="1.0093%" height="15" fill="rgb(253,11,6)"/><text x="84.8886%" y="175.50"></text></g><g><title>hir_lowering (4,169,007 samples, 1.34%)</title><rect x="85.6479%" y="165" width="1.3446%" height="15" fill="rgb(247,143,39)"/><text x="85.8979%" y="175.50"></text></g><g><title>finish_ongoing_codegen (34,967,165 samples, 11.28%)</title><rect x="86.9971%" y="149" width="11.2775%" height="15" fill="rgb(236,97,10)"/><text x="87.2471%" y="159.50">finish_ongoing_co..</text></g><g><title>link_crate (1,002,871 samples, 0.32%)</title><rect x="98.2747%" y="149" width="0.3234%" height="15" fill="rgb(233,208,19)"/><text x="98.5247%" y="159.50"></text></g><g><title>link_binary (988,191 samples, 0.32%)</title><rect x="98.2794%" y="133" width="0.3187%" height="15" fill="rgb(216,164,2)"/><text x="98.5294%" y="143.50"></text></g><g><title>link_rlib (612,497 samples, 0.20%)</title><rect x="98.4006%" y="117" width="0.1975%" height="15" fill="rgb(220,129,5)"/><text x="98.6506%" y="127.50"></text></g><g><title>link (35,993,246 samples, 11.61%)</title><rect x="86.9925%" y="165" width="11.6085%" height="15" fill="rgb(242,17,10)"/><text x="87.2425%" y="175.50">link</text></g><g><title>parse_crate (1,769,369 samples, 0.57%)</title><rect x="98.6010%" y="165" width="0.5707%" height="15" fill="rgb(242,107,0)"/><text x="98.8510%" y="175.50"></text></g><g><title>prepare_outputs (334,204 samples, 0.11%)</title><rect x="99.1746%" y="165" width="0.1078%" height="15" fill="rgb(251,28,31)"/><text x="99.4246%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,728,249 samples, 0.56%)</title><rect x="99.2824%" y="165" width="0.5574%" height="15" fill="rgb(233,223,10)"/><text x="99.5324%" y="175.50"></text></g><g><title>all (310,060,041 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (310,060,041 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (354,864 samples, 0.11%)</title><rect x="99.8855%" y="165" width="0.1145%" height="15" fill="rgb(244,5,23)"/><text x="100.1355%" y="175.50"></text></g></svg></svg>