<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (84,385,871 samples, 12.26%)</title><rect x="0.1220%" y="197" width="12.2609%" height="15" fill="rgb(227,0,7)"/><text x="0.3720%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (715,005 samples, 0.10%)</title><rect x="16.0309%" y="69" width="0.1039%" height="15" fill="rgb(217,0,24)"/><text x="16.2809%" y="79.50"></text></g><g><title>needs_drop_raw (1,441,249 samples, 0.21%)</title><rect x="15.9354%" y="85" width="0.2094%" height="15" fill="rgb(221,193,54)"/><text x="16.1854%" y="95.50"></text></g><g><title>specialization_graph_of (2,445,748 samples, 0.36%)</title><rect x="16.2829%" y="69" width="0.3554%" height="15" fill="rgb(248,212,6)"/><text x="16.5329%" y="79.50"></text></g><g><title>impl_trait_ref (1,204,055 samples, 0.17%)</title><rect x="16.4633%" y="53" width="0.1749%" height="15" fill="rgb(208,68,35)"/><text x="16.7133%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,083,365 samples, 0.16%)</title><rect x="16.4808%" y="37" width="0.1574%" height="15" fill="rgb(232,128,0)"/><text x="16.7308%" y="47.50"></text></g><g><title>resolve_instance (3,493,882 samples, 0.51%)</title><rect x="16.1485%" y="85" width="0.5076%" height="15" fill="rgb(207,160,47)"/><text x="16.3985%" y="95.50"></text></g><g><title>thir_body (1,457,866 samples, 0.21%)</title><rect x="16.6620%" y="85" width="0.2118%" height="15" fill="rgb(228,23,34)"/><text x="16.9120%" y="95.50"></text></g><g><title>mir_const (13,390,657 samples, 1.95%)</title><rect x="14.9325%" y="133" width="1.9456%" height="15" fill="rgb(218,30,26)"/><text x="15.1825%" y="143.50">m..</text></g><g><title>unsafety_check_result (11,898,581 samples, 1.73%)</title><rect x="15.1493%" y="117" width="1.7288%" height="15" fill="rgb(220,122,19)"/><text x="15.3993%" y="127.50"></text></g><g><title>mir_built (10,815,096 samples, 1.57%)</title><rect x="15.3067%" y="101" width="1.5714%" height="15" fill="rgb(250,228,42)"/><text x="15.5567%" y="111.50"></text></g><g><title>mir_promoted (14,737,379 samples, 2.14%)</title><rect x="14.7673%" y="149" width="2.1413%" height="15" fill="rgb(240,193,28)"/><text x="15.0173%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (2,091,464 samples, 0.30%)</title><rect x="17.0478%" y="149" width="0.3039%" height="15" fill="rgb(216,20,37)"/><text x="17.2978%" y="159.50"></text></g><g><title>MIR_borrow_checking (33,837,065 samples, 4.92%)</title><rect x="12.4367%" y="181" width="4.9164%" height="15" fill="rgb(206,188,39)"/><text x="12.6867%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (33,656,742 samples, 4.89%)</title><rect x="12.4629%" y="165" width="4.8902%" height="15" fill="rgb(217,207,13)"/><text x="12.7129%" y="175.50">mir_bo..</text></g><g><title>check_mod_attrs (814,839 samples, 0.12%)</title><rect x="17.4142%" y="165" width="0.1184%" height="15" fill="rgb(231,73,38)"/><text x="17.6642%" y="175.50"></text></g><g><title>misc_checking_1 (1,581,988 samples, 0.23%)</title><rect x="17.4118%" y="181" width="0.2299%" height="15" fill="rgb(225,20,46)"/><text x="17.6618%" y="191.50"></text></g><g><title>misc_checking_2 (1,279,635 samples, 0.19%)</title><rect x="17.6417%" y="181" width="0.1859%" height="15" fill="rgb(210,31,41)"/><text x="17.8917%" y="191.50"></text></g><g><title>match_checking (820,589 samples, 0.12%)</title><rect x="17.7084%" y="165" width="0.1192%" height="15" fill="rgb(221,200,47)"/><text x="17.9584%" y="175.50"></text></g><g><title>check_match (780,728 samples, 0.11%)</title><rect x="17.7142%" y="149" width="0.1134%" height="15" fill="rgb(226,26,5)"/><text x="17.9642%" y="159.50"></text></g><g><title>crate_lints (2,483,459 samples, 0.36%)</title><rect x="17.9651%" y="149" width="0.3608%" height="15" fill="rgb(249,33,26)"/><text x="18.2151%" y="159.50"></text></g><g><title>type_of (1,134,906 samples, 0.16%)</title><rect x="18.1611%" y="133" width="0.1649%" height="15" fill="rgb(235,183,28)"/><text x="18.4111%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (895,098 samples, 0.13%)</title><rect x="18.1959%" y="117" width="0.1301%" height="15" fill="rgb(221,5,38)"/><text x="18.4459%" y="127.50"></text></g><g><title>lint_checking (3,119,656 samples, 0.45%)</title><rect x="17.9649%" y="165" width="0.4533%" height="15" fill="rgb(247,18,42)"/><text x="18.2149%" y="175.50"></text></g><g><title>privacy_checking_modules (1,105,063 samples, 0.16%)</title><rect x="18.4614%" y="165" width="0.1606%" height="15" fill="rgb(241,131,45)"/><text x="18.7114%" y="175.50"></text></g><g><title>check_mod_privacy (1,101,633 samples, 0.16%)</title><rect x="18.4619%" y="149" width="0.1601%" height="15" fill="rgb(249,31,29)"/><text x="18.7119%" y="159.50"></text></g><g><title>misc_checking_3 (5,481,993 samples, 0.80%)</title><rect x="17.8276%" y="181" width="0.7965%" height="15" fill="rgb(225,111,53)"/><text x="18.0776%" y="191.50"></text></g><g><title>impl_parent (3,020,890 samples, 0.44%)</title><rect x="19.5064%" y="117" width="0.4389%" height="15" fill="rgb(238,160,17)"/><text x="19.7564%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,765,044 samples, 0.26%)</title><rect x="19.6889%" y="101" width="0.2565%" height="15" fill="rgb(214,148,48)"/><text x="19.9389%" y="111.50"></text></g><g><title>impl_trait_ref (6,173,739 samples, 0.90%)</title><rect x="19.9453%" y="117" width="0.8970%" height="15" fill="rgb(232,36,49)"/><text x="20.1953%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,903,735 samples, 0.71%)</title><rect x="20.1299%" y="101" width="0.7125%" height="15" fill="rgb(209,103,24)"/><text x="20.3799%" y="111.50"></text></g><g><title>trait_impls_of (1,154,815 samples, 0.17%)</title><rect x="20.8457%" y="117" width="0.1678%" height="15" fill="rgb(229,88,8)"/><text x="21.0957%" y="127.50"></text></g><g><title>coherent_trait (16,336,766 samples, 2.37%)</title><rect x="18.6400%" y="149" width="2.3737%" height="15" fill="rgb(213,181,19)"/><text x="18.8900%" y="159.50">co..</text></g><g><title>specialization_graph_of (15,745,899 samples, 2.29%)</title><rect x="18.7258%" y="133" width="2.2878%" height="15" fill="rgb(254,191,54)"/><text x="18.9758%" y="143.50">s..</text></g><g><title>coherence_checking (16,448,337 samples, 2.39%)</title><rect x="18.6356%" y="165" width="2.3899%" height="15" fill="rgb(241,83,37)"/><text x="18.8856%" y="175.50">co..</text></g><g><title>associated_items (764,460 samples, 0.11%)</title><rect x="24.3121%" y="117" width="0.1111%" height="15" fill="rgb(233,36,39)"/><text x="24.5621%" y="127.50"></text></g><g><title>evaluate_obligation (3,068,997 samples, 0.45%)</title><rect x="24.5007%" y="117" width="0.4459%" height="15" fill="rgb(226,3,54)"/><text x="24.7507%" y="127.50"></text></g><g><title>evaluate_obligation (891,753 samples, 0.13%)</title><rect x="25.9934%" y="101" width="0.1296%" height="15" fill="rgb(245,192,40)"/><text x="26.2434%" y="111.50"></text></g><g><title>typeck (7,435,203 samples, 1.08%)</title><rect x="25.1578%" y="117" width="1.0803%" height="15" fill="rgb(238,167,29)"/><text x="25.4078%" y="127.50"></text></g><g><title>item_bodies_checking (36,134,572 samples, 5.25%)</title><rect x="21.0317%" y="165" width="5.2502%" height="15" fill="rgb(232,182,51)"/><text x="21.2817%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (36,131,652 samples, 5.25%)</title><rect x="21.0321%" y="149" width="5.2498%" height="15" fill="rgb(231,60,39)"/><text x="21.2821%" y="159.50">typeck..</text></g><g><title>typeck (36,016,451 samples, 5.23%)</title><rect x="21.0488%" y="133" width="5.2330%" height="15" fill="rgb(208,69,12)"/><text x="21.2988%" y="143.50">typeck</text></g><g><title>item_types_checking (1,993,792 samples, 0.29%)</title><rect x="26.2819%" y="165" width="0.2897%" height="15" fill="rgb(235,93,37)"/><text x="26.5319%" y="175.50"></text></g><g><title>check_mod_item_types (1,989,552 samples, 0.29%)</title><rect x="26.2825%" y="149" width="0.2891%" height="15" fill="rgb(213,116,39)"/><text x="26.5325%" y="159.50"></text></g><g><title>generics_of (919,480 samples, 0.13%)</title><rect x="26.6865%" y="133" width="0.1336%" height="15" fill="rgb(222,207,29)"/><text x="26.9365%" y="143.50"></text></g><g><title>type_collecting (2,586,770 samples, 0.38%)</title><rect x="26.5719%" y="165" width="0.3758%" height="15" fill="rgb(206,96,30)"/><text x="26.8219%" y="175.50"></text></g><g><title>collect_mod_item_types (2,578,520 samples, 0.37%)</title><rect x="26.5731%" y="149" width="0.3746%" height="15" fill="rgb(218,138,4)"/><text x="26.8231%" y="159.50"></text></g><g><title>evaluate_obligation (810,689 samples, 0.12%)</title><rect x="27.3084%" y="133" width="0.1178%" height="15" fill="rgb(250,191,14)"/><text x="27.5584%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,178,940 samples, 0.61%)</title><rect x="26.9878%" y="149" width="0.6072%" height="15" fill="rgb(239,60,40)"/><text x="27.2378%" y="159.50"></text></g><g><title>evaluate_obligation (840,290 samples, 0.12%)</title><rect x="27.7909%" y="133" width="0.1221%" height="15" fill="rgb(206,27,48)"/><text x="28.0409%" y="143.50"></text></g><g><title>check_item_well_formed (2,818,479 samples, 0.41%)</title><rect x="27.5950%" y="149" width="0.4095%" height="15" fill="rgb(225,35,8)"/><text x="27.8450%" y="159.50"></text></g><g><title>analysis (107,646,526 samples, 15.64%)</title><rect x="12.3829%" y="197" width="15.6406%" height="15" fill="rgb(250,213,24)"/><text x="12.6329%" y="207.50">analysis</text></g><g><title>type_check_crate (64,691,517 samples, 9.40%)</title><rect x="18.6241%" y="181" width="9.3994%" height="15" fill="rgb(247,123,22)"/><text x="18.8741%" y="191.50">type_check_cr..</text></g><g><title>wf_checking (7,397,404 samples, 1.07%)</title><rect x="26.9487%" y="165" width="1.0748%" height="15" fill="rgb(231,138,38)"/><text x="27.1987%" y="175.50"></text></g><g><title>layout_of (785,448 samples, 0.11%)</title><rect x="30.4937%" y="149" width="0.1141%" height="15" fill="rgb(231,145,46)"/><text x="30.7437%" y="159.50"></text></g><g><title>param_env (1,605,251 samples, 0.23%)</title><rect x="30.6078%" y="149" width="0.2332%" height="15" fill="rgb(251,118,11)"/><text x="30.8578%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,365,118 samples, 0.78%)</title><rect x="30.0868%" y="165" width="0.7795%" height="15" fill="rgb(217,147,25)"/><text x="30.3368%" y="175.50"></text></g><g><title>codegen_module (18,896,786 samples, 2.75%)</title><rect x="28.2704%" y="181" width="2.7456%" height="15" fill="rgb(247,81,37)"/><text x="28.5204%" y="191.50">co..</text></g><g><title>codegen_fn_attrs (734,009 samples, 0.11%)</title><rect x="31.1280%" y="133" width="0.1066%" height="15" fill="rgb(209,12,38)"/><text x="31.3780%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (852,660 samples, 0.12%)</title><rect x="31.3673%" y="117" width="0.1239%" height="15" fill="rgb(227,1,9)"/><text x="31.6173%" y="127.50"></text></g><g><title>optimized_mir (2,096,245 samples, 0.30%)</title><rect x="31.2672%" y="133" width="0.3046%" height="15" fill="rgb(248,47,43)"/><text x="31.5172%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (718,818 samples, 0.10%)</title><rect x="31.6226%" y="117" width="0.1044%" height="15" fill="rgb(221,10,30)"/><text x="31.8726%" y="127.50"></text></g><g><title>resolve_instance (1,910,310 samples, 0.28%)</title><rect x="31.5718%" y="133" width="0.2776%" height="15" fill="rgb(210,229,1)"/><text x="31.8218%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (6,639,736 samples, 0.96%)</title><rect x="31.0211%" y="149" width="0.9647%" height="15" fill="rgb(222,148,37)"/><text x="31.2711%" y="159.50"></text></g><g><title>monomorphization_collector (6,710,297 samples, 0.97%)</title><rect x="31.0203%" y="165" width="0.9750%" height="15" fill="rgb(234,67,33)"/><text x="31.2703%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (707,348 samples, 0.10%)</title><rect x="31.9958%" y="149" width="0.1028%" height="15" fill="rgb(247,98,35)"/><text x="32.2458%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (7,720,338 samples, 1.12%)</title><rect x="31.0168%" y="181" width="1.1217%" height="15" fill="rgb(247,138,52)"/><text x="31.2668%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (985,571 samples, 0.14%)</title><rect x="31.9953%" y="165" width="0.1432%" height="15" fill="rgb(213,79,30)"/><text x="32.2453%" y="175.50"></text></g><g><title>codegen_crate (28,390,214 samples, 4.12%)</title><rect x="28.0254%" y="197" width="4.1250%" height="15" fill="rgb(246,177,23)"/><text x="28.2754%" y="207.50">code..</text></g><g><title>codegen_module_optimize (136,607,936 samples, 19.85%)</title><rect x="32.1504%" y="197" width="19.8486%" height="15" fill="rgb(230,62,27)"/><text x="32.4004%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (116,283,683 samples, 16.90%)</title><rect x="35.1034%" y="181" width="16.8956%" height="15" fill="rgb(216,154,8)"/><text x="35.3534%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (77,531,234 samples, 11.26%)</title><rect x="53.2092%" y="181" width="11.2650%" height="15" fill="rgb(244,35,45)"/><text x="53.4592%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (115,300,024 samples, 16.75%)</title><rect x="64.4742%" y="181" width="16.7526%" height="15" fill="rgb(251,115,12)"/><text x="64.7242%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (113,714,366 samples, 16.52%)</title><rect x="64.7046%" y="165" width="16.5222%" height="15" fill="rgb(240,54,50)"/><text x="64.9546%" y="175.50">LLVM_module_codegen_emit_o..</text></g><g><title>LLVM_thin_lto_import (5,127,626 samples, 0.75%)</title><rect x="81.2268%" y="181" width="0.7450%" height="15" fill="rgb(233,84,52)"/><text x="81.4768%" y="191.50"></text></g><g><title>codegen_module_perform_lto (206,839,586 samples, 30.05%)</title><rect x="51.9990%" y="197" width="30.0530%" height="15" fill="rgb(207,117,47)"/><text x="52.2490%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,752,522 samples, 0.40%)</title><rect x="85.3789%" y="149" width="0.3999%" height="15" fill="rgb(249,43,39)"/><text x="85.6289%" y="159.50"></text></g><g><title>metadata_register_crate (968,489 samples, 0.14%)</title><rect x="85.6381%" y="133" width="0.1407%" height="15" fill="rgb(209,38,44)"/><text x="85.8881%" y="143.50"></text></g><g><title>macro_expand_crate (25,085,386 samples, 3.64%)</title><rect x="82.1543%" y="181" width="3.6448%" height="15" fill="rgb(236,212,23)"/><text x="82.4043%" y="191.50">macr..</text></g><g><title>expand_crate (25,069,786 samples, 3.64%)</title><rect x="82.1566%" y="165" width="3.6425%" height="15" fill="rgb(242,79,21)"/><text x="82.4066%" y="175.50">expa..</text></g><g><title>late_resolve_crate (3,652,941 samples, 0.53%)</title><rect x="85.9026%" y="165" width="0.5308%" height="15" fill="rgb(211,96,35)"/><text x="86.1526%" y="175.50"></text></g><g><title>configure_and_expand (30,283,895 samples, 4.40%)</title><rect x="82.0520%" y="197" width="4.4001%" height="15" fill="rgb(253,215,40)"/><text x="82.3020%" y="207.50">confi..</text></g><g><title>resolve_crate (4,245,238 samples, 0.62%)</title><rect x="85.8353%" y="181" width="0.6168%" height="15" fill="rgb(211,81,21)"/><text x="86.0853%" y="191.50"></text></g><g><title>free_global_ctxt (6,111,420 samples, 0.89%)</title><rect x="86.5523%" y="197" width="0.8880%" height="15" fill="rgb(208,190,38)"/><text x="86.8023%" y="207.50"></text></g><g><title>layout_of (1,195,350 samples, 0.17%)</title><rect x="88.4481%" y="165" width="0.1737%" height="15" fill="rgb(235,213,38)"/><text x="88.6981%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,648,037 samples, 0.68%)</title><rect x="88.6218%" y="165" width="0.6753%" height="15" fill="rgb(237,122,38)"/><text x="88.8718%" y="175.50"></text></g><g><title>optimized_mir (10,608,030 samples, 1.54%)</title><rect x="87.8065%" y="181" width="1.5413%" height="15" fill="rgb(244,218,35)"/><text x="88.0565%" y="191.50"></text></g><g><title>generate_crate_metadata (13,212,920 samples, 1.92%)</title><rect x="87.4402%" y="197" width="1.9198%" height="15" fill="rgb(240,68,47)"/><text x="87.6902%" y="207.50">g..</text></g><g><title>hir_lowering (3,666,962 samples, 0.53%)</title><rect x="89.3600%" y="197" width="0.5328%" height="15" fill="rgb(210,16,53)"/><text x="89.6100%" y="207.50"></text></g><g><title>finish_ongoing_codegen (61,497,070 samples, 8.94%)</title><rect x="89.8951%" y="181" width="8.9353%" height="15" fill="rgb(235,124,12)"/><text x="90.1451%" y="191.50">finish_ongoin..</text></g><g><title>link_crate (1,334,175 samples, 0.19%)</title><rect x="98.8304%" y="181" width="0.1939%" height="15" fill="rgb(224,169,11)"/><text x="99.0804%" y="191.50"></text></g><g><title>link_binary (1,318,665 samples, 0.19%)</title><rect x="98.8326%" y="165" width="0.1916%" height="15" fill="rgb(250,166,2)"/><text x="99.0826%" y="175.50"></text></g><g><title>link_rlib (844,439 samples, 0.12%)</title><rect x="98.9015%" y="149" width="0.1227%" height="15" fill="rgb(242,216,29)"/><text x="99.1515%" y="159.50"></text></g><g><title>link (62,857,475 samples, 9.13%)</title><rect x="89.8928%" y="197" width="9.1329%" height="15" fill="rgb(230,116,27)"/><text x="90.1428%" y="207.50">link</text></g><g><title>parse_crate (3,988,325 samples, 0.58%)</title><rect x="99.0258%" y="197" width="0.5795%" height="15" fill="rgb(228,99,48)"/><text x="99.2758%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,056,903 samples, 0.30%)</title><rect x="99.6339%" y="197" width="0.2989%" height="15" fill="rgb(253,11,6)"/><text x="99.8839%" y="207.50"></text></g><g><title>all (688,250,079 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (688,250,079 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>