<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (261,870,548 samples, 10.32%)</title><rect x="0.0735%" y="181" width="10.3198%" height="15" fill="rgb(227,0,7)"/><text x="0.3235%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (3,159,945 samples, 0.12%)</title><rect x="10.2688%" y="165" width="0.1245%" height="15" fill="rgb(217,0,24)"/><text x="10.5188%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (3,092,544 samples, 0.12%)</title><rect x="10.2715%" y="149" width="0.1219%" height="15" fill="rgb(221,193,54)"/><text x="10.5215%" y="159.50"></text></g><g><title>is_copy_raw (9,488,266 samples, 0.37%)</title><rect x="17.0269%" y="53" width="0.3739%" height="15" fill="rgb(248,212,6)"/><text x="17.2769%" y="63.50"></text></g><g><title>evaluate_obligation (7,489,527 samples, 0.30%)</title><rect x="17.1057%" y="37" width="0.2951%" height="15" fill="rgb(208,68,35)"/><text x="17.3557%" y="47.50"></text></g><g><title>needs_drop_raw (11,249,421 samples, 0.44%)</title><rect x="16.9576%" y="69" width="0.4433%" height="15" fill="rgb(232,128,0)"/><text x="17.2076%" y="79.50"></text></g><g><title>thir_body (9,298,498 samples, 0.37%)</title><rect x="17.4598%" y="69" width="0.3664%" height="15" fill="rgb(207,160,47)"/><text x="17.7098%" y="79.50"></text></g><g><title>mir_const (60,031,702 samples, 2.37%)</title><rect x="15.4954%" y="117" width="2.3657%" height="15" fill="rgb(228,23,34)"/><text x="15.7454%" y="127.50">mi..</text></g><g><title>unsafety_check_result (53,873,753 samples, 2.12%)</title><rect x="15.7381%" y="101" width="2.1231%" height="15" fill="rgb(218,30,26)"/><text x="15.9881%" y="111.50">u..</text></g><g><title>mir_built (50,490,734 samples, 1.99%)</title><rect x="15.8714%" y="85" width="1.9897%" height="15" fill="rgb(220,122,19)"/><text x="16.1214%" y="95.50">m..</text></g><g><title>mir_promoted (69,237,000 samples, 2.73%)</title><rect x="15.2216%" y="133" width="2.7285%" height="15" fill="rgb(250,228,42)"/><text x="15.4716%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (4,564,725 samples, 0.18%)</title><rect x="17.9501%" y="133" width="0.1799%" height="15" fill="rgb(240,193,28)"/><text x="18.2001%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,359,769 samples, 0.13%)</title><rect x="18.1300%" y="133" width="0.1324%" height="15" fill="rgb(216,20,37)"/><text x="18.3800%" y="143.50"></text></g><g><title>type_op_normalize_ty (3,694,026 samples, 0.15%)</title><rect x="18.2656%" y="133" width="0.1456%" height="15" fill="rgb(206,188,39)"/><text x="18.5156%" y="143.50"></text></g><g><title>type_op_prove_predicate (11,455,281 samples, 0.45%)</title><rect x="18.4112%" y="133" width="0.4514%" height="15" fill="rgb(217,207,13)"/><text x="18.6612%" y="143.50"></text></g><g><title>MIR_borrow_checking (212,635,250 samples, 8.38%)</title><rect x="10.4835%" y="165" width="8.3796%" height="15" fill="rgb(231,73,38)"/><text x="10.7335%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (211,897,173 samples, 8.35%)</title><rect x="10.5126%" y="149" width="8.3505%" height="15" fill="rgb(225,20,46)"/><text x="10.7626%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,608,789 samples, 0.10%)</title><rect x="18.9548%" y="149" width="0.1028%" height="15" fill="rgb(210,31,41)"/><text x="19.2048%" y="159.50"></text></g><g><title>misc_checking_1 (5,702,885 samples, 0.22%)</title><rect x="18.9539%" y="165" width="0.2247%" height="15" fill="rgb(221,200,47)"/><text x="19.2039%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,444,749 samples, 0.14%)</title><rect x="19.1788%" y="149" width="0.1358%" height="15" fill="rgb(226,26,5)"/><text x="19.4288%" y="159.50"></text></g><g><title>check_mod_liveness (2,752,560 samples, 0.11%)</title><rect x="19.2061%" y="133" width="0.1085%" height="15" fill="rgb(249,33,26)"/><text x="19.4561%" y="143.50"></text></g><g><title>misc_checking_2 (11,344,938 samples, 0.45%)</title><rect x="19.1787%" y="165" width="0.4471%" height="15" fill="rgb(235,183,28)"/><text x="19.4287%" y="175.50"></text></g><g><title>match_checking (7,897,439 samples, 0.31%)</title><rect x="19.3145%" y="149" width="0.3112%" height="15" fill="rgb(221,5,38)"/><text x="19.5645%" y="159.50"></text></g><g><title>check_match (7,687,408 samples, 0.30%)</title><rect x="19.3228%" y="133" width="0.3029%" height="15" fill="rgb(247,18,42)"/><text x="19.5728%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,868,727 samples, 0.11%)</title><rect x="19.9222%" y="117" width="0.1131%" height="15" fill="rgb(241,131,45)"/><text x="20.1722%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,813,575 samples, 0.11%)</title><rect x="19.9243%" y="101" width="0.1109%" height="15" fill="rgb(249,31,29)"/><text x="20.1743%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,740,403 samples, 0.11%)</title><rect x="19.9272%" y="85" width="0.1080%" height="15" fill="rgb(225,111,53)"/><text x="20.1772%" y="95.50"></text></g><g><title>crate_lints (8,581,328 samples, 0.34%)</title><rect x="19.7741%" y="133" width="0.3382%" height="15" fill="rgb(238,160,17)"/><text x="20.0241%" y="143.50"></text></g><g><title>lint_checking (13,061,899 samples, 0.51%)</title><rect x="19.7739%" y="149" width="0.5147%" height="15" fill="rgb(214,148,48)"/><text x="20.0239%" y="159.50"></text></g><g><title>module_lints (4,476,731 samples, 0.18%)</title><rect x="20.1123%" y="133" width="0.1764%" height="15" fill="rgb(232,36,49)"/><text x="20.3623%" y="143.50"></text></g><g><title>lint_mod (4,470,151 samples, 0.18%)</title><rect x="20.1125%" y="117" width="0.1762%" height="15" fill="rgb(209,103,24)"/><text x="20.3625%" y="127.50"></text></g><g><title>privacy_checking_modules (8,556,507 samples, 0.34%)</title><rect x="20.3577%" y="149" width="0.3372%" height="15" fill="rgb(229,88,8)"/><text x="20.6077%" y="159.50"></text></g><g><title>check_mod_privacy (8,551,547 samples, 0.34%)</title><rect x="20.3579%" y="133" width="0.3370%" height="15" fill="rgb(213,181,19)"/><text x="20.6079%" y="143.50"></text></g><g><title>misc_checking_3 (27,163,348 samples, 1.07%)</title><rect x="19.6257%" y="165" width="1.0705%" height="15" fill="rgb(254,191,54)"/><text x="19.8757%" y="175.50"></text></g><g><title>impl_parent (2,674,815 samples, 0.11%)</title><rect x="20.9233%" y="101" width="0.1054%" height="15" fill="rgb(241,83,37)"/><text x="21.1733%" y="111.50"></text></g><g><title>impl_trait_ref (5,737,668 samples, 0.23%)</title><rect x="21.0287%" y="101" width="0.2261%" height="15" fill="rgb(233,36,39)"/><text x="21.2787%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,601,188 samples, 0.18%)</title><rect x="21.0735%" y="85" width="0.1813%" height="15" fill="rgb(226,3,54)"/><text x="21.3235%" y="95.50"></text></g><g><title>coherent_trait (14,787,997 samples, 0.58%)</title><rect x="20.7080%" y="133" width="0.5828%" height="15" fill="rgb(245,192,40)"/><text x="20.9580%" y="143.50"></text></g><g><title>specialization_graph_of (14,099,810 samples, 0.56%)</title><rect x="20.7351%" y="117" width="0.5556%" height="15" fill="rgb(238,167,29)"/><text x="20.9851%" y="127.50"></text></g><g><title>coherence_checking (14,999,260 samples, 0.59%)</title><rect x="20.7071%" y="149" width="0.5911%" height="15" fill="rgb(232,182,51)"/><text x="20.9571%" y="159.50"></text></g><g><title>dropck_outlives (3,578,319 samples, 0.14%)</title><rect x="30.0353%" y="101" width="0.1410%" height="15" fill="rgb(231,60,39)"/><text x="30.2853%" y="111.50"></text></g><g><title>evaluate_obligation (5,494,631 samples, 0.22%)</title><rect x="30.1763%" y="101" width="0.2165%" height="15" fill="rgb(208,69,12)"/><text x="30.4263%" y="111.50"></text></g><g><title>item_bodies_checking (232,839,489 samples, 9.18%)</title><rect x="21.3047%" y="149" width="9.1758%" height="15" fill="rgb(235,93,37)"/><text x="21.5547%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (232,835,309 samples, 9.18%)</title><rect x="21.3049%" y="133" width="9.1756%" height="15" fill="rgb(213,116,39)"/><text x="21.5549%" y="143.50">typeck_item_b..</text></g><g><title>typeck (232,363,295 samples, 9.16%)</title><rect x="21.3235%" y="117" width="9.1570%" height="15" fill="rgb(222,207,29)"/><text x="21.5735%" y="127.50">typeck</text></g><g><title>item_types_checking (12,809,616 samples, 0.50%)</title><rect x="30.4805%" y="149" width="0.5048%" height="15" fill="rgb(206,96,30)"/><text x="30.7305%" y="159.50"></text></g><g><title>check_mod_item_types (12,805,476 samples, 0.50%)</title><rect x="30.4807%" y="133" width="0.5046%" height="15" fill="rgb(218,138,4)"/><text x="30.7307%" y="143.50"></text></g><g><title>is_late_bound_map (3,516,719 samples, 0.14%)</title><rect x="31.1765%" y="101" width="0.1386%" height="15" fill="rgb(250,191,14)"/><text x="31.4265%" y="111.50"></text></g><g><title>resolve_lifetimes (3,409,799 samples, 0.13%)</title><rect x="31.1807%" y="85" width="0.1344%" height="15" fill="rgb(239,60,40)"/><text x="31.4307%" y="95.50"></text></g><g><title>generics_of (5,155,829 samples, 0.20%)</title><rect x="31.1476%" y="117" width="0.2032%" height="15" fill="rgb(206,27,48)"/><text x="31.3976%" y="127.50"></text></g><g><title>predicates_of (3,420,622 samples, 0.13%)</title><rect x="31.3611%" y="117" width="0.1348%" height="15" fill="rgb(225,35,8)"/><text x="31.6111%" y="127.50"></text></g><g><title>predicates_defined_on (3,038,708 samples, 0.12%)</title><rect x="31.3761%" y="101" width="0.1197%" height="15" fill="rgb(250,213,24)"/><text x="31.6261%" y="111.50"></text></g><g><title>type_collecting (13,467,283 samples, 0.53%)</title><rect x="30.9854%" y="149" width="0.5307%" height="15" fill="rgb(247,123,22)"/><text x="31.2354%" y="159.50"></text></g><g><title>collect_mod_item_types (13,455,602 samples, 0.53%)</title><rect x="30.9858%" y="133" width="0.5303%" height="15" fill="rgb(231,138,38)"/><text x="31.2358%" y="143.50"></text></g><g><title>region_scope_tree (3,644,524 samples, 0.14%)</title><rect x="32.3915%" y="117" width="0.1436%" height="15" fill="rgb(231,145,46)"/><text x="32.6415%" y="127.50"></text></g><g><title>check_impl_item_well_formed (24,650,546 samples, 0.97%)</title><rect x="31.5687%" y="133" width="0.9714%" height="15" fill="rgb(251,118,11)"/><text x="31.8187%" y="143.50"></text></g><g><title>analysis (572,005,164 samples, 22.54%)</title><rect x="10.3933%" y="181" width="22.5416%" height="15" fill="rgb(217,147,25)"/><text x="10.6433%" y="191.50">analysis</text></g><g><title>type_check_crate (310,564,811 samples, 12.24%)</title><rect x="20.6962%" y="165" width="12.2388%" height="15" fill="rgb(247,81,37)"/><text x="20.9462%" y="175.50">type_check_crate</text></g><g><title>wf_checking (35,968,348 samples, 1.42%)</title><rect x="31.5175%" y="149" width="1.4174%" height="15" fill="rgb(209,12,38)"/><text x="31.7675%" y="159.50"></text></g><g><title>check_item_well_formed (10,018,614 samples, 0.39%)</title><rect x="32.5402%" y="133" width="0.3948%" height="15" fill="rgb(227,1,9)"/><text x="32.7902%" y="143.50"></text></g><g><title>fn_abi_of_instance (12,741,762 samples, 0.50%)</title><rect x="34.6273%" y="149" width="0.5021%" height="15" fill="rgb(248,47,43)"/><text x="34.8773%" y="159.50"></text></g><g><title>codegen_module (55,710,011 samples, 2.20%)</title><rect x="33.0170%" y="165" width="2.1954%" height="15" fill="rgb(221,10,30)"/><text x="33.2670%" y="175.50">c..</text></g><g><title>optimized_mir (8,490,025 samples, 0.33%)</title><rect x="35.4671%" y="117" width="0.3346%" height="15" fill="rgb(210,229,1)"/><text x="35.7171%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,287,164 samples, 0.13%)</title><rect x="35.6721%" y="101" width="0.1295%" height="15" fill="rgb(222,148,37)"/><text x="35.9221%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,231,584 samples, 0.13%)</title><rect x="35.8618%" y="101" width="0.1274%" height="15" fill="rgb(234,67,33)"/><text x="36.1118%" y="111.50"></text></g><g><title>specialization_graph_of (3,066,022 samples, 0.12%)</title><rect x="36.0164%" y="101" width="0.1208%" height="15" fill="rgb(247,98,35)"/><text x="36.2664%" y="111.50"></text></g><g><title>resolve_instance (8,784,272 samples, 0.35%)</title><rect x="35.8017%" y="117" width="0.3462%" height="15" fill="rgb(247,138,52)"/><text x="36.0517%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (26,618,061 samples, 1.05%)</title><rect x="35.2147%" y="133" width="1.0490%" height="15" fill="rgb(213,79,30)"/><text x="35.4647%" y="143.50"></text></g><g><title>monomorphization_collector (26,956,065 samples, 1.06%)</title><rect x="35.2146%" y="149" width="1.0623%" height="15" fill="rgb(246,177,23)"/><text x="35.4646%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (2,595,479 samples, 0.10%)</title><rect x="36.2774%" y="133" width="0.1023%" height="15" fill="rgb(230,62,27)"/><text x="36.5274%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (30,672,848 samples, 1.21%)</title><rect x="35.2128%" y="165" width="1.2088%" height="15" fill="rgb(216,154,8)"/><text x="35.4628%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,671,921 samples, 0.14%)</title><rect x="36.2768%" y="149" width="0.1447%" height="15" fill="rgb(244,35,45)"/><text x="36.5268%" y="159.50"></text></g><g><title>codegen_crate (88,538,583 samples, 3.49%)</title><rect x="32.9352%" y="181" width="3.4891%" height="15" fill="rgb(251,115,12)"/><text x="33.1852%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (450,836,831 samples, 17.77%)</title><rect x="36.4244%" y="181" width="17.7666%" height="15" fill="rgb(240,54,50)"/><text x="36.6744%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (425,842,125 samples, 16.78%)</title><rect x="37.4094%" y="165" width="16.7816%" height="15" fill="rgb(233,84,52)"/><text x="37.6594%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (211,104,958 samples, 8.32%)</title><rect x="54.7614%" y="165" width="8.3192%" height="15" fill="rgb(207,117,47)"/><text x="55.0114%" y="175.50">LLVM_lto_opt..</text></g><g><title>LLVM_module_codegen (251,363,321 samples, 9.91%)</title><rect x="63.0806%" y="165" width="9.9058%" height="15" fill="rgb(249,43,39)"/><text x="63.3306%" y="175.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (248,721,108 samples, 9.80%)</title><rect x="63.1848%" y="149" width="9.8016%" height="15" fill="rgb(209,38,44)"/><text x="63.4348%" y="159.50">LLVM_module_co..</text></g><g><title>LLVM_thin_lto_import (13,251,059 samples, 0.52%)</title><rect x="72.9864%" y="165" width="0.5222%" height="15" fill="rgb(236,212,23)"/><text x="73.2364%" y="175.50"></text></g><g><title>codegen_module_perform_lto (491,454,406 samples, 19.37%)</title><rect x="54.1910%" y="181" width="19.3673%" height="15" fill="rgb(242,79,21)"/><text x="54.4410%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (4,438,219 samples, 0.17%)</title><rect x="83.8182%" y="133" width="0.1749%" height="15" fill="rgb(211,96,35)"/><text x="84.0682%" y="143.50"></text></g><g><title>metadata_register_crate (3,471,179 samples, 0.14%)</title><rect x="83.8563%" y="117" width="0.1368%" height="15" fill="rgb(253,215,40)"/><text x="84.1063%" y="127.50"></text></g><g><title>metadata_register_crate (2,662,959 samples, 0.10%)</title><rect x="83.8882%" y="101" width="0.1049%" height="15" fill="rgb(211,81,21)"/><text x="84.1382%" y="111.50"></text></g><g><title>macro_expand_crate (262,758,718 samples, 10.35%)</title><rect x="73.6386%" y="165" width="10.3548%" height="15" fill="rgb(208,190,38)"/><text x="73.8886%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (262,741,048 samples, 10.35%)</title><rect x="73.6392%" y="149" width="10.3541%" height="15" fill="rgb(235,213,38)"/><text x="73.8892%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (19,904,466 samples, 0.78%)</title><rect x="84.0340%" y="149" width="0.7844%" height="15" fill="rgb(237,122,38)"/><text x="84.2840%" y="159.50"></text></g><g><title>configure_and_expand (287,201,426 samples, 11.32%)</title><rect x="73.5583%" y="181" width="11.3181%" height="15" fill="rgb(244,218,35)"/><text x="73.8083%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (22,345,794 samples, 0.88%)</title><rect x="83.9958%" y="165" width="0.8806%" height="15" fill="rgb(240,68,47)"/><text x="84.2458%" y="175.50"></text></g><g><title>early_lint_checks (5,429,751 samples, 0.21%)</title><rect x="84.9649%" y="181" width="0.2140%" height="15" fill="rgb(210,16,53)"/><text x="85.2149%" y="191.50"></text></g><g><title>free_global_ctxt (15,826,469 samples, 0.62%)</title><rect x="85.1789%" y="181" width="0.6237%" height="15" fill="rgb(235,124,12)"/><text x="85.4289%" y="191.50"></text></g><g><title>layout_of (3,959,791 samples, 0.16%)</title><rect x="88.0035%" y="149" width="0.1560%" height="15" fill="rgb(224,169,11)"/><text x="88.2535%" y="159.50"></text></g><g><title>is_copy_raw (5,755,882 samples, 0.23%)</title><rect x="90.1488%" y="117" width="0.2268%" height="15" fill="rgb(250,166,2)"/><text x="90.3988%" y="127.50"></text></g><g><title>evaluate_obligation (4,802,951 samples, 0.19%)</title><rect x="90.1864%" y="101" width="0.1893%" height="15" fill="rgb(242,216,29)"/><text x="90.4364%" y="111.50"></text></g><g><title>needs_drop_raw (6,378,617 samples, 0.25%)</title><rect x="90.1257%" y="133" width="0.2514%" height="15" fill="rgb(230,116,27)"/><text x="90.3757%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (57,372,745 samples, 2.26%)</title><rect x="88.1596%" y="149" width="2.2610%" height="15" fill="rgb(228,99,48)"/><text x="88.4096%" y="159.50">m..</text></g><g><title>optimized_mir (86,984,354 samples, 3.43%)</title><rect x="86.9934%" y="165" width="3.4279%" height="15" fill="rgb(253,11,6)"/><text x="87.2434%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (118,631,544 samples, 4.68%)</title><rect x="85.8026%" y="181" width="4.6750%" height="15" fill="rgb(247,143,39)"/><text x="86.0526%" y="191.50">gener..</text></g><g><title>hir_lowering (26,272,098 samples, 1.04%)</title><rect x="90.4776%" y="181" width="1.0353%" height="15" fill="rgb(236,97,10)"/><text x="90.7276%" y="191.50"></text></g><g><title>finish_ongoing_codegen (201,631,076 samples, 7.95%)</title><rect x="91.5136%" y="165" width="7.9459%" height="15" fill="rgb(233,208,19)"/><text x="91.7636%" y="175.50">finish_ongo..</text></g><g><title>link_crate (6,632,755 samples, 0.26%)</title><rect x="99.4595%" y="165" width="0.2614%" height="15" fill="rgb(216,164,2)"/><text x="99.7095%" y="175.50"></text></g><g><title>link_binary (6,471,994 samples, 0.26%)</title><rect x="99.4659%" y="149" width="0.2550%" height="15" fill="rgb(220,129,5)"/><text x="99.7159%" y="159.50"></text></g><g><title>link_rlib (5,637,274 samples, 0.22%)</title><rect x="99.4988%" y="133" width="0.2222%" height="15" fill="rgb(242,17,10)"/><text x="99.7488%" y="143.50"></text></g><g><title>link (208,291,961 samples, 8.21%)</title><rect x="91.5129%" y="181" width="8.2084%" height="15" fill="rgb(242,107,0)"/><text x="91.7629%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,597,901 samples, 0.14%)</title><rect x="99.7624%" y="181" width="0.1418%" height="15" fill="rgb(251,28,31)"/><text x="100.0124%" y="191.50"></text></g><g><title>all (2,537,548,420 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,537,548,420 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>