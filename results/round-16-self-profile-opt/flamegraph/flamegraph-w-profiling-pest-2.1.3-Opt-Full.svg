<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (209,834,171 samples, 8.26%)</title><rect x="0.1356%" y="277" width="8.2594%" height="15" fill="rgb(227,0,7)"/><text x="0.3856%" y="287.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,417,701 samples, 0.13%)</title><rect x="14.4638%" y="165" width="0.1345%" height="15" fill="rgb(217,0,24)"/><text x="14.7138%" y="175.50"></text></g><g><title>resolve_instance (2,841,083 samples, 0.11%)</title><rect x="14.5984%" y="165" width="0.1118%" height="15" fill="rgb(221,193,54)"/><text x="14.8484%" y="175.50"></text></g><g><title>thir_body (4,954,707 samples, 0.20%)</title><rect x="14.7156%" y="165" width="0.1950%" height="15" fill="rgb(248,212,6)"/><text x="14.9656%" y="175.50"></text></g><g><title>mir_const (32,395,219 samples, 1.28%)</title><rect x="13.6388%" y="213" width="1.2751%" height="15" fill="rgb(208,68,35)"/><text x="13.8888%" y="223.50"></text></g><g><title>unsafety_check_result (27,982,721 samples, 1.10%)</title><rect x="13.8125%" y="197" width="1.1014%" height="15" fill="rgb(232,128,0)"/><text x="14.0625%" y="207.50"></text></g><g><title>mir_built (24,696,611 samples, 0.97%)</title><rect x="13.9418%" y="181" width="0.9721%" height="15" fill="rgb(207,160,47)"/><text x="14.1918%" y="191.50"></text></g><g><title>thir_body (41,338,093 samples, 1.63%)</title><rect x="18.2630%" y="133" width="1.6271%" height="15" fill="rgb(228,23,34)"/><text x="18.5130%" y="143.50"></text></g><g><title>mir_const_qualif (125,510,499 samples, 4.94%)</title><rect x="14.9502%" y="197" width="4.9403%" height="15" fill="rgb(218,30,26)"/><text x="15.2002%" y="207.50">mir_co..</text></g><g><title>mir_const (80,613,143 samples, 3.17%)</title><rect x="16.7175%" y="181" width="3.1731%" height="15" fill="rgb(220,122,19)"/><text x="16.9675%" y="191.50">mir..</text></g><g><title>unsafety_check_result (79,111,185 samples, 3.11%)</title><rect x="16.7766%" y="165" width="3.1140%" height="15" fill="rgb(250,228,42)"/><text x="17.0266%" y="175.50">uns..</text></g><g><title>mir_built (78,243,268 samples, 3.08%)</title><rect x="16.8107%" y="149" width="3.0798%" height="15" fill="rgb(240,193,28)"/><text x="17.0607%" y="159.50">mir..</text></g><g><title>mir_promoted (190,650,738 samples, 7.50%)</title><rect x="12.3875%" y="229" width="7.5043%" height="15" fill="rgb(216,20,37)"/><text x="12.6375%" y="239.50">mir_promot..</text></g><g><title>mir_const_qualif (126,466,342 samples, 4.98%)</title><rect x="14.9139%" y="213" width="4.9779%" height="15" fill="rgb(206,188,39)"/><text x="15.1639%" y="223.50">mir_co..</text></g><g><title>type_op_ascribe_user_type (2,847,697 samples, 0.11%)</title><rect x="19.8919%" y="229" width="0.1121%" height="15" fill="rgb(217,207,13)"/><text x="20.1419%" y="239.50"></text></g><g><title>type_op_prove_predicate (11,971,247 samples, 0.47%)</title><rect x="20.1252%" y="229" width="0.4712%" height="15" fill="rgb(231,73,38)"/><text x="20.3752%" y="239.50"></text></g><g><title>MIR_borrow_checking (304,505,558 samples, 11.99%)</title><rect x="8.6121%" y="261" width="11.9859%" height="15" fill="rgb(225,20,46)"/><text x="8.8621%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (303,723,704 samples, 11.96%)</title><rect x="8.6429%" y="245" width="11.9551%" height="15" fill="rgb(210,31,41)"/><text x="8.8929%" y="255.50">mir_borrowck</text></g><g><title>check_mod_attrs (8,382,425 samples, 0.33%)</title><rect x="20.7238%" y="245" width="0.3299%" height="15" fill="rgb(221,200,47)"/><text x="20.9738%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (2,620,269 samples, 0.10%)</title><rect x="21.1525%" y="245" width="0.1031%" height="15" fill="rgb(226,26,5)"/><text x="21.4025%" y="255.50"></text></g><g><title>misc_checking_1 (13,809,343 samples, 0.54%)</title><rect x="20.7209%" y="261" width="0.5436%" height="15" fill="rgb(249,33,26)"/><text x="20.9709%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (5,748,354 samples, 0.23%)</title><rect x="21.2646%" y="245" width="0.2263%" height="15" fill="rgb(235,183,28)"/><text x="21.5146%" y="255.50"></text></g><g><title>check_mod_liveness (3,979,004 samples, 0.16%)</title><rect x="21.3343%" y="229" width="0.1566%" height="15" fill="rgb(221,5,38)"/><text x="21.5843%" y="239.50"></text></g><g><title>misc_checking_2 (9,412,555 samples, 0.37%)</title><rect x="21.2645%" y="261" width="0.3705%" height="15" fill="rgb(247,18,42)"/><text x="21.5145%" y="271.50"></text></g><g><title>match_checking (3,660,411 samples, 0.14%)</title><rect x="21.4909%" y="245" width="0.1441%" height="15" fill="rgb(241,131,45)"/><text x="21.7409%" y="255.50"></text></g><g><title>check_match (3,472,750 samples, 0.14%)</title><rect x="21.4983%" y="229" width="0.1367%" height="15" fill="rgb(249,31,29)"/><text x="21.7483%" y="239.50"></text></g><g><title>death_checking (3,669,681 samples, 0.14%)</title><rect x="21.7141%" y="245" width="0.1444%" height="15" fill="rgb(225,111,53)"/><text x="21.9641%" y="255.50"></text></g><g><title>eval_to_const_value_raw (59,679,956 samples, 2.35%)</title><rect x="22.3265%" y="149" width="2.3491%" height="15" fill="rgb(238,160,17)"/><text x="22.5765%" y="159.50">e..</text></g><g><title>eval_to_const_value_raw (59,627,456 samples, 2.35%)</title><rect x="22.3286%" y="133" width="2.3470%" height="15" fill="rgb(214,148,48)"/><text x="22.5786%" y="143.50">e..</text></g><g><title>eval_to_allocation_raw (59,541,284 samples, 2.34%)</title><rect x="22.3320%" y="117" width="2.3436%" height="15" fill="rgb(232,36,49)"/><text x="22.5820%" y="127.50">e..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (55,825,629 samples, 2.20%)</title><rect x="22.4782%" y="101" width="2.1974%" height="15" fill="rgb(209,103,24)"/><text x="22.7282%" y="111.50">t..</text></g><g><title>eval_to_const_value_raw (55,613,717 samples, 2.19%)</title><rect x="22.4866%" y="85" width="2.1891%" height="15" fill="rgb(229,88,8)"/><text x="22.7366%" y="95.50">e..</text></g><g><title>eval_to_const_value_raw (55,537,157 samples, 2.19%)</title><rect x="22.4896%" y="69" width="2.1860%" height="15" fill="rgb(213,181,19)"/><text x="22.7396%" y="79.50">e..</text></g><g><title>eval_to_allocation_raw (55,400,907 samples, 2.18%)</title><rect x="22.4950%" y="53" width="2.1807%" height="15" fill="rgb(254,191,54)"/><text x="22.7450%" y="63.50">e..</text></g><g><title>promoted_mir (2,891,777 samples, 0.11%)</title><rect x="24.5618%" y="37" width="0.1138%" height="15" fill="rgb(241,83,37)"/><text x="24.8118%" y="47.50"></text></g><g><title>eval_to_const_value_raw (61,213,072 samples, 2.41%)</title><rect x="22.2686%" y="213" width="2.4095%" height="15" fill="rgb(233,36,39)"/><text x="22.5186%" y="223.50">ev..</text></g><g><title>eval_to_const_value_raw (61,203,622 samples, 2.41%)</title><rect x="22.2689%" y="197" width="2.4091%" height="15" fill="rgb(226,3,54)"/><text x="22.5189%" y="207.50">ev..</text></g><g><title>eval_to_allocation_raw (61,199,512 samples, 2.41%)</title><rect x="22.2691%" y="181" width="2.4089%" height="15" fill="rgb(245,192,40)"/><text x="22.5191%" y="191.50">ev..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (60,005,172 samples, 2.36%)</title><rect x="22.3161%" y="165" width="2.3619%" height="15" fill="rgb(238,167,29)"/><text x="22.5661%" y="175.50">tr..</text></g><g><title>crate_lints (74,089,788 samples, 2.92%)</title><rect x="21.8587%" y="229" width="2.9163%" height="15" fill="rgb(232,182,51)"/><text x="22.1087%" y="239.50">cr..</text></g><g><title>lint_checking (91,933,547 samples, 3.62%)</title><rect x="21.8585%" y="245" width="3.6187%" height="15" fill="rgb(231,60,39)"/><text x="22.1085%" y="255.50">lint..</text></g><g><title>module_lints (17,839,929 samples, 0.70%)</title><rect x="24.7750%" y="229" width="0.7022%" height="15" fill="rgb(208,69,12)"/><text x="25.0250%" y="239.50"></text></g><g><title>lint_mod (17,820,279 samples, 0.70%)</title><rect x="24.7757%" y="213" width="0.7014%" height="15" fill="rgb(235,93,37)"/><text x="25.0257%" y="223.50"></text></g><g><title>privacy_access_levels (3,046,354 samples, 0.12%)</title><rect x="25.4772%" y="245" width="0.1199%" height="15" fill="rgb(213,116,39)"/><text x="25.7272%" y="255.50"></text></g><g><title>privacy_checking_modules (13,084,045 samples, 0.52%)</title><rect x="25.5971%" y="245" width="0.5150%" height="15" fill="rgb(222,207,29)"/><text x="25.8471%" y="255.50"></text></g><g><title>check_mod_privacy (13,064,125 samples, 0.51%)</title><rect x="25.5979%" y="229" width="0.5142%" height="15" fill="rgb(206,96,30)"/><text x="25.8479%" y="239.50"></text></g><g><title>misc_checking_3 (113,804,519 samples, 4.48%)</title><rect x="21.6350%" y="261" width="4.4795%" height="15" fill="rgb(218,138,4)"/><text x="21.8850%" y="271.50">misc_..</text></g><g><title>impl_parent (3,083,951 samples, 0.12%)</title><rect x="26.3241%" y="197" width="0.1214%" height="15" fill="rgb(250,191,14)"/><text x="26.5741%" y="207.50"></text></g><g><title>impl_trait_ref (6,171,196 samples, 0.24%)</title><rect x="26.4455%" y="197" width="0.2429%" height="15" fill="rgb(239,60,40)"/><text x="26.6955%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,972,482 samples, 0.20%)</title><rect x="26.4927%" y="181" width="0.1957%" height="15" fill="rgb(206,27,48)"/><text x="26.7427%" y="191.50"></text></g><g><title>coherent_trait (15,279,790 samples, 0.60%)</title><rect x="26.1266%" y="229" width="0.6014%" height="15" fill="rgb(225,35,8)"/><text x="26.3766%" y="239.50"></text></g><g><title>specialization_graph_of (14,855,965 samples, 0.58%)</title><rect x="26.1433%" y="213" width="0.5848%" height="15" fill="rgb(250,213,24)"/><text x="26.3933%" y="223.50"></text></g><g><title>coherence_checking (15,475,913 samples, 0.61%)</title><rect x="26.1255%" y="245" width="0.6092%" height="15" fill="rgb(247,123,22)"/><text x="26.3755%" y="255.50"></text></g><g><title>evaluate_obligation (7,169,254 samples, 0.28%)</title><rect x="30.2039%" y="197" width="0.2822%" height="15" fill="rgb(231,138,38)"/><text x="30.4539%" y="207.50"></text></g><g><title>typeck (29,102,144 samples, 1.15%)</title><rect x="30.6359%" y="197" width="1.1455%" height="15" fill="rgb(231,145,46)"/><text x="30.8859%" y="207.50"></text></g><g><title>item_bodies_checking (128,193,031 samples, 5.05%)</title><rect x="26.7418%" y="245" width="5.0459%" height="15" fill="rgb(251,118,11)"/><text x="26.9918%" y="255.50">item_b..</text></g><g><title>typeck_item_bodies (128,188,951 samples, 5.05%)</title><rect x="26.7419%" y="229" width="5.0457%" height="15" fill="rgb(217,147,25)"/><text x="26.9919%" y="239.50">typeck..</text></g><g><title>typeck (127,760,765 samples, 5.03%)</title><rect x="26.7588%" y="213" width="5.0289%" height="15" fill="rgb(247,81,37)"/><text x="27.0088%" y="223.50">typeck</text></g><g><title>item_types_checking (57,648,383 samples, 2.27%)</title><rect x="31.7877%" y="245" width="2.2691%" height="15" fill="rgb(209,12,38)"/><text x="32.0377%" y="255.50">i..</text></g><g><title>check_mod_item_types (57,626,693 samples, 2.27%)</title><rect x="31.7885%" y="229" width="2.2683%" height="15" fill="rgb(227,1,9)"/><text x="32.0385%" y="239.50">c..</text></g><g><title>typeck (54,366,248 samples, 2.14%)</title><rect x="31.9169%" y="213" width="2.1400%" height="15" fill="rgb(248,47,43)"/><text x="32.1669%" y="223.50">t..</text></g><g><title>late_bound_vars_map (5,772,616 samples, 0.23%)</title><rect x="34.3126%" y="165" width="0.2272%" height="15" fill="rgb(221,10,30)"/><text x="34.5626%" y="175.50"></text></g><g><title>resolve_lifetimes (5,738,996 samples, 0.23%)</title><rect x="34.3139%" y="149" width="0.2259%" height="15" fill="rgb(210,229,1)"/><text x="34.5639%" y="159.50"></text></g><g><title>lint_levels (5,153,417 samples, 0.20%)</title><rect x="34.3369%" y="133" width="0.2028%" height="15" fill="rgb(222,148,37)"/><text x="34.5869%" y="143.50"></text></g><g><title>explicit_predicates_of (6,594,112 samples, 0.26%)</title><rect x="34.2831%" y="181" width="0.2596%" height="15" fill="rgb(234,67,33)"/><text x="34.5331%" y="191.50"></text></g><g><title>predicates_of (7,904,885 samples, 0.31%)</title><rect x="34.2600%" y="213" width="0.3112%" height="15" fill="rgb(247,98,35)"/><text x="34.5100%" y="223.50"></text></g><g><title>predicates_defined_on (7,690,394 samples, 0.30%)</title><rect x="34.2684%" y="197" width="0.3027%" height="15" fill="rgb(247,138,52)"/><text x="34.5184%" y="207.50"></text></g><g><title>type_collecting (15,278,820 samples, 0.60%)</title><rect x="34.0571%" y="245" width="0.6014%" height="15" fill="rgb(213,79,30)"/><text x="34.3071%" y="255.50"></text></g><g><title>collect_mod_item_types (15,245,830 samples, 0.60%)</title><rect x="34.0584%" y="229" width="0.6001%" height="15" fill="rgb(246,177,23)"/><text x="34.3084%" y="239.50"></text></g><g><title>check_impl_item_well_formed (13,656,925 samples, 0.54%)</title><rect x="34.7123%" y="229" width="0.5376%" height="15" fill="rgb(230,62,27)"/><text x="34.9623%" y="239.50"></text></g><g><title>region_scope_tree (7,983,797 samples, 0.31%)</title><rect x="35.6230%" y="213" width="0.3143%" height="15" fill="rgb(216,154,8)"/><text x="35.8730%" y="223.50"></text></g><g><title>check_item_well_formed (17,789,824 samples, 0.70%)</title><rect x="35.2498%" y="229" width="0.7002%" height="15" fill="rgb(244,35,45)"/><text x="35.4998%" y="239.50"></text></g><g><title>analysis (700,147,202 samples, 27.56%)</title><rect x="8.3951%" y="277" width="27.5590%" height="15" fill="rgb(251,115,12)"/><text x="8.6451%" y="287.50">analysis</text></g><g><title>type_check_crate (249,978,150 samples, 9.84%)</title><rect x="26.1145%" y="261" width="9.8396%" height="15" fill="rgb(240,54,50)"/><text x="26.3645%" y="271.50">type_check_cra..</text></g><g><title>wf_checking (32,886,567 samples, 1.29%)</title><rect x="34.6596%" y="245" width="1.2945%" height="15" fill="rgb(233,84,52)"/><text x="34.9096%" y="255.50"></text></g><g><title>param_env (4,045,971 samples, 0.16%)</title><rect x="38.3120%" y="229" width="0.1593%" height="15" fill="rgb(207,117,47)"/><text x="38.5620%" y="239.50"></text></g><g><title>fn_abi_of_instance (13,764,415 samples, 0.54%)</title><rect x="37.9690%" y="245" width="0.5418%" height="15" fill="rgb(249,43,39)"/><text x="38.2190%" y="255.50"></text></g><g><title>codegen_module (64,482,849 samples, 2.54%)</title><rect x="36.0376%" y="261" width="2.5382%" height="15" fill="rgb(209,38,44)"/><text x="36.2876%" y="271.50">co..</text></g><g><title>codegen_fn_attrs (2,723,047 samples, 0.11%)</title><rect x="38.7015%" y="213" width="0.1072%" height="15" fill="rgb(236,212,23)"/><text x="38.9515%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,930,525 samples, 0.12%)</title><rect x="39.0362%" y="197" width="0.1154%" height="15" fill="rgb(242,79,21)"/><text x="39.2862%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,813,776 samples, 0.15%)</title><rect x="39.1515%" y="197" width="0.1501%" height="15" fill="rgb(211,96,35)"/><text x="39.4015%" y="207.50"></text></g><g><title>optimized_mir (11,894,894 samples, 0.47%)</title><rect x="38.8418%" y="213" width="0.4682%" height="15" fill="rgb(253,215,40)"/><text x="39.0918%" y="223.50"></text></g><g><title>codegen_fulfill_obligation (3,791,953 samples, 0.15%)</title><rect x="39.3572%" y="197" width="0.1493%" height="15" fill="rgb(211,81,21)"/><text x="39.6072%" y="207.50"></text></g><g><title>resolve_instance (8,798,886 samples, 0.35%)</title><rect x="39.3100%" y="213" width="0.3463%" height="15" fill="rgb(208,190,38)"/><text x="39.5600%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (29,519,329 samples, 1.16%)</title><rect x="38.5782%" y="229" width="1.1619%" height="15" fill="rgb(235,213,38)"/><text x="38.8282%" y="239.50"></text></g><g><title>monomorphization_collector (29,958,274 samples, 1.18%)</title><rect x="38.5781%" y="245" width="1.1792%" height="15" fill="rgb(237,122,38)"/><text x="38.8281%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (33,458,613 samples, 1.32%)</title><rect x="38.5761%" y="261" width="1.3170%" height="15" fill="rgb(244,218,35)"/><text x="38.8261%" y="271.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,450,738 samples, 0.14%)</title><rect x="39.7573%" y="245" width="0.1358%" height="15" fill="rgb(240,68,47)"/><text x="40.0073%" y="255.50"></text></g><g><title>codegen_crate (100,131,718 samples, 3.94%)</title><rect x="35.9544%" y="277" width="3.9414%" height="15" fill="rgb(210,16,53)"/><text x="36.2044%" y="287.50">code..</text></g><g><title>codegen_module_optimize (621,593,423 samples, 24.47%)</title><rect x="39.8958%" y="277" width="24.4670%" height="15" fill="rgb(235,124,12)"/><text x="40.1458%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (594,134,518 samples, 23.39%)</title><rect x="40.9766%" y="261" width="23.3862%" height="15" fill="rgb(224,169,11)"/><text x="41.2266%" y="271.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (156,481,759 samples, 6.16%)</title><rect x="65.0097%" y="261" width="6.1594%" height="15" fill="rgb(250,166,2)"/><text x="65.2597%" y="271.50">LLVM_lto..</text></g><g><title>LLVM_module_codegen (204,419,520 samples, 8.05%)</title><rect x="71.1691%" y="261" width="8.0463%" height="15" fill="rgb(242,216,29)"/><text x="71.4191%" y="271.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (201,837,391 samples, 7.94%)</title><rect x="71.2707%" y="245" width="7.9447%" height="15" fill="rgb(230,116,27)"/><text x="71.5207%" y="255.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (10,151,674 samples, 0.40%)</title><rect x="79.2154%" y="261" width="0.3996%" height="15" fill="rgb(228,99,48)"/><text x="79.4654%" y="271.50"></text></g><g><title>codegen_module_perform_lto (389,238,438 samples, 15.32%)</title><rect x="64.3628%" y="277" width="15.3211%" height="15" fill="rgb(253,11,6)"/><text x="64.6128%" y="287.50">codegen_module_perform_..</text></g><g><title>metadata_register_crate (2,710,439 samples, 0.11%)</title><rect x="86.3119%" y="229" width="0.1067%" height="15" fill="rgb(247,143,39)"/><text x="86.5619%" y="239.50"></text></g><g><title>macro_expand_crate (174,553,657 samples, 6.87%)</title><rect x="79.8504%" y="261" width="6.8707%" height="15" fill="rgb(236,97,10)"/><text x="80.1004%" y="271.50">macro_exp..</text></g><g><title>expand_crate (174,519,477 samples, 6.87%)</title><rect x="79.8517%" y="245" width="6.8694%" height="15" fill="rgb(233,208,19)"/><text x="80.1017%" y="255.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (7,686,247 samples, 0.30%)</title><rect x="86.4186%" y="229" width="0.3025%" height="15" fill="rgb(216,164,2)"/><text x="86.6686%" y="239.50"></text></g><g><title>late_resolve_crate (7,998,180 samples, 0.31%)</title><rect x="86.7432%" y="245" width="0.3148%" height="15" fill="rgb(220,129,5)"/><text x="86.9932%" y="255.50"></text></g><g><title>configure_and_expand (190,840,050 samples, 7.51%)</title><rect x="79.6839%" y="277" width="7.5118%" height="15" fill="rgb(242,17,10)"/><text x="79.9339%" y="287.50">configure_..</text></g><g><title>resolve_crate (12,004,375 samples, 0.47%)</title><rect x="86.7232%" y="261" width="0.4725%" height="15" fill="rgb(242,107,0)"/><text x="86.9732%" y="271.50"></text></g><g><title>drop_ast (4,135,806 samples, 0.16%)</title><rect x="87.1957%" y="277" width="0.1628%" height="15" fill="rgb(251,28,31)"/><text x="87.4457%" y="287.50"></text></g><g><title>early_lint_checks (13,113,867 samples, 0.52%)</title><rect x="87.3595%" y="277" width="0.5162%" height="15" fill="rgb(233,223,10)"/><text x="87.6095%" y="287.50"></text></g><g><title>free_global_ctxt (20,384,607 samples, 0.80%)</title><rect x="87.8757%" y="277" width="0.8024%" height="15" fill="rgb(215,21,27)"/><text x="88.1257%" y="287.50"></text></g><g><title>layout_of (2,764,786 samples, 0.11%)</title><rect x="91.8247%" y="245" width="0.1088%" height="15" fill="rgb(232,23,21)"/><text x="92.0747%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,208,398 samples, 0.56%)</title><rect x="91.9335%" y="245" width="0.5593%" height="15" fill="rgb(244,5,23)"/><text x="92.1835%" y="255.50"></text></g><g><title>optimized_mir (29,515,749 samples, 1.16%)</title><rect x="91.3392%" y="261" width="1.1618%" height="15" fill="rgb(226,81,46)"/><text x="91.5892%" y="271.50"></text></g><g><title>generate_crate_metadata (97,964,033 samples, 3.86%)</title><rect x="88.6780%" y="277" width="3.8560%" height="15" fill="rgb(247,70,30)"/><text x="88.9280%" y="287.50">gene..</text></g><g><title>hir_lowering (42,861,628 samples, 1.69%)</title><rect x="92.5341%" y="277" width="1.6871%" height="15" fill="rgb(212,68,19)"/><text x="92.7841%" y="287.50"></text></g><g><title>finish_ongoing_codegen (129,631,376 samples, 5.10%)</title><rect x="94.2218%" y="261" width="5.1025%" height="15" fill="rgb(240,187,13)"/><text x="94.4718%" y="271.50">finish..</text></g><g><title>link_crate (8,920,190 samples, 0.35%)</title><rect x="99.3244%" y="261" width="0.3511%" height="15" fill="rgb(223,113,26)"/><text x="99.5744%" y="271.50"></text></g><g><title>link_binary (8,793,259 samples, 0.35%)</title><rect x="99.3294%" y="245" width="0.3461%" height="15" fill="rgb(206,192,2)"/><text x="99.5794%" y="255.50"></text></g><g><title>link_rlib (7,654,056 samples, 0.30%)</title><rect x="99.3742%" y="229" width="0.3013%" height="15" fill="rgb(241,108,4)"/><text x="99.6242%" y="239.50"></text></g><g><title>link (138,580,256 samples, 5.45%)</title><rect x="94.2212%" y="277" width="5.4548%" height="15" fill="rgb(247,173,49)"/><text x="94.4712%" y="287.50">link</text></g><g><title>self_profile_alloc_query_strings (4,342,169 samples, 0.17%)</title><rect x="99.7103%" y="277" width="0.1709%" height="15" fill="rgb(224,114,35)"/><text x="99.9603%" y="287.50"></text></g><g><title>all (2,540,537,339 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (2,540,537,339 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (2,843,902 samples, 0.11%)</title><rect x="99.8881%" y="277" width="0.1119%" height="15" fill="rgb(236,23,11)"/><text x="100.1381%" y="287.50"></text></g></svg></svg>