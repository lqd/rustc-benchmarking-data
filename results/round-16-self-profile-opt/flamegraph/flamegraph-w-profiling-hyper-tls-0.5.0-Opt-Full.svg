<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (95,051,058 samples, 13.81%)</title><rect x="0.1058%" y="165" width="13.8135%" height="15" fill="rgb(227,0,7)"/><text x="0.3558%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (781,359 samples, 0.11%)</title><rect x="13.8058%" y="149" width="0.1136%" height="15" fill="rgb(217,0,24)"/><text x="14.0558%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (762,309 samples, 0.11%)</title><rect x="13.8085%" y="133" width="0.1108%" height="15" fill="rgb(221,193,54)"/><text x="14.0585%" y="143.50"></text></g><g><title>is_copy_raw (814,038 samples, 0.12%)</title><rect x="15.7874%" y="37" width="0.1183%" height="15" fill="rgb(248,212,6)"/><text x="16.0374%" y="47.50"></text></g><g><title>needs_drop_raw (1,254,322 samples, 0.18%)</title><rect x="15.7242%" y="53" width="0.1823%" height="15" fill="rgb(208,68,35)"/><text x="15.9742%" y="63.50"></text></g><g><title>specialization_graph_of (1,732,939 samples, 0.25%)</title><rect x="15.9797%" y="37" width="0.2518%" height="15" fill="rgb(232,128,0)"/><text x="16.2297%" y="47.50"></text></g><g><title>resolve_instance (2,298,465 samples, 0.33%)</title><rect x="15.9064%" y="53" width="0.3340%" height="15" fill="rgb(207,160,47)"/><text x="16.1564%" y="63.50"></text></g><g><title>mir_const (7,078,433 samples, 1.03%)</title><rect x="15.2927%" y="101" width="1.0287%" height="15" fill="rgb(228,23,34)"/><text x="15.5427%" y="111.50"></text></g><g><title>unsafety_check_result (6,203,273 samples, 0.90%)</title><rect x="15.4199%" y="85" width="0.9015%" height="15" fill="rgb(218,30,26)"/><text x="15.6699%" y="95.50"></text></g><g><title>mir_built (5,636,705 samples, 0.82%)</title><rect x="15.5022%" y="69" width="0.8192%" height="15" fill="rgb(220,122,19)"/><text x="15.7522%" y="79.50"></text></g><g><title>mir_promoted (7,638,139 samples, 1.11%)</title><rect x="15.2148%" y="117" width="1.1100%" height="15" fill="rgb(250,228,42)"/><text x="15.4648%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (790,438 samples, 0.11%)</title><rect x="16.3248%" y="117" width="0.1149%" height="15" fill="rgb(240,193,28)"/><text x="16.5748%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,114,596 samples, 0.45%)</title><rect x="16.5838%" y="117" width="0.4526%" height="15" fill="rgb(216,20,37)"/><text x="16.8338%" y="127.50"></text></g><g><title>MIR_borrow_checking (21,158,140 samples, 3.07%)</title><rect x="13.9629%" y="149" width="3.0749%" height="15" fill="rgb(206,188,39)"/><text x="14.2129%" y="159.50">MIR..</text></g><g><title>mir_borrowck (21,095,950 samples, 3.07%)</title><rect x="13.9720%" y="133" width="3.0658%" height="15" fill="rgb(217,207,13)"/><text x="14.2220%" y="143.50">mir..</text></g><g><title>check_mod_attrs (781,929 samples, 0.11%)</title><rect x="17.0763%" y="133" width="0.1136%" height="15" fill="rgb(231,73,38)"/><text x="17.3263%" y="143.50"></text></g><g><title>misc_checking_1 (1,620,098 samples, 0.24%)</title><rect x="17.0721%" y="149" width="0.2354%" height="15" fill="rgb(225,20,46)"/><text x="17.3221%" y="159.50"></text></g><g><title>misc_checking_2 (748,839 samples, 0.11%)</title><rect x="17.3075%" y="149" width="0.1088%" height="15" fill="rgb(210,31,41)"/><text x="17.5575%" y="159.50"></text></g><g><title>crate_lints (2,802,942 samples, 0.41%)</title><rect x="17.4792%" y="117" width="0.4073%" height="15" fill="rgb(221,200,47)"/><text x="17.7292%" y="127.50"></text></g><g><title>type_of (1,506,521 samples, 0.22%)</title><rect x="17.6676%" y="101" width="0.2189%" height="15" fill="rgb(226,26,5)"/><text x="17.9176%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (1,135,883 samples, 0.17%)</title><rect x="17.7215%" y="85" width="0.1651%" height="15" fill="rgb(249,33,26)"/><text x="17.9715%" y="95.50"></text></g><g><title>lint_checking (3,049,894 samples, 0.44%)</title><rect x="17.4789%" y="133" width="0.4432%" height="15" fill="rgb(235,183,28)"/><text x="17.7289%" y="143.50"></text></g><g><title>misc_checking_3 (4,308,359 samples, 0.63%)</title><rect x="17.4164%" y="149" width="0.6261%" height="15" fill="rgb(221,5,38)"/><text x="17.6664%" y="159.50"></text></g><g><title>impl_parent (2,799,033 samples, 0.41%)</title><rect x="18.6937%" y="85" width="0.4068%" height="15" fill="rgb(247,18,42)"/><text x="18.9437%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,625,168 samples, 0.24%)</title><rect x="18.8643%" y="69" width="0.2362%" height="15" fill="rgb(241,131,45)"/><text x="19.1143%" y="79.50"></text></g><g><title>impl_trait_ref (6,600,973 samples, 0.96%)</title><rect x="19.1007%" y="85" width="0.9593%" height="15" fill="rgb(249,31,29)"/><text x="19.3507%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,394,200 samples, 0.78%)</title><rect x="19.2761%" y="69" width="0.7839%" height="15" fill="rgb(225,111,53)"/><text x="19.5261%" y="79.50"></text></g><g><title>trait_impls_of (1,036,254 samples, 0.15%)</title><rect x="20.0670%" y="85" width="0.1506%" height="15" fill="rgb(238,160,17)"/><text x="20.3170%" y="95.50"></text></g><g><title>coherent_trait (14,899,278 samples, 2.17%)</title><rect x="18.0525%" y="117" width="2.1653%" height="15" fill="rgb(214,148,48)"/><text x="18.3025%" y="127.50">c..</text></g><g><title>specialization_graph_of (14,880,628 samples, 2.16%)</title><rect x="18.0552%" y="101" width="2.1626%" height="15" fill="rgb(232,36,49)"/><text x="18.3052%" y="111.50">s..</text></g><g><title>coherence_checking (14,961,920 samples, 2.17%)</title><rect x="18.0493%" y="133" width="2.1744%" height="15" fill="rgb(209,103,24)"/><text x="18.2993%" y="143.50">c..</text></g><g><title>evaluate_obligation (771,130 samples, 0.11%)</title><rect x="21.4137%" y="85" width="0.1121%" height="15" fill="rgb(229,88,8)"/><text x="21.6637%" y="95.50"></text></g><g><title>adt_dtorck_constraint (729,828 samples, 0.11%)</title><rect x="23.0228%" y="37" width="0.1061%" height="15" fill="rgb(213,181,19)"/><text x="23.2728%" y="47.50"></text></g><g><title>adt_dtorck_constraint (1,034,483 samples, 0.15%)</title><rect x="22.9851%" y="53" width="0.1503%" height="15" fill="rgb(254,191,54)"/><text x="23.2351%" y="63.50"></text></g><g><title>dropck_outlives (1,580,681 samples, 0.23%)</title><rect x="22.9290%" y="69" width="0.2297%" height="15" fill="rgb(241,83,37)"/><text x="23.1790%" y="79.50"></text></g><g><title>evaluate_obligation (2,721,011 samples, 0.40%)</title><rect x="23.1590%" y="69" width="0.3954%" height="15" fill="rgb(233,36,39)"/><text x="23.4090%" y="79.50"></text></g><g><title>typeck (14,757,298 samples, 2.14%)</title><rect x="21.6812%" y="85" width="2.1446%" height="15" fill="rgb(226,3,54)"/><text x="21.9312%" y="95.50">t..</text></g><g><title>item_bodies_checking (24,787,931 samples, 3.60%)</title><rect x="20.2273%" y="133" width="3.6024%" height="15" fill="rgb(245,192,40)"/><text x="20.4773%" y="143.50">item..</text></g><g><title>typeck_item_bodies (24,785,011 samples, 3.60%)</title><rect x="20.2277%" y="117" width="3.6019%" height="15" fill="rgb(238,167,29)"/><text x="20.4777%" y="127.50">type..</text></g><g><title>typeck (24,743,540 samples, 3.60%)</title><rect x="20.2338%" y="101" width="3.5959%" height="15" fill="rgb(232,182,51)"/><text x="20.4838%" y="111.50">type..</text></g><g><title>adt_destructor (809,319 samples, 0.12%)</title><rect x="23.9769%" y="101" width="0.1176%" height="15" fill="rgb(231,60,39)"/><text x="24.2269%" y="111.50"></text></g><g><title>coherent_trait (804,769 samples, 0.12%)</title><rect x="23.9776%" y="85" width="0.1170%" height="15" fill="rgb(208,69,12)"/><text x="24.2276%" y="95.50"></text></g><g><title>specialization_graph_of (802,839 samples, 0.12%)</title><rect x="23.9779%" y="69" width="0.1167%" height="15" fill="rgb(235,93,37)"/><text x="24.2279%" y="79.50"></text></g><g><title>item_types_checking (1,964,262 samples, 0.29%)</title><rect x="23.8297%" y="133" width="0.2855%" height="15" fill="rgb(213,116,39)"/><text x="24.0797%" y="143.50"></text></g><g><title>check_mod_item_types (1,960,592 samples, 0.28%)</title><rect x="23.8302%" y="117" width="0.2849%" height="15" fill="rgb(222,207,29)"/><text x="24.0802%" y="127.50"></text></g><g><title>explicit_predicates_of (718,436 samples, 0.10%)</title><rect x="24.2443%" y="69" width="0.1044%" height="15" fill="rgb(206,96,30)"/><text x="24.4943%" y="79.50"></text></g><g><title>predicates_of (1,200,141 samples, 0.17%)</title><rect x="24.2281%" y="101" width="0.1744%" height="15" fill="rgb(218,138,4)"/><text x="24.4781%" y="111.50"></text></g><g><title>predicates_defined_on (1,157,141 samples, 0.17%)</title><rect x="24.2344%" y="85" width="0.1682%" height="15" fill="rgb(250,191,14)"/><text x="24.4844%" y="95.50"></text></g><g><title>type_collecting (2,534,489 samples, 0.37%)</title><rect x="24.1155%" y="133" width="0.3683%" height="15" fill="rgb(239,60,40)"/><text x="24.3655%" y="143.50"></text></g><g><title>collect_mod_item_types (2,518,249 samples, 0.37%)</title><rect x="24.1179%" y="117" width="0.3660%" height="15" fill="rgb(206,27,48)"/><text x="24.3679%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,017,655 samples, 0.44%)</title><rect x="24.5014%" y="117" width="0.4385%" height="15" fill="rgb(225,35,8)"/><text x="24.7514%" y="127.50"></text></g><g><title>object_safety_violations (706,048 samples, 0.10%)</title><rect x="25.1548%" y="101" width="0.1026%" height="15" fill="rgb(250,213,24)"/><text x="25.4048%" y="111.50"></text></g><g><title>analysis (78,617,401 samples, 11.43%)</title><rect x="13.9193%" y="165" width="11.4252%" height="15" fill="rgb(247,123,22)"/><text x="14.1693%" y="175.50">analysis</text></g><g><title>type_check_crate (50,245,709 samples, 7.30%)</title><rect x="18.0425%" y="149" width="7.3021%" height="15" fill="rgb(231,138,38)"/><text x="18.2925%" y="159.50">type_check..</text></g><g><title>wf_checking (5,919,967 samples, 0.86%)</title><rect x="24.4842%" y="133" width="0.8603%" height="15" fill="rgb(231,145,46)"/><text x="24.7342%" y="143.50"></text></g><g><title>check_item_well_formed (2,784,022 samples, 0.40%)</title><rect x="24.9400%" y="117" width="0.4046%" height="15" fill="rgb(251,118,11)"/><text x="25.1900%" y="127.50"></text></g><g><title>is_freeze_raw (1,277,092 samples, 0.19%)</title><rect x="28.8622%" y="117" width="0.1856%" height="15" fill="rgb(217,147,25)"/><text x="29.1122%" y="127.50"></text></g><g><title>evaluate_obligation (1,174,352 samples, 0.17%)</title><rect x="28.8771%" y="101" width="0.1707%" height="15" fill="rgb(247,81,37)"/><text x="29.1271%" y="111.50"></text></g><g><title>layout_of (1,223,109 samples, 0.18%)</title><rect x="29.1187%" y="117" width="0.1778%" height="15" fill="rgb(209,12,38)"/><text x="29.3687%" y="127.50"></text></g><g><title>predicates_of (723,022 samples, 0.11%)</title><rect x="29.4816%" y="101" width="0.1051%" height="15" fill="rgb(227,1,9)"/><text x="29.7316%" y="111.50"></text></g><g><title>param_env (2,002,668 samples, 0.29%)</title><rect x="29.2964%" y="117" width="0.2910%" height="15" fill="rgb(248,47,43)"/><text x="29.5464%" y="127.50"></text></g><g><title>fn_abi_of_instance (7,288,353 samples, 1.06%)</title><rect x="28.5589%" y="133" width="1.0592%" height="15" fill="rgb(221,10,30)"/><text x="28.8089%" y="143.50"></text></g><g><title>layout_of (805,960 samples, 0.12%)</title><rect x="29.6452%" y="133" width="0.1171%" height="15" fill="rgb(210,229,1)"/><text x="29.8952%" y="143.50"></text></g><g><title>codegen_module (28,303,982 samples, 4.11%)</title><rect x="25.6795%" y="149" width="4.1133%" height="15" fill="rgb(222,148,37)"/><text x="25.9295%" y="159.50">code..</text></g><g><title>item_attrs (840,980 samples, 0.12%)</title><rect x="30.0150%" y="85" width="0.1222%" height="15" fill="rgb(234,67,33)"/><text x="30.2650%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (809,410 samples, 0.12%)</title><rect x="30.0196%" y="69" width="0.1176%" height="15" fill="rgb(247,98,35)"/><text x="30.2696%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,247,493 samples, 0.18%)</title><rect x="29.9851%" y="101" width="0.1813%" height="15" fill="rgb(247,138,52)"/><text x="30.2351%" y="111.50"></text></g><g><title>mir_shims (1,111,332 samples, 0.16%)</title><rect x="30.2326%" y="101" width="0.1615%" height="15" fill="rgb(213,79,30)"/><text x="30.4826%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,325,948 samples, 0.19%)</title><rect x="30.4335%" y="85" width="0.1927%" height="15" fill="rgb(246,177,23)"/><text x="30.6835%" y="95.50"></text></g><g><title>optimized_mir (1,857,324 samples, 0.27%)</title><rect x="30.3941%" y="101" width="0.2699%" height="15" fill="rgb(230,62,27)"/><text x="30.6441%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,111,891 samples, 0.16%)</title><rect x="30.7455%" y="85" width="0.1616%" height="15" fill="rgb(216,154,8)"/><text x="30.9955%" y="95.50"></text></g><g><title>specialization_graph_of (891,541 samples, 0.13%)</title><rect x="31.0007%" y="85" width="0.1296%" height="15" fill="rgb(244,35,45)"/><text x="31.2507%" y="95.50"></text></g><g><title>resolve_instance (3,496,218 samples, 0.51%)</title><rect x="30.6640%" y="101" width="0.5081%" height="15" fill="rgb(251,115,12)"/><text x="30.9140%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (10,020,394 samples, 1.46%)</title><rect x="29.8016%" y="117" width="1.4562%" height="15" fill="rgb(240,54,50)"/><text x="30.0516%" y="127.50"></text></g><g><title>monomorphization_collector (10,050,834 samples, 1.46%)</title><rect x="29.8009%" y="133" width="1.4607%" height="15" fill="rgb(233,84,52)"/><text x="30.0509%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (1,141,403 samples, 0.17%)</title><rect x="31.2623%" y="117" width="0.1659%" height="15" fill="rgb(207,117,47)"/><text x="31.5123%" y="127.50"></text></g><g><title>symbol_name (1,022,792 samples, 0.15%)</title><rect x="31.2795%" y="101" width="0.1486%" height="15" fill="rgb(249,43,39)"/><text x="31.5295%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (11,626,132 samples, 1.69%)</title><rect x="29.7939%" y="149" width="1.6896%" height="15" fill="rgb(209,38,44)"/><text x="30.0439%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,526,967 samples, 0.22%)</title><rect x="31.2616%" y="133" width="0.2219%" height="15" fill="rgb(236,212,23)"/><text x="31.5116%" y="143.50"></text></g><g><title>codegen_crate (42,381,371 samples, 6.16%)</title><rect x="25.3457%" y="165" width="6.1592%" height="15" fill="rgb(242,79,21)"/><text x="25.5957%" y="175.50">codegen_..</text></g><g><title>codegen_module_optimize (242,781,905 samples, 35.28%)</title><rect x="31.5049%" y="165" width="35.2828%" height="15" fill="rgb(211,96,35)"/><text x="31.7549%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (231,112,261 samples, 33.59%)</title><rect x="33.2008%" y="149" width="33.5869%" height="15" fill="rgb(253,215,40)"/><text x="33.4508%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (40,255,956 samples, 5.85%)</title><rect x="67.5062%" y="149" width="5.8503%" height="15" fill="rgb(211,81,21)"/><text x="67.7562%" y="159.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (59,088,319 samples, 8.59%)</title><rect x="73.3565%" y="149" width="8.5871%" height="15" fill="rgb(208,190,38)"/><text x="73.6065%" y="159.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (58,031,320 samples, 8.43%)</title><rect x="73.5101%" y="133" width="8.4335%" height="15" fill="rgb(235,213,38)"/><text x="73.7601%" y="143.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (3,305,547 samples, 0.48%)</title><rect x="81.9437%" y="149" width="0.4804%" height="15" fill="rgb(237,122,38)"/><text x="82.1937%" y="159.50"></text></g><g><title>codegen_module_perform_lto (107,865,512 samples, 15.68%)</title><rect x="66.7877%" y="165" width="15.6758%" height="15" fill="rgb(244,218,35)"/><text x="67.0377%" y="175.50">codegen_module_perform_l..</text></g><g><title>metadata_register_crate (12,929,107 samples, 1.88%)</title><rect x="84.9262%" y="117" width="1.8790%" height="15" fill="rgb(240,68,47)"/><text x="85.1762%" y="127.50">m..</text></g><g><title>metadata_register_crate (10,017,303 samples, 1.46%)</title><rect x="85.3494%" y="101" width="1.4558%" height="15" fill="rgb(210,16,53)"/><text x="85.5994%" y="111.50"></text></g><g><title>metadata_register_crate (6,926,508 samples, 1.01%)</title><rect x="85.7986%" y="85" width="1.0066%" height="15" fill="rgb(235,124,12)"/><text x="86.0486%" y="95.50"></text></g><g><title>macro_expand_crate (29,539,595 samples, 4.29%)</title><rect x="82.5342%" y="149" width="4.2929%" height="15" fill="rgb(224,169,11)"/><text x="82.7842%" y="159.50">macro..</text></g><g><title>expand_crate (29,516,785 samples, 4.29%)</title><rect x="82.5376%" y="133" width="4.2896%" height="15" fill="rgb(250,166,2)"/><text x="82.7876%" y="143.50">expan..</text></g><g><title>late_resolve_crate (2,373,937 samples, 0.34%)</title><rect x="86.8723%" y="133" width="0.3450%" height="15" fill="rgb(242,216,29)"/><text x="87.1223%" y="143.50"></text></g><g><title>configure_and_expand (32,848,353 samples, 4.77%)</title><rect x="82.4635%" y="165" width="4.7738%" height="15" fill="rgb(230,116,27)"/><text x="82.7135%" y="175.50">config..</text></g><g><title>resolve_crate (2,739,781 samples, 0.40%)</title><rect x="86.8391%" y="149" width="0.3982%" height="15" fill="rgb(228,99,48)"/><text x="87.0891%" y="159.50"></text></g><g><title>free_global_ctxt (7,161,252 samples, 1.04%)</title><rect x="87.3169%" y="165" width="1.0407%" height="15" fill="rgb(253,11,6)"/><text x="87.5669%" y="175.50"></text></g><g><title>layout_of (816,810 samples, 0.12%)</title><rect x="88.9731%" y="85" width="0.1187%" height="15" fill="rgb(247,143,39)"/><text x="89.2231%" y="95.50"></text></g><g><title>layout_of (967,591 samples, 0.14%)</title><rect x="88.9561%" y="101" width="0.1406%" height="15" fill="rgb(236,97,10)"/><text x="89.2061%" y="111.50"></text></g><g><title>layout_of (1,185,875 samples, 0.17%)</title><rect x="88.9313%" y="117" width="0.1723%" height="15" fill="rgb(233,208,19)"/><text x="89.1813%" y="127.50"></text></g><g><title>layout_of (1,588,878 samples, 0.23%)</title><rect x="88.8781%" y="133" width="0.2309%" height="15" fill="rgb(216,164,2)"/><text x="89.1281%" y="143.50"></text></g><g><title>needs_drop_raw (736,967 samples, 0.11%)</title><rect x="89.4347%" y="117" width="0.1071%" height="15" fill="rgb(220,129,5)"/><text x="89.6847%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,126,474 samples, 0.45%)</title><rect x="89.1090%" y="133" width="0.4544%" height="15" fill="rgb(242,17,10)"/><text x="89.3590%" y="143.50"></text></g><g><title>optimized_mir (6,826,870 samples, 0.99%)</title><rect x="88.5788%" y="149" width="0.9921%" height="15" fill="rgb(242,107,0)"/><text x="88.8288%" y="159.50"></text></g><g><title>generate_crate_metadata (8,446,216 samples, 1.23%)</title><rect x="88.3576%" y="165" width="1.2275%" height="15" fill="rgb(251,28,31)"/><text x="88.6076%" y="175.50"></text></g><g><title>hir_lowering (2,854,932 samples, 0.41%)</title><rect x="89.5851%" y="165" width="0.4149%" height="15" fill="rgb(233,223,10)"/><text x="89.8351%" y="175.50"></text></g><g><title>finish_ongoing_codegen (64,470,391 samples, 9.37%)</title><rect x="90.0021%" y="149" width="9.3693%" height="15" fill="rgb(215,21,27)"/><text x="90.2521%" y="159.50">finish_ongoin..</text></g><g><title>link_crate (1,159,413 samples, 0.17%)</title><rect x="99.3714%" y="149" width="0.1685%" height="15" fill="rgb(232,23,21)"/><text x="99.6214%" y="159.50"></text></g><g><title>link_binary (1,129,803 samples, 0.16%)</title><rect x="99.3758%" y="133" width="0.1642%" height="15" fill="rgb(244,5,23)"/><text x="99.6258%" y="143.50"></text></g><g><title>link_rlib (694,087 samples, 0.10%)</title><rect x="99.4391%" y="117" width="0.1009%" height="15" fill="rgb(226,81,46)"/><text x="99.6891%" y="127.50"></text></g><g><title>link (65,655,324 samples, 9.54%)</title><rect x="90.0000%" y="165" width="9.5415%" height="15" fill="rgb(247,70,30)"/><text x="90.2500%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,010,513 samples, 0.29%)</title><rect x="99.6402%" y="165" width="0.2922%" height="15" fill="rgb(212,68,19)"/><text x="99.8902%" y="175.50"></text></g><g><title>all (688,102,443 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (688,102,443 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>