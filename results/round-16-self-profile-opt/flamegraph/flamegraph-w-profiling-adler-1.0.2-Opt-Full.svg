<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (131,294,566 samples, 22.34%)</title><rect x="0.1095%" y="197" width="22.3405%" height="15" fill="rgb(227,0,7)"/><text x="0.3595%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (598,369 samples, 0.10%)</title><rect x="23.5161%" y="85" width="0.1018%" height="15" fill="rgb(217,0,24)"/><text x="23.7661%" y="95.50"></text></g><g><title>specialization_graph_of (1,655,468 samples, 0.28%)</title><rect x="23.6720%" y="69" width="0.2817%" height="15" fill="rgb(221,193,54)"/><text x="23.9220%" y="79.50"></text></g><g><title>impl_trait_ref (742,553 samples, 0.13%)</title><rect x="23.8274%" y="53" width="0.1263%" height="15" fill="rgb(248,212,6)"/><text x="24.0774%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (602,252 samples, 0.10%)</title><rect x="23.8512%" y="37" width="0.1025%" height="15" fill="rgb(208,68,35)"/><text x="24.1012%" y="47.50"></text></g><g><title>resolve_instance (2,007,531 samples, 0.34%)</title><rect x="23.6179%" y="85" width="0.3416%" height="15" fill="rgb(232,128,0)"/><text x="23.8679%" y="95.50"></text></g><g><title>mir_const (4,586,057 samples, 0.78%)</title><rect x="23.2416%" y="133" width="0.7803%" height="15" fill="rgb(207,160,47)"/><text x="23.4916%" y="143.50"></text></g><g><title>unsafety_check_result (4,213,595 samples, 0.72%)</title><rect x="23.3049%" y="117" width="0.7170%" height="15" fill="rgb(228,23,34)"/><text x="23.5549%" y="127.50"></text></g><g><title>mir_built (3,936,092 samples, 0.67%)</title><rect x="23.3521%" y="101" width="0.6697%" height="15" fill="rgb(218,30,26)"/><text x="23.6021%" y="111.50"></text></g><g><title>mir_promoted (5,054,804 samples, 0.86%)</title><rect x="23.1983%" y="149" width="0.8601%" height="15" fill="rgb(220,122,19)"/><text x="23.4483%" y="159.50"></text></g><g><title>type_op_prove_predicate (745,471 samples, 0.13%)</title><rect x="24.1572%" y="149" width="0.1268%" height="15" fill="rgb(250,228,42)"/><text x="24.4072%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,509,651 samples, 1.79%)</title><rect x="22.4962%" y="181" width="1.7883%" height="15" fill="rgb(240,193,28)"/><text x="22.7462%" y="191.50">M..</text></g><g><title>mir_borrowck (10,474,240 samples, 1.78%)</title><rect x="22.5022%" y="165" width="1.7823%" height="15" fill="rgb(216,20,37)"/><text x="22.7522%" y="175.50">m..</text></g><g><title>check_mod_attrs (649,487 samples, 0.11%)</title><rect x="24.3376%" y="165" width="0.1105%" height="15" fill="rgb(206,188,39)"/><text x="24.5876%" y="175.50"></text></g><g><title>misc_checking_1 (1,171,373 samples, 0.20%)</title><rect x="24.3324%" y="181" width="0.1993%" height="15" fill="rgb(217,207,13)"/><text x="24.5824%" y="191.50"></text></g><g><title>crate_lints (1,739,649 samples, 0.30%)</title><rect x="24.6335%" y="149" width="0.2960%" height="15" fill="rgb(231,73,38)"/><text x="24.8835%" y="159.50"></text></g><g><title>type_of (1,016,559 samples, 0.17%)</title><rect x="24.7566%" y="133" width="0.1730%" height="15" fill="rgb(225,20,46)"/><text x="25.0066%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (784,346 samples, 0.13%)</title><rect x="24.7961%" y="117" width="0.1335%" height="15" fill="rgb(210,31,41)"/><text x="25.0461%" y="127.50"></text></g><g><title>lint_checking (1,871,670 samples, 0.32%)</title><rect x="24.6333%" y="165" width="0.3185%" height="15" fill="rgb(221,200,47)"/><text x="24.8833%" y="175.50"></text></g><g><title>misc_checking_3 (2,417,866 samples, 0.41%)</title><rect x="24.5929%" y="181" width="0.4114%" height="15" fill="rgb(226,26,5)"/><text x="24.8429%" y="191.50"></text></g><g><title>impl_parent (2,040,112 samples, 0.35%)</title><rect x="25.7018%" y="117" width="0.3471%" height="15" fill="rgb(249,33,26)"/><text x="25.9518%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,215,860 samples, 0.21%)</title><rect x="25.8420%" y="101" width="0.2069%" height="15" fill="rgb(235,183,28)"/><text x="26.0920%" y="111.50"></text></g><g><title>impl_trait_ref (5,765,644 samples, 0.98%)</title><rect x="26.0489%" y="117" width="0.9811%" height="15" fill="rgb(221,5,38)"/><text x="26.2989%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,918,474 samples, 0.84%)</title><rect x="26.1931%" y="101" width="0.8369%" height="15" fill="rgb(247,18,42)"/><text x="26.4431%" y="111.50"></text></g><g><title>coherent_trait (12,893,197 samples, 2.19%)</title><rect x="25.0127%" y="149" width="2.1939%" height="15" fill="rgb(241,131,45)"/><text x="25.2627%" y="159.50">c..</text></g><g><title>specialization_graph_of (12,309,711 samples, 2.09%)</title><rect x="25.1120%" y="133" width="2.0946%" height="15" fill="rgb(249,31,29)"/><text x="25.3620%" y="143.50">s..</text></g><g><title>trait_impls_of (1,036,321 samples, 0.18%)</title><rect x="27.0302%" y="117" width="0.1763%" height="15" fill="rgb(225,111,53)"/><text x="27.2802%" y="127.50"></text></g><g><title>coherence_checking (12,969,128 samples, 2.21%)</title><rect x="25.0099%" y="165" width="2.2068%" height="15" fill="rgb(238,160,17)"/><text x="25.2599%" y="175.50">c..</text></g><g><title>associated_items (597,514 samples, 0.10%)</title><rect x="28.7113%" y="117" width="0.1017%" height="15" fill="rgb(214,148,48)"/><text x="28.9613%" y="127.50"></text></g><g><title>specializes (644,468 samples, 0.11%)</title><rect x="29.2004%" y="101" width="0.1097%" height="15" fill="rgb(232,36,49)"/><text x="29.4504%" y="111.50"></text></g><g><title>evaluate_obligation (3,020,042 samples, 0.51%)</title><rect x="28.8722%" y="117" width="0.5139%" height="15" fill="rgb(209,103,24)"/><text x="29.1222%" y="127.50"></text></g><g><title>item_bodies_checking (13,885,417 samples, 2.36%)</title><rect x="27.2223%" y="165" width="2.3627%" height="15" fill="rgb(229,88,8)"/><text x="27.4723%" y="175.50">it..</text></g><g><title>typeck_item_bodies (13,883,227 samples, 2.36%)</title><rect x="27.2227%" y="149" width="2.3623%" height="15" fill="rgb(213,181,19)"/><text x="27.4727%" y="159.50">ty..</text></g><g><title>typeck (13,857,207 samples, 2.36%)</title><rect x="27.2271%" y="133" width="2.3579%" height="15" fill="rgb(254,191,54)"/><text x="27.4771%" y="143.50">t..</text></g><g><title>evaluate_obligation (1,227,393 samples, 0.21%)</title><rect x="29.6878%" y="117" width="0.2088%" height="15" fill="rgb(241,83,37)"/><text x="29.9378%" y="127.50"></text></g><g><title>item_types_checking (1,913,520 samples, 0.33%)</title><rect x="29.5850%" y="165" width="0.3256%" height="15" fill="rgb(233,36,39)"/><text x="29.8350%" y="175.50"></text></g><g><title>check_mod_item_types (1,910,830 samples, 0.33%)</title><rect x="29.5854%" y="149" width="0.3251%" height="15" fill="rgb(226,3,54)"/><text x="29.8354%" y="159.50"></text></g><g><title>typeck (1,633,317 samples, 0.28%)</title><rect x="29.6327%" y="133" width="0.2779%" height="15" fill="rgb(245,192,40)"/><text x="29.8827%" y="143.50"></text></g><g><title>type_collecting (1,305,424 samples, 0.22%)</title><rect x="29.9108%" y="165" width="0.2221%" height="15" fill="rgb(238,167,29)"/><text x="30.1608%" y="175.50"></text></g><g><title>collect_mod_item_types (1,295,044 samples, 0.22%)</title><rect x="29.9125%" y="149" width="0.2204%" height="15" fill="rgb(232,182,51)"/><text x="30.1625%" y="159.50"></text></g><g><title>check_impl_item_well_formed (761,661 samples, 0.13%)</title><rect x="30.1428%" y="149" width="0.1296%" height="15" fill="rgb(231,60,39)"/><text x="30.3928%" y="159.50"></text></g><g><title>analysis (46,780,808 samples, 7.96%)</title><rect x="22.4500%" y="197" width="7.9600%" height="15" fill="rgb(208,69,12)"/><text x="22.7000%" y="207.50">analysis</text></g><g><title>type_check_crate (31,769,528 samples, 5.41%)</title><rect x="25.0043%" y="181" width="5.4058%" height="15" fill="rgb(235,93,37)"/><text x="25.2543%" y="191.50">type_ch..</text></g><g><title>wf_checking (1,627,217 samples, 0.28%)</title><rect x="30.1332%" y="165" width="0.2769%" height="15" fill="rgb(213,116,39)"/><text x="30.3832%" y="175.50"></text></g><g><title>check_item_well_formed (809,086 samples, 0.14%)</title><rect x="30.2724%" y="149" width="0.1377%" height="15" fill="rgb(222,207,29)"/><text x="30.5224%" y="159.50"></text></g><g><title>layout_of (919,669 samples, 0.16%)</title><rect x="32.4598%" y="149" width="0.1565%" height="15" fill="rgb(206,96,30)"/><text x="32.7098%" y="159.50"></text></g><g><title>param_env (1,045,490 samples, 0.18%)</title><rect x="32.6163%" y="149" width="0.1779%" height="15" fill="rgb(218,138,4)"/><text x="32.8663%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,554,499 samples, 0.77%)</title><rect x="32.1108%" y="165" width="0.7750%" height="15" fill="rgb(250,191,14)"/><text x="32.3608%" y="175.50"></text></g><g><title>codegen_module (13,423,923 samples, 2.28%)</title><rect x="30.7110%" y="181" width="2.2842%" height="15" fill="rgb(239,60,40)"/><text x="30.9610%" y="191.50">c..</text></g><g><title>codegen_fn_attrs (684,457 samples, 0.12%)</title><rect x="33.1118%" y="133" width="0.1165%" height="15" fill="rgb(206,27,48)"/><text x="33.3618%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (697,529 samples, 0.12%)</title><rect x="33.4640%" y="117" width="0.1187%" height="15" fill="rgb(225,35,8)"/><text x="33.7140%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (903,360 samples, 0.15%)</title><rect x="33.5827%" y="117" width="0.1537%" height="15" fill="rgb(250,213,24)"/><text x="33.8327%" y="127.50"></text></g><g><title>optimized_mir (2,741,910 samples, 0.47%)</title><rect x="33.2709%" y="133" width="0.4666%" height="15" fill="rgb(247,123,22)"/><text x="33.5209%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,061,608 samples, 0.18%)</title><rect x="33.7890%" y="117" width="0.1806%" height="15" fill="rgb(231,138,38)"/><text x="34.0390%" y="127.50"></text></g><g><title>specialization_graph_of (1,200,002 samples, 0.20%)</title><rect x="34.0088%" y="117" width="0.2042%" height="15" fill="rgb(231,145,46)"/><text x="34.2588%" y="127.50"></text></g><g><title>resolve_instance (2,912,368 samples, 0.50%)</title><rect x="33.7374%" y="133" width="0.4956%" height="15" fill="rgb(251,118,11)"/><text x="33.9874%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (7,536,220 samples, 1.28%)</title><rect x="32.9995%" y="149" width="1.2823%" height="15" fill="rgb(217,147,25)"/><text x="33.2495%" y="159.50"></text></g><g><title>monomorphization_collector (7,565,150 samples, 1.29%)</title><rect x="32.9992%" y="165" width="1.2873%" height="15" fill="rgb(247,81,37)"/><text x="33.2492%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (623,387 samples, 0.11%)</title><rect x="34.2871%" y="149" width="0.1061%" height="15" fill="rgb(209,12,38)"/><text x="34.5371%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (8,418,720 samples, 1.43%)</title><rect x="32.9957%" y="181" width="1.4325%" height="15" fill="rgb(227,1,9)"/><text x="33.2457%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (832,919 samples, 0.14%)</title><rect x="34.2865%" y="165" width="0.1417%" height="15" fill="rgb(248,47,43)"/><text x="34.5365%" y="175.50"></text></g><g><title>codegen_crate (23,662,062 samples, 4.03%)</title><rect x="30.4116%" y="197" width="4.0262%" height="15" fill="rgb(221,10,30)"/><text x="30.6616%" y="207.50">code..</text></g><g><title>codegen_module_optimize (100,862,683 samples, 17.16%)</title><rect x="34.4378%" y="197" width="17.1624%" height="15" fill="rgb(210,229,1)"/><text x="34.6878%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (93,159,181 samples, 15.85%)</title><rect x="35.7486%" y="181" width="15.8516%" height="15" fill="rgb(222,148,37)"/><text x="35.9986%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (70,680,981 samples, 12.03%)</title><rect x="52.3526%" y="181" width="12.0268%" height="15" fill="rgb(234,67,33)"/><text x="52.6026%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (60,373,471 samples, 10.27%)</title><rect x="64.3794%" y="181" width="10.2729%" height="15" fill="rgb(247,98,35)"/><text x="64.6294%" y="191.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (59,640,263 samples, 10.15%)</title><rect x="64.5041%" y="165" width="10.1481%" height="15" fill="rgb(247,138,52)"/><text x="64.7541%" y="175.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (3,417,547 samples, 0.58%)</title><rect x="74.6523%" y="181" width="0.5815%" height="15" fill="rgb(213,79,30)"/><text x="74.9023%" y="191.50"></text></g><g><title>codegen_module_perform_lto (139,164,903 samples, 23.68%)</title><rect x="51.6002%" y="197" width="23.6797%" height="15" fill="rgb(246,177,23)"/><text x="51.8502%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,408,935 samples, 0.41%)</title><rect x="77.1759%" y="149" width="0.4099%" height="15" fill="rgb(230,62,27)"/><text x="77.4259%" y="159.50"></text></g><g><title>metadata_register_crate (867,819 samples, 0.15%)</title><rect x="77.4381%" y="133" width="0.1477%" height="15" fill="rgb(216,154,8)"/><text x="77.6881%" y="143.50"></text></g><g><title>macro_expand_crate (13,225,501 samples, 2.25%)</title><rect x="75.3460%" y="181" width="2.2504%" height="15" fill="rgb(244,35,45)"/><text x="75.5960%" y="191.50">m..</text></g><g><title>expand_crate (13,213,101 samples, 2.25%)</title><rect x="75.3481%" y="165" width="2.2483%" height="15" fill="rgb(251,115,12)"/><text x="75.5981%" y="175.50">e..</text></g><g><title>late_resolve_crate (1,442,865 samples, 0.25%)</title><rect x="77.6481%" y="165" width="0.2455%" height="15" fill="rgb(240,54,50)"/><text x="77.8981%" y="175.50"></text></g><g><title>configure_and_expand (15,443,654 samples, 2.63%)</title><rect x="75.2799%" y="197" width="2.6278%" height="15" fill="rgb(233,84,52)"/><text x="75.5299%" y="207.50">co..</text></g><g><title>resolve_crate (1,720,469 samples, 0.29%)</title><rect x="77.6150%" y="181" width="0.2927%" height="15" fill="rgb(207,117,47)"/><text x="77.8650%" y="191.50"></text></g><g><title>free_global_ctxt (4,972,913 samples, 0.85%)</title><rect x="77.9756%" y="197" width="0.8462%" height="15" fill="rgb(249,43,39)"/><text x="78.2256%" y="207.50"></text></g><g><title>optimized_mir (996,168 samples, 0.17%)</title><rect x="78.9378%" y="181" width="0.1695%" height="15" fill="rgb(209,38,44)"/><text x="79.1878%" y="191.50"></text></g><g><title>generate_crate_metadata (1,697,248 samples, 0.29%)</title><rect x="78.8218%" y="197" width="0.2888%" height="15" fill="rgb(236,212,23)"/><text x="79.0718%" y="207.50"></text></g><g><title>hir_lowering (1,800,019 samples, 0.31%)</title><rect x="79.1106%" y="197" width="0.3063%" height="15" fill="rgb(242,79,21)"/><text x="79.3606%" y="207.50"></text></g><g><title>finish_ongoing_codegen (115,255,845 samples, 19.61%)</title><rect x="79.4189%" y="181" width="19.6115%" height="15" fill="rgb(211,96,35)"/><text x="79.6689%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (861,349 samples, 0.15%)</title><rect x="99.0303%" y="181" width="0.1466%" height="15" fill="rgb(253,215,40)"/><text x="99.2803%" y="191.50"></text></g><g><title>link_binary (847,839 samples, 0.14%)</title><rect x="99.0326%" y="165" width="0.1443%" height="15" fill="rgb(211,81,21)"/><text x="99.2826%" y="175.50"></text></g><g><title>link (116,136,965 samples, 19.76%)</title><rect x="79.4169%" y="197" width="19.7614%" height="15" fill="rgb(208,190,38)"/><text x="79.6669%" y="207.50">link</text></g><g><title>parse_crate (1,627,187 samples, 0.28%)</title><rect x="99.1783%" y="197" width="0.2769%" height="15" fill="rgb(235,213,38)"/><text x="99.4283%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,425,536 samples, 0.41%)</title><rect x="99.5129%" y="197" width="0.4127%" height="15" fill="rgb(237,122,38)"/><text x="99.7629%" y="207.50"></text></g><g><title>all (587,696,583 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (587,696,583 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>