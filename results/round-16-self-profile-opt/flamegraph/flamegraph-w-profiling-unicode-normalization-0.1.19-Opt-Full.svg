<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (285,860,502 samples, 11.85%)</title><rect x="0.0228%" y="213" width="11.8515%" height="15" fill="rgb(227,0,7)"/><text x="0.2728%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (24,734,432 samples, 1.03%)</title><rect x="10.8489%" y="197" width="1.0255%" height="15" fill="rgb(217,0,24)"/><text x="11.0989%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (24,707,182 samples, 1.02%)</title><rect x="10.8500%" y="181" width="1.0243%" height="15" fill="rgb(221,193,54)"/><text x="11.1000%" y="191.50"></text></g><g><title>thir_body (4,232,344 samples, 0.18%)</title><rect x="26.9416%" y="101" width="0.1755%" height="15" fill="rgb(248,212,6)"/><text x="27.1916%" y="111.50"></text></g><g><title>mir_const (151,537,161 samples, 6.28%)</title><rect x="20.8360%" y="149" width="6.2826%" height="15" fill="rgb(208,68,35)"/><text x="21.0860%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (148,992,096 samples, 6.18%)</title><rect x="20.9415%" y="133" width="6.1771%" height="15" fill="rgb(232,128,0)"/><text x="21.1915%" y="143.50">unsafety..</text></g><g><title>mir_built (147,622,240 samples, 6.12%)</title><rect x="20.9983%" y="117" width="6.1203%" height="15" fill="rgb(207,160,47)"/><text x="21.2483%" y="127.50">mir_built</text></g><g><title>thir_body (30,286,786 samples, 1.26%)</title><rect x="28.6301%" y="85" width="1.2557%" height="15" fill="rgb(228,23,34)"/><text x="28.8801%" y="95.50"></text></g><g><title>lit_to_const (3,112,186 samples, 0.13%)</title><rect x="29.7568%" y="69" width="0.1290%" height="15" fill="rgb(218,30,26)"/><text x="30.0068%" y="79.50"></text></g><g><title>mir_const_qualif (66,749,032 samples, 2.77%)</title><rect x="27.1186%" y="149" width="2.7674%" height="15" fill="rgb(220,122,19)"/><text x="27.3686%" y="159.50">mi..</text></g><g><title>mir_const (64,646,664 samples, 2.68%)</title><rect x="27.2057%" y="133" width="2.6802%" height="15" fill="rgb(250,228,42)"/><text x="27.4557%" y="143.50">mi..</text></g><g><title>unsafety_check_result (61,960,826 samples, 2.57%)</title><rect x="27.3171%" y="117" width="2.5688%" height="15" fill="rgb(240,193,28)"/><text x="27.5671%" y="127.50">un..</text></g><g><title>mir_built (59,983,583 samples, 2.49%)</title><rect x="27.3991%" y="101" width="2.4869%" height="15" fill="rgb(216,20,37)"/><text x="27.6491%" y="111.50">mi..</text></g><g><title>mir_promoted (245,830,816 samples, 10.19%)</title><rect x="19.6942%" y="165" width="10.1919%" height="15" fill="rgb(206,188,39)"/><text x="19.9442%" y="175.50">mir_promoted</text></g><g><title>type_op_prove_predicate (4,093,000 samples, 0.17%)</title><rect x="29.9618%" y="165" width="0.1697%" height="15" fill="rgb(217,207,13)"/><text x="30.2118%" y="175.50"></text></g><g><title>MIR_borrow_checking (437,407,784 samples, 18.13%)</title><rect x="11.9972%" y="197" width="18.1345%" height="15" fill="rgb(231,73,38)"/><text x="12.2472%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (437,120,402 samples, 18.12%)</title><rect x="12.0091%" y="181" width="18.1226%" height="15" fill="rgb(225,20,46)"/><text x="12.2591%" y="191.50">mir_borrowck</text></g><g><title>check_mod_attrs (3,802,163 samples, 0.16%)</title><rect x="30.2402%" y="181" width="0.1576%" height="15" fill="rgb(210,31,41)"/><text x="30.4902%" y="191.50"></text></g><g><title>misc_checking_1 (5,975,216 samples, 0.25%)</title><rect x="30.2383%" y="197" width="0.2477%" height="15" fill="rgb(221,200,47)"/><text x="30.4883%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (2,784,320 samples, 0.12%)</title><rect x="30.4862%" y="181" width="0.1154%" height="15" fill="rgb(226,26,5)"/><text x="30.7362%" y="191.50"></text></g><g><title>misc_checking_2 (14,421,099 samples, 0.60%)</title><rect x="30.4860%" y="197" width="0.5979%" height="15" fill="rgb(249,33,26)"/><text x="30.7360%" y="207.50"></text></g><g><title>match_checking (11,633,029 samples, 0.48%)</title><rect x="30.6016%" y="181" width="0.4823%" height="15" fill="rgb(235,183,28)"/><text x="30.8516%" y="191.50"></text></g><g><title>check_match (11,571,529 samples, 0.48%)</title><rect x="30.6042%" y="165" width="0.4797%" height="15" fill="rgb(221,5,38)"/><text x="30.8542%" y="175.50"></text></g><g><title>eval_to_const_value_raw (78,141,395 samples, 3.24%)</title><rect x="32.0705%" y="85" width="3.2397%" height="15" fill="rgb(247,18,42)"/><text x="32.3205%" y="95.50">eva..</text></g><g><title>eval_to_const_value_raw (78,126,985 samples, 3.24%)</title><rect x="32.0711%" y="69" width="3.2391%" height="15" fill="rgb(241,131,45)"/><text x="32.3211%" y="79.50">eva..</text></g><g><title>eval_to_allocation_raw (78,092,175 samples, 3.24%)</title><rect x="32.0725%" y="53" width="3.2376%" height="15" fill="rgb(249,31,29)"/><text x="32.3225%" y="63.50">eva..</text></g><g><title>promoted_mir (16,577,437 samples, 0.69%)</title><rect x="34.6228%" y="37" width="0.6873%" height="15" fill="rgb(225,111,53)"/><text x="34.8728%" y="47.50"></text></g><g><title>eval_to_const_value_raw (94,738,658 samples, 3.93%)</title><rect x="31.3835%" y="149" width="3.9278%" height="15" fill="rgb(238,160,17)"/><text x="31.6335%" y="159.50">eval..</text></g><g><title>eval_to_const_value_raw (94,719,878 samples, 3.93%)</title><rect x="31.3842%" y="133" width="3.9270%" height="15" fill="rgb(214,148,48)"/><text x="31.6342%" y="143.50">eval..</text></g><g><title>eval_to_allocation_raw (94,670,657 samples, 3.92%)</title><rect x="31.3863%" y="117" width="3.9250%" height="15" fill="rgb(232,36,49)"/><text x="31.6363%" y="127.50">eval..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (78,307,047 samples, 3.25%)</title><rect x="32.0647%" y="101" width="3.2465%" height="15" fill="rgb(209,103,24)"/><text x="32.3147%" y="111.50">try..</text></g><g><title>crate_lints (101,750,712 samples, 4.22%)</title><rect x="31.1753%" y="165" width="4.2185%" height="15" fill="rgb(229,88,8)"/><text x="31.4253%" y="175.50">crate..</text></g><g><title>lint_checking (112,773,074 samples, 4.68%)</title><rect x="31.1751%" y="181" width="4.6755%" height="15" fill="rgb(213,181,19)"/><text x="31.4251%" y="191.50">lint_..</text></g><g><title>module_lints (11,018,672 samples, 0.46%)</title><rect x="35.3937%" y="165" width="0.4568%" height="15" fill="rgb(254,191,54)"/><text x="35.6437%" y="175.50"></text></g><g><title>lint_mod (11,003,962 samples, 0.46%)</title><rect x="35.3943%" y="149" width="0.4562%" height="15" fill="rgb(241,83,37)"/><text x="35.6443%" y="159.50"></text></g><g><title>privacy_checking_modules (8,144,240 samples, 0.34%)</title><rect x="35.8921%" y="181" width="0.3377%" height="15" fill="rgb(233,36,39)"/><text x="36.1421%" y="191.50"></text></g><g><title>check_mod_privacy (8,131,030 samples, 0.34%)</title><rect x="35.8926%" y="165" width="0.3371%" height="15" fill="rgb(226,3,54)"/><text x="36.1426%" y="175.50"></text></g><g><title>misc_checking_3 (124,136,239 samples, 5.15%)</title><rect x="31.0839%" y="197" width="5.1466%" height="15" fill="rgb(245,192,40)"/><text x="31.3339%" y="207.50">misc_c..</text></g><g><title>impl_trait_ref (5,105,793 samples, 0.21%)</title><rect x="36.4670%" y="133" width="0.2117%" height="15" fill="rgb(238,167,29)"/><text x="36.7170%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,089,939 samples, 0.17%)</title><rect x="36.5091%" y="117" width="0.1696%" height="15" fill="rgb(232,182,51)"/><text x="36.7591%" y="127.50"></text></g><g><title>coherent_trait (11,308,034 samples, 0.47%)</title><rect x="36.2368%" y="165" width="0.4688%" height="15" fill="rgb(231,60,39)"/><text x="36.4868%" y="175.50"></text></g><g><title>specialization_graph_of (11,290,404 samples, 0.47%)</title><rect x="36.2376%" y="149" width="0.4681%" height="15" fill="rgb(208,69,12)"/><text x="36.4876%" y="159.50"></text></g><g><title>coherence_checking (11,405,226 samples, 0.47%)</title><rect x="36.2358%" y="181" width="0.4728%" height="15" fill="rgb(235,93,37)"/><text x="36.4858%" y="191.50"></text></g><g><title>evaluate_obligation (6,435,166 samples, 0.27%)</title><rect x="37.8645%" y="133" width="0.2668%" height="15" fill="rgb(213,116,39)"/><text x="38.1145%" y="143.50"></text></g><g><title>typeck (6,064,897 samples, 0.25%)</title><rect x="38.2118%" y="133" width="0.2514%" height="15" fill="rgb(222,207,29)"/><text x="38.4618%" y="143.50"></text></g><g><title>item_bodies_checking (42,334,147 samples, 1.76%)</title><rect x="36.7105%" y="181" width="1.7551%" height="15" fill="rgb(206,96,30)"/><text x="36.9605%" y="191.50"></text></g><g><title>typeck_item_bodies (42,330,437 samples, 1.75%)</title><rect x="36.7107%" y="165" width="1.7550%" height="15" fill="rgb(218,138,4)"/><text x="36.9607%" y="175.50"></text></g><g><title>typeck (42,196,557 samples, 1.75%)</title><rect x="36.7162%" y="149" width="1.7494%" height="15" fill="rgb(250,191,14)"/><text x="36.9662%" y="159.50"></text></g><g><title>item_types_checking (141,371,370 samples, 5.86%)</title><rect x="38.4657%" y="181" width="5.8611%" height="15" fill="rgb(239,60,40)"/><text x="38.7157%" y="191.50">item_ty..</text></g><g><title>check_mod_item_types (141,355,860 samples, 5.86%)</title><rect x="38.4663%" y="165" width="5.8605%" height="15" fill="rgb(206,27,48)"/><text x="38.7163%" y="175.50">check_m..</text></g><g><title>typeck (139,759,452 samples, 5.79%)</title><rect x="38.5325%" y="149" width="5.7943%" height="15" fill="rgb(225,35,8)"/><text x="38.7825%" y="159.50">typeck</text></g><g><title>late_bound_vars_map (2,589,785 samples, 0.11%)</title><rect x="44.4192%" y="101" width="0.1074%" height="15" fill="rgb(250,213,24)"/><text x="44.6692%" y="111.50"></text></g><g><title>resolve_lifetimes (2,572,155 samples, 0.11%)</title><rect x="44.4200%" y="85" width="0.1066%" height="15" fill="rgb(247,123,22)"/><text x="44.6700%" y="95.50"></text></g><g><title>explicit_predicates_of (3,186,019 samples, 0.13%)</title><rect x="44.4041%" y="117" width="0.1321%" height="15" fill="rgb(231,138,38)"/><text x="44.6541%" y="127.50"></text></g><g><title>predicates_of (3,595,804 samples, 0.15%)</title><rect x="44.3962%" y="149" width="0.1491%" height="15" fill="rgb(231,145,46)"/><text x="44.6462%" y="159.50"></text></g><g><title>predicates_defined_on (3,526,353 samples, 0.15%)</title><rect x="44.3990%" y="133" width="0.1462%" height="15" fill="rgb(251,118,11)"/><text x="44.6490%" y="143.50"></text></g><g><title>type_collecting (6,021,007 samples, 0.25%)</title><rect x="44.3269%" y="181" width="0.2496%" height="15" fill="rgb(217,147,25)"/><text x="44.5769%" y="191.50"></text></g><g><title>collect_mod_item_types (6,000,376 samples, 0.25%)</title><rect x="44.3278%" y="165" width="0.2488%" height="15" fill="rgb(247,81,37)"/><text x="44.5778%" y="175.50"></text></g><g><title>region_scope_tree (4,265,843 samples, 0.18%)</title><rect x="44.8510%" y="149" width="0.1769%" height="15" fill="rgb(209,12,38)"/><text x="45.1010%" y="159.50"></text></g><g><title>check_item_well_formed (8,392,351 samples, 0.35%)</title><rect x="44.6897%" y="165" width="0.3479%" height="15" fill="rgb(227,1,9)"/><text x="44.9397%" y="175.50"></text></g><g><title>analysis (800,121,514 samples, 33.17%)</title><rect x="11.8743%" y="213" width="33.1723%" height="15" fill="rgb(248,47,43)"/><text x="12.1243%" y="223.50">analysis</text></g><g><title>type_check_crate (212,646,965 samples, 8.82%)</title><rect x="36.2305%" y="197" width="8.8161%" height="15" fill="rgb(221,10,30)"/><text x="36.4805%" y="207.50">type_check_c..</text></g><g><title>wf_checking (11,328,084 samples, 0.47%)</title><rect x="44.5770%" y="181" width="0.4697%" height="15" fill="rgb(210,229,1)"/><text x="44.8270%" y="191.50"></text></g><g><title>param_env (2,905,933 samples, 0.12%)</title><rect x="47.0020%" y="165" width="0.1205%" height="15" fill="rgb(222,148,37)"/><text x="47.2520%" y="175.50"></text></g><g><title>fn_abi_of_instance (8,854,693 samples, 0.37%)</title><rect x="46.7761%" y="181" width="0.3671%" height="15" fill="rgb(234,67,33)"/><text x="47.0261%" y="191.50"></text></g><g><title>codegen_module (49,864,661 samples, 2.07%)</title><rect x="45.1347%" y="197" width="2.0673%" height="15" fill="rgb(247,98,35)"/><text x="45.3847%" y="207.50">c..</text></g><g><title>optimized_mir (3,667,109 samples, 0.15%)</title><rect x="47.3727%" y="149" width="0.1520%" height="15" fill="rgb(247,138,52)"/><text x="47.6227%" y="159.50"></text></g><g><title>resolve_instance (5,811,434 samples, 0.24%)</title><rect x="47.5248%" y="149" width="0.2409%" height="15" fill="rgb(213,79,30)"/><text x="47.7748%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (14,926,845 samples, 0.62%)</title><rect x="47.2044%" y="165" width="0.6189%" height="15" fill="rgb(246,177,23)"/><text x="47.4544%" y="175.50"></text></g><g><title>monomorphization_collector (15,402,910 samples, 0.64%)</title><rect x="47.2042%" y="181" width="0.6386%" height="15" fill="rgb(230,62,27)"/><text x="47.4542%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (17,231,020 samples, 0.71%)</title><rect x="47.2025%" y="197" width="0.7144%" height="15" fill="rgb(216,154,8)"/><text x="47.4525%" y="207.50"></text></g><g><title>codegen_crate (69,310,015 samples, 2.87%)</title><rect x="45.0469%" y="213" width="2.8735%" height="15" fill="rgb(244,35,45)"/><text x="45.2969%" y="223.50">co..</text></g><g><title>codegen_module_optimize (320,243,370 samples, 13.28%)</title><rect x="47.9204%" y="213" width="13.2770%" height="15" fill="rgb(251,115,12)"/><text x="48.1704%" y="223.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (255,862,250 samples, 10.61%)</title><rect x="50.5896%" y="197" width="10.6078%" height="15" fill="rgb(240,54,50)"/><text x="50.8396%" y="207.50">LLVM_module_opt..</text></g><g><title>LLVM_lto_optimize (108,233,727 samples, 4.49%)</title><rect x="62.8793%" y="197" width="4.4873%" height="15" fill="rgb(233,84,52)"/><text x="63.1293%" y="207.50">LLVM_..</text></g><g><title>LLVM_module_codegen (182,936,053 samples, 7.58%)</title><rect x="67.3665%" y="197" width="7.5844%" height="15" fill="rgb(207,117,47)"/><text x="67.6165%" y="207.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (171,906,715 samples, 7.13%)</title><rect x="67.8238%" y="181" width="7.1271%" height="15" fill="rgb(249,43,39)"/><text x="68.0738%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_thin_lto_import (138,482,848 samples, 5.74%)</title><rect x="74.9509%" y="197" width="5.7414%" height="15" fill="rgb(209,38,44)"/><text x="75.2009%" y="207.50">LLVM_th..</text></g><g><title>LLVM_thin_lto_internalize (6,233,479 samples, 0.26%)</title><rect x="80.6922%" y="197" width="0.2584%" height="15" fill="rgb(236,212,23)"/><text x="80.9422%" y="207.50"></text></g><g><title>LLVM_thin_lto_rename (8,992,999 samples, 0.37%)</title><rect x="80.9510%" y="197" width="0.3728%" height="15" fill="rgb(242,79,21)"/><text x="81.2010%" y="207.50"></text></g><g><title>codegen_module_perform_lto (488,898,964 samples, 20.27%)</title><rect x="61.1974%" y="213" width="20.2693%" height="15" fill="rgb(211,96,35)"/><text x="61.4474%" y="223.50">codegen_module_perform_lto</text></g><g><title>LLVM_thin_lto_resolve_weak (3,444,838 samples, 0.14%)</title><rect x="81.3239%" y="197" width="0.1428%" height="15" fill="rgb(253,215,40)"/><text x="81.5739%" y="207.50"></text></g><g><title>macro_expand_crate (75,039,398 samples, 3.11%)</title><rect x="81.5581%" y="197" width="3.1111%" height="15" fill="rgb(211,81,21)"/><text x="81.8081%" y="207.50">mac..</text></g><g><title>expand_crate (75,026,608 samples, 3.11%)</title><rect x="81.5587%" y="181" width="3.1105%" height="15" fill="rgb(208,190,38)"/><text x="81.8087%" y="191.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (3,599,460 samples, 0.15%)</title><rect x="84.5200%" y="165" width="0.1492%" height="15" fill="rgb(235,213,38)"/><text x="84.7700%" y="175.50"></text></g><g><title>late_resolve_crate (5,148,196 samples, 0.21%)</title><rect x="84.6849%" y="181" width="0.2134%" height="15" fill="rgb(237,122,38)"/><text x="84.9349%" y="191.50"></text></g><g><title>configure_and_expand (84,953,067 samples, 3.52%)</title><rect x="81.4667%" y="213" width="3.5221%" height="15" fill="rgb(244,218,35)"/><text x="81.7167%" y="223.50">con..</text></g><g><title>resolve_crate (7,628,624 samples, 0.32%)</title><rect x="84.6725%" y="197" width="0.3163%" height="15" fill="rgb(240,68,47)"/><text x="84.9225%" y="207.50"></text></g><g><title>drop_ast (4,253,507 samples, 0.18%)</title><rect x="84.9888%" y="213" width="0.1763%" height="15" fill="rgb(210,16,53)"/><text x="85.2388%" y="223.50"></text></g><g><title>early_lint_checks (6,191,879 samples, 0.26%)</title><rect x="85.1667%" y="213" width="0.2567%" height="15" fill="rgb(235,124,12)"/><text x="85.4167%" y="223.50"></text></g><g><title>free_global_ctxt (25,805,234 samples, 1.07%)</title><rect x="85.4234%" y="213" width="1.0699%" height="15" fill="rgb(224,169,11)"/><text x="85.6734%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,172,424 samples, 0.55%)</title><rect x="88.7051%" y="181" width="0.5461%" height="15" fill="rgb(250,166,2)"/><text x="88.9551%" y="191.50"></text></g><g><title>optimized_mir (26,990,300 samples, 1.12%)</title><rect x="88.1345%" y="197" width="1.1190%" height="15" fill="rgb(242,216,29)"/><text x="88.3845%" y="207.50"></text></g><g><title>generate_crate_metadata (66,685,645 samples, 2.76%)</title><rect x="86.4933%" y="213" width="2.7647%" height="15" fill="rgb(230,116,27)"/><text x="86.7433%" y="223.50">ge..</text></g><g><title>hir_lowering (19,578,376 samples, 0.81%)</title><rect x="89.2580%" y="213" width="0.8117%" height="15" fill="rgb(228,99,48)"/><text x="89.5080%" y="223.50"></text></g><g><title>finish_ongoing_codegen (216,088,313 samples, 8.96%)</title><rect x="90.0704%" y="197" width="8.9588%" height="15" fill="rgb(253,11,6)"/><text x="90.3204%" y="207.50">finish_ongoin..</text></g><g><title>link_crate (17,031,498 samples, 0.71%)</title><rect x="99.0292%" y="197" width="0.7061%" height="15" fill="rgb(247,143,39)"/><text x="99.2792%" y="207.50"></text></g><g><title>link_binary (16,855,166 samples, 0.70%)</title><rect x="99.0366%" y="181" width="0.6988%" height="15" fill="rgb(236,97,10)"/><text x="99.2866%" y="191.50"></text></g><g><title>link_rlib (14,872,354 samples, 0.62%)</title><rect x="99.1188%" y="165" width="0.6166%" height="15" fill="rgb(233,208,19)"/><text x="99.3688%" y="175.50"></text></g><g><title>link (233,147,781 samples, 9.67%)</title><rect x="90.0697%" y="213" width="9.6661%" height="15" fill="rgb(216,164,2)"/><text x="90.3197%" y="223.50">link</text></g><g><title>self_profile_alloc_query_strings (2,835,491 samples, 0.12%)</title><rect x="99.7741%" y="213" width="0.1176%" height="15" fill="rgb(220,129,5)"/><text x="100.0241%" y="223.50"></text></g><g><title>all (2,412,018,820 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,412,018,820 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (2,515,738 samples, 0.10%)</title><rect x="99.8957%" y="213" width="0.1043%" height="15" fill="rgb(251,28,31)"/><text x="100.1457%" y="223.50"></text></g></svg></svg>