<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,514,465 samples, 10.89%)</title><rect x="0.3727%" y="229" width="10.8934%" height="15" fill="rgb(227,0,7)"/><text x="0.6227%" y="239.50">LLVM_passes</text></g><g><title>param_env (216,315 samples, 0.16%)</title><rect x="18.7974%" y="149" width="0.1623%" height="15" fill="rgb(217,0,24)"/><text x="19.0474%" y="159.50"></text></g><g><title>item_attrs (140,440 samples, 0.11%)</title><rect x="19.2624%" y="117" width="0.1054%" height="15" fill="rgb(221,193,54)"/><text x="19.5124%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (135,400 samples, 0.10%)</title><rect x="19.2662%" y="101" width="0.1016%" height="15" fill="rgb(248,212,6)"/><text x="19.5162%" y="111.50"></text></g><g><title>codegen_fn_attrs (198,691 samples, 0.15%)</title><rect x="19.2234%" y="133" width="0.1491%" height="15" fill="rgb(208,68,35)"/><text x="19.4734%" y="143.50"></text></g><g><title>needs_drop_raw (373,423 samples, 0.28%)</title><rect x="20.6513%" y="117" width="0.2803%" height="15" fill="rgb(232,128,0)"/><text x="20.9013%" y="127.50"></text></g><g><title>is_copy_raw (323,123 samples, 0.24%)</title><rect x="20.6891%" y="101" width="0.2425%" height="15" fill="rgb(207,160,47)"/><text x="20.9391%" y="111.50"></text></g><g><title>evaluate_obligation (269,082 samples, 0.20%)</title><rect x="20.7296%" y="85" width="0.2020%" height="15" fill="rgb(228,23,34)"/><text x="20.9796%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (260,002 samples, 0.20%)</title><rect x="21.0870%" y="101" width="0.1951%" height="15" fill="rgb(218,30,26)"/><text x="21.3370%" y="111.50"></text></g><g><title>resolve_instance (596,495 samples, 0.45%)</title><rect x="20.9316%" y="117" width="0.4477%" height="15" fill="rgb(220,122,19)"/><text x="21.1816%" y="127.50"></text></g><g><title>thir_body (596,794 samples, 0.45%)</title><rect x="21.3955%" y="117" width="0.4479%" height="15" fill="rgb(250,228,42)"/><text x="21.6455%" y="127.50"></text></g><g><title>mir_const (4,728,503 samples, 3.55%)</title><rect x="18.3378%" y="165" width="3.5488%" height="15" fill="rgb(240,193,28)"/><text x="18.5878%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (3,899,713 samples, 2.93%)</title><rect x="18.9598%" y="149" width="2.9268%" height="15" fill="rgb(216,20,37)"/><text x="19.2098%" y="159.50">un..</text></g><g><title>mir_built (3,349,728 samples, 2.51%)</title><rect x="19.3726%" y="133" width="2.5140%" height="15" fill="rgb(206,188,39)"/><text x="19.6226%" y="143.50">mi..</text></g><g><title>mir_const (216,043 samples, 0.16%)</title><rect x="22.0885%" y="149" width="0.1621%" height="15" fill="rgb(217,207,13)"/><text x="22.3385%" y="159.50"></text></g><g><title>unsafety_check_result (184,043 samples, 0.14%)</title><rect x="22.1125%" y="133" width="0.1381%" height="15" fill="rgb(231,73,38)"/><text x="22.3625%" y="143.50"></text></g><g><title>mir_built (165,013 samples, 0.12%)</title><rect x="22.1268%" y="117" width="0.1238%" height="15" fill="rgb(225,20,46)"/><text x="22.3768%" y="127.50"></text></g><g><title>mir_promoted (5,786,476 samples, 4.34%)</title><rect x="17.9215%" y="181" width="4.3429%" height="15" fill="rgb(210,31,41)"/><text x="18.1715%" y="191.50">mir_p..</text></g><g><title>mir_const_qualif (503,306 samples, 0.38%)</title><rect x="21.8866%" y="165" width="0.3777%" height="15" fill="rgb(221,200,47)"/><text x="22.1366%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (445,095 samples, 0.33%)</title><rect x="22.2643%" y="181" width="0.3341%" height="15" fill="rgb(226,26,5)"/><text x="22.5143%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (223,415 samples, 0.17%)</title><rect x="22.5984%" y="181" width="0.1677%" height="15" fill="rgb(249,33,26)"/><text x="22.8484%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,356,183 samples, 1.02%)</title><rect x="22.8269%" y="181" width="1.0178%" height="15" fill="rgb(235,183,28)"/><text x="23.0769%" y="191.50"></text></g><g><title>MIR_borrow_checking (16,509,615 samples, 12.39%)</title><rect x="11.4562%" y="213" width="12.3908%" height="15" fill="rgb(221,5,38)"/><text x="11.7062%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (16,395,301 samples, 12.31%)</title><rect x="11.5420%" y="197" width="12.3050%" height="15" fill="rgb(247,18,42)"/><text x="11.7920%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (209,673 samples, 0.16%)</title><rect x="23.8470%" y="213" width="0.1574%" height="15" fill="rgb(241,131,45)"/><text x="24.0970%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (158,531 samples, 0.12%)</title><rect x="23.8854%" y="197" width="0.1190%" height="15" fill="rgb(249,31,29)"/><text x="24.1354%" y="207.50"></text></g><g><title>hir_module_items (166,301 samples, 0.12%)</title><rect x="24.0044%" y="213" width="0.1248%" height="15" fill="rgb(225,111,53)"/><text x="24.2544%" y="223.50"></text></g><g><title>codegen_fn_attrs (211,141 samples, 0.16%)</title><rect x="24.4076%" y="149" width="0.1585%" height="15" fill="rgb(238,160,17)"/><text x="24.6576%" y="159.50"></text></g><g><title>codegen_fn_attrs (372,684 samples, 0.28%)</title><rect x="24.2913%" y="181" width="0.2797%" height="15" fill="rgb(214,148,48)"/><text x="24.5413%" y="191.50"></text></g><g><title>should_inherit_track_caller (319,993 samples, 0.24%)</title><rect x="24.3309%" y="165" width="0.2402%" height="15" fill="rgb(232,36,49)"/><text x="24.5809%" y="175.50"></text></g><g><title>check_mod_attrs (561,028 samples, 0.42%)</title><rect x="24.1500%" y="197" width="0.4211%" height="15" fill="rgb(209,103,24)"/><text x="24.4000%" y="207.50"></text></g><g><title>lookup_deprecation_entry (157,771 samples, 0.12%)</title><rect x="24.8630%" y="181" width="0.1184%" height="15" fill="rgb(229,88,8)"/><text x="25.1130%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (451,663 samples, 0.34%)</title><rect x="24.7092%" y="197" width="0.3390%" height="15" fill="rgb(213,181,19)"/><text x="24.9592%" y="207.50"></text></g><g><title>misc_checking_1 (1,272,003 samples, 0.95%)</title><rect x="24.1294%" y="213" width="0.9547%" height="15" fill="rgb(254,191,54)"/><text x="24.3794%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (320,003 samples, 0.24%)</title><rect x="25.0850%" y="197" width="0.2402%" height="15" fill="rgb(241,83,37)"/><text x="25.3350%" y="207.50"></text></g><g><title>check_mod_liveness (251,283 samples, 0.19%)</title><rect x="25.1366%" y="181" width="0.1886%" height="15" fill="rgb(233,36,39)"/><text x="25.3866%" y="191.50"></text></g><g><title>misc_checking_2 (636,276 samples, 0.48%)</title><rect x="25.0841%" y="213" width="0.4775%" height="15" fill="rgb(226,3,54)"/><text x="25.3341%" y="223.50"></text></g><g><title>match_checking (315,083 samples, 0.24%)</title><rect x="25.3252%" y="197" width="0.2365%" height="15" fill="rgb(245,192,40)"/><text x="25.5752%" y="207.50"></text></g><g><title>check_match (287,733 samples, 0.22%)</title><rect x="25.3457%" y="181" width="0.2160%" height="15" fill="rgb(238,167,29)"/><text x="25.5957%" y="191.50"></text></g><g><title>check_private_in_public (208,333 samples, 0.16%)</title><rect x="25.5673%" y="197" width="0.1564%" height="15" fill="rgb(232,182,51)"/><text x="25.8173%" y="207.50"></text></g><g><title>death_checking (427,444 samples, 0.32%)</title><rect x="25.7237%" y="197" width="0.3208%" height="15" fill="rgb(231,60,39)"/><text x="25.9737%" y="207.50"></text></g><g><title>eval_to_const_value_raw (157,092 samples, 0.12%)</title><rect x="26.3153%" y="165" width="0.1179%" height="15" fill="rgb(208,69,12)"/><text x="26.5653%" y="175.50"></text></g><g><title>eval_to_const_value_raw (155,602 samples, 0.12%)</title><rect x="26.3164%" y="149" width="0.1168%" height="15" fill="rgb(235,93,37)"/><text x="26.5664%" y="159.50"></text></g><g><title>eval_to_allocation_raw (153,122 samples, 0.11%)</title><rect x="26.3183%" y="133" width="0.1149%" height="15" fill="rgb(213,116,39)"/><text x="26.5683%" y="143.50"></text></g><g><title>param_env (262,812 samples, 0.20%)</title><rect x="26.4332%" y="165" width="0.1972%" height="15" fill="rgb(222,207,29)"/><text x="26.6832%" y="175.50"></text></g><g><title>crate_lints (1,147,562 samples, 0.86%)</title><rect x="26.0455%" y="181" width="0.8613%" height="15" fill="rgb(206,96,30)"/><text x="26.2955%" y="191.50"></text></g><g><title>type_of (366,705 samples, 0.28%)</title><rect x="26.6316%" y="165" width="0.2752%" height="15" fill="rgb(218,138,4)"/><text x="26.8816%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (277,735 samples, 0.21%)</title><rect x="26.6984%" y="149" width="0.2084%" height="15" fill="rgb(250,191,14)"/><text x="26.9484%" y="159.50"></text></g><g><title>lint_checking (1,372,715 samples, 1.03%)</title><rect x="26.0445%" y="197" width="1.0303%" height="15" fill="rgb(239,60,40)"/><text x="26.2945%" y="207.50"></text></g><g><title>module_lints (223,773 samples, 0.17%)</title><rect x="26.9068%" y="181" width="0.1679%" height="15" fill="rgb(206,27,48)"/><text x="27.1568%" y="191.50"></text></g><g><title>lint_mod (218,402 samples, 0.16%)</title><rect x="26.9108%" y="165" width="0.1639%" height="15" fill="rgb(225,35,8)"/><text x="27.1608%" y="175.50"></text></g><g><title>privacy_access_levels (361,073 samples, 0.27%)</title><rect x="27.0748%" y="197" width="0.2710%" height="15" fill="rgb(250,213,24)"/><text x="27.3248%" y="207.50"></text></g><g><title>privacy_checking_modules (723,578 samples, 0.54%)</title><rect x="27.3457%" y="197" width="0.5431%" height="15" fill="rgb(247,123,22)"/><text x="27.5957%" y="207.50"></text></g><g><title>check_mod_privacy (718,628 samples, 0.54%)</title><rect x="27.3495%" y="181" width="0.5393%" height="15" fill="rgb(231,138,38)"/><text x="27.5995%" y="191.50"></text></g><g><title>misc_checking_3 (3,116,783 samples, 2.34%)</title><rect x="25.5616%" y="213" width="2.3392%" height="15" fill="rgb(231,145,46)"/><text x="25.8116%" y="223.50">m..</text></g><g><title>adt_destructor (151,742 samples, 0.11%)</title><rect x="27.9871%" y="165" width="0.1139%" height="15" fill="rgb(251,118,11)"/><text x="28.2371%" y="175.50"></text></g><g><title>coherent_trait (149,382 samples, 0.11%)</title><rect x="27.9888%" y="149" width="0.1121%" height="15" fill="rgb(217,147,25)"/><text x="28.2388%" y="159.50"></text></g><g><title>specialization_graph_of (147,982 samples, 0.11%)</title><rect x="27.9899%" y="133" width="0.1111%" height="15" fill="rgb(247,81,37)"/><text x="28.2399%" y="143.50"></text></g><g><title>impl_parent (1,368,694 samples, 1.03%)</title><rect x="29.7444%" y="149" width="1.0272%" height="15" fill="rgb(209,12,38)"/><text x="29.9944%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (584,939 samples, 0.44%)</title><rect x="30.3326%" y="133" width="0.4390%" height="15" fill="rgb(227,1,9)"/><text x="30.5826%" y="143.50"></text></g><g><title>impl_trait_ref (2,229,213 samples, 1.67%)</title><rect x="30.7716%" y="149" width="1.6731%" height="15" fill="rgb(248,47,43)"/><text x="31.0216%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,687,519 samples, 1.27%)</title><rect x="31.1782%" y="133" width="1.2665%" height="15" fill="rgb(221,10,30)"/><text x="31.4282%" y="143.50"></text></g><g><title>trait_impls_of (441,096 samples, 0.33%)</title><rect x="32.4593%" y="149" width="0.3311%" height="15" fill="rgb(210,229,1)"/><text x="32.7093%" y="159.50"></text></g><g><title>coherent_trait (6,433,948 samples, 4.83%)</title><rect x="27.9625%" y="181" width="4.8288%" height="15" fill="rgb(222,148,37)"/><text x="28.2125%" y="191.50">cohere..</text></g><g><title>specialization_graph_of (6,226,596 samples, 4.67%)</title><rect x="28.1181%" y="165" width="4.6732%" height="15" fill="rgb(234,67,33)"/><text x="28.3681%" y="175.50">speci..</text></g><g><title>coherence_checking (6,547,879 samples, 4.91%)</title><rect x="27.9452%" y="197" width="4.9143%" height="15" fill="rgb(247,98,35)"/><text x="28.1952%" y="207.50">cohere..</text></g><g><title>associated_item (350,554 samples, 0.26%)</title><rect x="43.4221%" y="133" width="0.2631%" height="15" fill="rgb(247,138,52)"/><text x="43.6721%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (278,824 samples, 0.21%)</title><rect x="43.4759%" y="117" width="0.2093%" height="15" fill="rgb(213,79,30)"/><text x="43.7259%" y="127.50"></text></g><g><title>associated_items (493,925 samples, 0.37%)</title><rect x="43.3289%" y="149" width="0.3707%" height="15" fill="rgb(246,177,23)"/><text x="43.5789%" y="159.50"></text></g><g><title>adt_def (181,752 samples, 0.14%)</title><rect x="43.8987%" y="85" width="0.1364%" height="15" fill="rgb(230,62,27)"/><text x="44.1487%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (181,442 samples, 0.14%)</title><rect x="43.8989%" y="69" width="0.1362%" height="15" fill="rgb(216,154,8)"/><text x="44.1489%" y="79.50"></text></g><g><title>item_attrs (176,272 samples, 0.13%)</title><rect x="43.9028%" y="53" width="0.1323%" height="15" fill="rgb(244,35,45)"/><text x="44.1528%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (175,862 samples, 0.13%)</title><rect x="43.9031%" y="37" width="0.1320%" height="15" fill="rgb(251,115,12)"/><text x="44.1531%" y="47.50"></text></g><g><title>adt_dtorck_constraint (219,532 samples, 0.16%)</title><rect x="43.8935%" y="101" width="0.1648%" height="15" fill="rgb(240,54,50)"/><text x="44.1435%" y="111.50"></text></g><g><title>adt_dtorck_constraint (228,702 samples, 0.17%)</title><rect x="43.8892%" y="117" width="0.1716%" height="15" fill="rgb(233,84,52)"/><text x="44.1392%" y="127.50"></text></g><g><title>adt_dtorck_constraint (270,992 samples, 0.20%)</title><rect x="43.8642%" y="133" width="0.2034%" height="15" fill="rgb(207,117,47)"/><text x="44.1142%" y="143.50"></text></g><g><title>dropck_outlives (502,363 samples, 0.38%)</title><rect x="43.7346%" y="149" width="0.3770%" height="15" fill="rgb(249,43,39)"/><text x="43.9846%" y="159.50"></text></g><g><title>explicit_predicates_of (296,302 samples, 0.22%)</title><rect x="45.5334%" y="101" width="0.2224%" height="15" fill="rgb(209,38,44)"/><text x="45.7834%" y="111.50"></text></g><g><title>predicates_of (457,812 samples, 0.34%)</title><rect x="45.4329%" y="133" width="0.3436%" height="15" fill="rgb(236,212,23)"/><text x="45.6829%" y="143.50"></text></g><g><title>predicates_defined_on (373,132 samples, 0.28%)</title><rect x="45.4965%" y="117" width="0.2800%" height="15" fill="rgb(242,79,21)"/><text x="45.7465%" y="127.50"></text></g><g><title>specializes (489,377 samples, 0.37%)</title><rect x="45.7765%" y="133" width="0.3673%" height="15" fill="rgb(211,96,35)"/><text x="46.0265%" y="143.50"></text></g><g><title>param_env (309,574 samples, 0.23%)</title><rect x="45.9115%" y="117" width="0.2323%" height="15" fill="rgb(253,215,40)"/><text x="46.1615%" y="127.50"></text></g><g><title>def_span (135,031 samples, 0.10%)</title><rect x="46.0425%" y="101" width="0.1013%" height="15" fill="rgb(211,81,21)"/><text x="46.2925%" y="111.50"></text></g><g><title>trait_impls_of (202,272 samples, 0.15%)</title><rect x="46.1486%" y="133" width="0.1518%" height="15" fill="rgb(208,190,38)"/><text x="46.3986%" y="143.50"></text></g><g><title>evaluate_obligation (2,921,436 samples, 2.19%)</title><rect x="44.1116%" y="149" width="2.1926%" height="15" fill="rgb(235,213,38)"/><text x="44.3616%" y="159.50">e..</text></g><g><title>evaluate_obligation (467,485 samples, 0.35%)</title><rect x="46.9587%" y="133" width="0.3509%" height="15" fill="rgb(237,122,38)"/><text x="47.2087%" y="143.50"></text></g><g><title>method_autoderef_steps (1,019,864 samples, 0.77%)</title><rect x="46.5586%" y="149" width="0.7654%" height="15" fill="rgb(244,218,35)"/><text x="46.8086%" y="159.50"></text></g><g><title>predicates_of (192,055 samples, 0.14%)</title><rect x="47.3598%" y="149" width="0.1441%" height="15" fill="rgb(240,68,47)"/><text x="47.6098%" y="159.50"></text></g><g><title>item_bodies_checking (19,557,368 samples, 14.68%)</title><rect x="32.8930%" y="197" width="14.6782%" height="15" fill="rgb(210,16,53)"/><text x="33.1430%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (19,555,128 samples, 14.68%)</title><rect x="32.8947%" y="181" width="14.6766%" height="15" fill="rgb(235,124,12)"/><text x="33.1447%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (19,467,717 samples, 14.61%)</title><rect x="32.9603%" y="165" width="14.6110%" height="15" fill="rgb(224,169,11)"/><text x="33.2103%" y="175.50">typeck</text></g><g><title>item_types_checking (2,298,904 samples, 1.73%)</title><rect x="47.5712%" y="197" width="1.7254%" height="15" fill="rgb(250,166,2)"/><text x="47.8212%" y="207.50"></text></g><g><title>check_mod_item_types (2,291,314 samples, 1.72%)</title><rect x="47.5769%" y="181" width="1.7197%" height="15" fill="rgb(242,216,29)"/><text x="47.8269%" y="191.50"></text></g><g><title>typeck (395,265 samples, 0.30%)</title><rect x="49.0000%" y="165" width="0.2967%" height="15" fill="rgb(230,116,27)"/><text x="49.2500%" y="175.50"></text></g><g><title>fn_sig (420,947 samples, 0.32%)</title><rect x="49.5400%" y="165" width="0.3159%" height="15" fill="rgb(228,99,48)"/><text x="49.7900%" y="175.50"></text></g><g><title>is_late_bound_map (592,587 samples, 0.44%)</title><rect x="49.9728%" y="149" width="0.4448%" height="15" fill="rgb(253,11,6)"/><text x="50.2228%" y="159.50"></text></g><g><title>resolve_lifetimes (545,165 samples, 0.41%)</title><rect x="50.0084%" y="133" width="0.4092%" height="15" fill="rgb(247,143,39)"/><text x="50.2584%" y="143.50"></text></g><g><title>generics_of (835,189 samples, 0.63%)</title><rect x="49.8559%" y="165" width="0.6268%" height="15" fill="rgb(236,97,10)"/><text x="50.1059%" y="175.50"></text></g><g><title>impl_trait_ref (135,251 samples, 0.10%)</title><rect x="50.4827%" y="165" width="0.1015%" height="15" fill="rgb(233,208,19)"/><text x="50.7327%" y="175.50"></text></g><g><title>explicit_predicates_of (415,404 samples, 0.31%)</title><rect x="50.7358%" y="133" width="0.3118%" height="15" fill="rgb(216,164,2)"/><text x="50.9858%" y="143.50"></text></g><g><title>predicates_of (765,459 samples, 0.57%)</title><rect x="50.6126%" y="165" width="0.5745%" height="15" fill="rgb(220,129,5)"/><text x="50.8626%" y="175.50"></text></g><g><title>predicates_defined_on (699,087 samples, 0.52%)</title><rect x="50.6624%" y="149" width="0.5247%" height="15" fill="rgb(242,17,10)"/><text x="50.9124%" y="159.50"></text></g><g><title>inferred_outlives_of (185,832 samples, 0.14%)</title><rect x="51.0476%" y="133" width="0.1395%" height="15" fill="rgb(242,107,0)"/><text x="51.2976%" y="143.50"></text></g><g><title>inferred_outlives_crate (162,831 samples, 0.12%)</title><rect x="51.0649%" y="117" width="0.1222%" height="15" fill="rgb(251,28,31)"/><text x="51.3149%" y="127.50"></text></g><g><title>type_collecting (2,779,630 samples, 2.09%)</title><rect x="49.2986%" y="197" width="2.0862%" height="15" fill="rgb(233,223,10)"/><text x="49.5486%" y="207.50">t..</text></g><g><title>collect_mod_item_types (2,765,750 samples, 2.08%)</title><rect x="49.3091%" y="181" width="2.0758%" height="15" fill="rgb(215,21,27)"/><text x="49.5591%" y="191.50">c..</text></g><g><title>type_of (263,472 samples, 0.20%)</title><rect x="51.1871%" y="165" width="0.1977%" height="15" fill="rgb(232,23,21)"/><text x="51.4371%" y="175.50"></text></g><g><title>evaluate_obligation (560,002 samples, 0.42%)</title><rect x="53.4917%" y="165" width="0.4203%" height="15" fill="rgb(244,5,23)"/><text x="53.7417%" y="175.50"></text></g><g><title>implied_outlives_bounds (312,826 samples, 0.23%)</title><rect x="53.9147%" y="165" width="0.2348%" height="15" fill="rgb(226,81,46)"/><text x="54.1647%" y="175.50"></text></g><g><title>param_env (421,750 samples, 0.32%)</title><rect x="54.1495%" y="165" width="0.3165%" height="15" fill="rgb(247,70,30)"/><text x="54.3995%" y="175.50"></text></g><g><title>region_scope_tree (273,332 samples, 0.21%)</title><rect x="54.5079%" y="165" width="0.2051%" height="15" fill="rgb(212,68,19)"/><text x="54.7579%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,194,341 samples, 3.15%)</title><rect x="51.5717%" y="181" width="3.1479%" height="15" fill="rgb(240,187,13)"/><text x="51.8217%" y="191.50">che..</text></g><g><title>evaluate_obligation (301,573 samples, 0.23%)</title><rect x="56.9964%" y="165" width="0.2263%" height="15" fill="rgb(223,113,26)"/><text x="57.2464%" y="175.50"></text></g><g><title>implied_outlives_bounds (218,261 samples, 0.16%)</title><rect x="57.2454%" y="165" width="0.1638%" height="15" fill="rgb(206,192,2)"/><text x="57.4954%" y="175.50"></text></g><g><title>param_env (459,323 samples, 0.34%)</title><rect x="57.4134%" y="165" width="0.3447%" height="15" fill="rgb(241,108,4)"/><text x="57.6634%" y="175.50"></text></g><g><title>check_item_well_formed (4,301,254 samples, 3.23%)</title><rect x="54.7196%" y="181" width="3.2282%" height="15" fill="rgb(247,173,49)"/><text x="54.9696%" y="191.50">che..</text></g><g><title>analysis (62,930,278 samples, 47.23%)</title><rect x="11.2662%" y="229" width="47.2306%" height="15" fill="rgb(224,114,35)"/><text x="11.5162%" y="239.50">analysis</text></g><g><title>type_check_crate (40,766,174 samples, 30.60%)</title><rect x="27.9008%" y="213" width="30.5959%" height="15" fill="rgb(245,159,27)"/><text x="28.1508%" y="223.50">type_check_crate</text></g><g><title>wf_checking (9,471,351 samples, 7.11%)</title><rect x="51.3883%" y="197" width="7.1085%" height="15" fill="rgb(245,172,44)"/><text x="51.6383%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (731,438 samples, 0.55%)</title><rect x="57.9478%" y="181" width="0.5490%" height="15" fill="rgb(236,23,11)"/><text x="58.1978%" y="191.50"></text></g><g><title>fn_abi_of_instance (181,333 samples, 0.14%)</title><rect x="59.4269%" y="197" width="0.1361%" height="15" fill="rgb(205,117,38)"/><text x="59.6769%" y="207.50"></text></g><g><title>codegen_module (771,448 samples, 0.58%)</title><rect x="58.9889%" y="213" width="0.5790%" height="15" fill="rgb(237,72,25)"/><text x="59.2389%" y="223.50"></text></g><g><title>optimized_mir (236,323 samples, 0.18%)</title><rect x="59.6742%" y="165" width="0.1774%" height="15" fill="rgb(244,70,9)"/><text x="59.9242%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (382,094 samples, 0.29%)</title><rect x="59.5785%" y="181" width="0.2868%" height="15" fill="rgb(217,125,39)"/><text x="59.8285%" y="191.50"></text></g><g><title>monomorphization_collector (416,264 samples, 0.31%)</title><rect x="59.5771%" y="197" width="0.3124%" height="15" fill="rgb(235,36,10)"/><text x="59.8271%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (513,765 samples, 0.39%)</title><rect x="59.5681%" y="213" width="0.3856%" height="15" fill="rgb(251,123,47)"/><text x="59.8181%" y="223.50"></text></g><g><title>codegen_crate (1,951,711 samples, 1.46%)</title><rect x="58.5002%" y="229" width="1.4648%" height="15" fill="rgb(221,13,13)"/><text x="58.7502%" y="239.50"></text></g><g><title>codegen_module_optimize (6,559,980 samples, 4.92%)</title><rect x="59.9650%" y="229" width="4.9234%" height="15" fill="rgb(238,131,9)"/><text x="60.2150%" y="239.50">codege..</text></g><g><title>LLVM_module_optimize (5,961,134 samples, 4.47%)</title><rect x="60.4144%" y="213" width="4.4740%" height="15" fill="rgb(211,50,8)"/><text x="60.6644%" y="223.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (1,880,309 samples, 1.41%)</title><rect x="65.1942%" y="213" width="1.4112%" height="15" fill="rgb(245,182,24)"/><text x="65.4442%" y="223.50"></text></g><g><title>LLVM_module_codegen (4,935,113 samples, 3.70%)</title><rect x="66.6054%" y="213" width="3.7039%" height="15" fill="rgb(242,14,37)"/><text x="66.8554%" y="223.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (4,842,911 samples, 3.63%)</title><rect x="66.6746%" y="197" width="3.6347%" height="15" fill="rgb(246,228,12)"/><text x="66.9246%" y="207.50">LLVM..</text></g><g><title>codegen_module_perform_lto (7,260,977 samples, 5.45%)</title><rect x="64.8884%" y="229" width="5.4495%" height="15" fill="rgb(213,55,15)"/><text x="65.1384%" y="239.50">codegen..</text></g><g><title>macro_expand_crate (10,141,608 samples, 7.61%)</title><rect x="70.5659%" y="213" width="7.6115%" height="15" fill="rgb(209,9,3)"/><text x="70.8159%" y="223.50">macro_expa..</text></g><g><title>expand_crate (10,134,568 samples, 7.61%)</title><rect x="70.5712%" y="197" width="7.6062%" height="15" fill="rgb(230,59,30)"/><text x="70.8212%" y="207.50">expand_cra..</text></g><g><title>late_resolve_crate (1,323,544 samples, 0.99%)</title><rect x="78.3299%" y="197" width="0.9933%" height="15" fill="rgb(209,121,21)"/><text x="78.5799%" y="207.50"></text></g><g><title>configure_and_expand (12,065,088 samples, 9.06%)</title><rect x="70.3379%" y="229" width="9.0551%" height="15" fill="rgb(220,109,13)"/><text x="70.5879%" y="239.50">configure_and..</text></g><g><title>resolve_crate (1,551,207 samples, 1.16%)</title><rect x="78.2288%" y="213" width="1.1642%" height="15" fill="rgb(232,18,1)"/><text x="78.4788%" y="223.50"></text></g><g><title>drop_ast (164,171 samples, 0.12%)</title><rect x="79.3930%" y="229" width="0.1232%" height="15" fill="rgb(215,41,42)"/><text x="79.6430%" y="239.50"></text></g><g><title>early_lint_checks (258,263 samples, 0.19%)</title><rect x="79.5251%" y="229" width="0.1938%" height="15" fill="rgb(224,123,36)"/><text x="79.7751%" y="239.50"></text></g><g><title>free_global_ctxt (2,085,352 samples, 1.57%)</title><rect x="79.7189%" y="229" width="1.5651%" height="15" fill="rgb(240,125,3)"/><text x="79.9689%" y="239.50"></text></g><g><title>exported_symbols (170,402 samples, 0.13%)</title><rect x="82.6541%" y="213" width="0.1279%" height="15" fill="rgb(205,98,50)"/><text x="82.9041%" y="223.50"></text></g><g><title>is_sized_raw (166,083 samples, 0.12%)</title><rect x="84.7074%" y="181" width="0.1246%" height="15" fill="rgb(205,185,37)"/><text x="84.9574%" y="191.50"></text></g><g><title>layout_of (373,185 samples, 0.28%)</title><rect x="84.8321%" y="181" width="0.2801%" height="15" fill="rgb(238,207,15)"/><text x="85.0821%" y="191.50"></text></g><g><title>layout_of (886,652 samples, 0.67%)</title><rect x="84.5161%" y="197" width="0.6655%" height="15" fill="rgb(213,199,42)"/><text x="84.7661%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,151,832 samples, 1.61%)</title><rect x="85.1816%" y="197" width="1.6150%" height="15" fill="rgb(235,201,11)"/><text x="85.4316%" y="207.50"></text></g><g><title>optimized_mir (5,260,015 samples, 3.95%)</title><rect x="82.8567%" y="213" width="3.9478%" height="15" fill="rgb(207,46,11)"/><text x="83.1067%" y="223.50">opti..</text></g><g><title>generate_crate_metadata (7,417,038 samples, 5.57%)</title><rect x="81.2840%" y="229" width="5.5667%" height="15" fill="rgb(241,35,35)"/><text x="81.5340%" y="239.50">generat..</text></g><g><title>hir_lowering (3,047,702 samples, 2.29%)</title><rect x="86.8507%" y="229" width="2.2874%" height="15" fill="rgb(243,32,47)"/><text x="87.1007%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (11,665,104 samples, 8.75%)</title><rect x="89.1459%" y="213" width="8.7549%" height="15" fill="rgb(247,202,23)"/><text x="89.3959%" y="223.50">finish_ongoi..</text></g><g><title>link_crate (827,069 samples, 0.62%)</title><rect x="97.9008%" y="213" width="0.6207%" height="15" fill="rgb(219,102,11)"/><text x="98.1508%" y="223.50"></text></g><g><title>link_binary (810,059 samples, 0.61%)</title><rect x="97.9136%" y="197" width="0.6080%" height="15" fill="rgb(243,110,44)"/><text x="98.1636%" y="207.50"></text></g><g><title>link_rlib (541,715 samples, 0.41%)</title><rect x="98.1150%" y="181" width="0.4066%" height="15" fill="rgb(222,74,54)"/><text x="98.3650%" y="191.50"></text></g><g><title>link (12,508,973 samples, 9.39%)</title><rect x="89.1381%" y="229" width="9.3883%" height="15" fill="rgb(216,99,12)"/><text x="89.3881%" y="239.50">link</text></g><g><title>parse_crate (546,636 samples, 0.41%)</title><rect x="98.5263%" y="229" width="0.4103%" height="15" fill="rgb(226,22,26)"/><text x="98.7763%" y="239.50"></text></g><g><title>prepare_outputs (196,153 samples, 0.15%)</title><rect x="98.9399%" y="229" width="0.1472%" height="15" fill="rgb(217,163,10)"/><text x="99.1899%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (739,578 samples, 0.56%)</title><rect x="99.0871%" y="229" width="0.5551%" height="15" fill="rgb(213,25,53)"/><text x="99.3371%" y="239.50"></text></g><g><title>all (133,240,466 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (133,240,466 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (418,845 samples, 0.31%)</title><rect x="99.6856%" y="229" width="0.3144%" height="15" fill="rgb(229,68,48)"/><text x="99.9356%" y="239.50"></text></g></svg></svg>