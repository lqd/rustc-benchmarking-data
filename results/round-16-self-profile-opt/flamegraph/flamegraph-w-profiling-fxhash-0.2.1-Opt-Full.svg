<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,593,925 samples, 15.59%)</title><rect x="0.4267%" y="197" width="15.5868%" height="15" fill="rgb(227,0,7)"/><text x="0.6767%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (286,513 samples, 0.15%)</title><rect x="15.8627%" y="181" width="0.1509%" height="15" fill="rgb(217,0,24)"/><text x="16.1127%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (270,873 samples, 0.14%)</title><rect x="15.8709%" y="165" width="0.1427%" height="15" fill="rgb(221,193,54)"/><text x="16.1209%" y="175.50"></text></g><g><title>needs_drop_raw (264,665 samples, 0.14%)</title><rect x="20.0386%" y="85" width="0.1394%" height="15" fill="rgb(248,212,6)"/><text x="20.2886%" y="95.50"></text></g><g><title>specialization_graph_of (516,656 samples, 0.27%)</title><rect x="20.3292%" y="69" width="0.2721%" height="15" fill="rgb(208,68,35)"/><text x="20.5792%" y="79.50"></text></g><g><title>impl_trait_ref (263,232 samples, 0.14%)</title><rect x="20.4627%" y="53" width="0.1386%" height="15" fill="rgb(232,128,0)"/><text x="20.7127%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (220,372 samples, 0.12%)</title><rect x="20.4853%" y="37" width="0.1161%" height="15" fill="rgb(207,160,47)"/><text x="20.7353%" y="47.50"></text></g><g><title>resolve_instance (870,288 samples, 0.46%)</title><rect x="20.1780%" y="85" width="0.4584%" height="15" fill="rgb(228,23,34)"/><text x="20.4280%" y="95.50"></text></g><g><title>thir_body (402,646 samples, 0.21%)</title><rect x="20.6434%" y="85" width="0.2121%" height="15" fill="rgb(218,30,26)"/><text x="20.8934%" y="95.50"></text></g><g><title>mir_const (3,732,141 samples, 1.97%)</title><rect x="18.8937%" y="133" width="1.9657%" height="15" fill="rgb(220,122,19)"/><text x="19.1437%" y="143.50">m..</text></g><g><title>unsafety_check_result (3,253,915 samples, 1.71%)</title><rect x="19.1456%" y="117" width="1.7138%" height="15" fill="rgb(250,228,42)"/><text x="19.3956%" y="127.50"></text></g><g><title>mir_built (2,871,141 samples, 1.51%)</title><rect x="19.3472%" y="101" width="1.5122%" height="15" fill="rgb(240,193,28)"/><text x="19.5972%" y="111.50"></text></g><g><title>mir_promoted (4,361,668 samples, 2.30%)</title><rect x="18.7066%" y="149" width="2.2972%" height="15" fill="rgb(216,20,37)"/><text x="18.9566%" y="159.50">m..</text></g><g><title>mir_const_qualif (274,275 samples, 0.14%)</title><rect x="20.8594%" y="133" width="0.1445%" height="15" fill="rgb(206,188,39)"/><text x="21.1094%" y="143.50"></text></g><g><title>mir_const (204,395 samples, 0.11%)</title><rect x="20.8962%" y="117" width="0.1077%" height="15" fill="rgb(217,207,13)"/><text x="21.1462%" y="127.50"></text></g><g><title>type_op_prove_predicate (511,986 samples, 0.27%)</title><rect x="21.1200%" y="149" width="0.2697%" height="15" fill="rgb(231,73,38)"/><text x="21.3700%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,881,738 samples, 5.20%)</title><rect x="16.1862%" y="181" width="5.2046%" height="15" fill="rgb(225,20,46)"/><text x="16.4362%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (9,812,287 samples, 5.17%)</title><rect x="16.2228%" y="165" width="5.1680%" height="15" fill="rgb(210,31,41)"/><text x="16.4728%" y="175.50">mir_bo..</text></g><g><title>hir_module_items (216,303 samples, 0.11%)</title><rect x="21.4687%" y="181" width="0.1139%" height="15" fill="rgb(221,200,47)"/><text x="21.7187%" y="191.50"></text></g><g><title>should_inherit_track_caller (347,774 samples, 0.18%)</title><rect x="21.8494%" y="133" width="0.1832%" height="15" fill="rgb(226,26,5)"/><text x="22.0994%" y="143.50"></text></g><g><title>codegen_fn_attrs (607,357 samples, 0.32%)</title><rect x="21.7312%" y="149" width="0.3199%" height="15" fill="rgb(249,33,26)"/><text x="21.9812%" y="159.50"></text></g><g><title>check_mod_attrs (859,910 samples, 0.45%)</title><rect x="21.5983%" y="165" width="0.4529%" height="15" fill="rgb(235,183,28)"/><text x="21.8483%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (380,624 samples, 0.20%)</title><rect x="22.1702%" y="165" width="0.2005%" height="15" fill="rgb(221,5,38)"/><text x="22.4202%" y="175.50"></text></g><g><title>misc_checking_1 (1,565,437 samples, 0.82%)</title><rect x="21.5828%" y="181" width="0.8245%" height="15" fill="rgb(247,18,42)"/><text x="21.8328%" y="191.50"></text></g><g><title>misc_checking_2 (378,104 samples, 0.20%)</title><rect x="22.4073%" y="181" width="0.1991%" height="15" fill="rgb(241,131,45)"/><text x="22.6573%" y="191.50"></text></g><g><title>match_checking (215,912 samples, 0.11%)</title><rect x="22.4927%" y="165" width="0.1137%" height="15" fill="rgb(249,31,29)"/><text x="22.7427%" y="175.50"></text></g><g><title>check_match (199,692 samples, 0.11%)</title><rect x="22.5013%" y="149" width="0.1052%" height="15" fill="rgb(225,111,53)"/><text x="22.7513%" y="159.50"></text></g><g><title>death_checking (200,422 samples, 0.11%)</title><rect x="22.6565%" y="165" width="0.1056%" height="15" fill="rgb(238,160,17)"/><text x="22.9065%" y="175.50"></text></g><g><title>eval_to_const_value_raw (190,112 samples, 0.10%)</title><rect x="23.0552%" y="133" width="0.1001%" height="15" fill="rgb(214,148,48)"/><text x="23.3052%" y="143.50"></text></g><g><title>crate_lints (2,170,084 samples, 1.14%)</title><rect x="22.7630%" y="149" width="1.1430%" height="15" fill="rgb(232,36,49)"/><text x="23.0130%" y="159.50"></text></g><g><title>type_of (1,315,743 samples, 0.69%)</title><rect x="23.2130%" y="133" width="0.6930%" height="15" fill="rgb(209,103,24)"/><text x="23.4630%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (821,259 samples, 0.43%)</title><rect x="23.4734%" y="117" width="0.4325%" height="15" fill="rgb(229,88,8)"/><text x="23.7234%" y="127.50"></text></g><g><title>lint_checking (2,352,516 samples, 1.24%)</title><rect x="22.7620%" y="165" width="1.2390%" height="15" fill="rgb(213,181,19)"/><text x="23.0120%" y="175.50"></text></g><g><title>privacy_checking_modules (252,943 samples, 0.13%)</title><rect x="24.0551%" y="165" width="0.1332%" height="15" fill="rgb(254,191,54)"/><text x="24.3051%" y="175.50"></text></g><g><title>check_mod_privacy (251,373 samples, 0.13%)</title><rect x="24.0559%" y="149" width="0.1324%" height="15" fill="rgb(241,83,37)"/><text x="24.3059%" y="159.50"></text></g><g><title>misc_checking_3 (3,013,293 samples, 1.59%)</title><rect x="22.6065%" y="181" width="1.5871%" height="15" fill="rgb(233,36,39)"/><text x="22.8565%" y="191.50"></text></g><g><title>impl_parent (2,000,027 samples, 1.05%)</title><rect x="25.9631%" y="117" width="1.0534%" height="15" fill="rgb(226,3,54)"/><text x="26.2131%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,227,898 samples, 0.65%)</title><rect x="26.3698%" y="101" width="0.6467%" height="15" fill="rgb(245,192,40)"/><text x="26.6198%" y="111.50"></text></g><g><title>impl_trait_ref (6,297,256 samples, 3.32%)</title><rect x="27.0165%" y="117" width="3.3167%" height="15" fill="rgb(238,167,29)"/><text x="27.2665%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,537,857 samples, 2.92%)</title><rect x="27.4165%" y="101" width="2.9167%" height="15" fill="rgb(232,182,51)"/><text x="27.6665%" y="111.50">me..</text></g><g><title>coherent_trait (12,303,935 samples, 6.48%)</title><rect x="24.2288%" y="149" width="6.4804%" height="15" fill="rgb(231,60,39)"/><text x="24.4788%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (12,287,765 samples, 6.47%)</title><rect x="24.2373%" y="133" width="6.4718%" height="15" fill="rgb(208,69,12)"/><text x="24.4873%" y="143.50">speciali..</text></g><g><title>trait_impls_of (712,247 samples, 0.38%)</title><rect x="30.3340%" y="117" width="0.3751%" height="15" fill="rgb(235,93,37)"/><text x="30.5840%" y="127.50"></text></g><g><title>coherence_checking (12,394,206 samples, 6.53%)</title><rect x="24.2183%" y="165" width="6.5279%" height="15" fill="rgb(213,116,39)"/><text x="24.4683%" y="175.50">coherence..</text></g><g><title>associated_item (503,805 samples, 0.27%)</title><rect x="34.4922%" y="101" width="0.2653%" height="15" fill="rgb(222,207,29)"/><text x="34.7422%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (406,424 samples, 0.21%)</title><rect x="34.5435%" y="85" width="0.2141%" height="15" fill="rgb(206,96,30)"/><text x="34.7935%" y="95.50"></text></g><g><title>associated_items (665,487 samples, 0.35%)</title><rect x="34.4159%" y="117" width="0.3505%" height="15" fill="rgb(218,138,4)"/><text x="34.6659%" y="127.50"></text></g><g><title>specializes (267,072 samples, 0.14%)</title><rect x="35.2825%" y="101" width="0.1407%" height="15" fill="rgb(250,191,14)"/><text x="35.5325%" y="111.50"></text></g><g><title>param_env (191,212 samples, 0.10%)</title><rect x="35.3225%" y="85" width="0.1007%" height="15" fill="rgb(239,60,40)"/><text x="35.5725%" y="95.50"></text></g><g><title>trait_impls_of (476,616 samples, 0.25%)</title><rect x="35.4252%" y="101" width="0.2510%" height="15" fill="rgb(206,27,48)"/><text x="35.6752%" y="111.50"></text></g><g><title>evaluate_obligation (1,566,433 samples, 0.83%)</title><rect x="34.8518%" y="117" width="0.8250%" height="15" fill="rgb(225,35,8)"/><text x="35.1018%" y="127.50"></text></g><g><title>item_bodies_checking (10,420,524 samples, 5.49%)</title><rect x="30.7670%" y="165" width="5.4884%" height="15" fill="rgb(250,213,24)"/><text x="31.0170%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (10,418,234 samples, 5.49%)</title><rect x="30.7682%" y="149" width="5.4872%" height="15" fill="rgb(247,123,22)"/><text x="31.0182%" y="159.50">typeck_..</text></g><g><title>typeck (10,373,472 samples, 5.46%)</title><rect x="30.7918%" y="133" width="5.4636%" height="15" fill="rgb(231,138,38)"/><text x="31.0418%" y="143.50">typeck</text></g><g><title>adt_destructor (314,674 samples, 0.17%)</title><rect x="36.5068%" y="133" width="0.1657%" height="15" fill="rgb(231,145,46)"/><text x="36.7568%" y="143.50"></text></g><g><title>coherent_trait (310,604 samples, 0.16%)</title><rect x="36.5089%" y="117" width="0.1636%" height="15" fill="rgb(251,118,11)"/><text x="36.7589%" y="127.50"></text></g><g><title>specialization_graph_of (309,124 samples, 0.16%)</title><rect x="36.5097%" y="101" width="0.1628%" height="15" fill="rgb(217,147,25)"/><text x="36.7597%" y="111.50"></text></g><g><title>evaluate_obligation (245,202 samples, 0.13%)</title><rect x="36.8443%" y="117" width="0.1291%" height="15" fill="rgb(247,81,37)"/><text x="37.0943%" y="127.50"></text></g><g><title>item_types_checking (1,432,486 samples, 0.75%)</title><rect x="36.2554%" y="165" width="0.7545%" height="15" fill="rgb(209,12,38)"/><text x="36.5054%" y="175.50"></text></g><g><title>check_mod_item_types (1,430,426 samples, 0.75%)</title><rect x="36.2565%" y="149" width="0.7534%" height="15" fill="rgb(227,1,9)"/><text x="36.5065%" y="159.50"></text></g><g><title>typeck (563,276 samples, 0.30%)</title><rect x="36.7132%" y="133" width="0.2967%" height="15" fill="rgb(248,47,43)"/><text x="36.9632%" y="143.50"></text></g><g><title>fn_sig (287,281 samples, 0.15%)</title><rect x="37.1973%" y="133" width="0.1513%" height="15" fill="rgb(221,10,30)"/><text x="37.4473%" y="143.50"></text></g><g><title>named_region_map (570,679 samples, 0.30%)</title><rect x="37.4338%" y="117" width="0.3006%" height="15" fill="rgb(210,229,1)"/><text x="37.6838%" y="127.50"></text></g><g><title>resolve_lifetimes (524,118 samples, 0.28%)</title><rect x="37.4583%" y="101" width="0.2760%" height="15" fill="rgb(222,148,37)"/><text x="37.7083%" y="111.50"></text></g><g><title>generics_of (757,879 samples, 0.40%)</title><rect x="37.3486%" y="133" width="0.3992%" height="15" fill="rgb(234,67,33)"/><text x="37.5986%" y="143.50"></text></g><g><title>predicates_of (385,105 samples, 0.20%)</title><rect x="37.7715%" y="133" width="0.2028%" height="15" fill="rgb(247,98,35)"/><text x="38.0215%" y="143.50"></text></g><g><title>predicates_defined_on (321,854 samples, 0.17%)</title><rect x="37.8048%" y="117" width="0.1695%" height="15" fill="rgb(247,138,52)"/><text x="38.0548%" y="127.50"></text></g><g><title>type_collecting (2,172,714 samples, 1.14%)</title><rect x="37.0108%" y="165" width="1.1443%" height="15" fill="rgb(213,79,30)"/><text x="37.2608%" y="175.50"></text></g><g><title>collect_mod_item_types (2,161,054 samples, 1.14%)</title><rect x="37.0169%" y="149" width="1.1382%" height="15" fill="rgb(246,177,23)"/><text x="37.2669%" y="159.50"></text></g><g><title>type_of (309,314 samples, 0.16%)</title><rect x="37.9922%" y="133" width="0.1629%" height="15" fill="rgb(230,62,27)"/><text x="38.2422%" y="143.50"></text></g><g><title>evaluate_obligation (199,033 samples, 0.10%)</title><rect x="38.5904%" y="133" width="0.1048%" height="15" fill="rgb(216,154,8)"/><text x="38.8404%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,243,865 samples, 0.66%)</title><rect x="38.2061%" y="149" width="0.6551%" height="15" fill="rgb(244,35,45)"/><text x="38.4561%" y="159.50"></text></g><g><title>evaluate_obligation (215,244 samples, 0.11%)</title><rect x="39.1675%" y="133" width="0.1134%" height="15" fill="rgb(251,115,12)"/><text x="39.4175%" y="143.50"></text></g><g><title>param_env (221,053 samples, 0.12%)</title><rect x="39.2989%" y="133" width="0.1164%" height="15" fill="rgb(240,54,50)"/><text x="39.5489%" y="143.50"></text></g><g><title>check_item_well_formed (1,257,002 samples, 0.66%)</title><rect x="38.8612%" y="149" width="0.6621%" height="15" fill="rgb(233,84,52)"/><text x="39.1112%" y="159.50"></text></g><g><title>analysis (44,870,272 samples, 23.63%)</title><rect x="16.0136%" y="197" width="23.6327%" height="15" fill="rgb(207,117,47)"/><text x="16.2636%" y="207.50">analysis</text></g><g><title>type_check_crate (29,339,392 samples, 15.45%)</title><rect x="24.1935%" y="181" width="15.4528%" height="15" fill="rgb(249,43,39)"/><text x="24.4435%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,828,161 samples, 1.49%)</title><rect x="38.1567%" y="165" width="1.4896%" height="15" fill="rgb(209,38,44)"/><text x="38.4067%" y="175.50"></text></g><g><title>check_trait_item_well_formed (233,552 samples, 0.12%)</title><rect x="39.5233%" y="149" width="0.1230%" height="15" fill="rgb(236,212,23)"/><text x="39.7733%" y="159.50"></text></g><g><title>param_env (223,463 samples, 0.12%)</title><rect x="41.2883%" y="149" width="0.1177%" height="15" fill="rgb(242,79,21)"/><text x="41.5383%" y="159.50"></text></g><g><title>fn_abi_of_instance (954,076 samples, 0.50%)</title><rect x="40.9084%" y="165" width="0.5025%" height="15" fill="rgb(211,96,35)"/><text x="41.1584%" y="175.50"></text></g><g><title>codegen_module (2,920,922 samples, 1.54%)</title><rect x="39.9753%" y="181" width="1.5384%" height="15" fill="rgb(253,215,40)"/><text x="40.2253%" y="191.50"></text></g><g><title>optimized_mir (567,006 samples, 0.30%)</title><rect x="41.6924%" y="133" width="0.2986%" height="15" fill="rgb(211,81,21)"/><text x="41.9424%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (311,701 samples, 0.16%)</title><rect x="42.0397%" y="117" width="0.1642%" height="15" fill="rgb(208,190,38)"/><text x="42.2897%" y="127.50"></text></g><g><title>specialization_graph_of (439,854 samples, 0.23%)</title><rect x="42.2551%" y="117" width="0.2317%" height="15" fill="rgb(235,213,38)"/><text x="42.5051%" y="127.50"></text></g><g><title>resolve_instance (963,200 samples, 0.51%)</title><rect x="41.9911%" y="133" width="0.5073%" height="15" fill="rgb(237,122,38)"/><text x="42.2411%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (2,046,353 samples, 1.08%)</title><rect x="41.5265%" y="149" width="1.0778%" height="15" fill="rgb(244,218,35)"/><text x="41.7765%" y="159.50"></text></g><g><title>vtable_entries (194,781 samples, 0.10%)</title><rect x="42.5017%" y="133" width="0.1026%" height="15" fill="rgb(240,68,47)"/><text x="42.7517%" y="143.50"></text></g><g><title>monomorphization_collector (2,083,253 samples, 1.10%)</title><rect x="41.5255%" y="165" width="1.0972%" height="15" fill="rgb(210,16,53)"/><text x="41.7755%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (2,268,885 samples, 1.19%)</title><rect x="41.5141%" y="181" width="1.1950%" height="15" fill="rgb(235,124,12)"/><text x="41.7641%" y="191.50"></text></g><g><title>codegen_crate (5,868,014 samples, 3.09%)</title><rect x="39.6526%" y="197" width="3.0906%" height="15" fill="rgb(224,169,11)"/><text x="39.9026%" y="207.50">cod..</text></g><g><title>codegen_module_optimize (19,578,036 samples, 10.31%)</title><rect x="42.7432%" y="197" width="10.3116%" height="15" fill="rgb(250,166,2)"/><text x="42.9932%" y="207.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (17,260,481 samples, 9.09%)</title><rect x="43.9638%" y="181" width="9.0909%" height="15" fill="rgb(242,216,29)"/><text x="44.2138%" y="191.50">LLVM_module_o..</text></g><g><title>LLVM_lto_optimize (7,452,661 samples, 3.93%)</title><rect x="53.7843%" y="181" width="3.9252%" height="15" fill="rgb(230,116,27)"/><text x="54.0343%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen (21,795,668 samples, 11.48%)</title><rect x="57.7095%" y="181" width="11.4796%" height="15" fill="rgb(228,99,48)"/><text x="57.9595%" y="191.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (21,545,976 samples, 11.35%)</title><rect x="57.8410%" y="165" width="11.3480%" height="15" fill="rgb(253,11,6)"/><text x="58.0910%" y="175.50">LLVM_module_codeg..</text></g><g><title>codegen_module_perform_lto (30,805,708 samples, 16.23%)</title><rect x="53.0548%" y="197" width="16.2250%" height="15" fill="rgb(247,143,39)"/><text x="53.3048%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (14,632,551 samples, 7.71%)</title><rect x="69.5474%" y="181" width="7.7068%" height="15" fill="rgb(236,97,10)"/><text x="69.7974%" y="191.50">macro_expan..</text></g><g><title>expand_crate (14,607,141 samples, 7.69%)</title><rect x="69.5608%" y="165" width="7.6934%" height="15" fill="rgb(233,208,19)"/><text x="69.8108%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,715,140 samples, 1.43%)</title><rect x="75.8242%" y="149" width="1.4300%" height="15" fill="rgb(216,164,2)"/><text x="76.0742%" y="159.50"></text></g><g><title>metadata_register_crate (976,092 samples, 0.51%)</title><rect x="76.7401%" y="133" width="0.5141%" height="15" fill="rgb(220,129,5)"/><text x="76.9901%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (217,712 samples, 0.11%)</title><rect x="77.2613%" y="181" width="0.1147%" height="15" fill="rgb(242,17,10)"/><text x="77.5113%" y="191.50"></text></g><g><title>late_resolve_crate (2,088,953 samples, 1.10%)</title><rect x="77.4653%" y="165" width="1.1002%" height="15" fill="rgb(242,107,0)"/><text x="77.7153%" y="175.50"></text></g><g><title>configure_and_expand (17,734,864 samples, 9.34%)</title><rect x="69.2798%" y="197" width="9.3408%" height="15" fill="rgb(251,28,31)"/><text x="69.5298%" y="207.50">configure_and..</text></g><g><title>resolve_crate (2,363,106 samples, 1.24%)</title><rect x="77.3760%" y="181" width="1.2446%" height="15" fill="rgb(233,223,10)"/><text x="77.6260%" y="191.50"></text></g><g><title>early_lint_checks (635,717 samples, 0.33%)</title><rect x="78.7272%" y="197" width="0.3348%" height="15" fill="rgb(215,21,27)"/><text x="78.9772%" y="207.50"></text></g><g><title>free_global_ctxt (3,414,538 samples, 1.80%)</title><rect x="79.0620%" y="197" width="1.7984%" height="15" fill="rgb(232,23,21)"/><text x="79.3120%" y="207.50">f..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,036,410 samples, 0.55%)</title><rect x="82.1368%" y="165" width="0.5459%" height="15" fill="rgb(244,5,23)"/><text x="82.3868%" y="175.50"></text></g><g><title>optimized_mir (2,402,736 samples, 1.27%)</title><rect x="81.4193%" y="181" width="1.2655%" height="15" fill="rgb(226,81,46)"/><text x="81.6693%" y="191.50"></text></g><g><title>generate_crate_metadata (3,499,358 samples, 1.84%)</title><rect x="80.8604%" y="197" width="1.8431%" height="15" fill="rgb(247,70,30)"/><text x="81.1104%" y="207.50">g..</text></g><g><title>hir_lowering (2,669,600 samples, 1.41%)</title><rect x="82.7035%" y="197" width="1.4061%" height="15" fill="rgb(212,68,19)"/><text x="82.9535%" y="207.50"></text></g><g><title>finish_ongoing_codegen (24,575,760 samples, 12.94%)</title><rect x="84.1193%" y="181" width="12.9438%" height="15" fill="rgb(240,187,13)"/><text x="84.3693%" y="191.50">finish_ongoing_code..</text></g><g><title>link_crate (1,297,284 samples, 0.68%)</title><rect x="97.0631%" y="181" width="0.6833%" height="15" fill="rgb(223,113,26)"/><text x="97.3131%" y="191.50"></text></g><g><title>link_binary (1,280,554 samples, 0.67%)</title><rect x="97.0719%" y="165" width="0.6745%" height="15" fill="rgb(206,192,2)"/><text x="97.3219%" y="175.50"></text></g><g><title>link_rlib (849,429 samples, 0.45%)</title><rect x="97.2990%" y="149" width="0.4474%" height="15" fill="rgb(241,108,4)"/><text x="97.5490%" y="159.50"></text></g><g><title>link (25,905,704 samples, 13.64%)</title><rect x="84.1095%" y="197" width="13.6443%" height="15" fill="rgb(247,173,49)"/><text x="84.3595%" y="207.50">link</text></g><g><title>parse_crate (2,828,491 samples, 1.49%)</title><rect x="97.7538%" y="197" width="1.4897%" height="15" fill="rgb(224,114,35)"/><text x="98.0038%" y="207.50"></text></g><g><title>prepare_outputs (373,855 samples, 0.20%)</title><rect x="99.2491%" y="197" width="0.1969%" height="15" fill="rgb(245,159,27)"/><text x="99.4991%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (567,647 samples, 0.30%)</title><rect x="99.4460%" y="197" width="0.2990%" height="15" fill="rgb(245,172,44)"/><text x="99.6960%" y="207.50"></text></g><g><title>all (189,865,106 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (189,865,106 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (324,154 samples, 0.17%)</title><rect x="99.8293%" y="197" width="0.1707%" height="15" fill="rgb(237,72,25)"/><text x="100.0793%" y="207.50"></text></g></svg></svg>