<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,208,190 samples, 12.34%)</title><rect x="0.7533%" y="181" width="12.3379%" height="15" fill="rgb(227,0,7)"/><text x="1.0033%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (601,497 samples, 0.61%)</title><rect x="12.4833%" y="165" width="0.6079%" height="15" fill="rgb(217,0,24)"/><text x="12.7333%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (584,956 samples, 0.59%)</title><rect x="12.5000%" y="149" width="0.5912%" height="15" fill="rgb(221,193,54)"/><text x="12.7500%" y="159.50"></text></g><g><title>needs_drop_raw (257,392 samples, 0.26%)</title><rect x="17.4784%" y="69" width="0.2601%" height="15" fill="rgb(248,212,6)"/><text x="17.7284%" y="79.50"></text></g><g><title>is_copy_raw (163,221 samples, 0.16%)</title><rect x="17.5736%" y="53" width="0.1650%" height="15" fill="rgb(208,68,35)"/><text x="17.8236%" y="63.50"></text></g><g><title>evaluate_obligation (125,331 samples, 0.13%)</title><rect x="17.6119%" y="37" width="0.1267%" height="15" fill="rgb(232,128,0)"/><text x="17.8619%" y="47.50"></text></g><g><title>specialization_graph_of (118,141 samples, 0.12%)</title><rect x="17.9334%" y="53" width="0.1194%" height="15" fill="rgb(207,160,47)"/><text x="18.1834%" y="63.50"></text></g><g><title>resolve_instance (337,361 samples, 0.34%)</title><rect x="17.7385%" y="69" width="0.3409%" height="15" fill="rgb(228,23,34)"/><text x="17.9885%" y="79.50"></text></g><g><title>thir_body (207,064 samples, 0.21%)</title><rect x="18.0872%" y="69" width="0.2093%" height="15" fill="rgb(218,30,26)"/><text x="18.3372%" y="79.50"></text></g><g><title>mir_const (1,933,605 samples, 1.95%)</title><rect x="16.3467%" y="117" width="1.9542%" height="15" fill="rgb(220,122,19)"/><text x="16.5967%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,605,660 samples, 1.62%)</title><rect x="16.6781%" y="101" width="1.6227%" height="15" fill="rgb(250,228,42)"/><text x="16.9281%" y="111.50"></text></g><g><title>mir_built (1,398,398 samples, 1.41%)</title><rect x="16.8876%" y="85" width="1.4133%" height="15" fill="rgb(240,193,28)"/><text x="17.1376%" y="95.50"></text></g><g><title>mir_promoted (2,186,487 samples, 2.21%)</title><rect x="16.1049%" y="133" width="2.2097%" height="15" fill="rgb(216,20,37)"/><text x="16.3549%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (174,122 samples, 0.18%)</title><rect x="18.3147%" y="133" width="0.1760%" height="15" fill="rgb(206,188,39)"/><text x="18.5647%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (150,013 samples, 0.15%)</title><rect x="18.4906%" y="133" width="0.1516%" height="15" fill="rgb(217,207,13)"/><text x="18.7406%" y="143.50"></text></g><g><title>normalize_projection_ty (107,981 samples, 0.11%)</title><rect x="18.5331%" y="117" width="0.1091%" height="15" fill="rgb(231,73,38)"/><text x="18.7831%" y="127.50"></text></g><g><title>type_op_prove_predicate (500,377 samples, 0.51%)</title><rect x="18.6422%" y="133" width="0.5057%" height="15" fill="rgb(225,20,46)"/><text x="18.8922%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,665,320 samples, 5.73%)</title><rect x="13.4267%" y="165" width="5.7255%" height="15" fill="rgb(210,31,41)"/><text x="13.6767%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (5,634,300 samples, 5.69%)</title><rect x="13.4581%" y="149" width="5.6942%" height="15" fill="rgb(221,200,47)"/><text x="13.7081%" y="159.50">mir_bor..</text></g><g><title>codegen_fn_attrs (132,462 samples, 0.13%)</title><rect x="19.4417%" y="101" width="0.1339%" height="15" fill="rgb(226,26,5)"/><text x="19.6917%" y="111.50"></text></g><g><title>codegen_fn_attrs (223,163 samples, 0.23%)</title><rect x="19.3531%" y="133" width="0.2255%" height="15" fill="rgb(249,33,26)"/><text x="19.6031%" y="143.50"></text></g><g><title>should_inherit_track_caller (193,902 samples, 0.20%)</title><rect x="19.3827%" y="117" width="0.1960%" height="15" fill="rgb(235,183,28)"/><text x="19.6327%" y="127.50"></text></g><g><title>check_mod_attrs (314,753 samples, 0.32%)</title><rect x="19.2607%" y="149" width="0.3181%" height="15" fill="rgb(221,5,38)"/><text x="19.5107%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (176,892 samples, 0.18%)</title><rect x="19.6537%" y="149" width="0.1788%" height="15" fill="rgb(247,18,42)"/><text x="19.9037%" y="159.50"></text></g><g><title>misc_checking_1 (610,676 samples, 0.62%)</title><rect x="19.2416%" y="165" width="0.6172%" height="15" fill="rgb(241,131,45)"/><text x="19.4916%" y="175.50"></text></g><g><title>misc_checking_2 (221,573 samples, 0.22%)</title><rect x="19.8588%" y="165" width="0.2239%" height="15" fill="rgb(249,31,29)"/><text x="20.1088%" y="175.50"></text></g><g><title>match_checking (124,492 samples, 0.13%)</title><rect x="19.9569%" y="149" width="0.1258%" height="15" fill="rgb(225,111,53)"/><text x="20.2069%" y="159.50"></text></g><g><title>check_match (115,682 samples, 0.12%)</title><rect x="19.9658%" y="133" width="0.1169%" height="15" fill="rgb(238,160,17)"/><text x="20.2158%" y="143.50"></text></g><g><title>death_checking (174,792 samples, 0.18%)</title><rect x="20.1667%" y="149" width="0.1766%" height="15" fill="rgb(214,148,48)"/><text x="20.4167%" y="159.50"></text></g><g><title>crate_lints (1,717,608 samples, 1.74%)</title><rect x="20.3447%" y="133" width="1.7359%" height="15" fill="rgb(232,36,49)"/><text x="20.5947%" y="143.50"></text></g><g><title>type_of (1,085,392 samples, 1.10%)</title><rect x="20.9836%" y="117" width="1.0969%" height="15" fill="rgb(209,103,24)"/><text x="21.2336%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (832,740 samples, 0.84%)</title><rect x="21.2389%" y="101" width="0.8416%" height="15" fill="rgb(229,88,8)"/><text x="21.4889%" y="111.50"></text></g><g><title>lint_checking (1,833,459 samples, 1.85%)</title><rect x="20.3434%" y="149" width="1.8529%" height="15" fill="rgb(213,181,19)"/><text x="20.5934%" y="159.50">l..</text></g><g><title>module_lints (114,581 samples, 0.12%)</title><rect x="22.0805%" y="133" width="0.1158%" height="15" fill="rgb(254,191,54)"/><text x="22.3305%" y="143.50"></text></g><g><title>lint_mod (110,891 samples, 0.11%)</title><rect x="22.0843%" y="117" width="0.1121%" height="15" fill="rgb(241,83,37)"/><text x="22.3343%" y="127.50"></text></g><g><title>privacy_checking_modules (219,053 samples, 0.22%)</title><rect x="22.2629%" y="149" width="0.2214%" height="15" fill="rgb(233,36,39)"/><text x="22.5129%" y="159.50"></text></g><g><title>check_mod_privacy (216,193 samples, 0.22%)</title><rect x="22.2658%" y="133" width="0.2185%" height="15" fill="rgb(226,3,54)"/><text x="22.5158%" y="143.50"></text></g><g><title>misc_checking_3 (2,384,306 samples, 2.41%)</title><rect x="20.0827%" y="165" width="2.4096%" height="15" fill="rgb(245,192,40)"/><text x="20.3327%" y="175.50">mi..</text></g><g><title>impl_trait_ref (167,943 samples, 0.17%)</title><rect x="22.6982%" y="69" width="0.1697%" height="15" fill="rgb(238,167,29)"/><text x="22.9482%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (147,823 samples, 0.15%)</title><rect x="22.7185%" y="53" width="0.1494%" height="15" fill="rgb(232,182,51)"/><text x="22.9685%" y="63.50"></text></g><g><title>adt_destructor (327,334 samples, 0.33%)</title><rect x="22.5626%" y="117" width="0.3308%" height="15" fill="rgb(231,60,39)"/><text x="22.8126%" y="127.50"></text></g><g><title>coherent_trait (320,754 samples, 0.32%)</title><rect x="22.5692%" y="101" width="0.3242%" height="15" fill="rgb(208,69,12)"/><text x="22.8192%" y="111.50"></text></g><g><title>specialization_graph_of (319,534 samples, 0.32%)</title><rect x="22.5704%" y="85" width="0.3229%" height="15" fill="rgb(235,93,37)"/><text x="22.8204%" y="95.50"></text></g><g><title>impl_parent (2,264,666 samples, 2.29%)</title><rect x="26.2570%" y="101" width="2.2887%" height="15" fill="rgb(213,116,39)"/><text x="26.5070%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,190,343 samples, 1.20%)</title><rect x="27.3427%" y="85" width="1.2030%" height="15" fill="rgb(222,207,29)"/><text x="27.5927%" y="95.50"></text></g><g><title>impl_trait_ref (4,905,751 samples, 4.96%)</title><rect x="28.5475%" y="101" width="4.9579%" height="15" fill="rgb(206,96,30)"/><text x="28.7975%" y="111.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,089,125 samples, 4.13%)</title><rect x="29.3728%" y="85" width="4.1326%" height="15" fill="rgb(218,138,4)"/><text x="29.6228%" y="95.50">metad..</text></g><g><title>trait_impls_of (622,926 samples, 0.63%)</title><rect x="33.5658%" y="101" width="0.6295%" height="15" fill="rgb(250,191,14)"/><text x="33.8158%" y="111.50"></text></g><g><title>implementations_of_trait (175,470 samples, 0.18%)</title><rect x="34.0180%" y="85" width="0.1773%" height="15" fill="rgb(239,60,40)"/><text x="34.2680%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (143,600 samples, 0.15%)</title><rect x="34.0502%" y="69" width="0.1451%" height="15" fill="rgb(206,27,48)"/><text x="34.3002%" y="79.50"></text></g><g><title>coherent_trait (16,124,252 samples, 16.30%)</title><rect x="22.5355%" y="133" width="16.2956%" height="15" fill="rgb(225,35,8)"/><text x="22.7855%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (15,671,177 samples, 15.84%)</title><rect x="22.9934%" y="117" width="15.8377%" height="15" fill="rgb(250,213,24)"/><text x="23.2434%" y="127.50">specialization_graph_of</text></g><g><title>visible_parent_map (4,582,869 samples, 4.63%)</title><rect x="34.1995%" y="101" width="4.6316%" height="15" fill="rgb(247,123,22)"/><text x="34.4495%" y="111.50">visib..</text></g><g><title>module_children (4,060,444 samples, 4.10%)</title><rect x="34.7275%" y="85" width="4.1036%" height="15" fill="rgb(231,138,38)"/><text x="34.9775%" y="95.50">modu..</text></g><g><title>metadata_decode_entry_module_children (3,976,563 samples, 4.02%)</title><rect x="34.8123%" y="69" width="4.0188%" height="15" fill="rgb(231,145,46)"/><text x="35.0623%" y="79.50">meta..</text></g><g><title>coherence_checking (16,182,072 samples, 16.35%)</title><rect x="22.5210%" y="149" width="16.3541%" height="15" fill="rgb(251,118,11)"/><text x="22.7710%" y="159.50">coherence_checking</text></g><g><title>associated_item (149,191 samples, 0.15%)</title><rect x="43.8271%" y="85" width="0.1508%" height="15" fill="rgb(217,147,25)"/><text x="44.0771%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (114,501 samples, 0.12%)</title><rect x="43.8622%" y="69" width="0.1157%" height="15" fill="rgb(247,81,37)"/><text x="44.1122%" y="79.50"></text></g><g><title>associated_items (225,501 samples, 0.23%)</title><rect x="43.7610%" y="101" width="0.2279%" height="15" fill="rgb(209,12,38)"/><text x="44.0110%" y="111.50"></text></g><g><title>dropck_outlives (141,932 samples, 0.14%)</title><rect x="44.0119%" y="101" width="0.1434%" height="15" fill="rgb(227,1,9)"/><text x="44.2619%" y="111.50"></text></g><g><title>evaluate_obligation (775,730 samples, 0.78%)</title><rect x="44.1554%" y="101" width="0.7840%" height="15" fill="rgb(248,47,43)"/><text x="44.4054%" y="111.50"></text></g><g><title>trait_impls_of (112,991 samples, 0.11%)</title><rect x="44.8252%" y="85" width="0.1142%" height="15" fill="rgb(221,10,30)"/><text x="45.0752%" y="95.50"></text></g><g><title>item_attrs (116,680 samples, 0.12%)</title><rect x="45.1195%" y="101" width="0.1179%" height="15" fill="rgb(210,229,1)"/><text x="45.3695%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,220 samples, 0.11%)</title><rect x="45.1240%" y="85" width="0.1134%" height="15" fill="rgb(222,148,37)"/><text x="45.3740%" y="95.50"></text></g><g><title>method_autoderef_steps (109,631 samples, 0.11%)</title><rect x="45.2661%" y="101" width="0.1108%" height="15" fill="rgb(234,67,33)"/><text x="45.5161%" y="111.50"></text></g><g><title>object_safety_violations (124,291 samples, 0.13%)</title><rect x="45.3769%" y="101" width="0.1256%" height="15" fill="rgb(247,98,35)"/><text x="45.6269%" y="111.50"></text></g><g><title>predicates_of (137,461 samples, 0.14%)</title><rect x="45.5226%" y="101" width="0.1389%" height="15" fill="rgb(247,138,52)"/><text x="45.7726%" y="111.50"></text></g><g><title>predicates_defined_on (102,161 samples, 0.10%)</title><rect x="45.5582%" y="85" width="0.1032%" height="15" fill="rgb(213,79,30)"/><text x="45.8082%" y="95.50"></text></g><g><title>item_bodies_checking (6,780,553 samples, 6.85%)</title><rect x="38.8950%" y="149" width="6.8526%" height="15" fill="rgb(246,177,23)"/><text x="39.1450%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (6,778,703 samples, 6.85%)</title><rect x="38.8969%" y="133" width="6.8508%" height="15" fill="rgb(230,62,27)"/><text x="39.1469%" y="143.50">typeck_it..</text></g><g><title>typeck (6,754,893 samples, 6.83%)</title><rect x="38.9210%" y="117" width="6.8267%" height="15" fill="rgb(216,154,8)"/><text x="39.1710%" y="127.50">typeck</text></g><g><title>item_types_checking (238,702 samples, 0.24%)</title><rect x="45.7477%" y="149" width="0.2412%" height="15" fill="rgb(244,35,45)"/><text x="45.9977%" y="159.50"></text></g><g><title>check_mod_item_types (234,522 samples, 0.24%)</title><rect x="45.7519%" y="133" width="0.2370%" height="15" fill="rgb(251,115,12)"/><text x="46.0019%" y="143.50"></text></g><g><title>fn_sig (148,390 samples, 0.15%)</title><rect x="46.1273%" y="117" width="0.1500%" height="15" fill="rgb(240,54,50)"/><text x="46.3773%" y="127.50"></text></g><g><title>named_region_map (176,361 samples, 0.18%)</title><rect x="46.3328%" y="101" width="0.1782%" height="15" fill="rgb(233,84,52)"/><text x="46.5828%" y="111.50"></text></g><g><title>resolve_lifetimes (160,211 samples, 0.16%)</title><rect x="46.3491%" y="85" width="0.1619%" height="15" fill="rgb(207,117,47)"/><text x="46.5991%" y="95.50"></text></g><g><title>generics_of (239,383 samples, 0.24%)</title><rect x="46.2773%" y="117" width="0.2419%" height="15" fill="rgb(249,43,39)"/><text x="46.5273%" y="127.50"></text></g><g><title>explicit_predicates_of (195,862 samples, 0.20%)</title><rect x="46.6147%" y="85" width="0.1979%" height="15" fill="rgb(209,38,44)"/><text x="46.8647%" y="95.50"></text></g><g><title>predicates_of (304,954 samples, 0.31%)</title><rect x="46.5536%" y="117" width="0.3082%" height="15" fill="rgb(236,212,23)"/><text x="46.8036%" y="127.50"></text></g><g><title>predicates_defined_on (281,394 samples, 0.28%)</title><rect x="46.5774%" y="101" width="0.2844%" height="15" fill="rgb(242,79,21)"/><text x="46.8274%" y="111.50"></text></g><g><title>type_collecting (947,160 samples, 0.96%)</title><rect x="45.9898%" y="149" width="0.9572%" height="15" fill="rgb(211,96,35)"/><text x="46.2398%" y="159.50"></text></g><g><title>collect_mod_item_types (939,320 samples, 0.95%)</title><rect x="45.9977%" y="133" width="0.9493%" height="15" fill="rgb(253,215,40)"/><text x="46.2477%" y="143.50"></text></g><g><title>evaluate_obligation (213,272 samples, 0.22%)</title><rect x="47.6691%" y="117" width="0.2155%" height="15" fill="rgb(211,81,21)"/><text x="47.9191%" y="127.50"></text></g><g><title>implied_outlives_bounds (115,341 samples, 0.12%)</title><rect x="47.8846%" y="117" width="0.1166%" height="15" fill="rgb(208,190,38)"/><text x="48.1346%" y="127.50"></text></g><g><title>param_env (99,022 samples, 0.10%)</title><rect x="48.0012%" y="117" width="0.1001%" height="15" fill="rgb(235,213,38)"/><text x="48.2512%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,155,251 samples, 1.17%)</title><rect x="47.0304%" y="133" width="1.1675%" height="15" fill="rgb(237,122,38)"/><text x="47.2804%" y="143.50"></text></g><g><title>param_env (126,350 samples, 0.13%)</title><rect x="48.8477%" y="117" width="0.1277%" height="15" fill="rgb(244,218,35)"/><text x="49.0977%" y="127.50"></text></g><g><title>check_item_well_formed (895,201 samples, 0.90%)</title><rect x="48.1980%" y="133" width="0.9047%" height="15" fill="rgb(240,68,47)"/><text x="48.4480%" y="143.50"></text></g><g><title>evaluate_obligation (250,822 samples, 0.25%)</title><rect x="49.5618%" y="117" width="0.2535%" height="15" fill="rgb(210,16,53)"/><text x="49.8118%" y="127.50"></text></g><g><title>analysis (36,529,389 samples, 36.92%)</title><rect x="13.0912%" y="181" width="36.9177%" height="15" fill="rgb(235,124,12)"/><text x="13.3412%" y="191.50">analysis</text></g><g><title>type_check_crate (27,227,130 samples, 27.52%)</title><rect x="22.4923%" y="165" width="27.5165%" height="15" fill="rgb(224,169,11)"/><text x="22.7423%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,027,942 samples, 3.06%)</title><rect x="46.9487%" y="149" width="3.0601%" height="15" fill="rgb(250,166,2)"/><text x="47.1987%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (896,640 samples, 0.91%)</title><rect x="49.1027%" y="133" width="0.9062%" height="15" fill="rgb(242,216,29)"/><text x="49.3527%" y="143.50"></text></g><g><title>is_freeze_raw (166,481 samples, 0.17%)</title><rect x="52.0923%" y="133" width="0.1683%" height="15" fill="rgb(230,116,27)"/><text x="52.3423%" y="143.50"></text></g><g><title>evaluate_obligation (154,221 samples, 0.16%)</title><rect x="52.1047%" y="117" width="0.1559%" height="15" fill="rgb(228,99,48)"/><text x="52.3547%" y="127.50"></text></g><g><title>is_unpin_raw (156,851 samples, 0.16%)</title><rect x="52.2606%" y="133" width="0.1585%" height="15" fill="rgb(253,11,6)"/><text x="52.5106%" y="143.50"></text></g><g><title>evaluate_obligation (150,931 samples, 0.15%)</title><rect x="52.2665%" y="117" width="0.1525%" height="15" fill="rgb(247,143,39)"/><text x="52.5165%" y="127.50"></text></g><g><title>param_env (116,830 samples, 0.12%)</title><rect x="52.4676%" y="133" width="0.1181%" height="15" fill="rgb(236,97,10)"/><text x="52.7176%" y="143.50"></text></g><g><title>fn_abi_of_instance (673,463 samples, 0.68%)</title><rect x="51.9081%" y="149" width="0.6806%" height="15" fill="rgb(233,208,19)"/><text x="52.1581%" y="159.50"></text></g><g><title>codegen_module (1,880,731 samples, 1.90%)</title><rect x="50.8152%" y="165" width="1.9007%" height="15" fill="rgb(216,164,2)"/><text x="51.0652%" y="175.50">c..</text></g><g><title>optimized_mir (296,363 samples, 0.30%)</title><rect x="52.9264%" y="117" width="0.2995%" height="15" fill="rgb(220,129,5)"/><text x="53.1764%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (149,192 samples, 0.15%)</title><rect x="53.2685%" y="101" width="0.1508%" height="15" fill="rgb(242,17,10)"/><text x="53.5185%" y="111.50"></text></g><g><title>impl_parent (112,383 samples, 0.11%)</title><rect x="53.6619%" y="85" width="0.1136%" height="15" fill="rgb(242,107,0)"/><text x="53.9119%" y="95.50"></text></g><g><title>specialization_graph_of (474,406 samples, 0.48%)</title><rect x="53.4715%" y="101" width="0.4794%" height="15" fill="rgb(251,28,31)"/><text x="53.7215%" y="111.50"></text></g><g><title>impl_trait_ref (173,601 samples, 0.18%)</title><rect x="53.7755%" y="85" width="0.1754%" height="15" fill="rgb(233,223,10)"/><text x="54.0255%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (126,551 samples, 0.13%)</title><rect x="53.8230%" y="69" width="0.1279%" height="15" fill="rgb(215,21,27)"/><text x="54.0730%" y="79.50"></text></g><g><title>resolve_instance (735,148 samples, 0.74%)</title><rect x="53.2259%" y="117" width="0.7430%" height="15" fill="rgb(232,23,21)"/><text x="53.4759%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,330,444 samples, 1.34%)</title><rect x="52.7295%" y="133" width="1.3446%" height="15" fill="rgb(244,5,23)"/><text x="52.9795%" y="143.50"></text></g><g><title>vtable_entries (104,081 samples, 0.11%)</title><rect x="53.9689%" y="117" width="0.1052%" height="15" fill="rgb(226,81,46)"/><text x="54.2189%" y="127.50"></text></g><g><title>monomorphization_collector (1,346,664 samples, 1.36%)</title><rect x="52.7277%" y="149" width="1.3610%" height="15" fill="rgb(247,70,30)"/><text x="52.9777%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,492,416 samples, 1.51%)</title><rect x="52.7165%" y="165" width="1.5083%" height="15" fill="rgb(212,68,19)"/><text x="52.9665%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (134,672 samples, 0.14%)</title><rect x="54.0887%" y="149" width="0.1361%" height="15" fill="rgb(240,187,13)"/><text x="54.3387%" y="159.50"></text></g><g><title>codegen_crate (4,223,525 samples, 4.27%)</title><rect x="50.0139%" y="181" width="4.2684%" height="15" fill="rgb(223,113,26)"/><text x="50.2639%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (6,755,751 samples, 6.83%)</title><rect x="54.2823%" y="181" width="6.8276%" height="15" fill="rgb(206,192,2)"/><text x="54.5323%" y="191.50">codegen_m..</text></g><g><title>LLVM_module_optimize (3,163,933 samples, 3.20%)</title><rect x="57.9123%" y="165" width="3.1976%" height="15" fill="rgb(241,108,4)"/><text x="58.1623%" y="175.50">LLV..</text></g><g><title>LLVM_lto_optimize (2,881,881 samples, 2.91%)</title><rect x="61.8369%" y="165" width="2.9125%" height="15" fill="rgb(247,173,49)"/><text x="62.0869%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (8,799,295 samples, 8.89%)</title><rect x="64.7495%" y="165" width="8.8928%" height="15" fill="rgb(224,114,35)"/><text x="64.9995%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (8,633,553 samples, 8.73%)</title><rect x="64.9170%" y="149" width="8.7253%" height="15" fill="rgb(245,159,27)"/><text x="65.1670%" y="159.50">LLVM_module_..</text></g><g><title>codegen_module_perform_lto (12,474,474 samples, 12.61%)</title><rect x="61.1099%" y="181" width="12.6071%" height="15" fill="rgb(245,172,44)"/><text x="61.3599%" y="191.50">codegen_module_perf..</text></g><g><title>metadata_load_macro (142,631 samples, 0.14%)</title><rect x="80.3672%" y="133" width="0.1441%" height="15" fill="rgb(236,23,11)"/><text x="80.6172%" y="143.50"></text></g><g><title>metadata_register_crate (1,319,274 samples, 1.33%)</title><rect x="80.5114%" y="133" width="1.3333%" height="15" fill="rgb(205,117,38)"/><text x="80.7614%" y="143.50"></text></g><g><title>metadata_register_crate (483,734 samples, 0.49%)</title><rect x="81.3558%" y="117" width="0.4889%" height="15" fill="rgb(237,72,25)"/><text x="81.6058%" y="127.50"></text></g><g><title>macro_expand_crate (7,895,584 samples, 7.98%)</title><rect x="73.9357%" y="165" width="7.9795%" height="15" fill="rgb(244,70,9)"/><text x="74.1857%" y="175.50">macro_expan..</text></g><g><title>expand_crate (7,885,674 samples, 7.97%)</title><rect x="73.9457%" y="149" width="7.9695%" height="15" fill="rgb(217,125,39)"/><text x="74.1957%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (518,725 samples, 0.52%)</title><rect x="82.0874%" y="149" width="0.5242%" height="15" fill="rgb(235,36,10)"/><text x="82.3374%" y="159.50"></text></g><g><title>configure_and_expand (8,855,004 samples, 8.95%)</title><rect x="73.7169%" y="181" width="8.9491%" height="15" fill="rgb(251,123,47)"/><text x="73.9669%" y="191.50">configure_and..</text></g><g><title>resolve_crate (689,407 samples, 0.70%)</title><rect x="81.9693%" y="165" width="0.6967%" height="15" fill="rgb(221,13,13)"/><text x="82.2193%" y="175.50"></text></g><g><title>early_lint_checks (130,252 samples, 0.13%)</title><rect x="82.7549%" y="181" width="0.1316%" height="15" fill="rgb(238,131,9)"/><text x="83.0049%" y="191.50"></text></g><g><title>free_global_ctxt (3,771,739 samples, 3.81%)</title><rect x="82.8865%" y="181" width="3.8118%" height="15" fill="rgb(211,50,8)"/><text x="83.1365%" y="191.50">free..</text></g><g><title>layout_of (191,742 samples, 0.19%)</title><rect x="88.2129%" y="149" width="0.1938%" height="15" fill="rgb(245,182,24)"/><text x="88.4629%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (715,424 samples, 0.72%)</title><rect x="88.4067%" y="149" width="0.7230%" height="15" fill="rgb(242,14,37)"/><text x="88.6567%" y="159.50"></text></g><g><title>optimized_mir (1,599,685 samples, 1.62%)</title><rect x="87.5202%" y="165" width="1.6167%" height="15" fill="rgb(246,228,12)"/><text x="87.7702%" y="175.50"></text></g><g><title>generate_crate_metadata (2,441,125 samples, 2.47%)</title><rect x="86.6983%" y="181" width="2.4671%" height="15" fill="rgb(213,55,15)"/><text x="86.9483%" y="191.50">ge..</text></g><g><title>hir_lowering (1,107,611 samples, 1.12%)</title><rect x="89.1654%" y="181" width="1.1194%" height="15" fill="rgb(209,9,3)"/><text x="89.4154%" y="191.50"></text></g><g><title>finish_ongoing_codegen (6,487,700 samples, 6.56%)</title><rect x="90.2960%" y="165" width="6.5567%" height="15" fill="rgb(230,59,30)"/><text x="90.5460%" y="175.50">finish_on..</text></g><g><title>link_crate (711,808 samples, 0.72%)</title><rect x="96.8526%" y="165" width="0.7194%" height="15" fill="rgb(209,121,21)"/><text x="97.1026%" y="175.50"></text></g><g><title>link_binary (701,158 samples, 0.71%)</title><rect x="96.8634%" y="149" width="0.7086%" height="15" fill="rgb(220,109,13)"/><text x="97.1134%" y="159.50"></text></g><g><title>link_rlib (422,964 samples, 0.43%)</title><rect x="97.1445%" y="133" width="0.4275%" height="15" fill="rgb(232,18,1)"/><text x="97.3945%" y="143.50"></text></g><g><title>link (7,217,248 samples, 7.29%)</title><rect x="90.2848%" y="181" width="7.2940%" height="15" fill="rgb(215,41,42)"/><text x="90.5348%" y="191.50">link</text></g><g><title>parse_crate (697,228 samples, 0.70%)</title><rect x="97.5788%" y="181" width="0.7046%" height="15" fill="rgb(224,123,36)"/><text x="97.8288%" y="191.50"></text></g><g><title>prepare_outputs (209,042 samples, 0.21%)</title><rect x="98.2880%" y="181" width="0.2113%" height="15" fill="rgb(240,125,3)"/><text x="98.5380%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,084,782 samples, 1.10%)</title><rect x="98.4993%" y="181" width="1.0963%" height="15" fill="rgb(205,98,50)"/><text x="98.7493%" y="191.50"></text></g><g><title>all (98,948,303 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (98,948,303 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (331,704 samples, 0.34%)</title><rect x="99.6648%" y="181" width="0.3352%" height="15" fill="rgb(213,199,42)"/><text x="99.9148%" y="191.50"></text></g></svg></svg>