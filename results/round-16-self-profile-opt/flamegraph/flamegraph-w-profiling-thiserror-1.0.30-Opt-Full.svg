<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,496,603 samples, 18.01%)</title><rect x="0.4657%" y="229" width="18.0078%" height="15" fill="rgb(227,0,7)"/><text x="0.7157%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (116,662 samples, 0.13%)</title><rect x="18.3462%" y="213" width="0.1273%" height="15" fill="rgb(217,0,24)"/><text x="18.5962%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (107,242 samples, 0.12%)</title><rect x="18.3564%" y="197" width="0.1171%" height="15" fill="rgb(221,193,54)"/><text x="18.6064%" y="207.50"></text></g><g><title>specialization_graph_of (134,752 samples, 0.15%)</title><rect x="20.3886%" y="101" width="0.1471%" height="15" fill="rgb(248,212,6)"/><text x="20.6386%" y="111.50"></text></g><g><title>resolve_instance (169,662 samples, 0.19%)</title><rect x="20.3559%" y="117" width="0.1852%" height="15" fill="rgb(208,68,35)"/><text x="20.6059%" y="127.50"></text></g><g><title>mir_const (631,339 samples, 0.69%)</title><rect x="19.9110%" y="165" width="0.6892%" height="15" fill="rgb(232,128,0)"/><text x="20.1610%" y="175.50"></text></g><g><title>unsafety_check_result (477,247 samples, 0.52%)</title><rect x="20.0792%" y="149" width="0.5210%" height="15" fill="rgb(207,160,47)"/><text x="20.3292%" y="159.50"></text></g><g><title>mir_built (390,925 samples, 0.43%)</title><rect x="20.1735%" y="133" width="0.4267%" height="15" fill="rgb(228,23,34)"/><text x="20.4235%" y="143.50"></text></g><g><title>mir_promoted (760,840 samples, 0.83%)</title><rect x="19.7795%" y="181" width="0.8305%" height="15" fill="rgb(218,30,26)"/><text x="20.0295%" y="191.50"></text></g><g><title>MIR_borrow_checking (2,125,554 samples, 2.32%)</title><rect x="18.5852%" y="213" width="2.3203%" height="15" fill="rgb(220,122,19)"/><text x="18.8352%" y="223.50">M..</text></g><g><title>mir_borrowck (2,110,984 samples, 2.30%)</title><rect x="18.6011%" y="197" width="2.3044%" height="15" fill="rgb(250,228,42)"/><text x="18.8511%" y="207.50">m..</text></g><g><title>type_op_prove_predicate (234,823 samples, 0.26%)</title><rect x="20.6491%" y="181" width="0.2563%" height="15" fill="rgb(240,193,28)"/><text x="20.8991%" y="191.50"></text></g><g><title>codegen_fn_attrs (148,232 samples, 0.16%)</title><rect x="21.0933%" y="181" width="0.1618%" height="15" fill="rgb(216,20,37)"/><text x="21.3433%" y="191.50"></text></g><g><title>check_mod_attrs (210,112 samples, 0.23%)</title><rect x="21.0259%" y="197" width="0.2294%" height="15" fill="rgb(206,188,39)"/><text x="21.2759%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (132,391 samples, 0.14%)</title><rect x="21.3048%" y="197" width="0.1445%" height="15" fill="rgb(217,207,13)"/><text x="21.5548%" y="207.50"></text></g><g><title>misc_checking_1 (439,545 samples, 0.48%)</title><rect x="20.9984%" y="213" width="0.4798%" height="15" fill="rgb(231,73,38)"/><text x="21.2484%" y="223.50"></text></g><g><title>misc_checking_2 (125,871 samples, 0.14%)</title><rect x="21.4782%" y="213" width="0.1374%" height="15" fill="rgb(225,20,46)"/><text x="21.7282%" y="223.50"></text></g><g><title>death_checking (132,572 samples, 0.14%)</title><rect x="21.6702%" y="197" width="0.1447%" height="15" fill="rgb(210,31,41)"/><text x="21.9202%" y="207.50"></text></g><g><title>crate_lints (187,502 samples, 0.20%)</title><rect x="21.8163%" y="181" width="0.2047%" height="15" fill="rgb(221,200,47)"/><text x="22.0663%" y="191.50"></text></g><g><title>param_env (98,041 samples, 0.11%)</title><rect x="21.9140%" y="165" width="0.1070%" height="15" fill="rgb(226,26,5)"/><text x="22.1640%" y="175.50"></text></g><g><title>lint_checking (225,452 samples, 0.25%)</title><rect x="21.8149%" y="197" width="0.2461%" height="15" fill="rgb(249,33,26)"/><text x="22.0649%" y="207.50"></text></g><g><title>privacy_checking_modules (141,142 samples, 0.15%)</title><rect x="22.1257%" y="197" width="0.1541%" height="15" fill="rgb(235,183,28)"/><text x="22.3757%" y="207.50"></text></g><g><title>check_mod_privacy (138,602 samples, 0.15%)</title><rect x="22.1285%" y="181" width="0.1513%" height="15" fill="rgb(221,5,38)"/><text x="22.3785%" y="191.50"></text></g><g><title>misc_checking_3 (620,017 samples, 0.68%)</title><rect x="21.6157%" y="213" width="0.6768%" height="15" fill="rgb(247,18,42)"/><text x="21.8657%" y="223.50"></text></g><g><title>evaluate_obligation (234,922 samples, 0.26%)</title><rect x="22.5111%" y="149" width="0.2564%" height="15" fill="rgb(241,131,45)"/><text x="22.7611%" y="159.50"></text></g><g><title>object_safety_violations (641,917 samples, 0.70%)</title><rect x="22.3484%" y="165" width="0.7007%" height="15" fill="rgb(249,31,29)"/><text x="22.5984%" y="175.50"></text></g><g><title>coherent_trait (930,681 samples, 1.02%)</title><rect x="22.3327%" y="181" width="1.0159%" height="15" fill="rgb(225,111,53)"/><text x="22.5827%" y="191.50"></text></g><g><title>specialization_graph_of (274,384 samples, 0.30%)</title><rect x="23.0492%" y="165" width="0.2995%" height="15" fill="rgb(238,160,17)"/><text x="23.2992%" y="175.50"></text></g><g><title>coherence_checking (963,801 samples, 1.05%)</title><rect x="22.3204%" y="197" width="1.0521%" height="15" fill="rgb(214,148,48)"/><text x="22.5704%" y="207.50"></text></g><g><title>impl_trait_ref (329,822 samples, 0.36%)</title><rect x="24.8449%" y="53" width="0.3600%" height="15" fill="rgb(232,36,49)"/><text x="25.0949%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (309,982 samples, 0.34%)</title><rect x="24.8666%" y="37" width="0.3384%" height="15" fill="rgb(209,103,24)"/><text x="25.1166%" y="47.50"></text></g><g><title>adt_destructor (552,016 samples, 0.60%)</title><rect x="24.6347%" y="117" width="0.6026%" height="15" fill="rgb(229,88,8)"/><text x="24.8847%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (551,436 samples, 0.60%)</title><rect x="24.6354%" y="101" width="0.6020%" height="15" fill="rgb(213,181,19)"/><text x="24.8854%" y="111.50"></text></g><g><title>coherent_trait (548,436 samples, 0.60%)</title><rect x="24.6386%" y="85" width="0.5987%" height="15" fill="rgb(254,191,54)"/><text x="24.8886%" y="95.50"></text></g><g><title>specialization_graph_of (546,776 samples, 0.60%)</title><rect x="24.6405%" y="69" width="0.5969%" height="15" fill="rgb(241,83,37)"/><text x="24.8905%" y="79.50"></text></g><g><title>dropck_outlives (577,486 samples, 0.63%)</title><rect x="24.6081%" y="149" width="0.6304%" height="15" fill="rgb(233,36,39)"/><text x="24.8581%" y="159.50"></text></g><g><title>adt_dtorck_constraint (558,436 samples, 0.61%)</title><rect x="24.6289%" y="133" width="0.6096%" height="15" fill="rgb(226,3,54)"/><text x="24.8789%" y="143.50"></text></g><g><title>method_autoderef_steps (96,991 samples, 0.11%)</title><rect x="25.2865%" y="149" width="0.1059%" height="15" fill="rgb(245,192,40)"/><text x="25.5365%" y="159.50"></text></g><g><title>item_bodies_checking (1,879,221 samples, 2.05%)</title><rect x="23.3915%" y="197" width="2.0514%" height="15" fill="rgb(238,167,29)"/><text x="23.6415%" y="207.50">i..</text></g><g><title>typeck_item_bodies (1,877,871 samples, 2.05%)</title><rect x="23.3930%" y="181" width="2.0499%" height="15" fill="rgb(232,182,51)"/><text x="23.6430%" y="191.50">t..</text></g><g><title>typeck (1,866,591 samples, 2.04%)</title><rect x="23.4053%" y="165" width="2.0376%" height="15" fill="rgb(231,60,39)"/><text x="23.6553%" y="175.50">t..</text></g><g><title>item_types_checking (207,692 samples, 0.23%)</title><rect x="25.4429%" y="197" width="0.2267%" height="15" fill="rgb(208,69,12)"/><text x="25.6929%" y="207.50"></text></g><g><title>check_mod_item_types (204,512 samples, 0.22%)</title><rect x="25.4463%" y="181" width="0.2232%" height="15" fill="rgb(235,93,37)"/><text x="25.6963%" y="191.50"></text></g><g><title>is_late_bound_map (121,953 samples, 0.13%)</title><rect x="25.9140%" y="149" width="0.1331%" height="15" fill="rgb(213,116,39)"/><text x="26.1640%" y="159.50"></text></g><g><title>generics_of (217,953 samples, 0.24%)</title><rect x="25.8560%" y="165" width="0.2379%" height="15" fill="rgb(222,207,29)"/><text x="26.1060%" y="175.50"></text></g><g><title>explicit_predicates_of (93,180 samples, 0.10%)</title><rect x="26.1542%" y="133" width="0.1017%" height="15" fill="rgb(206,96,30)"/><text x="26.4042%" y="143.50"></text></g><g><title>predicates_of (130,580 samples, 0.14%)</title><rect x="26.1164%" y="165" width="0.1425%" height="15" fill="rgb(218,138,4)"/><text x="26.3664%" y="175.50"></text></g><g><title>predicates_defined_on (114,500 samples, 0.12%)</title><rect x="26.1340%" y="149" width="0.1250%" height="15" fill="rgb(250,191,14)"/><text x="26.3840%" y="159.50"></text></g><g><title>type_collecting (872,510 samples, 0.95%)</title><rect x="25.6712%" y="197" width="0.9524%" height="15" fill="rgb(239,60,40)"/><text x="25.9212%" y="207.50"></text></g><g><title>collect_mod_item_types (859,719 samples, 0.94%)</title><rect x="25.6852%" y="181" width="0.9385%" height="15" fill="rgb(206,27,48)"/><text x="25.9352%" y="191.50"></text></g><g><title>type_of (297,503 samples, 0.32%)</title><rect x="26.2989%" y="165" width="0.3248%" height="15" fill="rgb(225,35,8)"/><text x="26.5489%" y="175.50"></text></g><g><title>evaluate_obligation (144,703 samples, 0.16%)</title><rect x="27.0226%" y="165" width="0.1580%" height="15" fill="rgb(250,213,24)"/><text x="27.2726%" y="175.50"></text></g><g><title>check_impl_item_well_formed (599,588 samples, 0.65%)</title><rect x="26.6739%" y="181" width="0.6545%" height="15" fill="rgb(247,123,22)"/><text x="26.9239%" y="191.50"></text></g><g><title>check_item_well_formed (931,689 samples, 1.02%)</title><rect x="27.3284%" y="181" width="1.0170%" height="15" fill="rgb(231,138,38)"/><text x="27.5784%" y="191.50"></text></g><g><title>trait_impls_of (247,633 samples, 0.27%)</title><rect x="28.0751%" y="165" width="0.2703%" height="15" fill="rgb(231,145,46)"/><text x="28.3251%" y="175.50"></text></g><g><title>analysis (9,386,174 samples, 10.25%)</title><rect x="18.4735%" y="229" width="10.2460%" height="15" fill="rgb(251,118,11)"/><text x="18.7235%" y="239.50">analysis</text></g><g><title>type_check_crate (5,887,706 samples, 6.43%)</title><rect x="22.2925%" y="213" width="6.4271%" height="15" fill="rgb(217,147,25)"/><text x="22.5425%" y="223.50">type_che..</text></g><g><title>wf_checking (1,919,151 samples, 2.09%)</title><rect x="26.6246%" y="197" width="2.0950%" height="15" fill="rgb(247,81,37)"/><text x="26.8746%" y="207.50">w..</text></g><g><title>check_trait_item_well_formed (342,724 samples, 0.37%)</title><rect x="28.3454%" y="181" width="0.3741%" height="15" fill="rgb(209,12,38)"/><text x="28.5954%" y="191.50"></text></g><g><title>item_attrs (103,361 samples, 0.11%)</title><rect x="31.6213%" y="165" width="0.1128%" height="15" fill="rgb(227,1,9)"/><text x="31.8713%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,281 samples, 0.11%)</title><rect x="31.6225%" y="149" width="0.1117%" height="15" fill="rgb(248,47,43)"/><text x="31.8725%" y="159.50"></text></g><g><title>codegen_fn_attrs (113,851 samples, 0.12%)</title><rect x="31.6108%" y="181" width="0.1243%" height="15" fill="rgb(221,10,30)"/><text x="31.8608%" y="191.50"></text></g><g><title>is_freeze_raw (255,543 samples, 0.28%)</title><rect x="31.7440%" y="181" width="0.2790%" height="15" fill="rgb(210,229,1)"/><text x="31.9940%" y="191.50"></text></g><g><title>evaluate_obligation (235,583 samples, 0.26%)</title><rect x="31.7658%" y="165" width="0.2572%" height="15" fill="rgb(222,148,37)"/><text x="32.0158%" y="175.50"></text></g><g><title>layout_of (181,991 samples, 0.20%)</title><rect x="32.1985%" y="165" width="0.1987%" height="15" fill="rgb(234,67,33)"/><text x="32.4485%" y="175.50"></text></g><g><title>layout_of (388,034 samples, 0.42%)</title><rect x="32.0229%" y="181" width="0.4236%" height="15" fill="rgb(247,98,35)"/><text x="32.2729%" y="191.50"></text></g><g><title>predicates_of (145,760 samples, 0.16%)</title><rect x="32.6157%" y="165" width="0.1591%" height="15" fill="rgb(247,138,52)"/><text x="32.8657%" y="175.50"></text></g><g><title>predicates_defined_on (106,390 samples, 0.12%)</title><rect x="32.6587%" y="149" width="0.1161%" height="15" fill="rgb(213,79,30)"/><text x="32.9087%" y="159.50"></text></g><g><title>param_env (302,671 samples, 0.33%)</title><rect x="32.4465%" y="181" width="0.3304%" height="15" fill="rgb(246,177,23)"/><text x="32.6965%" y="191.50"></text></g><g><title>fn_abi_of_instance (1,304,093 samples, 1.42%)</title><rect x="31.4143%" y="197" width="1.4236%" height="15" fill="rgb(230,62,27)"/><text x="31.6643%" y="207.50"></text></g><g><title>codegen_module (3,085,735 samples, 3.37%)</title><rect x="29.6400%" y="213" width="3.3684%" height="15" fill="rgb(216,154,8)"/><text x="29.8900%" y="223.50">cod..</text></g><g><title>layout_of (123,751 samples, 0.14%)</title><rect x="32.8734%" y="197" width="0.1351%" height="15" fill="rgb(244,35,45)"/><text x="33.1234%" y="207.50"></text></g><g><title>item_attrs (121,421 samples, 0.13%)</title><rect x="33.2345%" y="149" width="0.1325%" height="15" fill="rgb(251,115,12)"/><text x="33.4845%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (116,611 samples, 0.13%)</title><rect x="33.2398%" y="133" width="0.1273%" height="15" fill="rgb(240,54,50)"/><text x="33.4898%" y="143.50"></text></g><g><title>codegen_fn_attrs (201,751 samples, 0.22%)</title><rect x="33.1974%" y="165" width="0.2202%" height="15" fill="rgb(233,84,52)"/><text x="33.4474%" y="175.50"></text></g><g><title>is_reachable_non_generic (162,192 samples, 0.18%)</title><rect x="33.4645%" y="165" width="0.1771%" height="15" fill="rgb(207,117,47)"/><text x="33.7145%" y="175.50"></text></g><g><title>reachable_non_generics (156,562 samples, 0.17%)</title><rect x="33.4706%" y="149" width="0.1709%" height="15" fill="rgb(249,43,39)"/><text x="33.7206%" y="159.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (154,812 samples, 0.17%)</title><rect x="33.4725%" y="133" width="0.1690%" height="15" fill="rgb(209,38,44)"/><text x="33.7225%" y="143.50"></text></g><g><title>adt_sized_constraint (107,302 samples, 0.12%)</title><rect x="33.7784%" y="117" width="0.1171%" height="15" fill="rgb(236,212,23)"/><text x="34.0284%" y="127.50"></text></g><g><title>adt_sized_constraint (125,652 samples, 0.14%)</title><rect x="33.7591%" y="133" width="0.1372%" height="15" fill="rgb(242,79,21)"/><text x="34.0091%" y="143.50"></text></g><g><title>layout_of (240,053 samples, 0.26%)</title><rect x="33.7423%" y="149" width="0.2620%" height="15" fill="rgb(211,96,35)"/><text x="33.9923%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (127,652 samples, 0.14%)</title><rect x="34.0044%" y="149" width="0.1393%" height="15" fill="rgb(253,215,40)"/><text x="34.2544%" y="159.50"></text></g><g><title>optimized_mir (527,526 samples, 0.58%)</title><rect x="33.6415%" y="165" width="0.5759%" height="15" fill="rgb(211,81,21)"/><text x="33.8915%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (238,643 samples, 0.26%)</title><rect x="34.2945%" y="149" width="0.2605%" height="15" fill="rgb(208,190,38)"/><text x="34.5445%" y="159.50"></text></g><g><title>specialization_graph_of (232,572 samples, 0.25%)</title><rect x="34.6209%" y="149" width="0.2539%" height="15" fill="rgb(235,213,38)"/><text x="34.8709%" y="159.50"></text></g><g><title>impl_trait_ref (126,682 samples, 0.14%)</title><rect x="34.7365%" y="133" width="0.1383%" height="15" fill="rgb(237,122,38)"/><text x="34.9865%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (109,872 samples, 0.12%)</title><rect x="34.7548%" y="117" width="0.1199%" height="15" fill="rgb(244,218,35)"/><text x="35.0048%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,732,499 samples, 1.89%)</title><rect x="33.0563%" y="181" width="1.8912%" height="15" fill="rgb(240,68,47)"/><text x="33.3063%" y="191.50">m..</text></g><g><title>resolve_instance (668,818 samples, 0.73%)</title><rect x="34.2174%" y="165" width="0.7301%" height="15" fill="rgb(210,16,53)"/><text x="34.4674%" y="175.50"></text></g><g><title>monomorphization_collector (1,760,029 samples, 1.92%)</title><rect x="33.0534%" y="197" width="1.9213%" height="15" fill="rgb(235,124,12)"/><text x="33.3034%" y="207.50">m..</text></g><g><title>assert_symbols_are_distinct (182,922 samples, 0.20%)</title><rect x="34.9781%" y="181" width="0.1997%" height="15" fill="rgb(224,169,11)"/><text x="35.2281%" y="191.50"></text></g><g><title>symbol_name (168,872 samples, 0.18%)</title><rect x="34.9935%" y="165" width="0.1843%" height="15" fill="rgb(250,166,2)"/><text x="35.2435%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (2,059,913 samples, 2.25%)</title><rect x="33.0096%" y="213" width="2.2486%" height="15" fill="rgb(242,216,29)"/><text x="33.2596%" y="223.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (259,773 samples, 0.28%)</title><rect x="34.9747%" y="197" width="0.2836%" height="15" fill="rgb(230,116,27)"/><text x="35.2247%" y="207.50"></text></g><g><title>codegen_crate (6,047,378 samples, 6.60%)</title><rect x="28.7260%" y="229" width="6.6014%" height="15" fill="rgb(228,99,48)"/><text x="28.9760%" y="239.50">codegen_c..</text></g><g><title>codegen_module_optimize (18,299,584 samples, 19.98%)</title><rect x="35.3273%" y="229" width="19.9760%" height="15" fill="rgb(253,11,6)"/><text x="35.5773%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (16,782,836 samples, 18.32%)</title><rect x="36.9830%" y="213" width="18.3203%" height="15" fill="rgb(247,143,39)"/><text x="37.2330%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (3,396,127 samples, 3.71%)</title><rect x="56.1976%" y="213" width="3.7072%" height="15" fill="rgb(236,97,10)"/><text x="56.4476%" y="223.50">LLVM..</text></g><g><title>LLVM_module_codegen (8,428,355 samples, 9.20%)</title><rect x="59.9049%" y="213" width="9.2005%" height="15" fill="rgb(233,208,19)"/><text x="60.1549%" y="223.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (8,233,690 samples, 8.99%)</title><rect x="60.1174%" y="197" width="8.9880%" height="15" fill="rgb(216,164,2)"/><text x="60.3674%" y="207.50">LLVM_module_c..</text></g><g><title>LLVM_thin_lto_import (397,254 samples, 0.43%)</title><rect x="69.1053%" y="213" width="0.4336%" height="15" fill="rgb(220,129,5)"/><text x="69.3553%" y="223.50"></text></g><g><title>codegen_module_perform_lto (13,088,586 samples, 14.29%)</title><rect x="55.3033%" y="229" width="14.2876%" height="15" fill="rgb(242,17,10)"/><text x="55.5533%" y="239.50">codegen_module_perform..</text></g><g><title>metadata_register_crate (3,917,614 samples, 4.28%)</title><rect x="75.4325%" y="181" width="4.2765%" height="15" fill="rgb(242,107,0)"/><text x="75.6825%" y="191.50">metad..</text></g><g><title>metadata_register_crate (542,115 samples, 0.59%)</title><rect x="79.1172%" y="165" width="0.5918%" height="15" fill="rgb(251,28,31)"/><text x="79.3672%" y="175.50"></text></g><g><title>macro_expand_crate (8,998,610 samples, 9.82%)</title><rect x="69.9102%" y="213" width="9.8230%" height="15" fill="rgb(233,223,10)"/><text x="70.1602%" y="223.50">macro_expand_c..</text></g><g><title>expand_crate (8,982,950 samples, 9.81%)</title><rect x="69.9273%" y="197" width="9.8059%" height="15" fill="rgb(215,21,27)"/><text x="70.1773%" y="207.50">expand_crate</text></g><g><title>finalize_imports (124,522 samples, 0.14%)</title><rect x="79.8110%" y="197" width="0.1359%" height="15" fill="rgb(232,23,21)"/><text x="80.0610%" y="207.50"></text></g><g><title>late_resolve_crate (218,232 samples, 0.24%)</title><rect x="79.9530%" y="197" width="0.2382%" height="15" fill="rgb(244,5,23)"/><text x="80.2030%" y="207.50"></text></g><g><title>configure_and_expand (9,746,419 samples, 10.64%)</title><rect x="69.5909%" y="229" width="10.6393%" height="15" fill="rgb(226,81,46)"/><text x="69.8409%" y="239.50">configure_and_ex..</text></g><g><title>resolve_crate (387,995 samples, 0.42%)</title><rect x="79.8066%" y="213" width="0.4235%" height="15" fill="rgb(247,70,30)"/><text x="80.0566%" y="223.50"></text></g><g><title>free_global_ctxt (2,073,003 samples, 2.26%)</title><rect x="80.3819%" y="229" width="2.2629%" height="15" fill="rgb(212,68,19)"/><text x="80.6319%" y="239.50">f..</text></g><g><title>exported_symbols (106,171 samples, 0.12%)</title><rect x="83.1486%" y="213" width="0.1159%" height="15" fill="rgb(240,187,13)"/><text x="83.3986%" y="223.50"></text></g><g><title>optimized_mir (497,845 samples, 0.54%)</title><rect x="83.3197%" y="213" width="0.5435%" height="15" fill="rgb(223,113,26)"/><text x="83.5697%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (195,943 samples, 0.21%)</title><rect x="83.6492%" y="197" width="0.2139%" height="15" fill="rgb(206,192,2)"/><text x="83.8992%" y="207.50"></text></g><g><title>generate_crate_metadata (1,154,163 samples, 1.26%)</title><rect x="82.6448%" y="229" width="1.2599%" height="15" fill="rgb(241,108,4)"/><text x="82.8948%" y="239.50"></text></g><g><title>hir_lowering (452,785 samples, 0.49%)</title><rect x="83.9047%" y="229" width="0.4943%" height="15" fill="rgb(247,173,49)"/><text x="84.1547%" y="239.50"></text></g><g><title>finish_ongoing_codegen (12,225,276 samples, 13.35%)</title><rect x="84.4133%" y="213" width="13.3452%" height="15" fill="rgb(224,114,35)"/><text x="84.6633%" y="223.50">finish_ongoing_codeg..</text></g><g><title>link_crate (685,918 samples, 0.75%)</title><rect x="97.7585%" y="213" width="0.7488%" height="15" fill="rgb(245,159,27)"/><text x="98.0085%" y="223.50"></text></g><g><title>link_binary (675,578 samples, 0.74%)</title><rect x="97.7698%" y="197" width="0.7375%" height="15" fill="rgb(245,172,44)"/><text x="98.0198%" y="207.50"></text></g><g><title>link_rlib (395,115 samples, 0.43%)</title><rect x="98.0760%" y="181" width="0.4313%" height="15" fill="rgb(236,23,11)"/><text x="98.3260%" y="191.50"></text></g><g><title>link (12,932,624 samples, 14.12%)</title><rect x="84.3990%" y="229" width="14.1173%" height="15" fill="rgb(205,117,38)"/><text x="84.6490%" y="239.50">link</text></g><g><title>parse_crate (323,273 samples, 0.35%)</title><rect x="98.5163%" y="229" width="0.3529%" height="15" fill="rgb(237,72,25)"/><text x="98.7663%" y="239.50"></text></g><g><title>prepare_outputs (181,282 samples, 0.20%)</title><rect x="98.8761%" y="229" width="0.1979%" height="15" fill="rgb(244,70,9)"/><text x="99.1261%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (442,215 samples, 0.48%)</title><rect x="99.0740%" y="229" width="0.4827%" height="15" fill="rgb(217,125,39)"/><text x="99.3240%" y="239.50"></text></g><g><title>all (91,608,019 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (91,608,019 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (314,913 samples, 0.34%)</title><rect x="99.6562%" y="229" width="0.3438%" height="15" fill="rgb(221,13,13)"/><text x="99.9062%" y="239.50"></text></g></svg></svg>