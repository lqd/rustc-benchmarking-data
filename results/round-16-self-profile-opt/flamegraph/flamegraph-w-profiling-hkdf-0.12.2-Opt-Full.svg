<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,898,332 samples, 11.97%)</title><rect x="0.6579%" y="181" width="11.9697%" height="15" fill="rgb(227,0,7)"/><text x="0.9079%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (180,152 samples, 0.13%)</title><rect x="12.4999%" y="165" width="0.1276%" height="15" fill="rgb(217,0,24)"/><text x="12.7499%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (164,762 samples, 0.12%)</title><rect x="12.5108%" y="149" width="0.1167%" height="15" fill="rgb(221,193,54)"/><text x="12.7608%" y="159.50"></text></g><g><title>param_env (164,243 samples, 0.12%)</title><rect x="16.9358%" y="101" width="0.1163%" height="15" fill="rgb(248,212,6)"/><text x="17.1858%" y="111.50"></text></g><g><title>codegen_fn_attrs (142,402 samples, 0.10%)</title><rect x="17.2022%" y="85" width="0.1009%" height="15" fill="rgb(208,68,35)"/><text x="17.4522%" y="95.50"></text></g><g><title>adt_drop_tys (202,512 samples, 0.14%)</title><rect x="18.2075%" y="37" width="0.1434%" height="15" fill="rgb(232,128,0)"/><text x="18.4575%" y="47.50"></text></g><g><title>param_env (176,582 samples, 0.13%)</title><rect x="18.4153%" y="37" width="0.1251%" height="15" fill="rgb(207,160,47)"/><text x="18.6653%" y="47.50"></text></g><g><title>adt_drop_tys (560,647 samples, 0.40%)</title><rect x="18.1849%" y="53" width="0.3971%" height="15" fill="rgb(228,23,34)"/><text x="18.4349%" y="63.50"></text></g><g><title>is_copy_raw (787,731 samples, 0.56%)</title><rect x="18.5821%" y="53" width="0.5580%" height="15" fill="rgb(218,30,26)"/><text x="18.8321%" y="63.50"></text></g><g><title>evaluate_obligation (621,729 samples, 0.44%)</title><rect x="18.6996%" y="37" width="0.4404%" height="15" fill="rgb(220,122,19)"/><text x="18.9496%" y="47.50"></text></g><g><title>needs_drop_raw (1,446,200 samples, 1.02%)</title><rect x="18.1244%" y="69" width="1.0244%" height="15" fill="rgb(250,228,42)"/><text x="18.3744%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (485,106 samples, 0.34%)</title><rect x="19.2653%" y="53" width="0.3436%" height="15" fill="rgb(240,193,28)"/><text x="19.5153%" y="63.50"></text></g><g><title>specialization_graph_of (356,345 samples, 0.25%)</title><rect x="19.6725%" y="53" width="0.2524%" height="15" fill="rgb(216,20,37)"/><text x="19.9225%" y="63.50"></text></g><g><title>resolve_instance (1,135,483 samples, 0.80%)</title><rect x="19.1488%" y="69" width="0.8043%" height="15" fill="rgb(206,188,39)"/><text x="19.3988%" y="79.50"></text></g><g><title>thir_body (413,357 samples, 0.29%)</title><rect x="19.9623%" y="69" width="0.2928%" height="15" fill="rgb(217,207,13)"/><text x="20.2123%" y="79.50"></text></g><g><title>mir_const (5,133,399 samples, 3.64%)</title><rect x="16.6397%" y="117" width="3.6362%" height="15" fill="rgb(231,73,38)"/><text x="16.8897%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (4,551,163 samples, 3.22%)</title><rect x="17.0521%" y="101" width="3.2237%" height="15" fill="rgb(225,20,46)"/><text x="17.3021%" y="111.50">uns..</text></g><g><title>mir_built (4,196,891 samples, 2.97%)</title><rect x="17.3031%" y="85" width="2.9728%" height="15" fill="rgb(210,31,41)"/><text x="17.5531%" y="95.50">mir..</text></g><g><title>mir_promoted (5,512,936 samples, 3.91%)</title><rect x="16.3865%" y="133" width="3.9050%" height="15" fill="rgb(221,200,47)"/><text x="16.6365%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (503,685 samples, 0.36%)</title><rect x="20.2915%" y="133" width="0.3568%" height="15" fill="rgb(226,26,5)"/><text x="20.5415%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (492,667 samples, 0.35%)</title><rect x="20.6482%" y="133" width="0.3490%" height="15" fill="rgb(249,33,26)"/><text x="20.8982%" y="143.50"></text></g><g><title>normalize_projection_ty (341,712 samples, 0.24%)</title><rect x="20.7552%" y="117" width="0.2420%" height="15" fill="rgb(235,183,28)"/><text x="21.0052%" y="127.50"></text></g><g><title>type_op_normalize_ty (172,681 samples, 0.12%)</title><rect x="21.0334%" y="133" width="0.1223%" height="15" fill="rgb(221,5,38)"/><text x="21.2834%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,936,302 samples, 1.37%)</title><rect x="21.1557%" y="133" width="1.3715%" height="15" fill="rgb(247,18,42)"/><text x="21.4057%" y="143.50"></text></g><g><title>MIR_borrow_checking (13,618,825 samples, 9.65%)</title><rect x="12.8815%" y="165" width="9.6467%" height="15" fill="rgb(241,131,45)"/><text x="13.1315%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (13,570,685 samples, 9.61%)</title><rect x="12.9156%" y="149" width="9.6126%" height="15" fill="rgb(249,31,29)"/><text x="13.1656%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (275,753 samples, 0.20%)</title><rect x="22.5374%" y="165" width="0.1953%" height="15" fill="rgb(225,111,53)"/><text x="22.7874%" y="175.50"></text></g><g><title>codegen_fn_attrs (302,433 samples, 0.21%)</title><rect x="23.1373%" y="101" width="0.2142%" height="15" fill="rgb(238,160,17)"/><text x="23.3873%" y="111.50"></text></g><g><title>codegen_fn_attrs (557,635 samples, 0.39%)</title><rect x="22.9623%" y="133" width="0.3950%" height="15" fill="rgb(214,148,48)"/><text x="23.2123%" y="143.50"></text></g><g><title>should_inherit_track_caller (461,513 samples, 0.33%)</title><rect x="23.0304%" y="117" width="0.3269%" height="15" fill="rgb(232,36,49)"/><text x="23.2804%" y="127.50"></text></g><g><title>check_mod_attrs (850,221 samples, 0.60%)</title><rect x="22.7554%" y="149" width="0.6022%" height="15" fill="rgb(209,103,24)"/><text x="23.0054%" y="159.50"></text></g><g><title>check_mod_const_bodies (147,622 samples, 0.10%)</title><rect x="23.3576%" y="149" width="0.1046%" height="15" fill="rgb(229,88,8)"/><text x="23.6076%" y="159.50"></text></g><g><title>lookup_deprecation_entry (178,802 samples, 0.13%)</title><rect x="23.6868%" y="133" width="0.1267%" height="15" fill="rgb(213,181,19)"/><text x="23.9368%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (461,735 samples, 0.33%)</title><rect x="23.5382%" y="149" width="0.3271%" height="15" fill="rgb(254,191,54)"/><text x="23.7882%" y="159.50"></text></g><g><title>misc_checking_1 (1,694,179 samples, 1.20%)</title><rect x="22.7332%" y="165" width="1.2000%" height="15" fill="rgb(241,83,37)"/><text x="22.9832%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (228,313 samples, 0.16%)</title><rect x="23.9342%" y="149" width="0.1617%" height="15" fill="rgb(233,36,39)"/><text x="24.1842%" y="159.50"></text></g><g><title>check_mod_liveness (174,133 samples, 0.12%)</title><rect x="23.9726%" y="133" width="0.1233%" height="15" fill="rgb(226,3,54)"/><text x="24.2226%" y="143.50"></text></g><g><title>misc_checking_2 (476,525 samples, 0.34%)</title><rect x="23.9332%" y="165" width="0.3375%" height="15" fill="rgb(245,192,40)"/><text x="24.1832%" y="175.50"></text></g><g><title>match_checking (246,812 samples, 0.17%)</title><rect x="24.0959%" y="149" width="0.1748%" height="15" fill="rgb(238,167,29)"/><text x="24.3459%" y="159.50"></text></g><g><title>check_match (233,582 samples, 0.17%)</title><rect x="24.1053%" y="133" width="0.1655%" height="15" fill="rgb(232,182,51)"/><text x="24.3553%" y="143.50"></text></g><g><title>death_checking (271,843 samples, 0.19%)</title><rect x="24.3710%" y="149" width="0.1926%" height="15" fill="rgb(231,60,39)"/><text x="24.6210%" y="159.50"></text></g><g><title>param_env (232,503 samples, 0.16%)</title><rect x="24.8503%" y="117" width="0.1647%" height="15" fill="rgb(208,69,12)"/><text x="25.1003%" y="127.50"></text></g><g><title>crate_lints (973,431 samples, 0.69%)</title><rect x="24.5645%" y="133" width="0.6895%" height="15" fill="rgb(235,93,37)"/><text x="24.8145%" y="143.50"></text></g><g><title>type_of (335,483 samples, 0.24%)</title><rect x="25.0164%" y="117" width="0.2376%" height="15" fill="rgb(213,116,39)"/><text x="25.2664%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (253,552 samples, 0.18%)</title><rect x="25.0744%" y="101" width="0.1796%" height="15" fill="rgb(222,207,29)"/><text x="25.3244%" y="111.50"></text></g><g><title>lint_checking (1,131,963 samples, 0.80%)</title><rect x="24.5636%" y="149" width="0.8018%" height="15" fill="rgb(206,96,30)"/><text x="24.8136%" y="159.50"></text></g><g><title>module_lints (157,182 samples, 0.11%)</title><rect x="25.2540%" y="133" width="0.1113%" height="15" fill="rgb(218,138,4)"/><text x="25.5040%" y="143.50"></text></g><g><title>lint_mod (154,262 samples, 0.11%)</title><rect x="25.2561%" y="117" width="0.1093%" height="15" fill="rgb(250,191,14)"/><text x="25.5061%" y="127.50"></text></g><g><title>privacy_access_levels (195,402 samples, 0.14%)</title><rect x="25.3654%" y="149" width="0.1384%" height="15" fill="rgb(239,60,40)"/><text x="25.6154%" y="159.50"></text></g><g><title>privacy_checking_modules (443,775 samples, 0.31%)</title><rect x="25.5038%" y="149" width="0.3143%" height="15" fill="rgb(206,27,48)"/><text x="25.7538%" y="159.50"></text></g><g><title>check_mod_privacy (441,155 samples, 0.31%)</title><rect x="25.5057%" y="133" width="0.3125%" height="15" fill="rgb(225,35,8)"/><text x="25.7557%" y="143.50"></text></g><g><title>misc_checking_3 (2,202,215 samples, 1.56%)</title><rect x="24.2708%" y="165" width="1.5599%" height="15" fill="rgb(250,213,24)"/><text x="24.5208%" y="175.50"></text></g><g><title>impl_parent (1,117,341 samples, 0.79%)</title><rect x="27.4474%" y="101" width="0.7915%" height="15" fill="rgb(247,123,22)"/><text x="27.6974%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (609,716 samples, 0.43%)</title><rect x="27.8070%" y="85" width="0.4319%" height="15" fill="rgb(231,138,38)"/><text x="28.0570%" y="95.50"></text></g><g><title>impl_trait_ref (2,706,471 samples, 1.92%)</title><rect x="28.2389%" y="101" width="1.9171%" height="15" fill="rgb(231,145,46)"/><text x="28.4889%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,182,857 samples, 1.55%)</title><rect x="28.6098%" y="85" width="1.5462%" height="15" fill="rgb(251,118,11)"/><text x="28.8598%" y="95.50"></text></g><g><title>coherent_trait (6,458,522 samples, 4.57%)</title><rect x="25.8885%" y="133" width="4.5748%" height="15" fill="rgb(217,147,25)"/><text x="26.1385%" y="143.50">coher..</text></g><g><title>specialization_graph_of (6,155,119 samples, 4.36%)</title><rect x="26.1034%" y="117" width="4.3599%" height="15" fill="rgb(247,81,37)"/><text x="26.3534%" y="127.50">speci..</text></g><g><title>trait_impls_of (431,384 samples, 0.31%)</title><rect x="30.1577%" y="101" width="0.3056%" height="15" fill="rgb(209,12,38)"/><text x="30.4077%" y="111.50"></text></g><g><title>coherence_checking (6,566,324 samples, 4.65%)</title><rect x="25.8707%" y="149" width="4.6512%" height="15" fill="rgb(227,1,9)"/><text x="26.1207%" y="159.50">coher..</text></g><g><title>associated_item (287,911 samples, 0.20%)</title><rect x="38.3875%" y="85" width="0.2039%" height="15" fill="rgb(248,47,43)"/><text x="38.6375%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (211,150 samples, 0.15%)</title><rect x="38.4418%" y="69" width="0.1496%" height="15" fill="rgb(221,10,30)"/><text x="38.6918%" y="79.50"></text></g><g><title>associated_items (430,773 samples, 0.31%)</title><rect x="38.3027%" y="101" width="0.3051%" height="15" fill="rgb(210,229,1)"/><text x="38.5527%" y="111.50"></text></g><g><title>adt_dtorck_constraint (157,924 samples, 0.11%)</title><rect x="38.7758%" y="85" width="0.1119%" height="15" fill="rgb(222,148,37)"/><text x="39.0258%" y="95.50"></text></g><g><title>dropck_outlives (550,198 samples, 0.39%)</title><rect x="38.6368%" y="101" width="0.3897%" height="15" fill="rgb(234,67,33)"/><text x="38.8868%" y="111.50"></text></g><g><title>normalize_projection_ty (196,071 samples, 0.14%)</title><rect x="38.8877%" y="85" width="0.1389%" height="15" fill="rgb(247,98,35)"/><text x="39.1377%" y="95.50"></text></g><g><title>evaluate_obligation (1,840,354 samples, 1.30%)</title><rect x="39.0265%" y="101" width="1.3036%" height="15" fill="rgb(247,138,52)"/><text x="39.2765%" y="111.50"></text></g><g><title>trait_impls_of (260,361 samples, 0.18%)</title><rect x="40.1457%" y="85" width="0.1844%" height="15" fill="rgb(213,79,30)"/><text x="40.3957%" y="95.50"></text></g><g><title>method_autoderef_steps (270,401 samples, 0.19%)</title><rect x="40.7345%" y="101" width="0.1915%" height="15" fill="rgb(246,177,23)"/><text x="40.9845%" y="111.50"></text></g><g><title>evaluate_obligation (142,330 samples, 0.10%)</title><rect x="40.8252%" y="85" width="0.1008%" height="15" fill="rgb(230,62,27)"/><text x="41.0752%" y="95.50"></text></g><g><title>explicit_predicates_of (229,561 samples, 0.16%)</title><rect x="41.0954%" y="69" width="0.1626%" height="15" fill="rgb(216,154,8)"/><text x="41.3454%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (202,941 samples, 0.14%)</title><rect x="41.1143%" y="53" width="0.1438%" height="15" fill="rgb(244,35,45)"/><text x="41.3643%" y="63.50"></text></g><g><title>predicates_of (710,468 samples, 0.50%)</title><rect x="40.9508%" y="101" width="0.5032%" height="15" fill="rgb(251,115,12)"/><text x="41.2008%" y="111.50"></text></g><g><title>predicates_defined_on (584,355 samples, 0.41%)</title><rect x="41.0401%" y="85" width="0.4139%" height="15" fill="rgb(240,54,50)"/><text x="41.2901%" y="95.50"></text></g><g><title>inferred_outlives_of (276,733 samples, 0.20%)</title><rect x="41.2580%" y="69" width="0.1960%" height="15" fill="rgb(233,84,52)"/><text x="41.5080%" y="79.50"></text></g><g><title>item_bodies_checking (15,553,307 samples, 11.02%)</title><rect x="30.5552%" y="149" width="11.0169%" height="15" fill="rgb(207,117,47)"/><text x="30.8052%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (15,550,617 samples, 11.02%)</title><rect x="30.5571%" y="133" width="11.0150%" height="15" fill="rgb(249,43,39)"/><text x="30.8071%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (15,509,777 samples, 10.99%)</title><rect x="30.5860%" y="117" width="10.9861%" height="15" fill="rgb(209,38,44)"/><text x="30.8360%" y="127.50">typeck</text></g><g><title>item_types_checking (956,421 samples, 0.68%)</title><rect x="41.5721%" y="149" width="0.6775%" height="15" fill="rgb(236,212,23)"/><text x="41.8221%" y="159.50"></text></g><g><title>check_mod_item_types (952,391 samples, 0.67%)</title><rect x="41.5750%" y="133" width="0.6746%" height="15" fill="rgb(242,79,21)"/><text x="41.8250%" y="143.50"></text></g><g><title>fn_sig (431,354 samples, 0.31%)</title><rect x="42.5161%" y="117" width="0.3055%" height="15" fill="rgb(211,96,35)"/><text x="42.7661%" y="127.50"></text></g><g><title>named_region_map (319,785 samples, 0.23%)</title><rect x="42.9284%" y="101" width="0.2265%" height="15" fill="rgb(253,215,40)"/><text x="43.1784%" y="111.50"></text></g><g><title>resolve_lifetimes (294,425 samples, 0.21%)</title><rect x="42.9463%" y="85" width="0.2086%" height="15" fill="rgb(211,81,21)"/><text x="43.1963%" y="95.50"></text></g><g><title>lint_levels (187,102 samples, 0.13%)</title><rect x="43.0223%" y="69" width="0.1325%" height="15" fill="rgb(208,190,38)"/><text x="43.2723%" y="79.50"></text></g><g><title>generics_of (506,227 samples, 0.36%)</title><rect x="42.8217%" y="117" width="0.3586%" height="15" fill="rgb(235,213,38)"/><text x="43.0717%" y="127.50"></text></g><g><title>late_bound_vars_map (473,008 samples, 0.34%)</title><rect x="43.7469%" y="69" width="0.3350%" height="15" fill="rgb(237,122,38)"/><text x="43.9969%" y="79.50"></text></g><g><title>resolve_lifetimes (450,788 samples, 0.32%)</title><rect x="43.7627%" y="53" width="0.3193%" height="15" fill="rgb(244,218,35)"/><text x="44.0127%" y="63.50"></text></g><g><title>explicit_predicates_of (1,155,174 samples, 0.82%)</title><rect x="43.4469%" y="85" width="0.8182%" height="15" fill="rgb(240,68,47)"/><text x="43.6969%" y="95.50"></text></g><g><title>type_param_predicates (178,443 samples, 0.13%)</title><rect x="44.1387%" y="69" width="0.1264%" height="15" fill="rgb(210,16,53)"/><text x="44.3887%" y="79.50"></text></g><g><title>predicates_of (1,715,371 samples, 1.22%)</title><rect x="43.3147%" y="117" width="1.2151%" height="15" fill="rgb(235,124,12)"/><text x="43.5647%" y="127.50"></text></g><g><title>predicates_defined_on (1,647,270 samples, 1.17%)</title><rect x="43.3630%" y="101" width="1.1668%" height="15" fill="rgb(224,169,11)"/><text x="43.6130%" y="111.50"></text></g><g><title>inferred_outlives_of (373,655 samples, 0.26%)</title><rect x="44.2651%" y="85" width="0.2647%" height="15" fill="rgb(250,166,2)"/><text x="44.5151%" y="95.50"></text></g><g><title>inferred_outlives_crate (339,624 samples, 0.24%)</title><rect x="44.2892%" y="69" width="0.2406%" height="15" fill="rgb(242,216,29)"/><text x="44.5392%" y="79.50"></text></g><g><title>type_of (230,923 samples, 0.16%)</title><rect x="44.3662%" y="53" width="0.1636%" height="15" fill="rgb(230,116,27)"/><text x="44.6162%" y="63.50"></text></g><g><title>type_collecting (3,496,330 samples, 2.48%)</title><rect x="42.2518%" y="149" width="2.4766%" height="15" fill="rgb(228,99,48)"/><text x="42.5018%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (3,481,350 samples, 2.47%)</title><rect x="42.2624%" y="133" width="2.4660%" height="15" fill="rgb(253,11,6)"/><text x="42.5124%" y="143.50">co..</text></g><g><title>type_of (280,362 samples, 0.20%)</title><rect x="44.5298%" y="117" width="0.1986%" height="15" fill="rgb(247,143,39)"/><text x="44.7798%" y="127.50"></text></g><g><title>evaluate_obligation (526,716 samples, 0.37%)</title><rect x="47.5101%" y="117" width="0.3731%" height="15" fill="rgb(236,97,10)"/><text x="47.7601%" y="127.50"></text></g><g><title>implied_outlives_bounds (500,524 samples, 0.35%)</title><rect x="47.8940%" y="117" width="0.3545%" height="15" fill="rgb(233,208,19)"/><text x="48.1440%" y="127.50"></text></g><g><title>param_env (557,687 samples, 0.40%)</title><rect x="48.2547%" y="117" width="0.3950%" height="15" fill="rgb(216,164,2)"/><text x="48.5047%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,599,364 samples, 3.97%)</title><rect x="44.8720%" y="133" width="3.9662%" height="15" fill="rgb(220,129,5)"/><text x="45.1220%" y="143.50">chec..</text></g><g><title>region_scope_tree (215,805 samples, 0.15%)</title><rect x="48.6853%" y="117" width="0.1529%" height="15" fill="rgb(242,17,10)"/><text x="48.9353%" y="127.50"></text></g><g><title>evaluate_obligation (286,164 samples, 0.20%)</title><rect x="50.2302%" y="117" width="0.2027%" height="15" fill="rgb(242,107,0)"/><text x="50.4802%" y="127.50"></text></g><g><title>implied_outlives_bounds (224,171 samples, 0.16%)</title><rect x="50.4679%" y="117" width="0.1588%" height="15" fill="rgb(251,28,31)"/><text x="50.7179%" y="127.50"></text></g><g><title>param_env (607,524 samples, 0.43%)</title><rect x="50.6488%" y="117" width="0.4303%" height="15" fill="rgb(233,223,10)"/><text x="50.8988%" y="127.50"></text></g><g><title>explicit_predicates_of (160,482 samples, 0.11%)</title><rect x="51.1761%" y="85" width="0.1137%" height="15" fill="rgb(215,21,27)"/><text x="51.4261%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (142,951 samples, 0.10%)</title><rect x="51.1885%" y="69" width="0.1013%" height="15" fill="rgb(232,23,21)"/><text x="51.4385%" y="79.50"></text></g><g><title>predicates_of (325,613 samples, 0.23%)</title><rect x="51.0791%" y="117" width="0.2306%" height="15" fill="rgb(244,5,23)"/><text x="51.3291%" y="127.50"></text></g><g><title>predicates_defined_on (231,032 samples, 0.16%)</title><rect x="51.1461%" y="101" width="0.1636%" height="15" fill="rgb(226,81,46)"/><text x="51.3961%" y="111.50"></text></g><g><title>trait_impls_of (231,853 samples, 0.16%)</title><rect x="51.3296%" y="117" width="0.1642%" height="15" fill="rgb(247,70,30)"/><text x="51.5796%" y="127.50"></text></g><g><title>check_item_well_formed (3,809,832 samples, 2.70%)</title><rect x="48.8382%" y="133" width="2.6986%" height="15" fill="rgb(212,68,19)"/><text x="49.0882%" y="143.50">ch..</text></g><g><title>analysis (55,969,446 samples, 39.65%)</title><rect x="12.6275%" y="181" width="39.6451%" height="15" fill="rgb(240,187,13)"/><text x="12.8775%" y="191.50">analysis</text></g><g><title>type_check_crate (37,329,765 samples, 26.44%)</title><rect x="25.8307%" y="165" width="26.4420%" height="15" fill="rgb(223,113,26)"/><text x="26.0807%" y="175.50">type_check_crate</text></g><g><title>wf_checking (10,648,211 samples, 7.54%)</title><rect x="44.7301%" y="149" width="7.5425%" height="15" fill="rgb(206,192,2)"/><text x="44.9801%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,038,783 samples, 0.74%)</title><rect x="51.5368%" y="133" width="0.7358%" height="15" fill="rgb(241,108,4)"/><text x="51.7868%" y="143.50"></text></g><g><title>fn_abi_of_instance (304,243 samples, 0.22%)</title><rect x="53.0565%" y="149" width="0.2155%" height="15" fill="rgb(247,173,49)"/><text x="53.3065%" y="159.50"></text></g><g><title>codegen_module (950,990 samples, 0.67%)</title><rect x="52.6203%" y="165" width="0.6736%" height="15" fill="rgb(224,114,35)"/><text x="52.8703%" y="175.50"></text></g><g><title>optimized_mir (225,983 samples, 0.16%)</title><rect x="53.3818%" y="117" width="0.1601%" height="15" fill="rgb(245,159,27)"/><text x="53.6318%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (328,064 samples, 0.23%)</title><rect x="53.3113%" y="133" width="0.2324%" height="15" fill="rgb(245,172,44)"/><text x="53.5613%" y="143.50"></text></g><g><title>monomorphization_collector (377,135 samples, 0.27%)</title><rect x="53.3097%" y="149" width="0.2671%" height="15" fill="rgb(236,23,11)"/><text x="53.5597%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (440,815 samples, 0.31%)</title><rect x="53.2942%" y="165" width="0.3122%" height="15" fill="rgb(205,117,38)"/><text x="53.5442%" y="175.50"></text></g><g><title>codegen_crate (1,913,202 samples, 1.36%)</title><rect x="52.2807%" y="181" width="1.3552%" height="15" fill="rgb(237,72,25)"/><text x="52.5307%" y="191.50"></text></g><g><title>codegen_module_optimize (5,629,095 samples, 3.99%)</title><rect x="53.6359%" y="181" width="3.9873%" height="15" fill="rgb(244,70,9)"/><text x="53.8859%" y="191.50">code..</text></g><g><title>LLVM_module_optimize (4,693,464 samples, 3.32%)</title><rect x="54.2986%" y="165" width="3.3245%" height="15" fill="rgb(217,125,39)"/><text x="54.5486%" y="175.50">LLV..</text></g><g><title>LLVM_lto_optimize (2,396,177 samples, 1.70%)</title><rect x="58.0106%" y="165" width="1.6973%" height="15" fill="rgb(235,36,10)"/><text x="58.2606%" y="175.50"></text></g><g><title>LLVM_module_codegen (7,745,288 samples, 5.49%)</title><rect x="59.7079%" y="165" width="5.4863%" height="15" fill="rgb(251,123,47)"/><text x="59.9579%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (7,626,516 samples, 5.40%)</title><rect x="59.7921%" y="149" width="5.4021%" height="15" fill="rgb(221,13,13)"/><text x="60.0421%" y="159.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (10,756,292 samples, 7.62%)</title><rect x="57.6231%" y="181" width="7.6191%" height="15" fill="rgb(238,131,9)"/><text x="57.8731%" y="191.50">codegen_mo..</text></g><g><title>AST_validation (203,723 samples, 0.14%)</title><rect x="65.4027%" y="165" width="0.1443%" height="15" fill="rgb(211,50,8)"/><text x="65.6527%" y="175.50"></text></g><g><title>metadata_register_crate (950,431 samples, 0.67%)</title><rect x="76.3524%" y="133" width="0.6732%" height="15" fill="rgb(245,182,24)"/><text x="76.6024%" y="143.50"></text></g><g><title>metadata_register_crate (618,268 samples, 0.44%)</title><rect x="76.5877%" y="117" width="0.4379%" height="15" fill="rgb(242,14,37)"/><text x="76.8377%" y="127.50"></text></g><g><title>metadata_register_crate (183,733 samples, 0.13%)</title><rect x="76.8955%" y="101" width="0.1301%" height="15" fill="rgb(246,228,12)"/><text x="77.1455%" y="111.50"></text></g><g><title>macro_expand_crate (16,112,763 samples, 11.41%)</title><rect x="65.6589%" y="165" width="11.4132%" height="15" fill="rgb(213,55,15)"/><text x="65.9089%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (16,083,323 samples, 11.39%)</title><rect x="65.6798%" y="149" width="11.3924%" height="15" fill="rgb(209,9,3)"/><text x="65.9298%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (191,322 samples, 0.14%)</title><rect x="77.0763%" y="165" width="0.1355%" height="15" fill="rgb(230,59,30)"/><text x="77.3263%" y="175.50"></text></g><g><title>finalize_imports (161,172 samples, 0.11%)</title><rect x="77.2184%" y="149" width="0.1142%" height="15" fill="rgb(209,121,21)"/><text x="77.4684%" y="159.50"></text></g><g><title>late_resolve_crate (1,590,088 samples, 1.13%)</title><rect x="77.4121%" y="149" width="1.1263%" height="15" fill="rgb(220,109,13)"/><text x="77.6621%" y="159.50"></text></g><g><title>configure_and_expand (18,911,676 samples, 13.40%)</title><rect x="65.2422%" y="181" width="13.3958%" height="15" fill="rgb(232,18,1)"/><text x="65.4922%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,013,433 samples, 1.43%)</title><rect x="77.2118%" y="165" width="1.4262%" height="15" fill="rgb(215,41,42)"/><text x="77.4618%" y="175.50"></text></g><g><title>drop_ast (190,703 samples, 0.14%)</title><rect x="78.6380%" y="181" width="0.1351%" height="15" fill="rgb(224,123,36)"/><text x="78.8880%" y="191.50"></text></g><g><title>early_lint_checks (389,194 samples, 0.28%)</title><rect x="78.7842%" y="181" width="0.2757%" height="15" fill="rgb(240,125,3)"/><text x="79.0342%" y="191.50"></text></g><g><title>free_global_ctxt (1,759,500 samples, 1.25%)</title><rect x="79.0599%" y="181" width="1.2463%" height="15" fill="rgb(205,98,50)"/><text x="79.3099%" y="191.50"></text></g><g><title>exported_symbols (143,732 samples, 0.10%)</title><rect x="80.9487%" y="165" width="0.1018%" height="15" fill="rgb(205,185,37)"/><text x="81.1987%" y="175.50"></text></g><g><title>is_sized_raw (159,082 samples, 0.11%)</title><rect x="82.1791%" y="133" width="0.1127%" height="15" fill="rgb(238,207,15)"/><text x="82.4291%" y="143.50"></text></g><g><title>layout_of (486,535 samples, 0.34%)</title><rect x="82.0156%" y="149" width="0.3446%" height="15" fill="rgb(213,199,42)"/><text x="82.2656%" y="159.50"></text></g><g><title>is_copy_raw (464,636 samples, 0.33%)</title><rect x="83.3965%" y="117" width="0.3291%" height="15" fill="rgb(235,201,11)"/><text x="83.6465%" y="127.50"></text></g><g><title>evaluate_obligation (404,804 samples, 0.29%)</title><rect x="83.4389%" y="101" width="0.2867%" height="15" fill="rgb(207,46,11)"/><text x="83.6889%" y="111.50"></text></g><g><title>needs_drop_raw (745,340 samples, 0.53%)</title><rect x="83.3542%" y="133" width="0.5280%" height="15" fill="rgb(241,35,35)"/><text x="83.6042%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (220,942 samples, 0.16%)</title><rect x="83.7256%" y="117" width="0.1565%" height="15" fill="rgb(243,32,47)"/><text x="83.9756%" y="127.50"></text></g><g><title>normalize_projection_ty (186,712 samples, 0.13%)</title><rect x="83.7499%" y="101" width="0.1323%" height="15" fill="rgb(247,202,23)"/><text x="83.9999%" y="111.50"></text></g><g><title>optimized_mir (4,006,545 samples, 2.84%)</title><rect x="81.1071%" y="165" width="2.8380%" height="15" fill="rgb(219,102,11)"/><text x="81.3571%" y="175.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,237,385 samples, 1.58%)</title><rect x="82.3603%" y="149" width="1.5848%" height="15" fill="rgb(243,110,44)"/><text x="82.6103%" y="159.50"></text></g><g><title>generate_crate_metadata (5,167,599 samples, 3.66%)</title><rect x="80.3062%" y="181" width="3.6604%" height="15" fill="rgb(222,74,54)"/><text x="80.5562%" y="191.50">gene..</text></g><g><title>hir_lowering (3,371,518 samples, 2.39%)</title><rect x="83.9666%" y="181" width="2.3882%" height="15" fill="rgb(216,99,12)"/><text x="84.2166%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (14,832,629 samples, 10.51%)</title><rect x="86.3637%" y="165" width="10.5065%" height="15" fill="rgb(226,22,26)"/><text x="86.6137%" y="175.50">finish_ongoing_..</text></g><g><title>link_crate (743,478 samples, 0.53%)</title><rect x="96.8702%" y="165" width="0.5266%" height="15" fill="rgb(217,163,10)"/><text x="97.1202%" y="175.50"></text></g><g><title>link_binary (734,798 samples, 0.52%)</title><rect x="96.8763%" y="149" width="0.5205%" height="15" fill="rgb(213,25,53)"/><text x="97.1263%" y="159.50"></text></g><g><title>link_rlib (463,326 samples, 0.33%)</title><rect x="97.0686%" y="133" width="0.3282%" height="15" fill="rgb(252,105,26)"/><text x="97.3186%" y="143.50"></text></g><g><title>link (15,596,447 samples, 11.05%)</title><rect x="86.3547%" y="181" width="11.0475%" height="15" fill="rgb(220,39,43)"/><text x="86.6047%" y="191.50">link</text></g><g><title>parse_crate (2,286,266 samples, 1.62%)</title><rect x="97.4023%" y="181" width="1.6194%" height="15" fill="rgb(229,68,48)"/><text x="97.6523%" y="191.50"></text></g><g><title>prepare_outputs (350,934 samples, 0.25%)</title><rect x="99.0288%" y="181" width="0.2486%" height="15" fill="rgb(252,8,32)"/><text x="99.2788%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (515,546 samples, 0.37%)</title><rect x="99.2774%" y="181" width="0.3652%" height="15" fill="rgb(223,20,43)"/><text x="99.5274%" y="191.50"></text></g><g><title>setup_global_ctxt (156,832 samples, 0.11%)</title><rect x="99.6432%" y="181" width="0.1111%" height="15" fill="rgb(229,81,49)"/><text x="99.8932%" y="191.50"></text></g><g><title>all (141,176,226 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (141,176,226 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (346,914 samples, 0.25%)</title><rect x="99.7543%" y="181" width="0.2457%" height="15" fill="rgb(249,174,33)"/><text x="100.0043%" y="191.50"></text></g></svg></svg>