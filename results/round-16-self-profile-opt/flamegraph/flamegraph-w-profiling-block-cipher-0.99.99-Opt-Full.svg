<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (19,809,190 samples, 7.44%)</title><rect x="0.1780%" y="245" width="7.4444%" height="15" fill="rgb(227,0,7)"/><text x="0.4280%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (283,223 samples, 0.11%)</title><rect x="7.5160%" y="229" width="0.1064%" height="15" fill="rgb(217,0,24)"/><text x="7.7660%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (268,263 samples, 0.10%)</title><rect x="7.5216%" y="213" width="0.1008%" height="15" fill="rgb(221,193,54)"/><text x="7.7716%" y="223.50"></text></g><g><title>mir_const (363,404 samples, 0.14%)</title><rect x="7.8325%" y="181" width="0.1366%" height="15" fill="rgb(248,212,6)"/><text x="8.0825%" y="191.50"></text></g><g><title>unsafety_check_result (308,003 samples, 0.12%)</title><rect x="7.8534%" y="165" width="0.1157%" height="15" fill="rgb(208,68,35)"/><text x="8.1034%" y="175.50"></text></g><g><title>mir_built (274,303 samples, 0.10%)</title><rect x="7.8660%" y="149" width="0.1031%" height="15" fill="rgb(232,128,0)"/><text x="8.1160%" y="159.50"></text></g><g><title>mir_promoted (442,814 samples, 0.17%)</title><rect x="7.8040%" y="197" width="0.1664%" height="15" fill="rgb(207,160,47)"/><text x="8.0540%" y="207.50"></text></g><g><title>MIR_borrow_checking (975,780 samples, 0.37%)</title><rect x="7.6505%" y="229" width="0.3667%" height="15" fill="rgb(228,23,34)"/><text x="7.9005%" y="239.50"></text></g><g><title>mir_borrowck (973,920 samples, 0.37%)</title><rect x="7.6512%" y="213" width="0.3660%" height="15" fill="rgb(218,30,26)"/><text x="7.9012%" y="223.50"></text></g><g><title>misc_checking_1 (332,224 samples, 0.12%)</title><rect x="8.0445%" y="229" width="0.1249%" height="15" fill="rgb(220,122,19)"/><text x="8.2945%" y="239.50"></text></g><g><title>impl_trait_ref (409,904 samples, 0.15%)</title><rect x="8.7036%" y="53" width="0.1540%" height="15" fill="rgb(250,228,42)"/><text x="8.9536%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (382,124 samples, 0.14%)</title><rect x="8.7141%" y="37" width="0.1436%" height="15" fill="rgb(240,193,28)"/><text x="8.9641%" y="47.50"></text></g><g><title>coherent_trait (699,068 samples, 0.26%)</title><rect x="8.6131%" y="85" width="0.2627%" height="15" fill="rgb(216,20,37)"/><text x="8.8631%" y="95.50"></text></g><g><title>specialization_graph_of (695,918 samples, 0.26%)</title><rect x="8.6143%" y="69" width="0.2615%" height="15" fill="rgb(206,188,39)"/><text x="8.8643%" y="79.50"></text></g><g><title>adt_destructor (705,198 samples, 0.27%)</title><rect x="8.6113%" y="117" width="0.2650%" height="15" fill="rgb(217,207,13)"/><text x="8.8613%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (704,328 samples, 0.26%)</title><rect x="8.6117%" y="101" width="0.2647%" height="15" fill="rgb(231,73,38)"/><text x="8.8617%" y="111.50"></text></g><g><title>adt_dtorck_constraint (741,898 samples, 0.28%)</title><rect x="8.6018%" y="133" width="0.2788%" height="15" fill="rgb(225,20,46)"/><text x="8.8518%" y="143.50"></text></g><g><title>dropck_outlives (807,129 samples, 0.30%)</title><rect x="8.5852%" y="165" width="0.3033%" height="15" fill="rgb(210,31,41)"/><text x="8.8352%" y="175.50"></text></g><g><title>adt_dtorck_constraint (778,838 samples, 0.29%)</title><rect x="8.5958%" y="149" width="0.2927%" height="15" fill="rgb(221,200,47)"/><text x="8.8458%" y="159.50"></text></g><g><title>item_bodies_checking (1,974,751 samples, 0.74%)</title><rect x="8.2704%" y="213" width="0.7421%" height="15" fill="rgb(226,26,5)"/><text x="8.5204%" y="223.50"></text></g><g><title>typeck_item_bodies (1,973,030 samples, 0.74%)</title><rect x="8.2710%" y="197" width="0.7415%" height="15" fill="rgb(249,33,26)"/><text x="8.5210%" y="207.50"></text></g><g><title>typeck (1,970,440 samples, 0.74%)</title><rect x="8.2720%" y="181" width="0.7405%" height="15" fill="rgb(235,183,28)"/><text x="8.5220%" y="191.50"></text></g><g><title>analysis (4,204,964 samples, 1.58%)</title><rect x="7.6224%" y="245" width="1.5802%" height="15" fill="rgb(221,5,38)"/><text x="7.8724%" y="255.50"></text></g><g><title>type_check_crate (2,566,647 samples, 0.96%)</title><rect x="8.2381%" y="229" width="0.9646%" height="15" fill="rgb(247,18,42)"/><text x="8.4881%" y="239.50"></text></g><g><title>wf_checking (363,244 samples, 0.14%)</title><rect x="9.0661%" y="213" width="0.1365%" height="15" fill="rgb(241,131,45)"/><text x="9.3161%" y="223.50"></text></g><g><title>check_item_well_formed (348,784 samples, 0.13%)</title><rect x="9.0716%" y="197" width="0.1311%" height="15" fill="rgb(249,31,29)"/><text x="9.3216%" y="207.50"></text></g><g><title>eval_to_const_value_raw (421,324 samples, 0.16%)</title><rect x="10.7190%" y="181" width="0.1583%" height="15" fill="rgb(225,111,53)"/><text x="10.9690%" y="191.50"></text></g><g><title>eval_to_const_value_raw (378,532 samples, 0.14%)</title><rect x="10.7350%" y="165" width="0.1423%" height="15" fill="rgb(238,160,17)"/><text x="10.9850%" y="175.50"></text></g><g><title>eval_to_allocation_raw (341,322 samples, 0.13%)</title><rect x="10.7490%" y="149" width="0.1283%" height="15" fill="rgb(214,148,48)"/><text x="10.9990%" y="159.50"></text></g><g><title>param_env (306,835 samples, 0.12%)</title><rect x="10.9321%" y="181" width="0.1153%" height="15" fill="rgb(232,36,49)"/><text x="11.1821%" y="191.50"></text></g><g><title>layout_of (1,121,121 samples, 0.42%)</title><rect x="10.6303%" y="197" width="0.4213%" height="15" fill="rgb(209,103,24)"/><text x="10.8803%" y="207.50"></text></g><g><title>param_env (287,704 samples, 0.11%)</title><rect x="11.0517%" y="197" width="0.1081%" height="15" fill="rgb(229,88,8)"/><text x="11.3017%" y="207.50"></text></g><g><title>fn_abi_of_instance (2,045,380 samples, 0.77%)</title><rect x="10.4499%" y="213" width="0.7687%" height="15" fill="rgb(213,181,19)"/><text x="10.6999%" y="223.50"></text></g><g><title>codegen_module (4,616,499 samples, 1.73%)</title><rect x="9.6181%" y="229" width="1.7349%" height="15" fill="rgb(254,191,54)"/><text x="9.8681%" y="239.50"></text></g><g><title>optimized_mir (607,637 samples, 0.23%)</title><rect x="11.5346%" y="181" width="0.2284%" height="15" fill="rgb(241,83,37)"/><text x="11.7846%" y="191.50"></text></g><g><title>own_existential_vtable_entries (324,464 samples, 0.12%)</title><rect x="11.9347%" y="165" width="0.1219%" height="15" fill="rgb(233,36,39)"/><text x="12.1847%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (1,904,470 samples, 0.72%)</title><rect x="11.3640%" y="197" width="0.7157%" height="15" fill="rgb(226,3,54)"/><text x="11.6140%" y="207.50"></text></g><g><title>vtable_entries (440,284 samples, 0.17%)</title><rect x="11.9142%" y="181" width="0.1655%" height="15" fill="rgb(245,192,40)"/><text x="12.1642%" y="191.50"></text></g><g><title>monomorphization_collector (1,959,360 samples, 0.74%)</title><rect x="11.3634%" y="213" width="0.7363%" height="15" fill="rgb(238,167,29)"/><text x="11.6134%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (2,190,904 samples, 0.82%)</title><rect x="11.3540%" y="229" width="0.8234%" height="15" fill="rgb(232,182,51)"/><text x="11.6040%" y="239.50"></text></g><g><title>codegen_crate (8,178,947 samples, 3.07%)</title><rect x="9.2053%" y="245" width="3.0737%" height="15" fill="rgb(231,60,39)"/><text x="9.4553%" y="255.50">cod..</text></g><g><title>LLVM_module_codegen (4,478,448 samples, 1.68%)</title><rect x="12.8067%" y="229" width="1.6830%" height="15" fill="rgb(208,69,12)"/><text x="13.0567%" y="239.50"></text></g><g><title>LLVM_module_codegen_emit_obj (4,288,306 samples, 1.61%)</title><rect x="12.8781%" y="213" width="1.6116%" height="15" fill="rgb(235,93,37)"/><text x="13.1281%" y="223.50"></text></g><g><title>codegen_module_optimize (14,126,990 samples, 5.31%)</title><rect x="12.2790%" y="245" width="5.3090%" height="15" fill="rgb(213,116,39)"/><text x="12.5290%" y="255.50">codege..</text></g><g><title>LLVM_module_optimize (8,244,538 samples, 3.10%)</title><rect x="14.4897%" y="229" width="3.0983%" height="15" fill="rgb(222,207,29)"/><text x="14.7397%" y="239.50">LLV..</text></g><g><title>LLVM_lto_optimize (5,150,965 samples, 1.94%)</title><rect x="18.0534%" y="229" width="1.9358%" height="15" fill="rgb(206,96,30)"/><text x="18.3034%" y="239.50">L..</text></g><g><title>LLVM_module_codegen (15,117,180 samples, 5.68%)</title><rect x="19.9892%" y="229" width="5.6811%" height="15" fill="rgb(218,138,4)"/><text x="20.2392%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (14,809,597 samples, 5.57%)</title><rect x="20.1048%" y="213" width="5.5655%" height="15" fill="rgb(250,191,14)"/><text x="20.3548%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (21,851,671 samples, 8.21%)</title><rect x="17.5880%" y="245" width="8.2120%" height="15" fill="rgb(239,60,40)"/><text x="17.8380%" y="255.50">codegen_mod..</text></g><g><title>macro_expand_crate (10,275,399 samples, 3.86%)</title><rect x="25.9054%" y="229" width="3.8615%" height="15" fill="rgb(206,27,48)"/><text x="26.1554%" y="239.50">macr..</text></g><g><title>expand_crate (10,259,029 samples, 3.86%)</title><rect x="25.9116%" y="213" width="3.8554%" height="15" fill="rgb(225,35,8)"/><text x="26.1616%" y="223.50">expa..</text></g><g><title>metadata_register_crate (2,391,335 samples, 0.90%)</title><rect x="28.8683%" y="197" width="0.8987%" height="15" fill="rgb(250,213,24)"/><text x="29.1183%" y="207.50"></text></g><g><title>metadata_register_crate (877,270 samples, 0.33%)</title><rect x="29.4373%" y="181" width="0.3297%" height="15" fill="rgb(247,123,22)"/><text x="29.6873%" y="191.50"></text></g><g><title>finalize_macro_resolutions (285,693 samples, 0.11%)</title><rect x="29.7903%" y="213" width="0.1074%" height="15" fill="rgb(231,138,38)"/><text x="30.0403%" y="223.50"></text></g><g><title>late_resolve_crate (1,086,601 samples, 0.41%)</title><rect x="29.8977%" y="213" width="0.4084%" height="15" fill="rgb(231,145,46)"/><text x="30.1477%" y="223.50"></text></g><g><title>configure_and_expand (12,011,538 samples, 4.51%)</title><rect x="25.8000%" y="245" width="4.5140%" height="15" fill="rgb(251,118,11)"/><text x="26.0500%" y="255.50">confi..</text></g><g><title>resolve_crate (1,413,466 samples, 0.53%)</title><rect x="29.7828%" y="229" width="0.5312%" height="15" fill="rgb(217,147,25)"/><text x="30.0328%" y="239.50"></text></g><g><title>free_global_ctxt (2,178,404 samples, 0.82%)</title><rect x="30.3787%" y="245" width="0.8187%" height="15" fill="rgb(247,81,37)"/><text x="30.6287%" y="255.50"></text></g><g><title>finish_ongoing_codegen (13,248,380 samples, 4.98%)</title><rect x="31.2687%" y="229" width="4.9788%" height="15" fill="rgb(209,12,38)"/><text x="31.5187%" y="239.50">finish..</text></g><g><title>link_crate (168,609,351 samples, 63.36%)</title><rect x="36.2475%" y="229" width="63.3642%" height="15" fill="rgb(227,1,9)"/><text x="36.4975%" y="239.50">link_crate</text></g><g><title>link_binary (168,581,061 samples, 63.35%)</title><rect x="36.2582%" y="213" width="63.3536%" height="15" fill="rgb(248,47,43)"/><text x="36.5082%" y="223.50">link_binary</text></g><g><title>run_linker (167,553,069 samples, 62.97%)</title><rect x="36.6445%" y="197" width="62.9673%" height="15" fill="rgb(221,10,30)"/><text x="36.8945%" y="207.50">run_linker</text></g><g><title>link (181,881,681 samples, 68.35%)</title><rect x="31.2630%" y="245" width="68.3520%" height="15" fill="rgb(210,229,1)"/><text x="31.5130%" y="255.50">link</text></g><g><title>self_profile_alloc_query_strings (461,305 samples, 0.17%)</title><rect x="99.7958%" y="245" width="0.1734%" height="15" fill="rgb(222,148,37)"/><text x="100.0458%" y="255.50"></text></g><g><title>all (266,095,433 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(234,67,33)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (266,095,433 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,98,35)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>