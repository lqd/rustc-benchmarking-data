<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,272,219 samples, 12.15%)</title><rect x="0.4552%" y="181" width="12.1543%" height="15" fill="rgb(227,0,7)"/><text x="0.7052%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (215,132 samples, 0.16%)</title><rect x="12.4488%" y="165" width="0.1607%" height="15" fill="rgb(217,0,24)"/><text x="12.6988%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (199,342 samples, 0.15%)</title><rect x="12.4606%" y="149" width="0.1489%" height="15" fill="rgb(221,193,54)"/><text x="12.7106%" y="159.50"></text></g><g><title>item_attrs (163,863 samples, 0.12%)</title><rect x="17.1874%" y="69" width="0.1224%" height="15" fill="rgb(248,212,6)"/><text x="17.4374%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (159,243 samples, 0.12%)</title><rect x="17.1908%" y="53" width="0.1189%" height="15" fill="rgb(208,68,35)"/><text x="17.4408%" y="63.50"></text></g><g><title>codegen_fn_attrs (214,934 samples, 0.16%)</title><rect x="17.1556%" y="85" width="0.1605%" height="15" fill="rgb(232,128,0)"/><text x="17.4056%" y="95.50"></text></g><g><title>needs_drop_raw (801,658 samples, 0.60%)</title><rect x="18.1384%" y="69" width="0.5988%" height="15" fill="rgb(207,160,47)"/><text x="18.3884%" y="79.50"></text></g><g><title>is_copy_raw (617,706 samples, 0.46%)</title><rect x="18.2758%" y="53" width="0.4614%" height="15" fill="rgb(228,23,34)"/><text x="18.5258%" y="63.50"></text></g><g><title>evaluate_obligation (493,216 samples, 0.37%)</title><rect x="18.3688%" y="37" width="0.3684%" height="15" fill="rgb(218,30,26)"/><text x="18.6188%" y="47.50"></text></g><g><title>resolve_instance (270,812 samples, 0.20%)</title><rect x="18.7372%" y="69" width="0.2023%" height="15" fill="rgb(220,122,19)"/><text x="18.9872%" y="79.50"></text></g><g><title>thir_body (351,854 samples, 0.26%)</title><rect x="18.9488%" y="69" width="0.2628%" height="15" fill="rgb(250,228,42)"/><text x="19.1988%" y="79.50"></text></g><g><title>mir_const (3,454,909 samples, 2.58%)</title><rect x="16.6379%" y="117" width="2.5806%" height="15" fill="rgb(240,193,28)"/><text x="16.8879%" y="127.50">mi..</text></g><g><title>unsafety_check_result (2,955,743 samples, 2.21%)</title><rect x="17.0107%" y="101" width="2.2077%" height="15" fill="rgb(216,20,37)"/><text x="17.2607%" y="111.50">u..</text></g><g><title>mir_built (2,546,767 samples, 1.90%)</title><rect x="17.3162%" y="85" width="1.9023%" height="15" fill="rgb(206,188,39)"/><text x="17.5662%" y="95.50">m..</text></g><g><title>is_freeze_raw (135,992 samples, 0.10%)</title><rect x="19.2806%" y="101" width="0.1016%" height="15" fill="rgb(217,207,13)"/><text x="19.5306%" y="111.50"></text></g><g><title>mir_promoted (4,141,756 samples, 3.09%)</title><rect x="16.3701%" y="133" width="3.0936%" height="15" fill="rgb(231,73,38)"/><text x="16.6201%" y="143.50">mir..</text></g><g><title>mir_const_qualif (328,404 samples, 0.25%)</title><rect x="19.2185%" y="117" width="0.2453%" height="15" fill="rgb(225,20,46)"/><text x="19.4685%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (267,342 samples, 0.20%)</title><rect x="19.5389%" y="133" width="0.1997%" height="15" fill="rgb(210,31,41)"/><text x="19.7889%" y="143.50"></text></g><g><title>normalize_projection_ty (167,581 samples, 0.13%)</title><rect x="19.6134%" y="117" width="0.1252%" height="15" fill="rgb(221,200,47)"/><text x="19.8634%" y="127.50"></text></g><g><title>type_op_normalize_predicate (154,053 samples, 0.12%)</title><rect x="19.7386%" y="133" width="0.1151%" height="15" fill="rgb(226,26,5)"/><text x="19.9886%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,061,062 samples, 0.79%)</title><rect x="19.8537%" y="133" width="0.7925%" height="15" fill="rgb(249,33,26)"/><text x="20.1037%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,506,146 samples, 7.85%)</title><rect x="12.8025%" y="165" width="7.8474%" height="15" fill="rgb(235,183,28)"/><text x="13.0525%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (10,446,996 samples, 7.80%)</title><rect x="12.8466%" y="149" width="7.8032%" height="15" fill="rgb(221,5,38)"/><text x="13.0966%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (139,782 samples, 0.10%)</title><rect x="20.6499%" y="165" width="0.1044%" height="15" fill="rgb(247,18,42)"/><text x="20.8999%" y="175.50"></text></g><g><title>hir_module_items (192,493 samples, 0.14%)</title><rect x="20.7543%" y="165" width="0.1438%" height="15" fill="rgb(241,131,45)"/><text x="21.0043%" y="175.50"></text></g><g><title>should_inherit_track_caller (234,353 samples, 0.18%)</title><rect x="21.2687%" y="117" width="0.1750%" height="15" fill="rgb(249,31,29)"/><text x="21.5187%" y="127.50"></text></g><g><title>codegen_fn_attrs (454,285 samples, 0.34%)</title><rect x="21.1262%" y="133" width="0.3393%" height="15" fill="rgb(225,111,53)"/><text x="21.3762%" y="143.50"></text></g><g><title>check_mod_attrs (720,949 samples, 0.54%)</title><rect x="20.9271%" y="149" width="0.5385%" height="15" fill="rgb(238,160,17)"/><text x="21.1771%" y="159.50"></text></g><g><title>lookup_deprecation_entry (136,411 samples, 0.10%)</title><rect x="21.7360%" y="133" width="0.1019%" height="15" fill="rgb(214,148,48)"/><text x="21.9860%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (369,174 samples, 0.28%)</title><rect x="21.6212%" y="149" width="0.2757%" height="15" fill="rgb(232,36,49)"/><text x="21.8712%" y="159.50"></text></g><g><title>misc_checking_1 (1,395,085 samples, 1.04%)</title><rect x="20.8983%" y="165" width="1.0420%" height="15" fill="rgb(209,103,24)"/><text x="21.1483%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (210,412 samples, 0.16%)</title><rect x="21.9414%" y="149" width="0.1572%" height="15" fill="rgb(229,88,8)"/><text x="22.1914%" y="159.50"></text></g><g><title>check_mod_liveness (170,782 samples, 0.13%)</title><rect x="21.9710%" y="133" width="0.1276%" height="15" fill="rgb(213,181,19)"/><text x="22.2210%" y="143.50"></text></g><g><title>misc_checking_2 (451,755 samples, 0.34%)</title><rect x="21.9404%" y="165" width="0.3374%" height="15" fill="rgb(254,191,54)"/><text x="22.1904%" y="175.50"></text></g><g><title>match_checking (239,953 samples, 0.18%)</title><rect x="22.0986%" y="149" width="0.1792%" height="15" fill="rgb(241,83,37)"/><text x="22.3486%" y="159.50"></text></g><g><title>check_match (224,243 samples, 0.17%)</title><rect x="22.1103%" y="133" width="0.1675%" height="15" fill="rgb(233,36,39)"/><text x="22.3603%" y="143.50"></text></g><g><title>death_checking (263,413 samples, 0.20%)</title><rect x="22.3542%" y="149" width="0.1968%" height="15" fill="rgb(226,3,54)"/><text x="22.6042%" y="159.50"></text></g><g><title>crate_lints (719,248 samples, 0.54%)</title><rect x="22.5520%" y="133" width="0.5372%" height="15" fill="rgb(245,192,40)"/><text x="22.8020%" y="143.50"></text></g><g><title>type_of (314,892 samples, 0.24%)</title><rect x="22.8540%" y="117" width="0.2352%" height="15" fill="rgb(238,167,29)"/><text x="23.1040%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (237,982 samples, 0.18%)</title><rect x="22.9114%" y="101" width="0.1778%" height="15" fill="rgb(232,182,51)"/><text x="23.1614%" y="111.50"></text></g><g><title>lint_checking (854,700 samples, 0.64%)</title><rect x="22.5510%" y="149" width="0.6384%" height="15" fill="rgb(231,60,39)"/><text x="22.8010%" y="159.50"></text></g><g><title>module_lints (134,122 samples, 0.10%)</title><rect x="23.0892%" y="133" width="0.1002%" height="15" fill="rgb(208,69,12)"/><text x="23.3392%" y="143.50"></text></g><g><title>privacy_checking_modules (308,003 samples, 0.23%)</title><rect x="23.2791%" y="149" width="0.2301%" height="15" fill="rgb(235,93,37)"/><text x="23.5291%" y="159.50"></text></g><g><title>check_mod_privacy (305,213 samples, 0.23%)</title><rect x="23.2812%" y="133" width="0.2280%" height="15" fill="rgb(213,116,39)"/><text x="23.5312%" y="143.50"></text></g><g><title>misc_checking_3 (1,659,998 samples, 1.24%)</title><rect x="22.2778%" y="165" width="1.2399%" height="15" fill="rgb(222,207,29)"/><text x="22.5278%" y="175.50"></text></g><g><title>is_copy_raw (251,893 samples, 0.19%)</title><rect x="23.6760%" y="117" width="0.1881%" height="15" fill="rgb(206,96,30)"/><text x="23.9260%" y="127.50"></text></g><g><title>evaluate_obligation (208,773 samples, 0.16%)</title><rect x="23.7083%" y="101" width="0.1559%" height="15" fill="rgb(218,138,4)"/><text x="23.9583%" y="111.50"></text></g><g><title>impl_parent (1,505,534 samples, 1.12%)</title><rect x="26.1877%" y="101" width="1.1245%" height="15" fill="rgb(250,191,14)"/><text x="26.4377%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (742,998 samples, 0.55%)</title><rect x="26.7572%" y="85" width="0.5550%" height="15" fill="rgb(239,60,40)"/><text x="27.0072%" y="95.50"></text></g><g><title>impl_trait_ref (3,099,487 samples, 2.32%)</title><rect x="27.3122%" y="101" width="2.3151%" height="15" fill="rgb(206,27,48)"/><text x="27.5622%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,321,858 samples, 1.73%)</title><rect x="27.8931%" y="85" width="1.7343%" height="15" fill="rgb(225,35,8)"/><text x="28.1431%" y="95.50"></text></g><g><title>trait_impls_of (620,415 samples, 0.46%)</title><rect x="29.6582%" y="101" width="0.4634%" height="15" fill="rgb(250,213,24)"/><text x="29.9082%" y="111.50"></text></g><g><title>implementations_of_trait (143,621 samples, 0.11%)</title><rect x="30.0144%" y="85" width="0.1073%" height="15" fill="rgb(247,123,22)"/><text x="30.2644%" y="95.50"></text></g><g><title>coherent_trait (8,769,548 samples, 6.55%)</title><rect x="23.5725%" y="133" width="6.5503%" height="15" fill="rgb(231,138,38)"/><text x="23.8225%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (8,296,472 samples, 6.20%)</title><rect x="23.9258%" y="117" width="6.1969%" height="15" fill="rgb(231,145,46)"/><text x="24.1758%" y="127.50">speciali..</text></g><g><title>coherence_checking (8,858,758 samples, 6.62%)</title><rect x="23.5518%" y="149" width="6.6169%" height="15" fill="rgb(251,118,11)"/><text x="23.8018%" y="159.50">coherence..</text></g><g><title>associated_item (387,385 samples, 0.29%)</title><rect x="37.8873%" y="85" width="0.2894%" height="15" fill="rgb(217,147,25)"/><text x="38.1373%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (302,893 samples, 0.23%)</title><rect x="37.9504%" y="69" width="0.2262%" height="15" fill="rgb(247,81,37)"/><text x="38.2004%" y="79.50"></text></g><g><title>associated_items (570,635 samples, 0.43%)</title><rect x="37.7641%" y="101" width="0.4262%" height="15" fill="rgb(209,12,38)"/><text x="38.0141%" y="111.50"></text></g><g><title>dropck_outlives (395,943 samples, 0.30%)</title><rect x="38.2251%" y="101" width="0.2957%" height="15" fill="rgb(227,1,9)"/><text x="38.4751%" y="111.50"></text></g><g><title>adt_dtorck_constraint (179,202 samples, 0.13%)</title><rect x="38.3870%" y="85" width="0.1339%" height="15" fill="rgb(248,47,43)"/><text x="38.6370%" y="95.50"></text></g><g><title>evaluate_obligation (1,234,536 samples, 0.92%)</title><rect x="38.5209%" y="101" width="0.9221%" height="15" fill="rgb(221,10,30)"/><text x="38.7709%" y="111.50"></text></g><g><title>method_autoderef_steps (340,054 samples, 0.25%)</title><rect x="39.7711%" y="101" width="0.2540%" height="15" fill="rgb(210,229,1)"/><text x="40.0211%" y="111.50"></text></g><g><title>evaluate_obligation (177,852 samples, 0.13%)</title><rect x="39.8922%" y="85" width="0.1328%" height="15" fill="rgb(222,148,37)"/><text x="40.1422%" y="95.50"></text></g><g><title>explicit_predicates_of (135,731 samples, 0.10%)</title><rect x="40.2087%" y="69" width="0.1014%" height="15" fill="rgb(234,67,33)"/><text x="40.4587%" y="79.50"></text></g><g><title>predicates_of (375,554 samples, 0.28%)</title><rect x="40.0624%" y="101" width="0.2805%" height="15" fill="rgb(247,98,35)"/><text x="40.3124%" y="111.50"></text></g><g><title>predicates_defined_on (262,632 samples, 0.20%)</title><rect x="40.1467%" y="85" width="0.1962%" height="15" fill="rgb(247,138,52)"/><text x="40.3967%" y="95.50"></text></g><g><title>associated_items (211,572 samples, 0.16%)</title><rect x="41.2701%" y="85" width="0.1580%" height="15" fill="rgb(213,79,30)"/><text x="41.5201%" y="95.50"></text></g><g><title>typeck (1,675,818 samples, 1.25%)</title><rect x="40.4058%" y="101" width="1.2517%" height="15" fill="rgb(246,177,23)"/><text x="40.6558%" y="111.50"></text></g><g><title>item_bodies_checking (15,382,810 samples, 11.49%)</title><rect x="30.2031%" y="149" width="11.4900%" height="15" fill="rgb(230,62,27)"/><text x="30.4531%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (15,380,060 samples, 11.49%)</title><rect x="30.2051%" y="133" width="11.4879%" height="15" fill="rgb(216,154,8)"/><text x="30.4551%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (15,316,550 samples, 11.44%)</title><rect x="30.2526%" y="117" width="11.4405%" height="15" fill="rgb(244,35,45)"/><text x="30.5026%" y="127.50">typeck</text></g><g><title>item_types_checking (603,916 samples, 0.45%)</title><rect x="41.6930%" y="149" width="0.4511%" height="15" fill="rgb(251,115,12)"/><text x="41.9430%" y="159.50"></text></g><g><title>check_mod_item_types (596,696 samples, 0.45%)</title><rect x="41.6984%" y="133" width="0.4457%" height="15" fill="rgb(240,54,50)"/><text x="41.9484%" y="143.50"></text></g><g><title>fn_sig (291,643 samples, 0.22%)</title><rect x="42.3612%" y="117" width="0.2178%" height="15" fill="rgb(233,84,52)"/><text x="42.6112%" y="127.50"></text></g><g><title>is_late_bound_map (491,154 samples, 0.37%)</title><rect x="42.6983%" y="101" width="0.3669%" height="15" fill="rgb(207,117,47)"/><text x="42.9483%" y="111.50"></text></g><g><title>resolve_lifetimes (444,124 samples, 0.33%)</title><rect x="42.7335%" y="85" width="0.3317%" height="15" fill="rgb(249,43,39)"/><text x="42.9835%" y="95.50"></text></g><g><title>named_region_map (229,762 samples, 0.17%)</title><rect x="43.0652%" y="101" width="0.1716%" height="15" fill="rgb(209,38,44)"/><text x="43.3152%" y="111.50"></text></g><g><title>resolve_lifetimes (208,631 samples, 0.16%)</title><rect x="43.0810%" y="85" width="0.1558%" height="15" fill="rgb(236,212,23)"/><text x="43.3310%" y="95.50"></text></g><g><title>lint_levels (149,491 samples, 0.11%)</title><rect x="43.1251%" y="69" width="0.1117%" height="15" fill="rgb(242,79,21)"/><text x="43.3751%" y="79.50"></text></g><g><title>generics_of (891,509 samples, 0.67%)</title><rect x="42.5790%" y="117" width="0.6659%" height="15" fill="rgb(211,96,35)"/><text x="42.8290%" y="127.50"></text></g><g><title>explicit_predicates_of (455,085 samples, 0.34%)</title><rect x="43.4085%" y="85" width="0.3399%" height="15" fill="rgb(253,215,40)"/><text x="43.6585%" y="95.50"></text></g><g><title>predicates_of (710,936 samples, 0.53%)</title><rect x="43.3004%" y="117" width="0.5310%" height="15" fill="rgb(211,81,21)"/><text x="43.5504%" y="127.50"></text></g><g><title>predicates_defined_on (659,156 samples, 0.49%)</title><rect x="43.3390%" y="101" width="0.4923%" height="15" fill="rgb(208,190,38)"/><text x="43.5890%" y="111.50"></text></g><g><title>type_collecting (2,373,216 samples, 1.77%)</title><rect x="42.1449%" y="149" width="1.7726%" height="15" fill="rgb(235,213,38)"/><text x="42.3949%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,357,676 samples, 1.76%)</title><rect x="42.1565%" y="133" width="1.7610%" height="15" fill="rgb(237,122,38)"/><text x="42.4065%" y="143.50"></text></g><g><title>evaluate_obligation (507,097 samples, 0.38%)</title><rect x="45.7034%" y="117" width="0.3788%" height="15" fill="rgb(244,218,35)"/><text x="45.9534%" y="127.50"></text></g><g><title>implied_outlives_bounds (290,532 samples, 0.22%)</title><rect x="46.0822%" y="117" width="0.2170%" height="15" fill="rgb(240,68,47)"/><text x="46.3322%" y="127.50"></text></g><g><title>param_env (301,863 samples, 0.23%)</title><rect x="46.2992%" y="117" width="0.2255%" height="15" fill="rgb(210,16,53)"/><text x="46.5492%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,678,520 samples, 2.75%)</title><rect x="44.0599%" y="133" width="2.7476%" height="15" fill="rgb(235,124,12)"/><text x="44.3099%" y="143.50">ch..</text></g><g><title>region_scope_tree (286,564 samples, 0.21%)</title><rect x="46.5935%" y="117" width="0.2140%" height="15" fill="rgb(224,169,11)"/><text x="46.8435%" y="127.50"></text></g><g><title>param_env (187,763 samples, 0.14%)</title><rect x="47.9032%" y="117" width="0.1402%" height="15" fill="rgb(250,166,2)"/><text x="48.1532%" y="127.50"></text></g><g><title>analysis (47,703,466 samples, 35.63%)</title><rect x="12.6094%" y="181" width="35.6314%" height="15" fill="rgb(242,216,29)"/><text x="12.8594%" y="191.50">analysis</text></g><g><title>type_check_crate (33,099,435 samples, 24.72%)</title><rect x="23.5177%" y="165" width="24.7231%" height="15" fill="rgb(230,116,27)"/><text x="23.7677%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,784,774 samples, 4.32%)</title><rect x="43.9200%" y="149" width="4.3208%" height="15" fill="rgb(228,99,48)"/><text x="44.1700%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (1,918,902 samples, 1.43%)</title><rect x="46.8075%" y="133" width="1.4333%" height="15" fill="rgb(253,11,6)"/><text x="47.0575%" y="143.50"></text></g><g><title>is_unpin_raw (153,702 samples, 0.11%)</title><rect x="49.5230%" y="133" width="0.1148%" height="15" fill="rgb(247,143,39)"/><text x="49.7730%" y="143.50"></text></g><g><title>evaluate_obligation (147,641 samples, 0.11%)</title><rect x="49.5275%" y="117" width="0.1103%" height="15" fill="rgb(236,97,10)"/><text x="49.7775%" y="127.50"></text></g><g><title>fn_abi_of_instance (365,934 samples, 0.27%)</title><rect x="49.3994%" y="149" width="0.2733%" height="15" fill="rgb(233,208,19)"/><text x="49.6494%" y="159.50"></text></g><g><title>codegen_module (1,455,286 samples, 1.09%)</title><rect x="48.6262%" y="165" width="1.0870%" height="15" fill="rgb(216,164,2)"/><text x="48.8762%" y="175.50"></text></g><g><title>optimized_mir (360,754 samples, 0.27%)</title><rect x="49.8104%" y="117" width="0.2695%" height="15" fill="rgb(220,129,5)"/><text x="50.0604%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (475,015 samples, 0.35%)</title><rect x="49.7302%" y="133" width="0.3548%" height="15" fill="rgb(242,17,10)"/><text x="49.9802%" y="143.50"></text></g><g><title>monomorphization_collector (508,845 samples, 0.38%)</title><rect x="49.7289%" y="149" width="0.3801%" height="15" fill="rgb(242,107,0)"/><text x="49.9789%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (586,826 samples, 0.44%)</title><rect x="49.7139%" y="165" width="0.4383%" height="15" fill="rgb(251,28,31)"/><text x="49.9639%" y="175.50"></text></g><g><title>codegen_crate (2,575,288 samples, 1.92%)</title><rect x="48.2469%" y="181" width="1.9236%" height="15" fill="rgb(233,223,10)"/><text x="48.4969%" y="191.50">c..</text></g><g><title>codegen_module_optimize (10,896,292 samples, 8.14%)</title><rect x="50.1705%" y="181" width="8.1388%" height="15" fill="rgb(215,21,27)"/><text x="50.4205%" y="191.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (9,109,771 samples, 6.80%)</title><rect x="51.5049%" y="165" width="6.8044%" height="15" fill="rgb(232,23,21)"/><text x="51.7549%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (4,295,877 samples, 3.21%)</title><rect x="59.1706%" y="165" width="3.2087%" height="15" fill="rgb(244,5,23)"/><text x="59.4206%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen (12,610,668 samples, 9.42%)</title><rect x="62.3794%" y="165" width="9.4193%" height="15" fill="rgb(226,81,46)"/><text x="62.6294%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (12,384,466 samples, 9.25%)</title><rect x="62.5483%" y="149" width="9.2504%" height="15" fill="rgb(247,70,30)"/><text x="62.7983%" y="159.50">LLVM_module_c..</text></g><g><title>codegen_module_perform_lto (18,173,299 samples, 13.57%)</title><rect x="58.3093%" y="181" width="13.5743%" height="15" fill="rgb(212,68,19)"/><text x="58.5593%" y="191.50">codegen_module_perfor..</text></g><g><title>metadata_register_crate (182,452 samples, 0.14%)</title><rect x="79.3497%" y="133" width="0.1363%" height="15" fill="rgb(240,187,13)"/><text x="79.5997%" y="143.50"></text></g><g><title>macro_expand_crate (9,861,509 samples, 7.37%)</title><rect x="72.2088%" y="165" width="7.3659%" height="15" fill="rgb(223,113,26)"/><text x="72.4588%" y="175.50">macro_expa..</text></g><g><title>expand_crate (9,838,819 samples, 7.35%)</title><rect x="72.2258%" y="149" width="7.3490%" height="15" fill="rgb(206,192,2)"/><text x="72.4758%" y="159.50">expand_cra..</text></g><g><title>finalize_macro_resolutions (308,384 samples, 0.23%)</title><rect x="79.6637%" y="149" width="0.2303%" height="15" fill="rgb(241,108,4)"/><text x="79.9137%" y="159.50"></text></g><g><title>late_resolve_crate (1,540,387 samples, 1.15%)</title><rect x="79.8940%" y="149" width="1.1506%" height="15" fill="rgb(247,173,49)"/><text x="80.1440%" y="159.50"></text></g><g><title>configure_and_expand (12,366,806 samples, 9.24%)</title><rect x="71.8836%" y="181" width="9.2372%" height="15" fill="rgb(224,114,35)"/><text x="72.1336%" y="191.50">configure_and..</text></g><g><title>resolve_crate (1,997,552 samples, 1.49%)</title><rect x="79.6287%" y="165" width="1.4920%" height="15" fill="rgb(245,159,27)"/><text x="79.8787%" y="175.50"></text></g><g><title>drop_ast (146,682 samples, 0.11%)</title><rect x="81.1208%" y="181" width="0.1096%" height="15" fill="rgb(245,172,44)"/><text x="81.3708%" y="191.50"></text></g><g><title>early_lint_checks (279,383 samples, 0.21%)</title><rect x="81.2457%" y="181" width="0.2087%" height="15" fill="rgb(236,23,11)"/><text x="81.4957%" y="191.50"></text></g><g><title>free_global_ctxt (2,372,946 samples, 1.77%)</title><rect x="81.4544%" y="181" width="1.7724%" height="15" fill="rgb(205,117,38)"/><text x="81.7044%" y="191.50">f..</text></g><g><title>exported_symbols (151,022 samples, 0.11%)</title><rect x="83.8110%" y="165" width="0.1128%" height="15" fill="rgb(237,72,25)"/><text x="84.0610%" y="175.50"></text></g><g><title>layout_of (256,973 samples, 0.19%)</title><rect x="84.8794%" y="149" width="0.1919%" height="15" fill="rgb(244,70,9)"/><text x="85.1294%" y="159.50"></text></g><g><title>needs_drop_raw (304,302 samples, 0.23%)</title><rect x="86.0045%" y="133" width="0.2273%" height="15" fill="rgb(217,125,39)"/><text x="86.2545%" y="143.50"></text></g><g><title>is_copy_raw (279,762 samples, 0.21%)</title><rect x="86.0229%" y="117" width="0.2090%" height="15" fill="rgb(235,36,10)"/><text x="86.2729%" y="127.50"></text></g><g><title>evaluate_obligation (215,921 samples, 0.16%)</title><rect x="86.0705%" y="101" width="0.1613%" height="15" fill="rgb(251,123,47)"/><text x="86.3205%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,566,139 samples, 1.17%)</title><rect x="85.0713%" y="149" width="1.1698%" height="15" fill="rgb(221,13,13)"/><text x="85.3213%" y="159.50"></text></g><g><title>optimized_mir (3,053,855 samples, 2.28%)</title><rect x="83.9610%" y="165" width="2.2810%" height="15" fill="rgb(238,131,9)"/><text x="84.2110%" y="175.50">o..</text></g><g><title>generate_crate_metadata (4,072,335 samples, 3.04%)</title><rect x="83.2268%" y="181" width="3.0418%" height="15" fill="rgb(211,50,8)"/><text x="83.4768%" y="191.50">gen..</text></g><g><title>hir_lowering (2,406,726 samples, 1.80%)</title><rect x="86.2686%" y="181" width="1.7977%" height="15" fill="rgb(245,182,24)"/><text x="86.5186%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (12,950,482 samples, 9.67%)</title><rect x="88.0821%" y="165" width="9.6732%" height="15" fill="rgb(242,14,37)"/><text x="88.3321%" y="175.50">finish_ongoing..</text></g><g><title>link_crate (1,044,321 samples, 0.78%)</title><rect x="97.7552%" y="165" width="0.7800%" height="15" fill="rgb(246,228,12)"/><text x="98.0052%" y="175.50"></text></g><g><title>link_binary (1,034,291 samples, 0.77%)</title><rect x="97.7627%" y="149" width="0.7725%" height="15" fill="rgb(213,55,15)"/><text x="98.0127%" y="159.50"></text></g><g><title>link_rlib (668,608 samples, 0.50%)</title><rect x="98.0359%" y="133" width="0.4994%" height="15" fill="rgb(209,9,3)"/><text x="98.2859%" y="143.50"></text></g><g><title>link (14,027,984 samples, 10.48%)</title><rect x="88.0662%" y="181" width="10.4780%" height="15" fill="rgb(230,59,30)"/><text x="88.3162%" y="191.50">link</text></g><g><title>parse_crate (721,128 samples, 0.54%)</title><rect x="98.5442%" y="181" width="0.5386%" height="15" fill="rgb(209,121,21)"/><text x="98.7942%" y="191.50"></text></g><g><title>prepare_outputs (287,303 samples, 0.21%)</title><rect x="99.0887%" y="181" width="0.2146%" height="15" fill="rgb(220,109,13)"/><text x="99.3387%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (475,235 samples, 0.35%)</title><rect x="99.3033%" y="181" width="0.3550%" height="15" fill="rgb(232,18,1)"/><text x="99.5533%" y="191.50"></text></g><g><title>all (133,880,525 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (133,880,525 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (339,524 samples, 0.25%)</title><rect x="99.7464%" y="181" width="0.2536%" height="15" fill="rgb(240,125,3)"/><text x="99.9964%" y="191.50"></text></g></svg></svg>