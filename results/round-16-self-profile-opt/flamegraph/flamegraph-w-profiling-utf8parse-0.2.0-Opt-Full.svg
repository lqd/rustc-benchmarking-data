<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (24,116,946 samples, 15.75%)</title><rect x="0.4115%" y="197" width="15.7486%" height="15" fill="rgb(227,0,7)"/><text x="0.6615%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (250,393 samples, 0.16%)</title><rect x="15.9967%" y="181" width="0.1635%" height="15" fill="rgb(217,0,24)"/><text x="16.2467%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (232,823 samples, 0.15%)</title><rect x="16.0081%" y="165" width="0.1520%" height="15" fill="rgb(221,193,54)"/><text x="16.2581%" y="175.50"></text></g><g><title>thir_body (619,526 samples, 0.40%)</title><rect x="20.8208%" y="85" width="0.4046%" height="15" fill="rgb(248,212,6)"/><text x="21.0708%" y="95.50"></text></g><g><title>mir_const (2,736,549 samples, 1.79%)</title><rect x="19.4416%" y="133" width="1.7870%" height="15" fill="rgb(208,68,35)"/><text x="19.6916%" y="143.50">m..</text></g><g><title>unsafety_check_result (2,356,683 samples, 1.54%)</title><rect x="19.6897%" y="117" width="1.5389%" height="15" fill="rgb(232,128,0)"/><text x="19.9397%" y="127.50"></text></g><g><title>mir_built (2,177,642 samples, 1.42%)</title><rect x="19.8066%" y="101" width="1.4220%" height="15" fill="rgb(207,160,47)"/><text x="20.0566%" y="111.50"></text></g><g><title>mir_promoted (3,155,233 samples, 2.06%)</title><rect x="19.2312%" y="149" width="2.0604%" height="15" fill="rgb(228,23,34)"/><text x="19.4812%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (307,882 samples, 0.20%)</title><rect x="21.3333%" y="149" width="0.2011%" height="15" fill="rgb(218,30,26)"/><text x="21.5833%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,963,428 samples, 5.20%)</title><rect x="16.3360%" y="181" width="5.2002%" height="15" fill="rgb(220,122,19)"/><text x="16.5860%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (7,918,277 samples, 5.17%)</title><rect x="16.3655%" y="165" width="5.1707%" height="15" fill="rgb(250,228,42)"/><text x="16.6155%" y="175.50">mir_bo..</text></g><g><title>hir_module_items (172,862 samples, 0.11%)</title><rect x="21.6147%" y="181" width="0.1129%" height="15" fill="rgb(240,193,28)"/><text x="21.8647%" y="191.50"></text></g><g><title>should_inherit_track_caller (202,813 samples, 0.13%)</title><rect x="21.9851%" y="133" width="0.1324%" height="15" fill="rgb(216,20,37)"/><text x="22.2351%" y="143.50"></text></g><g><title>codegen_fn_attrs (412,065 samples, 0.27%)</title><rect x="21.8722%" y="149" width="0.2691%" height="15" fill="rgb(206,188,39)"/><text x="22.1222%" y="159.50"></text></g><g><title>check_mod_attrs (600,197 samples, 0.39%)</title><rect x="21.7496%" y="165" width="0.3919%" height="15" fill="rgb(217,207,13)"/><text x="21.9996%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (258,003 samples, 0.17%)</title><rect x="22.2266%" y="165" width="0.1685%" height="15" fill="rgb(231,73,38)"/><text x="22.4766%" y="175.50"></text></g><g><title>misc_checking_1 (1,075,022 samples, 0.70%)</title><rect x="21.7282%" y="181" width="0.7020%" height="15" fill="rgb(225,20,46)"/><text x="21.9782%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (230,182 samples, 0.15%)</title><rect x="22.4323%" y="165" width="0.1503%" height="15" fill="rgb(210,31,41)"/><text x="22.6823%" y="175.50"></text></g><g><title>check_mod_liveness (163,311 samples, 0.11%)</title><rect x="22.4760%" y="149" width="0.1066%" height="15" fill="rgb(221,200,47)"/><text x="22.7260%" y="159.50"></text></g><g><title>misc_checking_2 (780,988 samples, 0.51%)</title><rect x="22.4302%" y="181" width="0.5100%" height="15" fill="rgb(226,26,5)"/><text x="22.6802%" y="191.50"></text></g><g><title>match_checking (547,646 samples, 0.36%)</title><rect x="22.5826%" y="165" width="0.3576%" height="15" fill="rgb(249,33,26)"/><text x="22.8326%" y="175.50"></text></g><g><title>check_match (519,546 samples, 0.34%)</title><rect x="22.6010%" y="149" width="0.3393%" height="15" fill="rgb(235,183,28)"/><text x="22.8510%" y="159.50"></text></g><g><title>death_checking (412,644 samples, 0.27%)</title><rect x="23.0329%" y="165" width="0.2695%" height="15" fill="rgb(221,5,38)"/><text x="23.2829%" y="175.50"></text></g><g><title>item_attrs (157,312 samples, 0.10%)</title><rect x="23.1997%" y="149" width="0.1027%" height="15" fill="rgb(247,18,42)"/><text x="23.4497%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (154,902 samples, 0.10%)</title><rect x="23.2012%" y="133" width="0.1012%" height="15" fill="rgb(241,131,45)"/><text x="23.4512%" y="143.50"></text></g><g><title>crate_lints (1,357,546 samples, 0.89%)</title><rect x="23.3044%" y="149" width="0.8865%" height="15" fill="rgb(249,31,29)"/><text x="23.5544%" y="159.50"></text></g><g><title>type_of (629,079 samples, 0.41%)</title><rect x="23.7801%" y="133" width="0.4108%" height="15" fill="rgb(225,111,53)"/><text x="24.0301%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (418,556 samples, 0.27%)</title><rect x="23.9176%" y="117" width="0.2733%" height="15" fill="rgb(238,160,17)"/><text x="24.1676%" y="127.50"></text></g><g><title>lint_checking (1,760,290 samples, 1.15%)</title><rect x="23.3024%" y="165" width="1.1495%" height="15" fill="rgb(214,148,48)"/><text x="23.5524%" y="175.50"></text></g><g><title>module_lints (399,594 samples, 0.26%)</title><rect x="24.1909%" y="149" width="0.2609%" height="15" fill="rgb(232,36,49)"/><text x="24.4409%" y="159.50"></text></g><g><title>lint_mod (392,944 samples, 0.26%)</title><rect x="24.1953%" y="133" width="0.2566%" height="15" fill="rgb(209,103,24)"/><text x="24.4453%" y="143.50"></text></g><g><title>privacy_checking_modules (354,774 samples, 0.23%)</title><rect x="24.5352%" y="165" width="0.2317%" height="15" fill="rgb(229,88,8)"/><text x="24.7852%" y="175.50"></text></g><g><title>check_mod_privacy (350,874 samples, 0.23%)</title><rect x="24.5378%" y="149" width="0.2291%" height="15" fill="rgb(213,181,19)"/><text x="24.7878%" y="159.50"></text></g><g><title>misc_checking_3 (2,812,001 samples, 1.84%)</title><rect x="22.9402%" y="181" width="1.8363%" height="15" fill="rgb(254,191,54)"/><text x="23.1902%" y="191.50">m..</text></g><g><title>impl_parent (1,049,720 samples, 0.69%)</title><rect x="26.2372%" y="117" width="0.6855%" height="15" fill="rgb(241,83,37)"/><text x="26.4872%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (570,117 samples, 0.37%)</title><rect x="26.5504%" y="101" width="0.3723%" height="15" fill="rgb(233,36,39)"/><text x="26.8004%" y="111.50"></text></g><g><title>impl_trait_ref (2,669,899 samples, 1.74%)</title><rect x="26.9227%" y="117" width="1.7435%" height="15" fill="rgb(226,3,54)"/><text x="27.1727%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,187,826 samples, 1.43%)</title><rect x="27.2375%" y="101" width="1.4287%" height="15" fill="rgb(245,192,40)"/><text x="27.4875%" y="111.50"></text></g><g><title>coherent_trait (6,307,339 samples, 4.12%)</title><rect x="24.8289%" y="149" width="4.1188%" height="15" fill="rgb(238,167,29)"/><text x="25.0789%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (6,164,058 samples, 4.03%)</title><rect x="24.9225%" y="133" width="4.0252%" height="15" fill="rgb(232,182,51)"/><text x="25.1725%" y="143.50">spec..</text></g><g><title>trait_impls_of (427,945 samples, 0.28%)</title><rect x="28.6682%" y="117" width="0.2795%" height="15" fill="rgb(231,60,39)"/><text x="28.9182%" y="127.50"></text></g><g><title>coherence_checking (6,371,310 samples, 4.16%)</title><rect x="24.8136%" y="165" width="4.1605%" height="15" fill="rgb(208,69,12)"/><text x="25.0636%" y="175.50">coher..</text></g><g><title>predicates_of (241,474 samples, 0.16%)</title><rect x="35.4691%" y="101" width="0.1577%" height="15" fill="rgb(235,93,37)"/><text x="35.7191%" y="111.50"></text></g><g><title>specializes (898,820 samples, 0.59%)</title><rect x="35.6268%" y="101" width="0.5869%" height="15" fill="rgb(213,116,39)"/><text x="35.8768%" y="111.50"></text></g><g><title>param_env (657,858 samples, 0.43%)</title><rect x="35.7841%" y="85" width="0.4296%" height="15" fill="rgb(222,207,29)"/><text x="36.0341%" y="95.50"></text></g><g><title>def_span (454,296 samples, 0.30%)</title><rect x="35.9171%" y="69" width="0.2967%" height="15" fill="rgb(206,96,30)"/><text x="36.1671%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (427,135 samples, 0.28%)</title><rect x="35.9348%" y="53" width="0.2789%" height="15" fill="rgb(218,138,4)"/><text x="36.1848%" y="63.50"></text></g><g><title>trait_impls_of (324,294 samples, 0.21%)</title><rect x="36.2212%" y="101" width="0.2118%" height="15" fill="rgb(250,191,14)"/><text x="36.4712%" y="111.50"></text></g><g><title>evaluate_obligation (2,795,958 samples, 1.83%)</title><rect x="34.6212%" y="117" width="1.8258%" height="15" fill="rgb(239,60,40)"/><text x="34.8712%" y="127.50">e..</text></g><g><title>item_bodies_checking (11,991,322 samples, 7.83%)</title><rect x="28.9883%" y="165" width="7.8305%" height="15" fill="rgb(206,27,48)"/><text x="29.2383%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (11,987,922 samples, 7.83%)</title><rect x="28.9905%" y="149" width="7.8283%" height="15" fill="rgb(225,35,8)"/><text x="29.2405%" y="159.50">typeck_item..</text></g><g><title>typeck (11,954,362 samples, 7.81%)</title><rect x="29.0124%" y="133" width="7.8063%" height="15" fill="rgb(250,213,24)"/><text x="29.2624%" y="143.50">typeck</text></g><g><title>item_types_checking (556,766 samples, 0.36%)</title><rect x="36.8188%" y="165" width="0.3636%" height="15" fill="rgb(247,123,22)"/><text x="37.0688%" y="175.50"></text></g><g><title>check_mod_item_types (551,366 samples, 0.36%)</title><rect x="36.8223%" y="149" width="0.3600%" height="15" fill="rgb(231,138,38)"/><text x="37.0723%" y="159.50"></text></g><g><title>mir_const_qualif (1,108,161 samples, 0.72%)</title><rect x="38.0411%" y="85" width="0.7236%" height="15" fill="rgb(231,145,46)"/><text x="38.2911%" y="95.50"></text></g><g><title>mir_const (927,560 samples, 0.61%)</title><rect x="38.1591%" y="69" width="0.6057%" height="15" fill="rgb(251,118,11)"/><text x="38.4091%" y="79.50"></text></g><g><title>unsafety_check_result (647,176 samples, 0.42%)</title><rect x="38.3422%" y="53" width="0.4226%" height="15" fill="rgb(217,147,25)"/><text x="38.5922%" y="63.50"></text></g><g><title>mir_built (548,055 samples, 0.36%)</title><rect x="38.4069%" y="37" width="0.3579%" height="15" fill="rgb(247,81,37)"/><text x="38.6569%" y="47.50"></text></g><g><title>mir_borrowck (2,303,649 samples, 1.50%)</title><rect x="39.5208%" y="53" width="1.5043%" height="15" fill="rgb(209,12,38)"/><text x="39.7708%" y="63.50"></text></g><g><title>mir_promoted (175,273 samples, 0.11%)</title><rect x="40.9107%" y="37" width="0.1145%" height="15" fill="rgb(227,1,9)"/><text x="41.1607%" y="47.50"></text></g><g><title>mir_for_ctfe (3,474,310 samples, 2.27%)</title><rect x="38.7648%" y="85" width="2.2688%" height="15" fill="rgb(248,47,43)"/><text x="39.0148%" y="95.50">m..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,168,637 samples, 2.07%)</title><rect x="38.9644%" y="69" width="2.0692%" height="15" fill="rgb(221,10,30)"/><text x="39.2144%" y="79.50">m..</text></g><g><title>eval_to_const_value_raw (6,878,186 samples, 4.49%)</title><rect x="37.4802%" y="133" width="4.4915%" height="15" fill="rgb(210,229,1)"/><text x="37.7302%" y="143.50">eval_..</text></g><g><title>eval_to_const_value_raw (6,821,236 samples, 4.45%)</title><rect x="37.5174%" y="117" width="4.4543%" height="15" fill="rgb(222,148,37)"/><text x="37.7674%" y="127.50">eval_..</text></g><g><title>eval_to_allocation_raw (6,743,225 samples, 4.40%)</title><rect x="37.5684%" y="101" width="4.4034%" height="15" fill="rgb(234,67,33)"/><text x="37.8184%" y="111.50">eval_..</text></g><g><title>typeck (1,428,587 samples, 0.93%)</title><rect x="41.0389%" y="85" width="0.9329%" height="15" fill="rgb(247,98,35)"/><text x="41.2889%" y="95.50"></text></g><g><title>fn_sig (221,103 samples, 0.14%)</title><rect x="41.9718%" y="133" width="0.1444%" height="15" fill="rgb(247,138,52)"/><text x="42.2218%" y="143.50"></text></g><g><title>named_region_map (325,092 samples, 0.21%)</title><rect x="42.2008%" y="117" width="0.2123%" height="15" fill="rgb(213,79,30)"/><text x="42.4508%" y="127.50"></text></g><g><title>resolve_lifetimes (305,482 samples, 0.20%)</title><rect x="42.2136%" y="101" width="0.1995%" height="15" fill="rgb(246,177,23)"/><text x="42.4636%" y="111.50"></text></g><g><title>generics_of (468,503 samples, 0.31%)</title><rect x="42.1162%" y="133" width="0.3059%" height="15" fill="rgb(230,62,27)"/><text x="42.3662%" y="143.50"></text></g><g><title>param_env (598,706 samples, 0.39%)</title><rect x="42.4614%" y="133" width="0.3910%" height="15" fill="rgb(216,154,8)"/><text x="42.7114%" y="143.50"></text></g><g><title>explicit_predicates_of (190,730 samples, 0.12%)</title><rect x="42.9521%" y="101" width="0.1245%" height="15" fill="rgb(244,35,45)"/><text x="43.2021%" y="111.50"></text></g><g><title>predicates_of (476,366 samples, 0.31%)</title><rect x="42.8524%" y="133" width="0.3111%" height="15" fill="rgb(251,115,12)"/><text x="43.1024%" y="143.50"></text></g><g><title>predicates_defined_on (419,486 samples, 0.27%)</title><rect x="42.8895%" y="117" width="0.2739%" height="15" fill="rgb(240,54,50)"/><text x="43.1395%" y="127.50"></text></g><g><title>type_collecting (9,309,973 samples, 6.08%)</title><rect x="37.1833%" y="165" width="6.0795%" height="15" fill="rgb(233,84,52)"/><text x="37.4333%" y="175.50">type_col..</text></g><g><title>collect_mod_item_types (9,295,393 samples, 6.07%)</title><rect x="37.1928%" y="149" width="6.0700%" height="15" fill="rgb(207,117,47)"/><text x="37.4428%" y="159.50">collect_..</text></g><g><title>evaluate_obligation (281,792 samples, 0.18%)</title><rect x="43.8090%" y="133" width="0.1840%" height="15" fill="rgb(249,43,39)"/><text x="44.0590%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,485,647 samples, 0.97%)</title><rect x="43.3381%" y="149" width="0.9701%" height="15" fill="rgb(209,38,44)"/><text x="43.5881%" y="159.50"></text></g><g><title>region_scope_tree (218,901 samples, 0.14%)</title><rect x="44.1653%" y="133" width="0.1429%" height="15" fill="rgb(236,212,23)"/><text x="44.4153%" y="143.50"></text></g><g><title>evaluate_obligation (217,181 samples, 0.14%)</title><rect x="44.7332%" y="133" width="0.1418%" height="15" fill="rgb(242,79,21)"/><text x="44.9832%" y="143.50"></text></g><g><title>check_item_well_formed (1,213,351 samples, 0.79%)</title><rect x="44.3082%" y="149" width="0.7923%" height="15" fill="rgb(211,96,35)"/><text x="44.5582%" y="159.50"></text></g><g><title>analysis (44,622,342 samples, 29.14%)</title><rect x="16.1602%" y="197" width="29.1389%" height="15" fill="rgb(253,215,40)"/><text x="16.4102%" y="207.50">analysis</text></g><g><title>type_check_crate (31,427,577 samples, 20.52%)</title><rect x="24.7765%" y="181" width="20.5226%" height="15" fill="rgb(211,81,21)"/><text x="25.0265%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,112,194 samples, 2.03%)</title><rect x="43.2668%" y="165" width="2.0323%" height="15" fill="rgb(208,190,38)"/><text x="43.5168%" y="175.50">w..</text></g><g><title>check_trait_item_well_formed (303,983 samples, 0.20%)</title><rect x="45.1006%" y="149" width="0.1985%" height="15" fill="rgb(235,213,38)"/><text x="45.3506%" y="159.50"></text></g><g><title>is_unpin_raw (213,422 samples, 0.14%)</title><rect x="47.2375%" y="149" width="0.1394%" height="15" fill="rgb(237,122,38)"/><text x="47.4875%" y="159.50"></text></g><g><title>evaluate_obligation (194,512 samples, 0.13%)</title><rect x="47.2499%" y="133" width="0.1270%" height="15" fill="rgb(244,218,35)"/><text x="47.4999%" y="143.50"></text></g><g><title>fn_abi_of_instance (572,858 samples, 0.37%)</title><rect x="47.0828%" y="165" width="0.3741%" height="15" fill="rgb(240,68,47)"/><text x="47.3328%" y="175.50"></text></g><g><title>codegen_module (2,601,479 samples, 1.70%)</title><rect x="45.7970%" y="181" width="1.6988%" height="15" fill="rgb(210,16,53)"/><text x="46.0470%" y="191.50"></text></g><g><title>optimized_mir (1,261,134 samples, 0.82%)</title><rect x="47.6629%" y="133" width="0.8235%" height="15" fill="rgb(235,124,12)"/><text x="47.9129%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (533,276 samples, 0.35%)</title><rect x="48.1382%" y="117" width="0.3482%" height="15" fill="rgb(224,169,11)"/><text x="48.3882%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,478,056 samples, 0.97%)</title><rect x="47.5276%" y="149" width="0.9652%" height="15" fill="rgb(250,166,2)"/><text x="47.7776%" y="159.50"></text></g><g><title>monomorphization_collector (1,525,586 samples, 1.00%)</title><rect x="47.5249%" y="165" width="0.9962%" height="15" fill="rgb(242,216,29)"/><text x="47.7749%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,641,518 samples, 1.07%)</title><rect x="47.4968%" y="181" width="1.0719%" height="15" fill="rgb(230,116,27)"/><text x="47.7468%" y="191.50"></text></g><g><title>codegen_crate (5,046,386 samples, 3.30%)</title><rect x="45.3035%" y="197" width="3.2953%" height="15" fill="rgb(228,99,48)"/><text x="45.5535%" y="207.50">cod..</text></g><g><title>codegen_module_optimize (12,460,247 samples, 8.14%)</title><rect x="48.5988%" y="197" width="8.1367%" height="15" fill="rgb(253,11,6)"/><text x="48.8488%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (10,396,225 samples, 6.79%)</title><rect x="49.9466%" y="181" width="6.7889%" height="15" fill="rgb(247,143,39)"/><text x="50.1966%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (4,793,323 samples, 3.13%)</title><rect x="57.3783%" y="181" width="3.1301%" height="15" fill="rgb(236,97,10)"/><text x="57.6283%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen (15,195,927 samples, 9.92%)</title><rect x="60.5084%" y="181" width="9.9231%" height="15" fill="rgb(233,208,19)"/><text x="60.7584%" y="191.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (14,956,495 samples, 9.77%)</title><rect x="60.6648%" y="165" width="9.7668%" height="15" fill="rgb(216,164,2)"/><text x="60.9148%" y="175.50">LLVM_module_co..</text></g><g><title>codegen_module_perform_lto (21,108,573 samples, 13.78%)</title><rect x="56.7355%" y="197" width="13.7841%" height="15" fill="rgb(220,129,5)"/><text x="56.9855%" y="207.50">codegen_module_perfor..</text></g><g><title>metadata_register_crate (208,002 samples, 0.14%)</title><rect x="76.7784%" y="149" width="0.1358%" height="15" fill="rgb(242,17,10)"/><text x="77.0284%" y="159.50"></text></g><g><title>macro_expand_crate (9,476,444 samples, 6.19%)</title><rect x="70.7757%" y="181" width="6.1882%" height="15" fill="rgb(242,107,0)"/><text x="71.0257%" y="191.50">macro_ex..</text></g><g><title>expand_crate (9,460,714 samples, 6.18%)</title><rect x="70.7860%" y="165" width="6.1780%" height="15" fill="rgb(251,28,31)"/><text x="71.0360%" y="175.50">expand_c..</text></g><g><title>finalize_macro_resolutions (227,593 samples, 0.15%)</title><rect x="77.0372%" y="165" width="0.1486%" height="15" fill="rgb(233,223,10)"/><text x="77.2872%" y="175.50"></text></g><g><title>late_resolve_crate (1,640,608 samples, 1.07%)</title><rect x="77.1858%" y="165" width="1.0713%" height="15" fill="rgb(215,21,27)"/><text x="77.4358%" y="175.50"></text></g><g><title>configure_and_expand (11,936,792 samples, 7.79%)</title><rect x="70.5197%" y="197" width="7.7949%" height="15" fill="rgb(232,23,21)"/><text x="70.7697%" y="207.50">configure_a..</text></g><g><title>resolve_crate (2,001,992 samples, 1.31%)</title><rect x="77.0072%" y="181" width="1.3073%" height="15" fill="rgb(244,5,23)"/><text x="77.2572%" y="191.50"></text></g><g><title>early_lint_checks (328,024 samples, 0.21%)</title><rect x="78.4127%" y="197" width="0.2142%" height="15" fill="rgb(226,81,46)"/><text x="78.6627%" y="207.50"></text></g><g><title>free_global_ctxt (2,347,076 samples, 1.53%)</title><rect x="78.6269%" y="197" width="1.5327%" height="15" fill="rgb(247,70,30)"/><text x="78.8769%" y="207.50"></text></g><g><title>exported_symbols (226,742 samples, 0.15%)</title><rect x="81.0378%" y="181" width="0.1481%" height="15" fill="rgb(212,68,19)"/><text x="81.2878%" y="191.50"></text></g><g><title>layout_of (160,980 samples, 0.11%)</title><rect x="82.2128%" y="165" width="0.1051%" height="15" fill="rgb(240,187,13)"/><text x="82.4628%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,057,221 samples, 0.69%)</title><rect x="82.3179%" y="165" width="0.6904%" height="15" fill="rgb(223,113,26)"/><text x="82.5679%" y="175.50"></text></g><g><title>optimized_mir (2,759,589 samples, 1.80%)</title><rect x="81.2154%" y="181" width="1.8020%" height="15" fill="rgb(206,192,2)"/><text x="81.4654%" y="191.50">o..</text></g><g><title>generate_crate_metadata (4,433,419 samples, 2.90%)</title><rect x="80.1596%" y="197" width="2.8951%" height="15" fill="rgb(241,108,4)"/><text x="80.4096%" y="207.50">ge..</text></g><g><title>hir_lowering (1,708,378 samples, 1.12%)</title><rect x="83.0547%" y="197" width="1.1156%" height="15" fill="rgb(247,173,49)"/><text x="83.3047%" y="207.50"></text></g><g><title>finish_ongoing_codegen (20,622,327 samples, 13.47%)</title><rect x="84.1909%" y="181" width="13.4666%" height="15" fill="rgb(224,114,35)"/><text x="84.4409%" y="191.50">finish_ongoing_codeg..</text></g><g><title>link_crate (1,114,392 samples, 0.73%)</title><rect x="97.6575%" y="181" width="0.7277%" height="15" fill="rgb(245,159,27)"/><text x="97.9075%" y="191.50"></text></g><g><title>link_binary (1,104,322 samples, 0.72%)</title><rect x="97.6641%" y="165" width="0.7211%" height="15" fill="rgb(245,172,44)"/><text x="97.9141%" y="175.50"></text></g><g><title>link_rlib (677,417 samples, 0.44%)</title><rect x="97.9429%" y="149" width="0.4424%" height="15" fill="rgb(236,23,11)"/><text x="98.1929%" y="159.50"></text></g><g><title>link (21,782,690 samples, 14.22%)</title><rect x="84.1702%" y="197" width="14.2244%" height="15" fill="rgb(205,117,38)"/><text x="84.4202%" y="207.50">link</text></g><g><title>parse_crate (673,988 samples, 0.44%)</title><rect x="98.3946%" y="197" width="0.4401%" height="15" fill="rgb(237,72,25)"/><text x="98.6446%" y="207.50"></text></g><g><title>prepare_outputs (306,703 samples, 0.20%)</title><rect x="98.8387%" y="197" width="0.2003%" height="15" fill="rgb(244,70,9)"/><text x="99.0887%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (798,909 samples, 0.52%)</title><rect x="99.0389%" y="197" width="0.5217%" height="15" fill="rgb(217,125,39)"/><text x="99.2889%" y="207.50"></text></g><g><title>all (153,136,609 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (153,136,609 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (512,025 samples, 0.33%)</title><rect x="99.6656%" y="197" width="0.3344%" height="15" fill="rgb(221,13,13)"/><text x="99.9156%" y="207.50"></text></g></svg></svg>