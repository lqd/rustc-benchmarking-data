<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,233,788 samples, 13.93%)</title><rect x="0.2803%" y="181" width="13.9274%" height="15" fill="rgb(227,0,7)"/><text x="0.5303%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (207,672 samples, 0.11%)</title><rect x="14.0931%" y="165" width="0.1146%" height="15" fill="rgb(217,0,24)"/><text x="14.3431%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (196,392 samples, 0.11%)</title><rect x="14.0993%" y="149" width="0.1084%" height="15" fill="rgb(221,193,54)"/><text x="14.3493%" y="159.50"></text></g><g><title>needs_drop_raw (591,685 samples, 0.33%)</title><rect x="18.0800%" y="69" width="0.3266%" height="15" fill="rgb(248,212,6)"/><text x="18.3300%" y="79.50"></text></g><g><title>is_copy_raw (510,925 samples, 0.28%)</title><rect x="18.1246%" y="53" width="0.2820%" height="15" fill="rgb(208,68,35)"/><text x="18.3746%" y="63.50"></text></g><g><title>evaluate_obligation (440,874 samples, 0.24%)</title><rect x="18.1633%" y="37" width="0.2433%" height="15" fill="rgb(232,128,0)"/><text x="18.4133%" y="47.50"></text></g><g><title>resolve_instance (238,262 samples, 0.13%)</title><rect x="18.4066%" y="69" width="0.1315%" height="15" fill="rgb(207,160,47)"/><text x="18.6566%" y="79.50"></text></g><g><title>thir_body (307,411 samples, 0.17%)</title><rect x="18.5441%" y="69" width="0.1697%" height="15" fill="rgb(228,23,34)"/><text x="18.7941%" y="79.50"></text></g><g><title>mir_const (2,730,539 samples, 1.51%)</title><rect x="17.2101%" y="117" width="1.5071%" height="15" fill="rgb(218,30,26)"/><text x="17.4601%" y="127.50"></text></g><g><title>unsafety_check_result (2,317,025 samples, 1.28%)</title><rect x="17.4383%" y="101" width="1.2788%" height="15" fill="rgb(220,122,19)"/><text x="17.6883%" y="111.50"></text></g><g><title>mir_built (2,050,670 samples, 1.13%)</title><rect x="17.5853%" y="85" width="1.1318%" height="15" fill="rgb(250,228,42)"/><text x="17.8353%" y="95.50"></text></g><g><title>mir_promoted (3,166,842 samples, 1.75%)</title><rect x="16.9791%" y="133" width="1.7479%" height="15" fill="rgb(240,193,28)"/><text x="17.2291%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (343,352 samples, 0.19%)</title><rect x="18.7270%" y="133" width="0.1895%" height="15" fill="rgb(216,20,37)"/><text x="18.9770%" y="143.50"></text></g><g><title>type_op_normalize_ty (304,023 samples, 0.17%)</title><rect x="18.9390%" y="133" width="0.1678%" height="15" fill="rgb(206,188,39)"/><text x="19.1890%" y="143.50"></text></g><g><title>normalize_projection_ty (242,083 samples, 0.13%)</title><rect x="18.9732%" y="117" width="0.1336%" height="15" fill="rgb(217,207,13)"/><text x="19.2232%" y="127.50"></text></g><g><title>type_op_prove_predicate (585,203 samples, 0.32%)</title><rect x="19.1068%" y="133" width="0.3230%" height="15" fill="rgb(231,73,38)"/><text x="19.3568%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,289,882 samples, 5.13%)</title><rect x="14.3037%" y="165" width="5.1274%" height="15" fill="rgb(225,20,46)"/><text x="14.5537%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (9,242,511 samples, 5.10%)</title><rect x="14.3299%" y="149" width="5.1013%" height="15" fill="rgb(210,31,41)"/><text x="14.5799%" y="159.50">mir_bo..</text></g><g><title>codegen_fn_attrs (218,043 samples, 0.12%)</title><rect x="19.5982%" y="133" width="0.1203%" height="15" fill="rgb(221,200,47)"/><text x="19.8482%" y="143.50"></text></g><g><title>check_mod_attrs (334,683 samples, 0.18%)</title><rect x="19.5338%" y="149" width="0.1847%" height="15" fill="rgb(226,26,5)"/><text x="19.7838%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (298,414 samples, 0.16%)</title><rect x="19.7764%" y="149" width="0.1647%" height="15" fill="rgb(249,33,26)"/><text x="20.0264%" y="159.50"></text></g><g><title>misc_checking_1 (816,079 samples, 0.45%)</title><rect x="19.5154%" y="165" width="0.4504%" height="15" fill="rgb(235,183,28)"/><text x="19.7654%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (192,523 samples, 0.11%)</title><rect x="19.9666%" y="149" width="0.1063%" height="15" fill="rgb(221,5,38)"/><text x="20.2166%" y="159.50"></text></g><g><title>misc_checking_2 (333,494 samples, 0.18%)</title><rect x="19.9659%" y="165" width="0.1841%" height="15" fill="rgb(247,18,42)"/><text x="20.2159%" y="175.50"></text></g><g><title>death_checking (311,164 samples, 0.17%)</title><rect x="20.2216%" y="149" width="0.1717%" height="15" fill="rgb(241,131,45)"/><text x="20.4716%" y="159.50"></text></g><g><title>param_env (319,432 samples, 0.18%)</title><rect x="20.7320%" y="117" width="0.1763%" height="15" fill="rgb(249,31,29)"/><text x="20.9820%" y="127.50"></text></g><g><title>crate_lints (2,010,582 samples, 1.11%)</title><rect x="20.3941%" y="133" width="1.1097%" height="15" fill="rgb(225,111,53)"/><text x="20.6441%" y="143.50"></text></g><g><title>type_of (1,041,781 samples, 0.57%)</title><rect x="20.9288%" y="117" width="0.5750%" height="15" fill="rgb(238,160,17)"/><text x="21.1788%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (801,490 samples, 0.44%)</title><rect x="21.0615%" y="101" width="0.4424%" height="15" fill="rgb(214,148,48)"/><text x="21.3115%" y="111.50"></text></g><g><title>lint_checking (2,172,424 samples, 1.20%)</title><rect x="20.3933%" y="149" width="1.1990%" height="15" fill="rgb(232,36,49)"/><text x="20.6433%" y="159.50"></text></g><g><title>privacy_checking_modules (416,434 samples, 0.23%)</title><rect x="21.6720%" y="149" width="0.2298%" height="15" fill="rgb(209,103,24)"/><text x="21.9220%" y="159.50"></text></g><g><title>check_mod_privacy (411,024 samples, 0.23%)</title><rect x="21.6749%" y="133" width="0.2269%" height="15" fill="rgb(229,88,8)"/><text x="21.9249%" y="143.50"></text></g><g><title>misc_checking_3 (3,184,545 samples, 1.76%)</title><rect x="20.1499%" y="165" width="1.7577%" height="15" fill="rgb(213,181,19)"/><text x="20.3999%" y="175.50"></text></g><g><title>impl_parent (896,678 samples, 0.49%)</title><rect x="22.5964%" y="101" width="0.4949%" height="15" fill="rgb(254,191,54)"/><text x="22.8464%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (598,224 samples, 0.33%)</title><rect x="22.7611%" y="85" width="0.3302%" height="15" fill="rgb(241,83,37)"/><text x="23.0111%" y="95.50"></text></g><g><title>impl_trait_ref (2,887,791 samples, 1.59%)</title><rect x="23.0913%" y="101" width="1.5939%" height="15" fill="rgb(233,36,39)"/><text x="23.3413%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,584,339 samples, 1.43%)</title><rect x="23.2588%" y="85" width="1.4264%" height="15" fill="rgb(226,3,54)"/><text x="23.5088%" y="95.50"></text></g><g><title>coherent_trait (5,205,857 samples, 2.87%)</title><rect x="21.9388%" y="133" width="2.8733%" height="15" fill="rgb(245,192,40)"/><text x="22.1888%" y="143.50">co..</text></g><g><title>specialization_graph_of (5,196,027 samples, 2.87%)</title><rect x="21.9442%" y="117" width="2.8679%" height="15" fill="rgb(238,167,29)"/><text x="22.1942%" y="127.50">sp..</text></g><g><title>trait_impls_of (228,373 samples, 0.13%)</title><rect x="24.6860%" y="101" width="0.1260%" height="15" fill="rgb(232,182,51)"/><text x="24.9360%" y="111.50"></text></g><g><title>coherence_checking (5,254,258 samples, 2.90%)</title><rect x="21.9312%" y="149" width="2.9000%" height="15" fill="rgb(231,60,39)"/><text x="22.1812%" y="159.50">co..</text></g><g><title>dropck_outlives (288,914 samples, 0.16%)</title><rect x="29.0668%" y="101" width="0.1595%" height="15" fill="rgb(208,69,12)"/><text x="29.3168%" y="111.50"></text></g><g><title>adt_sized_constraint (212,672 samples, 0.12%)</title><rect x="29.4448%" y="69" width="0.1174%" height="15" fill="rgb(235,93,37)"/><text x="29.6948%" y="79.50"></text></g><g><title>adt_sized_constraint (301,203 samples, 0.17%)</title><rect x="29.4010%" y="85" width="0.1662%" height="15" fill="rgb(213,116,39)"/><text x="29.6510%" y="95.50"></text></g><g><title>evaluate_obligation (646,107 samples, 0.36%)</title><rect x="29.2263%" y="101" width="0.3566%" height="15" fill="rgb(222,207,29)"/><text x="29.4763%" y="111.50"></text></g><g><title>fn_sig (270,383 samples, 0.15%)</title><rect x="29.5869%" y="101" width="0.1492%" height="15" fill="rgb(206,96,30)"/><text x="29.8369%" y="111.50"></text></g><g><title>method_autoderef_steps (287,493 samples, 0.16%)</title><rect x="29.8069%" y="101" width="0.1587%" height="15" fill="rgb(218,138,4)"/><text x="30.0569%" y="111.50"></text></g><g><title>item_bodies_checking (9,507,164 samples, 5.25%)</title><rect x="24.8472%" y="149" width="5.2473%" height="15" fill="rgb(250,191,14)"/><text x="25.0972%" y="159.50">item_b..</text></g><g><title>typeck_item_bodies (9,504,634 samples, 5.25%)</title><rect x="24.8486%" y="133" width="5.2459%" height="15" fill="rgb(239,60,40)"/><text x="25.0986%" y="143.50">typeck..</text></g><g><title>typeck (9,468,113 samples, 5.23%)</title><rect x="24.8687%" y="117" width="5.2258%" height="15" fill="rgb(206,27,48)"/><text x="25.1187%" y="127.50">typeck</text></g><g><title>impl_trait_ref (215,532 samples, 0.12%)</title><rect x="30.6761%" y="69" width="0.1190%" height="15" fill="rgb(225,35,8)"/><text x="30.9261%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (194,482 samples, 0.11%)</title><rect x="30.6877%" y="53" width="0.1073%" height="15" fill="rgb(250,213,24)"/><text x="30.9377%" y="63.50"></text></g><g><title>adt_destructor (399,185 samples, 0.22%)</title><rect x="30.5944%" y="117" width="0.2203%" height="15" fill="rgb(247,123,22)"/><text x="30.8444%" y="127.50"></text></g><g><title>coherent_trait (394,754 samples, 0.22%)</title><rect x="30.5968%" y="101" width="0.2179%" height="15" fill="rgb(231,138,38)"/><text x="30.8468%" y="111.50"></text></g><g><title>specialization_graph_of (393,044 samples, 0.22%)</title><rect x="30.5978%" y="85" width="0.2169%" height="15" fill="rgb(231,145,46)"/><text x="30.8478%" y="95.50"></text></g><g><title>item_types_checking (1,329,944 samples, 0.73%)</title><rect x="30.0945%" y="149" width="0.7340%" height="15" fill="rgb(251,118,11)"/><text x="30.3445%" y="159.50"></text></g><g><title>check_mod_item_types (1,323,334 samples, 0.73%)</title><rect x="30.0982%" y="133" width="0.7304%" height="15" fill="rgb(217,147,25)"/><text x="30.3482%" y="143.50"></text></g><g><title>fn_sig (379,063 samples, 0.21%)</title><rect x="30.9383%" y="117" width="0.2092%" height="15" fill="rgb(247,81,37)"/><text x="31.1883%" y="127.50"></text></g><g><title>generics_of (197,155 samples, 0.11%)</title><rect x="31.1475%" y="117" width="0.1088%" height="15" fill="rgb(209,12,38)"/><text x="31.3975%" y="127.50"></text></g><g><title>explicit_predicates_of (317,582 samples, 0.18%)</title><rect x="31.3588%" y="85" width="0.1753%" height="15" fill="rgb(227,1,9)"/><text x="31.6088%" y="95.50"></text></g><g><title>predicates_of (558,923 samples, 0.31%)</title><rect x="31.3016%" y="117" width="0.3085%" height="15" fill="rgb(248,47,43)"/><text x="31.5516%" y="127.50"></text></g><g><title>predicates_defined_on (523,333 samples, 0.29%)</title><rect x="31.3213%" y="101" width="0.2888%" height="15" fill="rgb(221,10,30)"/><text x="31.5713%" y="111.50"></text></g><g><title>type_collecting (1,549,337 samples, 0.86%)</title><rect x="30.8300%" y="149" width="0.8551%" height="15" fill="rgb(210,229,1)"/><text x="31.0800%" y="159.50"></text></g><g><title>collect_mod_item_types (1,536,527 samples, 0.85%)</title><rect x="30.8370%" y="133" width="0.8481%" height="15" fill="rgb(222,148,37)"/><text x="31.0870%" y="143.50"></text></g><g><title>param_env (203,121 samples, 0.11%)</title><rect x="32.4000%" y="117" width="0.1121%" height="15" fill="rgb(234,67,33)"/><text x="32.6500%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,537,089 samples, 0.85%)</title><rect x="31.7496%" y="133" width="0.8484%" height="15" fill="rgb(247,98,35)"/><text x="31.9996%" y="143.50"></text></g><g><title>param_env (234,672 samples, 0.13%)</title><rect x="33.1275%" y="117" width="0.1295%" height="15" fill="rgb(247,138,52)"/><text x="33.3775%" y="127.50"></text></g><g><title>trait_impls_of (243,102 samples, 0.13%)</title><rect x="33.2853%" y="117" width="0.1342%" height="15" fill="rgb(213,79,30)"/><text x="33.5353%" y="127.50"></text></g><g><title>check_item_well_formed (1,560,377 samples, 0.86%)</title><rect x="32.5980%" y="133" width="0.8612%" height="15" fill="rgb(246,177,23)"/><text x="32.8480%" y="143.50"></text></g><g><title>object_safety_violations (462,785 samples, 0.26%)</title><rect x="33.7319%" y="117" width="0.2554%" height="15" fill="rgb(230,62,27)"/><text x="33.9819%" y="127.50"></text></g><g><title>analysis (35,897,744 samples, 19.81%)</title><rect x="14.2077%" y="181" width="19.8132%" height="15" fill="rgb(216,154,8)"/><text x="14.4577%" y="191.50">analysis</text></g><g><title>type_check_crate (21,947,091 samples, 12.11%)</title><rect x="21.9076%" y="165" width="12.1134%" height="15" fill="rgb(244,35,45)"/><text x="22.1576%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,230,187 samples, 2.33%)</title><rect x="31.6861%" y="149" width="2.3348%" height="15" fill="rgb(251,115,12)"/><text x="31.9361%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (1,017,720 samples, 0.56%)</title><rect x="33.4592%" y="133" width="0.5617%" height="15" fill="rgb(240,54,50)"/><text x="33.7092%" y="143.50"></text></g><g><title>is_freeze_raw (388,826 samples, 0.21%)</title><rect x="36.4418%" y="133" width="0.2146%" height="15" fill="rgb(233,84,52)"/><text x="36.6918%" y="143.50"></text></g><g><title>evaluate_obligation (354,254 samples, 0.20%)</title><rect x="36.4609%" y="117" width="0.1955%" height="15" fill="rgb(207,117,47)"/><text x="36.7109%" y="127.50"></text></g><g><title>param_env (326,034 samples, 0.18%)</title><rect x="36.7831%" y="133" width="0.1799%" height="15" fill="rgb(249,43,39)"/><text x="37.0331%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,496,998 samples, 0.83%)</title><rect x="36.1853%" y="149" width="0.8262%" height="15" fill="rgb(209,38,44)"/><text x="36.4353%" y="159.50"></text></g><g><title>layout_of (286,893 samples, 0.16%)</title><rect x="37.3213%" y="53" width="0.1583%" height="15" fill="rgb(236,212,23)"/><text x="37.5713%" y="63.50"></text></g><g><title>layout_of (365,334 samples, 0.20%)</title><rect x="37.2952%" y="69" width="0.2016%" height="15" fill="rgb(242,79,21)"/><text x="37.5452%" y="79.50"></text></g><g><title>layout_of (431,394 samples, 0.24%)</title><rect x="37.2705%" y="85" width="0.2381%" height="15" fill="rgb(211,96,35)"/><text x="37.5205%" y="95.50"></text></g><g><title>layout_of (516,036 samples, 0.28%)</title><rect x="37.2557%" y="101" width="0.2848%" height="15" fill="rgb(253,215,40)"/><text x="37.5057%" y="111.50"></text></g><g><title>layout_of (640,538 samples, 0.35%)</title><rect x="37.2016%" y="117" width="0.3535%" height="15" fill="rgb(211,81,21)"/><text x="37.4516%" y="127.50"></text></g><g><title>layout_of (844,310 samples, 0.47%)</title><rect x="37.0989%" y="133" width="0.4660%" height="15" fill="rgb(208,190,38)"/><text x="37.3489%" y="143.50"></text></g><g><title>layout_of (989,152 samples, 0.55%)</title><rect x="37.0499%" y="149" width="0.5459%" height="15" fill="rgb(235,213,38)"/><text x="37.2999%" y="159.50"></text></g><g><title>codegen_module (5,421,580 samples, 2.99%)</title><rect x="34.6559%" y="165" width="2.9924%" height="15" fill="rgb(237,122,38)"/><text x="34.9059%" y="175.50">cod..</text></g><g><title>metadata_decode_entry_optimized_mir (255,704 samples, 0.14%)</title><rect x="38.0992%" y="101" width="0.1411%" height="15" fill="rgb(244,218,35)"/><text x="38.3492%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (191,901 samples, 0.11%)</title><rect x="38.2403%" y="101" width="0.1059%" height="15" fill="rgb(240,68,47)"/><text x="38.4903%" y="111.50"></text></g><g><title>optimized_mir (967,911 samples, 0.53%)</title><rect x="37.9091%" y="117" width="0.5342%" height="15" fill="rgb(210,16,53)"/><text x="38.1591%" y="127.50"></text></g><g><title>resolve_instance (344,894 samples, 0.19%)</title><rect x="38.4433%" y="117" width="0.1904%" height="15" fill="rgb(235,124,12)"/><text x="38.6933%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,837,710 samples, 1.01%)</title><rect x="37.6611%" y="133" width="1.0143%" height="15" fill="rgb(224,169,11)"/><text x="37.9111%" y="143.50"></text></g><g><title>monomorphization_collector (1,868,341 samples, 1.03%)</title><rect x="37.6597%" y="149" width="1.0312%" height="15" fill="rgb(250,166,2)"/><text x="37.9097%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,129,674 samples, 1.18%)</title><rect x="37.6498%" y="165" width="1.1754%" height="15" fill="rgb(242,216,29)"/><text x="37.8998%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (243,323 samples, 0.13%)</title><rect x="38.6909%" y="149" width="0.1343%" height="15" fill="rgb(230,116,27)"/><text x="38.9409%" y="159.50"></text></g><g><title>codegen_crate (8,771,026 samples, 4.84%)</title><rect x="34.0243%" y="181" width="4.8410%" height="15" fill="rgb(228,99,48)"/><text x="34.2743%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (19,640,315 samples, 10.84%)</title><rect x="38.8654%" y="181" width="10.8402%" height="15" fill="rgb(253,11,6)"/><text x="39.1154%" y="191.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (14,981,155 samples, 8.27%)</title><rect x="41.4369%" y="165" width="8.2686%" height="15" fill="rgb(247,143,39)"/><text x="41.6869%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (12,531,268 samples, 6.92%)</title><rect x="50.8100%" y="165" width="6.9164%" height="15" fill="rgb(236,97,10)"/><text x="51.0600%" y="175.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (32,607,849 samples, 18.00%)</title><rect x="57.7265%" y="165" width="17.9974%" height="15" fill="rgb(233,208,19)"/><text x="57.9765%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (31,849,271 samples, 17.58%)</title><rect x="58.1452%" y="149" width="17.5787%" height="15" fill="rgb(216,164,2)"/><text x="58.3952%" y="159.50">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_thin_lto_import (795,208 samples, 0.44%)</title><rect x="75.7239%" y="165" width="0.4389%" height="15" fill="rgb(220,129,5)"/><text x="75.9739%" y="175.50"></text></g><g><title>codegen_module_perform_lto (48,047,189 samples, 26.52%)</title><rect x="49.7055%" y="181" width="26.5189%" height="15" fill="rgb(242,17,10)"/><text x="49.9555%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,453,176 samples, 0.80%)</title><rect x="81.7447%" y="133" width="0.8021%" height="15" fill="rgb(242,107,0)"/><text x="81.9947%" y="143.50"></text></g><g><title>metadata_register_crate (371,244 samples, 0.20%)</title><rect x="82.3418%" y="117" width="0.2049%" height="15" fill="rgb(251,28,31)"/><text x="82.5918%" y="127.50"></text></g><g><title>macro_expand_crate (11,273,954 samples, 6.22%)</title><rect x="76.4094%" y="165" width="6.2225%" height="15" fill="rgb(233,223,10)"/><text x="76.6594%" y="175.50">macro_ex..</text></g><g><title>expand_crate (11,263,984 samples, 6.22%)</title><rect x="76.4149%" y="149" width="6.2170%" height="15" fill="rgb(215,21,27)"/><text x="76.6649%" y="159.50">expand_c..</text></g><g><title>late_resolve_crate (1,037,152 samples, 0.57%)</title><rect x="82.7389%" y="149" width="0.5724%" height="15" fill="rgb(232,23,21)"/><text x="82.9889%" y="159.50"></text></g><g><title>configure_and_expand (12,912,372 samples, 7.13%)</title><rect x="76.2244%" y="181" width="7.1268%" height="15" fill="rgb(244,5,23)"/><text x="76.4744%" y="191.50">configure_..</text></g><g><title>resolve_crate (1,264,464 samples, 0.70%)</title><rect x="82.6533%" y="165" width="0.6979%" height="15" fill="rgb(226,81,46)"/><text x="82.9033%" y="175.50"></text></g><g><title>free_global_ctxt (4,200,936 samples, 2.32%)</title><rect x="83.5009%" y="181" width="2.3186%" height="15" fill="rgb(247,70,30)"/><text x="83.7509%" y="191.50">f..</text></g><g><title>layout_of (182,612 samples, 0.10%)</title><rect x="87.4058%" y="117" width="0.1008%" height="15" fill="rgb(212,68,19)"/><text x="87.6558%" y="127.50"></text></g><g><title>layout_of (255,532 samples, 0.14%)</title><rect x="87.3742%" y="133" width="0.1410%" height="15" fill="rgb(240,187,13)"/><text x="87.6242%" y="143.50"></text></g><g><title>layout_of (408,043 samples, 0.23%)</title><rect x="87.2970%" y="149" width="0.2252%" height="15" fill="rgb(223,113,26)"/><text x="87.5470%" y="159.50"></text></g><g><title>needs_drop_raw (226,171 samples, 0.12%)</title><rect x="88.1453%" y="133" width="0.1248%" height="15" fill="rgb(206,192,2)"/><text x="88.3953%" y="143.50"></text></g><g><title>is_copy_raw (200,271 samples, 0.11%)</title><rect x="88.1595%" y="117" width="0.1105%" height="15" fill="rgb(241,108,4)"/><text x="88.4095%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,369,137 samples, 0.76%)</title><rect x="87.5222%" y="149" width="0.7557%" height="15" fill="rgb(247,173,49)"/><text x="87.7722%" y="159.50"></text></g><g><title>optimized_mir (2,906,862 samples, 1.60%)</title><rect x="86.7105%" y="165" width="1.6044%" height="15" fill="rgb(224,114,35)"/><text x="86.9605%" y="175.50"></text></g><g><title>generate_crate_metadata (4,709,691 samples, 2.60%)</title><rect x="85.8195%" y="181" width="2.5994%" height="15" fill="rgb(245,159,27)"/><text x="86.0695%" y="191.50">ge..</text></g><g><title>hir_lowering (2,102,083 samples, 1.16%)</title><rect x="88.4189%" y="181" width="1.1602%" height="15" fill="rgb(245,172,44)"/><text x="88.6689%" y="191.50"></text></g><g><title>finish_ongoing_codegen (15,446,691 samples, 8.53%)</title><rect x="89.5899%" y="165" width="8.5256%" height="15" fill="rgb(236,23,11)"/><text x="89.8399%" y="175.50">finish_ongoi..</text></g><g><title>link_crate (1,015,721 samples, 0.56%)</title><rect x="98.1155%" y="165" width="0.5606%" height="15" fill="rgb(205,117,38)"/><text x="98.3655%" y="175.50"></text></g><g><title>link_binary (975,851 samples, 0.54%)</title><rect x="98.1375%" y="149" width="0.5386%" height="15" fill="rgb(237,72,25)"/><text x="98.3875%" y="159.50"></text></g><g><title>link_rlib (646,897 samples, 0.36%)</title><rect x="98.3190%" y="133" width="0.3570%" height="15" fill="rgb(244,70,9)"/><text x="98.5690%" y="143.50"></text></g><g><title>link (16,492,222 samples, 9.10%)</title><rect x="89.5792%" y="181" width="9.1026%" height="15" fill="rgb(217,125,39)"/><text x="89.8292%" y="191.50">link</text></g><g><title>parse_crate (195,443 samples, 0.11%)</title><rect x="98.6818%" y="181" width="0.1079%" height="15" fill="rgb(235,36,10)"/><text x="98.9318%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,573,557 samples, 0.87%)</title><rect x="98.8896%" y="181" width="0.8685%" height="15" fill="rgb(251,123,47)"/><text x="99.1396%" y="191.50"></text></g><g><title>all (181,180,973 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (181,180,973 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (353,274 samples, 0.19%)</title><rect x="99.8050%" y="181" width="0.1950%" height="15" fill="rgb(211,50,8)"/><text x="100.0550%" y="191.50"></text></g></svg></svg>