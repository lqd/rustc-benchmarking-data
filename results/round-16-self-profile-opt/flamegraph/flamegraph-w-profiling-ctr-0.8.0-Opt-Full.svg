<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,022,737 samples, 3.21%)</title><rect x="0.3580%" y="277" width="3.2086%" height="15" fill="rgb(227,0,7)"/><text x="0.6080%" y="287.50">LLV..</text></g><g><title>codegen_generate_lto_work (1,455,956 samples, 0.78%)</title><rect x="2.7910%" y="261" width="0.7757%" height="15" fill="rgb(217,0,24)"/><text x="3.0410%" y="271.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,442,876 samples, 0.77%)</title><rect x="2.7979%" y="245" width="0.7687%" height="15" fill="rgb(221,193,54)"/><text x="3.0479%" y="255.50"></text></g><g><title>implied_outlives_bounds (636,969 samples, 0.34%)</title><rect x="11.3709%" y="229" width="0.3393%" height="15" fill="rgb(248,212,6)"/><text x="11.6209%" y="239.50"></text></g><g><title>is_sized_raw (257,013 samples, 0.14%)</title><rect x="11.7553%" y="229" width="0.1369%" height="15" fill="rgb(208,68,35)"/><text x="12.0053%" y="239.50"></text></g><g><title>evaluate_obligation (197,803 samples, 0.11%)</title><rect x="11.7868%" y="213" width="0.1054%" height="15" fill="rgb(232,128,0)"/><text x="12.0368%" y="223.50"></text></g><g><title>param_env (623,017 samples, 0.33%)</title><rect x="12.8149%" y="197" width="0.3319%" height="15" fill="rgb(207,160,47)"/><text x="13.0649%" y="207.50"></text></g><g><title>item_attrs (759,019 samples, 0.40%)</title><rect x="13.5015%" y="165" width="0.4044%" height="15" fill="rgb(228,23,34)"/><text x="13.7515%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (745,239 samples, 0.40%)</title><rect x="13.5089%" y="149" width="0.3970%" height="15" fill="rgb(218,30,26)"/><text x="13.7589%" y="159.50"></text></g><g><title>codegen_fn_attrs (911,311 samples, 0.49%)</title><rect x="13.4344%" y="181" width="0.4855%" height="15" fill="rgb(220,122,19)"/><text x="13.6844%" y="191.50"></text></g><g><title>is_copy_raw (2,130,581 samples, 1.14%)</title><rect x="15.9638%" y="149" width="1.1351%" height="15" fill="rgb(250,228,42)"/><text x="16.2138%" y="159.50"></text></g><g><title>evaluate_obligation (1,843,828 samples, 0.98%)</title><rect x="16.1165%" y="133" width="0.9823%" height="15" fill="rgb(240,193,28)"/><text x="16.3665%" y="143.50"></text></g><g><title>needs_drop_raw (2,592,316 samples, 1.38%)</title><rect x="15.7782%" y="165" width="1.3811%" height="15" fill="rgb(216,20,37)"/><text x="16.0282%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (1,344,395 samples, 0.72%)</title><rect x="17.3236%" y="149" width="0.7162%" height="15" fill="rgb(206,188,39)"/><text x="17.5736%" y="159.50"></text></g><g><title>evaluate_obligation (388,597 samples, 0.21%)</title><rect x="17.8328%" y="133" width="0.2070%" height="15" fill="rgb(217,207,13)"/><text x="18.0828%" y="143.50"></text></g><g><title>specialization_graph_of (508,817 samples, 0.27%)</title><rect x="18.0867%" y="149" width="0.2711%" height="15" fill="rgb(231,73,38)"/><text x="18.3367%" y="159.50"></text></g><g><title>impl_trait_ref (232,883 samples, 0.12%)</title><rect x="18.2337%" y="133" width="0.1241%" height="15" fill="rgb(225,20,46)"/><text x="18.4837%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (196,972 samples, 0.10%)</title><rect x="18.2529%" y="117" width="0.1049%" height="15" fill="rgb(210,31,41)"/><text x="18.5029%" y="127.50"></text></g><g><title>resolve_instance (2,329,030 samples, 1.24%)</title><rect x="17.1593%" y="165" width="1.2408%" height="15" fill="rgb(221,200,47)"/><text x="17.4093%" y="175.50"></text></g><g><title>thir_body (1,203,326 samples, 0.64%)</title><rect x="18.4192%" y="165" width="0.6411%" height="15" fill="rgb(226,26,5)"/><text x="18.6692%" y="175.50"></text></g><g><title>mir_const (12,734,461 samples, 6.78%)</title><rect x="12.3279%" y="213" width="6.7844%" height="15" fill="rgb(249,33,26)"/><text x="12.5779%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (11,197,420 samples, 5.97%)</title><rect x="13.1468%" y="197" width="5.9655%" height="15" fill="rgb(235,183,28)"/><text x="13.3968%" y="207.50">unsafety..</text></g><g><title>mir_built (9,746,245 samples, 5.19%)</title><rect x="13.9199%" y="181" width="5.1924%" height="15" fill="rgb(221,5,38)"/><text x="14.1699%" y="191.50">mir_bu..</text></g><g><title>mir_promoted (13,731,772 samples, 7.32%)</title><rect x="11.8922%" y="229" width="7.3157%" height="15" fill="rgb(247,18,42)"/><text x="12.1422%" y="239.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (890,408 samples, 0.47%)</title><rect x="19.2079%" y="229" width="0.4744%" height="15" fill="rgb(241,131,45)"/><text x="19.4579%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (2,526,778 samples, 1.35%)</title><rect x="19.6823%" y="229" width="1.3462%" height="15" fill="rgb(249,31,29)"/><text x="19.9323%" y="239.50"></text></g><g><title>normalize_projection_ty (1,534,209 samples, 0.82%)</title><rect x="20.2111%" y="213" width="0.8174%" height="15" fill="rgb(225,111,53)"/><text x="20.4611%" y="223.50"></text></g><g><title>type_op_normalize_predicate (233,735 samples, 0.12%)</title><rect x="21.0284%" y="229" width="0.1245%" height="15" fill="rgb(238,160,17)"/><text x="21.2784%" y="239.50"></text></g><g><title>type_op_normalize_ty (732,308 samples, 0.39%)</title><rect x="21.1529%" y="229" width="0.3901%" height="15" fill="rgb(214,148,48)"/><text x="21.4029%" y="239.50"></text></g><g><title>normalize_projection_ty (372,254 samples, 0.20%)</title><rect x="21.3448%" y="213" width="0.1983%" height="15" fill="rgb(232,36,49)"/><text x="21.5948%" y="223.50"></text></g><g><title>type_op_prove_predicate (5,234,175 samples, 2.79%)</title><rect x="21.5431%" y="229" width="2.7885%" height="15" fill="rgb(209,103,24)"/><text x="21.7931%" y="239.50">ty..</text></g><g><title>evaluate_obligation (201,803 samples, 0.11%)</title><rect x="24.2241%" y="213" width="0.1075%" height="15" fill="rgb(229,88,8)"/><text x="24.4741%" y="223.50"></text></g><g><title>MIR_borrow_checking (38,688,878 samples, 20.61%)</title><rect x="3.7209%" y="261" width="20.6117%" height="15" fill="rgb(213,181,19)"/><text x="3.9709%" y="271.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (38,560,018 samples, 20.54%)</title><rect x="3.7896%" y="245" width="20.5431%" height="15" fill="rgb(254,191,54)"/><text x="4.0396%" y="255.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (333,883 samples, 0.18%)</title><rect x="24.6354%" y="229" width="0.1779%" height="15" fill="rgb(241,83,37)"/><text x="24.8854%" y="239.50"></text></g><g><title>check_mod_attrs (566,656 samples, 0.30%)</title><rect x="24.5114%" y="245" width="0.3019%" height="15" fill="rgb(233,36,39)"/><text x="24.7614%" y="255.50"></text></g><g><title>check_mod_unstable_api_usage (287,613 samples, 0.15%)</title><rect x="24.9175%" y="245" width="0.1532%" height="15" fill="rgb(226,3,54)"/><text x="25.1675%" y="255.50"></text></g><g><title>misc_checking_1 (1,123,063 samples, 0.60%)</title><rect x="24.4997%" y="261" width="0.5983%" height="15" fill="rgb(245,192,40)"/><text x="24.7497%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (503,475 samples, 0.27%)</title><rect x="25.0988%" y="245" width="0.2682%" height="15" fill="rgb(238,167,29)"/><text x="25.3488%" y="255.50"></text></g><g><title>check_mod_liveness (408,105 samples, 0.22%)</title><rect x="25.1496%" y="229" width="0.2174%" height="15" fill="rgb(232,182,51)"/><text x="25.3996%" y="239.50"></text></g><g><title>misc_checking_2 (1,106,272 samples, 0.59%)</title><rect x="25.0980%" y="261" width="0.5894%" height="15" fill="rgb(231,60,39)"/><text x="25.3480%" y="271.50"></text></g><g><title>match_checking (601,337 samples, 0.32%)</title><rect x="25.3670%" y="245" width="0.3204%" height="15" fill="rgb(208,69,12)"/><text x="25.6170%" y="255.50"></text></g><g><title>check_match (568,177 samples, 0.30%)</title><rect x="25.3847%" y="229" width="0.3027%" height="15" fill="rgb(235,93,37)"/><text x="25.6347%" y="239.50"></text></g><g><title>check_private_in_public (243,313 samples, 0.13%)</title><rect x="25.6916%" y="245" width="0.1296%" height="15" fill="rgb(213,116,39)"/><text x="25.9416%" y="255.50"></text></g><g><title>death_checking (420,824 samples, 0.22%)</title><rect x="25.8212%" y="245" width="0.2242%" height="15" fill="rgb(222,207,29)"/><text x="26.0712%" y="255.50"></text></g><g><title>eval_to_const_value_raw (230,533 samples, 0.12%)</title><rect x="26.4198%" y="85" width="0.1228%" height="15" fill="rgb(206,96,30)"/><text x="26.6698%" y="95.50"></text></g><g><title>eval_to_const_value_raw (229,313 samples, 0.12%)</title><rect x="26.4204%" y="69" width="0.1222%" height="15" fill="rgb(218,138,4)"/><text x="26.6704%" y="79.50"></text></g><g><title>eval_to_allocation_raw (226,223 samples, 0.12%)</title><rect x="26.4221%" y="53" width="0.1205%" height="15" fill="rgb(250,191,14)"/><text x="26.6721%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (194,993 samples, 0.10%)</title><rect x="26.4387%" y="37" width="0.1039%" height="15" fill="rgb(239,60,40)"/><text x="26.6887%" y="47.50"></text></g><g><title>eval_to_const_value_raw (316,904 samples, 0.17%)</title><rect x="26.4004%" y="149" width="0.1688%" height="15" fill="rgb(206,27,48)"/><text x="26.6504%" y="159.50"></text></g><g><title>eval_to_const_value_raw (315,744 samples, 0.17%)</title><rect x="26.4011%" y="133" width="0.1682%" height="15" fill="rgb(225,35,8)"/><text x="26.6511%" y="143.50"></text></g><g><title>eval_to_allocation_raw (314,954 samples, 0.17%)</title><rect x="26.4015%" y="117" width="0.1678%" height="15" fill="rgb(250,213,24)"/><text x="26.6515%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (286,913 samples, 0.15%)</title><rect x="26.4164%" y="101" width="0.1529%" height="15" fill="rgb(247,123,22)"/><text x="26.6664%" y="111.50"></text></g><g><title>eval_to_const_value_raw (574,207 samples, 0.31%)</title><rect x="26.3354%" y="213" width="0.3059%" height="15" fill="rgb(231,138,38)"/><text x="26.5854%" y="223.50"></text></g><g><title>eval_to_const_value_raw (569,847 samples, 0.30%)</title><rect x="26.3377%" y="197" width="0.3036%" height="15" fill="rgb(231,145,46)"/><text x="26.5877%" y="207.50"></text></g><g><title>eval_to_allocation_raw (564,807 samples, 0.30%)</title><rect x="26.3404%" y="181" width="0.3009%" height="15" fill="rgb(251,118,11)"/><text x="26.5904%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (456,725 samples, 0.24%)</title><rect x="26.3980%" y="165" width="0.2433%" height="15" fill="rgb(217,147,25)"/><text x="26.6480%" y="175.50"></text></g><g><title>param_env (344,284 samples, 0.18%)</title><rect x="26.6413%" y="213" width="0.1834%" height="15" fill="rgb(247,81,37)"/><text x="26.8913%" y="223.50"></text></g><g><title>crate_lints (1,877,480 samples, 1.00%)</title><rect x="26.0461%" y="229" width="1.0002%" height="15" fill="rgb(209,12,38)"/><text x="26.2961%" y="239.50"></text></g><g><title>type_of (400,895 samples, 0.21%)</title><rect x="26.8328%" y="213" width="0.2136%" height="15" fill="rgb(227,1,9)"/><text x="27.0828%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (308,923 samples, 0.16%)</title><rect x="26.8818%" y="197" width="0.1646%" height="15" fill="rgb(248,47,43)"/><text x="27.1318%" y="207.50"></text></g><g><title>lint_checking (2,345,906 samples, 1.25%)</title><rect x="26.0454%" y="245" width="1.2498%" height="15" fill="rgb(221,10,30)"/><text x="26.2954%" y="255.50"></text></g><g><title>module_lints (467,066 samples, 0.25%)</title><rect x="27.0464%" y="229" width="0.2488%" height="15" fill="rgb(210,229,1)"/><text x="27.2964%" y="239.50"></text></g><g><title>lint_mod (461,816 samples, 0.25%)</title><rect x="27.0492%" y="213" width="0.2460%" height="15" fill="rgb(222,148,37)"/><text x="27.2992%" y="223.50"></text></g><g><title>privacy_access_levels (295,343 samples, 0.16%)</title><rect x="27.2952%" y="245" width="0.1573%" height="15" fill="rgb(234,67,33)"/><text x="27.5452%" y="255.50"></text></g><g><title>privacy_checking_modules (1,082,132 samples, 0.58%)</title><rect x="27.4526%" y="245" width="0.5765%" height="15" fill="rgb(247,98,35)"/><text x="27.7026%" y="255.50"></text></g><g><title>check_mod_privacy (1,077,992 samples, 0.57%)</title><rect x="27.4548%" y="229" width="0.5743%" height="15" fill="rgb(247,138,52)"/><text x="27.7048%" y="239.50"></text></g><g><title>misc_checking_3 (4,410,699 samples, 2.35%)</title><rect x="25.6874%" y="261" width="2.3498%" height="15" fill="rgb(213,79,30)"/><text x="25.9374%" y="271.50">m..</text></g><g><title>impl_parent (544,449 samples, 0.29%)</title><rect x="28.7448%" y="197" width="0.2901%" height="15" fill="rgb(246,177,23)"/><text x="28.9948%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (310,855 samples, 0.17%)</title><rect x="28.8692%" y="181" width="0.1656%" height="15" fill="rgb(230,62,27)"/><text x="29.1192%" y="191.50"></text></g><g><title>impl_trait_ref (1,419,393 samples, 0.76%)</title><rect x="29.0348%" y="197" width="0.7562%" height="15" fill="rgb(216,154,8)"/><text x="29.2848%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,187,292 samples, 0.63%)</title><rect x="29.1585%" y="181" width="0.6325%" height="15" fill="rgb(244,35,45)"/><text x="29.4085%" y="191.50"></text></g><g><title>coherent_trait (3,417,547 samples, 1.82%)</title><rect x="28.0823%" y="229" width="1.8207%" height="15" fill="rgb(251,115,12)"/><text x="28.3323%" y="239.50">c..</text></g><g><title>specialization_graph_of (3,057,233 samples, 1.63%)</title><rect x="28.2743%" y="213" width="1.6288%" height="15" fill="rgb(240,54,50)"/><text x="28.5243%" y="223.50"></text></g><g><title>trait_impls_of (208,972 samples, 0.11%)</title><rect x="29.7917%" y="197" width="0.1113%" height="15" fill="rgb(233,84,52)"/><text x="30.0417%" y="207.50"></text></g><g><title>coherence_checking (3,470,118 samples, 1.85%)</title><rect x="28.0763%" y="245" width="1.8487%" height="15" fill="rgb(207,117,47)"/><text x="28.3263%" y="255.50">c..</text></g><g><title>associated_item (714,079 samples, 0.38%)</title><rect x="45.5253%" y="181" width="0.3804%" height="15" fill="rgb(249,43,39)"/><text x="45.7753%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (616,066 samples, 0.33%)</title><rect x="45.5775%" y="165" width="0.3282%" height="15" fill="rgb(209,38,44)"/><text x="45.8275%" y="175.50"></text></g><g><title>associated_items (901,271 samples, 0.48%)</title><rect x="45.4440%" y="197" width="0.4802%" height="15" fill="rgb(236,212,23)"/><text x="45.6940%" y="207.50"></text></g><g><title>dropck_outlives (1,072,271 samples, 0.57%)</title><rect x="45.9712%" y="197" width="0.5713%" height="15" fill="rgb(242,79,21)"/><text x="46.2212%" y="207.50"></text></g><g><title>normalize_projection_ty (409,044 samples, 0.22%)</title><rect x="46.3246%" y="181" width="0.2179%" height="15" fill="rgb(211,96,35)"/><text x="46.5746%" y="191.50"></text></g><g><title>eval_to_const_value_raw (654,637 samples, 0.35%)</title><rect x="46.5459%" y="197" width="0.3488%" height="15" fill="rgb(253,215,40)"/><text x="46.7959%" y="207.50"></text></g><g><title>eval_to_const_value_raw (623,677 samples, 0.33%)</title><rect x="46.5624%" y="181" width="0.3323%" height="15" fill="rgb(211,81,21)"/><text x="46.8124%" y="191.50"></text></g><g><title>eval_to_allocation_raw (589,127 samples, 0.31%)</title><rect x="46.5808%" y="165" width="0.3139%" height="15" fill="rgb(208,190,38)"/><text x="46.8308%" y="175.50"></text></g><g><title>trait_impls_of (258,955 samples, 0.14%)</title><rect x="49.3967%" y="181" width="0.1380%" height="15" fill="rgb(235,213,38)"/><text x="49.6467%" y="191.50"></text></g><g><title>evaluate_obligation (4,956,045 samples, 2.64%)</title><rect x="46.8947%" y="197" width="2.6404%" height="15" fill="rgb(237,122,38)"/><text x="47.1447%" y="207.50">ev..</text></g><g><title>fn_sig (278,854 samples, 0.15%)</title><rect x="49.5519%" y="197" width="0.1486%" height="15" fill="rgb(244,218,35)"/><text x="49.8019%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (259,044 samples, 0.14%)</title><rect x="49.5625%" y="181" width="0.1380%" height="15" fill="rgb(240,68,47)"/><text x="49.8125%" y="191.50"></text></g><g><title>impl_item_implementor_ids (228,232 samples, 0.12%)</title><rect x="49.7936%" y="197" width="0.1216%" height="15" fill="rgb(210,16,53)"/><text x="50.0436%" y="207.50"></text></g><g><title>associated_items (203,712 samples, 0.11%)</title><rect x="49.8067%" y="181" width="0.1085%" height="15" fill="rgb(235,124,12)"/><text x="50.0567%" y="191.50"></text></g><g><title>impl_trait_ref (216,313 samples, 0.12%)</title><rect x="49.9199%" y="197" width="0.1152%" height="15" fill="rgb(224,169,11)"/><text x="50.1699%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (195,873 samples, 0.10%)</title><rect x="49.9307%" y="181" width="0.1044%" height="15" fill="rgb(250,166,2)"/><text x="50.1807%" y="191.50"></text></g><g><title>item_attrs (309,991 samples, 0.17%)</title><rect x="50.0474%" y="197" width="0.1651%" height="15" fill="rgb(242,216,29)"/><text x="50.2974%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (302,881 samples, 0.16%)</title><rect x="50.0512%" y="181" width="0.1614%" height="15" fill="rgb(230,116,27)"/><text x="50.3012%" y="191.50"></text></g><g><title>method_autoderef_steps (574,307 samples, 0.31%)</title><rect x="50.2571%" y="197" width="0.3060%" height="15" fill="rgb(228,99,48)"/><text x="50.5071%" y="207.50"></text></g><g><title>evaluate_obligation (283,485 samples, 0.15%)</title><rect x="50.4121%" y="181" width="0.1510%" height="15" fill="rgb(253,11,6)"/><text x="50.6621%" y="191.50"></text></g><g><title>predicates_of (467,968 samples, 0.25%)</title><rect x="50.5902%" y="197" width="0.2493%" height="15" fill="rgb(247,143,39)"/><text x="50.8402%" y="207.50"></text></g><g><title>predicates_defined_on (324,798 samples, 0.17%)</title><rect x="50.6665%" y="181" width="0.1730%" height="15" fill="rgb(236,97,10)"/><text x="50.9165%" y="191.50"></text></g><g><title>associated_items (223,133 samples, 0.12%)</title><rect x="53.3576%" y="181" width="0.1189%" height="15" fill="rgb(233,208,19)"/><text x="53.6076%" y="191.50"></text></g><g><title>generics_of (217,484 samples, 0.12%)</title><rect x="54.1526%" y="165" width="0.1159%" height="15" fill="rgb(216,164,2)"/><text x="54.4026%" y="175.50"></text></g><g><title>impl_trait_ref (300,743 samples, 0.16%)</title><rect x="54.2803%" y="165" width="0.1602%" height="15" fill="rgb(220,129,5)"/><text x="54.5303%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (252,082 samples, 0.13%)</title><rect x="54.3062%" y="149" width="0.1343%" height="15" fill="rgb(242,17,10)"/><text x="54.5562%" y="159.50"></text></g><g><title>specializes (195,123 samples, 0.10%)</title><rect x="54.4883%" y="165" width="0.1040%" height="15" fill="rgb(242,107,0)"/><text x="54.7383%" y="175.50"></text></g><g><title>evaluate_obligation (2,077,652 samples, 1.11%)</title><rect x="53.5500%" y="181" width="1.1069%" height="15" fill="rgb(251,28,31)"/><text x="53.8000%" y="191.50"></text></g><g><title>is_copy_raw (214,793 samples, 0.11%)</title><rect x="54.7420%" y="181" width="0.1144%" height="15" fill="rgb(233,223,10)"/><text x="54.9920%" y="191.50"></text></g><g><title>lint_levels (205,932 samples, 0.11%)</title><rect x="54.8589%" y="181" width="0.1097%" height="15" fill="rgb(215,21,27)"/><text x="55.1089%" y="191.50"></text></g><g><title>method_autoderef_steps (333,032 samples, 0.18%)</title><rect x="54.9763%" y="181" width="0.1774%" height="15" fill="rgb(232,23,21)"/><text x="55.2263%" y="191.50"></text></g><g><title>typeck (8,069,069 samples, 4.30%)</title><rect x="50.9257%" y="197" width="4.2988%" height="15" fill="rgb(244,5,23)"/><text x="51.1757%" y="207.50">typeck</text></g><g><title>item_bodies_checking (47,504,495 samples, 25.31%)</title><rect x="29.9437%" y="245" width="25.3083%" height="15" fill="rgb(226,81,46)"/><text x="30.1937%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,502,015 samples, 25.31%)</title><rect x="29.9450%" y="229" width="25.3070%" height="15" fill="rgb(247,70,30)"/><text x="30.1950%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (47,420,495 samples, 25.26%)</title><rect x="29.9884%" y="213" width="25.2635%" height="15" fill="rgb(212,68,19)"/><text x="30.2384%" y="223.50">typeck</text></g><g><title>evaluate_obligation (4,156,008 samples, 2.21%)</title><rect x="57.3035%" y="213" width="2.2141%" height="15" fill="rgb(240,187,13)"/><text x="57.5535%" y="223.50">e..</text></g><g><title>predicates_of (436,294 samples, 0.23%)</title><rect x="59.2852%" y="197" width="0.2324%" height="15" fill="rgb(223,113,26)"/><text x="59.5352%" y="207.50"></text></g><g><title>evaluate_obligation (325,863 samples, 0.17%)</title><rect x="59.7410%" y="197" width="0.1736%" height="15" fill="rgb(206,192,2)"/><text x="59.9910%" y="207.50"></text></g><g><title>item_types_checking (8,790,017 samples, 4.68%)</title><rect x="55.2519%" y="245" width="4.6829%" height="15" fill="rgb(241,108,4)"/><text x="55.5019%" y="255.50">item_..</text></g><g><title>check_mod_item_types (8,784,277 samples, 4.68%)</title><rect x="55.2550%" y="229" width="4.6799%" height="15" fill="rgb(247,173,49)"/><text x="55.5050%" y="239.50">check..</text></g><g><title>typeck (603,556 samples, 0.32%)</title><rect x="59.6133%" y="213" width="0.3215%" height="15" fill="rgb(224,114,35)"/><text x="59.8633%" y="223.50"></text></g><g><title>fn_sig (417,936 samples, 0.22%)</title><rect x="60.0904%" y="213" width="0.2227%" height="15" fill="rgb(245,159,27)"/><text x="60.3404%" y="223.50"></text></g><g><title>generics_of (202,351 samples, 0.11%)</title><rect x="60.3130%" y="213" width="0.1078%" height="15" fill="rgb(245,172,44)"/><text x="60.5630%" y="223.50"></text></g><g><title>late_bound_vars_map (321,985 samples, 0.17%)</title><rect x="60.7124%" y="165" width="0.1715%" height="15" fill="rgb(236,23,11)"/><text x="60.9624%" y="175.50"></text></g><g><title>resolve_lifetimes (309,175 samples, 0.16%)</title><rect x="60.7192%" y="149" width="0.1647%" height="15" fill="rgb(205,117,38)"/><text x="60.9692%" y="159.50"></text></g><g><title>explicit_predicates_of (728,469 samples, 0.39%)</title><rect x="60.5695%" y="181" width="0.3881%" height="15" fill="rgb(237,72,25)"/><text x="60.8195%" y="191.50"></text></g><g><title>predicates_of (967,691 samples, 0.52%)</title><rect x="60.4937%" y="213" width="0.5155%" height="15" fill="rgb(244,70,9)"/><text x="60.7437%" y="223.50"></text></g><g><title>predicates_defined_on (913,941 samples, 0.49%)</title><rect x="60.5223%" y="197" width="0.4869%" height="15" fill="rgb(217,125,39)"/><text x="60.7723%" y="207.50"></text></g><g><title>type_collecting (2,205,555 samples, 1.18%)</title><rect x="59.9370%" y="245" width="1.1750%" height="15" fill="rgb(235,36,10)"/><text x="60.1870%" y="255.50"></text></g><g><title>collect_mod_item_types (2,196,775 samples, 1.17%)</title><rect x="59.9416%" y="229" width="1.1703%" height="15" fill="rgb(251,123,47)"/><text x="60.1916%" y="239.50"></text></g><g><title>type_of (192,882 samples, 0.10%)</title><rect x="61.0092%" y="213" width="0.1028%" height="15" fill="rgb(221,13,13)"/><text x="61.2592%" y="223.50"></text></g><g><title>evaluate_obligation (533,706 samples, 0.28%)</title><rect x="64.3332%" y="213" width="0.2843%" height="15" fill="rgb(238,131,9)"/><text x="64.5832%" y="223.50"></text></g><g><title>implied_outlives_bounds (947,159 samples, 0.50%)</title><rect x="64.6290%" y="213" width="0.5046%" height="15" fill="rgb(211,50,8)"/><text x="64.8790%" y="223.50"></text></g><g><title>param_env (1,239,964 samples, 0.66%)</title><rect x="65.1336%" y="213" width="0.6606%" height="15" fill="rgb(245,182,24)"/><text x="65.3836%" y="223.50"></text></g><g><title>check_impl_item_well_formed (8,977,391 samples, 4.78%)</title><rect x="61.2379%" y="229" width="4.7828%" height="15" fill="rgb(242,14,37)"/><text x="61.4879%" y="239.50">check_..</text></g><g><title>region_scope_tree (392,717 samples, 0.21%)</title><rect x="65.8114%" y="213" width="0.2092%" height="15" fill="rgb(246,228,12)"/><text x="66.0614%" y="223.50"></text></g><g><title>evaluate_obligation (432,551 samples, 0.23%)</title><rect x="66.9910%" y="213" width="0.2304%" height="15" fill="rgb(213,55,15)"/><text x="67.2410%" y="223.50"></text></g><g><title>param_env (684,629 samples, 0.36%)</title><rect x="67.3295%" y="213" width="0.3647%" height="15" fill="rgb(209,9,3)"/><text x="67.5795%" y="223.50"></text></g><g><title>check_item_well_formed (3,356,425 samples, 1.79%)</title><rect x="66.0206%" y="229" width="1.7882%" height="15" fill="rgb(230,59,30)"/><text x="66.2706%" y="239.50">c..</text></g><g><title>analysis (122,324,934 samples, 65.17%)</title><rect x="3.5666%" y="277" width="65.1693%" height="15" fill="rgb(209,121,21)"/><text x="3.8166%" y="287.50">analysis</text></g><g><title>type_check_crate (76,392,855 samples, 40.70%)</title><rect x="28.0372%" y="261" width="40.6987%" height="15" fill="rgb(220,109,13)"/><text x="28.2872%" y="271.50">type_check_crate</text></g><g><title>wf_checking (14,304,679 samples, 7.62%)</title><rect x="61.1150%" y="245" width="7.6209%" height="15" fill="rgb(232,18,1)"/><text x="61.3650%" y="255.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,740,249 samples, 0.93%)</title><rect x="67.8088%" y="229" width="0.9271%" height="15" fill="rgb(215,41,42)"/><text x="68.0588%" y="239.50"></text></g><g><title>codegen_crate (938,400 samples, 0.50%)</title><rect x="68.7415%" y="277" width="0.4999%" height="15" fill="rgb(224,123,36)"/><text x="68.9915%" y="287.50"></text></g><g><title>codegen_module_optimize (935,831 samples, 0.50%)</title><rect x="69.2415%" y="277" width="0.4986%" height="15" fill="rgb(240,125,3)"/><text x="69.4915%" y="287.50"></text></g><g><title>LLVM_module_optimize (458,615 samples, 0.24%)</title><rect x="69.4957%" y="261" width="0.2443%" height="15" fill="rgb(205,98,50)"/><text x="69.7457%" y="271.50"></text></g><g><title>LLVM_lto_optimize (261,323 samples, 0.14%)</title><rect x="69.9550%" y="261" width="0.1392%" height="15" fill="rgb(205,185,37)"/><text x="70.2050%" y="271.50"></text></g><g><title>LLVM_module_codegen (2,557,199 samples, 1.36%)</title><rect x="70.0942%" y="261" width="1.3624%" height="15" fill="rgb(238,207,15)"/><text x="70.3442%" y="271.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,522,979 samples, 1.34%)</title><rect x="70.1125%" y="245" width="1.3441%" height="15" fill="rgb(213,199,42)"/><text x="70.3625%" y="255.50"></text></g><g><title>codegen_module_perform_lto (3,259,176 samples, 1.74%)</title><rect x="69.7400%" y="277" width="1.7363%" height="15" fill="rgb(235,201,11)"/><text x="69.9900%" y="287.50"></text></g><g><title>AST_validation (281,674 samples, 0.15%)</title><rect x="71.5785%" y="261" width="0.1501%" height="15" fill="rgb(207,46,11)"/><text x="71.8285%" y="271.50"></text></g><g><title>metadata_load_macro (326,834 samples, 0.17%)</title><rect x="82.7838%" y="229" width="0.1741%" height="15" fill="rgb(241,35,35)"/><text x="83.0338%" y="239.50"></text></g><g><title>metadata_register_crate (833,590 samples, 0.44%)</title><rect x="82.9580%" y="229" width="0.4441%" height="15" fill="rgb(243,32,47)"/><text x="83.2080%" y="239.50"></text></g><g><title>metadata_register_crate (388,704 samples, 0.21%)</title><rect x="83.1950%" y="213" width="0.2071%" height="15" fill="rgb(247,202,23)"/><text x="83.4450%" y="223.50"></text></g><g><title>macro_expand_crate (21,978,933 samples, 11.71%)</title><rect x="71.8299%" y="261" width="11.7094%" height="15" fill="rgb(219,102,11)"/><text x="72.0799%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (21,936,453 samples, 11.69%)</title><rect x="71.8525%" y="245" width="11.6868%" height="15" fill="rgb(243,110,44)"/><text x="72.1025%" y="255.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (257,521 samples, 0.14%)</title><rect x="83.4021%" y="229" width="0.1372%" height="15" fill="rgb(222,74,54)"/><text x="83.6521%" y="239.50"></text></g><g><title>pre_AST_expansion_lint_checks (198,872 samples, 0.11%)</title><rect x="83.5416%" y="261" width="0.1060%" height="15" fill="rgb(216,99,12)"/><text x="83.7916%" y="271.50"></text></g><g><title>finalize_imports (189,932 samples, 0.10%)</title><rect x="83.6524%" y="245" width="0.1012%" height="15" fill="rgb(226,22,26)"/><text x="83.9024%" y="255.50"></text></g><g><title>finalize_macro_resolutions (218,322 samples, 0.12%)</title><rect x="83.7536%" y="245" width="0.1163%" height="15" fill="rgb(217,163,10)"/><text x="84.0036%" y="255.50"></text></g><g><title>late_resolve_crate (2,889,001 samples, 1.54%)</title><rect x="83.8699%" y="245" width="1.5391%" height="15" fill="rgb(213,25,53)"/><text x="84.1199%" y="255.50"></text></g><g><title>configure_and_expand (26,353,051 samples, 14.04%)</title><rect x="71.4764%" y="277" width="14.0397%" height="15" fill="rgb(252,105,26)"/><text x="71.7264%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (3,507,298 samples, 1.87%)</title><rect x="83.6476%" y="261" width="1.8685%" height="15" fill="rgb(220,39,43)"/><text x="83.8976%" y="271.50">r..</text></g><g><title>early_lint_checks (314,253 samples, 0.17%)</title><rect x="85.6146%" y="277" width="0.1674%" height="15" fill="rgb(229,68,48)"/><text x="85.8646%" y="287.50"></text></g><g><title>free_global_ctxt (2,465,518 samples, 1.31%)</title><rect x="85.7820%" y="277" width="1.3135%" height="15" fill="rgb(252,8,32)"/><text x="86.0320%" y="287.50"></text></g><g><title>is_sized_raw (499,707 samples, 0.27%)</title><rect x="90.5886%" y="229" width="0.2662%" height="15" fill="rgb(223,20,43)"/><text x="90.8386%" y="239.50"></text></g><g><title>evaluate_obligation (423,286 samples, 0.23%)</title><rect x="90.6293%" y="213" width="0.2255%" height="15" fill="rgb(229,81,49)"/><text x="90.8793%" y="223.50"></text></g><g><title>layout_of (1,582,687 samples, 0.84%)</title><rect x="90.2795%" y="245" width="0.8432%" height="15" fill="rgb(236,28,36)"/><text x="90.5295%" y="255.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (298,442 samples, 0.16%)</title><rect x="90.9636%" y="229" width="0.1590%" height="15" fill="rgb(249,185,26)"/><text x="91.2136%" y="239.50"></text></g><g><title>normalize_projection_ty (203,872 samples, 0.11%)</title><rect x="91.0140%" y="213" width="0.1086%" height="15" fill="rgb(249,174,33)"/><text x="91.2640%" y="223.50"></text></g><g><title>is_copy_raw (1,023,598 samples, 0.55%)</title><rect x="93.2787%" y="213" width="0.5453%" height="15" fill="rgb(233,201,37)"/><text x="93.5287%" y="223.50"></text></g><g><title>evaluate_obligation (884,307 samples, 0.47%)</title><rect x="93.3529%" y="197" width="0.4711%" height="15" fill="rgb(221,78,26)"/><text x="93.6029%" y="207.50"></text></g><g><title>needs_drop_raw (1,265,263 samples, 0.67%)</title><rect x="93.2329%" y="229" width="0.6741%" height="15" fill="rgb(250,127,30)"/><text x="93.4829%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,369,460 samples, 2.86%)</title><rect x="91.1226%" y="245" width="2.8606%" height="15" fill="rgb(230,49,44)"/><text x="91.3726%" y="255.50">mi..</text></g><g><title>optimized_mir (10,948,322 samples, 5.83%)</title><rect x="88.1992%" y="261" width="5.8328%" height="15" fill="rgb(229,67,23)"/><text x="88.4492%" y="271.50">optimiz..</text></g><g><title>generate_crate_metadata (13,099,905 samples, 6.98%)</title><rect x="87.0955%" y="277" width="6.9790%" height="15" fill="rgb(249,83,47)"/><text x="87.3455%" y="287.50">generate_..</text></g><g><title>hir_lowering (3,020,263 samples, 1.61%)</title><rect x="94.0746%" y="277" width="1.6091%" height="15" fill="rgb(215,43,3)"/><text x="94.3246%" y="287.50"></text></g><g><title>finish_ongoing_codegen (2,808,421 samples, 1.50%)</title><rect x="95.6899%" y="261" width="1.4962%" height="15" fill="rgb(238,154,13)"/><text x="95.9399%" y="271.50"></text></g><g><title>link_crate (949,071 samples, 0.51%)</title><rect x="97.1862%" y="261" width="0.5056%" height="15" fill="rgb(219,56,2)"/><text x="97.4362%" y="271.50"></text></g><g><title>link_binary (941,751 samples, 0.50%)</title><rect x="97.1901%" y="245" width="0.5017%" height="15" fill="rgb(233,0,4)"/><text x="97.4401%" y="255.50"></text></g><g><title>link_rlib (643,247 samples, 0.34%)</title><rect x="97.3491%" y="229" width="0.3427%" height="15" fill="rgb(235,30,7)"/><text x="97.5991%" y="239.50"></text></g><g><title>link (3,776,252 samples, 2.01%)</title><rect x="95.6837%" y="277" width="2.0118%" height="15" fill="rgb(250,79,13)"/><text x="95.9337%" y="287.50">l..</text></g><g><title>parse_crate (2,606,709 samples, 1.39%)</title><rect x="97.6955%" y="277" width="1.3887%" height="15" fill="rgb(211,146,34)"/><text x="97.9455%" y="287.50"></text></g><g><title>prepare_outputs (303,944 samples, 0.16%)</title><rect x="99.0879%" y="277" width="0.1619%" height="15" fill="rgb(228,22,38)"/><text x="99.3379%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (928,610 samples, 0.49%)</title><rect x="99.2498%" y="277" width="0.4947%" height="15" fill="rgb(235,168,5)"/><text x="99.4998%" y="287.50"></text></g><g><title>all (187,703,358 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (187,703,358 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (423,475 samples, 0.23%)</title><rect x="99.7744%" y="277" width="0.2256%" height="15" fill="rgb(223,4,10)"/><text x="100.0244%" y="287.50"></text></g></svg></svg>