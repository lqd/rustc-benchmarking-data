<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,429,138 samples, 19.13%)</title><rect x="1.4972%" y="229" width="19.1311%" height="15" fill="rgb(227,0,7)"/><text x="1.7472%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (116,341 samples, 0.50%)</title><rect x="20.1257%" y="213" width="0.5025%" height="15" fill="rgb(217,0,24)"/><text x="20.3757%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (103,891 samples, 0.45%)</title><rect x="20.1795%" y="197" width="0.4487%" height="15" fill="rgb(221,193,54)"/><text x="20.4295%" y="207.50"></text></g><g><title>implied_outlives_bounds (42,381 samples, 0.18%)</title><rect x="22.9532%" y="181" width="0.1831%" height="15" fill="rgb(248,212,6)"/><text x="23.2032%" y="191.50"></text></g><g><title>has_structural_eq_impls (99,181 samples, 0.43%)</title><rect x="23.7759%" y="149" width="0.4284%" height="15" fill="rgb(208,68,35)"/><text x="24.0259%" y="159.50"></text></g><g><title>evaluate_obligation (89,501 samples, 0.39%)</title><rect x="23.8177%" y="133" width="0.3866%" height="15" fill="rgb(232,128,0)"/><text x="24.0677%" y="143.50"></text></g><g><title>trait_impls_of (48,381 samples, 0.21%)</title><rect x="23.9953%" y="117" width="0.2090%" height="15" fill="rgb(207,160,47)"/><text x="24.2453%" y="127.50"></text></g><g><title>is_freeze_raw (29,491 samples, 0.13%)</title><rect x="24.2043%" y="149" width="0.1274%" height="15" fill="rgb(228,23,34)"/><text x="24.4543%" y="159.50"></text></g><g><title>evaluate_obligation (27,521 samples, 0.12%)</title><rect x="24.2128%" y="133" width="0.1189%" height="15" fill="rgb(218,30,26)"/><text x="24.4628%" y="143.50"></text></g><g><title>thir_body (68,731 samples, 0.30%)</title><rect x="25.0266%" y="101" width="0.2969%" height="15" fill="rgb(220,122,19)"/><text x="25.2766%" y="111.50"></text></g><g><title>lit_to_const (26,890 samples, 0.12%)</title><rect x="25.2073%" y="85" width="0.1161%" height="15" fill="rgb(250,228,42)"/><text x="25.4573%" y="95.50"></text></g><g><title>mir_const (234,242 samples, 1.01%)</title><rect x="24.3317%" y="149" width="1.0118%" height="15" fill="rgb(240,193,28)"/><text x="24.5817%" y="159.50"></text></g><g><title>unsafety_check_result (177,731 samples, 0.77%)</title><rect x="24.5758%" y="133" width="0.7677%" height="15" fill="rgb(216,20,37)"/><text x="24.8258%" y="143.50"></text></g><g><title>mir_built (141,981 samples, 0.61%)</title><rect x="24.7302%" y="117" width="0.6133%" height="15" fill="rgb(206,188,39)"/><text x="24.9802%" y="127.50"></text></g><g><title>needs_drop_raw (57,641 samples, 0.25%)</title><rect x="25.3435%" y="149" width="0.2490%" height="15" fill="rgb(217,207,13)"/><text x="25.5935%" y="159.50"></text></g><g><title>is_copy_raw (53,930 samples, 0.23%)</title><rect x="25.3595%" y="133" width="0.2329%" height="15" fill="rgb(231,73,38)"/><text x="25.6095%" y="143.50"></text></g><g><title>evaluate_obligation (49,190 samples, 0.21%)</title><rect x="25.3800%" y="117" width="0.2125%" height="15" fill="rgb(225,20,46)"/><text x="25.6300%" y="127.50"></text></g><g><title>trait_impls_of (36,590 samples, 0.16%)</title><rect x="25.4344%" y="101" width="0.1580%" height="15" fill="rgb(210,31,41)"/><text x="25.6844%" y="111.50"></text></g><g><title>MIR_borrow_checking (1,076,662 samples, 4.65%)</title><rect x="20.9436%" y="213" width="4.6505%" height="15" fill="rgb(221,200,47)"/><text x="21.1936%" y="223.50">MIR_b..</text></g><g><title>mir_borrowck (1,070,182 samples, 4.62%)</title><rect x="20.9716%" y="197" width="4.6225%" height="15" fill="rgb(226,26,5)"/><text x="21.2216%" y="207.50">mir_b..</text></g><g><title>mir_promoted (561,575 samples, 2.43%)</title><rect x="23.1685%" y="181" width="2.4257%" height="15" fill="rgb(249,33,26)"/><text x="23.4185%" y="191.50">mi..</text></g><g><title>mir_const_qualif (507,075 samples, 2.19%)</title><rect x="23.4039%" y="165" width="2.1902%" height="15" fill="rgb(235,183,28)"/><text x="23.6539%" y="175.50">m..</text></g><g><title>MIR_effect_checking (162,601 samples, 0.70%)</title><rect x="25.5941%" y="213" width="0.7023%" height="15" fill="rgb(221,5,38)"/><text x="25.8441%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (140,111 samples, 0.61%)</title><rect x="25.6913%" y="197" width="0.6052%" height="15" fill="rgb(247,18,42)"/><text x="25.9413%" y="207.50"></text></g><g><title>hir_module_items (68,301 samples, 0.30%)</title><rect x="26.2965%" y="213" width="0.2950%" height="15" fill="rgb(241,131,45)"/><text x="26.5465%" y="223.50"></text></g><g><title>check_mod_attrs (31,500 samples, 0.14%)</title><rect x="26.6792%" y="197" width="0.1361%" height="15" fill="rgb(249,31,29)"/><text x="26.9292%" y="207.50"></text></g><g><title>lookup_deprecation_entry (24,111 samples, 0.10%)</title><rect x="26.9917%" y="181" width="0.1041%" height="15" fill="rgb(225,111,53)"/><text x="27.2417%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (49,611 samples, 0.21%)</title><rect x="26.8875%" y="197" width="0.2143%" height="15" fill="rgb(238,160,17)"/><text x="27.1375%" y="207.50"></text></g><g><title>misc_checking_1 (143,042 samples, 0.62%)</title><rect x="26.5933%" y="213" width="0.6179%" height="15" fill="rgb(214,148,48)"/><text x="26.8433%" y="223.50"></text></g><g><title>misc_checking_2 (37,071 samples, 0.16%)</title><rect x="27.2111%" y="213" width="0.1601%" height="15" fill="rgb(232,36,49)"/><text x="27.4611%" y="223.50"></text></g><g><title>codegen_fn_attrs (50,540 samples, 0.22%)</title><rect x="27.6641%" y="181" width="0.2183%" height="15" fill="rgb(209,103,24)"/><text x="27.9141%" y="191.50"></text></g><g><title>supported_target_features (25,050 samples, 0.11%)</title><rect x="27.7742%" y="165" width="0.1082%" height="15" fill="rgb(229,88,8)"/><text x="28.0242%" y="175.50"></text></g><g><title>death_checking (119,071 samples, 0.51%)</title><rect x="27.4912%" y="197" width="0.5143%" height="15" fill="rgb(213,181,19)"/><text x="27.7412%" y="207.50"></text></g><g><title>lint_levels (25,831 samples, 0.11%)</title><rect x="27.8940%" y="181" width="0.1116%" height="15" fill="rgb(254,191,54)"/><text x="28.1440%" y="191.50"></text></g><g><title>layout_of (40,870 samples, 0.18%)</title><rect x="28.7894%" y="117" width="0.1765%" height="15" fill="rgb(241,83,37)"/><text x="29.0394%" y="127.50"></text></g><g><title>eval_to_const_value_raw (236,982 samples, 1.02%)</title><rect x="28.2141%" y="165" width="1.0236%" height="15" fill="rgb(233,36,39)"/><text x="28.4641%" y="175.50"></text></g><g><title>eval_to_const_value_raw (228,532 samples, 0.99%)</title><rect x="28.2506%" y="149" width="0.9871%" height="15" fill="rgb(226,3,54)"/><text x="28.5006%" y="159.50"></text></g><g><title>eval_to_allocation_raw (219,802 samples, 0.95%)</title><rect x="28.2883%" y="133" width="0.9494%" height="15" fill="rgb(245,192,40)"/><text x="28.5383%" y="143.50"></text></g><g><title>mir_for_ctfe (62,921 samples, 0.27%)</title><rect x="28.9659%" y="117" width="0.2718%" height="15" fill="rgb(238,167,29)"/><text x="29.2159%" y="127.50"></text></g><g><title>crate_lints (373,374 samples, 1.61%)</title><rect x="28.0121%" y="181" width="1.6127%" height="15" fill="rgb(232,182,51)"/><text x="28.2621%" y="191.50"></text></g><g><title>param_env (89,632 samples, 0.39%)</title><rect x="29.2377%" y="165" width="0.3872%" height="15" fill="rgb(231,60,39)"/><text x="29.4877%" y="175.50"></text></g><g><title>predicates_of (38,231 samples, 0.17%)</title><rect x="29.4597%" y="149" width="0.1651%" height="15" fill="rgb(208,69,12)"/><text x="29.7097%" y="159.50"></text></g><g><title>predicates_defined_on (28,911 samples, 0.12%)</title><rect x="29.5000%" y="133" width="0.1249%" height="15" fill="rgb(235,93,37)"/><text x="29.7500%" y="143.50"></text></g><g><title>lint_checking (398,855 samples, 1.72%)</title><rect x="28.0055%" y="197" width="1.7228%" height="15" fill="rgb(213,116,39)"/><text x="28.2555%" y="207.50"></text></g><g><title>module_lints (23,961 samples, 0.10%)</title><rect x="29.6248%" y="181" width="0.1035%" height="15" fill="rgb(222,207,29)"/><text x="29.8748%" y="191.50"></text></g><g><title>privacy_access_levels (26,471 samples, 0.11%)</title><rect x="29.7283%" y="197" width="0.1143%" height="15" fill="rgb(206,96,30)"/><text x="29.9783%" y="207.50"></text></g><g><title>misc_checking_3 (601,747 samples, 2.60%)</title><rect x="27.3713%" y="213" width="2.5992%" height="15" fill="rgb(218,138,4)"/><text x="27.6213%" y="223.50">mi..</text></g><g><title>coherence_checking (23,750 samples, 0.10%)</title><rect x="30.0388%" y="197" width="0.1026%" height="15" fill="rgb(250,191,14)"/><text x="30.2888%" y="207.50"></text></g><g><title>impl_trait_ref (33,050 samples, 0.14%)</title><rect x="31.8521%" y="53" width="0.1428%" height="15" fill="rgb(239,60,40)"/><text x="32.1021%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (31,420 samples, 0.14%)</title><rect x="31.8591%" y="37" width="0.1357%" height="15" fill="rgb(206,27,48)"/><text x="32.1091%" y="47.50"></text></g><g><title>adt_destructor (74,381 samples, 0.32%)</title><rect x="31.6994%" y="117" width="0.3213%" height="15" fill="rgb(225,35,8)"/><text x="31.9494%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (73,911 samples, 0.32%)</title><rect x="31.7014%" y="101" width="0.3192%" height="15" fill="rgb(250,213,24)"/><text x="31.9514%" y="111.50"></text></g><g><title>coherent_trait (67,770 samples, 0.29%)</title><rect x="31.7279%" y="85" width="0.2927%" height="15" fill="rgb(247,123,22)"/><text x="31.9779%" y="95.50"></text></g><g><title>specialization_graph_of (64,040 samples, 0.28%)</title><rect x="31.7440%" y="69" width="0.2766%" height="15" fill="rgb(231,138,38)"/><text x="31.9940%" y="79.50"></text></g><g><title>dropck_outlives (126,982 samples, 0.55%)</title><rect x="31.4762%" y="149" width="0.5485%" height="15" fill="rgb(231,145,46)"/><text x="31.7262%" y="159.50"></text></g><g><title>adt_dtorck_constraint (83,771 samples, 0.36%)</title><rect x="31.6629%" y="133" width="0.3618%" height="15" fill="rgb(251,118,11)"/><text x="31.9129%" y="143.50"></text></g><g><title>impl_trait_ref (27,941 samples, 0.12%)</title><rect x="32.0751%" y="149" width="0.1207%" height="15" fill="rgb(217,147,25)"/><text x="32.3251%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (26,881 samples, 0.12%)</title><rect x="32.0797%" y="133" width="0.1161%" height="15" fill="rgb(247,81,37)"/><text x="32.3297%" y="143.50"></text></g><g><title>item_types_checking (518,476 samples, 2.24%)</title><rect x="30.1807%" y="197" width="2.2395%" height="15" fill="rgb(209,12,38)"/><text x="30.4307%" y="207.50">i..</text></g><g><title>check_mod_item_types (516,206 samples, 2.23%)</title><rect x="30.1905%" y="181" width="2.2297%" height="15" fill="rgb(227,1,9)"/><text x="30.4405%" y="191.50">c..</text></g><g><title>typeck (510,216 samples, 2.20%)</title><rect x="30.2163%" y="165" width="2.2038%" height="15" fill="rgb(248,47,43)"/><text x="30.4663%" y="175.50">t..</text></g><g><title>predicates_of (34,321 samples, 0.15%)</title><rect x="32.7413%" y="165" width="0.1482%" height="15" fill="rgb(221,10,30)"/><text x="32.9913%" y="175.50"></text></g><g><title>predicates_defined_on (31,121 samples, 0.13%)</title><rect x="32.7551%" y="149" width="0.1344%" height="15" fill="rgb(210,229,1)"/><text x="33.0051%" y="159.50"></text></g><g><title>named_region_map (24,390 samples, 0.11%)</title><rect x="33.0673%" y="149" width="0.1053%" height="15" fill="rgb(222,148,37)"/><text x="33.3173%" y="159.50"></text></g><g><title>type_collecting (178,632 samples, 0.77%)</title><rect x="32.4246%" y="197" width="0.7716%" height="15" fill="rgb(234,67,33)"/><text x="32.6746%" y="207.50"></text></g><g><title>collect_mod_item_types (162,662 samples, 0.70%)</title><rect x="32.4936%" y="181" width="0.7026%" height="15" fill="rgb(247,98,35)"/><text x="32.7436%" y="191.50"></text></g><g><title>type_of (71,000 samples, 0.31%)</title><rect x="32.8895%" y="165" width="0.3067%" height="15" fill="rgb(247,138,52)"/><text x="33.1395%" y="175.50"></text></g><g><title>evaluate_obligation (74,711 samples, 0.32%)</title><rect x="34.1748%" y="165" width="0.3227%" height="15" fill="rgb(213,79,30)"/><text x="34.4248%" y="175.50"></text></g><g><title>get_lang_items (27,111 samples, 0.12%)</title><rect x="34.4975%" y="165" width="0.1171%" height="15" fill="rgb(246,177,23)"/><text x="34.7475%" y="175.50"></text></g><g><title>param_env (128,162 samples, 0.55%)</title><rect x="34.6146%" y="165" width="0.5536%" height="15" fill="rgb(230,62,27)"/><text x="34.8646%" y="175.50"></text></g><g><title>analysis (3,383,907 samples, 14.62%)</title><rect x="20.6283%" y="229" width="14.6164%" height="15" fill="rgb(216,154,8)"/><text x="20.8783%" y="239.50">analysis</text></g><g><title>type_check_crate (1,221,053 samples, 5.27%)</title><rect x="29.9704%" y="213" width="5.2742%" height="15" fill="rgb(244,35,45)"/><text x="30.2204%" y="223.50">type_c..</text></g><g><title>wf_checking (473,505 samples, 2.05%)</title><rect x="33.1994%" y="197" width="2.0452%" height="15" fill="rgb(251,115,12)"/><text x="33.4494%" y="207.50">w..</text></g><g><title>check_item_well_formed (452,714 samples, 1.96%)</title><rect x="33.2892%" y="181" width="1.9554%" height="15" fill="rgb(240,54,50)"/><text x="33.5392%" y="191.50">c..</text></g><g><title>codegen_module (222,543 samples, 0.96%)</title><rect x="36.9670%" y="213" width="0.9612%" height="15" fill="rgb(233,84,52)"/><text x="37.2170%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (55,881 samples, 0.24%)</title><rect x="37.9302%" y="213" width="0.2414%" height="15" fill="rgb(207,117,47)"/><text x="38.1802%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (25,760 samples, 0.11%)</title><rect x="38.0603%" y="197" width="0.1113%" height="15" fill="rgb(249,43,39)"/><text x="38.3103%" y="207.50"></text></g><g><title>codegen_crate (685,548 samples, 2.96%)</title><rect x="35.2706%" y="229" width="2.9611%" height="15" fill="rgb(209,38,44)"/><text x="35.5206%" y="239.50">cod..</text></g><g><title>codegen_module_optimize (1,437,446 samples, 6.21%)</title><rect x="38.2317%" y="229" width="6.2089%" height="15" fill="rgb(236,212,23)"/><text x="38.4817%" y="239.50">codegen_..</text></g><g><title>LLVM_module_optimize (434,995 samples, 1.88%)</title><rect x="42.5617%" y="213" width="1.8789%" height="15" fill="rgb(242,79,21)"/><text x="42.8117%" y="223.50">L..</text></g><g><title>LLVM_lto_optimize (178,482 samples, 0.77%)</title><rect x="45.7948%" y="213" width="0.7709%" height="15" fill="rgb(211,96,35)"/><text x="46.0448%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,063,203 samples, 8.91%)</title><rect x="46.5657%" y="213" width="8.9117%" height="15" fill="rgb(253,215,40)"/><text x="46.8157%" y="223.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (2,030,673 samples, 8.77%)</title><rect x="46.7062%" y="197" width="8.7712%" height="15" fill="rgb(211,81,21)"/><text x="46.9562%" y="207.50">LLVM_module_..</text></g><g><title>codegen_module_perform_lto (2,582,398 samples, 11.15%)</title><rect x="44.4406%" y="229" width="11.1543%" height="15" fill="rgb(208,190,38)"/><text x="44.6906%" y="239.50">codegen_module_p..</text></g><g><title>AST_validation (37,120 samples, 0.16%)</title><rect x="56.1300%" y="213" width="0.1603%" height="15" fill="rgb(235,213,38)"/><text x="56.3800%" y="223.50"></text></g><g><title>crate_injection (54,951 samples, 0.24%)</title><rect x="56.3165%" y="213" width="0.2374%" height="15" fill="rgb(237,122,38)"/><text x="56.5665%" y="223.50"></text></g><g><title>metadata_load_macro (57,241 samples, 0.25%)</title><rect x="71.0501%" y="181" width="0.2472%" height="15" fill="rgb(244,218,35)"/><text x="71.3001%" y="191.50"></text></g><g><title>metadata_register_crate (112,312 samples, 0.49%)</title><rect x="71.2974%" y="181" width="0.4851%" height="15" fill="rgb(240,68,47)"/><text x="71.5474%" y="191.50"></text></g><g><title>macro_expand_crate (3,539,779 samples, 15.29%)</title><rect x="56.5539%" y="213" width="15.2896%" height="15" fill="rgb(210,16,53)"/><text x="56.8039%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (3,526,479 samples, 15.23%)</title><rect x="56.6113%" y="197" width="15.2322%" height="15" fill="rgb(235,124,12)"/><text x="56.8613%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (63,171 samples, 0.27%)</title><rect x="71.8566%" y="213" width="0.2729%" height="15" fill="rgb(224,169,11)"/><text x="72.1066%" y="223.50"></text></g><g><title>finalize_imports (168,612 samples, 0.73%)</title><rect x="72.1451%" y="197" width="0.7283%" height="15" fill="rgb(250,166,2)"/><text x="72.3951%" y="207.50"></text></g><g><title>configure_and_expand (4,052,175 samples, 17.50%)</title><rect x="55.5949%" y="229" width="17.5029%" height="15" fill="rgb(242,216,29)"/><text x="55.8449%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (224,173 samples, 0.97%)</title><rect x="72.1295%" y="213" width="0.9683%" height="15" fill="rgb(230,116,27)"/><text x="72.3795%" y="223.50"></text></g><g><title>early_lint_checks (37,670 samples, 0.16%)</title><rect x="73.2040%" y="229" width="0.1627%" height="15" fill="rgb(228,99,48)"/><text x="73.4540%" y="239.50"></text></g><g><title>free_global_ctxt (932,100 samples, 4.03%)</title><rect x="73.3668%" y="229" width="4.0261%" height="15" fill="rgb(253,11,6)"/><text x="73.6168%" y="239.50">free..</text></g><g><title>crate_hash (61,580 samples, 0.27%)</title><rect x="78.3019%" y="213" width="0.2660%" height="15" fill="rgb(247,143,39)"/><text x="78.5519%" y="223.50"></text></g><g><title>exported_symbols (27,081 samples, 0.12%)</title><rect x="78.6108%" y="213" width="0.1170%" height="15" fill="rgb(236,97,10)"/><text x="78.8608%" y="223.50"></text></g><g><title>generate_crate_metadata (328,444 samples, 1.42%)</title><rect x="77.3928%" y="229" width="1.4187%" height="15" fill="rgb(233,208,19)"/><text x="77.6428%" y="239.50"></text></g><g><title>hir_lowering (182,132 samples, 0.79%)</title><rect x="78.8115%" y="229" width="0.7867%" height="15" fill="rgb(216,164,2)"/><text x="79.0615%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,215,835 samples, 13.89%)</title><rect x="79.6659%" y="213" width="13.8904%" height="15" fill="rgb(220,129,5)"/><text x="79.9159%" y="223.50">finish_ongoing_codegen</text></g><g><title>link_crate (481,855 samples, 2.08%)</title><rect x="93.5563%" y="213" width="2.0813%" height="15" fill="rgb(242,17,10)"/><text x="93.8063%" y="223.50">l..</text></g><g><title>link_binary (473,395 samples, 2.04%)</title><rect x="93.5928%" y="197" width="2.0448%" height="15" fill="rgb(242,107,0)"/><text x="93.8428%" y="207.50">l..</text></g><g><title>link_rlib (295,993 samples, 1.28%)</title><rect x="94.3591%" y="181" width="1.2785%" height="15" fill="rgb(251,28,31)"/><text x="94.6091%" y="191.50"></text></g><g><title>link (3,719,850 samples, 16.07%)</title><rect x="79.5982%" y="229" width="16.0674%" height="15" fill="rgb(233,223,10)"/><text x="79.8482%" y="239.50">link</text></g><g><title>parse_crate (210,033 samples, 0.91%)</title><rect x="95.6656%" y="229" width="0.9072%" height="15" fill="rgb(215,21,27)"/><text x="95.9156%" y="239.50"></text></g><g><title>prepare_outputs (160,182 samples, 0.69%)</title><rect x="96.5978%" y="229" width="0.6919%" height="15" fill="rgb(232,23,21)"/><text x="96.8478%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (301,433 samples, 1.30%)</title><rect x="97.2897%" y="229" width="1.3020%" height="15" fill="rgb(244,5,23)"/><text x="97.5397%" y="239.50"></text></g><g><title>setup_global_ctxt (81,400 samples, 0.35%)</title><rect x="98.6175%" y="229" width="0.3516%" height="15" fill="rgb(226,81,46)"/><text x="98.8675%" y="239.50"></text></g><g><title>all (23,151,504 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (23,151,504 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (238,662 samples, 1.03%)</title><rect x="98.9691%" y="229" width="1.0309%" height="15" fill="rgb(240,187,13)"/><text x="99.2191%" y="239.50"></text></g></svg></svg>