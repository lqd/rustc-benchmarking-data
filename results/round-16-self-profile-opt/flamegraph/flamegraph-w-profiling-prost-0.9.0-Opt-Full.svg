<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (144,149,893 samples, 10.18%)</title><rect x="0.0776%" y="181" width="10.1772%" height="15" fill="rgb(227,0,7)"/><text x="0.3276%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,585,278 samples, 0.11%)</title><rect x="10.1430%" y="165" width="0.1119%" height="15" fill="rgb(217,0,24)"/><text x="10.3930%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,542,128 samples, 0.11%)</title><rect x="10.1460%" y="149" width="0.1089%" height="15" fill="rgb(221,193,54)"/><text x="10.3960%" y="159.50"></text></g><g><title>is_copy_raw (2,303,853 samples, 0.16%)</title><rect x="16.2946%" y="53" width="0.1627%" height="15" fill="rgb(248,212,6)"/><text x="16.5446%" y="63.50"></text></g><g><title>evaluate_obligation (1,817,897 samples, 0.13%)</title><rect x="16.3289%" y="37" width="0.1283%" height="15" fill="rgb(208,68,35)"/><text x="16.5789%" y="47.50"></text></g><g><title>needs_drop_raw (3,398,453 samples, 0.24%)</title><rect x="16.2196%" y="69" width="0.2399%" height="15" fill="rgb(232,128,0)"/><text x="16.4696%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,278,783 samples, 0.16%)</title><rect x="16.5232%" y="53" width="0.1609%" height="15" fill="rgb(207,160,47)"/><text x="16.7732%" y="63.50"></text></g><g><title>specialization_graph_of (2,973,234 samples, 0.21%)</title><rect x="16.6994%" y="53" width="0.2099%" height="15" fill="rgb(228,23,34)"/><text x="16.9494%" y="63.50"></text></g><g><title>resolve_instance (6,577,779 samples, 0.46%)</title><rect x="16.4596%" y="69" width="0.4644%" height="15" fill="rgb(218,30,26)"/><text x="16.7096%" y="79.50"></text></g><g><title>thir_body (5,299,755 samples, 0.37%)</title><rect x="16.9333%" y="69" width="0.3742%" height="15" fill="rgb(220,122,19)"/><text x="17.1833%" y="79.50"></text></g><g><title>mir_const (37,507,096 samples, 2.65%)</title><rect x="14.6660%" y="117" width="2.6481%" height="15" fill="rgb(250,228,42)"/><text x="14.9160%" y="127.50">mi..</text></g><g><title>unsafety_check_result (32,946,515 samples, 2.33%)</title><rect x="14.9880%" y="101" width="2.3261%" height="15" fill="rgb(240,193,28)"/><text x="15.2380%" y="111.50">u..</text></g><g><title>mir_built (30,067,866 samples, 2.12%)</title><rect x="15.1912%" y="85" width="2.1228%" height="15" fill="rgb(216,20,37)"/><text x="15.4412%" y="95.50">m..</text></g><g><title>mir_promoted (41,589,702 samples, 2.94%)</title><rect x="14.3978%" y="133" width="2.9363%" height="15" fill="rgb(206,188,39)"/><text x="14.6478%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (3,556,904 samples, 0.25%)</title><rect x="17.3341%" y="133" width="0.2511%" height="15" fill="rgb(217,207,13)"/><text x="17.5841%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,019,487 samples, 0.14%)</title><rect x="17.5852%" y="133" width="0.1426%" height="15" fill="rgb(231,73,38)"/><text x="17.8352%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,989,336 samples, 0.14%)</title><rect x="17.7278%" y="133" width="0.1405%" height="15" fill="rgb(225,20,46)"/><text x="17.9778%" y="143.50"></text></g><g><title>type_op_prove_predicate (9,227,625 samples, 0.65%)</title><rect x="17.8697%" y="133" width="0.6515%" height="15" fill="rgb(210,31,41)"/><text x="18.1197%" y="143.50"></text></g><g><title>MIR_borrow_checking (116,096,143 samples, 8.20%)</title><rect x="10.3262%" y="165" width="8.1966%" height="15" fill="rgb(221,200,47)"/><text x="10.5762%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (115,465,606 samples, 8.15%)</title><rect x="10.3707%" y="149" width="8.1521%" height="15" fill="rgb(226,26,5)"/><text x="10.6207%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,615,619 samples, 0.11%)</title><rect x="18.5949%" y="149" width="0.1141%" height="15" fill="rgb(249,33,26)"/><text x="18.8449%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,639,500 samples, 0.12%)</title><rect x="18.7618%" y="149" width="0.1158%" height="15" fill="rgb(235,183,28)"/><text x="19.0118%" y="159.50"></text></g><g><title>misc_checking_1 (4,218,118 samples, 0.30%)</title><rect x="18.5907%" y="165" width="0.2978%" height="15" fill="rgb(221,5,38)"/><text x="18.8407%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,244,486 samples, 0.16%)</title><rect x="18.8886%" y="149" width="0.1585%" height="15" fill="rgb(247,18,42)"/><text x="19.1386%" y="159.50"></text></g><g><title>check_mod_liveness (1,842,201 samples, 0.13%)</title><rect x="18.9170%" y="133" width="0.1301%" height="15" fill="rgb(241,131,45)"/><text x="19.1670%" y="143.50"></text></g><g><title>misc_checking_2 (5,204,000 samples, 0.37%)</title><rect x="18.8885%" y="165" width="0.3674%" height="15" fill="rgb(249,31,29)"/><text x="19.1385%" y="175.50"></text></g><g><title>match_checking (2,957,844 samples, 0.21%)</title><rect x="19.0471%" y="149" width="0.2088%" height="15" fill="rgb(225,111,53)"/><text x="19.2971%" y="159.50"></text></g><g><title>check_match (2,794,052 samples, 0.20%)</title><rect x="19.0586%" y="133" width="0.1973%" height="15" fill="rgb(238,160,17)"/><text x="19.3086%" y="143.50"></text></g><g><title>crate_lints (3,927,635 samples, 0.28%)</title><rect x="19.3836%" y="133" width="0.2773%" height="15" fill="rgb(214,148,48)"/><text x="19.6336%" y="143.50"></text></g><g><title>lint_checking (5,828,717 samples, 0.41%)</title><rect x="19.3835%" y="149" width="0.4115%" height="15" fill="rgb(232,36,49)"/><text x="19.6335%" y="159.50"></text></g><g><title>module_lints (1,898,922 samples, 0.13%)</title><rect x="19.6609%" y="133" width="0.1341%" height="15" fill="rgb(209,103,24)"/><text x="19.9109%" y="143.50"></text></g><g><title>lint_mod (1,878,459 samples, 0.13%)</title><rect x="19.6624%" y="117" width="0.1326%" height="15" fill="rgb(229,88,8)"/><text x="19.9124%" y="127.50"></text></g><g><title>privacy_checking_modules (3,330,758 samples, 0.24%)</title><rect x="19.8705%" y="149" width="0.2352%" height="15" fill="rgb(213,181,19)"/><text x="20.1205%" y="159.50"></text></g><g><title>check_mod_privacy (3,314,908 samples, 0.23%)</title><rect x="19.8717%" y="133" width="0.2340%" height="15" fill="rgb(254,191,54)"/><text x="20.1217%" y="143.50"></text></g><g><title>misc_checking_3 (12,061,278 samples, 0.85%)</title><rect x="19.2559%" y="165" width="0.8515%" height="15" fill="rgb(241,83,37)"/><text x="19.5059%" y="175.50"></text></g><g><title>impl_parent (2,911,637 samples, 0.21%)</title><rect x="20.4936%" y="101" width="0.2056%" height="15" fill="rgb(233,36,39)"/><text x="20.7436%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,612,240 samples, 0.11%)</title><rect x="20.5854%" y="85" width="0.1138%" height="15" fill="rgb(226,3,54)"/><text x="20.8354%" y="95.50"></text></g><g><title>impl_trait_ref (5,611,374 samples, 0.40%)</title><rect x="20.6993%" y="101" width="0.3962%" height="15" fill="rgb(245,192,40)"/><text x="20.9493%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,480,512 samples, 0.32%)</title><rect x="20.7791%" y="85" width="0.3163%" height="15" fill="rgb(238,167,29)"/><text x="21.0291%" y="95.50"></text></g><g><title>coherent_trait (14,703,119 samples, 1.04%)</title><rect x="20.1271%" y="133" width="1.0381%" height="15" fill="rgb(232,182,51)"/><text x="20.3771%" y="143.50"></text></g><g><title>specialization_graph_of (14,259,744 samples, 1.01%)</title><rect x="20.1584%" y="117" width="1.0068%" height="15" fill="rgb(231,60,39)"/><text x="20.4084%" y="127.50"></text></g><g><title>coherence_checking (14,825,169 samples, 1.05%)</title><rect x="20.1248%" y="149" width="1.0467%" height="15" fill="rgb(208,69,12)"/><text x="20.3748%" y="159.50"></text></g><g><title>associated_items (1,516,640 samples, 0.11%)</title><rect x="26.4155%" y="101" width="0.1071%" height="15" fill="rgb(235,93,37)"/><text x="26.6655%" y="111.50"></text></g><g><title>specializes (2,337,990 samples, 0.17%)</title><rect x="27.6777%" y="85" width="0.1651%" height="15" fill="rgb(213,116,39)"/><text x="27.9277%" y="95.50"></text></g><g><title>evaluate_obligation (17,878,153 samples, 1.26%)</title><rect x="26.6309%" y="101" width="1.2622%" height="15" fill="rgb(222,207,29)"/><text x="26.8809%" y="111.50"></text></g><g><title>evaluate_obligation (3,731,347 samples, 0.26%)</title><rect x="31.2270%" y="85" width="0.2634%" height="15" fill="rgb(206,96,30)"/><text x="31.4770%" y="95.50"></text></g><g><title>typeck (49,049,440 samples, 3.46%)</title><rect x="28.2070%" y="101" width="3.4630%" height="15" fill="rgb(218,138,4)"/><text x="28.4570%" y="111.50">typ..</text></g><g><title>item_bodies_checking (148,778,666 samples, 10.50%)</title><rect x="21.1754%" y="149" width="10.5040%" height="15" fill="rgb(250,191,14)"/><text x="21.4254%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (148,774,706 samples, 10.50%)</title><rect x="21.1757%" y="133" width="10.5038%" height="15" fill="rgb(239,60,40)"/><text x="21.4257%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (148,386,353 samples, 10.48%)</title><rect x="21.2031%" y="117" width="10.4763%" height="15" fill="rgb(206,27,48)"/><text x="21.4531%" y="127.50">typeck</text></g><g><title>specializes (2,109,932 samples, 0.15%)</title><rect x="32.3127%" y="85" width="0.1490%" height="15" fill="rgb(225,35,8)"/><text x="32.5627%" y="95.50"></text></g><g><title>evaluate_obligation (7,443,555 samples, 0.53%)</title><rect x="31.9445%" y="101" width="0.5255%" height="15" fill="rgb(250,213,24)"/><text x="32.1945%" y="111.50"></text></g><g><title>item_types_checking (11,424,610 samples, 0.81%)</title><rect x="31.6794%" y="149" width="0.8066%" height="15" fill="rgb(247,123,22)"/><text x="31.9294%" y="159.50"></text></g><g><title>check_mod_item_types (11,409,609 samples, 0.81%)</title><rect x="31.6805%" y="133" width="0.8055%" height="15" fill="rgb(231,138,38)"/><text x="31.9305%" y="143.50"></text></g><g><title>typeck (8,866,761 samples, 0.63%)</title><rect x="31.8600%" y="117" width="0.6260%" height="15" fill="rgb(231,145,46)"/><text x="32.1100%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,998,652 samples, 0.14%)</title><rect x="32.5481%" y="117" width="0.1411%" height="15" fill="rgb(251,118,11)"/><text x="32.7981%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,982,882 samples, 0.14%)</title><rect x="32.5492%" y="101" width="0.1400%" height="15" fill="rgb(217,147,25)"/><text x="32.7992%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,968,062 samples, 0.14%)</title><rect x="32.5503%" y="85" width="0.1389%" height="15" fill="rgb(247,81,37)"/><text x="32.8003%" y="95.50"></text></g><g><title>named_region_map (1,611,129 samples, 0.11%)</title><rect x="32.7803%" y="101" width="0.1137%" height="15" fill="rgb(209,12,38)"/><text x="33.0303%" y="111.50"></text></g><g><title>resolve_lifetimes (1,484,418 samples, 0.10%)</title><rect x="32.7893%" y="85" width="0.1048%" height="15" fill="rgb(227,1,9)"/><text x="33.0393%" y="95.50"></text></g><g><title>generics_of (2,095,154 samples, 0.15%)</title><rect x="32.7485%" y="117" width="0.1479%" height="15" fill="rgb(248,47,43)"/><text x="32.9985%" y="127.50"></text></g><g><title>predicates_of (1,647,841 samples, 0.12%)</title><rect x="32.9159%" y="117" width="0.1163%" height="15" fill="rgb(221,10,30)"/><text x="33.1659%" y="127.50"></text></g><g><title>predicates_defined_on (1,508,638 samples, 0.11%)</title><rect x="32.9258%" y="101" width="0.1065%" height="15" fill="rgb(210,229,1)"/><text x="33.1758%" y="111.50"></text></g><g><title>type_collecting (8,006,581 samples, 0.57%)</title><rect x="32.4865%" y="149" width="0.5653%" height="15" fill="rgb(222,148,37)"/><text x="32.7365%" y="159.50"></text></g><g><title>collect_mod_item_types (7,979,120 samples, 0.56%)</title><rect x="32.4884%" y="133" width="0.5633%" height="15" fill="rgb(234,67,33)"/><text x="32.7384%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,432,681 samples, 0.38%)</title><rect x="33.1021%" y="133" width="0.3836%" height="15" fill="rgb(247,98,35)"/><text x="33.3521%" y="143.50"></text></g><g><title>region_scope_tree (1,421,423 samples, 0.10%)</title><rect x="34.1538%" y="117" width="0.1004%" height="15" fill="rgb(247,138,52)"/><text x="34.4038%" y="127.50"></text></g><g><title>check_item_well_formed (11,294,262 samples, 0.80%)</title><rect x="33.4857%" y="133" width="0.7974%" height="15" fill="rgb(213,79,30)"/><text x="33.7357%" y="143.50"></text></g><g><title>analysis (341,693,215 samples, 24.12%)</title><rect x="10.2549%" y="181" width="24.1242%" height="15" fill="rgb(246,177,23)"/><text x="10.5049%" y="191.50">analysis</text></g><g><title>type_check_crate (202,141,944 samples, 14.27%)</title><rect x="20.1075%" y="165" width="14.2716%" height="15" fill="rgb(230,62,27)"/><text x="20.3575%" y="175.50">type_check_crate</text></g><g><title>wf_checking (18,773,723 samples, 1.33%)</title><rect x="33.0536%" y="149" width="1.3255%" height="15" fill="rgb(216,154,8)"/><text x="33.3036%" y="159.50"></text></g><g><title>layout_of (1,604,799 samples, 0.11%)</title><rect x="36.5036%" y="133" width="0.1133%" height="15" fill="rgb(244,35,45)"/><text x="36.7536%" y="143.50"></text></g><g><title>param_env (2,357,515 samples, 0.17%)</title><rect x="36.6169%" y="133" width="0.1664%" height="15" fill="rgb(251,115,12)"/><text x="36.8669%" y="143.50"></text></g><g><title>fn_abi_of_instance (8,993,780 samples, 0.63%)</title><rect x="36.1633%" y="149" width="0.6350%" height="15" fill="rgb(240,54,50)"/><text x="36.4133%" y="159.50"></text></g><g><title>codegen_module (33,522,873 samples, 2.37%)</title><rect x="34.5494%" y="165" width="2.3668%" height="15" fill="rgb(233,84,52)"/><text x="34.7994%" y="175.50">co..</text></g><g><title>metadata_decode_entry_optimized_mir (1,567,105 samples, 0.11%)</title><rect x="37.2950%" y="101" width="0.1106%" height="15" fill="rgb(207,117,47)"/><text x="37.5450%" y="111.50"></text></g><g><title>optimized_mir (4,942,064 samples, 0.35%)</title><rect x="37.1649%" y="117" width="0.3489%" height="15" fill="rgb(249,43,39)"/><text x="37.4149%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,918,464 samples, 0.14%)</title><rect x="37.5594%" y="101" width="0.1354%" height="15" fill="rgb(209,38,44)"/><text x="37.8094%" y="111.50"></text></g><g><title>resolve_instance (4,037,283 samples, 0.29%)</title><rect x="37.5138%" y="117" width="0.2850%" height="15" fill="rgb(236,212,23)"/><text x="37.7638%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (14,127,041 samples, 1.00%)</title><rect x="36.9193%" y="133" width="0.9974%" height="15" fill="rgb(242,79,21)"/><text x="37.1693%" y="143.50"></text></g><g><title>monomorphization_collector (14,254,053 samples, 1.01%)</title><rect x="36.9192%" y="149" width="1.0064%" height="15" fill="rgb(211,96,35)"/><text x="37.1692%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (16,106,834 samples, 1.14%)</title><rect x="36.9168%" y="165" width="1.1372%" height="15" fill="rgb(253,215,40)"/><text x="37.1668%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,818,501 samples, 0.13%)</title><rect x="37.9255%" y="149" width="0.1284%" height="15" fill="rgb(211,81,21)"/><text x="38.1755%" y="159.50"></text></g><g><title>codegen_crate (52,110,644 samples, 3.68%)</title><rect x="34.3798%" y="181" width="3.6791%" height="15" fill="rgb(208,190,38)"/><text x="34.6298%" y="191.50">code..</text></g><g><title>codegen_module_optimize (294,215,791 samples, 20.77%)</title><rect x="38.0589%" y="181" width="20.7722%" height="15" fill="rgb(235,213,38)"/><text x="38.3089%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (270,949,005 samples, 19.13%)</title><rect x="39.7016%" y="165" width="19.1295%" height="15" fill="rgb(237,122,38)"/><text x="39.9516%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (131,127,551 samples, 9.26%)</title><rect x="59.7722%" y="165" width="9.2578%" height="15" fill="rgb(244,218,35)"/><text x="60.0222%" y="175.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (182,227,317 samples, 12.87%)</title><rect x="69.0300%" y="165" width="12.8656%" height="15" fill="rgb(240,68,47)"/><text x="69.2800%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (179,825,182 samples, 12.70%)</title><rect x="69.1996%" y="149" width="12.6960%" height="15" fill="rgb(210,16,53)"/><text x="69.4496%" y="159.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (16,350,106 samples, 1.15%)</title><rect x="81.8956%" y="165" width="1.1543%" height="15" fill="rgb(235,124,12)"/><text x="82.1456%" y="175.50"></text></g><g><title>codegen_module_perform_lto (343,998,044 samples, 24.29%)</title><rect x="58.8311%" y="181" width="24.2869%" height="15" fill="rgb(224,169,11)"/><text x="59.0811%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (8,631,938 samples, 0.61%)</title><rect x="86.0040%" y="133" width="0.6094%" height="15" fill="rgb(250,166,2)"/><text x="86.2540%" y="143.50"></text></g><g><title>macro_expand_crate (49,575,175 samples, 3.50%)</title><rect x="83.1792%" y="165" width="3.5001%" height="15" fill="rgb(242,216,29)"/><text x="83.4292%" y="175.50">mac..</text></g><g><title>expand_crate (49,561,305 samples, 3.50%)</title><rect x="83.1802%" y="149" width="3.4991%" height="15" fill="rgb(230,116,27)"/><text x="83.4302%" y="159.50">exp..</text></g><g><title>late_resolve_crate (5,157,609 samples, 0.36%)</title><rect x="86.7087%" y="149" width="0.3641%" height="15" fill="rgb(228,99,48)"/><text x="86.9587%" y="159.50"></text></g><g><title>configure_and_expand (56,392,653 samples, 3.98%)</title><rect x="83.1180%" y="181" width="3.9814%" height="15" fill="rgb(253,11,6)"/><text x="83.3680%" y="191.50">conf..</text></g><g><title>resolve_crate (5,859,527 samples, 0.41%)</title><rect x="86.6857%" y="165" width="0.4137%" height="15" fill="rgb(247,143,39)"/><text x="86.9357%" y="175.50"></text></g><g><title>free_global_ctxt (10,657,281 samples, 0.75%)</title><rect x="87.2380%" y="181" width="0.7524%" height="15" fill="rgb(236,97,10)"/><text x="87.4880%" y="191.50"></text></g><g><title>layout_of (2,741,846 samples, 0.19%)</title><rect x="89.6802%" y="149" width="0.1936%" height="15" fill="rgb(233,208,19)"/><text x="89.9302%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (19,368,445 samples, 1.37%)</title><rect x="89.8738%" y="149" width="1.3674%" height="15" fill="rgb(216,164,2)"/><text x="90.1238%" y="159.50"></text></g><g><title>optimized_mir (37,959,815 samples, 2.68%)</title><rect x="88.5790%" y="165" width="2.6800%" height="15" fill="rgb(220,129,5)"/><text x="88.8290%" y="175.50">op..</text></g><g><title>generate_crate_metadata (46,834,844 samples, 3.31%)</title><rect x="87.9904%" y="181" width="3.3066%" height="15" fill="rgb(242,17,10)"/><text x="88.2404%" y="191.50">gen..</text></g><g><title>hir_lowering (12,751,635 samples, 0.90%)</title><rect x="91.2970%" y="181" width="0.9003%" height="15" fill="rgb(242,107,0)"/><text x="91.5470%" y="191.50"></text></g><g><title>finish_ongoing_codegen (102,647,530 samples, 7.25%)</title><rect x="92.1987%" y="165" width="7.2471%" height="15" fill="rgb(251,28,31)"/><text x="92.4487%" y="175.50">finish_ong..</text></g><g><title>link_crate (2,533,589 samples, 0.18%)</title><rect x="99.4458%" y="165" width="0.1789%" height="15" fill="rgb(233,223,10)"/><text x="99.6958%" y="175.50"></text></g><g><title>link_binary (2,469,788 samples, 0.17%)</title><rect x="99.4503%" y="149" width="0.1744%" height="15" fill="rgb(215,21,27)"/><text x="99.7003%" y="159.50"></text></g><g><title>link_rlib (1,741,040 samples, 0.12%)</title><rect x="99.5017%" y="133" width="0.1229%" height="15" fill="rgb(232,23,21)"/><text x="99.7517%" y="143.50"></text></g><g><title>link (105,212,719 samples, 7.43%)</title><rect x="92.1973%" y="181" width="7.4282%" height="15" fill="rgb(244,5,23)"/><text x="92.4473%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,504,640 samples, 0.25%)</title><rect x="99.6998%" y="181" width="0.2474%" height="15" fill="rgb(226,81,46)"/><text x="99.9498%" y="191.50"></text></g><g><title>all (1,416,394,344 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,416,394,344 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>