<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,052,769 samples, 10.74%)</title><rect x="1.0600%" y="229" width="10.7435%" height="15" fill="rgb(227,0,7)"/><text x="1.3100%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (290,184 samples, 0.52%)</title><rect x="11.2884%" y="213" width="0.5151%" height="15" fill="rgb(217,0,24)"/><text x="11.5384%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (271,114 samples, 0.48%)</title><rect x="11.3222%" y="197" width="0.4812%" height="15" fill="rgb(221,193,54)"/><text x="11.5722%" y="207.50"></text></g><g><title>param_env (207,721 samples, 0.37%)</title><rect x="18.8328%" y="149" width="0.3687%" height="15" fill="rgb(248,212,6)"/><text x="19.0828%" y="159.50"></text></g><g><title>item_attrs (339,585 samples, 0.60%)</title><rect x="19.7070%" y="117" width="0.6028%" height="15" fill="rgb(208,68,35)"/><text x="19.9570%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (331,535 samples, 0.59%)</title><rect x="19.7213%" y="101" width="0.5885%" height="15" fill="rgb(232,128,0)"/><text x="19.9713%" y="111.50"></text></g><g><title>codegen_fn_attrs (436,505 samples, 0.77%)</title><rect x="19.5456%" y="133" width="0.7748%" height="15" fill="rgb(207,160,47)"/><text x="19.7956%" y="143.50"></text></g><g><title>is_copy_raw (247,373 samples, 0.44%)</title><rect x="21.9689%" y="117" width="0.4391%" height="15" fill="rgb(228,23,34)"/><text x="22.2189%" y="127.50"></text></g><g><title>evaluate_obligation (210,483 samples, 0.37%)</title><rect x="22.0343%" y="101" width="0.3736%" height="15" fill="rgb(218,30,26)"/><text x="22.2843%" y="111.50"></text></g><g><title>needs_drop_raw (62,461 samples, 0.11%)</title><rect x="22.4212%" y="117" width="0.1109%" height="15" fill="rgb(220,122,19)"/><text x="22.6712%" y="127.50"></text></g><g><title>resolve_instance (148,952 samples, 0.26%)</title><rect x="22.5321%" y="117" width="0.2644%" height="15" fill="rgb(250,228,42)"/><text x="22.7821%" y="127.50"></text></g><g><title>thir_body (349,317 samples, 0.62%)</title><rect x="22.8215%" y="117" width="0.6200%" height="15" fill="rgb(240,193,28)"/><text x="23.0715%" y="127.50"></text></g><g><title>mir_const (3,020,793 samples, 5.36%)</title><rect x="18.0944%" y="165" width="5.3618%" height="15" fill="rgb(216,20,37)"/><text x="18.3444%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (2,397,059 samples, 4.25%)</title><rect x="19.2015%" y="149" width="4.2547%" height="15" fill="rgb(206,188,39)"/><text x="19.4515%" y="159.50">unsaf..</text></g><g><title>mir_built (1,766,709 samples, 3.14%)</title><rect x="20.3204%" y="133" width="3.1358%" height="15" fill="rgb(217,207,13)"/><text x="20.5704%" y="143.50">mir..</text></g><g><title>mir_promoted (3,397,889 samples, 6.03%)</title><rect x="17.4700%" y="181" width="6.0311%" height="15" fill="rgb(231,73,38)"/><text x="17.7200%" y="191.50">mir_prom..</text></g><g><title>MIR_borrow_checking (6,671,886 samples, 11.84%)</title><rect x="12.0843%" y="213" width="11.8424%" height="15" fill="rgb(225,20,46)"/><text x="12.3343%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (6,612,506 samples, 11.74%)</title><rect x="12.1897%" y="197" width="11.7370%" height="15" fill="rgb(210,31,41)"/><text x="12.4397%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (199,861 samples, 0.35%)</title><rect x="23.5719%" y="181" width="0.3547%" height="15" fill="rgb(221,200,47)"/><text x="23.8219%" y="191.50"></text></g><g><title>MIR_effect_checking (110,621 samples, 0.20%)</title><rect x="23.9267%" y="213" width="0.1963%" height="15" fill="rgb(226,26,5)"/><text x="24.1767%" y="223.50"></text></g><g><title>lint_levels (68,181 samples, 0.12%)</title><rect x="24.0020%" y="197" width="0.1210%" height="15" fill="rgb(249,33,26)"/><text x="24.2520%" y="207.50"></text></g><g><title>hir_module_items (125,661 samples, 0.22%)</title><rect x="24.1230%" y="213" width="0.2230%" height="15" fill="rgb(235,183,28)"/><text x="24.3730%" y="223.50"></text></g><g><title>get_lang_items (73,831 samples, 0.13%)</title><rect x="24.7797%" y="165" width="0.1310%" height="15" fill="rgb(221,5,38)"/><text x="25.0297%" y="175.50"></text></g><g><title>should_inherit_track_caller (79,520 samples, 0.14%)</title><rect x="24.9108%" y="165" width="0.1411%" height="15" fill="rgb(247,18,42)"/><text x="25.1608%" y="175.50"></text></g><g><title>codegen_fn_attrs (281,973 samples, 0.50%)</title><rect x="24.6046%" y="181" width="0.5005%" height="15" fill="rgb(241,131,45)"/><text x="24.8546%" y="191.50"></text></g><g><title>check_mod_attrs (398,695 samples, 0.71%)</title><rect x="24.3978%" y="197" width="0.7077%" height="15" fill="rgb(249,31,29)"/><text x="24.6478%" y="207.50"></text></g><g><title>check_mod_const_bodies (57,641 samples, 0.10%)</title><rect x="25.1054%" y="197" width="0.1023%" height="15" fill="rgb(225,111,53)"/><text x="25.3554%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (107,221 samples, 0.19%)</title><rect x="25.2522%" y="197" width="0.1903%" height="15" fill="rgb(238,160,17)"/><text x="25.5022%" y="207.50"></text></g><g><title>misc_checking_1 (647,927 samples, 1.15%)</title><rect x="24.3474%" y="213" width="1.1500%" height="15" fill="rgb(214,148,48)"/><text x="24.5974%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (157,662 samples, 0.28%)</title><rect x="25.5016%" y="197" width="0.2798%" height="15" fill="rgb(232,36,49)"/><text x="25.7516%" y="207.50"></text></g><g><title>check_mod_liveness (128,652 samples, 0.23%)</title><rect x="25.5531%" y="181" width="0.2284%" height="15" fill="rgb(209,103,24)"/><text x="25.8031%" y="191.50"></text></g><g><title>misc_checking_2 (349,204 samples, 0.62%)</title><rect x="25.4974%" y="213" width="0.6198%" height="15" fill="rgb(229,88,8)"/><text x="25.7474%" y="223.50"></text></g><g><title>match_checking (189,202 samples, 0.34%)</title><rect x="25.7814%" y="197" width="0.3358%" height="15" fill="rgb(213,181,19)"/><text x="26.0314%" y="207.50"></text></g><g><title>check_match (173,302 samples, 0.31%)</title><rect x="25.8097%" y="181" width="0.3076%" height="15" fill="rgb(254,191,54)"/><text x="26.0597%" y="191.50"></text></g><g><title>check_private_in_public (72,271 samples, 0.13%)</title><rect x="26.1384%" y="197" width="0.1283%" height="15" fill="rgb(241,83,37)"/><text x="26.3884%" y="207.50"></text></g><g><title>death_checking (111,801 samples, 0.20%)</title><rect x="26.2666%" y="197" width="0.1984%" height="15" fill="rgb(233,36,39)"/><text x="26.5166%" y="207.50"></text></g><g><title>crate_lints (203,802 samples, 0.36%)</title><rect x="26.4700%" y="181" width="0.3617%" height="15" fill="rgb(226,3,54)"/><text x="26.7200%" y="191.50"></text></g><g><title>param_env (74,971 samples, 0.13%)</title><rect x="26.6986%" y="165" width="0.1331%" height="15" fill="rgb(245,192,40)"/><text x="26.9486%" y="175.50"></text></g><g><title>lint_checking (318,013 samples, 0.56%)</title><rect x="26.4651%" y="197" width="0.5645%" height="15" fill="rgb(238,167,29)"/><text x="26.7151%" y="207.50"></text></g><g><title>module_lints (111,461 samples, 0.20%)</title><rect x="26.8317%" y="181" width="0.1978%" height="15" fill="rgb(232,182,51)"/><text x="27.0817%" y="191.50"></text></g><g><title>lint_mod (107,621 samples, 0.19%)</title><rect x="26.8385%" y="165" width="0.1910%" height="15" fill="rgb(231,60,39)"/><text x="27.0885%" y="175.50"></text></g><g><title>privacy_access_levels (109,331 samples, 0.19%)</title><rect x="27.0296%" y="197" width="0.1941%" height="15" fill="rgb(208,69,12)"/><text x="27.2796%" y="207.50"></text></g><g><title>privacy_checking_modules (135,022 samples, 0.24%)</title><rect x="27.2236%" y="197" width="0.2397%" height="15" fill="rgb(235,93,37)"/><text x="27.4736%" y="207.50"></text></g><g><title>check_mod_privacy (132,912 samples, 0.24%)</title><rect x="27.2274%" y="181" width="0.2359%" height="15" fill="rgb(213,116,39)"/><text x="27.4774%" y="191.50"></text></g><g><title>misc_checking_3 (776,779 samples, 1.38%)</title><rect x="26.1173%" y="213" width="1.3788%" height="15" fill="rgb(222,207,29)"/><text x="26.3673%" y="223.50"></text></g><g><title>coherent_trait (86,481 samples, 0.15%)</title><rect x="27.5936%" y="181" width="0.1535%" height="15" fill="rgb(206,96,30)"/><text x="27.8436%" y="191.50"></text></g><g><title>specialization_graph_of (80,241 samples, 0.14%)</title><rect x="27.6047%" y="165" width="0.1424%" height="15" fill="rgb(218,138,4)"/><text x="27.8547%" y="175.50"></text></g><g><title>coherence_checking (138,862 samples, 0.25%)</title><rect x="27.5686%" y="197" width="0.2465%" height="15" fill="rgb(250,191,14)"/><text x="27.8186%" y="207.50"></text></g><g><title>associated_item (651,478 samples, 1.16%)</title><rect x="36.5579%" y="133" width="1.1564%" height="15" fill="rgb(239,60,40)"/><text x="36.8079%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (515,296 samples, 0.91%)</title><rect x="36.7997%" y="117" width="0.9146%" height="15" fill="rgb(206,27,48)"/><text x="37.0497%" y="127.50"></text></g><g><title>associated_items (890,051 samples, 1.58%)</title><rect x="36.1921%" y="149" width="1.5798%" height="15" fill="rgb(225,35,8)"/><text x="36.4421%" y="159.50"></text></g><g><title>impl_trait_ref (64,210 samples, 0.11%)</title><rect x="37.9824%" y="53" width="0.1140%" height="15" fill="rgb(250,213,24)"/><text x="38.2324%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (60,540 samples, 0.11%)</title><rect x="37.9889%" y="37" width="0.1075%" height="15" fill="rgb(247,123,22)"/><text x="38.2389%" y="47.50"></text></g><g><title>adt_destructor (135,352 samples, 0.24%)</title><rect x="37.8888%" y="117" width="0.2402%" height="15" fill="rgb(231,138,38)"/><text x="38.1388%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (133,792 samples, 0.24%)</title><rect x="37.8915%" y="101" width="0.2375%" height="15" fill="rgb(231,145,46)"/><text x="38.1415%" y="111.50"></text></g><g><title>coherent_trait (129,442 samples, 0.23%)</title><rect x="37.8993%" y="85" width="0.2298%" height="15" fill="rgb(251,118,11)"/><text x="38.1493%" y="95.50"></text></g><g><title>specialization_graph_of (126,222 samples, 0.22%)</title><rect x="37.9050%" y="69" width="0.2240%" height="15" fill="rgb(217,147,25)"/><text x="38.1550%" y="79.50"></text></g><g><title>dropck_outlives (166,102 samples, 0.29%)</title><rect x="37.8372%" y="149" width="0.2948%" height="15" fill="rgb(247,81,37)"/><text x="38.0872%" y="159.50"></text></g><g><title>adt_dtorck_constraint (144,032 samples, 0.26%)</title><rect x="37.8763%" y="133" width="0.2557%" height="15" fill="rgb(209,12,38)"/><text x="38.1263%" y="143.50"></text></g><g><title>generics_of (60,883 samples, 0.11%)</title><rect x="39.0629%" y="133" width="0.1081%" height="15" fill="rgb(227,1,9)"/><text x="39.3129%" y="143.50"></text></g><g><title>impl_item_implementor_ids (64,580 samples, 0.11%)</title><rect x="39.1709%" y="133" width="0.1146%" height="15" fill="rgb(248,47,43)"/><text x="39.4209%" y="143.50"></text></g><g><title>associated_items (57,180 samples, 0.10%)</title><rect x="39.1841%" y="117" width="0.1015%" height="15" fill="rgb(221,10,30)"/><text x="39.4341%" y="127.50"></text></g><g><title>impl_trait_ref (67,740 samples, 0.12%)</title><rect x="39.3090%" y="133" width="0.1202%" height="15" fill="rgb(210,229,1)"/><text x="39.5590%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (62,270 samples, 0.11%)</title><rect x="39.3187%" y="117" width="0.1105%" height="15" fill="rgb(222,148,37)"/><text x="39.5687%" y="127.50"></text></g><g><title>predicates_of (136,481 samples, 0.24%)</title><rect x="39.4610%" y="133" width="0.2422%" height="15" fill="rgb(234,67,33)"/><text x="39.7110%" y="143.50"></text></g><g><title>predicates_defined_on (81,250 samples, 0.14%)</title><rect x="39.5590%" y="117" width="0.1442%" height="15" fill="rgb(247,98,35)"/><text x="39.8090%" y="127.50"></text></g><g><title>specializes (227,693 samples, 0.40%)</title><rect x="39.7032%" y="133" width="0.4041%" height="15" fill="rgb(247,138,52)"/><text x="39.9532%" y="143.50"></text></g><g><title>param_env (176,722 samples, 0.31%)</title><rect x="39.7937%" y="117" width="0.3137%" height="15" fill="rgb(213,79,30)"/><text x="40.0437%" y="127.50"></text></g><g><title>def_span (111,541 samples, 0.20%)</title><rect x="39.9094%" y="101" width="0.1980%" height="15" fill="rgb(246,177,23)"/><text x="40.1594%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (105,661 samples, 0.19%)</title><rect x="39.9198%" y="85" width="0.1875%" height="15" fill="rgb(230,62,27)"/><text x="40.1698%" y="95.50"></text></g><g><title>trait_impls_of (251,873 samples, 0.45%)</title><rect x="40.1223%" y="133" width="0.4471%" height="15" fill="rgb(216,154,8)"/><text x="40.3723%" y="143.50"></text></g><g><title>implementations_of_trait (71,670 samples, 0.13%)</title><rect x="40.4422%" y="117" width="0.1272%" height="15" fill="rgb(244,35,45)"/><text x="40.6922%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (63,530 samples, 0.11%)</title><rect x="40.4566%" y="101" width="0.1128%" height="15" fill="rgb(251,115,12)"/><text x="40.7066%" y="111.50"></text></g><g><title>evaluate_obligation (1,384,787 samples, 2.46%)</title><rect x="38.1320%" y="149" width="2.4580%" height="15" fill="rgb(240,54,50)"/><text x="38.3820%" y="159.50">ev..</text></g><g><title>fn_sig (78,640 samples, 0.14%)</title><rect x="40.6275%" y="149" width="0.1396%" height="15" fill="rgb(233,84,52)"/><text x="40.8775%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (65,490 samples, 0.12%)</title><rect x="40.6508%" y="133" width="0.1162%" height="15" fill="rgb(207,117,47)"/><text x="40.9008%" y="143.50"></text></g><g><title>generics_of (67,011 samples, 0.12%)</title><rect x="40.7671%" y="149" width="0.1189%" height="15" fill="rgb(249,43,39)"/><text x="41.0171%" y="159.50"></text></g><g><title>item_attrs (273,354 samples, 0.49%)</title><rect x="41.0053%" y="149" width="0.4852%" height="15" fill="rgb(209,38,44)"/><text x="41.2553%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (271,264 samples, 0.48%)</title><rect x="41.0090%" y="133" width="0.4815%" height="15" fill="rgb(236,212,23)"/><text x="41.2590%" y="143.50"></text></g><g><title>method_autoderef_steps (128,840 samples, 0.23%)</title><rect x="41.5757%" y="149" width="0.2287%" height="15" fill="rgb(242,79,21)"/><text x="41.8257%" y="159.50"></text></g><g><title>evaluate_obligation (68,120 samples, 0.12%)</title><rect x="41.6835%" y="133" width="0.1209%" height="15" fill="rgb(211,96,35)"/><text x="41.9335%" y="143.50"></text></g><g><title>explicit_predicates_of (59,301 samples, 0.11%)</title><rect x="42.0855%" y="117" width="0.1053%" height="15" fill="rgb(253,215,40)"/><text x="42.3355%" y="127.50"></text></g><g><title>predicates_of (208,912 samples, 0.37%)</title><rect x="41.8742%" y="149" width="0.3708%" height="15" fill="rgb(211,81,21)"/><text x="42.1242%" y="159.50"></text></g><g><title>predicates_defined_on (140,831 samples, 0.25%)</title><rect x="41.9951%" y="133" width="0.2500%" height="15" fill="rgb(208,190,38)"/><text x="42.2451%" y="143.50"></text></g><g><title>item_bodies_checking (8,178,512 samples, 14.52%)</title><rect x="27.8514%" y="197" width="14.5166%" height="15" fill="rgb(235,213,38)"/><text x="28.1014%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,174,792 samples, 14.51%)</title><rect x="27.8580%" y="181" width="14.5100%" height="15" fill="rgb(237,122,38)"/><text x="28.1080%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (8,134,672 samples, 14.44%)</title><rect x="27.9292%" y="165" width="14.4388%" height="15" fill="rgb(244,218,35)"/><text x="28.1792%" y="175.50">typeck</text></g><g><title>item_types_checking (205,113 samples, 0.36%)</title><rect x="42.3680%" y="197" width="0.3641%" height="15" fill="rgb(240,68,47)"/><text x="42.6180%" y="207.50"></text></g><g><title>check_mod_item_types (201,833 samples, 0.36%)</title><rect x="42.3738%" y="181" width="0.3582%" height="15" fill="rgb(210,16,53)"/><text x="42.6238%" y="191.50"></text></g><g><title>fn_sig (237,532 samples, 0.42%)</title><rect x="42.9646%" y="165" width="0.4216%" height="15" fill="rgb(235,124,12)"/><text x="43.2146%" y="175.50"></text></g><g><title>late_bound_vars_map (144,972 samples, 0.26%)</title><rect x="43.1289%" y="149" width="0.2573%" height="15" fill="rgb(224,169,11)"/><text x="43.3789%" y="159.50"></text></g><g><title>resolve_lifetimes (121,562 samples, 0.22%)</title><rect x="43.1704%" y="133" width="0.2158%" height="15" fill="rgb(250,166,2)"/><text x="43.4204%" y="143.50"></text></g><g><title>generics_of (80,501 samples, 0.14%)</title><rect x="43.3862%" y="165" width="0.1429%" height="15" fill="rgb(242,216,29)"/><text x="43.6362%" y="175.50"></text></g><g><title>explicit_predicates_of (109,622 samples, 0.19%)</title><rect x="43.6366%" y="133" width="0.1946%" height="15" fill="rgb(230,116,27)"/><text x="43.8866%" y="143.50"></text></g><g><title>predicates_of (173,892 samples, 0.31%)</title><rect x="43.5408%" y="165" width="0.3087%" height="15" fill="rgb(228,99,48)"/><text x="43.7908%" y="175.50"></text></g><g><title>predicates_defined_on (153,632 samples, 0.27%)</title><rect x="43.5767%" y="149" width="0.2727%" height="15" fill="rgb(253,11,6)"/><text x="43.8267%" y="159.50"></text></g><g><title>super_predicates_of (72,421 samples, 0.13%)</title><rect x="43.8494%" y="165" width="0.1285%" height="15" fill="rgb(247,143,39)"/><text x="44.0994%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (60,251 samples, 0.11%)</title><rect x="43.8710%" y="149" width="0.1069%" height="15" fill="rgb(236,97,10)"/><text x="44.1210%" y="159.50"></text></g><g><title>type_collecting (787,959 samples, 1.40%)</title><rect x="42.7347%" y="197" width="1.3986%" height="15" fill="rgb(233,208,19)"/><text x="42.9847%" y="207.50"></text></g><g><title>collect_mod_item_types (778,369 samples, 1.38%)</title><rect x="42.7517%" y="181" width="1.3816%" height="15" fill="rgb(216,164,2)"/><text x="43.0017%" y="191.50"></text></g><g><title>type_of (85,481 samples, 0.15%)</title><rect x="43.9816%" y="165" width="0.1517%" height="15" fill="rgb(220,129,5)"/><text x="44.2316%" y="175.50"></text></g><g><title>param_env (80,801 samples, 0.14%)</title><rect x="44.7367%" y="165" width="0.1434%" height="15" fill="rgb(242,17,10)"/><text x="44.9867%" y="175.50"></text></g><g><title>check_impl_item_well_formed (375,914 samples, 0.67%)</title><rect x="44.2777%" y="181" width="0.6672%" height="15" fill="rgb(242,107,0)"/><text x="44.5277%" y="191.50"></text></g><g><title>implied_outlives_bounds (86,621 samples, 0.15%)</title><rect x="46.2245%" y="165" width="0.1537%" height="15" fill="rgb(251,28,31)"/><text x="46.4745%" y="175.50"></text></g><g><title>param_env (216,063 samples, 0.38%)</title><rect x="46.3804%" y="165" width="0.3835%" height="15" fill="rgb(233,223,10)"/><text x="46.6304%" y="175.50"></text></g><g><title>predicates_of (87,500 samples, 0.16%)</title><rect x="46.7639%" y="165" width="0.1553%" height="15" fill="rgb(215,21,27)"/><text x="47.0139%" y="175.50"></text></g><g><title>predicates_defined_on (57,130 samples, 0.10%)</title><rect x="46.8178%" y="149" width="0.1014%" height="15" fill="rgb(232,23,21)"/><text x="47.0678%" y="159.50"></text></g><g><title>check_item_well_formed (1,296,315 samples, 2.30%)</title><rect x="44.9449%" y="181" width="2.3009%" height="15" fill="rgb(244,5,23)"/><text x="45.1949%" y="191.50">c..</text></g><g><title>trait_impls_of (158,572 samples, 0.28%)</title><rect x="46.9644%" y="165" width="0.2815%" height="15" fill="rgb(226,81,46)"/><text x="47.2144%" y="175.50"></text></g><g><title>evaluate_obligation (136,561 samples, 0.24%)</title><rect x="48.4433%" y="165" width="0.2424%" height="15" fill="rgb(247,70,30)"/><text x="48.6933%" y="175.50"></text></g><g><title>param_env (153,910 samples, 0.27%)</title><rect x="48.7669%" y="165" width="0.2732%" height="15" fill="rgb(212,68,19)"/><text x="49.0169%" y="175.50"></text></g><g><title>analysis (21,048,969 samples, 37.36%)</title><rect x="11.8034%" y="229" width="37.3612%" height="15" fill="rgb(240,187,13)"/><text x="12.0534%" y="239.50">analysis</text></g><g><title>type_check_crate (12,207,899 samples, 21.67%)</title><rect x="27.4960%" y="213" width="21.6686%" height="15" fill="rgb(223,113,26)"/><text x="27.7460%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,831,442 samples, 5.03%)</title><rect x="44.1389%" y="197" width="5.0257%" height="15" fill="rgb(206,192,2)"/><text x="44.3889%" y="207.50">wf_che..</text></g><g><title>check_trait_item_well_formed (1,081,023 samples, 1.92%)</title><rect x="47.2459%" y="181" width="1.9188%" height="15" fill="rgb(241,108,4)"/><text x="47.4959%" y="191.50">c..</text></g><g><title>region_scope_tree (70,160 samples, 0.12%)</title><rect x="49.0401%" y="165" width="0.1245%" height="15" fill="rgb(247,173,49)"/><text x="49.2901%" y="175.50"></text></g><g><title>codegen_module (414,504 samples, 0.74%)</title><rect x="50.2510%" y="213" width="0.7357%" height="15" fill="rgb(224,114,35)"/><text x="50.5010%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (83,171 samples, 0.15%)</title><rect x="50.9883%" y="213" width="0.1476%" height="15" fill="rgb(245,159,27)"/><text x="51.2383%" y="223.50"></text></g><g><title>codegen_crate (1,130,853 samples, 2.01%)</title><rect x="49.1821%" y="229" width="2.0072%" height="15" fill="rgb(245,172,44)"/><text x="49.4321%" y="239.50">c..</text></g><g><title>codegen_module_optimize (1,859,511 samples, 3.30%)</title><rect x="51.1893%" y="229" width="3.3006%" height="15" fill="rgb(236,23,11)"/><text x="51.4393%" y="239.50">cod..</text></g><g><title>LLVM_module_optimize (497,216 samples, 0.88%)</title><rect x="53.6074%" y="213" width="0.8825%" height="15" fill="rgb(205,117,38)"/><text x="53.8574%" y="223.50"></text></g><g><title>LLVM_lto_optimize (336,863 samples, 0.60%)</title><rect x="55.2843%" y="213" width="0.5979%" height="15" fill="rgb(237,72,25)"/><text x="55.5343%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,743,240 samples, 4.87%)</title><rect x="55.8822%" y="213" width="4.8692%" height="15" fill="rgb(244,70,9)"/><text x="56.1322%" y="223.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,690,610 samples, 4.78%)</title><rect x="55.9756%" y="197" width="4.7757%" height="15" fill="rgb(217,125,39)"/><text x="56.2256%" y="207.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (3,565,401 samples, 6.33%)</title><rect x="54.4899%" y="229" width="6.3285%" height="15" fill="rgb(235,36,10)"/><text x="54.7399%" y="239.50">codegen_..</text></g><g><title>AST_validation (85,121 samples, 0.15%)</title><rect x="61.1545%" y="213" width="0.1511%" height="15" fill="rgb(251,123,47)"/><text x="61.4045%" y="223.50"></text></g><g><title>crate_injection (93,271 samples, 0.17%)</title><rect x="61.3468%" y="213" width="0.1656%" height="15" fill="rgb(221,13,13)"/><text x="61.5968%" y="223.50"></text></g><g><title>macro_expand_crate (6,286,752 samples, 11.16%)</title><rect x="61.5124%" y="213" width="11.1588%" height="15" fill="rgb(238,131,9)"/><text x="61.7624%" y="223.50">macro_expand_cra..</text></g><g><title>expand_crate (6,266,251 samples, 11.12%)</title><rect x="61.5488%" y="197" width="11.1224%" height="15" fill="rgb(211,50,8)"/><text x="61.7988%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (187,512 samples, 0.33%)</title><rect x="72.3383%" y="181" width="0.3328%" height="15" fill="rgb(245,182,24)"/><text x="72.5883%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (125,521 samples, 0.22%)</title><rect x="72.6775%" y="213" width="0.2228%" height="15" fill="rgb(242,14,37)"/><text x="72.9275%" y="223.50"></text></g><g><title>finalize_macro_resolutions (209,152 samples, 0.37%)</title><rect x="72.9518%" y="197" width="0.3712%" height="15" fill="rgb(246,228,12)"/><text x="73.2018%" y="207.50"></text></g><g><title>late_resolve_crate (510,026 samples, 0.91%)</title><rect x="73.3230%" y="197" width="0.9053%" height="15" fill="rgb(213,55,15)"/><text x="73.5730%" y="207.50"></text></g><g><title>configure_and_expand (7,605,456 samples, 13.50%)</title><rect x="60.8184%" y="229" width="13.4994%" height="15" fill="rgb(209,9,3)"/><text x="61.0684%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (798,619 samples, 1.42%)</title><rect x="72.9003%" y="213" width="1.4175%" height="15" fill="rgb(230,59,30)"/><text x="73.1503%" y="223.50"></text></g><g><title>drop_ast (70,830 samples, 0.13%)</title><rect x="74.3178%" y="229" width="0.1257%" height="15" fill="rgb(209,121,21)"/><text x="74.5678%" y="239.50"></text></g><g><title>early_lint_checks (143,632 samples, 0.25%)</title><rect x="74.4680%" y="229" width="0.2549%" height="15" fill="rgb(220,109,13)"/><text x="74.7180%" y="239.50"></text></g><g><title>free_global_ctxt (1,648,249 samples, 2.93%)</title><rect x="74.7229%" y="229" width="2.9256%" height="15" fill="rgb(232,18,1)"/><text x="74.9729%" y="239.50">fr..</text></g><g><title>crate_hash (130,261 samples, 0.23%)</title><rect x="79.1332%" y="213" width="0.2312%" height="15" fill="rgb(215,41,42)"/><text x="79.3832%" y="223.50"></text></g><g><title>exported_symbols (82,141 samples, 0.15%)</title><rect x="79.4121%" y="213" width="0.1458%" height="15" fill="rgb(224,123,36)"/><text x="79.6621%" y="223.50"></text></g><g><title>reachable_non_generics (58,381 samples, 0.10%)</title><rect x="79.4543%" y="197" width="0.1036%" height="15" fill="rgb(240,125,3)"/><text x="79.7043%" y="207.50"></text></g><g><title>layout_of (146,793 samples, 0.26%)</title><rect x="82.0651%" y="197" width="0.2606%" height="15" fill="rgb(205,98,50)"/><text x="82.3151%" y="207.50"></text></g><g><title>optimized_mir (2,599,474 samples, 4.61%)</title><rect x="79.6669%" y="213" width="4.6140%" height="15" fill="rgb(205,185,37)"/><text x="79.9169%" y="223.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,101,554 samples, 1.96%)</title><rect x="82.3257%" y="197" width="1.9552%" height="15" fill="rgb(238,207,15)"/><text x="82.5757%" y="207.50">m..</text></g><g><title>generate_crate_metadata (3,826,853 samples, 6.79%)</title><rect x="77.6485%" y="229" width="6.7925%" height="15" fill="rgb(213,199,42)"/><text x="77.8985%" y="239.50">generate_..</text></g><g><title>hir_lowering (901,560 samples, 1.60%)</title><rect x="84.4410%" y="229" width="1.6002%" height="15" fill="rgb(235,201,11)"/><text x="84.6910%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,836,893 samples, 6.81%)</title><rect x="86.0660%" y="213" width="6.8104%" height="15" fill="rgb(207,46,11)"/><text x="86.3160%" y="223.50">finish_on..</text></g><g><title>link_crate (570,116 samples, 1.01%)</title><rect x="92.8763%" y="213" width="1.0119%" height="15" fill="rgb(241,35,35)"/><text x="93.1263%" y="223.50"></text></g><g><title>link_binary (561,276 samples, 1.00%)</title><rect x="92.8920%" y="197" width="0.9962%" height="15" fill="rgb(243,32,47)"/><text x="93.1420%" y="207.50"></text></g><g><title>link_rlib (353,724 samples, 0.63%)</title><rect x="93.2604%" y="181" width="0.6278%" height="15" fill="rgb(247,202,23)"/><text x="93.5104%" y="191.50"></text></g><g><title>link (4,429,050 samples, 7.86%)</title><rect x="86.0413%" y="229" width="7.8614%" height="15" fill="rgb(219,102,11)"/><text x="86.2913%" y="239.50">link</text></g><g><title>parse_crate (1,805,051 samples, 3.20%)</title><rect x="93.9027%" y="229" width="3.2039%" height="15" fill="rgb(243,110,44)"/><text x="94.1527%" y="239.50">par..</text></g><g><title>prepare_outputs (303,903 samples, 0.54%)</title><rect x="97.1220%" y="229" width="0.5394%" height="15" fill="rgb(222,74,54)"/><text x="97.3720%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (655,218 samples, 1.16%)</title><rect x="97.6614%" y="229" width="1.1630%" height="15" fill="rgb(216,99,12)"/><text x="97.9114%" y="239.50"></text></g><g><title>setup_global_ctxt (107,941 samples, 0.19%)</title><rect x="98.8273%" y="229" width="0.1916%" height="15" fill="rgb(226,22,26)"/><text x="99.0773%" y="239.50"></text></g><g><title>all (56,339,081 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (56,339,081 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (552,727 samples, 0.98%)</title><rect x="99.0189%" y="229" width="0.9811%" height="15" fill="rgb(252,105,26)"/><text x="99.2689%" y="239.50"></text></g></svg></svg>