<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,989,703 samples, 4.12%)</title><rect x="0.5531%" y="197" width="4.1199%" height="15" fill="rgb(227,0,7)"/><text x="0.8031%" y="207.50">LLVM..</text></g><g><title>is_sized_raw (192,101 samples, 0.16%)</title><rect x="13.1068%" y="149" width="0.1586%" height="15" fill="rgb(217,0,24)"/><text x="13.3568%" y="159.50"></text></g><g><title>evaluate_obligation (146,741 samples, 0.12%)</title><rect x="13.1442%" y="133" width="0.1212%" height="15" fill="rgb(221,193,54)"/><text x="13.3942%" y="143.50"></text></g><g><title>codegen_fn_attrs (172,942 samples, 0.14%)</title><rect x="14.8844%" y="101" width="0.1428%" height="15" fill="rgb(248,212,6)"/><text x="15.1344%" y="111.50"></text></g><g><title>is_copy_raw (515,644 samples, 0.43%)</title><rect x="16.7233%" y="85" width="0.4258%" height="15" fill="rgb(208,68,35)"/><text x="16.9733%" y="95.50"></text></g><g><title>evaluate_obligation (439,364 samples, 0.36%)</title><rect x="16.7863%" y="69" width="0.3628%" height="15" fill="rgb(232,128,0)"/><text x="17.0363%" y="79.50"></text></g><g><title>adt_drop_tys (122,921 samples, 0.10%)</title><rect x="17.2111%" y="69" width="0.1015%" height="15" fill="rgb(207,160,47)"/><text x="17.4611%" y="79.50"></text></g><g><title>needs_drop_raw (472,444 samples, 0.39%)</title><rect x="17.1531%" y="85" width="0.3901%" height="15" fill="rgb(228,23,34)"/><text x="17.4031%" y="95.50"></text></g><g><title>is_copy_raw (279,242 samples, 0.23%)</title><rect x="17.3126%" y="69" width="0.2306%" height="15" fill="rgb(218,30,26)"/><text x="17.5626%" y="79.50"></text></g><g><title>evaluate_obligation (204,841 samples, 0.17%)</title><rect x="17.3740%" y="53" width="0.1691%" height="15" fill="rgb(220,122,19)"/><text x="17.6240%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (472,156 samples, 0.39%)</title><rect x="17.7625%" y="69" width="0.3899%" height="15" fill="rgb(250,228,42)"/><text x="18.0125%" y="79.50"></text></g><g><title>impl_parent (315,243 samples, 0.26%)</title><rect x="18.6561%" y="53" width="0.2603%" height="15" fill="rgb(240,193,28)"/><text x="18.9061%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (178,850 samples, 0.15%)</title><rect x="18.7688%" y="37" width="0.1477%" height="15" fill="rgb(216,20,37)"/><text x="19.0188%" y="47.50"></text></g><g><title>specialization_graph_of (1,563,455 samples, 1.29%)</title><rect x="18.2166%" y="69" width="1.2909%" height="15" fill="rgb(206,188,39)"/><text x="18.4666%" y="79.50"></text></g><g><title>impl_trait_ref (715,857 samples, 0.59%)</title><rect x="18.9164%" y="53" width="0.5911%" height="15" fill="rgb(217,207,13)"/><text x="19.1664%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (604,016 samples, 0.50%)</title><rect x="19.0088%" y="37" width="0.4987%" height="15" fill="rgb(231,73,38)"/><text x="19.2588%" y="47.50"></text></g><g><title>resolve_instance (2,439,756 samples, 2.01%)</title><rect x="17.5431%" y="85" width="2.0145%" height="15" fill="rgb(225,20,46)"/><text x="17.7931%" y="95.50">r..</text></g><g><title>thir_body (724,279 samples, 0.60%)</title><rect x="19.5871%" y="85" width="0.5980%" height="15" fill="rgb(210,31,41)"/><text x="19.8371%" y="95.50"></text></g><g><title>mir_const (7,819,522 samples, 6.46%)</title><rect x="13.8359%" y="133" width="6.4565%" height="15" fill="rgb(221,200,47)"/><text x="14.0859%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (6,947,692 samples, 5.74%)</title><rect x="14.5558%" y="117" width="5.7366%" height="15" fill="rgb(226,26,5)"/><text x="14.8058%" y="127.50">unsafet..</text></g><g><title>mir_built (6,376,814 samples, 5.27%)</title><rect x="15.0272%" y="101" width="5.2652%" height="15" fill="rgb(249,33,26)"/><text x="15.2772%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (8,560,767 samples, 7.07%)</title><rect x="13.2654%" y="149" width="7.0685%" height="15" fill="rgb(235,183,28)"/><text x="13.5154%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (790,672 samples, 0.65%)</title><rect x="20.3339%" y="149" width="0.6528%" height="15" fill="rgb(221,5,38)"/><text x="20.5839%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (789,975 samples, 0.65%)</title><rect x="20.9867%" y="149" width="0.6523%" height="15" fill="rgb(247,18,42)"/><text x="21.2367%" y="159.50"></text></g><g><title>normalize_projection_ty (341,832 samples, 0.28%)</title><rect x="21.3567%" y="133" width="0.2822%" height="15" fill="rgb(241,131,45)"/><text x="21.6067%" y="143.50"></text></g><g><title>type_op_normalize_predicate (316,445 samples, 0.26%)</title><rect x="21.6390%" y="149" width="0.2613%" height="15" fill="rgb(249,31,29)"/><text x="21.8890%" y="159.50"></text></g><g><title>normalize_projection_ty (143,162 samples, 0.12%)</title><rect x="21.7821%" y="133" width="0.1182%" height="15" fill="rgb(225,111,53)"/><text x="22.0321%" y="143.50"></text></g><g><title>type_op_normalize_ty (149,751 samples, 0.12%)</title><rect x="21.9003%" y="149" width="0.1236%" height="15" fill="rgb(238,160,17)"/><text x="22.1503%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,086,294 samples, 1.72%)</title><rect x="22.0239%" y="149" width="1.7226%" height="15" fill="rgb(214,148,48)"/><text x="22.2739%" y="159.50"></text></g><g><title>MIR_borrow_checking (22,705,772 samples, 18.75%)</title><rect x="5.0045%" y="181" width="18.7478%" height="15" fill="rgb(232,36,49)"/><text x="5.2545%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (22,573,201 samples, 18.64%)</title><rect x="5.1140%" y="165" width="18.6383%" height="15" fill="rgb(209,103,24)"/><text x="5.3640%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (278,322 samples, 0.23%)</title><rect x="23.7801%" y="181" width="0.2298%" height="15" fill="rgb(229,88,8)"/><text x="24.0301%" y="191.50"></text></g><g><title>get_lang_items (141,142 samples, 0.12%)</title><rect x="24.5638%" y="101" width="0.1165%" height="15" fill="rgb(213,181,19)"/><text x="24.8138%" y="111.50"></text></g><g><title>codegen_fn_attrs (220,303 samples, 0.18%)</title><rect x="24.5483%" y="117" width="0.1819%" height="15" fill="rgb(254,191,54)"/><text x="24.7983%" y="127.50"></text></g><g><title>codegen_fn_attrs (538,576 samples, 0.44%)</title><rect x="24.2971%" y="149" width="0.4447%" height="15" fill="rgb(241,83,37)"/><text x="24.5471%" y="159.50"></text></g><g><title>should_inherit_track_caller (438,475 samples, 0.36%)</title><rect x="24.3797%" y="133" width="0.3620%" height="15" fill="rgb(233,36,39)"/><text x="24.6297%" y="143.50"></text></g><g><title>check_mod_attrs (858,020 samples, 0.71%)</title><rect x="24.0336%" y="165" width="0.7085%" height="15" fill="rgb(226,3,54)"/><text x="24.2836%" y="175.50"></text></g><g><title>check_mod_const_bodies (166,572 samples, 0.14%)</title><rect x="24.7420%" y="165" width="0.1375%" height="15" fill="rgb(245,192,40)"/><text x="24.9920%" y="175.50"></text></g><g><title>lint_levels (169,562 samples, 0.14%)</title><rect x="25.1179%" y="149" width="0.1400%" height="15" fill="rgb(238,167,29)"/><text x="25.3679%" y="159.50"></text></g><g><title>lookup_deprecation_entry (167,442 samples, 0.14%)</title><rect x="25.2579%" y="149" width="0.1383%" height="15" fill="rgb(232,182,51)"/><text x="25.5079%" y="159.50"></text></g><g><title>stability_index (122,391 samples, 0.10%)</title><rect x="25.2951%" y="133" width="0.1011%" height="15" fill="rgb(231,60,39)"/><text x="25.5451%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (564,036 samples, 0.47%)</title><rect x="24.9625%" y="165" width="0.4657%" height="15" fill="rgb(208,69,12)"/><text x="25.2125%" y="175.50"></text></g><g><title>misc_checking_1 (1,787,889 samples, 1.48%)</title><rect x="24.0102%" y="181" width="1.4762%" height="15" fill="rgb(235,93,37)"/><text x="24.2602%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (574,176 samples, 0.47%)</title><rect x="25.4875%" y="165" width="0.4741%" height="15" fill="rgb(213,116,39)"/><text x="25.7375%" y="175.50"></text></g><g><title>check_mod_liveness (507,755 samples, 0.42%)</title><rect x="25.5423%" y="149" width="0.4192%" height="15" fill="rgb(222,207,29)"/><text x="25.7923%" y="159.50"></text></g><g><title>misc_checking_2 (926,530 samples, 0.77%)</title><rect x="25.4865%" y="181" width="0.7650%" height="15" fill="rgb(206,96,30)"/><text x="25.7365%" y="191.50"></text></g><g><title>match_checking (351,164 samples, 0.29%)</title><rect x="25.9615%" y="165" width="0.2900%" height="15" fill="rgb(218,138,4)"/><text x="26.2115%" y="175.50"></text></g><g><title>check_match (321,094 samples, 0.27%)</title><rect x="25.9864%" y="149" width="0.2651%" height="15" fill="rgb(250,191,14)"/><text x="26.2364%" y="159.50"></text></g><g><title>check_private_in_public (177,812 samples, 0.15%)</title><rect x="26.2575%" y="165" width="0.1468%" height="15" fill="rgb(239,60,40)"/><text x="26.5075%" y="175.50"></text></g><g><title>death_checking (265,843 samples, 0.22%)</title><rect x="26.4043%" y="165" width="0.2195%" height="15" fill="rgb(206,27,48)"/><text x="26.6543%" y="175.50"></text></g><g><title>param_env (226,051 samples, 0.19%)</title><rect x="26.9278%" y="133" width="0.1866%" height="15" fill="rgb(225,35,8)"/><text x="27.1778%" y="143.50"></text></g><g><title>crate_lints (1,037,041 samples, 0.86%)</title><rect x="26.6252%" y="149" width="0.8563%" height="15" fill="rgb(250,213,24)"/><text x="26.8752%" y="159.50"></text></g><g><title>type_of (365,234 samples, 0.30%)</title><rect x="27.1799%" y="133" width="0.3016%" height="15" fill="rgb(247,123,22)"/><text x="27.4299%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (284,612 samples, 0.23%)</title><rect x="27.2464%" y="117" width="0.2350%" height="15" fill="rgb(231,138,38)"/><text x="27.4964%" y="127.50"></text></g><g><title>lint_checking (1,263,173 samples, 1.04%)</title><rect x="26.6238%" y="165" width="1.0430%" height="15" fill="rgb(231,145,46)"/><text x="26.8738%" y="175.50"></text></g><g><title>module_lints (224,442 samples, 0.19%)</title><rect x="27.4814%" y="149" width="0.1853%" height="15" fill="rgb(251,118,11)"/><text x="27.7314%" y="159.50"></text></g><g><title>lint_mod (220,072 samples, 0.18%)</title><rect x="27.4850%" y="133" width="0.1817%" height="15" fill="rgb(217,147,25)"/><text x="27.7350%" y="143.50"></text></g><g><title>privacy_access_levels (239,673 samples, 0.20%)</title><rect x="27.6668%" y="165" width="0.1979%" height="15" fill="rgb(247,81,37)"/><text x="27.9168%" y="175.50"></text></g><g><title>privacy_checking_modules (547,546 samples, 0.45%)</title><rect x="27.8646%" y="165" width="0.4521%" height="15" fill="rgb(209,12,38)"/><text x="28.1146%" y="175.50"></text></g><g><title>check_mod_privacy (543,886 samples, 0.45%)</title><rect x="27.8677%" y="149" width="0.4491%" height="15" fill="rgb(227,1,9)"/><text x="28.1177%" y="159.50"></text></g><g><title>misc_checking_3 (2,515,537 samples, 2.08%)</title><rect x="26.2515%" y="181" width="2.0770%" height="15" fill="rgb(248,47,43)"/><text x="26.5015%" y="191.50">m..</text></g><g><title>impl_trait_ref (200,922 samples, 0.17%)</title><rect x="28.5617%" y="117" width="0.1659%" height="15" fill="rgb(221,10,30)"/><text x="28.8117%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (178,542 samples, 0.15%)</title><rect x="28.5802%" y="101" width="0.1474%" height="15" fill="rgb(210,229,1)"/><text x="28.8302%" y="111.50"></text></g><g><title>coherent_trait (435,895 samples, 0.36%)</title><rect x="28.3953%" y="149" width="0.3599%" height="15" fill="rgb(222,148,37)"/><text x="28.6453%" y="159.50"></text></g><g><title>specialization_graph_of (427,704 samples, 0.35%)</title><rect x="28.4021%" y="133" width="0.3531%" height="15" fill="rgb(234,67,33)"/><text x="28.6521%" y="143.50"></text></g><g><title>coherence_checking (491,325 samples, 0.41%)</title><rect x="28.3883%" y="165" width="0.4057%" height="15" fill="rgb(247,98,35)"/><text x="28.6383%" y="175.50"></text></g><g><title>associated_item (499,316 samples, 0.41%)</title><rect x="39.9068%" y="101" width="0.4123%" height="15" fill="rgb(247,138,52)"/><text x="40.1568%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (368,596 samples, 0.30%)</title><rect x="40.0147%" y="85" width="0.3043%" height="15" fill="rgb(213,79,30)"/><text x="40.2647%" y="95.50"></text></g><g><title>associated_items (721,936 samples, 0.60%)</title><rect x="39.7458%" y="117" width="0.5961%" height="15" fill="rgb(246,177,23)"/><text x="39.9958%" y="127.50"></text></g><g><title>dropck_outlives (209,570 samples, 0.17%)</title><rect x="40.3624%" y="117" width="0.1730%" height="15" fill="rgb(230,62,27)"/><text x="40.6124%" y="127.50"></text></g><g><title>generics_of (144,742 samples, 0.12%)</title><rect x="42.8615%" y="101" width="0.1195%" height="15" fill="rgb(216,154,8)"/><text x="43.1115%" y="111.50"></text></g><g><title>impl_trait_ref (207,841 samples, 0.17%)</title><rect x="43.0324%" y="101" width="0.1716%" height="15" fill="rgb(244,35,45)"/><text x="43.2824%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (174,431 samples, 0.14%)</title><rect x="43.0600%" y="85" width="0.1440%" height="15" fill="rgb(251,115,12)"/><text x="43.3100%" y="95.50"></text></g><g><title>predicates_of (187,933 samples, 0.16%)</title><rect x="43.2102%" y="101" width="0.1552%" height="15" fill="rgb(240,54,50)"/><text x="43.4602%" y="111.50"></text></g><g><title>specializes (344,062 samples, 0.28%)</title><rect x="43.3654%" y="101" width="0.2841%" height="15" fill="rgb(233,84,52)"/><text x="43.6154%" y="111.50"></text></g><g><title>param_env (229,220 samples, 0.19%)</title><rect x="43.4602%" y="85" width="0.1893%" height="15" fill="rgb(207,117,47)"/><text x="43.7102%" y="95.50"></text></g><g><title>trait_impls_of (126,082 samples, 0.10%)</title><rect x="43.6523%" y="101" width="0.1041%" height="15" fill="rgb(249,43,39)"/><text x="43.9023%" y="111.50"></text></g><g><title>evaluate_obligation (3,904,829 samples, 3.22%)</title><rect x="40.5354%" y="117" width="3.2242%" height="15" fill="rgb(209,38,44)"/><text x="40.7854%" y="127.50">eva..</text></g><g><title>impl_item_implementor_ids (202,073 samples, 0.17%)</title><rect x="43.8702%" y="117" width="0.1668%" height="15" fill="rgb(236,212,23)"/><text x="44.1202%" y="127.50"></text></g><g><title>associated_items (177,503 samples, 0.15%)</title><rect x="43.8904%" y="101" width="0.1466%" height="15" fill="rgb(242,79,21)"/><text x="44.1404%" y="111.50"></text></g><g><title>item_attrs (129,221 samples, 0.11%)</title><rect x="44.0826%" y="117" width="0.1067%" height="15" fill="rgb(211,96,35)"/><text x="44.3326%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (126,011 samples, 0.10%)</title><rect x="44.0852%" y="101" width="0.1040%" height="15" fill="rgb(253,215,40)"/><text x="44.3352%" y="111.50"></text></g><g><title>predicates_of (179,443 samples, 0.15%)</title><rect x="44.3189%" y="117" width="0.1482%" height="15" fill="rgb(211,81,21)"/><text x="44.5689%" y="127.50"></text></g><g><title>associated_item (138,861 samples, 0.11%)</title><rect x="46.9493%" y="85" width="0.1147%" height="15" fill="rgb(208,190,38)"/><text x="47.1993%" y="95.50"></text></g><g><title>associated_items (190,962 samples, 0.16%)</title><rect x="46.9100%" y="101" width="0.1577%" height="15" fill="rgb(235,213,38)"/><text x="47.1600%" y="111.50"></text></g><g><title>evaluate_obligation (450,946 samples, 0.37%)</title><rect x="47.1510%" y="101" width="0.3723%" height="15" fill="rgb(237,122,38)"/><text x="47.4010%" y="111.50"></text></g><g><title>method_autoderef_steps (151,303 samples, 0.12%)</title><rect x="47.7382%" y="101" width="0.1249%" height="15" fill="rgb(244,218,35)"/><text x="47.9882%" y="111.50"></text></g><g><title>predicates_of (137,732 samples, 0.11%)</title><rect x="47.8664%" y="101" width="0.1137%" height="15" fill="rgb(240,68,47)"/><text x="48.1164%" y="111.50"></text></g><g><title>typeck (4,211,595 samples, 3.48%)</title><rect x="44.5624%" y="117" width="3.4774%" height="15" fill="rgb(210,16,53)"/><text x="44.8124%" y="127.50">typ..</text></g><g><title>item_bodies_checking (23,297,337 samples, 19.24%)</title><rect x="28.8281%" y="165" width="19.2362%" height="15" fill="rgb(235,124,12)"/><text x="29.0781%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,295,467 samples, 19.23%)</title><rect x="28.8296%" y="149" width="19.2347%" height="15" fill="rgb(224,169,11)"/><text x="29.0796%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,204,937 samples, 19.16%)</title><rect x="28.9044%" y="133" width="19.1599%" height="15" fill="rgb(250,166,2)"/><text x="29.1544%" y="143.50">typeck</text></g><g><title>item_types_checking (2,377,825 samples, 1.96%)</title><rect x="48.0643%" y="165" width="1.9633%" height="15" fill="rgb(242,216,29)"/><text x="48.3143%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,372,465 samples, 1.96%)</title><rect x="48.0687%" y="149" width="1.9589%" height="15" fill="rgb(230,116,27)"/><text x="48.3187%" y="159.50">c..</text></g><g><title>late_bound_vars_map (167,373 samples, 0.14%)</title><rect x="50.4826%" y="117" width="0.1382%" height="15" fill="rgb(228,99,48)"/><text x="50.7326%" y="127.50"></text></g><g><title>resolve_lifetimes (140,433 samples, 0.12%)</title><rect x="50.5048%" y="101" width="0.1160%" height="15" fill="rgb(253,11,6)"/><text x="50.7548%" y="111.50"></text></g><g><title>fn_sig (496,078 samples, 0.41%)</title><rect x="50.2715%" y="133" width="0.4096%" height="15" fill="rgb(247,143,39)"/><text x="50.5215%" y="143.50"></text></g><g><title>generics_of (243,792 samples, 0.20%)</title><rect x="50.6811%" y="133" width="0.2013%" height="15" fill="rgb(236,97,10)"/><text x="50.9311%" y="143.50"></text></g><g><title>late_bound_vars_map (192,133 samples, 0.16%)</title><rect x="51.2481%" y="85" width="0.1586%" height="15" fill="rgb(233,208,19)"/><text x="51.4981%" y="95.50"></text></g><g><title>resolve_lifetimes (175,483 samples, 0.14%)</title><rect x="51.2618%" y="69" width="0.1449%" height="15" fill="rgb(216,164,2)"/><text x="51.5118%" y="79.50"></text></g><g><title>explicit_predicates_of (455,214 samples, 0.38%)</title><rect x="51.0669%" y="101" width="0.3759%" height="15" fill="rgb(220,129,5)"/><text x="51.3169%" y="111.50"></text></g><g><title>predicates_of (851,377 samples, 0.70%)</title><rect x="50.9383%" y="133" width="0.7030%" height="15" fill="rgb(242,17,10)"/><text x="51.1883%" y="143.50"></text></g><g><title>predicates_defined_on (789,557 samples, 0.65%)</title><rect x="50.9894%" y="117" width="0.6519%" height="15" fill="rgb(242,107,0)"/><text x="51.2394%" y="127.50"></text></g><g><title>inferred_outlives_of (240,422 samples, 0.20%)</title><rect x="51.4428%" y="101" width="0.1985%" height="15" fill="rgb(251,28,31)"/><text x="51.6928%" y="111.50"></text></g><g><title>inferred_outlives_crate (220,062 samples, 0.18%)</title><rect x="51.4596%" y="85" width="0.1817%" height="15" fill="rgb(233,223,10)"/><text x="51.7096%" y="95.50"></text></g><g><title>type_of (178,872 samples, 0.15%)</title><rect x="51.4936%" y="69" width="0.1477%" height="15" fill="rgb(215,21,27)"/><text x="51.7436%" y="79.50"></text></g><g><title>type_param_predicates (122,782 samples, 0.10%)</title><rect x="51.5399%" y="53" width="0.1014%" height="15" fill="rgb(232,23,21)"/><text x="51.7899%" y="63.50"></text></g><g><title>type_collecting (2,118,093 samples, 1.75%)</title><rect x="50.0292%" y="165" width="1.7489%" height="15" fill="rgb(244,5,23)"/><text x="50.2792%" y="175.50"></text></g><g><title>collect_mod_item_types (2,110,133 samples, 1.74%)</title><rect x="50.0358%" y="149" width="1.7423%" height="15" fill="rgb(226,81,46)"/><text x="50.2858%" y="159.50"></text></g><g><title>type_of (165,620 samples, 0.14%)</title><rect x="51.6413%" y="133" width="0.1367%" height="15" fill="rgb(247,70,30)"/><text x="51.8913%" y="143.50"></text></g><g><title>evaluate_obligation (475,669 samples, 0.39%)</title><rect x="53.8955%" y="133" width="0.3928%" height="15" fill="rgb(212,68,19)"/><text x="54.1455%" y="143.50"></text></g><g><title>implied_outlives_bounds (291,387 samples, 0.24%)</title><rect x="54.2883%" y="133" width="0.2406%" height="15" fill="rgb(240,187,13)"/><text x="54.5383%" y="143.50"></text></g><g><title>param_env (512,714 samples, 0.42%)</title><rect x="54.5288%" y="133" width="0.4233%" height="15" fill="rgb(223,113,26)"/><text x="54.7788%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,920,605 samples, 3.24%)</title><rect x="51.9558%" y="149" width="3.2372%" height="15" fill="rgb(206,192,2)"/><text x="52.2058%" y="159.50">che..</text></g><g><title>region_scope_tree (291,641 samples, 0.24%)</title><rect x="54.9522%" y="133" width="0.2408%" height="15" fill="rgb(241,108,4)"/><text x="55.2022%" y="143.50"></text></g><g><title>evaluate_obligation (289,023 samples, 0.24%)</title><rect x="56.6997%" y="133" width="0.2386%" height="15" fill="rgb(247,173,49)"/><text x="56.9497%" y="143.50"></text></g><g><title>param_env (351,594 samples, 0.29%)</title><rect x="57.0735%" y="133" width="0.2903%" height="15" fill="rgb(224,114,35)"/><text x="57.3235%" y="143.50"></text></g><g><title>check_item_well_formed (2,888,458 samples, 2.38%)</title><rect x="55.1930%" y="149" width="2.3850%" height="15" fill="rgb(245,159,27)"/><text x="55.4430%" y="159.50">ch..</text></g><g><title>analysis (64,789,509 samples, 53.50%)</title><rect x="4.6731%" y="197" width="53.4956%" height="15" fill="rgb(245,172,44)"/><text x="4.9231%" y="207.50">analysis</text></g><g><title>type_check_crate (36,139,964 samples, 29.84%)</title><rect x="28.3285%" y="181" width="29.8402%" height="15" fill="rgb(236,23,11)"/><text x="28.5785%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,733,352 samples, 6.39%)</title><rect x="51.7834%" y="165" width="6.3853%" height="15" fill="rgb(205,117,38)"/><text x="52.0334%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (715,487 samples, 0.59%)</title><rect x="57.5779%" y="149" width="0.5908%" height="15" fill="rgb(237,72,25)"/><text x="57.8279%" y="159.50"></text></g><g><title>codegen_module (178,382 samples, 0.15%)</title><rect x="58.4729%" y="181" width="0.1473%" height="15" fill="rgb(244,70,9)"/><text x="58.7229%" y="191.50"></text></g><g><title>codegen_crate (615,267 samples, 0.51%)</title><rect x="58.1752%" y="197" width="0.5080%" height="15" fill="rgb(217,125,39)"/><text x="58.4252%" y="207.50"></text></g><g><title>codegen_module_optimize (1,612,217 samples, 1.33%)</title><rect x="58.6832%" y="197" width="1.3312%" height="15" fill="rgb(235,36,10)"/><text x="58.9332%" y="207.50"></text></g><g><title>LLVM_module_optimize (350,894 samples, 0.29%)</title><rect x="59.7247%" y="181" width="0.2897%" height="15" fill="rgb(251,123,47)"/><text x="59.9747%" y="191.50"></text></g><g><title>LLVM_lto_optimize (269,942 samples, 0.22%)</title><rect x="60.3310%" y="181" width="0.2229%" height="15" fill="rgb(221,13,13)"/><text x="60.5810%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,426,796 samples, 2.00%)</title><rect x="60.5539%" y="181" width="2.0038%" height="15" fill="rgb(238,131,9)"/><text x="60.8039%" y="191.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,391,715 samples, 1.97%)</title><rect x="60.5829%" y="165" width="1.9748%" height="15" fill="rgb(211,50,8)"/><text x="60.8329%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (3,114,834 samples, 2.57%)</title><rect x="60.0144%" y="197" width="2.5719%" height="15" fill="rgb(245,182,24)"/><text x="60.2644%" y="207.50">co..</text></g><g><title>AST_validation (250,793 samples, 0.21%)</title><rect x="62.7219%" y="181" width="0.2071%" height="15" fill="rgb(242,14,37)"/><text x="62.9719%" y="191.50"></text></g><g><title>metadata_register_crate (193,423 samples, 0.16%)</title><rect x="76.6175%" y="149" width="0.1597%" height="15" fill="rgb(246,228,12)"/><text x="76.8675%" y="159.50"></text></g><g><title>macro_expand_crate (16,920,230 samples, 13.97%)</title><rect x="63.0566%" y="181" width="13.9708%" height="15" fill="rgb(213,55,15)"/><text x="63.3066%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (16,907,749 samples, 13.96%)</title><rect x="63.0669%" y="165" width="13.9605%" height="15" fill="rgb(209,9,3)"/><text x="63.3169%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (302,943 samples, 0.25%)</title><rect x="76.7772%" y="149" width="0.2501%" height="15" fill="rgb(230,59,30)"/><text x="77.0272%" y="159.50"></text></g><g><title>finalize_macro_resolutions (296,003 samples, 0.24%)</title><rect x="77.1890%" y="165" width="0.2444%" height="15" fill="rgb(209,121,21)"/><text x="77.4390%" y="175.50"></text></g><g><title>late_resolve_crate (2,442,276 samples, 2.02%)</title><rect x="77.4335%" y="165" width="2.0165%" height="15" fill="rgb(220,109,13)"/><text x="77.6835%" y="175.50">l..</text></g><g><title>configure_and_expand (20,586,629 samples, 17.00%)</title><rect x="62.5863%" y="197" width="16.9980%" height="15" fill="rgb(232,18,1)"/><text x="62.8363%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,975,382 samples, 2.46%)</title><rect x="77.1276%" y="181" width="2.4567%" height="15" fill="rgb(215,41,42)"/><text x="77.3776%" y="191.50">re..</text></g><g><title>drop_ast (281,093 samples, 0.23%)</title><rect x="79.5843%" y="197" width="0.2321%" height="15" fill="rgb(224,123,36)"/><text x="79.8343%" y="207.50"></text></g><g><title>early_lint_checks (451,005 samples, 0.37%)</title><rect x="79.8264%" y="197" width="0.3724%" height="15" fill="rgb(240,125,3)"/><text x="80.0764%" y="207.50"></text></g><g><title>free_global_ctxt (1,756,258 samples, 1.45%)</title><rect x="80.1988%" y="197" width="1.4501%" height="15" fill="rgb(205,98,50)"/><text x="80.4488%" y="207.50"></text></g><g><title>exported_symbols (122,361 samples, 0.10%)</title><rect x="83.0669%" y="181" width="0.1010%" height="15" fill="rgb(205,185,37)"/><text x="83.3169%" y="191.50"></text></g><g><title>is_sized_raw (239,593 samples, 0.20%)</title><rect x="85.8895%" y="149" width="0.1978%" height="15" fill="rgb(238,207,15)"/><text x="86.1395%" y="159.50"></text></g><g><title>evaluate_obligation (182,872 samples, 0.15%)</title><rect x="85.9363%" y="133" width="0.1510%" height="15" fill="rgb(213,199,42)"/><text x="86.1863%" y="143.50"></text></g><g><title>layout_of (133,962 samples, 0.11%)</title><rect x="86.0873%" y="149" width="0.1106%" height="15" fill="rgb(235,201,11)"/><text x="86.3373%" y="159.50"></text></g><g><title>layout_of (774,117 samples, 0.64%)</title><rect x="85.6686%" y="165" width="0.6392%" height="15" fill="rgb(207,46,11)"/><text x="85.9186%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (121,961 samples, 0.10%)</title><rect x="86.2071%" y="149" width="0.1007%" height="15" fill="rgb(241,35,35)"/><text x="86.4571%" y="159.50"></text></g><g><title>needs_drop_raw (245,760 samples, 0.20%)</title><rect x="88.7164%" y="149" width="0.2029%" height="15" fill="rgb(243,32,47)"/><text x="88.9664%" y="159.50"></text></g><g><title>is_copy_raw (205,430 samples, 0.17%)</title><rect x="88.7497%" y="133" width="0.1696%" height="15" fill="rgb(247,202,23)"/><text x="88.9997%" y="143.50"></text></g><g><title>evaluate_obligation (141,380 samples, 0.12%)</title><rect x="88.8026%" y="117" width="0.1167%" height="15" fill="rgb(219,102,11)"/><text x="89.0526%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,352,549 samples, 2.77%)</title><rect x="86.3078%" y="165" width="2.7681%" height="15" fill="rgb(243,110,44)"/><text x="86.5578%" y="175.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (151,701 samples, 0.13%)</title><rect x="88.9507%" y="149" width="0.1253%" height="15" fill="rgb(222,74,54)"/><text x="89.2007%" y="159.50"></text></g><g><title>optimized_mir (7,191,708 samples, 5.94%)</title><rect x="83.2446%" y="181" width="5.9381%" height="15" fill="rgb(216,99,12)"/><text x="83.4946%" y="191.50">optimize..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (129,241 samples, 0.11%)</title><rect x="89.0759%" y="165" width="0.1067%" height="15" fill="rgb(226,22,26)"/><text x="89.3259%" y="175.50"></text></g><g><title>generate_crate_metadata (9,194,228 samples, 7.59%)</title><rect x="81.6489%" y="197" width="7.5915%" height="15" fill="rgb(217,163,10)"/><text x="81.8989%" y="207.50">generate_c..</text></g><g><title>hir_lowering (6,124,485 samples, 5.06%)</title><rect x="89.2404%" y="197" width="5.0569%" height="15" fill="rgb(213,25,53)"/><text x="89.4904%" y="207.50">hir_lo..</text></g><g><title>finish_ongoing_codegen (2,905,672 samples, 2.40%)</title><rect x="94.3088%" y="181" width="2.3992%" height="15" fill="rgb(252,105,26)"/><text x="94.5588%" y="191.50">fi..</text></g><g><title>link_crate (830,439 samples, 0.69%)</title><rect x="96.7080%" y="181" width="0.6857%" height="15" fill="rgb(220,39,43)"/><text x="96.9580%" y="191.50"></text></g><g><title>link_binary (809,709 samples, 0.67%)</title><rect x="96.7251%" y="165" width="0.6686%" height="15" fill="rgb(229,68,48)"/><text x="96.9751%" y="175.50"></text></g><g><title>link_rlib (515,756 samples, 0.43%)</title><rect x="96.9678%" y="149" width="0.4259%" height="15" fill="rgb(252,8,32)"/><text x="97.2178%" y="159.50"></text></g><g><title>link (3,756,501 samples, 3.10%)</title><rect x="94.2973%" y="197" width="3.1017%" height="15" fill="rgb(223,20,43)"/><text x="94.5473%" y="207.50">link</text></g><g><title>parse_crate (1,763,559 samples, 1.46%)</title><rect x="97.3990%" y="197" width="1.4561%" height="15" fill="rgb(229,81,49)"/><text x="97.6490%" y="207.50"></text></g><g><title>prepare_outputs (293,253 samples, 0.24%)</title><rect x="98.8619%" y="197" width="0.2421%" height="15" fill="rgb(236,28,36)"/><text x="99.1119%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (584,046 samples, 0.48%)</title><rect x="99.1040%" y="197" width="0.4822%" height="15" fill="rgb(249,185,26)"/><text x="99.3540%" y="207.50"></text></g><g><title>all (121,111,749 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (121,111,749 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (404,084 samples, 0.33%)</title><rect x="99.6664%" y="197" width="0.3336%" height="15" fill="rgb(221,78,26)"/><text x="99.9164%" y="207.50"></text></g></svg></svg>