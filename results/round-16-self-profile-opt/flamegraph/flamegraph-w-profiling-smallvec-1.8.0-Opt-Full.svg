<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (30,329,770 samples, 8.52%)</title><rect x="0.1747%" y="181" width="8.5164%" height="15" fill="rgb(227,0,7)"/><text x="0.4247%" y="191.50">LLVM_passes</text></g><g><title>param_env (670,039 samples, 0.19%)</title><rect x="16.7239%" y="101" width="0.1881%" height="15" fill="rgb(217,0,24)"/><text x="16.9739%" y="111.50"></text></g><g><title>item_attrs (555,908 samples, 0.16%)</title><rect x="17.2341%" y="69" width="0.1561%" height="15" fill="rgb(221,193,54)"/><text x="17.4841%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (539,487 samples, 0.15%)</title><rect x="17.2387%" y="53" width="0.1515%" height="15" fill="rgb(248,212,6)"/><text x="17.4887%" y="63.50"></text></g><g><title>codegen_fn_attrs (759,050 samples, 0.21%)</title><rect x="17.1853%" y="85" width="0.2131%" height="15" fill="rgb(208,68,35)"/><text x="17.4353%" y="95.50"></text></g><g><title>is_copy_raw (368,202 samples, 0.10%)</title><rect x="18.9243%" y="69" width="0.1034%" height="15" fill="rgb(232,128,0)"/><text x="19.1743%" y="79.50"></text></g><g><title>is_copy_raw (1,151,315 samples, 0.32%)</title><rect x="19.1508%" y="53" width="0.3233%" height="15" fill="rgb(207,160,47)"/><text x="19.4008%" y="63.50"></text></g><g><title>evaluate_obligation (940,421 samples, 0.26%)</title><rect x="19.2100%" y="37" width="0.2641%" height="15" fill="rgb(228,23,34)"/><text x="19.4600%" y="47.50"></text></g><g><title>needs_drop_raw (1,592,289 samples, 0.45%)</title><rect x="19.0289%" y="69" width="0.4471%" height="15" fill="rgb(218,30,26)"/><text x="19.2789%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (917,417 samples, 0.26%)</title><rect x="19.6152%" y="53" width="0.2576%" height="15" fill="rgb(220,122,19)"/><text x="19.8652%" y="63.50"></text></g><g><title>resolve_instance (1,779,016 samples, 0.50%)</title><rect x="19.4760%" y="69" width="0.4995%" height="15" fill="rgb(250,228,42)"/><text x="19.7260%" y="79.50"></text></g><g><title>thir_body (1,987,892 samples, 0.56%)</title><rect x="19.9929%" y="69" width="0.5582%" height="15" fill="rgb(240,193,28)"/><text x="20.2429%" y="79.50"></text></g><g><title>mir_const (15,633,034 samples, 4.39%)</title><rect x="16.2329%" y="117" width="4.3896%" height="15" fill="rgb(216,20,37)"/><text x="16.4829%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (13,214,226 samples, 3.71%)</title><rect x="16.9120%" y="101" width="3.7104%" height="15" fill="rgb(206,188,39)"/><text x="17.1620%" y="111.50">unsa..</text></g><g><title>mir_built (11,482,128 samples, 3.22%)</title><rect x="17.3984%" y="85" width="3.2241%" height="15" fill="rgb(217,207,13)"/><text x="17.6484%" y="95.50">mir..</text></g><g><title>mir_promoted (18,367,793 samples, 5.16%)</title><rect x="15.7401%" y="133" width="5.1575%" height="15" fill="rgb(231,73,38)"/><text x="15.9901%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (979,738 samples, 0.28%)</title><rect x="20.6225%" y="117" width="0.2751%" height="15" fill="rgb(225,20,46)"/><text x="20.8725%" y="127.50"></text></g><g><title>mir_const (715,717 samples, 0.20%)</title><rect x="20.6966%" y="101" width="0.2010%" height="15" fill="rgb(210,31,41)"/><text x="20.9466%" y="111.50"></text></g><g><title>unsafety_check_result (490,993 samples, 0.14%)</title><rect x="20.7597%" y="85" width="0.1379%" height="15" fill="rgb(221,200,47)"/><text x="21.0097%" y="95.50"></text></g><g><title>mir_built (419,943 samples, 0.12%)</title><rect x="20.7797%" y="69" width="0.1179%" height="15" fill="rgb(226,26,5)"/><text x="21.0297%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (815,859 samples, 0.23%)</title><rect x="20.8998%" y="133" width="0.2291%" height="15" fill="rgb(249,33,26)"/><text x="21.1498%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,552,048 samples, 0.44%)</title><rect x="21.1289%" y="133" width="0.4358%" height="15" fill="rgb(235,183,28)"/><text x="21.3789%" y="143.50"></text></g><g><title>normalize_projection_ty (698,426 samples, 0.20%)</title><rect x="21.3686%" y="117" width="0.1961%" height="15" fill="rgb(221,5,38)"/><text x="21.6186%" y="127.50"></text></g><g><title>type_op_normalize_predicate (681,405 samples, 0.19%)</title><rect x="21.5647%" y="133" width="0.1913%" height="15" fill="rgb(247,18,42)"/><text x="21.8147%" y="143.50"></text></g><g><title>type_op_normalize_ty (584,715 samples, 0.16%)</title><rect x="21.7560%" y="133" width="0.1642%" height="15" fill="rgb(241,131,45)"/><text x="22.0060%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,056,378 samples, 1.42%)</title><rect x="21.9202%" y="133" width="1.4198%" height="15" fill="rgb(249,31,29)"/><text x="22.1702%" y="143.50"></text></g><g><title>MIR_borrow_checking (51,727,249 samples, 14.52%)</title><rect x="8.8182%" y="165" width="14.5246%" height="15" fill="rgb(225,111,53)"/><text x="9.0682%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (51,366,455 samples, 14.42%)</title><rect x="8.9195%" y="149" width="14.4233%" height="15" fill="rgb(238,160,17)"/><text x="9.1695%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (637,667 samples, 0.18%)</title><rect x="23.3427%" y="165" width="0.1791%" height="15" fill="rgb(214,148,48)"/><text x="23.5927%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (495,305 samples, 0.14%)</title><rect x="23.3827%" y="149" width="0.1391%" height="15" fill="rgb(232,36,49)"/><text x="23.6327%" y="159.50"></text></g><g><title>should_inherit_track_caller (464,993 samples, 0.13%)</title><rect x="23.7855%" y="117" width="0.1306%" height="15" fill="rgb(209,103,24)"/><text x="24.0355%" y="127.50"></text></g><g><title>codegen_fn_attrs (714,285 samples, 0.20%)</title><rect x="23.7198%" y="133" width="0.2006%" height="15" fill="rgb(229,88,8)"/><text x="23.9698%" y="143.50"></text></g><g><title>check_mod_attrs (1,092,152 samples, 0.31%)</title><rect x="23.6138%" y="149" width="0.3067%" height="15" fill="rgb(213,181,19)"/><text x="23.8638%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (920,130 samples, 0.26%)</title><rect x="24.0272%" y="149" width="0.2584%" height="15" fill="rgb(254,191,54)"/><text x="24.2772%" y="159.50"></text></g><g><title>misc_checking_1 (2,467,588 samples, 0.69%)</title><rect x="23.6099%" y="165" width="0.6929%" height="15" fill="rgb(241,83,37)"/><text x="23.8599%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (913,510 samples, 0.26%)</title><rect x="24.3032%" y="149" width="0.2565%" height="15" fill="rgb(233,36,39)"/><text x="24.5532%" y="159.50"></text></g><g><title>check_mod_liveness (748,998 samples, 0.21%)</title><rect x="24.3494%" y="133" width="0.2103%" height="15" fill="rgb(226,3,54)"/><text x="24.5994%" y="143.50"></text></g><g><title>misc_checking_2 (1,791,040 samples, 0.50%)</title><rect x="24.3028%" y="165" width="0.5029%" height="15" fill="rgb(245,192,40)"/><text x="24.5528%" y="175.50"></text></g><g><title>match_checking (876,050 samples, 0.25%)</title><rect x="24.5597%" y="149" width="0.2460%" height="15" fill="rgb(238,167,29)"/><text x="24.8097%" y="159.50"></text></g><g><title>check_match (799,867 samples, 0.22%)</title><rect x="24.5811%" y="133" width="0.2246%" height="15" fill="rgb(232,182,51)"/><text x="24.8311%" y="143.50"></text></g><g><title>check_private_in_public (429,325 samples, 0.12%)</title><rect x="24.8081%" y="149" width="0.1206%" height="15" fill="rgb(231,60,39)"/><text x="25.0581%" y="159.50"></text></g><g><title>death_checking (651,848 samples, 0.18%)</title><rect x="24.9287%" y="149" width="0.1830%" height="15" fill="rgb(208,69,12)"/><text x="25.1787%" y="159.50"></text></g><g><title>crate_lints (1,303,294 samples, 0.37%)</title><rect x="25.1121%" y="133" width="0.3660%" height="15" fill="rgb(235,93,37)"/><text x="25.3621%" y="143.50"></text></g><g><title>type_of (388,596 samples, 0.11%)</title><rect x="25.3689%" y="117" width="0.1091%" height="15" fill="rgb(213,116,39)"/><text x="25.6189%" y="127.50"></text></g><g><title>lint_checking (2,031,393 samples, 0.57%)</title><rect x="25.1117%" y="149" width="0.5704%" height="15" fill="rgb(222,207,29)"/><text x="25.3617%" y="159.50"></text></g><g><title>module_lints (726,679 samples, 0.20%)</title><rect x="25.4780%" y="133" width="0.2040%" height="15" fill="rgb(206,96,30)"/><text x="25.7280%" y="143.50"></text></g><g><title>lint_mod (724,539 samples, 0.20%)</title><rect x="25.4786%" y="117" width="0.2034%" height="15" fill="rgb(218,138,4)"/><text x="25.7286%" y="127.50"></text></g><g><title>privacy_access_levels (600,286 samples, 0.17%)</title><rect x="25.6821%" y="149" width="0.1686%" height="15" fill="rgb(250,191,14)"/><text x="25.9321%" y="159.50"></text></g><g><title>privacy_checking_modules (1,692,629 samples, 0.48%)</title><rect x="25.8506%" y="149" width="0.4753%" height="15" fill="rgb(239,60,40)"/><text x="26.1006%" y="159.50"></text></g><g><title>check_mod_privacy (1,691,039 samples, 0.47%)</title><rect x="25.8511%" y="133" width="0.4748%" height="15" fill="rgb(206,27,48)"/><text x="26.1011%" y="143.50"></text></g><g><title>misc_checking_3 (5,434,131 samples, 1.53%)</title><rect x="24.8057%" y="165" width="1.5259%" height="15" fill="rgb(225,35,8)"/><text x="25.0557%" y="175.50"></text></g><g><title>impl_parent (1,256,655 samples, 0.35%)</title><rect x="28.3919%" y="101" width="0.3529%" height="15" fill="rgb(250,213,24)"/><text x="28.6419%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (669,349 samples, 0.19%)</title><rect x="28.5568%" y="85" width="0.1879%" height="15" fill="rgb(247,123,22)"/><text x="28.8068%" y="95.50"></text></g><g><title>impl_trait_ref (2,849,745 samples, 0.80%)</title><rect x="28.7451%" y="101" width="0.8002%" height="15" fill="rgb(231,138,38)"/><text x="28.9951%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,266,681 samples, 0.64%)</title><rect x="28.9088%" y="85" width="0.6365%" height="15" fill="rgb(231,145,46)"/><text x="29.1588%" y="95.50"></text></g><g><title>trait_impls_of (487,887 samples, 0.14%)</title><rect x="29.5988%" y="101" width="0.1370%" height="15" fill="rgb(251,118,11)"/><text x="29.8488%" y="111.50"></text></g><g><title>coherent_trait (11,991,144 samples, 3.37%)</title><rect x="26.3730%" y="133" width="3.3670%" height="15" fill="rgb(217,147,25)"/><text x="26.6230%" y="143.50">coh..</text></g><g><title>specialization_graph_of (11,950,182 samples, 3.36%)</title><rect x="26.3845%" y="117" width="3.3555%" height="15" fill="rgb(247,81,37)"/><text x="26.6345%" y="127.50">spe..</text></g><g><title>coherence_checking (12,112,585 samples, 3.40%)</title><rect x="26.3656%" y="149" width="3.4011%" height="15" fill="rgb(209,12,38)"/><text x="26.6156%" y="159.50">coh..</text></g><g><title>associated_items (470,994 samples, 0.13%)</title><rect x="41.3728%" y="101" width="0.1323%" height="15" fill="rgb(227,1,9)"/><text x="41.6228%" y="111.50"></text></g><g><title>adt_dtorck_constraint (502,676 samples, 0.14%)</title><rect x="41.6470%" y="85" width="0.1411%" height="15" fill="rgb(248,47,43)"/><text x="41.8970%" y="95.50"></text></g><g><title>dropck_outlives (913,319 samples, 0.26%)</title><rect x="41.5491%" y="101" width="0.2565%" height="15" fill="rgb(221,10,30)"/><text x="41.7991%" y="111.50"></text></g><g><title>generics_of (375,597 samples, 0.11%)</title><rect x="42.9402%" y="85" width="0.1055%" height="15" fill="rgb(210,229,1)"/><text x="43.1902%" y="95.50"></text></g><g><title>specializes (378,974 samples, 0.11%)</title><rect x="43.1854%" y="85" width="0.1064%" height="15" fill="rgb(222,148,37)"/><text x="43.4354%" y="95.50"></text></g><g><title>evaluate_obligation (5,459,805 samples, 1.53%)</title><rect x="41.8056%" y="101" width="1.5331%" height="15" fill="rgb(234,67,33)"/><text x="42.0556%" y="111.50"></text></g><g><title>fn_sig (390,384 samples, 0.11%)</title><rect x="43.3494%" y="101" width="0.1096%" height="15" fill="rgb(247,98,35)"/><text x="43.5994%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (360,473 samples, 0.10%)</title><rect x="43.3578%" y="85" width="0.1012%" height="15" fill="rgb(247,138,52)"/><text x="43.6078%" y="95.50"></text></g><g><title>generics_of (446,896 samples, 0.13%)</title><rect x="43.4590%" y="101" width="0.1255%" height="15" fill="rgb(213,79,30)"/><text x="43.7090%" y="111.50"></text></g><g><title>item_attrs (382,628 samples, 0.11%)</title><rect x="43.6451%" y="101" width="0.1074%" height="15" fill="rgb(246,177,23)"/><text x="43.8951%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (369,338 samples, 0.10%)</title><rect x="43.6489%" y="85" width="0.1037%" height="15" fill="rgb(230,62,27)"/><text x="43.8989%" y="95.50"></text></g><g><title>evaluate_obligation (618,842 samples, 0.17%)</title><rect x="44.0320%" y="85" width="0.1738%" height="15" fill="rgb(216,154,8)"/><text x="44.2820%" y="95.50"></text></g><g><title>method_autoderef_steps (1,491,513 samples, 0.42%)</title><rect x="43.7893%" y="101" width="0.4188%" height="15" fill="rgb(244,35,45)"/><text x="44.0393%" y="111.50"></text></g><g><title>param_env (386,000 samples, 0.11%)</title><rect x="44.2612%" y="101" width="0.1084%" height="15" fill="rgb(251,115,12)"/><text x="44.5112%" y="111.50"></text></g><g><title>predicates_of (523,076 samples, 0.15%)</title><rect x="44.3758%" y="101" width="0.1469%" height="15" fill="rgb(240,54,50)"/><text x="44.6258%" y="111.50"></text></g><g><title>predicates_defined_on (375,855 samples, 0.11%)</title><rect x="44.4171%" y="85" width="0.1055%" height="15" fill="rgb(233,84,52)"/><text x="44.6671%" y="95.50"></text></g><g><title>evaluate_obligation (436,836 samples, 0.12%)</title><rect x="45.5278%" y="85" width="0.1227%" height="15" fill="rgb(207,117,47)"/><text x="45.7778%" y="95.50"></text></g><g><title>typeck (4,391,758 samples, 1.23%)</title><rect x="44.6102%" y="101" width="1.2332%" height="15" fill="rgb(249,43,39)"/><text x="44.8602%" y="111.50"></text></g><g><title>item_bodies_checking (57,255,470 samples, 16.08%)</title><rect x="29.7932%" y="149" width="16.0769%" height="15" fill="rgb(209,38,44)"/><text x="30.0432%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,252,810 samples, 16.08%)</title><rect x="29.7940%" y="133" width="16.0761%" height="15" fill="rgb(236,212,23)"/><text x="30.0440%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (57,009,374 samples, 16.01%)</title><rect x="29.8623%" y="117" width="16.0078%" height="15" fill="rgb(242,79,21)"/><text x="30.1123%" y="127.50">typeck</text></g><g><title>item_types_checking (7,486,824 samples, 2.10%)</title><rect x="45.8701%" y="149" width="2.1022%" height="15" fill="rgb(211,96,35)"/><text x="46.1201%" y="159.50">i..</text></g><g><title>check_mod_item_types (7,484,714 samples, 2.10%)</title><rect x="45.8707%" y="133" width="2.1016%" height="15" fill="rgb(253,215,40)"/><text x="46.1207%" y="143.50">c..</text></g><g><title>fn_sig (654,305 samples, 0.18%)</title><rect x="48.1473%" y="117" width="0.1837%" height="15" fill="rgb(211,81,21)"/><text x="48.3973%" y="127.50"></text></g><g><title>generics_of (509,012 samples, 0.14%)</title><rect x="48.3310%" y="117" width="0.1429%" height="15" fill="rgb(208,190,38)"/><text x="48.5810%" y="127.50"></text></g><g><title>late_bound_vars_map (440,282 samples, 0.12%)</title><rect x="48.8175%" y="69" width="0.1236%" height="15" fill="rgb(235,213,38)"/><text x="49.0675%" y="79.50"></text></g><g><title>resolve_lifetimes (413,962 samples, 0.12%)</title><rect x="48.8249%" y="53" width="0.1162%" height="15" fill="rgb(237,122,38)"/><text x="49.0749%" y="63.50"></text></g><g><title>explicit_predicates_of (1,205,811 samples, 0.34%)</title><rect x="48.6547%" y="85" width="0.3386%" height="15" fill="rgb(244,218,35)"/><text x="48.9047%" y="95.50"></text></g><g><title>predicates_of (1,899,350 samples, 0.53%)</title><rect x="48.5579%" y="117" width="0.5333%" height="15" fill="rgb(240,68,47)"/><text x="48.8079%" y="127.50"></text></g><g><title>predicates_defined_on (1,766,099 samples, 0.50%)</title><rect x="48.5953%" y="101" width="0.4959%" height="15" fill="rgb(210,16,53)"/><text x="48.8453%" y="111.50"></text></g><g><title>type_collecting (4,471,320 samples, 1.26%)</title><rect x="47.9730%" y="149" width="1.2555%" height="15" fill="rgb(235,124,12)"/><text x="48.2230%" y="159.50"></text></g><g><title>collect_mod_item_types (4,465,650 samples, 1.25%)</title><rect x="47.9746%" y="133" width="1.2539%" height="15" fill="rgb(224,169,11)"/><text x="48.2246%" y="143.50"></text></g><g><title>type_of (461,156 samples, 0.13%)</title><rect x="49.0991%" y="117" width="0.1295%" height="15" fill="rgb(250,166,2)"/><text x="49.3491%" y="127.50"></text></g><g><title>evaluate_obligation (748,384 samples, 0.21%)</title><rect x="51.0200%" y="117" width="0.2101%" height="15" fill="rgb(242,216,29)"/><text x="51.2700%" y="127.50"></text></g><g><title>implied_outlives_bounds (598,179 samples, 0.17%)</title><rect x="51.2327%" y="117" width="0.1680%" height="15" fill="rgb(230,116,27)"/><text x="51.4827%" y="127.50"></text></g><g><title>param_env (1,379,216 samples, 0.39%)</title><rect x="51.4029%" y="117" width="0.3873%" height="15" fill="rgb(228,99,48)"/><text x="51.6529%" y="127.50"></text></g><g><title>region_scope_tree (958,208 samples, 0.27%)</title><rect x="51.8100%" y="117" width="0.2691%" height="15" fill="rgb(253,11,6)"/><text x="52.0600%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,650,211 samples, 2.71%)</title><rect x="49.3763%" y="133" width="2.7097%" height="15" fill="rgb(247,143,39)"/><text x="49.6263%" y="143.50">ch..</text></g><g><title>implied_outlives_bounds (373,663 samples, 0.10%)</title><rect x="54.2765%" y="117" width="0.1049%" height="15" fill="rgb(236,97,10)"/><text x="54.5265%" y="127.50"></text></g><g><title>param_env (814,967 samples, 0.23%)</title><rect x="54.3816%" y="117" width="0.2288%" height="15" fill="rgb(233,208,19)"/><text x="54.6316%" y="127.50"></text></g><g><title>check_item_well_formed (9,498,357 samples, 2.67%)</title><rect x="52.0860%" y="133" width="2.6671%" height="15" fill="rgb(216,164,2)"/><text x="52.3360%" y="143.50">ch..</text></g><g><title>analysis (164,371,099 samples, 46.15%)</title><rect x="8.6910%" y="181" width="46.1541%" height="15" fill="rgb(220,129,5)"/><text x="8.9410%" y="191.50">analysis</text></g><g><title>type_check_crate (101,546,936 samples, 28.51%)</title><rect x="26.3315%" y="165" width="28.5135%" height="15" fill="rgb(242,17,10)"/><text x="26.5815%" y="175.50">type_check_crate</text></g><g><title>wf_checking (19,987,234 samples, 5.61%)</title><rect x="49.2328%" y="149" width="5.6123%" height="15" fill="rgb(242,107,0)"/><text x="49.4828%" y="159.50">wf_chec..</text></g><g><title>fn_abi_of_instance (720,928 samples, 0.20%)</title><rect x="55.4134%" y="149" width="0.2024%" height="15" fill="rgb(251,28,31)"/><text x="55.6634%" y="159.50"></text></g><g><title>codegen_module (2,373,747 samples, 0.67%)</title><rect x="55.0176%" y="165" width="0.6665%" height="15" fill="rgb(233,223,10)"/><text x="55.2676%" y="175.50"></text></g><g><title>optimized_mir (748,597 samples, 0.21%)</title><rect x="55.7414%" y="117" width="0.2102%" height="15" fill="rgb(215,21,27)"/><text x="55.9914%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,114,832 samples, 0.31%)</title><rect x="55.6907%" y="133" width="0.3130%" height="15" fill="rgb(232,23,21)"/><text x="55.9407%" y="143.50"></text></g><g><title>monomorphization_collector (1,171,303 samples, 0.33%)</title><rect x="55.6901%" y="149" width="0.3289%" height="15" fill="rgb(244,5,23)"/><text x="55.9401%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,313,894 samples, 0.37%)</title><rect x="55.6843%" y="165" width="0.3689%" height="15" fill="rgb(226,81,46)"/><text x="55.9343%" y="175.50"></text></g><g><title>codegen_crate (4,294,008 samples, 1.21%)</title><rect x="54.8515%" y="181" width="1.2057%" height="15" fill="rgb(247,70,30)"/><text x="55.1015%" y="191.50"></text></g><g><title>codegen_module_optimize (18,278,945 samples, 5.13%)</title><rect x="56.0573%" y="181" width="5.1326%" height="15" fill="rgb(212,68,19)"/><text x="56.3073%" y="191.50">codege..</text></g><g><title>LLVM_module_optimize (15,146,469 samples, 4.25%)</title><rect x="56.9368%" y="165" width="4.2530%" height="15" fill="rgb(240,187,13)"/><text x="57.1868%" y="175.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (8,623,087 samples, 2.42%)</title><rect x="61.7107%" y="165" width="2.4213%" height="15" fill="rgb(223,113,26)"/><text x="61.9607%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (21,638,723 samples, 6.08%)</title><rect x="64.1320%" y="165" width="6.0760%" height="15" fill="rgb(206,192,2)"/><text x="64.3820%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (21,279,408 samples, 5.98%)</title><rect x="64.2329%" y="149" width="5.9751%" height="15" fill="rgb(241,108,4)"/><text x="64.4829%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_perform_lto (32,534,745 samples, 9.14%)</title><rect x="61.1898%" y="181" width="9.1355%" height="15" fill="rgb(247,173,49)"/><text x="61.4398%" y="191.50">codegen_modul..</text></g><g><title>AST_validation (483,355 samples, 0.14%)</title><rect x="70.3835%" y="165" width="0.1357%" height="15" fill="rgb(224,114,35)"/><text x="70.6335%" y="175.50"></text></g><g><title>metadata_load_macro (371,604 samples, 0.10%)</title><rect x="75.4284%" y="133" width="0.1043%" height="15" fill="rgb(245,159,27)"/><text x="75.6784%" y="143.50"></text></g><g><title>macro_expand_crate (17,776,840 samples, 4.99%)</title><rect x="70.6085%" y="165" width="4.9916%" height="15" fill="rgb(245,172,44)"/><text x="70.8585%" y="175.50">macro_..</text></g><g><title>expand_crate (17,752,849 samples, 4.98%)</title><rect x="70.6152%" y="149" width="4.9849%" height="15" fill="rgb(236,23,11)"/><text x="70.8652%" y="159.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (777,909 samples, 0.22%)</title><rect x="75.6015%" y="165" width="0.2184%" height="15" fill="rgb(205,117,38)"/><text x="75.8515%" y="175.50"></text></g><g><title>late_resolve_crate (6,699,895 samples, 1.88%)</title><rect x="75.8992%" y="149" width="1.8813%" height="15" fill="rgb(237,72,25)"/><text x="76.1492%" y="159.50">l..</text></g><g><title>configure_and_expand (26,958,432 samples, 7.57%)</title><rect x="70.3253%" y="181" width="7.5697%" height="15" fill="rgb(244,70,9)"/><text x="70.5753%" y="191.50">configure_..</text></g><g><title>resolve_crate (7,390,083 samples, 2.08%)</title><rect x="75.8200%" y="165" width="2.0751%" height="15" fill="rgb(217,125,39)"/><text x="76.0700%" y="175.50">r..</text></g><g><title>drop_ast (455,975 samples, 0.13%)</title><rect x="77.8950%" y="181" width="0.1280%" height="15" fill="rgb(235,36,10)"/><text x="78.1450%" y="191.50"></text></g><g><title>early_lint_checks (583,227 samples, 0.16%)</title><rect x="78.0305%" y="181" width="0.1638%" height="15" fill="rgb(251,123,47)"/><text x="78.2805%" y="191.50"></text></g><g><title>free_global_ctxt (3,887,233 samples, 1.09%)</title><rect x="78.1943%" y="181" width="1.0915%" height="15" fill="rgb(221,13,13)"/><text x="78.4443%" y="191.50"></text></g><g><title>exported_symbols (400,055 samples, 0.11%)</title><rect x="80.3292%" y="165" width="0.1123%" height="15" fill="rgb(238,131,9)"/><text x="80.5792%" y="175.50"></text></g><g><title>layout_of (501,106 samples, 0.14%)</title><rect x="82.8127%" y="133" width="0.1407%" height="15" fill="rgb(211,50,8)"/><text x="83.0627%" y="143.50"></text></g><g><title>layout_of (2,229,006 samples, 0.63%)</title><rect x="82.4660%" y="149" width="0.6259%" height="15" fill="rgb(245,182,24)"/><text x="82.7160%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (429,084 samples, 0.12%)</title><rect x="82.9714%" y="133" width="0.1205%" height="15" fill="rgb(242,14,37)"/><text x="83.2214%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,254,163 samples, 2.04%)</title><rect x="83.0918%" y="149" width="2.0369%" height="15" fill="rgb(246,228,12)"/><text x="83.3418%" y="159.50">m..</text></g><g><title>optimized_mir (16,533,356 samples, 4.64%)</title><rect x="80.5423%" y="165" width="4.6424%" height="15" fill="rgb(213,55,15)"/><text x="80.7923%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (21,170,316 samples, 5.94%)</title><rect x="79.2858%" y="181" width="5.9445%" height="15" fill="rgb(209,9,3)"/><text x="79.5358%" y="191.50">generate..</text></g><g><title>hir_lowering (7,473,794 samples, 2.10%)</title><rect x="85.2302%" y="181" width="2.0986%" height="15" fill="rgb(230,59,30)"/><text x="85.4802%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (24,536,515 samples, 6.89%)</title><rect x="87.3343%" y="165" width="6.8897%" height="15" fill="rgb(209,121,21)"/><text x="87.5843%" y="175.50">finish_on..</text></g><g><title>link_crate (2,577,048 samples, 0.72%)</title><rect x="94.2239%" y="165" width="0.7236%" height="15" fill="rgb(220,109,13)"/><text x="94.4739%" y="175.50"></text></g><g><title>link_binary (2,520,138 samples, 0.71%)</title><rect x="94.2399%" y="149" width="0.7076%" height="15" fill="rgb(232,18,1)"/><text x="94.4899%" y="159.50"></text></g><g><title>link_rlib (1,910,521 samples, 0.54%)</title><rect x="94.4111%" y="133" width="0.5365%" height="15" fill="rgb(215,41,42)"/><text x="94.6611%" y="143.50"></text></g><g><title>link (27,143,614 samples, 7.62%)</title><rect x="87.3288%" y="181" width="7.6217%" height="15" fill="rgb(224,123,36)"/><text x="87.5788%" y="191.50">link</text></g><g><title>parse_crate (15,720,135 samples, 4.41%)</title><rect x="94.9505%" y="181" width="4.4141%" height="15" fill="rgb(240,125,3)"/><text x="95.2005%" y="191.50">parse..</text></g><g><title>prepare_outputs (387,524 samples, 0.11%)</title><rect x="99.3670%" y="181" width="0.1088%" height="15" fill="rgb(205,98,50)"/><text x="99.6170%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,310,445 samples, 0.37%)</title><rect x="99.4758%" y="181" width="0.3680%" height="15" fill="rgb(205,185,37)"/><text x="99.7258%" y="191.50"></text></g><g><title>all (356,135,767 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (356,135,767 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (500,256 samples, 0.14%)</title><rect x="99.8595%" y="181" width="0.1405%" height="15" fill="rgb(235,201,11)"/><text x="100.1095%" y="191.50"></text></g></svg></svg>