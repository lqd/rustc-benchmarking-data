<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (31,779,120 samples, 18.51%)</title><rect x="0.4540%" y="213" width="18.5062%" height="15" fill="rgb(227,0,7)"/><text x="0.7040%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (192,032 samples, 0.11%)</title><rect x="18.8484%" y="197" width="0.1118%" height="15" fill="rgb(217,0,24)"/><text x="19.0984%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (177,782 samples, 0.10%)</title><rect x="18.8567%" y="181" width="0.1035%" height="15" fill="rgb(221,193,54)"/><text x="19.1067%" y="191.50"></text></g><g><title>mir_const (687,908 samples, 0.40%)</title><rect x="21.5438%" y="149" width="0.4006%" height="15" fill="rgb(248,212,6)"/><text x="21.7938%" y="159.50"></text></g><g><title>unsafety_check_result (562,886 samples, 0.33%)</title><rect x="21.6166%" y="133" width="0.3278%" height="15" fill="rgb(208,68,35)"/><text x="21.8666%" y="143.50"></text></g><g><title>mir_built (494,356 samples, 0.29%)</title><rect x="21.6565%" y="117" width="0.2879%" height="15" fill="rgb(232,128,0)"/><text x="21.9065%" y="127.50"></text></g><g><title>thir_body (1,964,532 samples, 1.14%)</title><rect x="23.0781%" y="85" width="1.1440%" height="15" fill="rgb(207,160,47)"/><text x="23.3281%" y="95.50"></text></g><g><title>lit_to_const (236,331 samples, 0.14%)</title><rect x="24.0845%" y="69" width="0.1376%" height="15" fill="rgb(228,23,34)"/><text x="24.3345%" y="79.50"></text></g><g><title>mir_const_qualif (3,912,522 samples, 2.28%)</title><rect x="21.9444%" y="149" width="2.2784%" height="15" fill="rgb(218,30,26)"/><text x="22.1944%" y="159.50">m..</text></g><g><title>mir_const (3,790,591 samples, 2.21%)</title><rect x="22.0154%" y="133" width="2.2074%" height="15" fill="rgb(220,122,19)"/><text x="22.2654%" y="143.50">m..</text></g><g><title>unsafety_check_result (3,633,389 samples, 2.12%)</title><rect x="22.1070%" y="117" width="2.1159%" height="15" fill="rgb(250,228,42)"/><text x="22.3570%" y="127.50">u..</text></g><g><title>mir_built (3,525,889 samples, 2.05%)</title><rect x="22.1696%" y="101" width="2.0533%" height="15" fill="rgb(240,193,28)"/><text x="22.4196%" y="111.50">m..</text></g><g><title>mir_promoted (5,397,489 samples, 3.14%)</title><rect x="21.0798%" y="165" width="3.1432%" height="15" fill="rgb(216,20,37)"/><text x="21.3298%" y="175.50">mir..</text></g><g><title>MIR_borrow_checking (8,648,286 samples, 5.04%)</title><rect x="19.2962%" y="197" width="5.0362%" height="15" fill="rgb(206,188,39)"/><text x="19.5462%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (8,631,456 samples, 5.03%)</title><rect x="19.3060%" y="181" width="5.0264%" height="15" fill="rgb(217,207,13)"/><text x="19.5560%" y="191.50">mir_bo..</text></g><g><title>MIR_effect_checking (217,133 samples, 0.13%)</title><rect x="24.3325%" y="197" width="0.1264%" height="15" fill="rgb(231,73,38)"/><text x="24.5825%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (193,833 samples, 0.11%)</title><rect x="24.3460%" y="181" width="0.1129%" height="15" fill="rgb(225,20,46)"/><text x="24.5960%" y="191.50"></text></g><g><title>codegen_fn_attrs (222,462 samples, 0.13%)</title><rect x="24.8949%" y="165" width="0.1295%" height="15" fill="rgb(210,31,41)"/><text x="25.1449%" y="175.50"></text></g><g><title>check_mod_attrs (777,948 samples, 0.45%)</title><rect x="24.5716%" y="181" width="0.4530%" height="15" fill="rgb(221,200,47)"/><text x="24.8216%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (210,384 samples, 0.12%)</title><rect x="25.1222%" y="181" width="0.1225%" height="15" fill="rgb(226,26,5)"/><text x="25.3722%" y="191.50"></text></g><g><title>misc_checking_1 (1,237,324 samples, 0.72%)</title><rect x="24.5489%" y="197" width="0.7205%" height="15" fill="rgb(249,33,26)"/><text x="24.7989%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (176,272 samples, 0.10%)</title><rect x="25.2702%" y="181" width="0.1026%" height="15" fill="rgb(235,183,28)"/><text x="25.5202%" y="191.50"></text></g><g><title>misc_checking_2 (316,703 samples, 0.18%)</title><rect x="25.2694%" y="197" width="0.1844%" height="15" fill="rgb(221,5,38)"/><text x="25.5194%" y="207.50"></text></g><g><title>eval_to_const_value_raw (4,165,706 samples, 2.43%)</title><rect x="26.4299%" y="85" width="2.4259%" height="15" fill="rgb(247,18,42)"/><text x="26.6799%" y="95.50">ev..</text></g><g><title>eval_to_const_value_raw (4,164,186 samples, 2.42%)</title><rect x="26.4308%" y="69" width="2.4250%" height="15" fill="rgb(241,131,45)"/><text x="26.6808%" y="79.50">ev..</text></g><g><title>eval_to_allocation_raw (4,160,516 samples, 2.42%)</title><rect x="26.4329%" y="53" width="2.4228%" height="15" fill="rgb(249,31,29)"/><text x="26.6829%" y="63.50">ev..</text></g><g><title>promoted_mir (899,161 samples, 0.52%)</title><rect x="28.3321%" y="37" width="0.5236%" height="15" fill="rgb(225,111,53)"/><text x="28.5821%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,313,199 samples, 3.09%)</title><rect x="25.7637%" y="149" width="3.0941%" height="15" fill="rgb(238,160,17)"/><text x="26.0137%" y="159.50">eva..</text></g><g><title>eval_to_const_value_raw (5,303,169 samples, 3.09%)</title><rect x="25.7696%" y="133" width="3.0882%" height="15" fill="rgb(214,148,48)"/><text x="26.0196%" y="143.50">eva..</text></g><g><title>eval_to_allocation_raw (5,295,649 samples, 3.08%)</title><rect x="25.7740%" y="117" width="3.0839%" height="15" fill="rgb(232,36,49)"/><text x="26.0240%" y="127.50">eva..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,189,706 samples, 2.44%)</title><rect x="26.4180%" y="101" width="2.4398%" height="15" fill="rgb(209,103,24)"/><text x="26.6680%" y="111.50">tr..</text></g><g><title>crate_lints (5,750,964 samples, 3.35%)</title><rect x="25.5584%" y="165" width="3.3490%" height="15" fill="rgb(229,88,8)"/><text x="25.8084%" y="175.50">cra..</text></g><g><title>lint_checking (6,318,360 samples, 3.68%)</title><rect x="25.5575%" y="181" width="3.6794%" height="15" fill="rgb(213,181,19)"/><text x="25.8075%" y="191.50">lint..</text></g><g><title>module_lints (565,846 samples, 0.33%)</title><rect x="28.9074%" y="165" width="0.3295%" height="15" fill="rgb(254,191,54)"/><text x="29.1574%" y="175.50"></text></g><g><title>lint_mod (562,926 samples, 0.33%)</title><rect x="28.9091%" y="149" width="0.3278%" height="15" fill="rgb(241,83,37)"/><text x="29.1591%" y="159.50"></text></g><g><title>privacy_checking_modules (337,974 samples, 0.20%)</title><rect x="29.2795%" y="181" width="0.1968%" height="15" fill="rgb(233,36,39)"/><text x="29.5295%" y="191.50"></text></g><g><title>check_mod_privacy (336,144 samples, 0.20%)</title><rect x="29.2806%" y="165" width="0.1957%" height="15" fill="rgb(226,3,54)"/><text x="29.5306%" y="175.50"></text></g><g><title>misc_checking_3 (6,915,706 samples, 4.03%)</title><rect x="25.4539%" y="197" width="4.0273%" height="15" fill="rgb(245,192,40)"/><text x="25.7039%" y="207.50">misc..</text></g><g><title>associated_items (199,133 samples, 0.12%)</title><rect x="30.2930%" y="117" width="0.1160%" height="15" fill="rgb(238,167,29)"/><text x="30.5430%" y="127.50"></text></g><g><title>typeck (1,593,437 samples, 0.93%)</title><rect x="29.9566%" y="133" width="0.9279%" height="15" fill="rgb(232,182,51)"/><text x="30.2066%" y="143.50"></text></g><g><title>item_bodies_checking (2,199,464 samples, 1.28%)</title><rect x="29.6045%" y="181" width="1.2808%" height="15" fill="rgb(231,60,39)"/><text x="29.8545%" y="191.50"></text></g><g><title>typeck_item_bodies (2,197,874 samples, 1.28%)</title><rect x="29.6054%" y="165" width="1.2799%" height="15" fill="rgb(208,69,12)"/><text x="29.8554%" y="175.50"></text></g><g><title>typeck (2,191,274 samples, 1.28%)</title><rect x="29.6093%" y="149" width="1.2761%" height="15" fill="rgb(235,93,37)"/><text x="29.8593%" y="159.50"></text></g><g><title>item_types_checking (5,805,414 samples, 3.38%)</title><rect x="30.8854%" y="181" width="3.3807%" height="15" fill="rgb(213,116,39)"/><text x="31.1354%" y="191.50">ite..</text></g><g><title>check_mod_item_types (5,800,713 samples, 3.38%)</title><rect x="30.8881%" y="165" width="3.3780%" height="15" fill="rgb(222,207,29)"/><text x="31.1381%" y="175.50">che..</text></g><g><title>typeck (5,713,592 samples, 3.33%)</title><rect x="30.9388%" y="149" width="3.3272%" height="15" fill="rgb(206,96,30)"/><text x="31.1888%" y="159.50">typ..</text></g><g><title>type_collecting (654,267 samples, 0.38%)</title><rect x="34.2670%" y="181" width="0.3810%" height="15" fill="rgb(218,138,4)"/><text x="34.5170%" y="191.50"></text></g><g><title>collect_mod_item_types (642,137 samples, 0.37%)</title><rect x="34.2740%" y="165" width="0.3739%" height="15" fill="rgb(250,191,14)"/><text x="34.5240%" y="175.50"></text></g><g><title>param_env (180,823 samples, 0.11%)</title><rect x="35.1466%" y="149" width="0.1053%" height="15" fill="rgb(239,60,40)"/><text x="35.3966%" y="159.50"></text></g><g><title>region_scope_tree (494,886 samples, 0.29%)</title><rect x="35.2519%" y="149" width="0.2882%" height="15" fill="rgb(206,27,48)"/><text x="35.5019%" y="159.50"></text></g><g><title>check_item_well_formed (1,376,176 samples, 0.80%)</title><rect x="34.7393%" y="165" width="0.8014%" height="15" fill="rgb(225,35,8)"/><text x="34.9893%" y="175.50"></text></g><g><title>analysis (28,578,566 samples, 16.64%)</title><rect x="18.9602%" y="213" width="16.6424%" height="15" fill="rgb(250,213,24)"/><text x="19.2102%" y="223.50">analysis</text></g><g><title>type_check_crate (10,511,916 samples, 6.12%)</title><rect x="29.4811%" y="197" width="6.1215%" height="15" fill="rgb(247,123,22)"/><text x="29.7311%" y="207.50">type_che..</text></g><g><title>wf_checking (1,638,648 samples, 0.95%)</title><rect x="34.6484%" y="181" width="0.9542%" height="15" fill="rgb(231,138,38)"/><text x="34.8984%" y="191.50"></text></g><g><title>fn_abi_of_instance (445,356 samples, 0.26%)</title><rect x="36.8768%" y="181" width="0.2593%" height="15" fill="rgb(231,145,46)"/><text x="37.1268%" y="191.50"></text></g><g><title>codegen_module (2,000,582 samples, 1.17%)</title><rect x="36.0748%" y="197" width="1.1650%" height="15" fill="rgb(251,118,11)"/><text x="36.3248%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (236,413 samples, 0.14%)</title><rect x="37.5318%" y="133" width="0.1377%" height="15" fill="rgb(217,147,25)"/><text x="37.7818%" y="143.50"></text></g><g><title>optimized_mir (529,946 samples, 0.31%)</title><rect x="37.4299%" y="149" width="0.3086%" height="15" fill="rgb(247,81,37)"/><text x="37.6799%" y="159.50"></text></g><g><title>impl_parent (206,733 samples, 0.12%)</title><rect x="38.0488%" y="117" width="0.1204%" height="15" fill="rgb(209,12,38)"/><text x="38.2988%" y="127.50"></text></g><g><title>specialization_graph_of (1,137,153 samples, 0.66%)</title><rect x="37.9193%" y="133" width="0.6622%" height="15" fill="rgb(227,1,9)"/><text x="38.1693%" y="143.50"></text></g><g><title>impl_trait_ref (708,008 samples, 0.41%)</title><rect x="38.1692%" y="117" width="0.4123%" height="15" fill="rgb(248,47,43)"/><text x="38.4192%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (653,928 samples, 0.38%)</title><rect x="38.2007%" y="101" width="0.3808%" height="15" fill="rgb(221,10,30)"/><text x="38.4507%" y="111.50"></text></g><g><title>resolve_instance (1,486,196 samples, 0.87%)</title><rect x="37.7385%" y="149" width="0.8655%" height="15" fill="rgb(210,229,1)"/><text x="37.9885%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (2,420,217 samples, 1.41%)</title><rect x="37.2541%" y="165" width="1.4094%" height="15" fill="rgb(222,148,37)"/><text x="37.5041%" y="175.50"></text></g><g><title>monomorphization_collector (2,442,508 samples, 1.42%)</title><rect x="37.2529%" y="181" width="1.4224%" height="15" fill="rgb(234,67,33)"/><text x="37.5029%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (2,650,110 samples, 1.54%)</title><rect x="37.2402%" y="197" width="1.5433%" height="15" fill="rgb(247,98,35)"/><text x="37.4902%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (185,832 samples, 0.11%)</title><rect x="38.6753%" y="181" width="0.1082%" height="15" fill="rgb(247,138,52)"/><text x="38.9253%" y="191.50"></text></g><g><title>codegen_crate (5,467,311 samples, 3.18%)</title><rect x="35.6086%" y="213" width="3.1838%" height="15" fill="rgb(213,79,30)"/><text x="35.8586%" y="223.50">cod..</text></g><g><title>codegen_module_optimize (16,440,481 samples, 9.57%)</title><rect x="38.7925%" y="213" width="9.5739%" height="15" fill="rgb(246,177,23)"/><text x="39.0425%" y="223.50">codegen_module..</text></g><g><title>LLVM_module_optimize (14,822,083 samples, 8.63%)</title><rect x="39.7349%" y="197" width="8.6315%" height="15" fill="rgb(230,62,27)"/><text x="39.9849%" y="207.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (13,015,063 samples, 7.58%)</title><rect x="49.0386%" y="197" width="7.5792%" height="15" fill="rgb(216,154,8)"/><text x="49.2886%" y="207.50">LLVM_lto_o..</text></g><g><title>LLVM_module_codegen (15,063,046 samples, 8.77%)</title><rect x="56.6178%" y="197" width="8.7718%" height="15" fill="rgb(244,35,45)"/><text x="56.8678%" y="207.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (14,829,074 samples, 8.64%)</title><rect x="56.7541%" y="181" width="8.6355%" height="15" fill="rgb(251,115,12)"/><text x="57.0041%" y="191.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (335,314 samples, 0.20%)</title><rect x="65.3896%" y="197" width="0.1953%" height="15" fill="rgb(240,54,50)"/><text x="65.6396%" y="207.50"></text></g><g><title>codegen_module_perform_lto (29,624,517 samples, 17.25%)</title><rect x="48.3664%" y="213" width="17.2515%" height="15" fill="rgb(233,84,52)"/><text x="48.6164%" y="223.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (189,452 samples, 0.11%)</title><rect x="74.9317%" y="165" width="0.1103%" height="15" fill="rgb(207,117,47)"/><text x="75.1817%" y="175.50"></text></g><g><title>macro_expand_crate (16,119,227 samples, 9.39%)</title><rect x="65.9542%" y="197" width="9.3868%" height="15" fill="rgb(249,43,39)"/><text x="66.2042%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (16,103,977 samples, 9.38%)</title><rect x="65.9631%" y="181" width="9.3780%" height="15" fill="rgb(209,38,44)"/><text x="66.2131%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (513,536 samples, 0.30%)</title><rect x="75.0420%" y="165" width="0.2991%" height="15" fill="rgb(236,212,23)"/><text x="75.2920%" y="175.50"></text></g><g><title>finalize_imports (266,503 samples, 0.16%)</title><rect x="75.4067%" y="181" width="0.1552%" height="15" fill="rgb(242,79,21)"/><text x="75.6567%" y="191.50"></text></g><g><title>late_resolve_crate (470,285 samples, 0.27%)</title><rect x="75.5697%" y="181" width="0.2739%" height="15" fill="rgb(211,96,35)"/><text x="75.8197%" y="191.50"></text></g><g><title>configure_and_expand (17,713,195 samples, 10.32%)</title><rect x="65.6179%" y="213" width="10.3151%" height="15" fill="rgb(253,215,40)"/><text x="65.8679%" y="223.50">configure_and_e..</text></g><g><title>resolve_crate (912,160 samples, 0.53%)</title><rect x="75.4018%" y="197" width="0.5312%" height="15" fill="rgb(211,81,21)"/><text x="75.6518%" y="207.50"></text></g><g><title>drop_ast (382,374 samples, 0.22%)</title><rect x="75.9330%" y="213" width="0.2227%" height="15" fill="rgb(208,190,38)"/><text x="76.1830%" y="223.50"></text></g><g><title>early_lint_checks (1,002,251 samples, 0.58%)</title><rect x="76.1639%" y="213" width="0.5836%" height="15" fill="rgb(235,213,38)"/><text x="76.4139%" y="223.50"></text></g><g><title>free_global_ctxt (1,451,246 samples, 0.85%)</title><rect x="76.7476%" y="213" width="0.8451%" height="15" fill="rgb(237,122,38)"/><text x="76.9976%" y="223.50"></text></g><g><title>optimized_mir (588,357 samples, 0.34%)</title><rect x="79.2684%" y="197" width="0.3426%" height="15" fill="rgb(244,218,35)"/><text x="79.5184%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (197,582 samples, 0.12%)</title><rect x="79.4960%" y="181" width="0.1151%" height="15" fill="rgb(240,68,47)"/><text x="79.7460%" y="191.50"></text></g><g><title>generate_crate_metadata (3,494,518 samples, 2.03%)</title><rect x="77.5927%" y="213" width="2.0350%" height="15" fill="rgb(210,16,53)"/><text x="77.8427%" y="223.50">g..</text></g><g><title>hir_lowering (2,748,790 samples, 1.60%)</title><rect x="79.6277%" y="213" width="1.6007%" height="15" fill="rgb(235,124,12)"/><text x="79.8777%" y="223.50"></text></g><g><title>finish_ongoing_codegen (29,332,343 samples, 17.08%)</title><rect x="81.2365%" y="197" width="17.0814%" height="15" fill="rgb(224,169,11)"/><text x="81.4865%" y="207.50">finish_ongoing_codegen</text></g><g><title>link_crate (906,110 samples, 0.53%)</title><rect x="98.3178%" y="197" width="0.5277%" height="15" fill="rgb(250,166,2)"/><text x="98.5678%" y="207.50"></text></g><g><title>link_binary (901,229 samples, 0.52%)</title><rect x="98.3207%" y="181" width="0.5248%" height="15" fill="rgb(242,216,29)"/><text x="98.5707%" y="191.50"></text></g><g><title>link_rlib (630,407 samples, 0.37%)</title><rect x="98.4784%" y="165" width="0.3671%" height="15" fill="rgb(230,116,27)"/><text x="98.7284%" y="175.50"></text></g><g><title>link (30,262,534 samples, 17.62%)</title><rect x="81.2284%" y="213" width="17.6230%" height="15" fill="rgb(228,99,48)"/><text x="81.4784%" y="223.50">link</text></g><g><title>parse_crate (638,637 samples, 0.37%)</title><rect x="98.8514%" y="213" width="0.3719%" height="15" fill="rgb(253,11,6)"/><text x="99.1014%" y="223.50"></text></g><g><title>prepare_outputs (296,204 samples, 0.17%)</title><rect x="99.2281%" y="213" width="0.1725%" height="15" fill="rgb(247,143,39)"/><text x="99.4781%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (415,475 samples, 0.24%)</title><rect x="99.4006%" y="213" width="0.2419%" height="15" fill="rgb(236,97,10)"/><text x="99.6506%" y="223.50"></text></g><g><title>all (171,721,394 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (171,721,394 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (467,905 samples, 0.27%)</title><rect x="99.7275%" y="213" width="0.2725%" height="15" fill="rgb(220,129,5)"/><text x="99.9775%" y="223.50"></text></g></svg></svg>