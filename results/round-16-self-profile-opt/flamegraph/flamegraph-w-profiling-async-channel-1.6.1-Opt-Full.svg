<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,198,321 samples, 8.66%)</title><rect x="0.3312%" y="181" width="8.6574%" height="15" fill="rgb(227,0,7)"/><text x="0.5812%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (194,132 samples, 0.12%)</title><rect x="8.8702%" y="165" width="0.1184%" height="15" fill="rgb(217,0,24)"/><text x="9.1202%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (175,742 samples, 0.11%)</title><rect x="8.8814%" y="149" width="0.1072%" height="15" fill="rgb(221,193,54)"/><text x="9.1314%" y="159.50"></text></g><g><title>param_env (199,740 samples, 0.12%)</title><rect x="16.7574%" y="101" width="0.1218%" height="15" fill="rgb(248,212,6)"/><text x="17.0074%" y="111.50"></text></g><g><title>item_attrs (547,137 samples, 0.33%)</title><rect x="17.1884%" y="69" width="0.3336%" height="15" fill="rgb(208,68,35)"/><text x="17.4384%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (540,587 samples, 0.33%)</title><rect x="17.1924%" y="53" width="0.3296%" height="15" fill="rgb(232,128,0)"/><text x="17.4424%" y="63.50"></text></g><g><title>codegen_fn_attrs (625,118 samples, 0.38%)</title><rect x="17.1461%" y="85" width="0.3812%" height="15" fill="rgb(207,160,47)"/><text x="17.3961%" y="95.50"></text></g><g><title>adt_drop_tys (172,573 samples, 0.11%)</title><rect x="19.0679%" y="53" width="0.1052%" height="15" fill="rgb(228,23,34)"/><text x="19.3179%" y="63.50"></text></g><g><title>needs_drop_raw (941,283 samples, 0.57%)</title><rect x="19.0219%" y="69" width="0.5739%" height="15" fill="rgb(218,30,26)"/><text x="19.2719%" y="79.50"></text></g><g><title>is_copy_raw (693,220 samples, 0.42%)</title><rect x="19.1731%" y="53" width="0.4227%" height="15" fill="rgb(220,122,19)"/><text x="19.4231%" y="63.50"></text></g><g><title>evaluate_obligation (609,939 samples, 0.37%)</title><rect x="19.2239%" y="37" width="0.3719%" height="15" fill="rgb(250,228,42)"/><text x="19.4739%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (178,722 samples, 0.11%)</title><rect x="19.6753%" y="53" width="0.1090%" height="15" fill="rgb(240,193,28)"/><text x="19.9253%" y="63.50"></text></g><g><title>specialization_graph_of (167,722 samples, 0.10%)</title><rect x="19.7971%" y="53" width="0.1023%" height="15" fill="rgb(216,20,37)"/><text x="20.0471%" y="63.50"></text></g><g><title>resolve_instance (560,296 samples, 0.34%)</title><rect x="19.5962%" y="69" width="0.3416%" height="15" fill="rgb(206,188,39)"/><text x="19.8462%" y="79.50"></text></g><g><title>thir_body (896,442 samples, 0.55%)</title><rect x="19.9531%" y="69" width="0.5466%" height="15" fill="rgb(217,207,13)"/><text x="20.2031%" y="79.50"></text></g><g><title>mir_const (6,943,367 samples, 4.23%)</title><rect x="16.2753%" y="117" width="4.2337%" height="15" fill="rgb(231,73,38)"/><text x="16.5253%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (5,952,920 samples, 3.63%)</title><rect x="16.8792%" y="101" width="3.6298%" height="15" fill="rgb(225,20,46)"/><text x="17.1292%" y="111.50">unsa..</text></g><g><title>mir_built (4,890,022 samples, 2.98%)</title><rect x="17.5273%" y="85" width="2.9817%" height="15" fill="rgb(210,31,41)"/><text x="17.7773%" y="95.50">mir..</text></g><g><title>mir_promoted (7,782,607 samples, 4.75%)</title><rect x="15.7891%" y="133" width="4.7454%" height="15" fill="rgb(221,200,47)"/><text x="16.0391%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (398,763 samples, 0.24%)</title><rect x="20.5345%" y="133" width="0.2431%" height="15" fill="rgb(226,26,5)"/><text x="20.7845%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (299,955 samples, 0.18%)</title><rect x="20.7777%" y="133" width="0.1829%" height="15" fill="rgb(249,33,26)"/><text x="21.0277%" y="143.50"></text></g><g><title>normalize_projection_ty (166,443 samples, 0.10%)</title><rect x="20.8591%" y="117" width="0.1015%" height="15" fill="rgb(235,183,28)"/><text x="21.1091%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,261,644 samples, 0.77%)</title><rect x="21.0212%" y="133" width="0.7693%" height="15" fill="rgb(221,5,38)"/><text x="21.2712%" y="143.50"></text></g><g><title>MIR_borrow_checking (20,761,911 samples, 12.66%)</title><rect x="9.1346%" y="165" width="12.6595%" height="15" fill="rgb(247,18,42)"/><text x="9.3846%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,645,090 samples, 12.59%)</title><rect x="9.2058%" y="149" width="12.5883%" height="15" fill="rgb(241,131,45)"/><text x="9.4558%" y="159.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (200,203 samples, 0.12%)</title><rect x="22.1030%" y="117" width="0.1221%" height="15" fill="rgb(249,31,29)"/><text x="22.3530%" y="127.50"></text></g><g><title>codegen_fn_attrs (344,745 samples, 0.21%)</title><rect x="22.0242%" y="133" width="0.2102%" height="15" fill="rgb(225,111,53)"/><text x="22.2742%" y="143.50"></text></g><g><title>check_mod_attrs (536,236 samples, 0.33%)</title><rect x="21.9075%" y="149" width="0.3270%" height="15" fill="rgb(238,160,17)"/><text x="22.1575%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (483,636 samples, 0.29%)</title><rect x="22.3330%" y="149" width="0.2949%" height="15" fill="rgb(214,148,48)"/><text x="22.5830%" y="159.50"></text></g><g><title>misc_checking_1 (1,240,904 samples, 0.76%)</title><rect x="21.8994%" y="165" width="0.7566%" height="15" fill="rgb(232,36,49)"/><text x="22.1494%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (310,933 samples, 0.19%)</title><rect x="22.6568%" y="149" width="0.1896%" height="15" fill="rgb(209,103,24)"/><text x="22.9068%" y="159.50"></text></g><g><title>check_mod_liveness (238,662 samples, 0.15%)</title><rect x="22.7009%" y="133" width="0.1455%" height="15" fill="rgb(229,88,8)"/><text x="22.9509%" y="143.50"></text></g><g><title>misc_checking_2 (795,008 samples, 0.48%)</title><rect x="22.6560%" y="165" width="0.4848%" height="15" fill="rgb(213,181,19)"/><text x="22.9060%" y="175.50"></text></g><g><title>match_checking (482,725 samples, 0.29%)</title><rect x="22.8464%" y="149" width="0.2943%" height="15" fill="rgb(254,191,54)"/><text x="23.0964%" y="159.50"></text></g><g><title>check_match (455,415 samples, 0.28%)</title><rect x="22.8631%" y="133" width="0.2777%" height="15" fill="rgb(241,83,37)"/><text x="23.1131%" y="143.50"></text></g><g><title>check_private_in_public (185,262 samples, 0.11%)</title><rect x="23.1456%" y="149" width="0.1130%" height="15" fill="rgb(233,36,39)"/><text x="23.3956%" y="159.50"></text></g><g><title>codegen_fn_attrs (284,633 samples, 0.17%)</title><rect x="23.4092%" y="133" width="0.1736%" height="15" fill="rgb(226,3,54)"/><text x="23.6592%" y="143.50"></text></g><g><title>death_checking (656,697 samples, 0.40%)</title><rect x="23.2585%" y="149" width="0.4004%" height="15" fill="rgb(245,192,40)"/><text x="23.5085%" y="159.50"></text></g><g><title>crate_lints (1,833,210 samples, 1.12%)</title><rect x="23.6598%" y="133" width="1.1178%" height="15" fill="rgb(238,167,29)"/><text x="23.9098%" y="143.50"></text></g><g><title>type_of (1,065,012 samples, 0.65%)</title><rect x="24.1282%" y="117" width="0.6494%" height="15" fill="rgb(232,182,51)"/><text x="24.3782%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (828,631 samples, 0.51%)</title><rect x="24.2723%" y="101" width="0.5053%" height="15" fill="rgb(231,60,39)"/><text x="24.5223%" y="111.50"></text></g><g><title>lint_checking (2,151,473 samples, 1.31%)</title><rect x="23.6589%" y="149" width="1.3119%" height="15" fill="rgb(208,69,12)"/><text x="23.9089%" y="159.50"></text></g><g><title>module_lints (316,843 samples, 0.19%)</title><rect x="24.7776%" y="133" width="0.1932%" height="15" fill="rgb(235,93,37)"/><text x="25.0276%" y="143.50"></text></g><g><title>lint_mod (314,663 samples, 0.19%)</title><rect x="24.7789%" y="117" width="0.1919%" height="15" fill="rgb(213,116,39)"/><text x="25.0289%" y="127.50"></text></g><g><title>privacy_access_levels (252,073 samples, 0.15%)</title><rect x="24.9708%" y="149" width="0.1537%" height="15" fill="rgb(222,207,29)"/><text x="25.2208%" y="159.50"></text></g><g><title>privacy_checking_modules (695,147 samples, 0.42%)</title><rect x="25.1245%" y="149" width="0.4239%" height="15" fill="rgb(206,96,30)"/><text x="25.3745%" y="159.50"></text></g><g><title>check_mod_privacy (693,667 samples, 0.42%)</title><rect x="25.1254%" y="133" width="0.4230%" height="15" fill="rgb(218,138,4)"/><text x="25.3754%" y="143.50"></text></g><g><title>misc_checking_3 (3,960,442 samples, 2.41%)</title><rect x="23.1407%" y="165" width="2.4149%" height="15" fill="rgb(250,191,14)"/><text x="23.3907%" y="175.50">mi..</text></g><g><title>impl_trait_ref (164,962 samples, 0.10%)</title><rect x="25.7116%" y="69" width="0.1006%" height="15" fill="rgb(239,60,40)"/><text x="25.9616%" y="79.50"></text></g><g><title>adt_destructor (335,964 samples, 0.20%)</title><rect x="25.6267%" y="117" width="0.2049%" height="15" fill="rgb(206,27,48)"/><text x="25.8767%" y="127.50"></text></g><g><title>coherent_trait (329,724 samples, 0.20%)</title><rect x="25.6305%" y="101" width="0.2010%" height="15" fill="rgb(225,35,8)"/><text x="25.8805%" y="111.50"></text></g><g><title>specialization_graph_of (327,824 samples, 0.20%)</title><rect x="25.6316%" y="85" width="0.1999%" height="15" fill="rgb(250,213,24)"/><text x="25.8816%" y="95.50"></text></g><g><title>impl_parent (2,294,036 samples, 1.40%)</title><rect x="28.4044%" y="101" width="1.3988%" height="15" fill="rgb(247,123,22)"/><text x="28.6544%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,328,678 samples, 0.81%)</title><rect x="28.9931%" y="85" width="0.8102%" height="15" fill="rgb(231,138,38)"/><text x="29.2431%" y="95.50"></text></g><g><title>impl_trait_ref (4,915,731 samples, 3.00%)</title><rect x="29.8032%" y="101" width="2.9974%" height="15" fill="rgb(231,145,46)"/><text x="30.0532%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,963,523 samples, 2.42%)</title><rect x="30.3838%" y="85" width="2.4167%" height="15" fill="rgb(251,118,11)"/><text x="30.6338%" y="95.50">me..</text></g><g><title>coherent_trait (12,681,575 samples, 7.73%)</title><rect x="25.6013%" y="133" width="7.7325%" height="15" fill="rgb(217,147,25)"/><text x="25.8513%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (12,151,620 samples, 7.41%)</title><rect x="25.9245%" y="117" width="7.4094%" height="15" fill="rgb(247,81,37)"/><text x="26.1745%" y="127.50">specializa..</text></g><g><title>trait_impls_of (872,819 samples, 0.53%)</title><rect x="32.8017%" y="101" width="0.5322%" height="15" fill="rgb(209,12,38)"/><text x="33.0517%" y="111.50"></text></g><g><title>implementations_of_trait (231,573 samples, 0.14%)</title><rect x="33.1927%" y="85" width="0.1412%" height="15" fill="rgb(227,1,9)"/><text x="33.4427%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (174,082 samples, 0.11%)</title><rect x="33.2277%" y="69" width="0.1061%" height="15" fill="rgb(248,47,43)"/><text x="33.4777%" y="79.50"></text></g><g><title>coherence_checking (12,758,545 samples, 7.78%)</title><rect x="25.5892%" y="149" width="7.7795%" height="15" fill="rgb(221,10,30)"/><text x="25.8392%" y="159.50">coherence_c..</text></g><g><title>associated_item (213,553 samples, 0.13%)</title><rect x="44.2479%" y="85" width="0.1302%" height="15" fill="rgb(210,229,1)"/><text x="44.4979%" y="95.50"></text></g><g><title>associated_items (342,804 samples, 0.21%)</title><rect x="44.1839%" y="101" width="0.2090%" height="15" fill="rgb(222,148,37)"/><text x="44.4339%" y="111.50"></text></g><g><title>adt_dtorck_constraint (339,483 samples, 0.21%)</title><rect x="44.7220%" y="69" width="0.2070%" height="15" fill="rgb(234,67,33)"/><text x="44.9720%" y="79.50"></text></g><g><title>dropck_outlives (890,807 samples, 0.54%)</title><rect x="44.4269%" y="101" width="0.5432%" height="15" fill="rgb(247,98,35)"/><text x="44.6769%" y="111.50"></text></g><g><title>adt_dtorck_constraint (648,726 samples, 0.40%)</title><rect x="44.5745%" y="85" width="0.3956%" height="15" fill="rgb(247,138,52)"/><text x="44.8245%" y="95.50"></text></g><g><title>evaluate_obligation (1,083,260 samples, 0.66%)</title><rect x="44.9701%" y="101" width="0.6605%" height="15" fill="rgb(213,79,30)"/><text x="45.2201%" y="111.50"></text></g><g><title>trait_impls_of (272,843 samples, 0.17%)</title><rect x="45.4642%" y="85" width="0.1664%" height="15" fill="rgb(246,177,23)"/><text x="45.7142%" y="95.50"></text></g><g><title>method_autoderef_steps (354,664 samples, 0.22%)</title><rect x="45.9393%" y="101" width="0.2163%" height="15" fill="rgb(230,62,27)"/><text x="46.1893%" y="111.50"></text></g><g><title>predicates_of (289,486 samples, 0.18%)</title><rect x="46.2564%" y="101" width="0.1765%" height="15" fill="rgb(216,154,8)"/><text x="46.5064%" y="111.50"></text></g><g><title>predicates_defined_on (200,646 samples, 0.12%)</title><rect x="46.3106%" y="85" width="0.1223%" height="15" fill="rgb(244,35,45)"/><text x="46.5606%" y="95.50"></text></g><g><title>item_bodies_checking (21,524,829 samples, 13.12%)</title><rect x="33.3931%" y="149" width="13.1247%" height="15" fill="rgb(251,115,12)"/><text x="33.6431%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,522,669 samples, 13.12%)</title><rect x="33.3944%" y="133" width="13.1234%" height="15" fill="rgb(240,54,50)"/><text x="33.6444%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (21,441,159 samples, 13.07%)</title><rect x="33.4441%" y="117" width="13.0737%" height="15" fill="rgb(233,84,52)"/><text x="33.6941%" y="127.50">typeck</text></g><g><title>item_types_checking (1,140,162 samples, 0.70%)</title><rect x="46.5178%" y="149" width="0.6952%" height="15" fill="rgb(207,117,47)"/><text x="46.7678%" y="159.50"></text></g><g><title>check_mod_item_types (1,138,022 samples, 0.69%)</title><rect x="46.5191%" y="133" width="0.6939%" height="15" fill="rgb(249,43,39)"/><text x="46.7691%" y="143.50"></text></g><g><title>fn_sig (317,293 samples, 0.19%)</title><rect x="47.3767%" y="117" width="0.1935%" height="15" fill="rgb(209,38,44)"/><text x="47.6267%" y="127.50"></text></g><g><title>named_region_map (195,612 samples, 0.12%)</title><rect x="47.6986%" y="101" width="0.1193%" height="15" fill="rgb(236,212,23)"/><text x="47.9486%" y="111.50"></text></g><g><title>resolve_lifetimes (176,212 samples, 0.11%)</title><rect x="47.7104%" y="85" width="0.1074%" height="15" fill="rgb(242,79,21)"/><text x="47.9604%" y="95.50"></text></g><g><title>generics_of (424,594 samples, 0.26%)</title><rect x="47.5702%" y="117" width="0.2589%" height="15" fill="rgb(211,96,35)"/><text x="47.8202%" y="127.50"></text></g><g><title>explicit_predicates_of (222,221 samples, 0.14%)</title><rect x="47.9666%" y="85" width="0.1355%" height="15" fill="rgb(253,215,40)"/><text x="48.2166%" y="95.50"></text></g><g><title>predicates_of (628,805 samples, 0.38%)</title><rect x="47.8773%" y="117" width="0.3834%" height="15" fill="rgb(211,81,21)"/><text x="48.1273%" y="127.50"></text></g><g><title>predicates_defined_on (576,153 samples, 0.35%)</title><rect x="47.9094%" y="101" width="0.3513%" height="15" fill="rgb(208,190,38)"/><text x="48.1594%" y="111.50"></text></g><g><title>inferred_outlives_of (260,062 samples, 0.16%)</title><rect x="48.1021%" y="85" width="0.1586%" height="15" fill="rgb(235,213,38)"/><text x="48.3521%" y="95.50"></text></g><g><title>inferred_outlives_crate (240,452 samples, 0.15%)</title><rect x="48.1141%" y="69" width="0.1466%" height="15" fill="rgb(237,122,38)"/><text x="48.3641%" y="79.50"></text></g><g><title>type_collecting (1,830,069 samples, 1.12%)</title><rect x="47.2143%" y="149" width="1.1159%" height="15" fill="rgb(244,218,35)"/><text x="47.4643%" y="159.50"></text></g><g><title>collect_mod_item_types (1,822,279 samples, 1.11%)</title><rect x="47.2190%" y="133" width="1.1111%" height="15" fill="rgb(240,68,47)"/><text x="47.4690%" y="143.50"></text></g><g><title>evaluate_obligation (641,129 samples, 0.39%)</title><rect x="49.8649%" y="117" width="0.3909%" height="15" fill="rgb(210,16,53)"/><text x="50.1149%" y="127.50"></text></g><g><title>implied_outlives_bounds (229,894 samples, 0.14%)</title><rect x="50.2681%" y="117" width="0.1402%" height="15" fill="rgb(235,124,12)"/><text x="50.5181%" y="127.50"></text></g><g><title>param_env (312,993 samples, 0.19%)</title><rect x="50.4083%" y="117" width="0.1908%" height="15" fill="rgb(224,169,11)"/><text x="50.6583%" y="127.50"></text></g><g><title>region_scope_tree (373,364 samples, 0.23%)</title><rect x="50.6200%" y="117" width="0.2277%" height="15" fill="rgb(250,166,2)"/><text x="50.8700%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,916,433 samples, 2.39%)</title><rect x="48.4614%" y="133" width="2.3880%" height="15" fill="rgb(242,216,29)"/><text x="48.7114%" y="143.50">ch..</text></g><g><title>adt_sized_constraint (194,221 samples, 0.12%)</title><rect x="51.9864%" y="85" width="0.1184%" height="15" fill="rgb(230,116,27)"/><text x="52.2364%" y="95.50"></text></g><g><title>adt_sized_constraint (258,772 samples, 0.16%)</title><rect x="51.9511%" y="101" width="0.1578%" height="15" fill="rgb(228,99,48)"/><text x="52.2011%" y="111.50"></text></g><g><title>adt_sized_constraint (283,203 samples, 0.17%)</title><rect x="51.9379%" y="117" width="0.1727%" height="15" fill="rgb(253,11,6)"/><text x="52.1879%" y="127.50"></text></g><g><title>evaluate_obligation (229,583 samples, 0.14%)</title><rect x="52.1106%" y="117" width="0.1400%" height="15" fill="rgb(247,143,39)"/><text x="52.3606%" y="127.50"></text></g><g><title>param_env (340,203 samples, 0.21%)</title><rect x="52.3314%" y="117" width="0.2074%" height="15" fill="rgb(236,97,10)"/><text x="52.5814%" y="127.50"></text></g><g><title>analysis (71,674,922 samples, 43.70%)</title><rect x="8.9886%" y="181" width="43.7035%" height="15" fill="rgb(233,208,19)"/><text x="9.2386%" y="191.50">analysis</text></g><g><title>type_check_crate (44,504,563 samples, 27.14%)</title><rect x="25.5556%" y="165" width="27.1365%" height="15" fill="rgb(216,164,2)"/><text x="25.8056%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,149,226 samples, 4.36%)</title><rect x="48.3329%" y="149" width="4.3592%" height="15" fill="rgb(220,129,5)"/><text x="48.5829%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (3,022,060 samples, 1.84%)</title><rect x="50.8494%" y="133" width="1.8427%" height="15" fill="rgb(242,17,10)"/><text x="51.0994%" y="143.50">c..</text></g><g><title>is_freeze_raw (168,872 samples, 0.10%)</title><rect x="53.9508%" y="133" width="0.1030%" height="15" fill="rgb(242,107,0)"/><text x="54.2008%" y="143.50"></text></g><g><title>fn_abi_of_instance (473,215 samples, 0.29%)</title><rect x="53.8873%" y="149" width="0.2885%" height="15" fill="rgb(251,28,31)"/><text x="54.1373%" y="159.50"></text></g><g><title>codegen_module (1,623,837 samples, 0.99%)</title><rect x="53.2800%" y="165" width="0.9901%" height="15" fill="rgb(233,223,10)"/><text x="53.5300%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (267,513 samples, 0.16%)</title><rect x="54.6033%" y="101" width="0.1631%" height="15" fill="rgb(215,21,27)"/><text x="54.8533%" y="111.50"></text></g><g><title>eval_to_const_value_raw (191,173 samples, 0.12%)</title><rect x="54.7793%" y="85" width="0.1166%" height="15" fill="rgb(232,23,21)"/><text x="55.0293%" y="95.50"></text></g><g><title>eval_to_const_value_raw (186,502 samples, 0.11%)</title><rect x="54.7822%" y="69" width="0.1137%" height="15" fill="rgb(244,5,23)"/><text x="55.0322%" y="79.50"></text></g><g><title>eval_to_allocation_raw (178,022 samples, 0.11%)</title><rect x="54.7873%" y="53" width="0.1085%" height="15" fill="rgb(226,81,46)"/><text x="55.0373%" y="63.50"></text></g><g><title>optimized_mir (882,111 samples, 0.54%)</title><rect x="54.3607%" y="117" width="0.5379%" height="15" fill="rgb(247,70,30)"/><text x="54.6107%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (216,743 samples, 0.13%)</title><rect x="54.7665%" y="101" width="0.1322%" height="15" fill="rgb(212,68,19)"/><text x="55.0165%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,073,012 samples, 0.65%)</title><rect x="54.2822%" y="133" width="0.6543%" height="15" fill="rgb(240,187,13)"/><text x="54.5322%" y="143.50"></text></g><g><title>monomorphization_collector (1,103,982 samples, 0.67%)</title><rect x="54.2809%" y="149" width="0.6731%" height="15" fill="rgb(223,113,26)"/><text x="54.5309%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,183,943 samples, 0.72%)</title><rect x="54.2704%" y="165" width="0.7219%" height="15" fill="rgb(206,192,2)"/><text x="54.5204%" y="175.50"></text></g><g><title>codegen_crate (3,841,761 samples, 2.34%)</title><rect x="52.6980%" y="181" width="2.3425%" height="15" fill="rgb(241,108,4)"/><text x="52.9480%" y="191.50">c..</text></g><g><title>codegen_module_optimize (5,606,060 samples, 3.42%)</title><rect x="55.0405%" y="181" width="3.4183%" height="15" fill="rgb(247,173,49)"/><text x="55.2905%" y="191.50">cod..</text></g><g><title>LLVM_module_optimize (5,015,394 samples, 3.06%)</title><rect x="55.4006%" y="165" width="3.0581%" height="15" fill="rgb(224,114,35)"/><text x="55.6506%" y="175.50">LLV..</text></g><g><title>LLVM_lto_optimize (2,006,571 samples, 1.22%)</title><rect x="58.6881%" y="165" width="1.2235%" height="15" fill="rgb(245,159,27)"/><text x="58.9381%" y="175.50"></text></g><g><title>LLVM_module_codegen (5,490,238 samples, 3.35%)</title><rect x="59.9116%" y="165" width="3.3477%" height="15" fill="rgb(245,172,44)"/><text x="60.1616%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (5,424,658 samples, 3.31%)</title><rect x="59.9516%" y="149" width="3.3077%" height="15" fill="rgb(236,23,11)"/><text x="60.2016%" y="159.50">LLV..</text></g><g><title>codegen_module_perform_lto (7,919,114 samples, 4.83%)</title><rect x="58.4588%" y="181" width="4.8287%" height="15" fill="rgb(205,117,38)"/><text x="58.7088%" y="191.50">codege..</text></g><g><title>AST_validation (240,203 samples, 0.15%)</title><rect x="63.3930%" y="165" width="0.1465%" height="15" fill="rgb(237,72,25)"/><text x="63.6430%" y="175.50"></text></g><g><title>metadata_load_macro (322,664 samples, 0.20%)</title><rect x="73.3011%" y="133" width="0.1967%" height="15" fill="rgb(244,70,9)"/><text x="73.5511%" y="143.50"></text></g><g><title>macro_expand_crate (18,849,960 samples, 11.49%)</title><rect x="63.6671%" y="165" width="11.4937%" height="15" fill="rgb(217,125,39)"/><text x="63.9171%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (18,827,800 samples, 11.48%)</title><rect x="63.6806%" y="149" width="11.4802%" height="15" fill="rgb(235,36,10)"/><text x="63.9306%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,727,239 samples, 1.66%)</title><rect x="73.4978%" y="133" width="1.6629%" height="15" fill="rgb(251,123,47)"/><text x="73.7478%" y="143.50"></text></g><g><title>metadata_register_crate (915,960 samples, 0.56%)</title><rect x="74.6023%" y="117" width="0.5585%" height="15" fill="rgb(221,13,13)"/><text x="74.8523%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (313,233 samples, 0.19%)</title><rect x="75.1668%" y="165" width="0.1910%" height="15" fill="rgb(238,131,9)"/><text x="75.4168%" y="175.50"></text></g><g><title>finalize_macro_resolutions (373,844 samples, 0.23%)</title><rect x="75.4246%" y="149" width="0.2280%" height="15" fill="rgb(211,50,8)"/><text x="75.6746%" y="159.50"></text></g><g><title>late_resolve_crate (3,821,021 samples, 2.33%)</title><rect x="75.6525%" y="149" width="2.3299%" height="15" fill="rgb(245,182,24)"/><text x="75.9025%" y="159.50">l..</text></g><g><title>configure_and_expand (24,306,169 samples, 14.82%)</title><rect x="63.2874%" y="181" width="14.8206%" height="15" fill="rgb(242,14,37)"/><text x="63.5374%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,510,468 samples, 2.75%)</title><rect x="75.3578%" y="165" width="2.7502%" height="15" fill="rgb(246,228,12)"/><text x="75.6078%" y="175.50">re..</text></g><g><title>early_lint_checks (311,954 samples, 0.19%)</title><rect x="78.2112%" y="181" width="0.1902%" height="15" fill="rgb(213,55,15)"/><text x="78.4612%" y="191.50"></text></g><g><title>free_global_ctxt (3,636,889 samples, 2.22%)</title><rect x="78.4014%" y="181" width="2.2176%" height="15" fill="rgb(209,9,3)"/><text x="78.6514%" y="191.50">f..</text></g><g><title>exported_symbols (189,872 samples, 0.12%)</title><rect x="81.6632%" y="165" width="0.1158%" height="15" fill="rgb(230,59,30)"/><text x="81.9132%" y="175.50"></text></g><g><title>layout_of (211,523 samples, 0.13%)</title><rect x="83.8738%" y="133" width="0.1290%" height="15" fill="rgb(209,121,21)"/><text x="84.1238%" y="143.50"></text></g><g><title>layout_of (542,083 samples, 0.33%)</title><rect x="83.6872%" y="149" width="0.3305%" height="15" fill="rgb(220,109,13)"/><text x="83.9372%" y="159.50"></text></g><g><title>needs_drop_raw (380,924 samples, 0.23%)</title><rect x="86.0453%" y="133" width="0.2323%" height="15" fill="rgb(232,18,1)"/><text x="86.2953%" y="143.50"></text></g><g><title>is_copy_raw (343,084 samples, 0.21%)</title><rect x="86.0684%" y="117" width="0.2092%" height="15" fill="rgb(215,41,42)"/><text x="86.3184%" y="127.50"></text></g><g><title>evaluate_obligation (275,313 samples, 0.17%)</title><rect x="86.1097%" y="101" width="0.1679%" height="15" fill="rgb(224,123,36)"/><text x="86.3597%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,726,099 samples, 2.27%)</title><rect x="84.0177%" y="149" width="2.2720%" height="15" fill="rgb(240,125,3)"/><text x="84.2677%" y="159.50">m..</text></g><g><title>optimized_mir (7,323,382 samples, 4.47%)</title><rect x="81.8416%" y="165" width="4.4654%" height="15" fill="rgb(205,98,50)"/><text x="82.0916%" y="175.50">optim..</text></g><g><title>promoted_mir (203,195 samples, 0.12%)</title><rect x="86.3070%" y="165" width="0.1239%" height="15" fill="rgb(205,185,37)"/><text x="86.5570%" y="175.50"></text></g><g><title>generate_crate_metadata (9,562,472 samples, 5.83%)</title><rect x="80.6190%" y="181" width="5.8307%" height="15" fill="rgb(238,207,15)"/><text x="80.8690%" y="191.50">generat..</text></g><g><title>hir_lowering (4,396,856 samples, 2.68%)</title><rect x="86.4496%" y="181" width="2.6810%" height="15" fill="rgb(213,199,42)"/><text x="86.6996%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (9,685,882 samples, 5.91%)</title><rect x="89.1379%" y="165" width="5.9059%" height="15" fill="rgb(235,201,11)"/><text x="89.3879%" y="175.50">finish_o..</text></g><g><title>link_crate (899,449 samples, 0.55%)</title><rect x="95.0438%" y="165" width="0.5484%" height="15" fill="rgb(207,46,11)"/><text x="95.2938%" y="175.50"></text></g><g><title>link_binary (864,859 samples, 0.53%)</title><rect x="95.0649%" y="149" width="0.5273%" height="15" fill="rgb(241,35,35)"/><text x="95.3149%" y="159.50"></text></g><g><title>link_rlib (581,516 samples, 0.35%)</title><rect x="95.2377%" y="133" width="0.3546%" height="15" fill="rgb(243,32,47)"/><text x="95.4877%" y="143.50"></text></g><g><title>link (10,604,172 samples, 6.47%)</title><rect x="89.1306%" y="181" width="6.4659%" height="15" fill="rgb(247,202,23)"/><text x="89.3806%" y="191.50">link</text></g><g><title>parse_crate (5,496,878 samples, 3.35%)</title><rect x="95.5965%" y="181" width="3.3517%" height="15" fill="rgb(219,102,11)"/><text x="95.8465%" y="191.50">par..</text></g><g><title>prepare_outputs (370,274 samples, 0.23%)</title><rect x="98.9537%" y="181" width="0.2258%" height="15" fill="rgb(243,110,44)"/><text x="99.2037%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (873,510 samples, 0.53%)</title><rect x="99.1795%" y="181" width="0.5326%" height="15" fill="rgb(222,74,54)"/><text x="99.4295%" y="191.50"></text></g><g><title>all (164,002,553 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (164,002,553 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (402,044 samples, 0.25%)</title><rect x="99.7549%" y="181" width="0.2451%" height="15" fill="rgb(217,163,10)"/><text x="100.0049%" y="191.50"></text></g></svg></svg>