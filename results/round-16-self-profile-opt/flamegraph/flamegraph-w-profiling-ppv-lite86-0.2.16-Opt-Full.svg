<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,753,963 samples, 0.91%)</title><rect x="0.2793%" y="245" width="0.9144%" height="15" fill="rgb(227,0,7)"/><text x="0.5293%" y="255.50"></text></g><g><title>mir_promoted (1,933,515 samples, 0.37%)</title><rect x="10.0168%" y="181" width="0.3719%" height="15" fill="rgb(217,0,24)"/><text x="10.2668%" y="191.50"></text></g><g><title>mir_const_qualif_const_arg (1,639,401 samples, 0.32%)</title><rect x="10.0734%" y="165" width="0.3153%" height="15" fill="rgb(221,193,54)"/><text x="10.3234%" y="175.50"></text></g><g><title>mir_const (1,368,479 samples, 0.26%)</title><rect x="10.1255%" y="149" width="0.2632%" height="15" fill="rgb(248,212,6)"/><text x="10.3755%" y="159.50"></text></g><g><title>unsafety_check_result_for_const_arg (915,845 samples, 0.18%)</title><rect x="10.2126%" y="133" width="0.1762%" height="15" fill="rgb(208,68,35)"/><text x="10.4626%" y="143.50"></text></g><g><title>mir_built (792,474 samples, 0.15%)</title><rect x="10.2363%" y="117" width="0.1524%" height="15" fill="rgb(232,128,0)"/><text x="10.4863%" y="127.50"></text></g><g><title>mir_borrowck_const_arg (4,802,974 samples, 0.92%)</title><rect x="9.4677%" y="197" width="0.9239%" height="15" fill="rgb(207,160,47)"/><text x="9.7177%" y="207.50"></text></g><g><title>is_copy_raw (661,034 samples, 0.13%)</title><rect x="14.3276%" y="133" width="0.1272%" height="15" fill="rgb(228,23,34)"/><text x="14.5776%" y="143.50"></text></g><g><title>needs_drop_raw (3,454,165 samples, 0.66%)</title><rect x="14.4548%" y="133" width="0.6644%" height="15" fill="rgb(218,30,26)"/><text x="14.7048%" y="143.50"></text></g><g><title>is_copy_raw (2,883,412 samples, 0.55%)</title><rect x="14.5646%" y="117" width="0.5546%" height="15" fill="rgb(220,122,19)"/><text x="14.8146%" y="127.50"></text></g><g><title>evaluate_obligation (2,468,186 samples, 0.47%)</title><rect x="14.6444%" y="101" width="0.4748%" height="15" fill="rgb(250,228,42)"/><text x="14.8944%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (932,646 samples, 0.18%)</title><rect x="15.2753%" y="117" width="0.1794%" height="15" fill="rgb(240,193,28)"/><text x="15.5253%" y="127.50"></text></g><g><title>resolve_instance (2,156,097 samples, 0.41%)</title><rect x="15.1197%" y="133" width="0.4147%" height="15" fill="rgb(216,20,37)"/><text x="15.3697%" y="143.50"></text></g><g><title>thir_body (5,025,497 samples, 0.97%)</title><rect x="15.5571%" y="133" width="0.9667%" height="15" fill="rgb(206,188,39)"/><text x="15.8071%" y="143.50"></text></g><g><title>mir_const (28,442,932 samples, 5.47%)</title><rect x="11.0739%" y="181" width="5.4711%" height="15" fill="rgb(217,207,13)"/><text x="11.3239%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (24,874,567 samples, 4.78%)</title><rect x="11.7602%" y="165" width="4.7847%" height="15" fill="rgb(231,73,38)"/><text x="12.0102%" y="175.50">unsafe..</text></g><g><title>mir_built (22,567,358 samples, 4.34%)</title><rect x="12.2040%" y="149" width="4.3409%" height="15" fill="rgb(225,20,46)"/><text x="12.4540%" y="159.50">mir_b..</text></g><g><title>mir_promoted (34,547,482 samples, 6.65%)</title><rect x="10.3916%" y="197" width="6.6454%" height="15" fill="rgb(210,31,41)"/><text x="10.6416%" y="207.50">mir_promo..</text></g><g><title>mir_const_qualif (2,557,442 samples, 0.49%)</title><rect x="16.5450%" y="181" width="0.4919%" height="15" fill="rgb(221,200,47)"/><text x="16.7950%" y="191.50"></text></g><g><title>mir_const (1,928,727 samples, 0.37%)</title><rect x="16.6659%" y="165" width="0.3710%" height="15" fill="rgb(226,26,5)"/><text x="16.9159%" y="175.50"></text></g><g><title>unsafety_check_result (1,324,454 samples, 0.25%)</title><rect x="16.7822%" y="149" width="0.2548%" height="15" fill="rgb(249,33,26)"/><text x="17.0322%" y="159.50"></text></g><g><title>mir_built (1,142,413 samples, 0.22%)</title><rect x="16.8172%" y="133" width="0.2197%" height="15" fill="rgb(235,183,28)"/><text x="17.0672%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (2,598,610 samples, 0.50%)</title><rect x="17.0411%" y="197" width="0.4999%" height="15" fill="rgb(221,5,38)"/><text x="17.2911%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (545,195 samples, 0.10%)</title><rect x="17.5409%" y="197" width="0.1049%" height="15" fill="rgb(247,18,42)"/><text x="17.7909%" y="207.50"></text></g><g><title>type_op_normalize_ty (943,250 samples, 0.18%)</title><rect x="17.6505%" y="197" width="0.1814%" height="15" fill="rgb(241,131,45)"/><text x="17.9005%" y="207.50"></text></g><g><title>normalize_projection_ty (696,586 samples, 0.13%)</title><rect x="17.6980%" y="181" width="0.1340%" height="15" fill="rgb(249,31,29)"/><text x="17.9480%" y="191.50"></text></g><g><title>type_op_prove_predicate (4,260,758 samples, 0.82%)</title><rect x="17.8319%" y="197" width="0.8196%" height="15" fill="rgb(225,111,53)"/><text x="18.0819%" y="207.50"></text></g><g><title>MIR_borrow_checking (89,632,848 samples, 17.24%)</title><rect x="1.4109%" y="229" width="17.2413%" height="15" fill="rgb(238,160,17)"/><text x="1.6609%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (88,677,222 samples, 17.06%)</title><rect x="1.5947%" y="213" width="17.0575%" height="15" fill="rgb(214,148,48)"/><text x="1.8447%" y="223.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (760,730 samples, 0.15%)</title><rect x="18.9877%" y="197" width="0.1463%" height="15" fill="rgb(232,36,49)"/><text x="19.2377%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,911,088 samples, 0.37%)</title><rect x="18.7687%" y="213" width="0.3676%" height="15" fill="rgb(209,103,24)"/><text x="19.0187%" y="223.50"></text></g><g><title>MIR_effect_checking (2,559,349 samples, 0.49%)</title><rect x="18.6522%" y="229" width="0.4923%" height="15" fill="rgb(229,88,8)"/><text x="18.9022%" y="239.50"></text></g><g><title>hir_module_items (1,007,262 samples, 0.19%)</title><rect x="19.1445%" y="229" width="0.1938%" height="15" fill="rgb(213,181,19)"/><text x="19.3945%" y="239.50"></text></g><g><title>codegen_fn_attrs (1,203,133 samples, 0.23%)</title><rect x="19.5234%" y="197" width="0.2314%" height="15" fill="rgb(254,191,54)"/><text x="19.7734%" y="207.50"></text></g><g><title>should_inherit_track_caller (883,239 samples, 0.17%)</title><rect x="19.5849%" y="181" width="0.1699%" height="15" fill="rgb(241,83,37)"/><text x="19.8349%" y="191.50"></text></g><g><title>check_mod_attrs (2,137,104 samples, 0.41%)</title><rect x="19.3438%" y="213" width="0.4111%" height="15" fill="rgb(233,36,39)"/><text x="19.5938%" y="223.50"></text></g><g><title>check_mod_const_bodies (609,909 samples, 0.12%)</title><rect x="19.7548%" y="213" width="0.1173%" height="15" fill="rgb(226,3,54)"/><text x="20.0048%" y="223.50"></text></g><g><title>is_copy_raw (640,148 samples, 0.12%)</title><rect x="20.0821%" y="197" width="0.1231%" height="15" fill="rgb(245,192,40)"/><text x="20.3321%" y="207.50"></text></g><g><title>evaluate_obligation (589,227 samples, 0.11%)</title><rect x="20.0919%" y="181" width="0.1133%" height="15" fill="rgb(238,167,29)"/><text x="20.3419%" y="191.50"></text></g><g><title>lookup_deprecation_entry (633,797 samples, 0.12%)</title><rect x="20.2053%" y="197" width="0.1219%" height="15" fill="rgb(232,182,51)"/><text x="20.4553%" y="207.50"></text></g><g><title>stability_index (534,616 samples, 0.10%)</title><rect x="20.2243%" y="181" width="0.1028%" height="15" fill="rgb(231,60,39)"/><text x="20.4743%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (2,744,930 samples, 0.53%)</title><rect x="19.9425%" y="213" width="0.5280%" height="15" fill="rgb(208,69,12)"/><text x="20.1925%" y="223.50"></text></g><g><title>misc_checking_1 (6,060,548 samples, 1.17%)</title><rect x="19.3383%" y="229" width="1.1658%" height="15" fill="rgb(235,93,37)"/><text x="19.5883%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (1,910,021 samples, 0.37%)</title><rect x="20.5044%" y="213" width="0.3674%" height="15" fill="rgb(213,116,39)"/><text x="20.7544%" y="223.50"></text></g><g><title>check_mod_liveness (1,458,445 samples, 0.28%)</title><rect x="20.5913%" y="197" width="0.2805%" height="15" fill="rgb(222,207,29)"/><text x="20.8413%" y="207.50"></text></g><g><title>misc_checking_2 (3,508,609 samples, 0.67%)</title><rect x="20.5041%" y="229" width="0.6749%" height="15" fill="rgb(206,96,30)"/><text x="20.7541%" y="239.50"></text></g><g><title>match_checking (1,596,878 samples, 0.31%)</title><rect x="20.8718%" y="213" width="0.3072%" height="15" fill="rgb(218,138,4)"/><text x="21.1218%" y="223.50"></text></g><g><title>check_match (1,355,726 samples, 0.26%)</title><rect x="20.9182%" y="197" width="0.2608%" height="15" fill="rgb(250,191,14)"/><text x="21.1682%" y="207.50"></text></g><g><title>check_private_in_public (1,069,422 samples, 0.21%)</title><rect x="21.1812%" y="213" width="0.2057%" height="15" fill="rgb(239,60,40)"/><text x="21.4312%" y="223.50"></text></g><g><title>death_checking (1,768,730 samples, 0.34%)</title><rect x="21.3869%" y="213" width="0.3402%" height="15" fill="rgb(206,27,48)"/><text x="21.6369%" y="223.50"></text></g><g><title>param_env (711,598 samples, 0.14%)</title><rect x="22.0659%" y="181" width="0.1369%" height="15" fill="rgb(225,35,8)"/><text x="22.3159%" y="191.50"></text></g><g><title>crate_lints (3,095,984 samples, 0.60%)</title><rect x="21.7275%" y="197" width="0.5955%" height="15" fill="rgb(250,213,24)"/><text x="21.9775%" y="207.50"></text></g><g><title>type_of (621,737 samples, 0.12%)</title><rect x="22.2035%" y="181" width="0.1196%" height="15" fill="rgb(247,123,22)"/><text x="22.4535%" y="191.50"></text></g><g><title>lint_checking (4,764,693 samples, 0.92%)</title><rect x="21.7271%" y="213" width="0.9165%" height="15" fill="rgb(231,138,38)"/><text x="21.9771%" y="223.50"></text></g><g><title>module_lints (1,666,659 samples, 0.32%)</title><rect x="22.3231%" y="197" width="0.3206%" height="15" fill="rgb(231,145,46)"/><text x="22.5731%" y="207.50"></text></g><g><title>lint_mod (1,658,589 samples, 0.32%)</title><rect x="22.3246%" y="181" width="0.3190%" height="15" fill="rgb(251,118,11)"/><text x="22.5746%" y="191.50"></text></g><g><title>privacy_access_levels (2,379,076 samples, 0.46%)</title><rect x="22.6437%" y="213" width="0.4576%" height="15" fill="rgb(217,147,25)"/><text x="22.8937%" y="223.50"></text></g><g><title>privacy_checking_modules (3,955,754 samples, 0.76%)</title><rect x="23.1013%" y="213" width="0.7609%" height="15" fill="rgb(247,81,37)"/><text x="23.3513%" y="223.50"></text></g><g><title>check_mod_privacy (3,950,604 samples, 0.76%)</title><rect x="23.1023%" y="197" width="0.7599%" height="15" fill="rgb(209,12,38)"/><text x="23.3523%" y="207.50"></text></g><g><title>misc_checking_3 (13,984,795 samples, 2.69%)</title><rect x="21.1790%" y="229" width="2.6900%" height="15" fill="rgb(227,1,9)"/><text x="21.4290%" y="239.50">mi..</text></g><g><title>impl_parent (1,521,804 samples, 0.29%)</title><rect x="24.4918%" y="165" width="0.2927%" height="15" fill="rgb(248,47,43)"/><text x="24.7418%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (718,597 samples, 0.14%)</title><rect x="24.6463%" y="149" width="0.1382%" height="15" fill="rgb(221,10,30)"/><text x="24.8963%" y="159.50"></text></g><g><title>impl_trait_ref (2,498,461 samples, 0.48%)</title><rect x="24.7845%" y="165" width="0.4806%" height="15" fill="rgb(210,229,1)"/><text x="25.0345%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,926,903 samples, 0.37%)</title><rect x="24.8944%" y="149" width="0.3706%" height="15" fill="rgb(222,148,37)"/><text x="25.1444%" y="159.50"></text></g><g><title>coherent_trait (7,193,320 samples, 1.38%)</title><rect x="23.9622%" y="197" width="1.3837%" height="15" fill="rgb(234,67,33)"/><text x="24.2122%" y="207.50"></text></g><g><title>specialization_graph_of (6,761,955 samples, 1.30%)</title><rect x="24.0451%" y="181" width="1.3007%" height="15" fill="rgb(247,98,35)"/><text x="24.2951%" y="191.50"></text></g><g><title>coherence_checking (7,454,702 samples, 1.43%)</title><rect x="23.9563%" y="213" width="1.4339%" height="15" fill="rgb(247,138,52)"/><text x="24.2063%" y="223.50"></text></g><g><title>dropck_outlives (810,117 samples, 0.16%)</title><rect x="42.4311%" y="165" width="0.1558%" height="15" fill="rgb(213,79,30)"/><text x="42.6811%" y="175.50"></text></g><g><title>mir_for_ctfe (742,738 samples, 0.14%)</title><rect x="42.7396%" y="117" width="0.1429%" height="15" fill="rgb(246,177,23)"/><text x="42.9896%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (734,268 samples, 0.14%)</title><rect x="42.7412%" y="101" width="0.1412%" height="15" fill="rgb(230,62,27)"/><text x="42.9912%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,564,846 samples, 0.30%)</title><rect x="42.5869%" y="165" width="0.3010%" height="15" fill="rgb(216,154,8)"/><text x="42.8369%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,530,706 samples, 0.29%)</title><rect x="42.5935%" y="149" width="0.2944%" height="15" fill="rgb(244,35,45)"/><text x="42.8435%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,494,986 samples, 0.29%)</title><rect x="42.6004%" y="133" width="0.2876%" height="15" fill="rgb(251,115,12)"/><text x="42.8504%" y="143.50"></text></g><g><title>evaluate_obligation (8,757,046 samples, 1.68%)</title><rect x="42.8880%" y="165" width="1.6845%" height="15" fill="rgb(240,54,50)"/><text x="43.1380%" y="175.50"></text></g><g><title>method_autoderef_steps (526,865 samples, 0.10%)</title><rect x="44.7354%" y="165" width="0.1013%" height="15" fill="rgb(233,84,52)"/><text x="44.9854%" y="175.50"></text></g><g><title>is_mir_available (531,095 samples, 0.10%)</title><rect x="49.4193%" y="85" width="0.1022%" height="15" fill="rgb(207,117,47)"/><text x="49.6693%" y="95.50"></text></g><g><title>mir_const_qualif_const_arg (2,214,317 samples, 0.43%)</title><rect x="49.5238%" y="85" width="0.4259%" height="15" fill="rgb(249,43,39)"/><text x="49.7738%" y="95.50"></text></g><g><title>mir_const (1,897,742 samples, 0.37%)</title><rect x="49.5846%" y="69" width="0.3650%" height="15" fill="rgb(209,38,44)"/><text x="49.8346%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,299,356 samples, 0.25%)</title><rect x="49.6997%" y="53" width="0.2499%" height="15" fill="rgb(236,212,23)"/><text x="49.9497%" y="63.50"></text></g><g><title>mir_built (1,130,113 samples, 0.22%)</title><rect x="49.7323%" y="37" width="0.2174%" height="15" fill="rgb(242,79,21)"/><text x="49.9823%" y="47.50"></text></g><g><title>mir_borrowck_const_arg (4,404,957 samples, 0.85%)</title><rect x="50.4167%" y="53" width="0.8473%" height="15" fill="rgb(211,96,35)"/><text x="50.6667%" y="63.50"></text></g><g><title>mir_for_ctfe_of_const_arg (6,861,895 samples, 1.32%)</title><rect x="49.9497%" y="85" width="1.3199%" height="15" fill="rgb(253,215,40)"/><text x="50.1997%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,259,560 samples, 1.20%)</title><rect x="50.0655%" y="69" width="1.2041%" height="15" fill="rgb(211,81,21)"/><text x="50.3155%" y="79.50"></text></g><g><title>evaluate_obligation (1,230,923 samples, 0.24%)</title><rect x="51.9198%" y="69" width="0.2368%" height="15" fill="rgb(208,190,38)"/><text x="52.1698%" y="79.50"></text></g><g><title>param_env (722,218 samples, 0.14%)</title><rect x="52.1576%" y="69" width="0.1389%" height="15" fill="rgb(235,213,38)"/><text x="52.4076%" y="79.50"></text></g><g><title>eval_to_const_value_raw (17,196,240 samples, 3.31%)</title><rect x="49.0348%" y="133" width="3.3078%" height="15" fill="rgb(237,122,38)"/><text x="49.2848%" y="143.50">eva..</text></g><g><title>eval_to_const_value_raw (16,532,813 samples, 3.18%)</title><rect x="49.1624%" y="117" width="3.1802%" height="15" fill="rgb(244,218,35)"/><text x="49.4124%" y="127.50">eva..</text></g><g><title>eval_to_allocation_raw (16,392,992 samples, 3.15%)</title><rect x="49.1893%" y="101" width="3.1533%" height="15" fill="rgb(240,68,47)"/><text x="49.4393%" y="111.50">eva..</text></g><g><title>typeck_const_arg (5,562,310 samples, 1.07%)</title><rect x="51.2726%" y="85" width="1.0699%" height="15" fill="rgb(210,16,53)"/><text x="51.5226%" y="95.50"></text></g><g><title>evaluate_obligation (1,497,757 samples, 0.29%)</title><rect x="52.3425%" y="133" width="0.2881%" height="15" fill="rgb(235,124,12)"/><text x="52.5925%" y="143.50"></text></g><g><title>opt_const_param_of (41,567,991 samples, 8.00%)</title><rect x="44.8375%" y="165" width="7.9958%" height="15" fill="rgb(224,169,11)"/><text x="45.0875%" y="175.50">opt_const_p..</text></g><g><title>typeck (41,227,719 samples, 7.93%)</title><rect x="44.9030%" y="149" width="7.9303%" height="15" fill="rgb(250,166,2)"/><text x="45.1530%" y="159.50">typeck</text></g><g><title>param_env (995,211 samples, 0.19%)</title><rect x="52.8408%" y="165" width="0.1914%" height="15" fill="rgb(242,216,29)"/><text x="53.0908%" y="175.50"></text></g><g><title>param_env (725,727 samples, 0.14%)</title><rect x="53.4502%" y="149" width="0.1396%" height="15" fill="rgb(230,116,27)"/><text x="53.7002%" y="159.50"></text></g><g><title>typeck_const_arg (2,255,467 samples, 0.43%)</title><rect x="53.1873%" y="165" width="0.4338%" height="15" fill="rgb(228,99,48)"/><text x="53.4373%" y="175.50"></text></g><g><title>item_bodies_checking (146,649,393 samples, 28.21%)</title><rect x="25.4351%" y="213" width="28.2087%" height="15" fill="rgb(253,11,6)"/><text x="25.6851%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (146,645,153 samples, 28.21%)</title><rect x="25.4360%" y="197" width="28.2078%" height="15" fill="rgb(247,143,39)"/><text x="25.6860%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (146,031,147 samples, 28.09%)</title><rect x="25.5541%" y="181" width="28.0897%" height="15" fill="rgb(236,97,10)"/><text x="25.8041%" y="191.50">typeck</text></g><g><title>item_types_checking (18,490,476 samples, 3.56%)</title><rect x="53.6438%" y="213" width="3.5567%" height="15" fill="rgb(233,208,19)"/><text x="53.8938%" y="223.50">item..</text></g><g><title>check_mod_item_types (18,482,296 samples, 3.56%)</title><rect x="53.6454%" y="197" width="3.5552%" height="15" fill="rgb(216,164,2)"/><text x="53.8954%" y="207.50">chec..</text></g><g><title>late_bound_vars_map (593,525 samples, 0.11%)</title><rect x="57.5878%" y="165" width="0.1142%" height="15" fill="rgb(220,129,5)"/><text x="57.8378%" y="175.50"></text></g><g><title>fn_sig (1,297,885 samples, 0.25%)</title><rect x="57.4632%" y="181" width="0.2497%" height="15" fill="rgb(242,17,10)"/><text x="57.7132%" y="191.50"></text></g><g><title>generics_of (986,312 samples, 0.19%)</title><rect x="57.7129%" y="181" width="0.1897%" height="15" fill="rgb(242,107,0)"/><text x="57.9629%" y="191.50"></text></g><g><title>lint_levels (654,708 samples, 0.13%)</title><rect x="58.6564%" y="101" width="0.1259%" height="15" fill="rgb(251,28,31)"/><text x="58.9064%" y="111.50"></text></g><g><title>late_bound_vars_map (1,948,534 samples, 0.37%)</title><rect x="58.4084%" y="133" width="0.3748%" height="15" fill="rgb(233,223,10)"/><text x="58.6584%" y="143.50"></text></g><g><title>resolve_lifetimes (1,864,034 samples, 0.36%)</title><rect x="58.4246%" y="117" width="0.3586%" height="15" fill="rgb(215,21,27)"/><text x="58.6746%" y="127.50"></text></g><g><title>explicit_predicates_of (3,404,171 samples, 0.65%)</title><rect x="58.1526%" y="149" width="0.6548%" height="15" fill="rgb(232,23,21)"/><text x="58.4026%" y="159.50"></text></g><g><title>predicates_of (4,278,739 samples, 0.82%)</title><rect x="58.0024%" y="181" width="0.8230%" height="15" fill="rgb(244,5,23)"/><text x="58.2524%" y="191.50"></text></g><g><title>predicates_defined_on (3,967,357 samples, 0.76%)</title><rect x="58.0623%" y="165" width="0.7631%" height="15" fill="rgb(226,81,46)"/><text x="58.3123%" y="175.50"></text></g><g><title>type_collecting (9,500,865 samples, 1.83%)</title><rect x="57.2017%" y="213" width="1.8275%" height="15" fill="rgb(247,70,30)"/><text x="57.4517%" y="223.50">t..</text></g><g><title>collect_mod_item_types (9,493,125 samples, 1.83%)</title><rect x="57.2031%" y="197" width="1.8260%" height="15" fill="rgb(212,68,19)"/><text x="57.4531%" y="207.50">c..</text></g><g><title>type_of (734,276 samples, 0.14%)</title><rect x="58.8879%" y="181" width="0.1412%" height="15" fill="rgb(240,187,13)"/><text x="59.1379%" y="191.50"></text></g><g><title>evaluate_obligation (828,450 samples, 0.16%)</title><rect x="61.2016%" y="181" width="0.1594%" height="15" fill="rgb(223,113,26)"/><text x="61.4516%" y="191.50"></text></g><g><title>implied_outlives_bounds (527,520 samples, 0.10%)</title><rect x="61.3610%" y="181" width="0.1015%" height="15" fill="rgb(206,192,2)"/><text x="61.6110%" y="191.50"></text></g><g><title>param_env (2,470,675 samples, 0.48%)</title><rect x="61.4691%" y="181" width="0.4752%" height="15" fill="rgb(241,108,4)"/><text x="61.7191%" y="191.50"></text></g><g><title>check_impl_item_well_formed (15,321,159 samples, 2.95%)</title><rect x="59.3150%" y="197" width="2.9471%" height="15" fill="rgb(247,173,49)"/><text x="59.5650%" y="207.50">ch..</text></g><g><title>region_scope_tree (1,601,554 samples, 0.31%)</title><rect x="61.9541%" y="181" width="0.3081%" height="15" fill="rgb(224,114,35)"/><text x="62.2041%" y="191.50"></text></g><g><title>evaluate_obligation (1,137,647 samples, 0.22%)</title><rect x="67.8155%" y="181" width="0.2188%" height="15" fill="rgb(245,159,27)"/><text x="68.0655%" y="191.50"></text></g><g><title>implied_outlives_bounds (813,790 samples, 0.16%)</title><rect x="68.0693%" y="181" width="0.1565%" height="15" fill="rgb(245,172,44)"/><text x="68.3193%" y="191.50"></text></g><g><title>param_env (3,918,556 samples, 0.75%)</title><rect x="68.2259%" y="181" width="0.7538%" height="15" fill="rgb(236,23,11)"/><text x="68.4759%" y="191.50"></text></g><g><title>check_item_well_formed (35,622,820 samples, 6.85%)</title><rect x="62.2621%" y="197" width="6.8522%" height="15" fill="rgb(205,117,38)"/><text x="62.5121%" y="207.50">check_ite..</text></g><g><title>analysis (355,302,706 samples, 68.34%)</title><rect x="1.1937%" y="245" width="68.3441%" height="15" fill="rgb(237,72,25)"/><text x="1.4437%" y="255.50">analysis</text></g><g><title>type_check_crate (237,419,653 samples, 45.67%)</title><rect x="23.8690%" y="229" width="45.6687%" height="15" fill="rgb(244,70,9)"/><text x="24.1190%" y="239.50">type_check_crate</text></g><g><title>wf_checking (54,570,428 samples, 10.50%)</title><rect x="59.0409%" y="213" width="10.4969%" height="15" fill="rgb(217,125,39)"/><text x="59.2909%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,201,276 samples, 0.42%)</title><rect x="69.1143%" y="197" width="0.4234%" height="15" fill="rgb(235,36,10)"/><text x="69.3643%" y="207.50"></text></g><g><title>codegen_crate (804,949 samples, 0.15%)</title><rect x="69.5397%" y="245" width="0.1548%" height="15" fill="rgb(251,123,47)"/><text x="69.7897%" y="255.50"></text></g><g><title>codegen_module_optimize (960,010 samples, 0.18%)</title><rect x="69.6946%" y="245" width="0.1847%" height="15" fill="rgb(221,13,13)"/><text x="69.9446%" y="255.50"></text></g><g><title>LLVM_module_codegen (2,665,340 samples, 0.51%)</title><rect x="70.0045%" y="229" width="0.5127%" height="15" fill="rgb(238,131,9)"/><text x="70.2545%" y="239.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,629,399 samples, 0.51%)</title><rect x="70.0115%" y="213" width="0.5058%" height="15" fill="rgb(211,50,8)"/><text x="70.2615%" y="223.50"></text></g><g><title>codegen_module_perform_lto (3,359,317 samples, 0.65%)</title><rect x="69.8792%" y="245" width="0.6462%" height="15" fill="rgb(245,182,24)"/><text x="70.1292%" y="255.50"></text></g><g><title>AST_validation (992,050 samples, 0.19%)</title><rect x="70.5653%" y="229" width="0.1908%" height="15" fill="rgb(242,14,37)"/><text x="70.8153%" y="239.50"></text></g><g><title>metadata_load_macro (581,596 samples, 0.11%)</title><rect x="83.0653%" y="197" width="0.1119%" height="15" fill="rgb(246,228,12)"/><text x="83.3153%" y="207.50"></text></g><g><title>macro_expand_crate (66,070,176 samples, 12.71%)</title><rect x="70.8228%" y="229" width="12.7089%" height="15" fill="rgb(213,55,15)"/><text x="71.0728%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (66,055,585 samples, 12.71%)</title><rect x="70.8256%" y="213" width="12.7061%" height="15" fill="rgb(209,9,3)"/><text x="71.0756%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,630,808 samples, 0.31%)</title><rect x="83.2180%" y="197" width="0.3137%" height="15" fill="rgb(230,59,30)"/><text x="83.4680%" y="207.50"></text></g><g><title>late_resolve_crate (7,803,107 samples, 1.50%)</title><rect x="83.7061%" y="213" width="1.5010%" height="15" fill="rgb(209,121,21)"/><text x="83.9561%" y="223.50"></text></g><g><title>configure_and_expand (76,903,586 samples, 14.79%)</title><rect x="70.5254%" y="245" width="14.7927%" height="15" fill="rgb(220,109,13)"/><text x="70.7754%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (9,226,472 samples, 1.77%)</title><rect x="83.5434%" y="229" width="1.7748%" height="15" fill="rgb(232,18,1)"/><text x="83.7934%" y="239.50">r..</text></g><g><title>drop_ast (1,077,252 samples, 0.21%)</title><rect x="85.3182%" y="245" width="0.2072%" height="15" fill="rgb(215,41,42)"/><text x="85.5682%" y="255.50"></text></g><g><title>early_lint_checks (1,822,100 samples, 0.35%)</title><rect x="85.5287%" y="245" width="0.3505%" height="15" fill="rgb(224,123,36)"/><text x="85.7787%" y="255.50"></text></g><g><title>free_global_ctxt (4,883,034 samples, 0.94%)</title><rect x="85.8792%" y="245" width="0.9393%" height="15" fill="rgb(240,125,3)"/><text x="86.1292%" y="255.50"></text></g><g><title>exported_symbols (807,550 samples, 0.16%)</title><rect x="89.1858%" y="229" width="0.1553%" height="15" fill="rgb(205,98,50)"/><text x="89.4358%" y="239.50"></text></g><g><title>reachable_non_generics (788,028 samples, 0.15%)</title><rect x="89.1896%" y="213" width="0.1516%" height="15" fill="rgb(205,185,37)"/><text x="89.4396%" y="223.50"></text></g><g><title>reachable_set (706,888 samples, 0.14%)</title><rect x="89.2052%" y="197" width="0.1360%" height="15" fill="rgb(238,207,15)"/><text x="89.4552%" y="207.50"></text></g><g><title>mir_for_ctfe (744,039 samples, 0.14%)</title><rect x="89.3915%" y="229" width="0.1431%" height="15" fill="rgb(213,199,42)"/><text x="89.6415%" y="239.50"></text></g><g><title>layout_of (1,422,225 samples, 0.27%)</title><rect x="92.3534%" y="213" width="0.2736%" height="15" fill="rgb(235,201,11)"/><text x="92.6034%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,953,522 samples, 2.49%)</title><rect x="92.6270%" y="213" width="2.4917%" height="15" fill="rgb(207,46,11)"/><text x="92.8770%" y="223.50">mi..</text></g><g><title>optimized_mir (29,343,683 samples, 5.64%)</title><rect x="89.5718%" y="229" width="5.6444%" height="15" fill="rgb(241,35,35)"/><text x="89.8218%" y="239.50">optimiz..</text></g><g><title>promoted_mir (694,143 samples, 0.13%)</title><rect x="95.2162%" y="229" width="0.1335%" height="15" fill="rgb(243,32,47)"/><text x="95.4662%" y="239.50"></text></g><g><title>generate_crate_metadata (44,562,707 samples, 8.57%)</title><rect x="86.8185%" y="245" width="8.5718%" height="15" fill="rgb(247,202,23)"/><text x="87.0685%" y="255.50">generate_cra..</text></g><g><title>hir_lowering (16,937,299 samples, 3.26%)</title><rect x="95.3903%" y="245" width="3.2580%" height="15" fill="rgb(219,102,11)"/><text x="95.6403%" y="255.50">hir..</text></g><g><title>link_crate (3,204,786 samples, 0.62%)</title><rect x="98.6534%" y="229" width="0.6165%" height="15" fill="rgb(243,110,44)"/><text x="98.9034%" y="239.50"></text></g><g><title>link_binary (2,967,093 samples, 0.57%)</title><rect x="98.6991%" y="213" width="0.5707%" height="15" fill="rgb(222,74,54)"/><text x="98.9491%" y="223.50"></text></g><g><title>link_rlib (2,504,448 samples, 0.48%)</title><rect x="98.7881%" y="197" width="0.4817%" height="15" fill="rgb(216,99,12)"/><text x="99.0381%" y="207.50"></text></g><g><title>link (3,242,547 samples, 0.62%)</title><rect x="98.6483%" y="245" width="0.6237%" height="15" fill="rgb(226,22,26)"/><text x="98.8983%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,944,402 samples, 0.37%)</title><rect x="99.3897%" y="245" width="0.3740%" height="15" fill="rgb(217,163,10)"/><text x="99.6397%" y="255.50"></text></g><g><title>all (519,873,558 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (519,873,558 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (1,106,782 samples, 0.21%)</title><rect x="99.7871%" y="245" width="0.2129%" height="15" fill="rgb(220,39,43)"/><text x="100.0371%" y="255.50"></text></g></svg></svg>