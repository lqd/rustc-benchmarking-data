<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (160,515,079 samples, 18.77%)</title><rect x="0.0857%" y="149" width="18.7713%" height="15" fill="rgb(227,0,7)"/><text x="0.3357%" y="159.50">LLVM_passes</text></g><g><title>mir_const (4,524,548 samples, 0.53%)</title><rect x="19.9146%" y="85" width="0.5291%" height="15" fill="rgb(217,0,24)"/><text x="20.1646%" y="95.50"></text></g><g><title>unsafety_check_result (3,936,971 samples, 0.46%)</title><rect x="19.9833%" y="69" width="0.4604%" height="15" fill="rgb(221,193,54)"/><text x="20.2333%" y="79.50"></text></g><g><title>mir_built (3,458,675 samples, 0.40%)</title><rect x="20.0393%" y="53" width="0.4045%" height="15" fill="rgb(248,212,6)"/><text x="20.2893%" y="63.50"></text></g><g><title>mir_promoted (5,396,406 samples, 0.63%)</title><rect x="19.8510%" y="101" width="0.6311%" height="15" fill="rgb(208,68,35)"/><text x="20.1010%" y="111.50"></text></g><g><title>type_op_prove_predicate (980,650 samples, 0.11%)</title><rect x="20.5577%" y="101" width="0.1147%" height="15" fill="rgb(232,128,0)"/><text x="20.8077%" y="111.50"></text></g><g><title>MIR_borrow_checking (15,149,297 samples, 1.77%)</title><rect x="18.9012%" y="133" width="1.7716%" height="15" fill="rgb(207,160,47)"/><text x="19.1512%" y="143.50">M..</text></g><g><title>mir_borrowck (15,073,004 samples, 1.76%)</title><rect x="18.9101%" y="117" width="1.7627%" height="15" fill="rgb(228,23,34)"/><text x="19.1601%" y="127.50"></text></g><g><title>misc_checking_1 (1,483,466 samples, 0.17%)</title><rect x="20.7214%" y="133" width="0.1735%" height="15" fill="rgb(218,30,26)"/><text x="20.9714%" y="143.50"></text></g><g><title>crate_lints (2,369,686 samples, 0.28%)</title><rect x="21.0321%" y="101" width="0.2771%" height="15" fill="rgb(220,122,19)"/><text x="21.2821%" y="111.50"></text></g><g><title>type_of (1,472,715 samples, 0.17%)</title><rect x="21.1370%" y="85" width="0.1722%" height="15" fill="rgb(250,228,42)"/><text x="21.3870%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (984,788 samples, 0.12%)</title><rect x="21.1941%" y="69" width="0.1152%" height="15" fill="rgb(240,193,28)"/><text x="21.4441%" y="79.50"></text></g><g><title>lint_checking (2,720,209 samples, 0.32%)</title><rect x="21.0319%" y="117" width="0.3181%" height="15" fill="rgb(216,20,37)"/><text x="21.2819%" y="127.50"></text></g><g><title>misc_checking_3 (3,854,052 samples, 0.45%)</title><rect x="20.9791%" y="133" width="0.4507%" height="15" fill="rgb(206,188,39)"/><text x="21.2291%" y="143.50"></text></g><g><title>adt_destructor (939,930 samples, 0.11%)</title><rect x="21.4474%" y="85" width="0.1099%" height="15" fill="rgb(217,207,13)"/><text x="21.6974%" y="95.50"></text></g><g><title>coherent_trait (920,070 samples, 0.11%)</title><rect x="21.4497%" y="69" width="0.1076%" height="15" fill="rgb(231,73,38)"/><text x="21.6997%" y="79.50"></text></g><g><title>specialization_graph_of (917,290 samples, 0.11%)</title><rect x="21.4500%" y="53" width="0.1073%" height="15" fill="rgb(225,20,46)"/><text x="21.7000%" y="63.50"></text></g><g><title>impl_parent (3,672,546 samples, 0.43%)</title><rect x="22.4357%" y="69" width="0.4295%" height="15" fill="rgb(210,31,41)"/><text x="22.6857%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,008,240 samples, 0.23%)</title><rect x="22.6303%" y="53" width="0.2349%" height="15" fill="rgb(221,200,47)"/><text x="22.8803%" y="63.50"></text></g><g><title>impl_trait_ref (8,641,447 samples, 1.01%)</title><rect x="22.8651%" y="69" width="1.0106%" height="15" fill="rgb(226,26,5)"/><text x="23.1151%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,040,497 samples, 0.82%)</title><rect x="23.0524%" y="53" width="0.8233%" height="15" fill="rgb(249,33,26)"/><text x="23.3024%" y="63.50"></text></g><g><title>trait_impls_of (1,475,817 samples, 0.17%)</title><rect x="23.9326%" y="69" width="0.1726%" height="15" fill="rgb(235,183,28)"/><text x="24.1826%" y="79.50"></text></g><g><title>coherent_trait (22,835,032 samples, 2.67%)</title><rect x="21.4392%" y="101" width="2.6704%" height="15" fill="rgb(221,5,38)"/><text x="21.6892%" y="111.50">co..</text></g><g><title>specialization_graph_of (21,352,106 samples, 2.50%)</title><rect x="21.6126%" y="85" width="2.4970%" height="15" fill="rgb(247,18,42)"/><text x="21.8626%" y="95.50">sp..</text></g><g><title>coherence_checking (22,948,743 samples, 2.68%)</title><rect x="21.4360%" y="117" width="2.6837%" height="15" fill="rgb(241,131,45)"/><text x="21.6860%" y="127.50">co..</text></g><g><title>eval_to_const_value_raw (1,052,661 samples, 0.12%)</title><rect x="26.2934%" y="69" width="0.1231%" height="15" fill="rgb(249,31,29)"/><text x="26.5434%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,038,591 samples, 0.12%)</title><rect x="26.2950%" y="53" width="0.1215%" height="15" fill="rgb(225,111,53)"/><text x="26.5450%" y="63.50"></text></g><g><title>generics_of (936,165 samples, 0.11%)</title><rect x="26.9893%" y="53" width="0.1095%" height="15" fill="rgb(238,160,17)"/><text x="27.2393%" y="63.50"></text></g><g><title>impl_trait_ref (1,324,603 samples, 0.15%)</title><rect x="27.1229%" y="53" width="0.1549%" height="15" fill="rgb(214,148,48)"/><text x="27.3729%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,068,341 samples, 0.12%)</title><rect x="27.1529%" y="37" width="0.1249%" height="15" fill="rgb(232,36,49)"/><text x="27.4029%" y="47.50"></text></g><g><title>predicates_of (1,271,211 samples, 0.15%)</title><rect x="27.2850%" y="53" width="0.1487%" height="15" fill="rgb(209,103,24)"/><text x="27.5350%" y="63.50"></text></g><g><title>specializes (2,627,639 samples, 0.31%)</title><rect x="27.4336%" y="53" width="0.3073%" height="15" fill="rgb(229,88,8)"/><text x="27.6836%" y="63.50"></text></g><g><title>param_env (1,553,754 samples, 0.18%)</title><rect x="27.5592%" y="37" width="0.1817%" height="15" fill="rgb(213,181,19)"/><text x="27.8092%" y="47.50"></text></g><g><title>evaluate_obligation (11,934,389 samples, 1.40%)</title><rect x="26.4165%" y="69" width="1.3957%" height="15" fill="rgb(254,191,54)"/><text x="26.6665%" y="79.50"></text></g><g><title>item_bodies_checking (32,983,844 samples, 3.86%)</title><rect x="24.1241%" y="117" width="3.8573%" height="15" fill="rgb(241,83,37)"/><text x="24.3741%" y="127.50">item..</text></g><g><title>typeck_item_bodies (32,981,244 samples, 3.86%)</title><rect x="24.1244%" y="101" width="3.8570%" height="15" fill="rgb(233,36,39)"/><text x="24.3744%" y="111.50">type..</text></g><g><title>typeck (32,929,684 samples, 3.85%)</title><rect x="24.1304%" y="85" width="3.8509%" height="15" fill="rgb(226,3,54)"/><text x="24.3804%" y="95.50">type..</text></g><g><title>item_types_checking (939,290 samples, 0.11%)</title><rect x="27.9813%" y="117" width="0.1098%" height="15" fill="rgb(245,192,40)"/><text x="28.2313%" y="127.50"></text></g><g><title>check_mod_item_types (935,730 samples, 0.11%)</title><rect x="27.9817%" y="101" width="0.1094%" height="15" fill="rgb(238,167,29)"/><text x="28.2317%" y="111.50"></text></g><g><title>type_collecting (2,221,815 samples, 0.26%)</title><rect x="28.0913%" y="117" width="0.2598%" height="15" fill="rgb(232,182,51)"/><text x="28.3413%" y="127.50"></text></g><g><title>collect_mod_item_types (2,206,275 samples, 0.26%)</title><rect x="28.0931%" y="101" width="0.2580%" height="15" fill="rgb(231,60,39)"/><text x="28.3431%" y="111.50"></text></g><g><title>check_impl_item_well_formed (1,391,116 samples, 0.16%)</title><rect x="28.3642%" y="101" width="0.1627%" height="15" fill="rgb(208,69,12)"/><text x="28.6142%" y="111.50"></text></g><g><title>analysis (83,876,255 samples, 9.81%)</title><rect x="18.8569%" y="149" width="9.8088%" height="15" fill="rgb(235,93,37)"/><text x="19.1069%" y="159.50">analysis</text></g><g><title>type_check_crate (61,874,942 samples, 7.24%)</title><rect x="21.4298%" y="133" width="7.2359%" height="15" fill="rgb(213,116,39)"/><text x="21.6798%" y="143.50">type_check..</text></g><g><title>wf_checking (2,685,530 samples, 0.31%)</title><rect x="28.3517%" y="117" width="0.3141%" height="15" fill="rgb(222,207,29)"/><text x="28.6017%" y="127.50"></text></g><g><title>check_item_well_formed (1,187,553 samples, 0.14%)</title><rect x="28.5268%" y="101" width="0.1389%" height="15" fill="rgb(206,96,30)"/><text x="28.7768%" y="111.50"></text></g><g><title>is_freeze_raw (921,710 samples, 0.11%)</title><rect x="31.3053%" y="101" width="0.1078%" height="15" fill="rgb(218,138,4)"/><text x="31.5553%" y="111.50"></text></g><g><title>layout_of (1,210,310 samples, 0.14%)</title><rect x="31.4484%" y="101" width="0.1415%" height="15" fill="rgb(250,191,14)"/><text x="31.6984%" y="111.50"></text></g><g><title>param_env (2,084,005 samples, 0.24%)</title><rect x="31.5899%" y="101" width="0.2437%" height="15" fill="rgb(239,60,40)"/><text x="31.8399%" y="111.50"></text></g><g><title>fn_abi_of_instance (7,285,565 samples, 0.85%)</title><rect x="31.0595%" y="117" width="0.8520%" height="15" fill="rgb(206,27,48)"/><text x="31.3095%" y="127.50"></text></g><g><title>codegen_module (27,342,021 samples, 3.20%)</title><rect x="28.8378%" y="133" width="3.1975%" height="15" fill="rgb(225,35,8)"/><text x="29.0878%" y="143.50">cod..</text></g><g><title>item_attrs (1,314,972 samples, 0.15%)</title><rect x="32.2388%" y="69" width="0.1538%" height="15" fill="rgb(250,213,24)"/><text x="32.4888%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,282,412 samples, 0.15%)</title><rect x="32.2426%" y="53" width="0.1500%" height="15" fill="rgb(247,123,22)"/><text x="32.4926%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,894,708 samples, 0.22%)</title><rect x="32.2112%" y="85" width="0.2216%" height="15" fill="rgb(231,138,38)"/><text x="32.4612%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,497,124 samples, 0.18%)</title><rect x="32.7870%" y="69" width="0.1751%" height="15" fill="rgb(231,145,46)"/><text x="33.0370%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,721,329 samples, 0.20%)</title><rect x="32.9621%" y="69" width="0.2013%" height="15" fill="rgb(251,118,11)"/><text x="33.2121%" y="79.50"></text></g><g><title>resolve_instance (963,011 samples, 0.11%)</title><rect x="33.1634%" y="69" width="0.1126%" height="15" fill="rgb(217,147,25)"/><text x="33.4134%" y="79.50"></text></g><g><title>optimized_mir (7,072,416 samples, 0.83%)</title><rect x="32.5019%" y="85" width="0.8271%" height="15" fill="rgb(247,81,37)"/><text x="32.7519%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,170,952 samples, 0.25%)</title><rect x="33.4062%" y="69" width="0.2539%" height="15" fill="rgb(209,12,38)"/><text x="33.6562%" y="79.50"></text></g><g><title>specialization_graph_of (2,790,974 samples, 0.33%)</title><rect x="33.7230%" y="69" width="0.3264%" height="15" fill="rgb(227,1,9)"/><text x="33.9730%" y="79.50"></text></g><g><title>impl_trait_ref (994,070 samples, 0.12%)</title><rect x="33.9331%" y="53" width="0.1163%" height="15" fill="rgb(248,47,43)"/><text x="34.1831%" y="63.50"></text></g><g><title>resolve_instance (6,449,563 samples, 0.75%)</title><rect x="33.3289%" y="85" width="0.7542%" height="15" fill="rgb(221,10,30)"/><text x="33.5789%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (18,438,843 samples, 2.16%)</title><rect x="32.0399%" y="101" width="2.1563%" height="15" fill="rgb(210,229,1)"/><text x="32.2899%" y="111.50">m..</text></g><g><title>monomorphization_collector (18,484,143 samples, 2.16%)</title><rect x="32.0397%" y="117" width="2.1616%" height="15" fill="rgb(222,148,37)"/><text x="32.2897%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (1,275,074 samples, 0.15%)</title><rect x="34.2018%" y="101" width="0.1491%" height="15" fill="rgb(234,67,33)"/><text x="34.4518%" y="111.50"></text></g><g><title>symbol_name (1,154,564 samples, 0.14%)</title><rect x="34.2159%" y="85" width="0.1350%" height="15" fill="rgb(247,98,35)"/><text x="34.4659%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (20,240,793 samples, 2.37%)</title><rect x="32.0360%" y="133" width="2.3670%" height="15" fill="rgb(247,138,52)"/><text x="32.2860%" y="143.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,725,529 samples, 0.20%)</title><rect x="34.2013%" y="117" width="0.2018%" height="15" fill="rgb(213,79,30)"/><text x="34.4513%" y="127.50"></text></g><g><title>codegen_crate (49,113,562 samples, 5.74%)</title><rect x="28.6672%" y="149" width="5.7435%" height="15" fill="rgb(246,177,23)"/><text x="28.9172%" y="159.50">codegen..</text></g><g><title>codegen_module_optimize (212,127,689 samples, 24.81%)</title><rect x="34.4107%" y="149" width="24.8070%" height="15" fill="rgb(230,62,27)"/><text x="34.6607%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (196,510,045 samples, 22.98%)</title><rect x="36.2371%" y="133" width="22.9806%" height="15" fill="rgb(216,154,8)"/><text x="36.4871%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (64,438,051 samples, 7.54%)</title><rect x="60.1005%" y="133" width="7.5356%" height="15" fill="rgb(244,35,45)"/><text x="60.3505%" y="143.50">LLVM_lto_o..</text></g><g><title>LLVM_module_codegen (98,288,102 samples, 11.49%)</title><rect x="67.6362%" y="133" width="11.4942%" height="15" fill="rgb(251,115,12)"/><text x="67.8862%" y="143.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (96,770,817 samples, 11.32%)</title><rect x="67.8136%" y="117" width="11.3168%" height="15" fill="rgb(240,54,50)"/><text x="68.0636%" y="127.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (3,268,055 samples, 0.38%)</title><rect x="79.1303%" y="133" width="0.3822%" height="15" fill="rgb(233,84,52)"/><text x="79.3803%" y="143.50"></text></g><g><title>codegen_module_perform_lto (173,908,265 samples, 20.34%)</title><rect x="59.2178%" y="149" width="20.3375%" height="15" fill="rgb(207,117,47)"/><text x="59.4678%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,078,772 samples, 0.24%)</title><rect x="81.0912%" y="101" width="0.2431%" height="15" fill="rgb(249,43,39)"/><text x="81.3412%" y="111.50"></text></g><g><title>macro_expand_crate (14,752,093 samples, 1.73%)</title><rect x="79.6131%" y="133" width="1.7252%" height="15" fill="rgb(209,38,44)"/><text x="79.8631%" y="143.50"></text></g><g><title>expand_crate (14,738,873 samples, 1.72%)</title><rect x="79.6147%" y="117" width="1.7236%" height="15" fill="rgb(236,212,23)"/><text x="79.8647%" y="127.50"></text></g><g><title>late_resolve_crate (2,925,532 samples, 0.34%)</title><rect x="81.4050%" y="117" width="0.3421%" height="15" fill="rgb(242,79,21)"/><text x="81.6550%" y="127.50"></text></g><g><title>configure_and_expand (18,871,928 samples, 2.21%)</title><rect x="79.5553%" y="149" width="2.2070%" height="15" fill="rgb(211,96,35)"/><text x="79.8053%" y="159.50">c..</text></g><g><title>resolve_crate (3,378,047 samples, 0.40%)</title><rect x="81.3672%" y="133" width="0.3950%" height="15" fill="rgb(253,215,40)"/><text x="81.6172%" y="143.50"></text></g><g><title>free_global_ctxt (6,163,157 samples, 0.72%)</title><rect x="81.8477%" y="149" width="0.7207%" height="15" fill="rgb(211,81,21)"/><text x="82.0977%" y="159.50"></text></g><g><title>optimized_mir (1,366,005 samples, 0.16%)</title><rect x="82.6993%" y="133" width="0.1597%" height="15" fill="rgb(208,190,38)"/><text x="82.9493%" y="143.50"></text></g><g><title>generate_crate_metadata (2,517,638 samples, 0.29%)</title><rect x="82.5684%" y="149" width="0.2944%" height="15" fill="rgb(235,213,38)"/><text x="82.8184%" y="159.50"></text></g><g><title>hir_lowering (3,071,383 samples, 0.36%)</title><rect x="82.8628%" y="149" width="0.3592%" height="15" fill="rgb(237,122,38)"/><text x="83.1128%" y="159.50"></text></g><g><title>finish_ongoing_codegen (135,364,753 samples, 15.83%)</title><rect x="83.2249%" y="133" width="15.8301%" height="15" fill="rgb(244,218,35)"/><text x="83.4749%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,063,393 samples, 0.24%)</title><rect x="99.0550%" y="133" width="0.2413%" height="15" fill="rgb(240,68,47)"/><text x="99.3050%" y="143.50"></text></g><g><title>link_binary (2,039,272 samples, 0.24%)</title><rect x="99.0578%" y="117" width="0.2385%" height="15" fill="rgb(210,16,53)"/><text x="99.3078%" y="127.50"></text></g><g><title>link_rlib (1,346,935 samples, 0.16%)</title><rect x="99.1388%" y="101" width="0.1575%" height="15" fill="rgb(235,124,12)"/><text x="99.3888%" y="111.50"></text></g><g><title>link (137,469,156 samples, 16.08%)</title><rect x="83.2220%" y="149" width="16.0762%" height="15" fill="rgb(224,169,11)"/><text x="83.4720%" y="159.50">link</text></g><g><title>parse_crate (3,198,325 samples, 0.37%)</title><rect x="99.2982%" y="149" width="0.3740%" height="15" fill="rgb(250,166,2)"/><text x="99.5482%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,994,532 samples, 0.23%)</title><rect x="99.7124%" y="149" width="0.2332%" height="15" fill="rgb(242,216,29)"/><text x="99.9624%" y="159.50"></text></g><g><title>all (855,111,183 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (855,111,183 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>