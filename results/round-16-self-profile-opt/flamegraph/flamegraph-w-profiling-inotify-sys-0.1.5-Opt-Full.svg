<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,771,575 samples, 14.46%)</title><rect x="0.6155%" y="165" width="14.4627%" height="15" fill="rgb(227,0,7)"/><text x="0.8655%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (235,023 samples, 0.16%)</title><rect x="14.9146%" y="149" width="0.1636%" height="15" fill="rgb(217,0,24)"/><text x="15.1646%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (221,862 samples, 0.15%)</title><rect x="14.9237%" y="133" width="0.1545%" height="15" fill="rgb(221,193,54)"/><text x="15.1737%" y="143.50"></text></g><g><title>mir_const (392,255 samples, 0.27%)</title><rect x="16.6175%" y="101" width="0.2731%" height="15" fill="rgb(248,212,6)"/><text x="16.8675%" y="111.50"></text></g><g><title>unsafety_check_result (331,454 samples, 0.23%)</title><rect x="16.6599%" y="85" width="0.2308%" height="15" fill="rgb(208,68,35)"/><text x="16.9099%" y="95.50"></text></g><g><title>mir_built (308,204 samples, 0.21%)</title><rect x="16.6761%" y="69" width="0.2146%" height="15" fill="rgb(232,128,0)"/><text x="16.9261%" y="79.50"></text></g><g><title>mir_promoted (1,197,453 samples, 0.83%)</title><rect x="16.5141%" y="117" width="0.8338%" height="15" fill="rgb(207,160,47)"/><text x="16.7641%" y="127.50"></text></g><g><title>mir_const_qualif (656,648 samples, 0.46%)</title><rect x="16.8906%" y="101" width="0.4572%" height="15" fill="rgb(228,23,34)"/><text x="17.1406%" y="111.50"></text></g><g><title>mir_const (541,367 samples, 0.38%)</title><rect x="16.9709%" y="85" width="0.3769%" height="15" fill="rgb(218,30,26)"/><text x="17.2209%" y="95.50"></text></g><g><title>unsafety_check_result (388,774 samples, 0.27%)</title><rect x="17.0772%" y="69" width="0.2707%" height="15" fill="rgb(220,122,19)"/><text x="17.3272%" y="79.50"></text></g><g><title>mir_built (318,422 samples, 0.22%)</title><rect x="17.1261%" y="53" width="0.2217%" height="15" fill="rgb(250,228,42)"/><text x="17.3761%" y="63.50"></text></g><g><title>MIR_borrow_checking (3,312,307 samples, 2.31%)</title><rect x="15.2080%" y="149" width="2.3063%" height="15" fill="rgb(240,193,28)"/><text x="15.4580%" y="159.50">M..</text></g><g><title>mir_borrowck (3,275,556 samples, 2.28%)</title><rect x="15.2336%" y="133" width="2.2807%" height="15" fill="rgb(216,20,37)"/><text x="15.4836%" y="143.50">m..</text></g><g><title>MIR_effect_checking (343,904 samples, 0.24%)</title><rect x="17.5143%" y="149" width="0.2395%" height="15" fill="rgb(206,188,39)"/><text x="17.7643%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (309,674 samples, 0.22%)</title><rect x="17.5381%" y="133" width="0.2156%" height="15" fill="rgb(217,207,13)"/><text x="17.7881%" y="143.50"></text></g><g><title>hir_module_items (153,332 samples, 0.11%)</title><rect x="17.7537%" y="149" width="0.1068%" height="15" fill="rgb(231,73,38)"/><text x="18.0037%" y="159.50"></text></g><g><title>codegen_fn_attrs (220,413 samples, 0.15%)</title><rect x="18.0619%" y="85" width="0.1535%" height="15" fill="rgb(225,20,46)"/><text x="18.3119%" y="95.50"></text></g><g><title>codegen_fn_attrs (333,734 samples, 0.23%)</title><rect x="17.9852%" y="117" width="0.2324%" height="15" fill="rgb(210,31,41)"/><text x="18.2352%" y="127.50"></text></g><g><title>should_inherit_track_caller (292,024 samples, 0.20%)</title><rect x="18.0143%" y="101" width="0.2033%" height="15" fill="rgb(221,200,47)"/><text x="18.2643%" y="111.50"></text></g><g><title>check_mod_attrs (484,755 samples, 0.34%)</title><rect x="17.8804%" y="133" width="0.3375%" height="15" fill="rgb(226,26,5)"/><text x="18.1304%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (242,073 samples, 0.17%)</title><rect x="18.2791%" y="133" width="0.1685%" height="15" fill="rgb(249,33,26)"/><text x="18.5291%" y="143.50"></text></g><g><title>misc_checking_1 (910,330 samples, 0.63%)</title><rect x="17.8608%" y="149" width="0.6338%" height="15" fill="rgb(235,183,28)"/><text x="18.1108%" y="159.50"></text></g><g><title>misc_checking_2 (149,392 samples, 0.10%)</title><rect x="18.4946%" y="149" width="0.1040%" height="15" fill="rgb(221,5,38)"/><text x="18.7446%" y="159.50"></text></g><g><title>death_checking (156,822 samples, 0.11%)</title><rect x="18.6373%" y="133" width="0.1092%" height="15" fill="rgb(247,18,42)"/><text x="18.8873%" y="143.50"></text></g><g><title>eval_to_const_value_raw (448,576 samples, 0.31%)</title><rect x="19.1275%" y="101" width="0.3123%" height="15" fill="rgb(241,131,45)"/><text x="19.3775%" y="111.50"></text></g><g><title>eval_to_const_value_raw (424,976 samples, 0.30%)</title><rect x="19.1439%" y="85" width="0.2959%" height="15" fill="rgb(249,31,29)"/><text x="19.3939%" y="95.50"></text></g><g><title>eval_to_allocation_raw (403,466 samples, 0.28%)</title><rect x="19.1589%" y="69" width="0.2809%" height="15" fill="rgb(225,111,53)"/><text x="19.4089%" y="79.50"></text></g><g><title>crate_lints (2,103,324 samples, 1.46%)</title><rect x="18.7475%" y="117" width="1.4645%" height="15" fill="rgb(238,160,17)"/><text x="18.9975%" y="127.50"></text></g><g><title>type_of (1,028,973 samples, 0.72%)</title><rect x="19.4956%" y="101" width="0.7164%" height="15" fill="rgb(214,148,48)"/><text x="19.7456%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (795,532 samples, 0.55%)</title><rect x="19.6581%" y="85" width="0.5539%" height="15" fill="rgb(232,36,49)"/><text x="19.9081%" y="95.50"></text></g><g><title>lint_checking (2,168,295 samples, 1.51%)</title><rect x="18.7465%" y="133" width="1.5097%" height="15" fill="rgb(209,103,24)"/><text x="18.9965%" y="143.50"></text></g><g><title>misc_checking_3 (2,523,819 samples, 1.76%)</title><rect x="18.5986%" y="149" width="1.7573%" height="15" fill="rgb(229,88,8)"/><text x="18.8486%" y="159.50"></text></g><g><title>impl_trait_ref (280,772 samples, 0.20%)</title><rect x="20.5779%" y="53" width="0.1955%" height="15" fill="rgb(213,181,19)"/><text x="20.8279%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (246,262 samples, 0.17%)</title><rect x="20.6019%" y="37" width="0.1715%" height="15" fill="rgb(254,191,54)"/><text x="20.8519%" y="47.50"></text></g><g><title>adt_destructor (545,726 samples, 0.38%)</title><rect x="20.4257%" y="101" width="0.3800%" height="15" fill="rgb(241,83,37)"/><text x="20.6757%" y="111.50"></text></g><g><title>coherent_trait (542,096 samples, 0.38%)</title><rect x="20.4282%" y="85" width="0.3774%" height="15" fill="rgb(233,36,39)"/><text x="20.6782%" y="95.50"></text></g><g><title>specialization_graph_of (539,866 samples, 0.38%)</title><rect x="20.4298%" y="69" width="0.3759%" height="15" fill="rgb(226,3,54)"/><text x="20.6798%" y="79.50"></text></g><g><title>is_copy_raw (216,392 samples, 0.15%)</title><rect x="20.8057%" y="101" width="0.1507%" height="15" fill="rgb(245,192,40)"/><text x="21.0557%" y="111.50"></text></g><g><title>evaluate_obligation (175,702 samples, 0.12%)</title><rect x="20.8340%" y="85" width="0.1223%" height="15" fill="rgb(238,167,29)"/><text x="21.0840%" y="95.50"></text></g><g><title>impl_parent (3,082,217 samples, 2.15%)</title><rect x="25.2307%" y="85" width="2.1461%" height="15" fill="rgb(232,182,51)"/><text x="25.4807%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,677,812 samples, 1.17%)</title><rect x="26.2085%" y="69" width="1.1682%" height="15" fill="rgb(231,60,39)"/><text x="26.4585%" y="79.50"></text></g><g><title>impl_trait_ref (8,261,248 samples, 5.75%)</title><rect x="27.3767%" y="85" width="5.7521%" height="15" fill="rgb(208,69,12)"/><text x="27.6267%" y="95.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,886,151 samples, 4.79%)</title><rect x="28.3342%" y="69" width="4.7947%" height="15" fill="rgb(235,93,37)"/><text x="28.5842%" y="79.50">metada..</text></g><g><title>coherent_trait (19,526,112 samples, 13.60%)</title><rect x="20.3924%" y="117" width="13.5955%" height="15" fill="rgb(213,116,39)"/><text x="20.6424%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (18,572,601 samples, 12.93%)</title><rect x="21.0563%" y="101" width="12.9316%" height="15" fill="rgb(222,207,29)"/><text x="21.3063%" y="111.50">specialization_grap..</text></g><g><title>trait_impls_of (1,232,104 samples, 0.86%)</title><rect x="33.1300%" y="85" width="0.8579%" height="15" fill="rgb(206,96,30)"/><text x="33.3800%" y="95.50"></text></g><g><title>implementations_of_trait (245,054 samples, 0.17%)</title><rect x="33.8173%" y="69" width="0.1706%" height="15" fill="rgb(218,138,4)"/><text x="34.0673%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (216,104 samples, 0.15%)</title><rect x="33.8375%" y="53" width="0.1505%" height="15" fill="rgb(250,191,14)"/><text x="34.0875%" y="63.50"></text></g><g><title>coherence_checking (19,598,572 samples, 13.65%)</title><rect x="20.3796%" y="133" width="13.6460%" height="15" fill="rgb(239,60,40)"/><text x="20.6296%" y="143.50">coherence_checking</text></g><g><title>item_bodies_checking (1,742,300 samples, 1.21%)</title><rect x="34.0447%" y="133" width="1.2131%" height="15" fill="rgb(206,27,48)"/><text x="34.2947%" y="143.50"></text></g><g><title>typeck_item_bodies (1,740,740 samples, 1.21%)</title><rect x="34.0457%" y="117" width="1.2120%" height="15" fill="rgb(225,35,8)"/><text x="34.2957%" y="127.50"></text></g><g><title>typeck (1,736,480 samples, 1.21%)</title><rect x="34.0487%" y="101" width="1.2091%" height="15" fill="rgb(250,213,24)"/><text x="34.2987%" y="111.50"></text></g><g><title>evaluate_obligation (252,582 samples, 0.18%)</title><rect x="35.8136%" y="85" width="0.1759%" height="15" fill="rgb(247,123,22)"/><text x="36.0636%" y="95.50"></text></g><g><title>item_types_checking (1,107,242 samples, 0.77%)</title><rect x="35.2578%" y="133" width="0.7709%" height="15" fill="rgb(231,138,38)"/><text x="35.5078%" y="143.50"></text></g><g><title>check_mod_item_types (1,105,062 samples, 0.77%)</title><rect x="35.2593%" y="117" width="0.7694%" height="15" fill="rgb(231,145,46)"/><text x="35.5093%" y="127.50"></text></g><g><title>typeck (976,151 samples, 0.68%)</title><rect x="35.3490%" y="101" width="0.6797%" height="15" fill="rgb(251,118,11)"/><text x="35.5990%" y="111.50"></text></g><g><title>fn_sig (175,821 samples, 0.12%)</title><rect x="36.1548%" y="101" width="0.1224%" height="15" fill="rgb(217,147,25)"/><text x="36.4048%" y="111.50"></text></g><g><title>named_region_map (179,283 samples, 0.12%)</title><rect x="36.3218%" y="85" width="0.1248%" height="15" fill="rgb(247,81,37)"/><text x="36.5718%" y="95.50"></text></g><g><title>resolve_lifetimes (175,963 samples, 0.12%)</title><rect x="36.3241%" y="69" width="0.1225%" height="15" fill="rgb(209,12,38)"/><text x="36.5741%" y="79.50"></text></g><g><title>generics_of (258,565 samples, 0.18%)</title><rect x="36.2772%" y="101" width="0.1800%" height="15" fill="rgb(227,1,9)"/><text x="36.5272%" y="111.50"></text></g><g><title>predicates_of (228,182 samples, 0.16%)</title><rect x="36.4884%" y="101" width="0.1589%" height="15" fill="rgb(248,47,43)"/><text x="36.7384%" y="111.50"></text></g><g><title>predicates_defined_on (194,412 samples, 0.14%)</title><rect x="36.5119%" y="85" width="0.1354%" height="15" fill="rgb(221,10,30)"/><text x="36.7619%" y="95.50"></text></g><g><title>type_collecting (1,034,242 samples, 0.72%)</title><rect x="36.0295%" y="133" width="0.7201%" height="15" fill="rgb(210,229,1)"/><text x="36.2795%" y="143.50"></text></g><g><title>collect_mod_item_types (1,023,012 samples, 0.71%)</title><rect x="36.0373%" y="117" width="0.7123%" height="15" fill="rgb(222,148,37)"/><text x="36.2873%" y="127.50"></text></g><g><title>type_of (146,961 samples, 0.10%)</title><rect x="36.6472%" y="101" width="0.1023%" height="15" fill="rgb(234,67,33)"/><text x="36.8972%" y="111.50"></text></g><g><title>check_impl_item_well_formed (294,104 samples, 0.20%)</title><rect x="36.7746%" y="117" width="0.2048%" height="15" fill="rgb(247,98,35)"/><text x="37.0246%" y="127.50"></text></g><g><title>analysis (32,046,563 samples, 22.31%)</title><rect x="15.0782%" y="165" width="22.3132%" height="15" fill="rgb(247,138,52)"/><text x="15.3282%" y="175.50">analysis</text></g><g><title>type_check_crate (24,466,667 samples, 17.04%)</title><rect x="20.3559%" y="149" width="17.0355%" height="15" fill="rgb(213,79,30)"/><text x="20.6059%" y="159.50">type_check_crate</text></g><g><title>wf_checking (919,481 samples, 0.64%)</title><rect x="36.7512%" y="133" width="0.6402%" height="15" fill="rgb(246,177,23)"/><text x="37.0012%" y="143.50"></text></g><g><title>check_item_well_formed (591,797 samples, 0.41%)</title><rect x="36.9794%" y="117" width="0.4121%" height="15" fill="rgb(230,62,27)"/><text x="37.2294%" y="127.50"></text></g><g><title>fn_abi_of_instance (717,348 samples, 0.50%)</title><rect x="38.8096%" y="133" width="0.4995%" height="15" fill="rgb(216,154,8)"/><text x="39.0596%" y="143.50"></text></g><g><title>codegen_module (2,291,276 samples, 1.60%)</title><rect x="37.8275%" y="149" width="1.5954%" height="15" fill="rgb(244,35,45)"/><text x="38.0775%" y="159.50"></text></g><g><title>optimized_mir (370,624 samples, 0.26%)</title><rect x="39.6246%" y="101" width="0.2581%" height="15" fill="rgb(251,115,12)"/><text x="39.8746%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (190,263 samples, 0.13%)</title><rect x="39.9247%" y="85" width="0.1325%" height="15" fill="rgb(240,54,50)"/><text x="40.1747%" y="95.50"></text></g><g><title>specialization_graph_of (645,258 samples, 0.45%)</title><rect x="40.1089%" y="85" width="0.4493%" height="15" fill="rgb(233,84,52)"/><text x="40.3589%" y="95.50"></text></g><g><title>resolve_instance (991,172 samples, 0.69%)</title><rect x="39.8826%" y="101" width="0.6901%" height="15" fill="rgb(207,117,47)"/><text x="40.1326%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,787,240 samples, 1.24%)</title><rect x="39.4443%" y="117" width="1.2444%" height="15" fill="rgb(249,43,39)"/><text x="39.6943%" y="127.50"></text></g><g><title>vtable_entries (166,511 samples, 0.12%)</title><rect x="40.5728%" y="101" width="0.1159%" height="15" fill="rgb(209,38,44)"/><text x="40.8228%" y="111.50"></text></g><g><title>monomorphization_collector (1,809,930 samples, 1.26%)</title><rect x="39.4429%" y="133" width="1.2602%" height="15" fill="rgb(236,212,23)"/><text x="39.6929%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (2,011,293 samples, 1.40%)</title><rect x="39.4233%" y="149" width="1.4004%" height="15" fill="rgb(242,79,21)"/><text x="39.6733%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (173,202 samples, 0.12%)</title><rect x="40.7031%" y="133" width="0.1206%" height="15" fill="rgb(211,96,35)"/><text x="40.9531%" y="143.50"></text></g><g><title>codegen_crate (4,984,326 samples, 3.47%)</title><rect x="37.3989%" y="165" width="3.4705%" height="15" fill="rgb(253,215,40)"/><text x="37.6489%" y="175.50">cod..</text></g><g><title>codegen_module_optimize (14,444,203 samples, 10.06%)</title><rect x="40.8694%" y="165" width="10.0571%" height="15" fill="rgb(211,81,21)"/><text x="41.1194%" y="175.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (12,583,572 samples, 8.76%)</title><rect x="42.1649%" y="149" width="8.7616%" height="15" fill="rgb(208,190,38)"/><text x="42.4149%" y="159.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (5,076,118 samples, 3.53%)</title><rect x="51.8343%" y="149" width="3.5344%" height="15" fill="rgb(235,213,38)"/><text x="52.0843%" y="159.50">LLV..</text></g><g><title>LLVM_module_codegen (15,760,829 samples, 10.97%)</title><rect x="55.3687%" y="149" width="10.9739%" height="15" fill="rgb(237,122,38)"/><text x="55.6187%" y="159.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (15,518,756 samples, 10.81%)</title><rect x="55.5372%" y="133" width="10.8053%" height="15" fill="rgb(244,218,35)"/><text x="55.7872%" y="143.50">LLVM_module_code..</text></g><g><title>codegen_module_perform_lto (22,286,242 samples, 15.52%)</title><rect x="50.9265%" y="165" width="15.5174%" height="15" fill="rgb(240,68,47)"/><text x="51.1765%" y="175.50">codegen_module_perform_l..</text></g><g><title>macro_expand_crate (20,630,414 samples, 14.36%)</title><rect x="66.7752%" y="149" width="14.3644%" height="15" fill="rgb(210,16,53)"/><text x="67.0252%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (20,603,813 samples, 14.35%)</title><rect x="66.7937%" y="133" width="14.3459%" height="15" fill="rgb(235,124,12)"/><text x="67.0437%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,679,100 samples, 1.87%)</title><rect x="79.2743%" y="117" width="1.8654%" height="15" fill="rgb(224,169,11)"/><text x="79.5243%" y="127.50">m..</text></g><g><title>metadata_register_crate (969,803 samples, 0.68%)</title><rect x="80.4644%" y="101" width="0.6752%" height="15" fill="rgb(250,166,2)"/><text x="80.7144%" y="111.50"></text></g><g><title>finalize_macro_resolutions (214,252 samples, 0.15%)</title><rect x="81.2665%" y="133" width="0.1492%" height="15" fill="rgb(242,216,29)"/><text x="81.5165%" y="143.50"></text></g><g><title>late_resolve_crate (1,087,792 samples, 0.76%)</title><rect x="81.4157%" y="133" width="0.7574%" height="15" fill="rgb(230,116,27)"/><text x="81.6657%" y="143.50"></text></g><g><title>configure_and_expand (22,678,087 samples, 15.79%)</title><rect x="66.4439%" y="165" width="15.7902%" height="15" fill="rgb(228,99,48)"/><text x="66.6939%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (1,428,196 samples, 0.99%)</title><rect x="81.2396%" y="149" width="0.9944%" height="15" fill="rgb(253,11,6)"/><text x="81.4896%" y="159.50"></text></g><g><title>early_lint_checks (276,733 samples, 0.19%)</title><rect x="82.2983%" y="165" width="0.1927%" height="15" fill="rgb(247,143,39)"/><text x="82.5483%" y="175.50"></text></g><g><title>free_global_ctxt (2,818,062 samples, 1.96%)</title><rect x="82.4910%" y="165" width="1.9621%" height="15" fill="rgb(236,97,10)"/><text x="82.7410%" y="175.50">f..</text></g><g><title>generate_crate_metadata (710,538 samples, 0.49%)</title><rect x="84.4531%" y="165" width="0.4947%" height="15" fill="rgb(233,208,19)"/><text x="84.7031%" y="175.50"></text></g><g><title>hir_lowering (1,119,223 samples, 0.78%)</title><rect x="84.9478%" y="165" width="0.7793%" height="15" fill="rgb(216,164,2)"/><text x="85.1978%" y="175.50"></text></g><g><title>finish_ongoing_codegen (16,545,088 samples, 11.52%)</title><rect x="85.7370%" y="149" width="11.5199%" height="15" fill="rgb(220,129,5)"/><text x="85.9870%" y="159.50">finish_ongoing_co..</text></g><g><title>join_worker_thread (196,022 samples, 0.14%)</title><rect x="97.1204%" y="133" width="0.1365%" height="15" fill="rgb(242,17,10)"/><text x="97.3704%" y="143.50"></text></g><g><title>link_crate (712,838 samples, 0.50%)</title><rect x="97.2569%" y="149" width="0.4963%" height="15" fill="rgb(242,107,0)"/><text x="97.5069%" y="159.50"></text></g><g><title>link_binary (701,608 samples, 0.49%)</title><rect x="97.2647%" y="133" width="0.4885%" height="15" fill="rgb(251,28,31)"/><text x="97.5147%" y="143.50"></text></g><g><title>link_rlib (463,306 samples, 0.32%)</title><rect x="97.4306%" y="117" width="0.3226%" height="15" fill="rgb(233,223,10)"/><text x="97.6806%" y="127.50"></text></g><g><title>link (17,280,366 samples, 12.03%)</title><rect x="85.7271%" y="165" width="12.0319%" height="15" fill="rgb(215,21,27)"/><text x="85.9771%" y="175.50">link</text></g><g><title>parse_crate (1,847,441 samples, 1.29%)</title><rect x="97.7590%" y="165" width="1.2863%" height="15" fill="rgb(232,23,21)"/><text x="98.0090%" y="175.50"></text></g><g><title>prepare_outputs (376,984 samples, 0.26%)</title><rect x="99.0512%" y="165" width="0.2625%" height="15" fill="rgb(244,5,23)"/><text x="99.3012%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (518,906 samples, 0.36%)</title><rect x="99.3137%" y="165" width="0.3613%" height="15" fill="rgb(226,81,46)"/><text x="99.5637%" y="175.50"></text></g><g><title>setup_global_ctxt (153,292 samples, 0.11%)</title><rect x="99.6756%" y="165" width="0.1067%" height="15" fill="rgb(247,70,30)"/><text x="99.9256%" y="175.50"></text></g><g><title>all (143,621,414 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (143,621,414 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (312,613 samples, 0.22%)</title><rect x="99.7823%" y="165" width="0.2177%" height="15" fill="rgb(223,113,26)"/><text x="100.0323%" y="175.50"></text></g></svg></svg>