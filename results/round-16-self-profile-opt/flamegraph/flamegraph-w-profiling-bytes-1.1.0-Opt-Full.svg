<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (294,720,087 samples, 12.79%)</title><rect x="0.0433%" y="165" width="12.7871%" height="15" fill="rgb(227,0,7)"/><text x="0.2933%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,485,027 samples, 0.11%)</title><rect x="12.7226%" y="149" width="0.1078%" height="15" fill="rgb(217,0,24)"/><text x="12.9726%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (2,419,816 samples, 0.10%)</title><rect x="12.7254%" y="133" width="0.1050%" height="15" fill="rgb(221,193,54)"/><text x="12.9754%" y="143.50"></text></g><g><title>resolve_instance (2,908,470 samples, 0.13%)</title><rect x="16.8886%" y="53" width="0.1262%" height="15" fill="rgb(248,212,6)"/><text x="17.1386%" y="63.50"></text></g><g><title>thir_body (6,678,333 samples, 0.29%)</title><rect x="17.0225%" y="53" width="0.2898%" height="15" fill="rgb(208,68,35)"/><text x="17.2725%" y="63.50"></text></g><g><title>mir_const (36,580,605 samples, 1.59%)</title><rect x="15.7310%" y="101" width="1.5871%" height="15" fill="rgb(232,128,0)"/><text x="15.9810%" y="111.50"></text></g><g><title>unsafety_check_result (31,130,694 samples, 1.35%)</title><rect x="15.9674%" y="85" width="1.3507%" height="15" fill="rgb(207,160,47)"/><text x="16.2174%" y="95.50"></text></g><g><title>mir_built (27,238,775 samples, 1.18%)</title><rect x="16.1363%" y="69" width="1.1818%" height="15" fill="rgb(228,23,34)"/><text x="16.3863%" y="79.50"></text></g><g><title>mir_promoted (42,224,348 samples, 1.83%)</title><rect x="15.5420%" y="117" width="1.8320%" height="15" fill="rgb(218,30,26)"/><text x="15.7920%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (6,795,272 samples, 0.29%)</title><rect x="17.5022%" y="117" width="0.2948%" height="15" fill="rgb(220,122,19)"/><text x="17.7522%" y="127.50"></text></g><g><title>MIR_borrow_checking (113,424,733 samples, 4.92%)</title><rect x="12.8764%" y="149" width="4.9212%" height="15" fill="rgb(250,228,42)"/><text x="13.1264%" y="159.50">MIR_bo..</text></g><g><title>mir_borrowck (112,535,415 samples, 4.88%)</title><rect x="12.9150%" y="133" width="4.8826%" height="15" fill="rgb(240,193,28)"/><text x="13.1650%" y="143.50">mir_bo..</text></g><g><title>check_mod_attrs (2,363,091 samples, 0.10%)</title><rect x="17.8666%" y="133" width="0.1025%" height="15" fill="rgb(216,20,37)"/><text x="18.1166%" y="143.50"></text></g><g><title>misc_checking_1 (5,160,165 samples, 0.22%)</title><rect x="17.8645%" y="149" width="0.2239%" height="15" fill="rgb(206,188,39)"/><text x="18.1145%" y="159.50"></text></g><g><title>misc_checking_2 (4,427,958 samples, 0.19%)</title><rect x="18.0884%" y="149" width="0.1921%" height="15" fill="rgb(217,207,13)"/><text x="18.3384%" y="159.50"></text></g><g><title>match_checking (2,312,345 samples, 0.10%)</title><rect x="18.1802%" y="133" width="0.1003%" height="15" fill="rgb(231,73,38)"/><text x="18.4302%" y="143.50"></text></g><g><title>crate_lints (5,012,403 samples, 0.22%)</title><rect x="18.4049%" y="117" width="0.2175%" height="15" fill="rgb(225,20,46)"/><text x="18.6549%" y="127.50"></text></g><g><title>lint_checking (7,063,085 samples, 0.31%)</title><rect x="18.4048%" y="133" width="0.3064%" height="15" fill="rgb(210,31,41)"/><text x="18.6548%" y="143.50"></text></g><g><title>privacy_checking_modules (3,386,575 samples, 0.15%)</title><rect x="18.7668%" y="133" width="0.1469%" height="15" fill="rgb(221,200,47)"/><text x="19.0168%" y="143.50"></text></g><g><title>check_mod_privacy (3,374,715 samples, 0.15%)</title><rect x="18.7674%" y="117" width="0.1464%" height="15" fill="rgb(226,26,5)"/><text x="19.0174%" y="127.50"></text></g><g><title>misc_checking_3 (14,636,265 samples, 0.64%)</title><rect x="18.2805%" y="149" width="0.6350%" height="15" fill="rgb(249,33,26)"/><text x="18.5305%" y="159.50"></text></g><g><title>impl_parent (2,732,817 samples, 0.12%)</title><rect x="19.1618%" y="85" width="0.1186%" height="15" fill="rgb(235,183,28)"/><text x="19.4118%" y="95.50"></text></g><g><title>impl_trait_ref (6,305,037 samples, 0.27%)</title><rect x="19.2804%" y="85" width="0.2736%" height="15" fill="rgb(221,5,38)"/><text x="19.5304%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,201,934 samples, 0.23%)</title><rect x="19.3282%" y="69" width="0.2257%" height="15" fill="rgb(247,18,42)"/><text x="19.5782%" y="79.50"></text></g><g><title>coherent_trait (15,437,933 samples, 0.67%)</title><rect x="18.9437%" y="117" width="0.6698%" height="15" fill="rgb(241,131,45)"/><text x="19.1937%" y="127.50"></text></g><g><title>specialization_graph_of (15,385,763 samples, 0.67%)</title><rect x="18.9460%" y="101" width="0.6675%" height="15" fill="rgb(249,31,29)"/><text x="19.1960%" y="111.50"></text></g><g><title>coherence_checking (15,627,826 samples, 0.68%)</title><rect x="18.9424%" y="133" width="0.6780%" height="15" fill="rgb(225,111,53)"/><text x="19.1924%" y="143.50"></text></g><g><title>evaluate_obligation (14,302,531 samples, 0.62%)</title><rect x="23.8087%" y="85" width="0.6205%" height="15" fill="rgb(238,160,17)"/><text x="24.0587%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,782,984 samples, 0.12%)</title><rect x="25.3834%" y="53" width="0.1207%" height="15" fill="rgb(214,148,48)"/><text x="25.6334%" y="63.50"></text></g><g><title>eval_to_const_value_raw (7,618,143 samples, 0.33%)</title><rect x="25.3805%" y="69" width="0.3305%" height="15" fill="rgb(232,36,49)"/><text x="25.6305%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,767,059 samples, 0.21%)</title><rect x="25.5042%" y="53" width="0.2068%" height="15" fill="rgb(209,103,24)"/><text x="25.7542%" y="63.50"></text></g><g><title>eval_to_allocation_raw (4,723,329 samples, 0.20%)</title><rect x="25.5061%" y="37" width="0.2049%" height="15" fill="rgb(229,88,8)"/><text x="25.7561%" y="47.50"></text></g><g><title>typeck (26,124,235 samples, 1.13%)</title><rect x="24.6670%" y="85" width="1.1335%" height="15" fill="rgb(213,181,19)"/><text x="24.9170%" y="95.50"></text></g><g><title>item_bodies_checking (142,537,962 samples, 6.18%)</title><rect x="19.6266%" y="133" width="6.1843%" height="15" fill="rgb(254,191,54)"/><text x="19.8766%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (142,534,562 samples, 6.18%)</title><rect x="19.6267%" y="117" width="6.1842%" height="15" fill="rgb(241,83,37)"/><text x="19.8767%" y="127.50">typeck_i..</text></g><g><title>typeck (141,919,135 samples, 6.16%)</title><rect x="19.6534%" y="101" width="6.1575%" height="15" fill="rgb(233,36,39)"/><text x="19.9034%" y="111.50">typeck</text></g><g><title>item_types_checking (7,568,911 samples, 0.33%)</title><rect x="25.8109%" y="133" width="0.3284%" height="15" fill="rgb(226,3,54)"/><text x="26.0609%" y="143.50"></text></g><g><title>check_mod_item_types (7,551,101 samples, 0.33%)</title><rect x="25.8117%" y="117" width="0.3276%" height="15" fill="rgb(245,192,40)"/><text x="26.0617%" y="127.50"></text></g><g><title>type_collecting (7,114,945 samples, 0.31%)</title><rect x="26.1398%" y="133" width="0.3087%" height="15" fill="rgb(238,167,29)"/><text x="26.3898%" y="143.50"></text></g><g><title>collect_mod_item_types (7,089,665 samples, 0.31%)</title><rect x="26.1409%" y="117" width="0.3076%" height="15" fill="rgb(232,182,51)"/><text x="26.3909%" y="127.50"></text></g><g><title>check_impl_item_well_formed (15,690,170 samples, 0.68%)</title><rect x="26.4949%" y="117" width="0.6808%" height="15" fill="rgb(231,60,39)"/><text x="26.7449%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,209,453 samples, 0.14%)</title><rect x="27.3759%" y="101" width="0.1392%" height="15" fill="rgb(208,69,12)"/><text x="27.6259%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,197,813 samples, 0.14%)</title><rect x="27.3764%" y="85" width="0.1387%" height="15" fill="rgb(235,93,37)"/><text x="27.6264%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,194,453 samples, 0.14%)</title><rect x="27.3765%" y="69" width="0.1386%" height="15" fill="rgb(213,116,39)"/><text x="27.6265%" y="79.50"></text></g><g><title>check_item_well_formed (11,675,982 samples, 0.51%)</title><rect x="27.1756%" y="117" width="0.5066%" height="15" fill="rgb(222,207,29)"/><text x="27.4256%" y="127.50"></text></g><g><title>analysis (345,727,309 samples, 15.00%)</title><rect x="12.8304%" y="165" width="15.0002%" height="15" fill="rgb(206,96,30)"/><text x="13.0804%" y="175.50">analysis</text></g><g><title>type_check_crate (205,475,960 samples, 8.92%)</title><rect x="18.9156%" y="149" width="8.9150%" height="15" fill="rgb(218,138,4)"/><text x="19.1656%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (31,810,577 samples, 1.38%)</title><rect x="26.4504%" y="133" width="1.3802%" height="15" fill="rgb(250,191,14)"/><text x="26.7004%" y="143.50"></text></g><g><title>check_trait_item_well_formed (3,419,966 samples, 0.15%)</title><rect x="27.6822%" y="117" width="0.1484%" height="15" fill="rgb(239,60,40)"/><text x="27.9322%" y="127.50"></text></g><g><title>param_env (4,314,524 samples, 0.19%)</title><rect x="30.8007%" y="117" width="0.1872%" height="15" fill="rgb(206,27,48)"/><text x="31.0507%" y="127.50"></text></g><g><title>fn_abi_of_instance (13,873,654 samples, 0.60%)</title><rect x="30.4143%" y="133" width="0.6019%" height="15" fill="rgb(225,35,8)"/><text x="30.6643%" y="143.50"></text></g><g><title>codegen_module (72,382,708 samples, 3.14%)</title><rect x="27.9426%" y="149" width="3.1405%" height="15" fill="rgb(250,213,24)"/><text x="28.1926%" y="159.50">cod..</text></g><g><title>metadata_decode_entry_optimized_mir (2,872,210 samples, 0.12%)</title><rect x="31.6801%" y="85" width="0.1246%" height="15" fill="rgb(247,123,22)"/><text x="31.9301%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,212,881 samples, 0.27%)</title><rect x="31.8047%" y="85" width="0.2696%" height="15" fill="rgb(231,138,38)"/><text x="32.0547%" y="95.50"></text></g><g><title>optimized_mir (17,531,396 samples, 0.76%)</title><rect x="31.3749%" y="101" width="0.7606%" height="15" fill="rgb(231,145,46)"/><text x="31.6249%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,310,585 samples, 0.14%)</title><rect x="32.1933%" y="85" width="0.1436%" height="15" fill="rgb(251,118,11)"/><text x="32.4433%" y="95.50"></text></g><g><title>resolve_instance (6,104,951 samples, 0.26%)</title><rect x="32.1355%" y="101" width="0.2649%" height="15" fill="rgb(217,147,25)"/><text x="32.3855%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (31,053,140 samples, 1.35%)</title><rect x="31.0856%" y="117" width="1.3473%" height="15" fill="rgb(247,81,37)"/><text x="31.3356%" y="127.50"></text></g><g><title>monomorphization_collector (31,315,772 samples, 1.36%)</title><rect x="31.0855%" y="133" width="1.3587%" height="15" fill="rgb(209,12,38)"/><text x="31.3355%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (2,538,497 samples, 0.11%)</title><rect x="32.4444%" y="117" width="0.1101%" height="15" fill="rgb(227,1,9)"/><text x="32.6944%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (35,132,193 samples, 1.52%)</title><rect x="31.0837%" y="149" width="1.5243%" height="15" fill="rgb(248,47,43)"/><text x="31.3337%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,773,060 samples, 0.16%)</title><rect x="32.4442%" y="133" width="0.1637%" height="15" fill="rgb(221,10,30)"/><text x="32.6942%" y="143.50"></text></g><g><title>codegen_crate (110,169,139 samples, 4.78%)</title><rect x="27.8309%" y="165" width="4.7799%" height="15" fill="rgb(210,229,1)"/><text x="28.0809%" y="175.50">codege..</text></g><g><title>codegen_module_optimize (558,682,200 samples, 24.24%)</title><rect x="32.6109%" y="165" width="24.2397%" height="15" fill="rgb(222,148,37)"/><text x="32.8609%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (534,781,598 samples, 23.20%)</title><rect x="33.6479%" y="149" width="23.2027%" height="15" fill="rgb(234,67,33)"/><text x="33.8979%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (290,516,471 samples, 12.60%)</title><rect x="57.6502%" y="149" width="12.6047%" height="15" fill="rgb(247,98,35)"/><text x="57.9002%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (283,315,178 samples, 12.29%)</title><rect x="70.2549%" y="149" width="12.2923%" height="15" fill="rgb(247,138,52)"/><text x="70.5049%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (280,219,804 samples, 12.16%)</title><rect x="70.3892%" y="133" width="12.1580%" height="15" fill="rgb(213,79,30)"/><text x="70.6392%" y="143.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (44,919,136 samples, 1.95%)</title><rect x="82.5472%" y="149" width="1.9489%" height="15" fill="rgb(246,177,23)"/><text x="82.7972%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (638,549,365 samples, 27.70%)</title><rect x="56.8506%" y="165" width="27.7049%" height="15" fill="rgb(230,62,27)"/><text x="57.1006%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (56,681,602 samples, 2.46%)</title><rect x="84.5946%" y="149" width="2.4593%" height="15" fill="rgb(216,154,8)"/><text x="84.8446%" y="159.50">ma..</text></g><g><title>expand_crate (56,671,202 samples, 2.46%)</title><rect x="84.5951%" y="133" width="2.4588%" height="15" fill="rgb(244,35,45)"/><text x="84.8451%" y="143.50">ex..</text></g><g><title>late_resolve_crate (6,648,181 samples, 0.29%)</title><rect x="87.0734%" y="133" width="0.2884%" height="15" fill="rgb(251,115,12)"/><text x="87.3234%" y="143.50"></text></g><g><title>configure_and_expand (65,174,812 samples, 2.83%)</title><rect x="84.5555%" y="165" width="2.8278%" height="15" fill="rgb(240,54,50)"/><text x="84.8055%" y="175.50">co..</text></g><g><title>resolve_crate (7,505,930 samples, 0.33%)</title><rect x="87.0576%" y="149" width="0.3257%" height="15" fill="rgb(233,84,52)"/><text x="87.3076%" y="159.50"></text></g><g><title>free_global_ctxt (12,622,604 samples, 0.55%)</title><rect x="87.4857%" y="165" width="0.5477%" height="15" fill="rgb(207,117,47)"/><text x="87.7357%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,039,055 samples, 0.48%)</title><rect x="89.0116%" y="133" width="0.4790%" height="15" fill="rgb(249,43,39)"/><text x="89.2616%" y="143.50"></text></g><g><title>optimized_mir (26,244,858 samples, 1.14%)</title><rect x="88.4096%" y="149" width="1.1387%" height="15" fill="rgb(209,38,44)"/><text x="88.6596%" y="159.50"></text></g><g><title>generate_crate_metadata (35,320,875 samples, 1.53%)</title><rect x="88.0334%" y="165" width="1.5325%" height="15" fill="rgb(236,212,23)"/><text x="88.2834%" y="175.50"></text></g><g><title>hir_lowering (13,442,343 samples, 0.58%)</title><rect x="89.5659%" y="165" width="0.5832%" height="15" fill="rgb(242,79,21)"/><text x="89.8159%" y="175.50"></text></g><g><title>finish_ongoing_codegen (219,044,655 samples, 9.50%)</title><rect x="90.1501%" y="149" width="9.5038%" height="15" fill="rgb(211,96,35)"/><text x="90.4001%" y="159.50">finish_ongoing..</text></g><g><title>link_crate (2,481,156 samples, 0.11%)</title><rect x="99.6539%" y="149" width="0.1077%" height="15" fill="rgb(253,215,40)"/><text x="99.9039%" y="159.50"></text></g><g><title>link_binary (2,402,835 samples, 0.10%)</title><rect x="99.6573%" y="133" width="0.1043%" height="15" fill="rgb(211,81,21)"/><text x="99.9073%" y="143.50"></text></g><g><title>link (221,558,071 samples, 9.61%)</title><rect x="90.1491%" y="165" width="9.6128%" height="15" fill="rgb(208,190,38)"/><text x="90.3991%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (4,031,953 samples, 0.17%)</title><rect x="99.7953%" y="165" width="0.1749%" height="15" fill="rgb(235,213,38)"/><text x="100.0453%" y="175.50"></text></g><g><title>all (2,304,822,879 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,304,822,879 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>