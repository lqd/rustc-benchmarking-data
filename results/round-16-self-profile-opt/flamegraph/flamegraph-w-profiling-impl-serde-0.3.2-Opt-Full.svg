<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (171,656,514 samples, 17.68%)</title><rect x="0.0787%" y="165" width="17.6797%" height="15" fill="rgb(227,0,7)"/><text x="0.3287%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,199,322 samples, 0.12%)</title><rect x="19.2259%" y="37" width="0.1235%" height="15" fill="rgb(217,0,24)"/><text x="19.4759%" y="47.50"></text></g><g><title>resolve_instance (1,888,430 samples, 0.19%)</title><rect x="19.1619%" y="53" width="0.1945%" height="15" fill="rgb(221,193,54)"/><text x="19.4119%" y="63.50"></text></g><g><title>mir_const (6,618,466 samples, 0.68%)</title><rect x="18.7499%" y="101" width="0.6817%" height="15" fill="rgb(248,212,6)"/><text x="18.9999%" y="111.50"></text></g><g><title>unsafety_check_result (5,930,046 samples, 0.61%)</title><rect x="18.8208%" y="85" width="0.6108%" height="15" fill="rgb(208,68,35)"/><text x="19.0708%" y="95.50"></text></g><g><title>mir_built (5,388,379 samples, 0.55%)</title><rect x="18.8765%" y="69" width="0.5550%" height="15" fill="rgb(232,128,0)"/><text x="19.1265%" y="79.50"></text></g><g><title>mir_promoted (7,374,353 samples, 0.76%)</title><rect x="18.6932%" y="117" width="0.7595%" height="15" fill="rgb(207,160,47)"/><text x="18.9432%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,868,744 samples, 0.19%)</title><rect x="19.5611%" y="117" width="0.1925%" height="15" fill="rgb(228,23,34)"/><text x="19.8111%" y="127.50"></text></g><g><title>MIR_borrow_checking (19,044,716 samples, 1.96%)</title><rect x="17.7940%" y="149" width="1.9615%" height="15" fill="rgb(218,30,26)"/><text x="18.0440%" y="159.50">M..</text></g><g><title>mir_borrowck (18,981,774 samples, 1.96%)</title><rect x="17.8005%" y="133" width="1.9550%" height="15" fill="rgb(220,122,19)"/><text x="18.0505%" y="143.50">m..</text></g><g><title>misc_checking_1 (1,575,968 samples, 0.16%)</title><rect x="19.7860%" y="149" width="0.1623%" height="15" fill="rgb(250,228,42)"/><text x="20.0360%" y="159.50"></text></g><g><title>crate_lints (1,954,002 samples, 0.20%)</title><rect x="20.0711%" y="117" width="0.2013%" height="15" fill="rgb(240,193,28)"/><text x="20.3211%" y="127.50"></text></g><g><title>type_of (1,105,019 samples, 0.11%)</title><rect x="20.1585%" y="101" width="0.1138%" height="15" fill="rgb(216,20,37)"/><text x="20.4085%" y="111.50"></text></g><g><title>lint_checking (2,263,315 samples, 0.23%)</title><rect x="20.0709%" y="133" width="0.2331%" height="15" fill="rgb(206,188,39)"/><text x="20.3209%" y="143.50"></text></g><g><title>misc_checking_3 (3,377,468 samples, 0.35%)</title><rect x="20.0274%" y="149" width="0.3479%" height="15" fill="rgb(217,207,13)"/><text x="20.2774%" y="159.50"></text></g><g><title>impl_parent (1,665,851 samples, 0.17%)</title><rect x="20.6696%" y="85" width="0.1716%" height="15" fill="rgb(231,73,38)"/><text x="20.9196%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,029,024 samples, 0.11%)</title><rect x="20.7352%" y="69" width="0.1060%" height="15" fill="rgb(225,20,46)"/><text x="20.9852%" y="79.50"></text></g><g><title>impl_trait_ref (4,394,328 samples, 0.45%)</title><rect x="20.8412%" y="85" width="0.4526%" height="15" fill="rgb(210,31,41)"/><text x="21.0912%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,745,365 samples, 0.39%)</title><rect x="20.9081%" y="69" width="0.3858%" height="15" fill="rgb(221,200,47)"/><text x="21.1581%" y="79.50"></text></g><g><title>coherent_trait (9,398,237 samples, 0.97%)</title><rect x="20.3816%" y="117" width="0.9680%" height="15" fill="rgb(226,26,5)"/><text x="20.6316%" y="127.50"></text></g><g><title>specialization_graph_of (9,383,217 samples, 0.97%)</title><rect x="20.3832%" y="101" width="0.9664%" height="15" fill="rgb(249,33,26)"/><text x="20.6332%" y="111.50"></text></g><g><title>coherence_checking (9,455,647 samples, 0.97%)</title><rect x="20.3799%" y="133" width="0.9739%" height="15" fill="rgb(235,183,28)"/><text x="20.6299%" y="143.50"></text></g><g><title>specializes (2,647,477 samples, 0.27%)</title><rect x="23.3628%" y="69" width="0.2727%" height="15" fill="rgb(221,5,38)"/><text x="23.6128%" y="79.50"></text></g><g><title>param_env (1,544,136 samples, 0.16%)</title><rect x="23.4765%" y="53" width="0.1590%" height="15" fill="rgb(247,18,42)"/><text x="23.7265%" y="63.50"></text></g><g><title>evaluate_obligation (9,343,876 samples, 0.96%)</title><rect x="22.7225%" y="85" width="0.9624%" height="15" fill="rgb(241,131,45)"/><text x="22.9725%" y="95.50"></text></g><g><title>evaluate_obligation (3,256,856 samples, 0.34%)</title><rect x="24.4311%" y="69" width="0.3354%" height="15" fill="rgb(249,31,29)"/><text x="24.6811%" y="79.50"></text></g><g><title>typeck (10,086,594 samples, 1.04%)</title><rect x="23.8496%" y="85" width="1.0389%" height="15" fill="rgb(225,111,53)"/><text x="24.0996%" y="95.50"></text></g><g><title>item_bodies_checking (34,326,639 samples, 3.54%)</title><rect x="21.3558%" y="133" width="3.5355%" height="15" fill="rgb(238,160,17)"/><text x="21.6058%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (34,323,229 samples, 3.54%)</title><rect x="21.3561%" y="117" width="3.5351%" height="15" fill="rgb(214,148,48)"/><text x="21.6061%" y="127.50">typ..</text></g><g><title>typeck (34,283,709 samples, 3.53%)</title><rect x="21.3602%" y="101" width="3.5310%" height="15" fill="rgb(232,36,49)"/><text x="21.6102%" y="111.50">typ..</text></g><g><title>item_types_checking (1,115,862 samples, 0.11%)</title><rect x="24.8912%" y="133" width="0.1149%" height="15" fill="rgb(209,103,24)"/><text x="25.1412%" y="143.50"></text></g><g><title>check_mod_item_types (1,113,512 samples, 0.11%)</title><rect x="24.8915%" y="117" width="0.1147%" height="15" fill="rgb(229,88,8)"/><text x="25.1415%" y="127.50"></text></g><g><title>type_collecting (1,785,900 samples, 0.18%)</title><rect x="25.0063%" y="133" width="0.1839%" height="15" fill="rgb(213,181,19)"/><text x="25.2563%" y="143.50"></text></g><g><title>collect_mod_item_types (1,769,930 samples, 0.18%)</title><rect x="25.0080%" y="117" width="0.1823%" height="15" fill="rgb(254,191,54)"/><text x="25.2580%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,251,612 samples, 0.13%)</title><rect x="25.2009%" y="117" width="0.1289%" height="15" fill="rgb(241,83,37)"/><text x="25.4509%" y="127.50"></text></g><g><title>analysis (75,624,256 samples, 7.79%)</title><rect x="17.7584%" y="165" width="7.7889%" height="15" fill="rgb(233,36,39)"/><text x="18.0084%" y="175.50">analysis</text></g><g><title>type_check_crate (50,216,638 samples, 5.17%)</title><rect x="20.3752%" y="149" width="5.1720%" height="15" fill="rgb(226,3,54)"/><text x="20.6252%" y="159.50">type_c..</text></g><g><title>wf_checking (3,463,830 samples, 0.36%)</title><rect x="25.1905%" y="133" width="0.3568%" height="15" fill="rgb(245,192,40)"/><text x="25.4405%" y="143.50"></text></g><g><title>check_item_well_formed (2,111,614 samples, 0.22%)</title><rect x="25.3298%" y="117" width="0.2175%" height="15" fill="rgb(238,167,29)"/><text x="25.5798%" y="127.50"></text></g><g><title>predicates_of (1,265,967 samples, 0.13%)</title><rect x="28.6349%" y="101" width="0.1304%" height="15" fill="rgb(232,182,51)"/><text x="28.8849%" y="111.50"></text></g><g><title>param_env (3,351,217 samples, 0.35%)</title><rect x="28.4210%" y="117" width="0.3452%" height="15" fill="rgb(231,60,39)"/><text x="28.6710%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,075,392 samples, 0.83%)</title><rect x="27.9900%" y="133" width="0.8317%" height="15" fill="rgb(208,69,12)"/><text x="28.2400%" y="143.50"></text></g><g><title>codegen_module (31,537,118 samples, 3.25%)</title><rect x="25.7107%" y="149" width="3.2482%" height="15" fill="rgb(235,93,37)"/><text x="25.9607%" y="159.50">cod..</text></g><g><title>item_attrs (1,257,866 samples, 0.13%)</title><rect x="29.1282%" y="85" width="0.1296%" height="15" fill="rgb(213,116,39)"/><text x="29.3782%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,220,465 samples, 0.13%)</title><rect x="29.1321%" y="69" width="0.1257%" height="15" fill="rgb(222,207,29)"/><text x="29.3821%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,869,741 samples, 0.19%)</title><rect x="29.1040%" y="101" width="0.1926%" height="15" fill="rgb(206,96,30)"/><text x="29.3540%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,500,609 samples, 0.15%)</title><rect x="29.5128%" y="85" width="0.1546%" height="15" fill="rgb(218,138,4)"/><text x="29.7628%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,109,231 samples, 0.11%)</title><rect x="29.6674%" y="85" width="0.1142%" height="15" fill="rgb(250,191,14)"/><text x="29.9174%" y="95.50"></text></g><g><title>optimized_mir (4,667,772 samples, 0.48%)</title><rect x="29.3428%" y="101" width="0.4808%" height="15" fill="rgb(239,60,40)"/><text x="29.5928%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,236,879 samples, 0.23%)</title><rect x="29.8926%" y="85" width="0.2304%" height="15" fill="rgb(206,27,48)"/><text x="30.1426%" y="95.50"></text></g><g><title>specialization_graph_of (1,781,911 samples, 0.18%)</title><rect x="30.1863%" y="85" width="0.1835%" height="15" fill="rgb(225,35,8)"/><text x="30.4363%" y="95.50"></text></g><g><title>resolve_instance (5,603,764 samples, 0.58%)</title><rect x="29.8236%" y="101" width="0.5772%" height="15" fill="rgb(250,213,24)"/><text x="30.0736%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (14,737,687 samples, 1.52%)</title><rect x="28.9630%" y="117" width="1.5179%" height="15" fill="rgb(247,123,22)"/><text x="29.2130%" y="127.50"></text></g><g><title>monomorphization_collector (14,775,767 samples, 1.52%)</title><rect x="28.9628%" y="133" width="1.5218%" height="15" fill="rgb(231,138,38)"/><text x="29.2128%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (1,333,895 samples, 0.14%)</title><rect x="30.4851%" y="117" width="0.1374%" height="15" fill="rgb(231,145,46)"/><text x="30.7351%" y="127.50"></text></g><g><title>symbol_name (1,231,893 samples, 0.13%)</title><rect x="30.4956%" y="101" width="0.1269%" height="15" fill="rgb(251,118,11)"/><text x="30.7456%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (16,624,058 samples, 1.71%)</title><rect x="28.9597%" y="149" width="1.7122%" height="15" fill="rgb(217,147,25)"/><text x="29.2097%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,818,841 samples, 0.19%)</title><rect x="30.4846%" y="133" width="0.1873%" height="15" fill="rgb(247,81,37)"/><text x="30.7346%" y="143.50"></text></g><g><title>codegen_crate (49,810,154 samples, 5.13%)</title><rect x="25.5483%" y="165" width="5.1302%" height="15" fill="rgb(209,12,38)"/><text x="25.7983%" y="175.50">codege..</text></g><g><title>codegen_module_optimize (210,232,690 samples, 21.65%)</title><rect x="30.6785%" y="165" width="21.6528%" height="15" fill="rgb(227,1,9)"/><text x="30.9285%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (193,124,987 samples, 19.89%)</title><rect x="32.4405%" y="149" width="19.8908%" height="15" fill="rgb(248,47,43)"/><text x="32.6905%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (110,914,582 samples, 11.42%)</title><rect x="53.5826%" y="149" width="11.4236%" height="15" fill="rgb(221,10,30)"/><text x="53.8326%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (136,413,621 samples, 14.05%)</title><rect x="65.0062%" y="149" width="14.0499%" height="15" fill="rgb(210,229,1)"/><text x="65.2562%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (134,400,931 samples, 13.84%)</title><rect x="65.2135%" y="133" width="13.8426%" height="15" fill="rgb(222,148,37)"/><text x="65.4635%" y="143.50">LLVM_module_codegen_e..</text></g><g><title>LLVM_thin_lto_import (11,175,887 samples, 1.15%)</title><rect x="79.0560%" y="149" width="1.1511%" height="15" fill="rgb(234,67,33)"/><text x="79.3060%" y="159.50"></text></g><g><title>codegen_module_perform_lto (271,446,967 samples, 27.96%)</title><rect x="52.3313%" y="165" width="27.9576%" height="15" fill="rgb(247,98,35)"/><text x="52.5813%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,070,233 samples, 0.21%)</title><rect x="82.3181%" y="117" width="0.2132%" height="15" fill="rgb(247,138,52)"/><text x="82.5681%" y="127.50"></text></g><g><title>macro_expand_crate (21,365,382 samples, 2.20%)</title><rect x="80.3553%" y="149" width="2.2005%" height="15" fill="rgb(213,79,30)"/><text x="80.6053%" y="159.50">m..</text></g><g><title>expand_crate (21,348,241 samples, 2.20%)</title><rect x="80.3571%" y="133" width="2.1988%" height="15" fill="rgb(246,177,23)"/><text x="80.6071%" y="143.50">e..</text></g><g><title>late_resolve_crate (5,106,028 samples, 0.53%)</title><rect x="82.5902%" y="133" width="0.5259%" height="15" fill="rgb(230,62,27)"/><text x="82.8402%" y="143.50"></text></g><g><title>configure_and_expand (27,628,023 samples, 2.85%)</title><rect x="80.2889%" y="165" width="2.8455%" height="15" fill="rgb(216,154,8)"/><text x="80.5389%" y="175.50">co..</text></g><g><title>resolve_crate (5,529,393 samples, 0.57%)</title><rect x="82.5649%" y="149" width="0.5695%" height="15" fill="rgb(244,35,45)"/><text x="82.8149%" y="159.50"></text></g><g><title>free_global_ctxt (8,310,315 samples, 0.86%)</title><rect x="83.2011%" y="165" width="0.8559%" height="15" fill="rgb(251,115,12)"/><text x="83.4511%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,229,125 samples, 0.13%)</title><rect x="84.3381%" y="133" width="0.1266%" height="15" fill="rgb(240,54,50)"/><text x="84.5881%" y="143.50"></text></g><g><title>optimized_mir (2,772,094 samples, 0.29%)</title><rect x="84.1803%" y="149" width="0.2855%" height="15" fill="rgb(233,84,52)"/><text x="84.4303%" y="159.50"></text></g><g><title>generate_crate_metadata (4,002,856 samples, 0.41%)</title><rect x="84.0570%" y="165" width="0.4123%" height="15" fill="rgb(207,117,47)"/><text x="84.3070%" y="175.50"></text></g><g><title>hir_lowering (4,036,285 samples, 0.42%)</title><rect x="84.4693%" y="165" width="0.4157%" height="15" fill="rgb(249,43,39)"/><text x="84.7193%" y="175.50"></text></g><g><title>finish_ongoing_codegen (140,858,995 samples, 14.51%)</title><rect x="84.8872%" y="149" width="14.5077%" height="15" fill="rgb(209,38,44)"/><text x="85.1372%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,341,887 samples, 0.24%)</title><rect x="99.3949%" y="149" width="0.2412%" height="15" fill="rgb(236,212,23)"/><text x="99.6449%" y="159.50"></text></g><g><title>link_binary (2,320,887 samples, 0.24%)</title><rect x="99.3970%" y="133" width="0.2390%" height="15" fill="rgb(242,79,21)"/><text x="99.6470%" y="143.50"></text></g><g><title>link_rlib (1,307,875 samples, 0.13%)</title><rect x="99.5014%" y="117" width="0.1347%" height="15" fill="rgb(211,96,35)"/><text x="99.7514%" y="127.50"></text></g><g><title>link (143,237,012 samples, 14.75%)</title><rect x="84.8850%" y="165" width="14.7526%" height="15" fill="rgb(253,215,40)"/><text x="85.1350%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,061,853 samples, 0.21%)</title><rect x="99.7403%" y="165" width="0.2124%" height="15" fill="rgb(211,81,21)"/><text x="99.9903%" y="175.50"></text></g><g><title>all (970,925,118 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (970,925,118 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>