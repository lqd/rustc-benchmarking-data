<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (52,476,391 samples, 13.45%)</title><rect x="0.2079%" y="181" width="13.4451%" height="15" fill="rgb(227,0,7)"/><text x="0.4579%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (444,085 samples, 0.11%)</title><rect x="13.5392%" y="165" width="0.1138%" height="15" fill="rgb(217,0,24)"/><text x="13.7892%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (429,015 samples, 0.11%)</title><rect x="13.5430%" y="149" width="0.1099%" height="15" fill="rgb(221,193,54)"/><text x="13.7930%" y="159.50"></text></g><g><title>item_attrs (544,526 samples, 0.14%)</title><rect x="19.4466%" y="69" width="0.1395%" height="15" fill="rgb(248,212,6)"/><text x="19.6966%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (537,706 samples, 0.14%)</title><rect x="19.4483%" y="53" width="0.1378%" height="15" fill="rgb(208,68,35)"/><text x="19.6983%" y="63.50"></text></g><g><title>codegen_fn_attrs (650,247 samples, 0.17%)</title><rect x="19.4252%" y="85" width="0.1666%" height="15" fill="rgb(232,128,0)"/><text x="19.6752%" y="95.50"></text></g><g><title>needs_drop_raw (1,396,781 samples, 0.36%)</title><rect x="20.7501%" y="69" width="0.3579%" height="15" fill="rgb(207,160,47)"/><text x="21.0001%" y="79.50"></text></g><g><title>is_copy_raw (1,072,149 samples, 0.27%)</title><rect x="20.8332%" y="53" width="0.2747%" height="15" fill="rgb(228,23,34)"/><text x="21.0832%" y="63.50"></text></g><g><title>evaluate_obligation (901,268 samples, 0.23%)</title><rect x="20.8770%" y="37" width="0.2309%" height="15" fill="rgb(218,30,26)"/><text x="21.1270%" y="47.50"></text></g><g><title>resolve_instance (749,934 samples, 0.19%)</title><rect x="21.1162%" y="69" width="0.1921%" height="15" fill="rgb(220,122,19)"/><text x="21.3662%" y="79.50"></text></g><g><title>thir_body (1,534,139 samples, 0.39%)</title><rect x="21.3150%" y="69" width="0.3931%" height="15" fill="rgb(250,228,42)"/><text x="21.5650%" y="79.50"></text></g><g><title>mir_const (10,726,267 samples, 2.75%)</title><rect x="18.9822%" y="117" width="2.7482%" height="15" fill="rgb(240,193,28)"/><text x="19.2322%" y="127.50">mi..</text></g><g><title>unsafety_check_result (9,576,589 samples, 2.45%)</title><rect x="19.2767%" y="101" width="2.4536%" height="15" fill="rgb(216,20,37)"/><text x="19.5267%" y="111.50">un..</text></g><g><title>mir_built (8,346,915 samples, 2.14%)</title><rect x="19.5918%" y="85" width="2.1386%" height="15" fill="rgb(206,188,39)"/><text x="19.8418%" y="95.50">m..</text></g><g><title>mir_promoted (12,011,146 samples, 3.08%)</title><rect x="18.7000%" y="133" width="3.0774%" height="15" fill="rgb(217,207,13)"/><text x="18.9500%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (673,058 samples, 0.17%)</title><rect x="21.7787%" y="133" width="0.1724%" height="15" fill="rgb(231,73,38)"/><text x="22.0287%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (933,093 samples, 0.24%)</title><rect x="21.9512%" y="133" width="0.2391%" height="15" fill="rgb(225,20,46)"/><text x="22.2012%" y="143.50"></text></g><g><title>normalize_projection_ty (428,395 samples, 0.11%)</title><rect x="22.0805%" y="117" width="0.1098%" height="15" fill="rgb(210,31,41)"/><text x="22.3305%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,332,730 samples, 1.11%)</title><rect x="22.3422%" y="133" width="1.1101%" height="15" fill="rgb(221,200,47)"/><text x="22.5922%" y="143.50"></text></g><g><title>MIR_borrow_checking (37,830,736 samples, 9.69%)</title><rect x="13.7609%" y="165" width="9.6927%" height="15" fill="rgb(226,26,5)"/><text x="14.0109%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (37,728,720 samples, 9.67%)</title><rect x="13.7870%" y="149" width="9.6666%" height="15" fill="rgb(249,33,26)"/><text x="14.0370%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (402,915 samples, 0.10%)</title><rect x="23.6190%" y="133" width="0.1032%" height="15" fill="rgb(235,183,28)"/><text x="23.8690%" y="143.50"></text></g><g><title>check_mod_attrs (696,988 samples, 0.18%)</title><rect x="23.5437%" y="149" width="0.1786%" height="15" fill="rgb(221,5,38)"/><text x="23.7937%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (477,975 samples, 0.12%)</title><rect x="23.7786%" y="149" width="0.1225%" height="15" fill="rgb(247,18,42)"/><text x="24.0286%" y="159.50"></text></g><g><title>misc_checking_1 (1,458,776 samples, 0.37%)</title><rect x="23.5385%" y="165" width="0.3738%" height="15" fill="rgb(241,131,45)"/><text x="23.7885%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (809,789 samples, 0.21%)</title><rect x="23.9127%" y="149" width="0.2075%" height="15" fill="rgb(249,31,29)"/><text x="24.1627%" y="159.50"></text></g><g><title>check_mod_liveness (674,587 samples, 0.17%)</title><rect x="23.9474%" y="133" width="0.1728%" height="15" fill="rgb(225,111,53)"/><text x="24.1974%" y="143.50"></text></g><g><title>misc_checking_2 (1,907,462 samples, 0.49%)</title><rect x="23.9122%" y="165" width="0.4887%" height="15" fill="rgb(238,160,17)"/><text x="24.1622%" y="175.50"></text></g><g><title>match_checking (1,095,693 samples, 0.28%)</title><rect x="24.1202%" y="149" width="0.2807%" height="15" fill="rgb(214,148,48)"/><text x="24.3702%" y="159.50"></text></g><g><title>check_match (1,067,962 samples, 0.27%)</title><rect x="24.1273%" y="133" width="0.2736%" height="15" fill="rgb(232,36,49)"/><text x="24.3773%" y="143.50"></text></g><g><title>death_checking (579,727 samples, 0.15%)</title><rect x="24.4690%" y="149" width="0.1485%" height="15" fill="rgb(209,103,24)"/><text x="24.7190%" y="159.50"></text></g><g><title>crate_lints (2,236,765 samples, 0.57%)</title><rect x="24.6180%" y="133" width="0.5731%" height="15" fill="rgb(229,88,8)"/><text x="24.8680%" y="143.50"></text></g><g><title>type_of (1,105,423 samples, 0.28%)</title><rect x="24.9078%" y="117" width="0.2832%" height="15" fill="rgb(213,181,19)"/><text x="25.1578%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (876,159 samples, 0.22%)</title><rect x="24.9666%" y="101" width="0.2245%" height="15" fill="rgb(254,191,54)"/><text x="25.2166%" y="111.50"></text></g><g><title>lint_checking (2,936,263 samples, 0.75%)</title><rect x="24.6176%" y="149" width="0.7523%" height="15" fill="rgb(241,83,37)"/><text x="24.8676%" y="159.50"></text></g><g><title>module_lints (697,898 samples, 0.18%)</title><rect x="25.1911%" y="133" width="0.1788%" height="15" fill="rgb(233,36,39)"/><text x="25.4411%" y="143.50"></text></g><g><title>lint_mod (694,638 samples, 0.18%)</title><rect x="25.1919%" y="117" width="0.1780%" height="15" fill="rgb(226,3,54)"/><text x="25.4419%" y="127.50"></text></g><g><title>privacy_checking_modules (1,426,716 samples, 0.37%)</title><rect x="25.4558%" y="149" width="0.3655%" height="15" fill="rgb(245,192,40)"/><text x="25.7058%" y="159.50"></text></g><g><title>check_mod_privacy (1,423,876 samples, 0.36%)</title><rect x="25.4566%" y="133" width="0.3648%" height="15" fill="rgb(238,167,29)"/><text x="25.7066%" y="143.50"></text></g><g><title>misc_checking_3 (5,566,023 samples, 1.43%)</title><rect x="24.4009%" y="165" width="1.4261%" height="15" fill="rgb(232,182,51)"/><text x="24.6509%" y="175.50"></text></g><g><title>impl_parent (2,433,811 samples, 0.62%)</title><rect x="26.9221%" y="101" width="0.6236%" height="15" fill="rgb(231,60,39)"/><text x="27.1721%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,435,276 samples, 0.37%)</title><rect x="27.1780%" y="85" width="0.3677%" height="15" fill="rgb(208,69,12)"/><text x="27.4280%" y="95.50"></text></g><g><title>impl_trait_ref (5,437,931 samples, 1.39%)</title><rect x="27.5462%" y="101" width="1.3933%" height="15" fill="rgb(235,93,37)"/><text x="27.7962%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,300,779 samples, 1.10%)</title><rect x="27.8375%" y="85" width="1.1019%" height="15" fill="rgb(213,116,39)"/><text x="28.0875%" y="95.50"></text></g><g><title>trait_impls_of (740,871 samples, 0.19%)</title><rect x="28.9517%" y="101" width="0.1898%" height="15" fill="rgb(222,207,29)"/><text x="29.2017%" y="111.50"></text></g><g><title>coherent_trait (12,864,464 samples, 3.30%)</title><rect x="25.8459%" y="133" width="3.2960%" height="15" fill="rgb(206,96,30)"/><text x="26.0959%" y="143.50">coh..</text></g><g><title>specialization_graph_of (12,844,164 samples, 3.29%)</title><rect x="25.8511%" y="117" width="3.2908%" height="15" fill="rgb(218,138,4)"/><text x="26.1011%" y="127.50">spe..</text></g><g><title>coherence_checking (12,931,936 samples, 3.31%)</title><rect x="25.8407%" y="149" width="3.3133%" height="15" fill="rgb(250,191,14)"/><text x="26.0907%" y="159.50">coh..</text></g><g><title>associated_items (405,065 samples, 0.10%)</title><rect x="36.4538%" y="101" width="0.1038%" height="15" fill="rgb(239,60,40)"/><text x="36.7038%" y="111.50"></text></g><g><title>dropck_outlives (589,891 samples, 0.15%)</title><rect x="36.5685%" y="101" width="0.1511%" height="15" fill="rgb(206,27,48)"/><text x="36.8185%" y="111.50"></text></g><g><title>evaluate_obligation (2,254,418 samples, 0.58%)</title><rect x="36.7196%" y="101" width="0.5776%" height="15" fill="rgb(225,35,8)"/><text x="36.9696%" y="111.50"></text></g><g><title>evaluate_obligation (1,083,934 samples, 0.28%)</title><rect x="40.6765%" y="85" width="0.2777%" height="15" fill="rgb(250,213,24)"/><text x="40.9265%" y="95.50"></text></g><g><title>typeck (13,541,092 samples, 3.47%)</title><rect x="37.6893%" y="101" width="3.4694%" height="15" fill="rgb(247,123,22)"/><text x="37.9393%" y="111.50">typ..</text></g><g><title>item_bodies_checking (46,868,488 samples, 12.01%)</title><rect x="29.1626%" y="149" width="12.0083%" height="15" fill="rgb(231,138,38)"/><text x="29.4126%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (46,865,108 samples, 12.01%)</title><rect x="29.1635%" y="133" width="12.0074%" height="15" fill="rgb(231,145,46)"/><text x="29.4135%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (46,799,237 samples, 11.99%)</title><rect x="29.1804%" y="117" width="11.9906%" height="15" fill="rgb(251,118,11)"/><text x="29.4304%" y="127.50">typeck</text></g><g><title>item_types_checking (1,237,194 samples, 0.32%)</title><rect x="41.1709%" y="149" width="0.3170%" height="15" fill="rgb(217,147,25)"/><text x="41.4209%" y="159.50"></text></g><g><title>check_mod_item_types (1,234,004 samples, 0.32%)</title><rect x="41.1717%" y="133" width="0.3162%" height="15" fill="rgb(247,81,37)"/><text x="41.4217%" y="143.50"></text></g><g><title>fn_sig (392,624 samples, 0.10%)</title><rect x="41.5668%" y="117" width="0.1006%" height="15" fill="rgb(209,12,38)"/><text x="41.8168%" y="127.50"></text></g><g><title>late_bound_vars_map (530,924 samples, 0.14%)</title><rect x="41.8847%" y="69" width="0.1360%" height="15" fill="rgb(227,1,9)"/><text x="42.1347%" y="79.50"></text></g><g><title>resolve_lifetimes (517,454 samples, 0.13%)</title><rect x="41.8881%" y="53" width="0.1326%" height="15" fill="rgb(248,47,43)"/><text x="42.1381%" y="63.50"></text></g><g><title>explicit_predicates_of (941,591 samples, 0.24%)</title><rect x="41.7857%" y="85" width="0.2412%" height="15" fill="rgb(221,10,30)"/><text x="42.0357%" y="95.50"></text></g><g><title>predicates_of (1,617,668 samples, 0.41%)</title><rect x="41.7489%" y="117" width="0.4145%" height="15" fill="rgb(210,229,1)"/><text x="41.9989%" y="127.50"></text></g><g><title>predicates_defined_on (1,559,628 samples, 0.40%)</title><rect x="41.7638%" y="101" width="0.3996%" height="15" fill="rgb(222,148,37)"/><text x="42.0138%" y="111.50"></text></g><g><title>inferred_outlives_of (532,686 samples, 0.14%)</title><rect x="42.0269%" y="85" width="0.1365%" height="15" fill="rgb(234,67,33)"/><text x="42.2769%" y="95.50"></text></g><g><title>inferred_outlives_crate (509,115 samples, 0.13%)</title><rect x="42.0330%" y="69" width="0.1304%" height="15" fill="rgb(247,98,35)"/><text x="42.2830%" y="79.50"></text></g><g><title>type_of (401,024 samples, 0.10%)</title><rect x="42.0607%" y="53" width="0.1027%" height="15" fill="rgb(247,138,52)"/><text x="42.3107%" y="63.50"></text></g><g><title>type_collecting (2,768,841 samples, 0.71%)</title><rect x="41.4883%" y="149" width="0.7094%" height="15" fill="rgb(213,79,30)"/><text x="41.7383%" y="159.50"></text></g><g><title>collect_mod_item_types (2,760,321 samples, 0.71%)</title><rect x="41.4905%" y="133" width="0.7072%" height="15" fill="rgb(246,177,23)"/><text x="41.7405%" y="143.50"></text></g><g><title>region_scope_tree (567,086 samples, 0.15%)</title><rect x="43.1187%" y="117" width="0.1453%" height="15" fill="rgb(230,62,27)"/><text x="43.3687%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,958,554 samples, 1.01%)</title><rect x="42.2561%" y="133" width="1.0142%" height="15" fill="rgb(216,154,8)"/><text x="42.5061%" y="143.50"></text></g><g><title>check_item_well_formed (2,961,315 samples, 0.76%)</title><rect x="43.2703%" y="133" width="0.7587%" height="15" fill="rgb(244,35,45)"/><text x="43.5203%" y="143.50"></text></g><g><title>analysis (120,495,697 samples, 30.87%)</title><rect x="13.6530%" y="181" width="30.8725%" height="15" fill="rgb(251,115,12)"/><text x="13.9030%" y="191.50">analysis</text></g><g><title>type_check_crate (72,980,202 samples, 18.70%)</title><rect x="25.8270%" y="165" width="18.6984%" height="15" fill="rgb(240,54,50)"/><text x="26.0770%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,081,062 samples, 2.33%)</title><rect x="42.1988%" y="149" width="2.3267%" height="15" fill="rgb(233,84,52)"/><text x="42.4488%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (1,937,642 samples, 0.50%)</title><rect x="44.0290%" y="133" width="0.4964%" height="15" fill="rgb(207,117,47)"/><text x="44.2790%" y="143.50"></text></g><g><title>layout_of (578,235 samples, 0.15%)</title><rect x="46.1871%" y="133" width="0.1482%" height="15" fill="rgb(249,43,39)"/><text x="46.4371%" y="143.50"></text></g><g><title>param_env (559,823 samples, 0.14%)</title><rect x="46.3353%" y="133" width="0.1434%" height="15" fill="rgb(209,38,44)"/><text x="46.5853%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,281,221 samples, 0.58%)</title><rect x="45.9322%" y="149" width="0.5845%" height="15" fill="rgb(236,212,23)"/><text x="46.1822%" y="159.50"></text></g><g><title>codegen_module (7,090,840 samples, 1.82%)</title><rect x="44.8031%" y="165" width="1.8168%" height="15" fill="rgb(242,79,21)"/><text x="45.0531%" y="175.50">c..</text></g><g><title>codegen_fn_attrs (405,852 samples, 0.10%)</title><rect x="46.7505%" y="117" width="0.1040%" height="15" fill="rgb(211,96,35)"/><text x="47.0005%" y="127.50"></text></g><g><title>optimized_mir (1,242,695 samples, 0.32%)</title><rect x="46.8883%" y="117" width="0.3184%" height="15" fill="rgb(253,215,40)"/><text x="47.1383%" y="127.50"></text></g><g><title>specialization_graph_of (935,351 samples, 0.24%)</title><rect x="47.3403%" y="101" width="0.2396%" height="15" fill="rgb(211,81,21)"/><text x="47.5903%" y="111.50"></text></g><g><title>impl_trait_ref (482,375 samples, 0.12%)</title><rect x="47.4564%" y="85" width="0.1236%" height="15" fill="rgb(208,190,38)"/><text x="47.7064%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (418,233 samples, 0.11%)</title><rect x="47.4728%" y="69" width="0.1072%" height="15" fill="rgb(235,213,38)"/><text x="47.7228%" y="79.50"></text></g><g><title>resolve_instance (1,537,986 samples, 0.39%)</title><rect x="47.2067%" y="117" width="0.3941%" height="15" fill="rgb(237,122,38)"/><text x="47.4567%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,915,863 samples, 1.00%)</title><rect x="46.6274%" y="133" width="1.0033%" height="15" fill="rgb(244,218,35)"/><text x="46.8774%" y="143.50"></text></g><g><title>monomorphization_collector (3,956,554 samples, 1.01%)</title><rect x="46.6268%" y="149" width="1.0137%" height="15" fill="rgb(240,68,47)"/><text x="46.8768%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (402,934 samples, 0.10%)</title><rect x="47.6422%" y="133" width="0.1032%" height="15" fill="rgb(210,16,53)"/><text x="47.8922%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (4,513,151 samples, 1.16%)</title><rect x="46.6205%" y="165" width="1.1563%" height="15" fill="rgb(235,124,12)"/><text x="46.8705%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (532,125 samples, 0.14%)</title><rect x="47.6405%" y="149" width="0.1363%" height="15" fill="rgb(224,169,11)"/><text x="47.8905%" y="159.50"></text></g><g><title>codegen_crate (12,776,093 samples, 3.27%)</title><rect x="44.5285%" y="181" width="3.2734%" height="15" fill="rgb(250,166,2)"/><text x="44.7785%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (46,617,077 samples, 11.94%)</title><rect x="47.8019%" y="181" width="11.9439%" height="15" fill="rgb(242,216,29)"/><text x="48.0519%" y="191.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (42,705,351 samples, 10.94%)</title><rect x="48.8041%" y="165" width="10.9416%" height="15" fill="rgb(230,116,27)"/><text x="49.0541%" y="175.50">LLVM_module_opti..</text></g><g><title>LLVM_lto_optimize (17,907,621 samples, 4.59%)</title><rect x="60.4275%" y="165" width="4.5882%" height="15" fill="rgb(228,99,48)"/><text x="60.6775%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen (31,383,665 samples, 8.04%)</title><rect x="65.0157%" y="165" width="8.0409%" height="15" fill="rgb(253,11,6)"/><text x="65.2657%" y="175.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (30,764,776 samples, 7.88%)</title><rect x="65.1742%" y="149" width="7.8823%" height="15" fill="rgb(247,143,39)"/><text x="65.4242%" y="159.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (1,174,252 samples, 0.30%)</title><rect x="73.0566%" y="165" width="0.3009%" height="15" fill="rgb(236,97,10)"/><text x="73.3066%" y="175.50"></text></g><g><title>codegen_module_perform_lto (53,278,240 samples, 13.65%)</title><rect x="59.7458%" y="181" width="13.6506%" height="15" fill="rgb(233,208,19)"/><text x="59.9958%" y="191.50">codegen_module_perfor..</text></g><g><title>metadata_register_crate (2,587,879 samples, 0.66%)</title><rect x="79.9066%" y="133" width="0.6630%" height="15" fill="rgb(216,164,2)"/><text x="80.1566%" y="143.50"></text></g><g><title>metadata_register_crate (916,179 samples, 0.23%)</title><rect x="80.3349%" y="117" width="0.2347%" height="15" fill="rgb(220,129,5)"/><text x="80.5849%" y="127.50"></text></g><g><title>macro_expand_crate (27,688,462 samples, 7.09%)</title><rect x="73.5394%" y="165" width="7.0941%" height="15" fill="rgb(242,17,10)"/><text x="73.7894%" y="175.50">macro_expa..</text></g><g><title>expand_crate (27,675,001 samples, 7.09%)</title><rect x="73.5429%" y="149" width="7.0907%" height="15" fill="rgb(242,107,0)"/><text x="73.7929%" y="159.50">expand_cra..</text></g><g><title>late_resolve_crate (2,516,298 samples, 0.64%)</title><rect x="80.7180%" y="149" width="0.6447%" height="15" fill="rgb(251,28,31)"/><text x="80.9680%" y="159.50"></text></g><g><title>configure_and_expand (31,236,001 samples, 8.00%)</title><rect x="73.3963%" y="181" width="8.0031%" height="15" fill="rgb(233,223,10)"/><text x="73.6463%" y="191.50">configure_a..</text></g><g><title>resolve_crate (2,835,872 samples, 0.73%)</title><rect x="80.6728%" y="165" width="0.7266%" height="15" fill="rgb(215,21,27)"/><text x="80.9228%" y="175.50"></text></g><g><title>early_lint_checks (489,315 samples, 0.13%)</title><rect x="81.4655%" y="181" width="0.1254%" height="15" fill="rgb(232,23,21)"/><text x="81.7155%" y="191.50"></text></g><g><title>free_global_ctxt (4,739,433 samples, 1.21%)</title><rect x="81.5908%" y="181" width="1.2143%" height="15" fill="rgb(244,5,23)"/><text x="81.8408%" y="191.50"></text></g><g><title>layout_of (1,130,743 samples, 0.29%)</title><rect x="84.5541%" y="149" width="0.2897%" height="15" fill="rgb(226,81,46)"/><text x="84.8041%" y="159.50"></text></g><g><title>is_copy_raw (440,192 samples, 0.11%)</title><rect x="86.3456%" y="117" width="0.1128%" height="15" fill="rgb(247,70,30)"/><text x="86.5956%" y="127.50"></text></g><g><title>needs_drop_raw (516,172 samples, 0.13%)</title><rect x="86.3268%" y="133" width="0.1322%" height="15" fill="rgb(212,68,19)"/><text x="86.5768%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,398,043 samples, 1.64%)</title><rect x="84.8439%" y="149" width="1.6393%" height="15" fill="rgb(240,187,13)"/><text x="85.0939%" y="159.50"></text></g><g><title>optimized_mir (12,000,988 samples, 3.07%)</title><rect x="83.4354%" y="165" width="3.0748%" height="15" fill="rgb(223,113,26)"/><text x="83.6854%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (14,886,148 samples, 3.81%)</title><rect x="82.8051%" y="181" width="3.8140%" height="15" fill="rgb(206,192,2)"/><text x="83.0551%" y="191.50">gene..</text></g><g><title>hir_lowering (3,937,084 samples, 1.01%)</title><rect x="86.6192%" y="181" width="1.0087%" height="15" fill="rgb(241,108,4)"/><text x="86.8692%" y="191.50"></text></g><g><title>finish_ongoing_codegen (42,793,032 samples, 10.96%)</title><rect x="87.6318%" y="165" width="10.9641%" height="15" fill="rgb(247,173,49)"/><text x="87.8818%" y="175.50">finish_ongoing_c..</text></g><g><title>link_crate (1,156,493 samples, 0.30%)</title><rect x="98.5960%" y="165" width="0.2963%" height="15" fill="rgb(224,114,35)"/><text x="98.8460%" y="175.50"></text></g><g><title>link_binary (1,115,363 samples, 0.29%)</title><rect x="98.6065%" y="149" width="0.2858%" height="15" fill="rgb(245,159,27)"/><text x="98.8565%" y="159.50"></text></g><g><title>link_rlib (767,429 samples, 0.20%)</title><rect x="98.6956%" y="133" width="0.1966%" height="15" fill="rgb(245,172,44)"/><text x="98.9456%" y="143.50"></text></g><g><title>link (43,974,925 samples, 11.27%)</title><rect x="87.6279%" y="181" width="11.2669%" height="15" fill="rgb(236,23,11)"/><text x="87.8779%" y="191.50">link</text></g><g><title>parse_crate (2,150,364 samples, 0.55%)</title><rect x="98.8948%" y="181" width="0.5510%" height="15" fill="rgb(205,117,38)"/><text x="99.1448%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,408,636 samples, 0.36%)</title><rect x="99.4991%" y="181" width="0.3609%" height="15" fill="rgb(237,72,25)"/><text x="99.7491%" y="191.50"></text></g><g><title>all (390,300,976 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (390,300,976 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (464,955 samples, 0.12%)</title><rect x="99.8809%" y="181" width="0.1191%" height="15" fill="rgb(235,36,10)"/><text x="100.1309%" y="191.50"></text></g></svg></svg>