<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,292,262 samples, 14.17%)</title><rect x="0.3401%" y="197" width="14.1689%" height="15" fill="rgb(227,0,7)"/><text x="0.5901%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (164,952 samples, 0.14%)</title><rect x="14.3738%" y="181" width="0.1352%" height="15" fill="rgb(217,0,24)"/><text x="14.6238%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (147,542 samples, 0.12%)</title><rect x="14.3881%" y="165" width="0.1209%" height="15" fill="rgb(221,193,54)"/><text x="14.6381%" y="175.50"></text></g><g><title>param_env (195,252 samples, 0.16%)</title><rect x="19.7535%" y="117" width="0.1600%" height="15" fill="rgb(248,212,6)"/><text x="20.0035%" y="127.50"></text></g><g><title>item_attrs (543,197 samples, 0.45%)</title><rect x="20.1722%" y="85" width="0.4451%" height="15" fill="rgb(208,68,35)"/><text x="20.4222%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (535,807 samples, 0.44%)</title><rect x="20.1782%" y="69" width="0.4390%" height="15" fill="rgb(232,128,0)"/><text x="20.4282%" y="79.50"></text></g><g><title>codegen_fn_attrs (629,257 samples, 0.52%)</title><rect x="20.1144%" y="101" width="0.5156%" height="15" fill="rgb(207,160,47)"/><text x="20.3644%" y="111.50"></text></g><g><title>adt_drop_tys (172,520 samples, 0.14%)</title><rect x="21.8825%" y="69" width="0.1414%" height="15" fill="rgb(228,23,34)"/><text x="22.1325%" y="79.50"></text></g><g><title>needs_drop_raw (682,504 samples, 0.56%)</title><rect x="21.8325%" y="85" width="0.5592%" height="15" fill="rgb(218,30,26)"/><text x="22.0825%" y="95.50"></text></g><g><title>is_copy_raw (449,003 samples, 0.37%)</title><rect x="22.0239%" y="69" width="0.3679%" height="15" fill="rgb(220,122,19)"/><text x="22.2739%" y="79.50"></text></g><g><title>evaluate_obligation (383,103 samples, 0.31%)</title><rect x="22.0779%" y="53" width="0.3139%" height="15" fill="rgb(250,228,42)"/><text x="22.3279%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (296,244 samples, 0.24%)</title><rect x="22.4723%" y="69" width="0.2427%" height="15" fill="rgb(240,193,28)"/><text x="22.7223%" y="79.50"></text></g><g><title>impl_parent (315,003 samples, 0.26%)</title><rect x="23.1395%" y="53" width="0.2581%" height="15" fill="rgb(216,20,37)"/><text x="23.3895%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (216,042 samples, 0.18%)</title><rect x="23.2206%" y="37" width="0.1770%" height="15" fill="rgb(206,188,39)"/><text x="23.4706%" y="47.50"></text></g><g><title>specialization_graph_of (1,390,385 samples, 1.14%)</title><rect x="22.7423%" y="69" width="1.1392%" height="15" fill="rgb(217,207,13)"/><text x="22.9923%" y="79.50"></text></g><g><title>impl_trait_ref (590,585 samples, 0.48%)</title><rect x="23.3976%" y="53" width="0.4839%" height="15" fill="rgb(231,73,38)"/><text x="23.6476%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (492,335 samples, 0.40%)</title><rect x="23.4781%" y="37" width="0.4034%" height="15" fill="rgb(225,20,46)"/><text x="23.7281%" y="47.50"></text></g><g><title>resolve_instance (1,860,180 samples, 1.52%)</title><rect x="22.3918%" y="85" width="1.5242%" height="15" fill="rgb(210,31,41)"/><text x="22.6418%" y="95.50"></text></g><g><title>thir_body (521,017 samples, 0.43%)</title><rect x="23.9242%" y="85" width="0.4269%" height="15" fill="rgb(221,200,47)"/><text x="24.1742%" y="95.50"></text></g><g><title>mir_const (6,093,276 samples, 4.99%)</title><rect x="19.3677%" y="133" width="4.9927%" height="15" fill="rgb(226,26,5)"/><text x="19.6177%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (5,427,160 samples, 4.45%)</title><rect x="19.9135%" y="117" width="4.4469%" height="15" fill="rgb(249,33,26)"/><text x="20.1635%" y="127.50">unsaf..</text></g><g><title>mir_built (4,552,730 samples, 3.73%)</title><rect x="20.6300%" y="101" width="3.7304%" height="15" fill="rgb(235,183,28)"/><text x="20.8800%" y="111.50">mir_..</text></g><g><title>mir_promoted (6,627,022 samples, 5.43%)</title><rect x="18.9847%" y="149" width="5.4300%" height="15" fill="rgb(221,5,38)"/><text x="19.2347%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (207,063 samples, 0.17%)</title><rect x="24.4147%" y="149" width="0.1697%" height="15" fill="rgb(247,18,42)"/><text x="24.6647%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (308,772 samples, 0.25%)</title><rect x="24.5844%" y="149" width="0.2530%" height="15" fill="rgb(241,131,45)"/><text x="24.8344%" y="159.50"></text></g><g><title>normalize_projection_ty (221,282 samples, 0.18%)</title><rect x="24.6561%" y="133" width="0.1813%" height="15" fill="rgb(249,31,29)"/><text x="24.9061%" y="143.50"></text></g><g><title>type_op_prove_predicate (837,000 samples, 0.69%)</title><rect x="24.9026%" y="149" width="0.6858%" height="15" fill="rgb(225,111,53)"/><text x="25.1526%" y="159.50"></text></g><g><title>MIR_borrow_checking (13,357,218 samples, 10.94%)</title><rect x="14.6482%" y="181" width="10.9446%" height="15" fill="rgb(238,160,17)"/><text x="14.8982%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (13,311,018 samples, 10.91%)</title><rect x="14.6861%" y="165" width="10.9067%" height="15" fill="rgb(214,148,48)"/><text x="14.9361%" y="175.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (161,241 samples, 0.13%)</title><rect x="25.9425%" y="133" width="0.1321%" height="15" fill="rgb(232,36,49)"/><text x="26.1925%" y="143.50"></text></g><g><title>codegen_fn_attrs (253,042 samples, 0.21%)</title><rect x="25.8844%" y="149" width="0.2073%" height="15" fill="rgb(209,103,24)"/><text x="26.1344%" y="159.50"></text></g><g><title>check_mod_attrs (374,103 samples, 0.31%)</title><rect x="25.7853%" y="165" width="0.3065%" height="15" fill="rgb(229,88,8)"/><text x="26.0353%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (404,855 samples, 0.33%)</title><rect x="26.1690%" y="165" width="0.3317%" height="15" fill="rgb(213,181,19)"/><text x="26.4190%" y="175.50"></text></g><g><title>misc_checking_1 (930,200 samples, 0.76%)</title><rect x="25.7720%" y="181" width="0.7622%" height="15" fill="rgb(254,191,54)"/><text x="26.0220%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (478,206 samples, 0.39%)</title><rect x="26.5354%" y="165" width="0.3918%" height="15" fill="rgb(241,83,37)"/><text x="26.7854%" y="175.50"></text></g><g><title>check_mod_liveness (430,415 samples, 0.35%)</title><rect x="26.5746%" y="149" width="0.3527%" height="15" fill="rgb(233,36,39)"/><text x="26.8246%" y="159.50"></text></g><g><title>misc_checking_2 (766,889 samples, 0.63%)</title><rect x="26.5342%" y="181" width="0.6284%" height="15" fill="rgb(226,3,54)"/><text x="26.7842%" y="191.50"></text></g><g><title>match_checking (287,183 samples, 0.24%)</title><rect x="26.9273%" y="165" width="0.2353%" height="15" fill="rgb(245,192,40)"/><text x="27.1773%" y="175.50"></text></g><g><title>check_match (274,453 samples, 0.22%)</title><rect x="26.9377%" y="149" width="0.2249%" height="15" fill="rgb(238,167,29)"/><text x="27.1877%" y="159.50"></text></g><g><title>death_checking (189,752 samples, 0.16%)</title><rect x="27.2404%" y="165" width="0.1555%" height="15" fill="rgb(232,182,51)"/><text x="27.4904%" y="175.50"></text></g><g><title>eval_to_const_value_raw (218,772 samples, 0.18%)</title><rect x="27.8571%" y="133" width="0.1793%" height="15" fill="rgb(231,60,39)"/><text x="28.1071%" y="143.50"></text></g><g><title>eval_to_const_value_raw (211,492 samples, 0.17%)</title><rect x="27.8630%" y="117" width="0.1733%" height="15" fill="rgb(208,69,12)"/><text x="28.1130%" y="127.50"></text></g><g><title>eval_to_allocation_raw (208,322 samples, 0.17%)</title><rect x="27.8656%" y="101" width="0.1707%" height="15" fill="rgb(235,93,37)"/><text x="28.1156%" y="111.50"></text></g><g><title>crate_lints (1,930,071 samples, 1.58%)</title><rect x="27.3972%" y="149" width="1.5815%" height="15" fill="rgb(213,116,39)"/><text x="27.6472%" y="159.50"></text></g><g><title>type_of (1,029,387 samples, 0.84%)</title><rect x="28.1352%" y="133" width="0.8435%" height="15" fill="rgb(222,207,29)"/><text x="28.3852%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (799,995 samples, 0.66%)</title><rect x="28.3231%" y="117" width="0.6555%" height="15" fill="rgb(206,96,30)"/><text x="28.5731%" y="127.50"></text></g><g><title>lint_checking (2,119,283 samples, 1.74%)</title><rect x="27.3959%" y="165" width="1.7365%" height="15" fill="rgb(218,138,4)"/><text x="27.6459%" y="175.50"></text></g><g><title>module_lints (187,702 samples, 0.15%)</title><rect x="28.9786%" y="149" width="0.1538%" height="15" fill="rgb(250,191,14)"/><text x="29.2286%" y="159.50"></text></g><g><title>lint_mod (184,832 samples, 0.15%)</title><rect x="28.9810%" y="133" width="0.1514%" height="15" fill="rgb(239,60,40)"/><text x="29.2310%" y="143.50"></text></g><g><title>privacy_checking_modules (359,484 samples, 0.29%)</title><rect x="29.2085%" y="165" width="0.2946%" height="15" fill="rgb(206,27,48)"/><text x="29.4585%" y="175.50"></text></g><g><title>check_mod_privacy (356,854 samples, 0.29%)</title><rect x="29.2107%" y="149" width="0.2924%" height="15" fill="rgb(225,35,8)"/><text x="29.4607%" y="159.50"></text></g><g><title>misc_checking_3 (2,866,811 samples, 2.35%)</title><rect x="27.1626%" y="181" width="2.3490%" height="15" fill="rgb(250,213,24)"/><text x="27.4126%" y="191.50">m..</text></g><g><title>impl_trait_ref (149,001 samples, 0.12%)</title><rect x="29.6920%" y="85" width="0.1221%" height="15" fill="rgb(247,123,22)"/><text x="29.9420%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,110 samples, 0.11%)</title><rect x="29.7075%" y="69" width="0.1066%" height="15" fill="rgb(231,138,38)"/><text x="29.9575%" y="79.50"></text></g><g><title>adt_destructor (310,484 samples, 0.25%)</title><rect x="29.5825%" y="133" width="0.2544%" height="15" fill="rgb(231,145,46)"/><text x="29.8325%" y="143.50"></text></g><g><title>coherent_trait (299,874 samples, 0.25%)</title><rect x="29.5912%" y="117" width="0.2457%" height="15" fill="rgb(251,118,11)"/><text x="29.8412%" y="127.50"></text></g><g><title>specialization_graph_of (298,294 samples, 0.24%)</title><rect x="29.5925%" y="101" width="0.2444%" height="15" fill="rgb(217,147,25)"/><text x="29.8425%" y="111.50"></text></g><g><title>impl_parent (1,661,742 samples, 1.36%)</title><rect x="32.1435%" y="117" width="1.3616%" height="15" fill="rgb(247,81,37)"/><text x="32.3935%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,011,155 samples, 0.83%)</title><rect x="32.6765%" y="101" width="0.8285%" height="15" fill="rgb(209,12,38)"/><text x="32.9265%" y="111.50"></text></g><g><title>impl_trait_ref (4,182,455 samples, 3.43%)</title><rect x="33.5051%" y="117" width="3.4270%" height="15" fill="rgb(227,1,9)"/><text x="33.7551%" y="127.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,518,304 samples, 2.88%)</title><rect x="34.0492%" y="101" width="2.8828%" height="15" fill="rgb(248,47,43)"/><text x="34.2992%" y="111.50">me..</text></g><g><title>coherent_trait (9,591,957 samples, 7.86%)</title><rect x="29.5595%" y="149" width="7.8594%" height="15" fill="rgb(221,10,30)"/><text x="29.8095%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (9,144,072 samples, 7.49%)</title><rect x="29.9265%" y="133" width="7.4924%" height="15" fill="rgb(210,229,1)"/><text x="30.1765%" y="143.50">specializa..</text></g><g><title>trait_impls_of (592,587 samples, 0.49%)</title><rect x="36.9334%" y="117" width="0.4856%" height="15" fill="rgb(222,148,37)"/><text x="37.1834%" y="127.50"></text></g><g><title>implementations_of_trait (140,192 samples, 0.11%)</title><rect x="37.3041%" y="101" width="0.1149%" height="15" fill="rgb(234,67,33)"/><text x="37.5541%" y="111.50"></text></g><g><title>coherence_checking (9,657,207 samples, 7.91%)</title><rect x="29.5416%" y="165" width="7.9129%" height="15" fill="rgb(247,98,35)"/><text x="29.7916%" y="175.50">coherence_c..</text></g><g><title>dropck_outlives (150,191 samples, 0.12%)</title><rect x="44.3240%" y="117" width="0.1231%" height="15" fill="rgb(247,138,52)"/><text x="44.5740%" y="127.50"></text></g><g><title>trait_impls_of (373,996 samples, 0.31%)</title><rect x="45.3676%" y="101" width="0.3064%" height="15" fill="rgb(213,79,30)"/><text x="45.6176%" y="111.50"></text></g><g><title>implementations_of_trait (127,001 samples, 0.10%)</title><rect x="45.5700%" y="85" width="0.1041%" height="15" fill="rgb(246,177,23)"/><text x="45.8200%" y="95.50"></text></g><g><title>evaluate_obligation (1,498,350 samples, 1.23%)</title><rect x="44.4471%" y="117" width="1.2277%" height="15" fill="rgb(230,62,27)"/><text x="44.6971%" y="127.50"></text></g><g><title>method_autoderef_steps (130,840 samples, 0.11%)</title><rect x="45.9585%" y="117" width="0.1072%" height="15" fill="rgb(216,154,8)"/><text x="46.2085%" y="127.50"></text></g><g><title>predicates_of (164,343 samples, 0.13%)</title><rect x="46.0866%" y="117" width="0.1347%" height="15" fill="rgb(244,35,45)"/><text x="46.3366%" y="127.50"></text></g><g><title>associated_item (535,935 samples, 0.44%)</title><rect x="48.5769%" y="85" width="0.4391%" height="15" fill="rgb(251,115,12)"/><text x="48.8269%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (432,094 samples, 0.35%)</title><rect x="48.6620%" y="69" width="0.3540%" height="15" fill="rgb(240,54,50)"/><text x="48.9120%" y="79.50"></text></g><g><title>associated_items (728,869 samples, 0.60%)</title><rect x="48.4402%" y="101" width="0.5972%" height="15" fill="rgb(233,84,52)"/><text x="48.6902%" y="111.50"></text></g><g><title>dropck_outlives (246,093 samples, 0.20%)</title><rect x="49.0530%" y="101" width="0.2016%" height="15" fill="rgb(207,117,47)"/><text x="49.3030%" y="111.50"></text></g><g><title>adt_dtorck_constraint (195,013 samples, 0.16%)</title><rect x="49.0949%" y="85" width="0.1598%" height="15" fill="rgb(249,43,39)"/><text x="49.3449%" y="95.50"></text></g><g><title>adt_def (127,592 samples, 0.10%)</title><rect x="49.6074%" y="69" width="0.1045%" height="15" fill="rgb(209,38,44)"/><text x="49.8574%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (126,062 samples, 0.10%)</title><rect x="49.6087%" y="53" width="0.1033%" height="15" fill="rgb(236,212,23)"/><text x="49.8587%" y="63.50"></text></g><g><title>adt_sized_constraint (176,692 samples, 0.14%)</title><rect x="49.5999%" y="85" width="0.1448%" height="15" fill="rgb(242,79,21)"/><text x="49.8499%" y="95.50"></text></g><g><title>evaluate_obligation (1,052,829 samples, 0.86%)</title><rect x="49.2546%" y="101" width="0.8627%" height="15" fill="rgb(211,96,35)"/><text x="49.5046%" y="111.50"></text></g><g><title>trait_impls_of (325,704 samples, 0.27%)</title><rect x="49.8504%" y="85" width="0.2669%" height="15" fill="rgb(253,215,40)"/><text x="50.1004%" y="95.50"></text></g><g><title>is_copy_raw (126,650 samples, 0.10%)</title><rect x="50.2565%" y="101" width="0.1038%" height="15" fill="rgb(211,81,21)"/><text x="50.5065%" y="111.50"></text></g><g><title>evaluate_obligation (127,973 samples, 0.10%)</title><rect x="50.5222%" y="85" width="0.1049%" height="15" fill="rgb(208,190,38)"/><text x="50.7722%" y="95.50"></text></g><g><title>method_autoderef_steps (233,485 samples, 0.19%)</title><rect x="50.4493%" y="101" width="0.1913%" height="15" fill="rgb(235,213,38)"/><text x="50.6993%" y="111.50"></text></g><g><title>predicates_of (195,704 samples, 0.16%)</title><rect x="50.6492%" y="101" width="0.1604%" height="15" fill="rgb(237,122,38)"/><text x="50.8992%" y="111.50"></text></g><g><title>predicates_defined_on (136,371 samples, 0.11%)</title><rect x="50.6978%" y="85" width="0.1117%" height="15" fill="rgb(244,218,35)"/><text x="50.9478%" y="95.50"></text></g><g><title>typeck (5,620,353 samples, 4.61%)</title><rect x="46.2657%" y="117" width="4.6052%" height="15" fill="rgb(240,68,47)"/><text x="46.5157%" y="127.50">typeck</text></g><g><title>item_bodies_checking (16,384,182 samples, 13.42%)</title><rect x="37.4697%" y="165" width="13.4248%" height="15" fill="rgb(210,16,53)"/><text x="37.7197%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,381,702 samples, 13.42%)</title><rect x="37.4717%" y="149" width="13.4228%" height="15" fill="rgb(235,124,12)"/><text x="37.7217%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (16,353,002 samples, 13.40%)</title><rect x="37.4952%" y="133" width="13.3993%" height="15" fill="rgb(224,169,11)"/><text x="37.7452%" y="143.50">typeck</text></g><g><title>item_types_checking (522,336 samples, 0.43%)</title><rect x="50.8945%" y="165" width="0.4280%" height="15" fill="rgb(250,166,2)"/><text x="51.1445%" y="175.50"></text></g><g><title>check_mod_item_types (518,986 samples, 0.43%)</title><rect x="50.8972%" y="149" width="0.4252%" height="15" fill="rgb(242,216,29)"/><text x="51.1472%" y="159.50"></text></g><g><title>typeck (133,612 samples, 0.11%)</title><rect x="51.2130%" y="133" width="0.1095%" height="15" fill="rgb(230,116,27)"/><text x="51.4630%" y="143.50"></text></g><g><title>late_bound_vars_map (133,670 samples, 0.11%)</title><rect x="51.7462%" y="85" width="0.1095%" height="15" fill="rgb(228,99,48)"/><text x="51.9962%" y="95.50"></text></g><g><title>resolve_lifetimes (125,970 samples, 0.10%)</title><rect x="51.7526%" y="69" width="0.1032%" height="15" fill="rgb(253,11,6)"/><text x="52.0026%" y="79.50"></text></g><g><title>explicit_predicates_of (242,482 samples, 0.20%)</title><rect x="51.6622%" y="101" width="0.1987%" height="15" fill="rgb(247,143,39)"/><text x="51.9122%" y="111.50"></text></g><g><title>predicates_of (428,193 samples, 0.35%)</title><rect x="51.6221%" y="133" width="0.3509%" height="15" fill="rgb(236,97,10)"/><text x="51.8721%" y="143.50"></text></g><g><title>predicates_defined_on (411,473 samples, 0.34%)</title><rect x="51.6358%" y="117" width="0.3372%" height="15" fill="rgb(233,208,19)"/><text x="51.8858%" y="127.50"></text></g><g><title>inferred_outlives_of (136,721 samples, 0.11%)</title><rect x="51.8609%" y="101" width="0.1120%" height="15" fill="rgb(216,164,2)"/><text x="52.1109%" y="111.50"></text></g><g><title>inferred_outlives_crate (124,251 samples, 0.10%)</title><rect x="51.8711%" y="85" width="0.1018%" height="15" fill="rgb(220,129,5)"/><text x="52.1211%" y="95.50"></text></g><g><title>type_collecting (848,380 samples, 0.70%)</title><rect x="51.3234%" y="165" width="0.6951%" height="15" fill="rgb(242,17,10)"/><text x="51.5734%" y="175.50"></text></g><g><title>collect_mod_item_types (835,860 samples, 0.68%)</title><rect x="51.3336%" y="149" width="0.6849%" height="15" fill="rgb(242,107,0)"/><text x="51.5836%" y="159.50"></text></g><g><title>evaluate_obligation (288,462 samples, 0.24%)</title><rect x="52.6457%" y="133" width="0.2364%" height="15" fill="rgb(251,28,31)"/><text x="52.8957%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,369,193 samples, 1.12%)</title><rect x="52.0794%" y="149" width="1.1219%" height="15" fill="rgb(233,223,10)"/><text x="52.3294%" y="159.50"></text></g><g><title>region_scope_tree (164,313 samples, 0.13%)</title><rect x="53.0667%" y="133" width="0.1346%" height="15" fill="rgb(215,21,27)"/><text x="53.3167%" y="143.50"></text></g><g><title>evaluate_obligation (203,843 samples, 0.17%)</title><rect x="53.5678%" y="133" width="0.1670%" height="15" fill="rgb(232,23,21)"/><text x="53.8178%" y="143.50"></text></g><g><title>analysis (48,160,635 samples, 39.46%)</title><rect x="14.5090%" y="197" width="39.4617%" height="15" fill="rgb(244,5,23)"/><text x="14.7590%" y="207.50">analysis</text></g><g><title>type_check_crate (29,850,882 samples, 24.46%)</title><rect x="29.5116%" y="181" width="24.4591%" height="15" fill="rgb(226,81,46)"/><text x="29.7616%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,380,647 samples, 1.95%)</title><rect x="52.0200%" y="165" width="1.9506%" height="15" fill="rgb(247,70,30)"/><text x="52.2700%" y="175.50">w..</text></g><g><title>check_item_well_formed (939,013 samples, 0.77%)</title><rect x="53.2013%" y="149" width="0.7694%" height="15" fill="rgb(212,68,19)"/><text x="53.4513%" y="159.50"></text></g><g><title>is_freeze_raw (155,261 samples, 0.13%)</title><rect x="55.2365%" y="149" width="0.1272%" height="15" fill="rgb(240,187,13)"/><text x="55.4865%" y="159.50"></text></g><g><title>evaluate_obligation (141,761 samples, 0.12%)</title><rect x="55.2476%" y="133" width="0.1162%" height="15" fill="rgb(223,113,26)"/><text x="55.4976%" y="143.50"></text></g><g><title>fn_abi_of_instance (474,784 samples, 0.39%)</title><rect x="55.1560%" y="165" width="0.3890%" height="15" fill="rgb(206,192,2)"/><text x="55.4060%" y="175.50"></text></g><g><title>codegen_module (1,578,038 samples, 1.29%)</title><rect x="54.3742%" y="181" width="1.2930%" height="15" fill="rgb(241,108,4)"/><text x="54.6242%" y="191.50"></text></g><g><title>optimized_mir (463,195 samples, 0.38%)</title><rect x="55.7793%" y="133" width="0.3795%" height="15" fill="rgb(247,173,49)"/><text x="56.0293%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (645,317 samples, 0.53%)</title><rect x="55.6845%" y="149" width="0.5288%" height="15" fill="rgb(224,114,35)"/><text x="55.9345%" y="159.50"></text></g><g><title>monomorphization_collector (668,817 samples, 0.55%)</title><rect x="55.6828%" y="165" width="0.5480%" height="15" fill="rgb(245,159,27)"/><text x="55.9328%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (760,228 samples, 0.62%)</title><rect x="55.6680%" y="181" width="0.6229%" height="15" fill="rgb(245,172,44)"/><text x="55.9180%" y="191.50"></text></g><g><title>codegen_crate (2,896,432 samples, 2.37%)</title><rect x="53.9754%" y="197" width="2.3733%" height="15" fill="rgb(236,23,11)"/><text x="54.2254%" y="207.50">co..</text></g><g><title>codegen_module_optimize (7,378,881 samples, 6.05%)</title><rect x="56.3487%" y="197" width="6.0461%" height="15" fill="rgb(205,117,38)"/><text x="56.5987%" y="207.50">codegen_..</text></g><g><title>LLVM_module_optimize (6,522,842 samples, 5.34%)</title><rect x="57.0501%" y="181" width="5.3447%" height="15" fill="rgb(237,72,25)"/><text x="57.3001%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_lto_optimize (2,187,214 samples, 1.79%)</title><rect x="62.8942%" y="181" width="1.7922%" height="15" fill="rgb(244,70,9)"/><text x="63.1442%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (6,577,174 samples, 5.39%)</title><rect x="64.6863%" y="181" width="5.3892%" height="15" fill="rgb(217,125,39)"/><text x="64.9363%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (6,464,723 samples, 5.30%)</title><rect x="64.7785%" y="165" width="5.2970%" height="15" fill="rgb(235,36,10)"/><text x="65.0285%" y="175.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (9,435,525 samples, 7.73%)</title><rect x="62.3948%" y="197" width="7.7313%" height="15" fill="rgb(251,123,47)"/><text x="62.6448%" y="207.50">codegen_mod..</text></g><g><title>metadata_load_macro (168,511 samples, 0.14%)</title><rect x="76.4042%" y="149" width="0.1381%" height="15" fill="rgb(221,13,13)"/><text x="76.6542%" y="159.50"></text></g><g><title>metadata_register_crate (1,259,494 samples, 1.03%)</title><rect x="76.5423%" y="149" width="1.0320%" height="15" fill="rgb(238,131,9)"/><text x="76.7923%" y="159.50"></text></g><g><title>metadata_register_crate (446,195 samples, 0.37%)</title><rect x="77.2087%" y="133" width="0.3656%" height="15" fill="rgb(211,50,8)"/><text x="77.4587%" y="143.50"></text></g><g><title>macro_expand_crate (8,903,439 samples, 7.30%)</title><rect x="70.3529%" y="181" width="7.2953%" height="15" fill="rgb(245,182,24)"/><text x="70.6029%" y="191.50">macro_expa..</text></g><g><title>expand_crate (8,889,018 samples, 7.28%)</title><rect x="70.3647%" y="165" width="7.2835%" height="15" fill="rgb(242,14,37)"/><text x="70.6147%" y="175.50">expand_cra..</text></g><g><title>late_resolve_crate (1,030,831 samples, 0.84%)</title><rect x="77.7645%" y="165" width="0.8446%" height="15" fill="rgb(246,228,12)"/><text x="78.0145%" y="175.50"></text></g><g><title>configure_and_expand (10,399,296 samples, 8.52%)</title><rect x="70.1260%" y="197" width="8.5209%" height="15" fill="rgb(213,55,15)"/><text x="70.3760%" y="207.50">configure_an..</text></g><g><title>resolve_crate (1,183,374 samples, 0.97%)</title><rect x="77.6773%" y="181" width="0.9696%" height="15" fill="rgb(209,9,3)"/><text x="77.9273%" y="191.50"></text></g><g><title>early_lint_checks (154,052 samples, 0.13%)</title><rect x="78.7206%" y="197" width="0.1262%" height="15" fill="rgb(230,59,30)"/><text x="78.9706%" y="207.50"></text></g><g><title>free_global_ctxt (3,461,128 samples, 2.84%)</title><rect x="78.8468%" y="197" width="2.8360%" height="15" fill="rgb(209,121,21)"/><text x="79.0968%" y="207.50">fr..</text></g><g><title>exported_symbols (140,441 samples, 0.12%)</title><rect x="82.3544%" y="181" width="0.1151%" height="15" fill="rgb(220,109,13)"/><text x="82.6044%" y="191.50"></text></g><g><title>layout_of (184,971 samples, 0.15%)</title><rect x="84.0281%" y="133" width="0.1516%" height="15" fill="rgb(232,18,1)"/><text x="84.2781%" y="143.50"></text></g><g><title>layout_of (256,882 samples, 0.21%)</title><rect x="83.9758%" y="149" width="0.2105%" height="15" fill="rgb(215,41,42)"/><text x="84.2258%" y="159.50"></text></g><g><title>layout_of (543,988 samples, 0.45%)</title><rect x="83.7672%" y="165" width="0.4457%" height="15" fill="rgb(224,123,36)"/><text x="84.0172%" y="175.50"></text></g><g><title>needs_drop_raw (257,612 samples, 0.21%)</title><rect x="85.9857%" y="149" width="0.2111%" height="15" fill="rgb(240,125,3)"/><text x="86.2357%" y="159.50"></text></g><g><title>is_copy_raw (229,621 samples, 0.19%)</title><rect x="86.0087%" y="133" width="0.1881%" height="15" fill="rgb(205,98,50)"/><text x="86.2587%" y="143.50"></text></g><g><title>evaluate_obligation (193,041 samples, 0.16%)</title><rect x="86.0387%" y="117" width="0.1582%" height="15" fill="rgb(205,185,37)"/><text x="86.2887%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,426,925 samples, 1.99%)</title><rect x="84.2130%" y="165" width="1.9886%" height="15" fill="rgb(238,207,15)"/><text x="84.4630%" y="175.50">m..</text></g><g><title>optimized_mir (4,645,271 samples, 3.81%)</title><rect x="82.4946%" y="181" width="3.8062%" height="15" fill="rgb(213,199,42)"/><text x="82.7446%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (5,704,574 samples, 4.67%)</title><rect x="81.6828%" y="197" width="4.6742%" height="15" fill="rgb(235,201,11)"/><text x="81.9328%" y="207.50">gener..</text></g><g><title>hir_lowering (1,126,302 samples, 0.92%)</title><rect x="86.3570%" y="197" width="0.9229%" height="15" fill="rgb(207,46,11)"/><text x="86.6070%" y="207.50"></text></g><g><title>finish_ongoing_codegen (13,276,528 samples, 10.88%)</title><rect x="87.2960%" y="181" width="10.8785%" height="15" fill="rgb(241,35,35)"/><text x="87.5460%" y="191.50">finish_ongoing_c..</text></g><g><title>link_crate (698,117 samples, 0.57%)</title><rect x="98.1744%" y="181" width="0.5720%" height="15" fill="rgb(243,32,47)"/><text x="98.4244%" y="191.50"></text></g><g><title>link_binary (686,417 samples, 0.56%)</title><rect x="98.1840%" y="165" width="0.5624%" height="15" fill="rgb(247,202,23)"/><text x="98.4340%" y="175.50"></text></g><g><title>link_rlib (427,065 samples, 0.35%)</title><rect x="98.3965%" y="149" width="0.3499%" height="15" fill="rgb(219,102,11)"/><text x="98.6465%" y="159.50"></text></g><g><title>link (14,003,616 samples, 11.47%)</title><rect x="87.2798%" y="197" width="11.4742%" height="15" fill="rgb(243,110,44)"/><text x="87.5298%" y="207.50">link</text></g><g><title>parse_crate (147,411 samples, 0.12%)</title><rect x="98.7541%" y="197" width="0.1208%" height="15" fill="rgb(222,74,54)"/><text x="99.0041%" y="207.50"></text></g><g><title>prepare_outputs (217,712 samples, 0.18%)</title><rect x="98.8794%" y="197" width="0.1784%" height="15" fill="rgb(216,99,12)"/><text x="99.1294%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (719,158 samples, 0.59%)</title><rect x="99.0578%" y="197" width="0.5893%" height="15" fill="rgb(226,22,26)"/><text x="99.3078%" y="207.50"></text></g><g><title>all (122,043,966 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (122,043,966 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (339,734 samples, 0.28%)</title><rect x="99.7216%" y="197" width="0.2784%" height="15" fill="rgb(252,105,26)"/><text x="99.9716%" y="207.50"></text></g></svg></svg>