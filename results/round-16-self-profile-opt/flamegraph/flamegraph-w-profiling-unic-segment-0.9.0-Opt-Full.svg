<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (204,315,073 samples, 19.56%)</title><rect x="0.0711%" y="149" width="19.5632%" height="15" fill="rgb(227,0,7)"/><text x="0.3211%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,434,965 samples, 0.14%)</title><rect x="19.4970%" y="133" width="0.1374%" height="15" fill="rgb(217,0,24)"/><text x="19.7470%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,407,975 samples, 0.13%)</title><rect x="19.4996%" y="117" width="0.1348%" height="15" fill="rgb(221,193,54)"/><text x="19.7496%" y="127.50"></text></g><g><title>thir_body (2,106,976 samples, 0.20%)</title><rect x="22.6507%" y="37" width="0.2017%" height="15" fill="rgb(248,212,6)"/><text x="22.9007%" y="47.50"></text></g><g><title>mir_const (11,862,106 samples, 1.14%)</title><rect x="21.7189%" y="85" width="1.1358%" height="15" fill="rgb(208,68,35)"/><text x="21.9689%" y="95.50"></text></g><g><title>unsafety_check_result (10,309,466 samples, 0.99%)</title><rect x="21.8676%" y="69" width="0.9871%" height="15" fill="rgb(232,128,0)"/><text x="22.1176%" y="79.50"></text></g><g><title>mir_built (9,262,880 samples, 0.89%)</title><rect x="21.9678%" y="53" width="0.8869%" height="15" fill="rgb(207,160,47)"/><text x="22.2178%" y="63.50"></text></g><g><title>mir_promoted (13,529,284 samples, 1.30%)</title><rect x="21.5843%" y="101" width="1.2954%" height="15" fill="rgb(228,23,34)"/><text x="21.8343%" y="111.50"></text></g><g><title>type_op_prove_predicate (2,511,737 samples, 0.24%)</title><rect x="22.9846%" y="101" width="0.2405%" height="15" fill="rgb(218,30,26)"/><text x="23.2346%" y="111.50"></text></g><g><title>MIR_borrow_checking (37,035,528 samples, 3.55%)</title><rect x="19.6799%" y="133" width="3.5462%" height="15" fill="rgb(220,122,19)"/><text x="19.9299%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (36,868,106 samples, 3.53%)</title><rect x="19.6960%" y="117" width="3.5301%" height="15" fill="rgb(250,228,42)"/><text x="19.9460%" y="127.50">mir..</text></g><g><title>misc_checking_1 (1,612,337 samples, 0.15%)</title><rect x="23.2654%" y="133" width="0.1544%" height="15" fill="rgb(240,193,28)"/><text x="23.5154%" y="143.50"></text></g><g><title>misc_checking_2 (1,994,252 samples, 0.19%)</title><rect x="23.4197%" y="133" width="0.1910%" height="15" fill="rgb(216,20,37)"/><text x="23.6697%" y="143.50"></text></g><g><title>match_checking (1,343,225 samples, 0.13%)</title><rect x="23.4821%" y="117" width="0.1286%" height="15" fill="rgb(206,188,39)"/><text x="23.7321%" y="127.50"></text></g><g><title>check_match (1,304,055 samples, 0.12%)</title><rect x="23.4858%" y="101" width="0.1249%" height="15" fill="rgb(217,207,13)"/><text x="23.7358%" y="111.50"></text></g><g><title>crate_lints (2,453,117 samples, 0.23%)</title><rect x="23.7349%" y="101" width="0.2349%" height="15" fill="rgb(231,73,38)"/><text x="23.9849%" y="111.50"></text></g><g><title>type_of (1,083,877 samples, 0.10%)</title><rect x="23.8660%" y="85" width="0.1038%" height="15" fill="rgb(225,20,46)"/><text x="24.1160%" y="95.50"></text></g><g><title>lint_checking (3,222,736 samples, 0.31%)</title><rect x="23.7347%" y="117" width="0.3086%" height="15" fill="rgb(210,31,41)"/><text x="23.9847%" y="127.50"></text></g><g><title>privacy_checking_modules (1,266,223 samples, 0.12%)</title><rect x="24.0761%" y="117" width="0.1212%" height="15" fill="rgb(221,200,47)"/><text x="24.3261%" y="127.50"></text></g><g><title>check_mod_privacy (1,262,603 samples, 0.12%)</title><rect x="24.0765%" y="101" width="0.1209%" height="15" fill="rgb(226,26,5)"/><text x="24.3265%" y="111.50"></text></g><g><title>misc_checking_3 (6,152,207 samples, 0.59%)</title><rect x="23.6107%" y="133" width="0.5891%" height="15" fill="rgb(249,33,26)"/><text x="23.8607%" y="143.50"></text></g><g><title>impl_parent (2,605,300 samples, 0.25%)</title><rect x="24.6227%" y="69" width="0.2495%" height="15" fill="rgb(235,183,28)"/><text x="24.8727%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,424,754 samples, 0.14%)</title><rect x="24.7358%" y="53" width="0.1364%" height="15" fill="rgb(221,5,38)"/><text x="24.9858%" y="63.50"></text></g><g><title>impl_trait_ref (5,355,162 samples, 0.51%)</title><rect x="24.8722%" y="69" width="0.5128%" height="15" fill="rgb(247,18,42)"/><text x="25.1222%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,209,177 samples, 0.40%)</title><rect x="24.9819%" y="53" width="0.4030%" height="15" fill="rgb(241,131,45)"/><text x="25.2319%" y="63.50"></text></g><g><title>coherent_trait (13,105,334 samples, 1.25%)</title><rect x="24.2087%" y="101" width="1.2548%" height="15" fill="rgb(249,31,29)"/><text x="24.4587%" y="111.50"></text></g><g><title>specialization_graph_of (12,425,926 samples, 1.19%)</title><rect x="24.2738%" y="85" width="1.1898%" height="15" fill="rgb(225,111,53)"/><text x="24.5238%" y="95.50"></text></g><g><title>coherence_checking (13,200,585 samples, 1.26%)</title><rect x="24.2067%" y="117" width="1.2640%" height="15" fill="rgb(238,160,17)"/><text x="24.4567%" y="127.50"></text></g><g><title>evaluate_obligation (1,937,552 samples, 0.19%)</title><rect x="28.3237%" y="69" width="0.1855%" height="15" fill="rgb(214,148,48)"/><text x="28.5737%" y="79.50"></text></g><g><title>typeck (8,608,775 samples, 0.82%)</title><rect x="28.6650%" y="69" width="0.8243%" height="15" fill="rgb(232,36,49)"/><text x="28.9150%" y="79.50"></text></g><g><title>item_bodies_checking (41,980,883 samples, 4.02%)</title><rect x="25.4748%" y="117" width="4.0197%" height="15" fill="rgb(209,103,24)"/><text x="25.7248%" y="127.50">item..</text></g><g><title>typeck_item_bodies (41,978,073 samples, 4.02%)</title><rect x="25.4751%" y="101" width="4.0194%" height="15" fill="rgb(229,88,8)"/><text x="25.7251%" y="111.50">type..</text></g><g><title>typeck (41,870,862 samples, 4.01%)</title><rect x="25.4854%" y="85" width="4.0092%" height="15" fill="rgb(213,181,19)"/><text x="25.7354%" y="95.50">type..</text></g><g><title>item_types_checking (1,712,369 samples, 0.16%)</title><rect x="29.4945%" y="117" width="0.1640%" height="15" fill="rgb(254,191,54)"/><text x="29.7445%" y="127.50"></text></g><g><title>check_mod_item_types (1,707,679 samples, 0.16%)</title><rect x="29.4950%" y="101" width="0.1635%" height="15" fill="rgb(241,83,37)"/><text x="29.7450%" y="111.50"></text></g><g><title>type_collecting (2,472,028 samples, 0.24%)</title><rect x="29.6587%" y="117" width="0.2367%" height="15" fill="rgb(233,36,39)"/><text x="29.9087%" y="127.50"></text></g><g><title>collect_mod_item_types (2,458,747 samples, 0.24%)</title><rect x="29.6599%" y="101" width="0.2354%" height="15" fill="rgb(226,3,54)"/><text x="29.9099%" y="111.50"></text></g><g><title>check_impl_item_well_formed (3,883,847 samples, 0.37%)</title><rect x="29.9221%" y="101" width="0.3719%" height="15" fill="rgb(245,192,40)"/><text x="30.1721%" y="111.50"></text></g><g><title>analysis (113,696,973 samples, 10.89%)</title><rect x="19.6344%" y="149" width="10.8865%" height="15" fill="rgb(238,167,29)"/><text x="19.8844%" y="159.50">analysis</text></g><g><title>type_check_crate (66,016,629 samples, 6.32%)</title><rect x="24.1998%" y="133" width="6.3211%" height="15" fill="rgb(232,182,51)"/><text x="24.4498%" y="143.50">type_che..</text></g><g><title>wf_checking (6,526,772 samples, 0.62%)</title><rect x="29.8960%" y="117" width="0.6249%" height="15" fill="rgb(231,60,39)"/><text x="30.1460%" y="127.50"></text></g><g><title>check_item_well_formed (2,370,039 samples, 0.23%)</title><rect x="30.2940%" y="101" width="0.2269%" height="15" fill="rgb(208,69,12)"/><text x="30.5440%" y="111.50"></text></g><g><title>layout_of (1,139,421 samples, 0.11%)</title><rect x="32.8508%" y="101" width="0.1091%" height="15" fill="rgb(235,93,37)"/><text x="33.1008%" y="111.50"></text></g><g><title>param_env (1,837,971 samples, 0.18%)</title><rect x="32.9599%" y="101" width="0.1760%" height="15" fill="rgb(213,116,39)"/><text x="33.2099%" y="111.50"></text></g><g><title>fn_abi_of_instance (6,936,339 samples, 0.66%)</title><rect x="32.5008%" y="117" width="0.6642%" height="15" fill="rgb(222,207,29)"/><text x="32.7508%" y="127.50"></text></g><g><title>codegen_module (27,402,180 samples, 2.62%)</title><rect x="30.6629%" y="133" width="2.6238%" height="15" fill="rgb(206,96,30)"/><text x="30.9129%" y="143.50">co..</text></g><g><title>codegen_fn_attrs (1,129,624 samples, 0.11%)</title><rect x="33.4150%" y="85" width="0.1082%" height="15" fill="rgb(218,138,4)"/><text x="33.6650%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,242,487 samples, 0.12%)</title><rect x="33.8370%" y="69" width="0.1190%" height="15" fill="rgb(250,191,14)"/><text x="34.0870%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,509,687 samples, 0.24%)</title><rect x="33.9560%" y="69" width="0.2403%" height="15" fill="rgb(239,60,40)"/><text x="34.2060%" y="79.50"></text></g><g><title>optimized_mir (7,028,751 samples, 0.67%)</title><rect x="33.5645%" y="85" width="0.6730%" height="15" fill="rgb(206,27,48)"/><text x="33.8145%" y="95.50"></text></g><g><title>specialization_graph_of (1,129,754 samples, 0.11%)</title><rect x="34.4626%" y="69" width="0.1082%" height="15" fill="rgb(225,35,8)"/><text x="34.7126%" y="79.50"></text></g><g><title>resolve_instance (3,711,505 samples, 0.36%)</title><rect x="34.2375%" y="85" width="0.3554%" height="15" fill="rgb(250,213,24)"/><text x="34.4875%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (14,877,964 samples, 1.42%)</title><rect x="33.2916%" y="101" width="1.4246%" height="15" fill="rgb(247,123,22)"/><text x="33.5416%" y="111.50"></text></g><g><title>vtable_entries (1,075,119 samples, 0.10%)</title><rect x="34.6133%" y="85" width="0.1029%" height="15" fill="rgb(231,138,38)"/><text x="34.8633%" y="95.50"></text></g><g><title>monomorphization_collector (14,952,685 samples, 1.43%)</title><rect x="33.2914%" y="117" width="1.4317%" height="15" fill="rgb(231,145,46)"/><text x="33.5414%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (1,231,654 samples, 0.12%)</title><rect x="34.7235%" y="101" width="0.1179%" height="15" fill="rgb(251,118,11)"/><text x="34.9735%" y="111.50"></text></g><g><title>symbol_name (1,126,504 samples, 0.11%)</title><rect x="34.7336%" y="85" width="0.1079%" height="15" fill="rgb(217,147,25)"/><text x="34.9836%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (16,624,983 samples, 1.59%)</title><rect x="33.2873%" y="133" width="1.5918%" height="15" fill="rgb(247,81,37)"/><text x="33.5373%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,629,328 samples, 0.16%)</title><rect x="34.7231%" y="117" width="0.1560%" height="15" fill="rgb(209,12,38)"/><text x="34.9731%" y="127.50"></text></g><g><title>codegen_crate (45,578,912 samples, 4.36%)</title><rect x="30.5219%" y="149" width="4.3642%" height="15" fill="rgb(227,1,9)"/><text x="30.7719%" y="159.50">codeg..</text></g><g><title>codegen_module_optimize (185,629,878 samples, 17.77%)</title><rect x="34.8861%" y="149" width="17.7741%" height="15" fill="rgb(248,47,43)"/><text x="35.1361%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (165,979,871 samples, 15.89%)</title><rect x="36.7676%" y="133" width="15.8926%" height="15" fill="rgb(221,10,30)"/><text x="37.0176%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (85,785,973 samples, 8.21%)</title><rect x="53.5374%" y="133" width="8.2140%" height="15" fill="rgb(210,229,1)"/><text x="53.7874%" y="143.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (151,636,161 samples, 14.52%)</title><rect x="61.7514%" y="133" width="14.5192%" height="15" fill="rgb(222,148,37)"/><text x="62.0014%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (149,923,754 samples, 14.36%)</title><rect x="61.9154%" y="117" width="14.3553%" height="15" fill="rgb(234,67,33)"/><text x="62.1654%" y="127.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (1,221,324 samples, 0.12%)</title><rect x="76.2707%" y="133" width="0.1169%" height="15" fill="rgb(247,98,35)"/><text x="76.5207%" y="143.50"></text></g><g><title>codegen_module_perform_lto (248,469,961 samples, 23.79%)</title><rect x="52.6603%" y="149" width="23.7911%" height="15" fill="rgb(247,138,52)"/><text x="52.9103%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (3,134,635 samples, 0.30%)</title><rect x="79.3638%" y="101" width="0.3001%" height="15" fill="rgb(213,79,30)"/><text x="79.6138%" y="111.50"></text></g><g><title>metadata_register_crate (1,198,975 samples, 0.11%)</title><rect x="79.5491%" y="85" width="0.1148%" height="15" fill="rgb(246,177,23)"/><text x="79.7991%" y="95.50"></text></g><g><title>macro_expand_crate (33,529,370 samples, 3.21%)</title><rect x="76.5093%" y="133" width="3.2105%" height="15" fill="rgb(230,62,27)"/><text x="76.7593%" y="143.50">mac..</text></g><g><title>expand_crate (33,510,450 samples, 3.21%)</title><rect x="76.5111%" y="117" width="3.2086%" height="15" fill="rgb(216,154,8)"/><text x="76.7611%" y="127.50">exp..</text></g><g><title>late_resolve_crate (2,536,138 samples, 0.24%)</title><rect x="79.7554%" y="117" width="0.2428%" height="15" fill="rgb(244,35,45)"/><text x="80.0054%" y="127.50"></text></g><g><title>configure_and_expand (37,210,791 samples, 3.56%)</title><rect x="76.4514%" y="149" width="3.5629%" height="15" fill="rgb(251,115,12)"/><text x="76.7014%" y="159.50">conf..</text></g><g><title>resolve_crate (2,975,142 samples, 0.28%)</title><rect x="79.7294%" y="133" width="0.2849%" height="15" fill="rgb(240,54,50)"/><text x="79.9794%" y="143.50"></text></g><g><title>free_global_ctxt (7,376,652 samples, 0.71%)</title><rect x="80.1060%" y="149" width="0.7063%" height="15" fill="rgb(233,84,52)"/><text x="80.3560%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,443,966 samples, 0.33%)</title><rect x="81.4764%" y="117" width="0.3298%" height="15" fill="rgb(207,117,47)"/><text x="81.7264%" y="127.50"></text></g><g><title>optimized_mir (9,273,090 samples, 0.89%)</title><rect x="81.0623%" y="133" width="0.8879%" height="15" fill="rgb(249,43,39)"/><text x="81.3123%" y="143.50"></text></g><g><title>generate_crate_metadata (12,008,122 samples, 1.15%)</title><rect x="80.8123%" y="149" width="1.1498%" height="15" fill="rgb(209,38,44)"/><text x="81.0623%" y="159.50"></text></g><g><title>hir_lowering (4,408,038 samples, 0.42%)</title><rect x="81.9621%" y="149" width="0.4221%" height="15" fill="rgb(236,212,23)"/><text x="82.2121%" y="159.50"></text></g><g><title>finish_ongoing_codegen (178,076,364 samples, 17.05%)</title><rect x="82.3864%" y="133" width="17.0509%" height="15" fill="rgb(242,79,21)"/><text x="82.6364%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,833,011 samples, 0.27%)</title><rect x="99.4372%" y="133" width="0.2713%" height="15" fill="rgb(211,96,35)"/><text x="99.6872%" y="143.50"></text></g><g><title>link_binary (2,766,030 samples, 0.26%)</title><rect x="99.4436%" y="117" width="0.2648%" height="15" fill="rgb(253,215,40)"/><text x="99.6936%" y="127.50"></text></g><g><title>link_rlib (1,833,570 samples, 0.18%)</title><rect x="99.5329%" y="101" width="0.1756%" height="15" fill="rgb(211,81,21)"/><text x="99.7829%" y="111.50"></text></g><g><title>link (180,947,105 samples, 17.33%)</title><rect x="82.3842%" y="149" width="17.3258%" height="15" fill="rgb(208,190,38)"/><text x="82.6342%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (1,874,970 samples, 0.18%)</title><rect x="99.7754%" y="149" width="0.1795%" height="15" fill="rgb(235,213,38)"/><text x="100.0254%" y="159.50"></text></g><g><title>all (1,044,382,158 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,044,382,158 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>