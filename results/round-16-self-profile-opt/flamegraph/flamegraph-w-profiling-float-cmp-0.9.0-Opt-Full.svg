<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (40,636,126 samples, 16.48%)</title><rect x="0.3463%" y="165" width="16.4781%" height="15" fill="rgb(227,0,7)"/><text x="0.5963%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (393,374 samples, 0.16%)</title><rect x="16.6649%" y="149" width="0.1595%" height="15" fill="rgb(217,0,24)"/><text x="16.9149%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (373,024 samples, 0.15%)</title><rect x="16.6731%" y="133" width="0.1513%" height="15" fill="rgb(221,193,54)"/><text x="16.9231%" y="143.50"></text></g><g><title>codegen_fn_attrs (319,971 samples, 0.13%)</title><rect x="19.2327%" y="69" width="0.1297%" height="15" fill="rgb(248,212,6)"/><text x="19.4827%" y="79.50"></text></g><g><title>needs_drop_raw (372,684 samples, 0.15%)</title><rect x="19.8701%" y="53" width="0.1511%" height="15" fill="rgb(208,68,35)"/><text x="20.1201%" y="63.50"></text></g><g><title>thir_body (515,503 samples, 0.21%)</title><rect x="20.0708%" y="53" width="0.2090%" height="15" fill="rgb(232,128,0)"/><text x="20.3208%" y="63.50"></text></g><g><title>mir_const (3,458,106 samples, 1.40%)</title><rect x="18.8921%" y="101" width="1.4023%" height="15" fill="rgb(207,160,47)"/><text x="19.1421%" y="111.50"></text></g><g><title>unsafety_check_result (2,816,067 samples, 1.14%)</title><rect x="19.1524%" y="85" width="1.1419%" height="15" fill="rgb(228,23,34)"/><text x="19.4024%" y="95.50"></text></g><g><title>mir_built (2,297,963 samples, 0.93%)</title><rect x="19.3625%" y="69" width="0.9318%" height="15" fill="rgb(218,30,26)"/><text x="19.6125%" y="79.50"></text></g><g><title>mir_promoted (3,876,094 samples, 1.57%)</title><rect x="18.7309%" y="117" width="1.5718%" height="15" fill="rgb(220,122,19)"/><text x="18.9809%" y="127.50"></text></g><g><title>type_op_prove_predicate (766,120 samples, 0.31%)</title><rect x="20.5075%" y="117" width="0.3107%" height="15" fill="rgb(250,228,42)"/><text x="20.7575%" y="127.50"></text></g><g><title>MIR_borrow_checking (9,584,225 samples, 3.89%)</title><rect x="16.9332%" y="149" width="3.8864%" height="15" fill="rgb(240,193,28)"/><text x="17.1832%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (9,531,144 samples, 3.86%)</title><rect x="16.9547%" y="133" width="3.8649%" height="15" fill="rgb(216,20,37)"/><text x="17.2047%" y="143.50">mir_..</text></g><g><title>codegen_fn_attrs (339,233 samples, 0.14%)</title><rect x="20.9994%" y="117" width="0.1376%" height="15" fill="rgb(206,188,39)"/><text x="21.2494%" y="127.50"></text></g><g><title>check_mod_attrs (551,416 samples, 0.22%)</title><rect x="20.9135%" y="133" width="0.2236%" height="15" fill="rgb(217,207,13)"/><text x="21.1635%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (516,684 samples, 0.21%)</title><rect x="21.2112%" y="133" width="0.2095%" height="15" fill="rgb(231,73,38)"/><text x="21.4612%" y="143.50"></text></g><g><title>misc_checking_1 (1,353,896 samples, 0.55%)</title><rect x="20.8979%" y="149" width="0.5490%" height="15" fill="rgb(225,20,46)"/><text x="21.1479%" y="159.50"></text></g><g><title>misc_checking_2 (485,256 samples, 0.20%)</title><rect x="21.4469%" y="149" width="0.1968%" height="15" fill="rgb(210,31,41)"/><text x="21.6969%" y="159.50"></text></g><g><title>match_checking (289,073 samples, 0.12%)</title><rect x="21.5265%" y="133" width="0.1172%" height="15" fill="rgb(221,200,47)"/><text x="21.7765%" y="143.50"></text></g><g><title>check_match (272,963 samples, 0.11%)</title><rect x="21.5330%" y="117" width="0.1107%" height="15" fill="rgb(226,26,5)"/><text x="21.7830%" y="127.50"></text></g><g><title>death_checking (250,522 samples, 0.10%)</title><rect x="21.6890%" y="133" width="0.1016%" height="15" fill="rgb(249,33,26)"/><text x="21.9390%" y="143.50"></text></g><g><title>crate_lints (763,819 samples, 0.31%)</title><rect x="21.7911%" y="117" width="0.3097%" height="15" fill="rgb(235,183,28)"/><text x="22.0411%" y="127.50"></text></g><g><title>type_of (279,183 samples, 0.11%)</title><rect x="21.9876%" y="101" width="0.1132%" height="15" fill="rgb(221,5,38)"/><text x="22.2376%" y="111.50"></text></g><g><title>lint_checking (929,951 samples, 0.38%)</title><rect x="21.7906%" y="133" width="0.3771%" height="15" fill="rgb(247,18,42)"/><text x="22.0406%" y="143.50"></text></g><g><title>privacy_checking_modules (342,843 samples, 0.14%)</title><rect x="22.2223%" y="133" width="0.1390%" height="15" fill="rgb(241,131,45)"/><text x="22.4723%" y="143.50"></text></g><g><title>check_mod_privacy (339,683 samples, 0.14%)</title><rect x="22.2236%" y="117" width="0.1377%" height="15" fill="rgb(249,31,29)"/><text x="22.4736%" y="127.50"></text></g><g><title>misc_checking_3 (1,779,819 samples, 0.72%)</title><rect x="21.6437%" y="149" width="0.7217%" height="15" fill="rgb(225,111,53)"/><text x="21.8937%" y="159.50"></text></g><g><title>impl_parent (518,678 samples, 0.21%)</title><rect x="22.8725%" y="85" width="0.2103%" height="15" fill="rgb(238,160,17)"/><text x="23.1225%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (269,885 samples, 0.11%)</title><rect x="22.9734%" y="69" width="0.1094%" height="15" fill="rgb(214,148,48)"/><text x="23.2234%" y="79.50"></text></g><g><title>impl_trait_ref (1,236,268 samples, 0.50%)</title><rect x="23.0828%" y="85" width="0.5013%" height="15" fill="rgb(232,36,49)"/><text x="23.3328%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (997,097 samples, 0.40%)</title><rect x="23.1798%" y="69" width="0.4043%" height="15" fill="rgb(209,103,24)"/><text x="23.4298%" y="79.50"></text></g><g><title>coherent_trait (3,155,795 samples, 1.28%)</title><rect x="22.3874%" y="117" width="1.2797%" height="15" fill="rgb(229,88,8)"/><text x="22.6374%" y="127.50"></text></g><g><title>specialization_graph_of (2,938,753 samples, 1.19%)</title><rect x="22.4754%" y="101" width="1.1917%" height="15" fill="rgb(213,181,19)"/><text x="22.7254%" y="111.50"></text></g><g><title>coherence_checking (3,209,365 samples, 1.30%)</title><rect x="22.3822%" y="133" width="1.3014%" height="15" fill="rgb(254,191,54)"/><text x="22.6322%" y="143.50"></text></g><g><title>associated_item (281,645 samples, 0.11%)</title><rect x="26.4022%" y="69" width="0.1142%" height="15" fill="rgb(241,83,37)"/><text x="26.6522%" y="79.50"></text></g><g><title>associated_items (404,455 samples, 0.16%)</title><rect x="26.3594%" y="85" width="0.1640%" height="15" fill="rgb(233,36,39)"/><text x="26.6094%" y="95.50"></text></g><g><title>evaluate_obligation (1,085,486 samples, 0.44%)</title><rect x="26.5665%" y="85" width="0.4402%" height="15" fill="rgb(226,3,54)"/><text x="26.8165%" y="95.50"></text></g><g><title>opt_def_kind (252,843 samples, 0.10%)</title><rect x="28.0023%" y="37" width="0.1025%" height="15" fill="rgb(245,192,40)"/><text x="28.2523%" y="47.50"></text></g><g><title>predicates_of (272,473 samples, 0.11%)</title><rect x="27.9996%" y="53" width="0.1105%" height="15" fill="rgb(238,167,29)"/><text x="28.2496%" y="63.50"></text></g><g><title>evaluate_obligation (495,786 samples, 0.20%)</title><rect x="27.9222%" y="69" width="0.2010%" height="15" fill="rgb(232,182,51)"/><text x="28.1722%" y="79.50"></text></g><g><title>typeck (2,120,543 samples, 0.86%)</title><rect x="27.3770%" y="85" width="0.8599%" height="15" fill="rgb(231,60,39)"/><text x="27.6270%" y="95.50"></text></g><g><title>item_bodies_checking (11,233,583 samples, 4.56%)</title><rect x="23.6927%" y="133" width="4.5553%" height="15" fill="rgb(208,69,12)"/><text x="23.9427%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (11,231,743 samples, 4.55%)</title><rect x="23.6934%" y="117" width="4.5545%" height="15" fill="rgb(235,93,37)"/><text x="23.9434%" y="127.50">typec..</text></g><g><title>typeck (11,196,412 samples, 4.54%)</title><rect x="23.7077%" y="101" width="4.5402%" height="15" fill="rgb(213,116,39)"/><text x="23.9577%" y="111.50">typeck</text></g><g><title>item_types_checking (745,299 samples, 0.30%)</title><rect x="28.2479%" y="133" width="0.3022%" height="15" fill="rgb(222,207,29)"/><text x="28.4979%" y="143.50"></text></g><g><title>check_mod_item_types (740,469 samples, 0.30%)</title><rect x="28.2499%" y="117" width="0.3003%" height="15" fill="rgb(206,96,30)"/><text x="28.4999%" y="127.50"></text></g><g><title>predicates_of (263,733 samples, 0.11%)</title><rect x="28.8490%" y="101" width="0.1069%" height="15" fill="rgb(218,138,4)"/><text x="29.0990%" y="111.50"></text></g><g><title>type_collecting (1,167,093 samples, 0.47%)</title><rect x="28.5507%" y="133" width="0.4733%" height="15" fill="rgb(250,191,14)"/><text x="28.8007%" y="143.50"></text></g><g><title>collect_mod_item_types (1,155,863 samples, 0.47%)</title><rect x="28.5553%" y="117" width="0.4687%" height="15" fill="rgb(239,60,40)"/><text x="28.8053%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,209,623 samples, 0.49%)</title><rect x="29.0674%" y="117" width="0.4905%" height="15" fill="rgb(206,27,48)"/><text x="29.3174%" y="127.50"></text></g><g><title>evaluate_obligation (519,105 samples, 0.21%)</title><rect x="29.8177%" y="101" width="0.2105%" height="15" fill="rgb(225,35,8)"/><text x="30.0677%" y="111.50"></text></g><g><title>check_item_well_formed (1,549,336 samples, 0.63%)</title><rect x="29.5579%" y="117" width="0.6283%" height="15" fill="rgb(250,213,24)"/><text x="29.8079%" y="127.50"></text></g><g><title>analysis (33,907,712 samples, 13.75%)</title><rect x="16.8244%" y="165" width="13.7497%" height="15" fill="rgb(247,123,22)"/><text x="17.0744%" y="175.50">analysis</text></g><g><title>type_check_crate (20,243,132 samples, 8.21%)</title><rect x="22.3654%" y="149" width="8.2087%" height="15" fill="rgb(231,138,38)"/><text x="22.6154%" y="159.50">type_check_..</text></g><g><title>wf_checking (3,820,061 samples, 1.55%)</title><rect x="29.0250%" y="133" width="1.5490%" height="15" fill="rgb(231,145,46)"/><text x="29.2750%" y="143.50"></text></g><g><title>check_trait_item_well_formed (956,491 samples, 0.39%)</title><rect x="30.1862%" y="117" width="0.3879%" height="15" fill="rgb(251,118,11)"/><text x="30.4362%" y="127.50"></text></g><g><title>item_attrs (252,642 samples, 0.10%)</title><rect x="32.1809%" y="101" width="0.1024%" height="15" fill="rgb(217,147,25)"/><text x="32.4309%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (248,762 samples, 0.10%)</title><rect x="32.1825%" y="85" width="0.1009%" height="15" fill="rgb(247,81,37)"/><text x="32.4325%" y="95.50"></text></g><g><title>codegen_fn_attrs (303,413 samples, 0.12%)</title><rect x="32.1723%" y="117" width="0.1230%" height="15" fill="rgb(209,12,38)"/><text x="32.4223%" y="127.50"></text></g><g><title>fn_abi_of_instance (1,141,413 samples, 0.46%)</title><rect x="32.0604%" y="133" width="0.4628%" height="15" fill="rgb(227,1,9)"/><text x="32.3104%" y="143.50"></text></g><g><title>codegen_module (4,058,685 samples, 1.65%)</title><rect x="30.9699%" y="149" width="1.6458%" height="15" fill="rgb(248,47,43)"/><text x="31.2199%" y="159.50"></text></g><g><title>optimized_mir (2,071,742 samples, 0.84%)</title><rect x="32.8014%" y="101" width="0.8401%" height="15" fill="rgb(221,10,30)"/><text x="33.0514%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (723,836 samples, 0.29%)</title><rect x="33.3480%" y="85" width="0.2935%" height="15" fill="rgb(210,229,1)"/><text x="33.5980%" y="95.50"></text></g><g><title>resolve_instance (614,661 samples, 0.25%)</title><rect x="33.6415%" y="101" width="0.2492%" height="15" fill="rgb(222,148,37)"/><text x="33.8915%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (3,380,968 samples, 1.37%)</title><rect x="32.6249%" y="117" width="1.3710%" height="15" fill="rgb(234,67,33)"/><text x="32.8749%" y="127.50"></text></g><g><title>monomorphization_collector (3,422,638 samples, 1.39%)</title><rect x="32.6241%" y="133" width="1.3879%" height="15" fill="rgb(247,98,35)"/><text x="32.8741%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (3,694,281 samples, 1.50%)</title><rect x="32.6161%" y="149" width="1.4980%" height="15" fill="rgb(247,138,52)"/><text x="32.8661%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (251,873 samples, 0.10%)</title><rect x="34.0120%" y="133" width="0.1021%" height="15" fill="rgb(213,79,30)"/><text x="34.2620%" y="143.50"></text></g><g><title>codegen_crate (8,735,966 samples, 3.54%)</title><rect x="30.5777%" y="165" width="3.5425%" height="15" fill="rgb(246,177,23)"/><text x="30.8277%" y="175.50">code..</text></g><g><title>codegen_module_optimize (36,193,507 samples, 14.68%)</title><rect x="34.1201%" y="165" width="14.6766%" height="15" fill="rgb(230,62,27)"/><text x="34.3701%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (32,955,042 samples, 13.36%)</title><rect x="35.4333%" y="149" width="13.3634%" height="15" fill="rgb(216,154,8)"/><text x="35.6833%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (15,501,180 samples, 6.29%)</title><rect x="49.5404%" y="149" width="6.2858%" height="15" fill="rgb(244,35,45)"/><text x="49.7904%" y="159.50">LLVM_lto..</text></g><g><title>LLVM_module_codegen (39,136,400 samples, 15.87%)</title><rect x="55.8262%" y="149" width="15.8699%" height="15" fill="rgb(251,115,12)"/><text x="56.0762%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (38,728,826 samples, 15.70%)</title><rect x="55.9914%" y="133" width="15.7047%" height="15" fill="rgb(240,54,50)"/><text x="56.2414%" y="143.50">LLVM_module_codegen_emit..</text></g><g><title>codegen_module_perform_lto (56,801,434 samples, 23.03%)</title><rect x="48.7967%" y="165" width="23.0332%" height="15" fill="rgb(233,84,52)"/><text x="49.0467%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (19,924,398 samples, 8.08%)</title><rect x="72.0448%" y="149" width="8.0794%" height="15" fill="rgb(207,117,47)"/><text x="72.2948%" y="159.50">macro_expan..</text></g><g><title>expand_crate (19,908,948 samples, 8.07%)</title><rect x="72.0511%" y="133" width="8.0731%" height="15" fill="rgb(249,43,39)"/><text x="72.3011%" y="143.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (522,446 samples, 0.21%)</title><rect x="79.9124%" y="117" width="0.2119%" height="15" fill="rgb(209,38,44)"/><text x="80.1624%" y="127.50"></text></g><g><title>finalize_macro_resolutions (255,003 samples, 0.10%)</title><rect x="80.1866%" y="133" width="0.1034%" height="15" fill="rgb(236,212,23)"/><text x="80.4366%" y="143.50"></text></g><g><title>late_resolve_crate (1,793,379 samples, 0.73%)</title><rect x="80.2900%" y="133" width="0.7272%" height="15" fill="rgb(242,79,21)"/><text x="80.5400%" y="143.50"></text></g><g><title>configure_and_expand (22,810,290 samples, 9.25%)</title><rect x="71.8299%" y="165" width="9.2496%" height="15" fill="rgb(211,96,35)"/><text x="72.0799%" y="175.50">configure_and..</text></g><g><title>resolve_crate (2,305,185 samples, 0.93%)</title><rect x="80.1448%" y="149" width="0.9348%" height="15" fill="rgb(253,215,40)"/><text x="80.3948%" y="159.50"></text></g><g><title>early_lint_checks (354,444 samples, 0.14%)</title><rect x="81.1753%" y="165" width="0.1437%" height="15" fill="rgb(211,81,21)"/><text x="81.4253%" y="175.50"></text></g><g><title>free_global_ctxt (2,576,568 samples, 1.04%)</title><rect x="81.3190%" y="165" width="1.0448%" height="15" fill="rgb(208,190,38)"/><text x="81.5690%" y="175.50"></text></g><g><title>layout_of (280,591 samples, 0.11%)</title><rect x="83.1329%" y="133" width="0.1138%" height="15" fill="rgb(235,213,38)"/><text x="83.3829%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (816,909 samples, 0.33%)</title><rect x="83.2467%" y="133" width="0.3313%" height="15" fill="rgb(237,122,38)"/><text x="83.4967%" y="143.50"></text></g><g><title>eval_to_const_value_raw (259,922 samples, 0.11%)</title><rect x="83.5844%" y="117" width="0.1054%" height="15" fill="rgb(244,218,35)"/><text x="83.8344%" y="127.50"></text></g><g><title>eval_to_const_value_raw (257,242 samples, 0.10%)</title><rect x="83.5855%" y="101" width="0.1043%" height="15" fill="rgb(240,68,47)"/><text x="83.8355%" y="111.50"></text></g><g><title>eval_to_allocation_raw (252,472 samples, 0.10%)</title><rect x="83.5874%" y="85" width="0.1024%" height="15" fill="rgb(210,16,53)"/><text x="83.8374%" y="95.50"></text></g><g><title>optimized_mir (2,191,335 samples, 0.89%)</title><rect x="82.8050%" y="149" width="0.8886%" height="15" fill="rgb(235,124,12)"/><text x="83.0550%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (285,362 samples, 0.12%)</title><rect x="83.5779%" y="133" width="0.1157%" height="15" fill="rgb(224,169,11)"/><text x="83.8279%" y="143.50"></text></g><g><title>generate_crate_metadata (3,302,147 samples, 1.34%)</title><rect x="82.3639%" y="165" width="1.3390%" height="15" fill="rgb(250,166,2)"/><text x="82.6139%" y="175.50"></text></g><g><title>hir_lowering (3,079,424 samples, 1.25%)</title><rect x="83.7029%" y="165" width="1.2487%" height="15" fill="rgb(242,216,29)"/><text x="83.9529%" y="175.50"></text></g><g><title>finish_ongoing_codegen (33,295,876 samples, 13.50%)</title><rect x="84.9809%" y="149" width="13.5016%" height="15" fill="rgb(230,116,27)"/><text x="85.2309%" y="159.50">finish_ongoing_codeg..</text></g><g><title>link_crate (856,379 samples, 0.35%)</title><rect x="98.4825%" y="149" width="0.3473%" height="15" fill="rgb(228,99,48)"/><text x="98.7325%" y="159.50"></text></g><g><title>link_binary (836,699 samples, 0.34%)</title><rect x="98.4905%" y="133" width="0.3393%" height="15" fill="rgb(253,11,6)"/><text x="98.7405%" y="143.50"></text></g><g><title>link_rlib (508,496 samples, 0.21%)</title><rect x="98.6236%" y="117" width="0.2062%" height="15" fill="rgb(247,143,39)"/><text x="98.8736%" y="127.50"></text></g><g><title>link (34,232,486 samples, 13.88%)</title><rect x="84.9516%" y="165" width="13.8814%" height="15" fill="rgb(236,97,10)"/><text x="85.2016%" y="175.50">link</text></g><g><title>parse_crate (518,085 samples, 0.21%)</title><rect x="98.8330%" y="165" width="0.2101%" height="15" fill="rgb(233,208,19)"/><text x="99.0830%" y="175.50"></text></g><g><title>prepare_outputs (348,424 samples, 0.14%)</title><rect x="99.0468%" y="165" width="0.1413%" height="15" fill="rgb(216,164,2)"/><text x="99.2968%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,560,468 samples, 0.63%)</title><rect x="99.1880%" y="165" width="0.6328%" height="15" fill="rgb(220,129,5)"/><text x="99.4380%" y="175.50"></text></g><g><title>all (246,607,229 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (246,607,229 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (339,454 samples, 0.14%)</title><rect x="99.8624%" y="165" width="0.1376%" height="15" fill="rgb(251,28,31)"/><text x="100.1124%" y="175.50"></text></g></svg></svg>