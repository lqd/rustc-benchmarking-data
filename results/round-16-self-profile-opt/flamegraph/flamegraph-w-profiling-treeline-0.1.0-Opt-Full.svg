<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,897,843 samples, 7.51%)</title><rect x="0.8201%" y="197" width="7.5050%" height="15" fill="rgb(227,0,7)"/><text x="1.0701%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (110,352 samples, 0.17%)</title><rect x="8.1560%" y="181" width="0.1691%" height="15" fill="rgb(217,0,24)"/><text x="8.4060%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (96,511 samples, 0.15%)</title><rect x="8.1773%" y="165" width="0.1479%" height="15" fill="rgb(221,193,54)"/><text x="8.4273%" y="175.50"></text></g><g><title>codegen_fn_attrs (90,511 samples, 0.14%)</title><rect x="13.4934%" y="101" width="0.1387%" height="15" fill="rgb(248,212,6)"/><text x="13.7434%" y="111.50"></text></g><g><title>is_copy_raw (83,951 samples, 0.13%)</title><rect x="14.5234%" y="53" width="0.1286%" height="15" fill="rgb(208,68,35)"/><text x="14.7734%" y="63.50"></text></g><g><title>evaluate_obligation (70,451 samples, 0.11%)</title><rect x="14.5441%" y="37" width="0.1080%" height="15" fill="rgb(232,128,0)"/><text x="14.7941%" y="47.50"></text></g><g><title>adt_drop_tys (145,112 samples, 0.22%)</title><rect x="14.5011%" y="69" width="0.2224%" height="15" fill="rgb(207,160,47)"/><text x="14.7511%" y="79.50"></text></g><g><title>needs_drop_raw (575,216 samples, 0.88%)</title><rect x="14.4502%" y="85" width="0.8814%" height="15" fill="rgb(228,23,34)"/><text x="14.7002%" y="95.50"></text></g><g><title>is_copy_raw (396,904 samples, 0.61%)</title><rect x="14.7235%" y="69" width="0.6082%" height="15" fill="rgb(218,30,26)"/><text x="14.9735%" y="79.50"></text></g><g><title>evaluate_obligation (365,394 samples, 0.56%)</title><rect x="14.7718%" y="53" width="0.5599%" height="15" fill="rgb(220,122,19)"/><text x="15.0218%" y="63.50"></text></g><g><title>trait_impls_of (119,432 samples, 0.18%)</title><rect x="15.1487%" y="37" width="0.1830%" height="15" fill="rgb(250,228,42)"/><text x="15.3987%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (71,441 samples, 0.11%)</title><rect x="15.4197%" y="69" width="0.1095%" height="15" fill="rgb(240,193,28)"/><text x="15.6697%" y="79.50"></text></g><g><title>impl_parent (202,181 samples, 0.31%)</title><rect x="16.4395%" y="53" width="0.3098%" height="15" fill="rgb(216,20,37)"/><text x="16.6895%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (137,620 samples, 0.21%)</title><rect x="16.5384%" y="37" width="0.2109%" height="15" fill="rgb(206,188,39)"/><text x="16.7884%" y="47.50"></text></g><g><title>specialization_graph_of (1,285,324 samples, 1.97%)</title><rect x="15.5342%" y="69" width="1.9695%" height="15" fill="rgb(217,207,13)"/><text x="15.7842%" y="79.50">s..</text></g><g><title>impl_trait_ref (492,347 samples, 0.75%)</title><rect x="16.7493%" y="53" width="0.7544%" height="15" fill="rgb(231,73,38)"/><text x="16.9993%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (429,287 samples, 0.66%)</title><rect x="16.8459%" y="37" width="0.6578%" height="15" fill="rgb(225,20,46)"/><text x="17.0959%" y="47.50"></text></g><g><title>resolve_instance (1,446,945 samples, 2.22%)</title><rect x="15.3317%" y="85" width="2.2172%" height="15" fill="rgb(210,31,41)"/><text x="15.5817%" y="95.50">r..</text></g><g><title>thir_body (204,984 samples, 0.31%)</title><rect x="17.5569%" y="85" width="0.3141%" height="15" fill="rgb(221,200,47)"/><text x="17.8069%" y="95.50"></text></g><g><title>mir_const (3,206,685 samples, 4.91%)</title><rect x="12.9614%" y="133" width="4.9136%" height="15" fill="rgb(226,26,5)"/><text x="13.2114%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (2,962,683 samples, 4.54%)</title><rect x="13.3353%" y="117" width="4.5398%" height="15" fill="rgb(249,33,26)"/><text x="13.5853%" y="127.50">unsaf..</text></g><g><title>mir_built (2,768,990 samples, 4.24%)</title><rect x="13.6321%" y="101" width="4.2430%" height="15" fill="rgb(235,183,28)"/><text x="13.8821%" y="111.50">mir_b..</text></g><g><title>mir_promoted (3,429,708 samples, 5.26%)</title><rect x="12.6333%" y="149" width="5.2554%" height="15" fill="rgb(221,5,38)"/><text x="12.8833%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (177,853 samples, 0.27%)</title><rect x="17.8887%" y="149" width="0.2725%" height="15" fill="rgb(247,18,42)"/><text x="18.1387%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (208,943 samples, 0.32%)</title><rect x="18.1612%" y="149" width="0.3202%" height="15" fill="rgb(241,131,45)"/><text x="18.4112%" y="159.50"></text></g><g><title>normalize_projection_ty (131,702 samples, 0.20%)</title><rect x="18.2796%" y="133" width="0.2018%" height="15" fill="rgb(249,31,29)"/><text x="18.5296%" y="143.50"></text></g><g><title>type_op_prove_predicate (619,956 samples, 0.95%)</title><rect x="18.4814%" y="149" width="0.9500%" height="15" fill="rgb(225,111,53)"/><text x="18.7314%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,143,328 samples, 10.95%)</title><rect x="8.4927%" y="181" width="10.9458%" height="15" fill="rgb(238,160,17)"/><text x="8.7427%" y="191.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (7,130,178 samples, 10.93%)</title><rect x="8.5128%" y="165" width="10.9257%" height="15" fill="rgb(214,148,48)"/><text x="8.7628%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (78,341 samples, 0.12%)</title><rect x="19.4453%" y="181" width="0.1200%" height="15" fill="rgb(232,36,49)"/><text x="19.6953%" y="191.50"></text></g><g><title>codegen_fn_attrs (108,281 samples, 0.17%)</title><rect x="19.8061%" y="117" width="0.1659%" height="15" fill="rgb(209,103,24)"/><text x="20.0561%" y="127.50"></text></g><g><title>codegen_fn_attrs (186,941 samples, 0.29%)</title><rect x="19.6879%" y="149" width="0.2865%" height="15" fill="rgb(229,88,8)"/><text x="19.9379%" y="159.50"></text></g><g><title>should_inherit_track_caller (158,821 samples, 0.24%)</title><rect x="19.7310%" y="133" width="0.2434%" height="15" fill="rgb(213,181,19)"/><text x="19.9810%" y="143.50"></text></g><g><title>check_mod_attrs (250,413 samples, 0.38%)</title><rect x="19.5910%" y="165" width="0.3837%" height="15" fill="rgb(254,191,54)"/><text x="19.8410%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (127,441 samples, 0.20%)</title><rect x="20.0418%" y="165" width="0.1953%" height="15" fill="rgb(241,83,37)"/><text x="20.2918%" y="175.50"></text></g><g><title>misc_checking_1 (457,365 samples, 0.70%)</title><rect x="19.5661%" y="181" width="0.7008%" height="15" fill="rgb(233,36,39)"/><text x="19.8161%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (111,202 samples, 0.17%)</title><rect x="20.2687%" y="165" width="0.1704%" height="15" fill="rgb(226,3,54)"/><text x="20.5187%" y="175.50"></text></g><g><title>check_mod_liveness (88,941 samples, 0.14%)</title><rect x="20.3028%" y="149" width="0.1363%" height="15" fill="rgb(245,192,40)"/><text x="20.5528%" y="159.50"></text></g><g><title>misc_checking_2 (243,723 samples, 0.37%)</title><rect x="20.2669%" y="181" width="0.3735%" height="15" fill="rgb(238,167,29)"/><text x="20.5169%" y="191.50"></text></g><g><title>match_checking (131,351 samples, 0.20%)</title><rect x="20.4391%" y="165" width="0.2013%" height="15" fill="rgb(232,182,51)"/><text x="20.6891%" y="175.50"></text></g><g><title>check_match (126,731 samples, 0.19%)</title><rect x="20.4461%" y="149" width="0.1942%" height="15" fill="rgb(231,60,39)"/><text x="20.6961%" y="159.50"></text></g><g><title>death_checking (100,571 samples, 0.15%)</title><rect x="20.7258%" y="165" width="0.1541%" height="15" fill="rgb(208,69,12)"/><text x="20.9758%" y="175.50"></text></g><g><title>impl_parent (534,406 samples, 0.82%)</title><rect x="22.9087%" y="101" width="0.8189%" height="15" fill="rgb(235,93,37)"/><text x="23.1587%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (334,833 samples, 0.51%)</title><rect x="23.2145%" y="85" width="0.5131%" height="15" fill="rgb(213,116,39)"/><text x="23.4645%" y="95.50"></text></g><g><title>specialization_graph_of (2,337,826 samples, 3.58%)</title><rect x="21.7198%" y="117" width="3.5823%" height="15" fill="rgb(222,207,29)"/><text x="21.9698%" y="127.50">spec..</text></g><g><title>impl_trait_ref (1,027,539 samples, 1.57%)</title><rect x="23.7276%" y="101" width="1.5745%" height="15" fill="rgb(206,96,30)"/><text x="23.9776%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (831,098 samples, 1.27%)</title><rect x="24.0286%" y="85" width="1.2735%" height="15" fill="rgb(218,138,4)"/><text x="24.2786%" y="95.50"></text></g><g><title>resolve_instance (2,421,907 samples, 3.71%)</title><rect x="21.5959%" y="133" width="3.7111%" height="15" fill="rgb(250,191,14)"/><text x="21.8459%" y="143.50">reso..</text></g><g><title>crate_lints (3,881,723 samples, 5.95%)</title><rect x="20.8829%" y="149" width="5.9480%" height="15" fill="rgb(239,60,40)"/><text x="21.1329%" y="159.50">crate_li..</text></g><g><title>type_of (991,540 samples, 1.52%)</title><rect x="25.3115%" y="133" width="1.5193%" height="15" fill="rgb(206,27,48)"/><text x="25.5615%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (756,769 samples, 1.16%)</title><rect x="25.6713%" y="117" width="1.1596%" height="15" fill="rgb(225,35,8)"/><text x="25.9213%" y="127.50"></text></g><g><title>lint_checking (3,964,114 samples, 6.07%)</title><rect x="20.8799%" y="165" width="6.0743%" height="15" fill="rgb(250,213,24)"/><text x="21.1299%" y="175.50">lint_che..</text></g><g><title>module_lints (80,440 samples, 0.12%)</title><rect x="26.8309%" y="149" width="0.1233%" height="15" fill="rgb(247,123,22)"/><text x="27.0809%" y="159.50"></text></g><g><title>lint_mod (77,990 samples, 0.12%)</title><rect x="26.8346%" y="133" width="0.1195%" height="15" fill="rgb(231,138,38)"/><text x="27.0846%" y="143.50"></text></g><g><title>privacy_checking_modules (157,511 samples, 0.24%)</title><rect x="27.0502%" y="165" width="0.2414%" height="15" fill="rgb(231,145,46)"/><text x="27.3002%" y="175.50"></text></g><g><title>check_mod_privacy (156,161 samples, 0.24%)</title><rect x="27.0522%" y="149" width="0.2393%" height="15" fill="rgb(251,118,11)"/><text x="27.3022%" y="159.50"></text></g><g><title>misc_checking_3 (4,348,958 samples, 6.66%)</title><rect x="20.6403%" y="181" width="6.6640%" height="15" fill="rgb(217,147,25)"/><text x="20.8903%" y="191.50">misc_chec..</text></g><g><title>impl_parent (873,913 samples, 1.34%)</title><rect x="29.1514%" y="117" width="1.3391%" height="15" fill="rgb(247,81,37)"/><text x="29.4014%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (593,600 samples, 0.91%)</title><rect x="29.5809%" y="101" width="0.9096%" height="15" fill="rgb(209,12,38)"/><text x="29.8309%" y="111.50"></text></g><g><title>impl_trait_ref (2,866,010 samples, 4.39%)</title><rect x="30.4905%" y="117" width="4.3916%" height="15" fill="rgb(227,1,9)"/><text x="30.7405%" y="127.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,584,027 samples, 3.96%)</title><rect x="30.9226%" y="101" width="3.9595%" height="15" fill="rgb(248,47,43)"/><text x="31.1726%" y="111.50">meta..</text></g><g><title>coherent_trait (5,150,146 samples, 7.89%)</title><rect x="27.3554%" y="149" width="7.8916%" height="15" fill="rgb(221,10,30)"/><text x="27.6054%" y="159.50">coherent_tr..</text></g><g><title>specialization_graph_of (5,143,866 samples, 7.88%)</title><rect x="27.3651%" y="133" width="7.8820%" height="15" fill="rgb(210,229,1)"/><text x="27.6151%" y="143.50">specializat..</text></g><g><title>trait_impls_of (236,803 samples, 0.36%)</title><rect x="34.8842%" y="117" width="0.3629%" height="15" fill="rgb(222,148,37)"/><text x="35.1342%" y="127.50"></text></g><g><title>coherence_checking (5,193,647 samples, 7.96%)</title><rect x="27.3392%" y="165" width="7.9583%" height="15" fill="rgb(234,67,33)"/><text x="27.5892%" y="175.50">coherence_c..</text></g><g><title>adt_def (80,260 samples, 0.12%)</title><rect x="42.7227%" y="101" width="0.1230%" height="15" fill="rgb(247,98,35)"/><text x="42.9727%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (78,180 samples, 0.12%)</title><rect x="42.7259%" y="85" width="0.1198%" height="15" fill="rgb(247,138,52)"/><text x="42.9759%" y="95.50"></text></g><g><title>adt_sized_constraint (94,560 samples, 0.14%)</title><rect x="42.7105%" y="117" width="0.1449%" height="15" fill="rgb(213,79,30)"/><text x="42.9605%" y="127.50"></text></g><g><title>associated_item (320,474 samples, 0.49%)</title><rect x="43.0122%" y="101" width="0.4911%" height="15" fill="rgb(246,177,23)"/><text x="43.2622%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (256,084 samples, 0.39%)</title><rect x="43.1108%" y="85" width="0.3924%" height="15" fill="rgb(230,62,27)"/><text x="43.3608%" y="95.50"></text></g><g><title>associated_items (439,857 samples, 0.67%)</title><rect x="42.8573%" y="117" width="0.6740%" height="15" fill="rgb(216,154,8)"/><text x="43.1073%" y="127.50"></text></g><g><title>adt_dtorck_constraint (98,661 samples, 0.15%)</title><rect x="43.7918%" y="69" width="0.1512%" height="15" fill="rgb(244,35,45)"/><text x="44.0418%" y="79.50"></text></g><g><title>adt_dtorck_constraint (135,661 samples, 0.21%)</title><rect x="43.7506%" y="85" width="0.2079%" height="15" fill="rgb(251,115,12)"/><text x="44.0006%" y="95.50"></text></g><g><title>dropck_outlives (269,102 samples, 0.41%)</title><rect x="43.5688%" y="117" width="0.4123%" height="15" fill="rgb(240,54,50)"/><text x="43.8188%" y="127.50"></text></g><g><title>adt_dtorck_constraint (189,331 samples, 0.29%)</title><rect x="43.6910%" y="101" width="0.2901%" height="15" fill="rgb(233,84,52)"/><text x="43.9410%" y="111.50"></text></g><g><title>evaluate_obligation (796,268 samples, 1.22%)</title><rect x="43.9811%" y="117" width="1.2201%" height="15" fill="rgb(207,117,47)"/><text x="44.2311%" y="127.50"></text></g><g><title>trait_impls_of (391,214 samples, 0.60%)</title><rect x="44.6018%" y="101" width="0.5995%" height="15" fill="rgb(249,43,39)"/><text x="44.8518%" y="111.50"></text></g><g><title>implementations_of_trait (98,281 samples, 0.15%)</title><rect x="45.0506%" y="85" width="0.1506%" height="15" fill="rgb(209,38,44)"/><text x="45.3006%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (75,990 samples, 0.12%)</title><rect x="45.0848%" y="69" width="0.1164%" height="15" fill="rgb(236,212,23)"/><text x="45.3348%" y="79.50"></text></g><g><title>fn_sig (69,730 samples, 0.11%)</title><rect x="45.2242%" y="117" width="0.1068%" height="15" fill="rgb(242,79,21)"/><text x="45.4742%" y="127.50"></text></g><g><title>generics_of (115,941 samples, 0.18%)</title><rect x="45.3311%" y="117" width="0.1777%" height="15" fill="rgb(211,96,35)"/><text x="45.5811%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (97,341 samples, 0.15%)</title><rect x="45.3596%" y="101" width="0.1492%" height="15" fill="rgb(253,215,40)"/><text x="45.6096%" y="111.50"></text></g><g><title>impl_item_implementor_ids (85,510 samples, 0.13%)</title><rect x="45.5087%" y="117" width="0.1310%" height="15" fill="rgb(211,81,21)"/><text x="45.7587%" y="127.50"></text></g><g><title>associated_items (78,150 samples, 0.12%)</title><rect x="45.5200%" y="101" width="0.1198%" height="15" fill="rgb(208,190,38)"/><text x="45.7700%" y="111.50"></text></g><g><title>item_attrs (67,640 samples, 0.10%)</title><rect x="45.7522%" y="117" width="0.1036%" height="15" fill="rgb(235,213,38)"/><text x="46.0022%" y="127.50"></text></g><g><title>evaluate_obligation (97,410 samples, 0.15%)</title><rect x="46.0668%" y="101" width="0.1493%" height="15" fill="rgb(237,122,38)"/><text x="46.3168%" y="111.50"></text></g><g><title>method_autoderef_steps (203,311 samples, 0.31%)</title><rect x="45.9227%" y="117" width="0.3115%" height="15" fill="rgb(244,218,35)"/><text x="46.1727%" y="127.50"></text></g><g><title>object_safety_violations (126,351 samples, 0.19%)</title><rect x="46.2343%" y="117" width="0.1936%" height="15" fill="rgb(240,68,47)"/><text x="46.4843%" y="127.50"></text></g><g><title>explicit_predicates_of (69,260 samples, 0.11%)</title><rect x="46.6207%" y="85" width="0.1061%" height="15" fill="rgb(210,16,53)"/><text x="46.8707%" y="95.50"></text></g><g><title>predicates_of (198,052 samples, 0.30%)</title><rect x="46.4610%" y="117" width="0.3035%" height="15" fill="rgb(235,124,12)"/><text x="46.7110%" y="127.50"></text></g><g><title>predicates_defined_on (138,622 samples, 0.21%)</title><rect x="46.5521%" y="101" width="0.2124%" height="15" fill="rgb(224,169,11)"/><text x="46.8021%" y="111.50"></text></g><g><title>trait_impls_of (114,001 samples, 0.17%)</title><rect x="46.7800%" y="117" width="0.1747%" height="15" fill="rgb(250,166,2)"/><text x="47.0300%" y="127.50"></text></g><g><title>item_bodies_checking (7,676,525 samples, 11.76%)</title><rect x="35.3156%" y="165" width="11.7628%" height="15" fill="rgb(242,216,29)"/><text x="35.5656%" y="175.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (7,674,085 samples, 11.76%)</title><rect x="35.3193%" y="149" width="11.7591%" height="15" fill="rgb(230,116,27)"/><text x="35.5693%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (7,663,945 samples, 11.74%)</title><rect x="35.3349%" y="133" width="11.7436%" height="15" fill="rgb(228,99,48)"/><text x="35.5849%" y="143.50">typeck</text></g><g><title>impl_trait_ref (190,964 samples, 0.29%)</title><rect x="47.4661%" y="85" width="0.2926%" height="15" fill="rgb(253,11,6)"/><text x="47.7161%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (172,413 samples, 0.26%)</title><rect x="47.4945%" y="69" width="0.2642%" height="15" fill="rgb(247,143,39)"/><text x="47.7445%" y="79.50"></text></g><g><title>adt_destructor (358,034 samples, 0.55%)</title><rect x="47.2606%" y="133" width="0.5486%" height="15" fill="rgb(236,97,10)"/><text x="47.5106%" y="143.50"></text></g><g><title>coherent_trait (355,394 samples, 0.54%)</title><rect x="47.2647%" y="117" width="0.5446%" height="15" fill="rgb(233,208,19)"/><text x="47.5147%" y="127.50"></text></g><g><title>specialization_graph_of (353,944 samples, 0.54%)</title><rect x="47.2669%" y="101" width="0.5424%" height="15" fill="rgb(216,164,2)"/><text x="47.5169%" y="111.50"></text></g><g><title>item_types_checking (514,876 samples, 0.79%)</title><rect x="47.0784%" y="165" width="0.7890%" height="15" fill="rgb(220,129,5)"/><text x="47.3284%" y="175.50"></text></g><g><title>check_mod_item_types (512,336 samples, 0.79%)</title><rect x="47.0823%" y="149" width="0.7851%" height="15" fill="rgb(242,17,10)"/><text x="47.3323%" y="159.50"></text></g><g><title>late_bound_vars_map (142,603 samples, 0.22%)</title><rect x="48.3143%" y="85" width="0.2185%" height="15" fill="rgb(242,107,0)"/><text x="48.5643%" y="95.50"></text></g><g><title>resolve_lifetimes (132,963 samples, 0.20%)</title><rect x="48.3291%" y="69" width="0.2037%" height="15" fill="rgb(251,28,31)"/><text x="48.5791%" y="79.50"></text></g><g><title>explicit_predicates_of (237,983 samples, 0.36%)</title><rect x="48.1735%" y="101" width="0.3647%" height="15" fill="rgb(233,223,10)"/><text x="48.4235%" y="111.50"></text></g><g><title>predicates_of (336,544 samples, 0.52%)</title><rect x="48.1437%" y="133" width="0.5157%" height="15" fill="rgb(215,21,27)"/><text x="48.3937%" y="143.50"></text></g><g><title>predicates_defined_on (330,364 samples, 0.51%)</title><rect x="48.1532%" y="117" width="0.5062%" height="15" fill="rgb(232,23,21)"/><text x="48.4032%" y="127.50"></text></g><g><title>inferred_outlives_of (79,131 samples, 0.12%)</title><rect x="48.5382%" y="101" width="0.1213%" height="15" fill="rgb(244,5,23)"/><text x="48.7882%" y="111.50"></text></g><g><title>inferred_outlives_crate (73,741 samples, 0.11%)</title><rect x="48.5464%" y="85" width="0.1130%" height="15" fill="rgb(226,81,46)"/><text x="48.7964%" y="95.50"></text></g><g><title>type_collecting (566,936 samples, 0.87%)</title><rect x="47.8687%" y="165" width="0.8687%" height="15" fill="rgb(247,70,30)"/><text x="48.1187%" y="175.50"></text></g><g><title>collect_mod_item_types (560,566 samples, 0.86%)</title><rect x="47.8785%" y="149" width="0.8590%" height="15" fill="rgb(212,68,19)"/><text x="48.1285%" y="159.50"></text></g><g><title>adt_sized_constraint (71,171 samples, 0.11%)</title><rect x="49.2880%" y="133" width="0.1091%" height="15" fill="rgb(240,187,13)"/><text x="49.5380%" y="143.50"></text></g><g><title>adt_sized_constraint (66,741 samples, 0.10%)</title><rect x="49.2948%" y="117" width="0.1023%" height="15" fill="rgb(223,113,26)"/><text x="49.5448%" y="127.50"></text></g><g><title>evaluate_obligation (223,292 samples, 0.34%)</title><rect x="49.3992%" y="133" width="0.3422%" height="15" fill="rgb(206,192,2)"/><text x="49.6492%" y="143.50"></text></g><g><title>implied_outlives_bounds (65,550 samples, 0.10%)</title><rect x="49.7414%" y="133" width="0.1004%" height="15" fill="rgb(241,108,4)"/><text x="49.9914%" y="143.50"></text></g><g><title>check_impl_item_well_formed (814,518 samples, 1.25%)</title><rect x="48.7812%" y="149" width="1.2481%" height="15" fill="rgb(247,173,49)"/><text x="49.0312%" y="159.50"></text></g><g><title>implied_outlives_bounds (65,330 samples, 0.10%)</title><rect x="50.4515%" y="133" width="0.1001%" height="15" fill="rgb(224,114,35)"/><text x="50.7015%" y="143.50"></text></g><g><title>param_env (155,461 samples, 0.24%)</title><rect x="50.5516%" y="133" width="0.2382%" height="15" fill="rgb(245,159,27)"/><text x="50.8016%" y="143.50"></text></g><g><title>analysis (27,799,036 samples, 42.60%)</title><rect x="8.3251%" y="197" width="42.5968%" height="15" fill="rgb(245,172,44)"/><text x="8.5751%" y="207.50">analysis</text></g><g><title>type_check_crate (15,413,070 samples, 23.62%)</title><rect x="27.3043%" y="181" width="23.6176%" height="15" fill="rgb(236,23,11)"/><text x="27.5543%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,424,796 samples, 2.18%)</title><rect x="48.7387%" y="165" width="2.1832%" height="15" fill="rgb(205,117,38)"/><text x="48.9887%" y="175.50">w..</text></g><g><title>check_item_well_formed (582,568 samples, 0.89%)</title><rect x="50.0292%" y="149" width="0.8927%" height="15" fill="rgb(237,72,25)"/><text x="50.2792%" y="159.50"></text></g><g><title>codegen_module (220,202 samples, 0.34%)</title><rect x="51.7081%" y="181" width="0.3374%" height="15" fill="rgb(244,70,9)"/><text x="51.9581%" y="191.50"></text></g><g><title>codegen_crate (834,849 samples, 1.28%)</title><rect x="50.9397%" y="197" width="1.2792%" height="15" fill="rgb(217,125,39)"/><text x="51.1897%" y="207.50"></text></g><g><title>codegen_module_optimize (586,696 samples, 0.90%)</title><rect x="52.2189%" y="197" width="0.8990%" height="15" fill="rgb(235,36,10)"/><text x="52.4689%" y="207.50"></text></g><g><title>LLVM_module_optimize (297,043 samples, 0.46%)</title><rect x="52.6627%" y="181" width="0.4552%" height="15" fill="rgb(251,123,47)"/><text x="52.9127%" y="191.50"></text></g><g><title>LLVM_lto_optimize (122,331 samples, 0.19%)</title><rect x="53.4036%" y="181" width="0.1874%" height="15" fill="rgb(221,13,13)"/><text x="53.6536%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,637,390 samples, 5.57%)</title><rect x="53.5911%" y="181" width="5.5736%" height="15" fill="rgb(238,131,9)"/><text x="53.8411%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (3,620,940 samples, 5.55%)</title><rect x="53.6163%" y="165" width="5.5484%" height="15" fill="rgb(211,50,8)"/><text x="53.8663%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (3,973,044 samples, 6.09%)</title><rect x="53.1179%" y="197" width="6.0879%" height="15" fill="rgb(245,182,24)"/><text x="53.3679%" y="207.50">codegen_..</text></g><g><title>crate_injection (82,491 samples, 0.13%)</title><rect x="59.6621%" y="181" width="0.1264%" height="15" fill="rgb(242,14,37)"/><text x="59.9121%" y="191.50"></text></g><g><title>metadata_load_macro (190,141 samples, 0.29%)</title><rect x="77.2862%" y="149" width="0.2914%" height="15" fill="rgb(246,228,12)"/><text x="77.5362%" y="159.50"></text></g><g><title>macro_expand_crate (14,338,988 samples, 21.97%)</title><rect x="59.7885%" y="181" width="21.9718%" height="15" fill="rgb(213,55,15)"/><text x="60.0385%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,315,448 samples, 21.94%)</title><rect x="59.8246%" y="165" width="21.9357%" height="15" fill="rgb(209,9,3)"/><text x="60.0746%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,729,690 samples, 4.18%)</title><rect x="77.5775%" y="149" width="4.1827%" height="15" fill="rgb(230,59,30)"/><text x="77.8275%" y="159.50">metad..</text></g><g><title>metadata_register_crate (962,452 samples, 1.47%)</title><rect x="80.2855%" y="133" width="1.4748%" height="15" fill="rgb(209,121,21)"/><text x="80.5355%" y="143.50"></text></g><g><title>metadata_register_crate (81,160 samples, 0.12%)</title><rect x="81.6359%" y="117" width="0.1244%" height="15" fill="rgb(220,109,13)"/><text x="81.8859%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (95,081 samples, 0.15%)</title><rect x="81.7661%" y="181" width="0.1457%" height="15" fill="rgb(232,18,1)"/><text x="82.0161%" y="191.50"></text></g><g><title>late_resolve_crate (629,957 samples, 0.97%)</title><rect x="81.9903%" y="165" width="0.9653%" height="15" fill="rgb(215,41,42)"/><text x="82.2403%" y="175.50"></text></g><g><title>configure_and_expand (15,529,512 samples, 23.80%)</title><rect x="59.2058%" y="197" width="23.7961%" height="15" fill="rgb(224,123,36)"/><text x="59.4558%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (711,408 samples, 1.09%)</title><rect x="81.9118%" y="181" width="1.0901%" height="15" fill="rgb(240,125,3)"/><text x="82.1618%" y="191.50"></text></g><g><title>early_lint_checks (83,521 samples, 0.13%)</title><rect x="83.1009%" y="197" width="0.1280%" height="15" fill="rgb(205,98,50)"/><text x="83.3509%" y="207.50"></text></g><g><title>free_global_ctxt (4,295,317 samples, 6.58%)</title><rect x="83.2288%" y="197" width="6.5818%" height="15" fill="rgb(205,185,37)"/><text x="83.4788%" y="207.50">free_glob..</text></g><g><title>crate_hash (66,381 samples, 0.10%)</title><rect x="90.4180%" y="181" width="0.1017%" height="15" fill="rgb(238,207,15)"/><text x="90.6680%" y="191.50"></text></g><g><title>layout_of (76,420 samples, 0.12%)</title><rect x="91.8586%" y="133" width="0.1171%" height="15" fill="rgb(213,199,42)"/><text x="92.1086%" y="143.50"></text></g><g><title>layout_of (147,592 samples, 0.23%)</title><rect x="91.7737%" y="149" width="0.2262%" height="15" fill="rgb(235,201,11)"/><text x="92.0237%" y="159.50"></text></g><g><title>layout_of (328,264 samples, 0.50%)</title><rect x="91.5399%" y="165" width="0.5030%" height="15" fill="rgb(207,46,11)"/><text x="91.7899%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (644,147 samples, 0.99%)</title><rect x="92.0429%" y="165" width="0.9870%" height="15" fill="rgb(241,35,35)"/><text x="92.2929%" y="175.50"></text></g><g><title>optimized_mir (1,538,989 samples, 2.36%)</title><rect x="90.6852%" y="181" width="2.3582%" height="15" fill="rgb(243,32,47)"/><text x="90.9352%" y="191.50">o..</text></g><g><title>promoted_mir (94,881 samples, 0.15%)</title><rect x="93.0434%" y="181" width="0.1454%" height="15" fill="rgb(247,202,23)"/><text x="93.2934%" y="191.50"></text></g><g><title>generate_crate_metadata (2,214,315 samples, 3.39%)</title><rect x="89.8106%" y="197" width="3.3930%" height="15" fill="rgb(219,102,11)"/><text x="90.0606%" y="207.50">gen..</text></g><g><title>hir_lowering (511,946 samples, 0.78%)</title><rect x="93.2036%" y="197" width="0.7845%" height="15" fill="rgb(243,110,44)"/><text x="93.4536%" y="207.50"></text></g><g><title>link_crate (1,143,842 samples, 1.75%)</title><rect x="94.0310%" y="181" width="1.7527%" height="15" fill="rgb(222,74,54)"/><text x="94.2810%" y="191.50"></text></g><g><title>link_binary (1,120,732 samples, 1.72%)</title><rect x="94.0664%" y="165" width="1.7173%" height="15" fill="rgb(216,99,12)"/><text x="94.3164%" y="175.50"></text></g><g><title>link_rlib (687,347 samples, 1.05%)</title><rect x="94.7305%" y="149" width="1.0532%" height="15" fill="rgb(226,22,26)"/><text x="94.9805%" y="159.50"></text></g><g><title>link (1,182,203 samples, 1.81%)</title><rect x="93.9881%" y="197" width="1.8115%" height="15" fill="rgb(217,163,10)"/><text x="94.2381%" y="207.50">l..</text></g><g><title>parse_crate (1,213,653 samples, 1.86%)</title><rect x="95.7996%" y="197" width="1.8597%" height="15" fill="rgb(213,25,53)"/><text x="96.0496%" y="207.50">p..</text></g><g><title>prepare_outputs (205,012 samples, 0.31%)</title><rect x="97.6748%" y="197" width="0.3141%" height="15" fill="rgb(252,105,26)"/><text x="97.9248%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (886,160 samples, 1.36%)</title><rect x="97.9890%" y="197" width="1.3579%" height="15" fill="rgb(220,39,43)"/><text x="98.2390%" y="207.50"></text></g><g><title>setup_global_ctxt (85,311 samples, 0.13%)</title><rect x="99.3612%" y="197" width="0.1307%" height="15" fill="rgb(229,68,48)"/><text x="99.6112%" y="207.50"></text></g><g><title>all (65,260,879 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (65,260,879 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (331,554 samples, 0.51%)</title><rect x="99.4920%" y="197" width="0.5080%" height="15" fill="rgb(229,81,49)"/><text x="99.7420%" y="207.50"></text></g></svg></svg>