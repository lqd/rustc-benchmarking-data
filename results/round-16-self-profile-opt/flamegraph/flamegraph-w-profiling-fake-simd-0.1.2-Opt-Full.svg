<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,000,275 samples, 9.45%)</title><rect x="1.0240%" y="181" width="9.4466%" height="15" fill="rgb(227,0,7)"/><text x="1.2740%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (116,131 samples, 0.22%)</title><rect x="10.2511%" y="165" width="0.2194%" height="15" fill="rgb(217,0,24)"/><text x="10.5011%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (103,121 samples, 0.19%)</title><rect x="10.2757%" y="149" width="0.1948%" height="15" fill="rgb(221,193,54)"/><text x="10.5257%" y="159.50"></text></g><g><title>item_attrs (54,030 samples, 0.10%)</title><rect x="14.5703%" y="69" width="0.1021%" height="15" fill="rgb(248,212,6)"/><text x="14.8203%" y="79.50"></text></g><g><title>codegen_fn_attrs (76,880 samples, 0.15%)</title><rect x="14.5290%" y="85" width="0.1452%" height="15" fill="rgb(208,68,35)"/><text x="14.7790%" y="95.50"></text></g><g><title>thir_body (212,081 samples, 0.40%)</title><rect x="15.7933%" y="69" width="0.4007%" height="15" fill="rgb(232,128,0)"/><text x="16.0433%" y="79.50"></text></g><g><title>mir_const (1,209,054 samples, 2.28%)</title><rect x="13.9164%" y="117" width="2.2842%" height="15" fill="rgb(207,160,47)"/><text x="14.1664%" y="127.50">m..</text></g><g><title>unsafety_check_result (982,640 samples, 1.86%)</title><rect x="14.3442%" y="101" width="1.8564%" height="15" fill="rgb(228,23,34)"/><text x="14.5942%" y="111.50">u..</text></g><g><title>mir_built (807,960 samples, 1.53%)</title><rect x="14.6742%" y="85" width="1.5264%" height="15" fill="rgb(218,30,26)"/><text x="14.9242%" y="95.50"></text></g><g><title>mir_promoted (1,385,057 samples, 2.62%)</title><rect x="13.6068%" y="133" width="2.6167%" height="15" fill="rgb(220,122,19)"/><text x="13.8568%" y="143.50">mi..</text></g><g><title>MIR_borrow_checking (2,978,512 samples, 5.63%)</title><rect x="10.7028%" y="165" width="5.6270%" height="15" fill="rgb(250,228,42)"/><text x="10.9528%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (2,955,462 samples, 5.58%)</title><rect x="10.7463%" y="149" width="5.5835%" height="15" fill="rgb(240,193,28)"/><text x="10.9963%" y="159.50">mir_bor..</text></g><g><title>type_op_prove_predicate (56,321 samples, 0.11%)</title><rect x="16.2234%" y="133" width="0.1064%" height="15" fill="rgb(216,20,37)"/><text x="16.4734%" y="143.50"></text></g><g><title>hir_module_items (83,521 samples, 0.16%)</title><rect x="16.3407%" y="165" width="0.1578%" height="15" fill="rgb(206,188,39)"/><text x="16.5907%" y="175.50"></text></g><g><title>codegen_fn_attrs (151,012 samples, 0.29%)</title><rect x="16.8860%" y="101" width="0.2853%" height="15" fill="rgb(217,207,13)"/><text x="17.1360%" y="111.50"></text></g><g><title>codegen_fn_attrs (256,083 samples, 0.48%)</title><rect x="16.6931%" y="133" width="0.4838%" height="15" fill="rgb(231,73,38)"/><text x="16.9431%" y="143.50"></text></g><g><title>should_inherit_track_caller (214,762 samples, 0.41%)</title><rect x="16.7712%" y="117" width="0.4057%" height="15" fill="rgb(225,20,46)"/><text x="17.0212%" y="127.50"></text></g><g><title>check_mod_attrs (343,204 samples, 0.65%)</title><rect x="16.5290%" y="149" width="0.6484%" height="15" fill="rgb(210,31,41)"/><text x="16.7790%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (134,101 samples, 0.25%)</title><rect x="17.2947%" y="149" width="0.2533%" height="15" fill="rgb(221,200,47)"/><text x="17.5447%" y="159.50"></text></g><g><title>misc_checking_1 (585,817 samples, 1.11%)</title><rect x="16.4993%" y="165" width="1.1067%" height="15" fill="rgb(226,26,5)"/><text x="16.7493%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (81,441 samples, 0.15%)</title><rect x="17.6085%" y="149" width="0.1539%" height="15" fill="rgb(249,33,26)"/><text x="17.8585%" y="159.50"></text></g><g><title>check_mod_liveness (59,690 samples, 0.11%)</title><rect x="17.6496%" y="133" width="0.1128%" height="15" fill="rgb(235,183,28)"/><text x="17.8996%" y="143.50"></text></g><g><title>misc_checking_2 (235,213 samples, 0.44%)</title><rect x="17.6060%" y="165" width="0.4444%" height="15" fill="rgb(221,5,38)"/><text x="17.8560%" y="175.50"></text></g><g><title>match_checking (152,462 samples, 0.29%)</title><rect x="17.7624%" y="149" width="0.2880%" height="15" fill="rgb(247,18,42)"/><text x="18.0124%" y="159.50"></text></g><g><title>check_match (144,662 samples, 0.27%)</title><rect x="17.7771%" y="133" width="0.2733%" height="15" fill="rgb(241,131,45)"/><text x="18.0271%" y="143.50"></text></g><g><title>check_private_in_public (56,561 samples, 0.11%)</title><rect x="18.0634%" y="149" width="0.1069%" height="15" fill="rgb(249,31,29)"/><text x="18.3134%" y="159.50"></text></g><g><title>item_attrs (80,931 samples, 0.15%)</title><rect x="18.3775%" y="133" width="0.1529%" height="15" fill="rgb(225,111,53)"/><text x="18.6275%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,791 samples, 0.15%)</title><rect x="18.3797%" y="117" width="0.1507%" height="15" fill="rgb(238,160,17)"/><text x="18.6297%" y="127.50"></text></g><g><title>death_checking (254,383 samples, 0.48%)</title><rect x="18.1702%" y="149" width="0.4806%" height="15" fill="rgb(214,148,48)"/><text x="18.4202%" y="159.50"></text></g><g><title>lint_levels (63,731 samples, 0.12%)</title><rect x="18.5304%" y="133" width="0.1204%" height="15" fill="rgb(232,36,49)"/><text x="18.7804%" y="143.50"></text></g><g><title>param_env (59,171 samples, 0.11%)</title><rect x="19.0934%" y="117" width="0.1118%" height="15" fill="rgb(209,103,24)"/><text x="19.3434%" y="127.50"></text></g><g><title>trait_impls_of (76,211 samples, 0.14%)</title><rect x="19.2052%" y="117" width="0.1440%" height="15" fill="rgb(229,88,8)"/><text x="19.4552%" y="127.50"></text></g><g><title>crate_lints (829,599 samples, 1.57%)</title><rect x="18.6535%" y="133" width="1.5673%" height="15" fill="rgb(213,181,19)"/><text x="18.9035%" y="143.50"></text></g><g><title>type_of (461,374 samples, 0.87%)</title><rect x="19.3491%" y="117" width="0.8716%" height="15" fill="rgb(254,191,54)"/><text x="19.5991%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (379,924 samples, 0.72%)</title><rect x="19.5030%" y="101" width="0.7178%" height="15" fill="rgb(241,83,37)"/><text x="19.7530%" y="111.50"></text></g><g><title>lint_checking (904,160 samples, 1.71%)</title><rect x="18.6508%" y="149" width="1.7081%" height="15" fill="rgb(233,36,39)"/><text x="18.9008%" y="159.50"></text></g><g><title>module_lints (73,151 samples, 0.14%)</title><rect x="20.2208%" y="133" width="0.1382%" height="15" fill="rgb(226,3,54)"/><text x="20.4708%" y="143.50"></text></g><g><title>lint_mod (71,551 samples, 0.14%)</title><rect x="20.2238%" y="117" width="0.1352%" height="15" fill="rgb(245,192,40)"/><text x="20.4738%" y="127.50"></text></g><g><title>privacy_access_levels (77,991 samples, 0.15%)</title><rect x="20.3590%" y="149" width="0.1473%" height="15" fill="rgb(238,167,29)"/><text x="20.6090%" y="159.50"></text></g><g><title>privacy_checking_modules (133,451 samples, 0.25%)</title><rect x="20.5063%" y="149" width="0.2521%" height="15" fill="rgb(232,182,51)"/><text x="20.7563%" y="159.50"></text></g><g><title>check_mod_privacy (131,951 samples, 0.25%)</title><rect x="20.5091%" y="133" width="0.2493%" height="15" fill="rgb(231,60,39)"/><text x="20.7591%" y="143.50"></text></g><g><title>misc_checking_3 (1,441,096 samples, 2.72%)</title><rect x="18.0504%" y="165" width="2.7225%" height="15" fill="rgb(208,69,12)"/><text x="18.3004%" y="175.50">mi..</text></g><g><title>is_copy_raw (158,152 samples, 0.30%)</title><rect x="21.0426%" y="117" width="0.2988%" height="15" fill="rgb(235,93,37)"/><text x="21.2926%" y="127.50"></text></g><g><title>evaluate_obligation (127,931 samples, 0.24%)</title><rect x="21.0997%" y="101" width="0.2417%" height="15" fill="rgb(213,116,39)"/><text x="21.3497%" y="111.50"></text></g><g><title>param_env (112,512 samples, 0.21%)</title><rect x="21.3414%" y="117" width="0.2126%" height="15" fill="rgb(222,207,29)"/><text x="21.5914%" y="127.50"></text></g><g><title>impl_parent (1,536,304 samples, 2.90%)</title><rect x="26.8442%" y="101" width="2.9024%" height="15" fill="rgb(206,96,30)"/><text x="27.0942%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (765,786 samples, 1.45%)</title><rect x="28.2999%" y="85" width="1.4467%" height="15" fill="rgb(218,138,4)"/><text x="28.5499%" y="95.50"></text></g><g><title>impl_trait_ref (3,197,306 samples, 6.04%)</title><rect x="29.7466%" y="101" width="6.0404%" height="15" fill="rgb(250,191,14)"/><text x="29.9966%" y="111.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,490,287 samples, 4.70%)</title><rect x="31.0823%" y="85" width="4.7047%" height="15" fill="rgb(239,60,40)"/><text x="31.3323%" y="95.50">metad..</text></g><g><title>coherent_trait (8,303,151 samples, 15.69%)</title><rect x="20.8753%" y="133" width="15.6864%" height="15" fill="rgb(206,27,48)"/><text x="21.1253%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (7,943,917 samples, 15.01%)</title><rect x="21.5539%" y="117" width="15.0077%" height="15" fill="rgb(225,35,8)"/><text x="21.8039%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (410,034 samples, 0.77%)</title><rect x="35.7870%" y="101" width="0.7746%" height="15" fill="rgb(250,213,24)"/><text x="36.0370%" y="111.50"></text></g><g><title>implementations_of_trait (128,360 samples, 0.24%)</title><rect x="36.3191%" y="85" width="0.2425%" height="15" fill="rgb(247,123,22)"/><text x="36.5691%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (118,220 samples, 0.22%)</title><rect x="36.3383%" y="69" width="0.2233%" height="15" fill="rgb(231,138,38)"/><text x="36.5883%" y="79.50"></text></g><g><title>coherence_checking (8,362,021 samples, 15.80%)</title><rect x="20.8393%" y="149" width="15.7976%" height="15" fill="rgb(231,145,46)"/><text x="21.0893%" y="159.50">coherence_checking</text></g><g><title>associated_item (240,691 samples, 0.45%)</title><rect x="41.3088%" y="85" width="0.4547%" height="15" fill="rgb(251,118,11)"/><text x="41.5588%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (204,371 samples, 0.39%)</title><rect x="41.3775%" y="69" width="0.3861%" height="15" fill="rgb(217,147,25)"/><text x="41.6275%" y="79.50"></text></g><g><title>associated_items (304,494 samples, 0.58%)</title><rect x="41.1975%" y="101" width="0.5753%" height="15" fill="rgb(247,81,37)"/><text x="41.4475%" y="111.50"></text></g><g><title>generics_of (90,941 samples, 0.17%)</title><rect x="42.8636%" y="85" width="0.1718%" height="15" fill="rgb(209,12,38)"/><text x="43.1136%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (73,081 samples, 0.14%)</title><rect x="42.8973%" y="69" width="0.1381%" height="15" fill="rgb(227,1,9)"/><text x="43.1473%" y="79.50"></text></g><g><title>impl_item_implementor_ids (61,350 samples, 0.12%)</title><rect x="43.0354%" y="85" width="0.1159%" height="15" fill="rgb(248,47,43)"/><text x="43.2854%" y="95.50"></text></g><g><title>associated_items (53,880 samples, 0.10%)</title><rect x="43.0495%" y="69" width="0.1018%" height="15" fill="rgb(221,10,30)"/><text x="43.2995%" y="79.50"></text></g><g><title>predicates_of (172,722 samples, 0.33%)</title><rect x="43.2211%" y="85" width="0.3263%" height="15" fill="rgb(210,229,1)"/><text x="43.4711%" y="95.50"></text></g><g><title>predicates_defined_on (95,030 samples, 0.18%)</title><rect x="43.3678%" y="69" width="0.1795%" height="15" fill="rgb(222,148,37)"/><text x="43.6178%" y="79.50"></text></g><g><title>specializes (541,156 samples, 1.02%)</title><rect x="43.5474%" y="85" width="1.0224%" height="15" fill="rgb(234,67,33)"/><text x="43.7974%" y="95.50"></text></g><g><title>param_env (342,363 samples, 0.65%)</title><rect x="43.9229%" y="69" width="0.6468%" height="15" fill="rgb(247,98,35)"/><text x="44.1729%" y="79.50"></text></g><g><title>def_span (195,221 samples, 0.37%)</title><rect x="44.2009%" y="53" width="0.3688%" height="15" fill="rgb(247,138,52)"/><text x="44.4509%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (181,701 samples, 0.34%)</title><rect x="44.2265%" y="37" width="0.3433%" height="15" fill="rgb(213,79,30)"/><text x="44.4765%" y="47.50"></text></g><g><title>evaluate_obligation (1,455,826 samples, 2.75%)</title><rect x="41.8457%" y="101" width="2.7504%" height="15" fill="rgb(246,177,23)"/><text x="42.0957%" y="111.50">ev..</text></g><g><title>item_bodies_checking (4,330,278 samples, 8.18%)</title><rect x="36.6808%" y="149" width="8.1808%" height="15" fill="rgb(230,62,27)"/><text x="36.9308%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (4,328,148 samples, 8.18%)</title><rect x="36.6848%" y="133" width="8.1768%" height="15" fill="rgb(216,154,8)"/><text x="36.9348%" y="143.50">typeck_item..</text></g><g><title>typeck (4,308,038 samples, 8.14%)</title><rect x="36.7228%" y="117" width="8.1388%" height="15" fill="rgb(244,35,45)"/><text x="36.9728%" y="127.50">typeck</text></g><g><title>item_types_checking (682,478 samples, 1.29%)</title><rect x="44.8616%" y="149" width="1.2893%" height="15" fill="rgb(251,115,12)"/><text x="45.1116%" y="159.50"></text></g><g><title>check_mod_item_types (680,278 samples, 1.29%)</title><rect x="44.8657%" y="133" width="1.2852%" height="15" fill="rgb(240,54,50)"/><text x="45.1157%" y="143.50"></text></g><g><title>fn_sig (86,790 samples, 0.16%)</title><rect x="46.3625%" y="117" width="0.1640%" height="15" fill="rgb(233,84,52)"/><text x="46.6125%" y="127.50"></text></g><g><title>named_region_map (75,220 samples, 0.14%)</title><rect x="46.5964%" y="101" width="0.1421%" height="15" fill="rgb(207,117,47)"/><text x="46.8464%" y="111.50"></text></g><g><title>resolve_lifetimes (65,540 samples, 0.12%)</title><rect x="46.6147%" y="85" width="0.1238%" height="15" fill="rgb(249,43,39)"/><text x="46.8647%" y="95.50"></text></g><g><title>generics_of (121,041 samples, 0.23%)</title><rect x="46.5264%" y="117" width="0.2287%" height="15" fill="rgb(209,38,44)"/><text x="46.7764%" y="127.50"></text></g><g><title>impl_trait_ref (76,040 samples, 0.14%)</title><rect x="46.7551%" y="117" width="0.1437%" height="15" fill="rgb(236,212,23)"/><text x="47.0051%" y="127.50"></text></g><g><title>predicates_of (142,520 samples, 0.27%)</title><rect x="46.8988%" y="117" width="0.2692%" height="15" fill="rgb(242,79,21)"/><text x="47.1488%" y="127.50"></text></g><g><title>predicates_defined_on (119,800 samples, 0.23%)</title><rect x="46.9417%" y="101" width="0.2263%" height="15" fill="rgb(211,96,35)"/><text x="47.1917%" y="111.50"></text></g><g><title>type_collecting (612,116 samples, 1.16%)</title><rect x="46.1536%" y="149" width="1.1564%" height="15" fill="rgb(253,215,40)"/><text x="46.4036%" y="159.50"></text></g><g><title>collect_mod_item_types (606,016 samples, 1.14%)</title><rect x="46.1651%" y="133" width="1.1449%" height="15" fill="rgb(211,81,21)"/><text x="46.4151%" y="143.50"></text></g><g><title>type_of (75,172 samples, 0.14%)</title><rect x="47.1680%" y="117" width="0.1420%" height="15" fill="rgb(208,190,38)"/><text x="47.4180%" y="127.50"></text></g><g><title>evaluate_obligation (89,292 samples, 0.17%)</title><rect x="48.1004%" y="117" width="0.1687%" height="15" fill="rgb(235,213,38)"/><text x="48.3504%" y="127.50"></text></g><g><title>param_env (95,823 samples, 0.18%)</title><rect x="48.3281%" y="117" width="0.1810%" height="15" fill="rgb(237,122,38)"/><text x="48.5781%" y="127.50"></text></g><g><title>check_impl_item_well_formed (676,949 samples, 1.28%)</title><rect x="47.4219%" y="133" width="1.2789%" height="15" fill="rgb(244,218,35)"/><text x="47.6719%" y="143.50"></text></g><g><title>region_scope_tree (101,441 samples, 0.19%)</title><rect x="48.5091%" y="117" width="0.1916%" height="15" fill="rgb(240,68,47)"/><text x="48.7591%" y="127.50"></text></g><g><title>evaluate_obligation (185,461 samples, 0.35%)</title><rect x="49.5115%" y="117" width="0.3504%" height="15" fill="rgb(210,16,53)"/><text x="49.7615%" y="127.50"></text></g><g><title>param_env (66,120 samples, 0.12%)</title><rect x="49.9397%" y="117" width="0.1249%" height="15" fill="rgb(235,124,12)"/><text x="50.1897%" y="127.50"></text></g><g><title>predicates_of (88,170 samples, 0.17%)</title><rect x="50.0647%" y="117" width="0.1666%" height="15" fill="rgb(224,169,11)"/><text x="50.3147%" y="127.50"></text></g><g><title>predicates_defined_on (60,910 samples, 0.12%)</title><rect x="50.1162%" y="101" width="0.1151%" height="15" fill="rgb(250,166,2)"/><text x="50.3662%" y="111.50"></text></g><g><title>analysis (21,091,612 samples, 39.85%)</title><rect x="10.4705%" y="181" width="39.8464%" height="15" fill="rgb(242,216,29)"/><text x="10.7205%" y="191.50">analysis</text></g><g><title>type_check_crate (15,638,322 samples, 29.54%)</title><rect x="20.7729%" y="165" width="29.5440%" height="15" fill="rgb(230,116,27)"/><text x="21.0229%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,590,138 samples, 3.00%)</title><rect x="47.3129%" y="149" width="3.0041%" height="15" fill="rgb(228,99,48)"/><text x="47.5629%" y="159.50">wf_..</text></g><g><title>check_item_well_formed (855,497 samples, 1.62%)</title><rect x="48.7008%" y="133" width="1.6162%" height="15" fill="rgb(253,11,6)"/><text x="48.9508%" y="143.50"></text></g><g><title>codegen_module (208,632 samples, 0.39%)</title><rect x="51.0635%" y="165" width="0.3941%" height="15" fill="rgb(247,143,39)"/><text x="51.3135%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (74,501 samples, 0.14%)</title><rect x="51.4591%" y="165" width="0.1407%" height="15" fill="rgb(236,97,10)"/><text x="51.7091%" y="175.50"></text></g><g><title>codegen_crate (681,217 samples, 1.29%)</title><rect x="50.3381%" y="181" width="1.2870%" height="15" fill="rgb(233,208,19)"/><text x="50.5881%" y="191.50"></text></g><g><title>codegen_module_optimize (1,962,301 samples, 3.71%)</title><rect x="51.6250%" y="181" width="3.7072%" height="15" fill="rgb(216,164,2)"/><text x="51.8750%" y="191.50">code..</text></g><g><title>LLVM_module_optimize (370,624 samples, 0.70%)</title><rect x="54.6321%" y="165" width="0.7002%" height="15" fill="rgb(220,129,5)"/><text x="54.8821%" y="175.50"></text></g><g><title>LLVM_lto_optimize (176,152 samples, 0.33%)</title><rect x="55.9434%" y="165" width="0.3328%" height="15" fill="rgb(242,17,10)"/><text x="56.1934%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,094,243 samples, 3.96%)</title><rect x="56.2762%" y="165" width="3.9565%" height="15" fill="rgb(242,107,0)"/><text x="56.5262%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,064,223 samples, 3.90%)</title><rect x="56.3329%" y="149" width="3.8997%" height="15" fill="rgb(251,28,31)"/><text x="56.5829%" y="159.50">LLVM..</text></g><g><title>codegen_module_perform_lto (2,630,649 samples, 4.97%)</title><rect x="55.3322%" y="181" width="4.9698%" height="15" fill="rgb(233,223,10)"/><text x="55.5822%" y="191.50">codege..</text></g><g><title>AST_validation (99,131 samples, 0.19%)</title><rect x="60.7238%" y="165" width="0.1873%" height="15" fill="rgb(215,21,27)"/><text x="60.9738%" y="175.50"></text></g><g><title>crate_injection (79,630 samples, 0.15%)</title><rect x="60.9899%" y="165" width="0.1504%" height="15" fill="rgb(232,23,21)"/><text x="61.2399%" y="175.50"></text></g><g><title>metadata_load_macro (81,180 samples, 0.15%)</title><rect x="75.5458%" y="133" width="0.1534%" height="15" fill="rgb(244,5,23)"/><text x="75.7958%" y="143.50"></text></g><g><title>macro_expand_crate (7,896,737 samples, 14.92%)</title><rect x="61.1403%" y="165" width="14.9186%" height="15" fill="rgb(226,81,46)"/><text x="61.3903%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (7,875,316 samples, 14.88%)</title><rect x="61.1808%" y="149" width="14.8781%" height="15" fill="rgb(247,70,30)"/><text x="61.4308%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (190,422 samples, 0.36%)</title><rect x="75.6991%" y="133" width="0.3597%" height="15" fill="rgb(212,68,19)"/><text x="75.9491%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (153,861 samples, 0.29%)</title><rect x="76.0755%" y="165" width="0.2907%" height="15" fill="rgb(240,187,13)"/><text x="76.3255%" y="175.50"></text></g><g><title>finalize_macro_resolutions (238,422 samples, 0.45%)</title><rect x="76.4300%" y="149" width="0.4504%" height="15" fill="rgb(223,113,26)"/><text x="76.6800%" y="159.50"></text></g><g><title>late_resolve_crate (770,089 samples, 1.45%)</title><rect x="76.8804%" y="149" width="1.4549%" height="15" fill="rgb(206,192,2)"/><text x="77.1304%" y="159.50"></text></g><g><title>configure_and_expand (9,601,515 samples, 18.14%)</title><rect x="60.3021%" y="181" width="18.1393%" height="15" fill="rgb(241,108,4)"/><text x="60.5521%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,098,402 samples, 2.08%)</title><rect x="76.3662%" y="165" width="2.0751%" height="15" fill="rgb(247,173,49)"/><text x="76.6162%" y="175.50">r..</text></g><g><title>early_lint_checks (104,561 samples, 0.20%)</title><rect x="78.5603%" y="181" width="0.1975%" height="15" fill="rgb(224,114,35)"/><text x="78.8103%" y="191.50"></text></g><g><title>free_global_ctxt (1,652,598 samples, 3.12%)</title><rect x="78.7578%" y="181" width="3.1221%" height="15" fill="rgb(245,159,27)"/><text x="79.0078%" y="191.50">fre..</text></g><g><title>crate_hash (66,121 samples, 0.12%)</title><rect x="82.7478%" y="165" width="0.1249%" height="15" fill="rgb(245,172,44)"/><text x="82.9978%" y="175.50"></text></g><g><title>exported_symbols (81,220 samples, 0.15%)</title><rect x="82.8989%" y="165" width="0.1534%" height="15" fill="rgb(236,23,11)"/><text x="83.1489%" y="175.50"></text></g><g><title>reachable_non_generics (69,110 samples, 0.13%)</title><rect x="82.9217%" y="149" width="0.1306%" height="15" fill="rgb(205,117,38)"/><text x="83.1717%" y="159.50"></text></g><g><title>reachable_set (58,870 samples, 0.11%)</title><rect x="82.9411%" y="133" width="0.1112%" height="15" fill="rgb(237,72,25)"/><text x="83.1911%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (550,336 samples, 1.04%)</title><rect x="84.4489%" y="149" width="1.0397%" height="15" fill="rgb(244,70,9)"/><text x="84.6989%" y="159.50"></text></g><g><title>optimized_mir (1,261,443 samples, 2.38%)</title><rect x="83.1252%" y="165" width="2.3831%" height="15" fill="rgb(217,125,39)"/><text x="83.3752%" y="175.50">op..</text></g><g><title>generate_crate_metadata (1,938,432 samples, 3.66%)</title><rect x="81.8799%" y="181" width="3.6621%" height="15" fill="rgb(235,36,10)"/><text x="82.1299%" y="191.50">gene..</text></g><g><title>hir_lowering (1,202,613 samples, 2.27%)</title><rect x="85.5420%" y="181" width="2.2720%" height="15" fill="rgb(251,123,47)"/><text x="85.7920%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (3,186,365 samples, 6.02%)</title><rect x="87.8347%" y="165" width="6.0197%" height="15" fill="rgb(221,13,13)"/><text x="88.0847%" y="175.50">finish_o..</text></g><g><title>link_crate (605,637 samples, 1.14%)</title><rect x="93.8544%" y="165" width="1.1442%" height="15" fill="rgb(238,131,9)"/><text x="94.1044%" y="175.50"></text></g><g><title>link_binary (601,547 samples, 1.14%)</title><rect x="93.8621%" y="149" width="1.1364%" height="15" fill="rgb(211,50,8)"/><text x="94.1121%" y="159.50"></text></g><g><title>link_rlib (367,214 samples, 0.69%)</title><rect x="94.3048%" y="133" width="0.6937%" height="15" fill="rgb(245,182,24)"/><text x="94.5548%" y="143.50"></text></g><g><title>link (3,810,662 samples, 7.20%)</title><rect x="87.8140%" y="181" width="7.1991%" height="15" fill="rgb(242,14,37)"/><text x="88.0640%" y="191.50">link</text></g><g><title>parse_crate (1,491,266 samples, 2.82%)</title><rect x="95.0132%" y="181" width="2.8173%" height="15" fill="rgb(246,228,12)"/><text x="95.2632%" y="191.50">pa..</text></g><g><title>prepare_outputs (268,383 samples, 0.51%)</title><rect x="97.8484%" y="181" width="0.5070%" height="15" fill="rgb(213,55,15)"/><text x="98.0984%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (465,515 samples, 0.88%)</title><rect x="98.3554%" y="181" width="0.8795%" height="15" fill="rgb(209,9,3)"/><text x="98.6054%" y="191.50"></text></g><g><title>setup_global_ctxt (101,302 samples, 0.19%)</title><rect x="99.2366%" y="181" width="0.1914%" height="15" fill="rgb(230,59,30)"/><text x="99.4866%" y="191.50"></text></g><g><title>all (52,932,251 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (52,932,251 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (302,783 samples, 0.57%)</title><rect x="99.4280%" y="181" width="0.5720%" height="15" fill="rgb(232,18,1)"/><text x="99.6780%" y="191.50"></text></g></svg></svg>