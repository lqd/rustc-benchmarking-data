<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (89,333,114 samples, 16.38%)</title><rect x="0.1072%" y="197" width="16.3775%" height="15" fill="rgb(227,0,7)"/><text x="0.3572%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (701,757 samples, 0.13%)</title><rect x="16.3560%" y="181" width="0.1287%" height="15" fill="rgb(217,0,24)"/><text x="16.6060%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (681,597 samples, 0.12%)</title><rect x="16.3597%" y="165" width="0.1250%" height="15" fill="rgb(221,193,54)"/><text x="16.6097%" y="175.50"></text></g><g><title>is_copy_raw (1,078,720 samples, 0.20%)</title><rect x="18.1483%" y="69" width="0.1978%" height="15" fill="rgb(248,212,6)"/><text x="18.3983%" y="79.50"></text></g><g><title>evaluate_obligation (987,870 samples, 0.18%)</title><rect x="18.1650%" y="53" width="0.1811%" height="15" fill="rgb(208,68,35)"/><text x="18.4150%" y="63.50"></text></g><g><title>needs_drop_raw (1,336,363 samples, 0.24%)</title><rect x="18.1018%" y="85" width="0.2450%" height="15" fill="rgb(232,128,0)"/><text x="18.3518%" y="95.50"></text></g><g><title>specialization_graph_of (1,547,269 samples, 0.28%)</title><rect x="18.4673%" y="69" width="0.2837%" height="15" fill="rgb(207,160,47)"/><text x="18.7173%" y="79.50"></text></g><g><title>impl_trait_ref (833,161 samples, 0.15%)</title><rect x="18.5982%" y="53" width="0.1527%" height="15" fill="rgb(228,23,34)"/><text x="18.8482%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (749,610 samples, 0.14%)</title><rect x="18.6135%" y="37" width="0.1374%" height="15" fill="rgb(218,30,26)"/><text x="18.8635%" y="47.50"></text></g><g><title>resolve_instance (2,245,968 samples, 0.41%)</title><rect x="18.3468%" y="85" width="0.4118%" height="15" fill="rgb(220,122,19)"/><text x="18.5968%" y="95.50"></text></g><g><title>mir_const (6,188,304 samples, 1.13%)</title><rect x="17.7009%" y="133" width="1.1345%" height="15" fill="rgb(250,228,42)"/><text x="17.9509%" y="143.50"></text></g><g><title>unsafety_check_result (5,628,497 samples, 1.03%)</title><rect x="17.8036%" y="117" width="1.0319%" height="15" fill="rgb(240,193,28)"/><text x="18.0536%" y="127.50"></text></g><g><title>mir_built (5,228,655 samples, 0.96%)</title><rect x="17.8769%" y="101" width="0.9586%" height="15" fill="rgb(216,20,37)"/><text x="18.1269%" y="111.50"></text></g><g><title>mir_promoted (6,576,018 samples, 1.21%)</title><rect x="17.6342%" y="149" width="1.2056%" height="15" fill="rgb(206,188,39)"/><text x="17.8842%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,572,088 samples, 0.29%)</title><rect x="18.9954%" y="149" width="0.2882%" height="15" fill="rgb(217,207,13)"/><text x="19.2454%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,999,737 samples, 2.75%)</title><rect x="16.5342%" y="181" width="2.7499%" height="15" fill="rgb(231,73,38)"/><text x="16.7842%" y="191.50">MI..</text></g><g><title>mir_borrowck (14,937,494 samples, 2.74%)</title><rect x="16.5456%" y="165" width="2.7385%" height="15" fill="rgb(225,20,46)"/><text x="16.7956%" y="175.50">mi..</text></g><g><title>misc_checking_1 (1,154,422 samples, 0.21%)</title><rect x="19.3368%" y="181" width="0.2116%" height="15" fill="rgb(210,31,41)"/><text x="19.5868%" y="191.50"></text></g><g><title>privacy_checking_modules (707,358 samples, 0.13%)</title><rect x="19.8007%" y="165" width="0.1297%" height="15" fill="rgb(221,200,47)"/><text x="20.0507%" y="175.50"></text></g><g><title>check_mod_privacy (704,048 samples, 0.13%)</title><rect x="19.8013%" y="149" width="0.1291%" height="15" fill="rgb(226,26,5)"/><text x="20.0513%" y="159.50"></text></g><g><title>misc_checking_3 (1,649,939 samples, 0.30%)</title><rect x="19.6298%" y="181" width="0.3025%" height="15" fill="rgb(249,33,26)"/><text x="19.8798%" y="191.50"></text></g><g><title>adt_dtorck_constraint (730,097 samples, 0.13%)</title><rect x="22.0713%" y="101" width="0.1338%" height="15" fill="rgb(235,183,28)"/><text x="22.3213%" y="111.50"></text></g><g><title>dropck_outlives (971,290 samples, 0.18%)</title><rect x="22.0302%" y="117" width="0.1781%" height="15" fill="rgb(221,5,38)"/><text x="22.2802%" y="127.50"></text></g><g><title>evaluate_obligation (1,767,157 samples, 0.32%)</title><rect x="22.2083%" y="117" width="0.3240%" height="15" fill="rgb(247,18,42)"/><text x="22.4583%" y="127.50"></text></g><g><title>method_autoderef_steps (1,057,543 samples, 0.19%)</title><rect x="22.6381%" y="117" width="0.1939%" height="15" fill="rgb(241,131,45)"/><text x="22.8881%" y="127.50"></text></g><g><title>item_bodies_checking (16,072,039 samples, 2.95%)</title><rect x="19.9744%" y="165" width="2.9465%" height="15" fill="rgb(249,31,29)"/><text x="20.2244%" y="175.50">it..</text></g><g><title>typeck_item_bodies (16,070,379 samples, 2.95%)</title><rect x="19.9747%" y="149" width="2.9462%" height="15" fill="rgb(225,111,53)"/><text x="20.2247%" y="159.50">ty..</text></g><g><title>typeck (16,021,677 samples, 2.94%)</title><rect x="19.9836%" y="133" width="2.9373%" height="15" fill="rgb(238,160,17)"/><text x="20.2336%" y="143.50">ty..</text></g><g><title>item_types_checking (784,159 samples, 0.14%)</title><rect x="22.9209%" y="165" width="0.1438%" height="15" fill="rgb(214,148,48)"/><text x="23.1709%" y="175.50"></text></g><g><title>check_mod_item_types (780,529 samples, 0.14%)</title><rect x="22.9216%" y="149" width="0.1431%" height="15" fill="rgb(232,36,49)"/><text x="23.1716%" y="159.50"></text></g><g><title>explicit_predicates_of (638,878 samples, 0.12%)</title><rect x="23.2872%" y="101" width="0.1171%" height="15" fill="rgb(209,103,24)"/><text x="23.5372%" y="111.50"></text></g><g><title>predicates_of (773,890 samples, 0.14%)</title><rect x="23.2655%" y="133" width="0.1419%" height="15" fill="rgb(229,88,8)"/><text x="23.5155%" y="143.50"></text></g><g><title>predicates_defined_on (729,160 samples, 0.13%)</title><rect x="23.2737%" y="117" width="0.1337%" height="15" fill="rgb(213,181,19)"/><text x="23.5237%" y="127.50"></text></g><g><title>type_collecting (2,170,755 samples, 0.40%)</title><rect x="23.0650%" y="165" width="0.3980%" height="15" fill="rgb(254,191,54)"/><text x="23.3150%" y="175.50"></text></g><g><title>collect_mod_item_types (2,153,255 samples, 0.39%)</title><rect x="23.0682%" y="149" width="0.3948%" height="15" fill="rgb(241,83,37)"/><text x="23.3182%" y="159.50"></text></g><g><title>evaluate_obligation (981,543 samples, 0.18%)</title><rect x="24.0727%" y="133" width="0.1799%" height="15" fill="rgb(233,36,39)"/><text x="24.3227%" y="143.50"></text></g><g><title>check_impl_item_well_formed (5,005,496 samples, 0.92%)</title><rect x="23.4979%" y="149" width="0.9177%" height="15" fill="rgb(226,3,54)"/><text x="23.7479%" y="159.50"></text></g><g><title>check_item_well_formed (2,111,211 samples, 0.39%)</title><rect x="24.4156%" y="149" width="0.3870%" height="15" fill="rgb(245,192,40)"/><text x="24.6656%" y="159.50"></text></g><g><title>evaluate_obligation (867,368 samples, 0.16%)</title><rect x="25.0204%" y="133" width="0.1590%" height="15" fill="rgb(238,167,29)"/><text x="25.2704%" y="143.50"></text></g><g><title>analysis (47,922,123 samples, 8.79%)</title><rect x="16.4846%" y="197" width="8.7856%" height="15" fill="rgb(232,182,51)"/><text x="16.7346%" y="207.50">analysis</text></g><g><title>type_check_crate (29,116,624 samples, 5.34%)</title><rect x="19.9322%" y="181" width="5.3380%" height="15" fill="rgb(231,60,39)"/><text x="20.1822%" y="191.50">type_ch..</text></g><g><title>wf_checking (9,855,349 samples, 1.81%)</title><rect x="23.4634%" y="165" width="1.8068%" height="15" fill="rgb(208,69,12)"/><text x="23.7134%" y="175.50">w..</text></g><g><title>check_trait_item_well_formed (2,550,279 samples, 0.47%)</title><rect x="24.8027%" y="149" width="0.4675%" height="15" fill="rgb(235,93,37)"/><text x="25.0527%" y="159.50"></text></g><g><title>layout_of (1,022,569 samples, 0.19%)</title><rect x="28.3199%" y="149" width="0.1875%" height="15" fill="rgb(213,116,39)"/><text x="28.5699%" y="159.50"></text></g><g><title>predicates_of (650,281 samples, 0.12%)</title><rect x="28.7218%" y="133" width="0.1192%" height="15" fill="rgb(222,207,29)"/><text x="28.9718%" y="143.50"></text></g><g><title>param_env (1,829,893 samples, 0.34%)</title><rect x="28.5074%" y="149" width="0.3355%" height="15" fill="rgb(206,96,30)"/><text x="28.7574%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,196,962 samples, 0.95%)</title><rect x="27.9555%" y="165" width="0.9528%" height="15" fill="rgb(218,138,4)"/><text x="28.2055%" y="175.50"></text></g><g><title>codegen_module (18,955,681 samples, 3.48%)</title><rect x="25.5473%" y="181" width="3.4752%" height="15" fill="rgb(250,191,14)"/><text x="25.7973%" y="191.50">cod..</text></g><g><title>item_attrs (933,372 samples, 0.17%)</title><rect x="29.2346%" y="117" width="0.1711%" height="15" fill="rgb(239,60,40)"/><text x="29.4846%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (902,002 samples, 0.17%)</title><rect x="29.2403%" y="101" width="0.1654%" height="15" fill="rgb(206,27,48)"/><text x="29.4903%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,420,336 samples, 0.26%)</title><rect x="29.1975%" y="133" width="0.2604%" height="15" fill="rgb(225,35,8)"/><text x="29.4475%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,186,502 samples, 0.22%)</title><rect x="29.6306%" y="117" width="0.2175%" height="15" fill="rgb(250,213,24)"/><text x="29.8806%" y="127.50"></text></g><g><title>optimized_mir (2,028,631 samples, 0.37%)</title><rect x="29.5352%" y="133" width="0.3719%" height="15" fill="rgb(247,123,22)"/><text x="29.7852%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,452,945 samples, 0.27%)</title><rect x="29.9924%" y="117" width="0.2664%" height="15" fill="rgb(231,138,38)"/><text x="30.2424%" y="127.50"></text></g><g><title>impl_parent (1,113,116 samples, 0.20%)</title><rect x="30.6072%" y="101" width="0.2041%" height="15" fill="rgb(231,145,46)"/><text x="30.8572%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (714,604 samples, 0.13%)</title><rect x="30.6803%" y="85" width="0.1310%" height="15" fill="rgb(251,118,11)"/><text x="30.9303%" y="95.50"></text></g><g><title>specialization_graph_of (6,437,494 samples, 1.18%)</title><rect x="30.3305%" y="117" width="1.1802%" height="15" fill="rgb(217,147,25)"/><text x="30.5805%" y="127.50"></text></g><g><title>impl_trait_ref (3,814,902 samples, 0.70%)</title><rect x="30.8113%" y="101" width="0.6994%" height="15" fill="rgb(247,81,37)"/><text x="31.0613%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,201,232 samples, 0.59%)</title><rect x="30.9238%" y="85" width="0.5869%" height="15" fill="rgb(209,12,38)"/><text x="31.1738%" y="95.50"></text></g><g><title>resolve_instance (8,972,103 samples, 1.64%)</title><rect x="29.9071%" y="133" width="1.6449%" height="15" fill="rgb(227,1,9)"/><text x="30.1571%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (14,058,466 samples, 2.58%)</title><rect x="29.0283%" y="149" width="2.5773%" height="15" fill="rgb(248,47,43)"/><text x="29.2783%" y="159.50">mo..</text></g><g><title>monomorphization_collector (14,084,947 samples, 2.58%)</title><rect x="29.0280%" y="165" width="2.5822%" height="15" fill="rgb(221,10,30)"/><text x="29.2780%" y="175.50">mo..</text></g><g><title>assert_symbols_are_distinct (882,400 samples, 0.16%)</title><rect x="31.6108%" y="149" width="0.1618%" height="15" fill="rgb(210,229,1)"/><text x="31.8608%" y="159.50"></text></g><g><title>symbol_name (798,709 samples, 0.15%)</title><rect x="31.6261%" y="133" width="0.1464%" height="15" fill="rgb(222,148,37)"/><text x="31.8761%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (15,338,661 samples, 2.81%)</title><rect x="29.0237%" y="181" width="2.8120%" height="15" fill="rgb(234,67,33)"/><text x="29.2737%" y="191.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,230,724 samples, 0.23%)</title><rect x="31.6101%" y="165" width="0.2256%" height="15" fill="rgb(247,98,35)"/><text x="31.8601%" y="175.50"></text></g><g><title>codegen_crate (35,877,079 samples, 6.58%)</title><rect x="25.2714%" y="197" width="6.5774%" height="15" fill="rgb(247,138,52)"/><text x="25.5214%" y="207.50">codegen_c..</text></g><g><title>codegen_module_optimize (148,600,911 samples, 27.24%)</title><rect x="31.8488%" y="197" width="27.2430%" height="15" fill="rgb(213,79,30)"/><text x="32.0988%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (137,970,164 samples, 25.29%)</title><rect x="33.7977%" y="181" width="25.2941%" height="15" fill="rgb(246,177,23)"/><text x="34.0477%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (38,437,028 samples, 7.05%)</title><rect x="60.3059%" y="181" width="7.0467%" height="15" fill="rgb(230,62,27)"/><text x="60.5559%" y="191.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (68,213,054 samples, 12.51%)</title><rect x="67.3525%" y="181" width="12.5055%" height="15" fill="rgb(216,154,8)"/><text x="67.6025%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (66,805,346 samples, 12.25%)</title><rect x="67.6106%" y="165" width="12.2474%" height="15" fill="rgb(244,35,45)"/><text x="67.8606%" y="175.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (3,711,623 samples, 0.68%)</title><rect x="79.8580%" y="181" width="0.6805%" height="15" fill="rgb(251,115,12)"/><text x="80.1080%" y="191.50"></text></g><g><title>codegen_module_perform_lto (117,283,502 samples, 21.50%)</title><rect x="59.0918%" y="197" width="21.5016%" height="15" fill="rgb(240,54,50)"/><text x="59.3418%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,424,158 samples, 0.44%)</title><rect x="82.9605%" y="149" width="0.4444%" height="15" fill="rgb(233,84,52)"/><text x="83.2105%" y="159.50"></text></g><g><title>metadata_register_crate (863,657 samples, 0.16%)</title><rect x="83.2466%" y="133" width="0.1583%" height="15" fill="rgb(207,117,47)"/><text x="83.4966%" y="143.50"></text></g><g><title>macro_expand_crate (15,057,358 samples, 2.76%)</title><rect x="80.6701%" y="181" width="2.7605%" height="15" fill="rgb(249,43,39)"/><text x="80.9201%" y="191.50">ma..</text></g><g><title>expand_crate (15,041,907 samples, 2.76%)</title><rect x="80.6729%" y="165" width="2.7576%" height="15" fill="rgb(209,38,44)"/><text x="80.9229%" y="175.50">ex..</text></g><g><title>late_resolve_crate (1,685,109 samples, 0.31%)</title><rect x="83.5344%" y="165" width="0.3089%" height="15" fill="rgb(236,212,23)"/><text x="83.7844%" y="175.50"></text></g><g><title>configure_and_expand (17,841,359 samples, 3.27%)</title><rect x="80.5934%" y="197" width="3.2709%" height="15" fill="rgb(242,79,21)"/><text x="80.8434%" y="207.50">con..</text></g><g><title>resolve_crate (2,098,964 samples, 0.38%)</title><rect x="83.4795%" y="181" width="0.3848%" height="15" fill="rgb(211,96,35)"/><text x="83.7295%" y="191.50"></text></g><g><title>free_global_ctxt (5,904,467 samples, 1.08%)</title><rect x="83.9432%" y="197" width="1.0825%" height="15" fill="rgb(253,215,40)"/><text x="84.1932%" y="207.50"></text></g><g><title>layout_of (612,266 samples, 0.11%)</title><rect x="85.4582%" y="165" width="0.1122%" height="15" fill="rgb(211,81,21)"/><text x="85.7082%" y="175.50"></text></g><g><title>optimized_mir (3,231,834 samples, 0.59%)</title><rect x="85.2352%" y="181" width="0.5925%" height="15" fill="rgb(208,190,38)"/><text x="85.4852%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,403,297 samples, 0.26%)</title><rect x="85.5704%" y="165" width="0.2573%" height="15" fill="rgb(235,213,38)"/><text x="85.8204%" y="175.50"></text></g><g><title>generate_crate_metadata (4,456,410 samples, 0.82%)</title><rect x="85.0257%" y="197" width="0.8170%" height="15" fill="rgb(237,122,38)"/><text x="85.2757%" y="207.50"></text></g><g><title>hir_lowering (2,910,552 samples, 0.53%)</title><rect x="85.8427%" y="197" width="0.5336%" height="15" fill="rgb(244,218,35)"/><text x="86.0927%" y="207.50"></text></g><g><title>finish_ongoing_codegen (69,380,251 samples, 12.72%)</title><rect x="86.3988%" y="181" width="12.7195%" height="15" fill="rgb(240,68,47)"/><text x="86.6488%" y="191.50">finish_ongoing_code..</text></g><g><title>link_crate (2,335,416 samples, 0.43%)</title><rect x="99.1183%" y="181" width="0.4282%" height="15" fill="rgb(210,16,53)"/><text x="99.3683%" y="191.50"></text></g><g><title>link_binary (2,096,573 samples, 0.38%)</title><rect x="99.1621%" y="165" width="0.3844%" height="15" fill="rgb(235,124,12)"/><text x="99.4121%" y="175.50"></text></g><g><title>link_rlib (1,251,093 samples, 0.23%)</title><rect x="99.3171%" y="149" width="0.2294%" height="15" fill="rgb(224,169,11)"/><text x="99.5671%" y="159.50"></text></g><g><title>link (71,854,559 samples, 13.17%)</title><rect x="86.3763%" y="197" width="13.1731%" height="15" fill="rgb(250,166,2)"/><text x="86.6263%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (1,396,595 samples, 0.26%)</title><rect x="99.6706%" y="197" width="0.2560%" height="15" fill="rgb(242,216,29)"/><text x="99.9206%" y="207.50"></text></g><g><title>all (545,463,623 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (545,463,623 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>