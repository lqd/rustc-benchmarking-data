<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,504,398 samples, 9.55%)</title><rect x="1.2050%" y="261" width="9.5544%" height="15" fill="rgb(227,0,7)"/><text x="1.4550%" y="271.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (110,872 samples, 0.30%)</title><rect x="10.4571%" y="245" width="0.3023%" height="15" fill="rgb(217,0,24)"/><text x="10.7071%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (94,831 samples, 0.26%)</title><rect x="10.5008%" y="229" width="0.2585%" height="15" fill="rgb(221,193,54)"/><text x="10.7508%" y="239.50"></text></g><g><title>explicit_predicates_of (65,651 samples, 0.18%)</title><rect x="16.6587%" y="53" width="0.1790%" height="15" fill="rgb(248,212,6)"/><text x="16.9087%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (65,191 samples, 0.18%)</title><rect x="16.6599%" y="37" width="0.1777%" height="15" fill="rgb(208,68,35)"/><text x="16.9099%" y="47.50"></text></g><g><title>is_copy_raw (104,281 samples, 0.28%)</title><rect x="16.5552%" y="117" width="0.2843%" height="15" fill="rgb(232,128,0)"/><text x="16.8052%" y="127.50"></text></g><g><title>evaluate_obligation (100,411 samples, 0.27%)</title><rect x="16.5658%" y="101" width="0.2738%" height="15" fill="rgb(207,160,47)"/><text x="16.8158%" y="111.50"></text></g><g><title>predicates_of (69,691 samples, 0.19%)</title><rect x="16.6496%" y="85" width="0.1900%" height="15" fill="rgb(228,23,34)"/><text x="16.8996%" y="95.50"></text></g><g><title>predicates_defined_on (67,581 samples, 0.18%)</title><rect x="16.6553%" y="69" width="0.1843%" height="15" fill="rgb(218,30,26)"/><text x="16.9053%" y="79.50"></text></g><g><title>adt_drop_tys (126,692 samples, 0.35%)</title><rect x="16.5246%" y="133" width="0.3454%" height="15" fill="rgb(220,122,19)"/><text x="16.7746%" y="143.50"></text></g><g><title>needs_drop_raw (176,892 samples, 0.48%)</title><rect x="16.4953%" y="149" width="0.4823%" height="15" fill="rgb(250,228,42)"/><text x="16.7453%" y="159.50"></text></g><g><title>is_copy_raw (39,450 samples, 0.11%)</title><rect x="16.8700%" y="133" width="0.1076%" height="15" fill="rgb(240,193,28)"/><text x="17.1200%" y="143.50"></text></g><g><title>resolve_instance (58,490 samples, 0.16%)</title><rect x="16.9775%" y="149" width="0.1595%" height="15" fill="rgb(216,20,37)"/><text x="17.2275%" y="159.50"></text></g><g><title>thir_body (115,341 samples, 0.31%)</title><rect x="17.1479%" y="149" width="0.3145%" height="15" fill="rgb(206,188,39)"/><text x="17.3979%" y="159.50"></text></g><g><title>mir_const (850,200 samples, 2.32%)</title><rect x="15.1510%" y="197" width="2.3180%" height="15" fill="rgb(217,207,13)"/><text x="15.4010%" y="207.50">m..</text></g><g><title>unsafety_check_result (704,739 samples, 1.92%)</title><rect x="15.5476%" y="181" width="1.9214%" height="15" fill="rgb(231,73,38)"/><text x="15.7976%" y="191.50">u..</text></g><g><title>mir_built (621,487 samples, 1.69%)</title><rect x="15.7745%" y="165" width="1.6944%" height="15" fill="rgb(225,20,46)"/><text x="16.0245%" y="175.50"></text></g><g><title>is_freeze_raw (44,450 samples, 0.12%)</title><rect x="17.8259%" y="181" width="0.1212%" height="15" fill="rgb(210,31,41)"/><text x="18.0759%" y="191.50"></text></g><g><title>evaluate_obligation (40,650 samples, 0.11%)</title><rect x="17.8363%" y="165" width="0.1108%" height="15" fill="rgb(221,200,47)"/><text x="18.0863%" y="175.50"></text></g><g><title>mir_const (178,012 samples, 0.49%)</title><rect x="17.9471%" y="181" width="0.4853%" height="15" fill="rgb(226,26,5)"/><text x="18.1971%" y="191.50"></text></g><g><title>unsafety_check_result (124,172 samples, 0.34%)</title><rect x="18.0939%" y="165" width="0.3385%" height="15" fill="rgb(249,33,26)"/><text x="18.3439%" y="175.50"></text></g><g><title>mir_built (93,471 samples, 0.25%)</title><rect x="18.1776%" y="149" width="0.2548%" height="15" fill="rgb(235,183,28)"/><text x="18.4276%" y="159.50"></text></g><g><title>mir_promoted (1,337,836 samples, 3.65%)</title><rect x="14.8462%" y="213" width="3.6475%" height="15" fill="rgb(221,5,38)"/><text x="15.0962%" y="223.50">mir_..</text></g><g><title>mir_const_qualif (375,844 samples, 1.02%)</title><rect x="17.4690%" y="197" width="1.0247%" height="15" fill="rgb(247,18,42)"/><text x="17.7190%" y="207.50"></text></g><g><title>type_op_prove_predicate (183,143 samples, 0.50%)</title><rect x="18.5590%" y="213" width="0.4993%" height="15" fill="rgb(241,131,45)"/><text x="18.8090%" y="223.50"></text></g><g><title>MIR_borrow_checking (2,938,233 samples, 8.01%)</title><rect x="11.0509%" y="245" width="8.0108%" height="15" fill="rgb(249,31,29)"/><text x="11.3009%" y="255.50">MIR_borrow_..</text></g><g><title>mir_borrowck (2,919,221 samples, 7.96%)</title><rect x="11.1028%" y="229" width="7.9590%" height="15" fill="rgb(225,111,53)"/><text x="11.3528%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (127,001 samples, 0.35%)</title><rect x="19.0617%" y="245" width="0.3463%" height="15" fill="rgb(238,160,17)"/><text x="19.3117%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (108,611 samples, 0.30%)</title><rect x="19.1119%" y="229" width="0.2961%" height="15" fill="rgb(214,148,48)"/><text x="19.3619%" y="239.50"></text></g><g><title>hir_module_items (88,811 samples, 0.24%)</title><rect x="19.4080%" y="245" width="0.2421%" height="15" fill="rgb(232,36,49)"/><text x="19.6580%" y="255.50"></text></g><g><title>associated_item (37,270 samples, 0.10%)</title><rect x="20.0218%" y="181" width="0.1016%" height="15" fill="rgb(209,103,24)"/><text x="20.2718%" y="191.50"></text></g><g><title>get_lang_items (43,260 samples, 0.12%)</title><rect x="20.2066%" y="165" width="0.1179%" height="15" fill="rgb(229,88,8)"/><text x="20.4566%" y="175.50"></text></g><g><title>item_attrs (41,381 samples, 0.11%)</title><rect x="20.3245%" y="165" width="0.1128%" height="15" fill="rgb(213,181,19)"/><text x="20.5745%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (38,361 samples, 0.10%)</title><rect x="20.3327%" y="149" width="0.1046%" height="15" fill="rgb(254,191,54)"/><text x="20.5827%" y="159.50"></text></g><g><title>codegen_fn_attrs (162,642 samples, 0.44%)</title><rect x="20.1234%" y="181" width="0.4434%" height="15" fill="rgb(241,83,37)"/><text x="20.3734%" y="191.50"></text></g><g><title>codegen_fn_attrs (246,033 samples, 0.67%)</title><rect x="19.9028%" y="213" width="0.6708%" height="15" fill="rgb(233,36,39)"/><text x="20.1528%" y="223.50"></text></g><g><title>should_inherit_track_caller (220,662 samples, 0.60%)</title><rect x="19.9720%" y="197" width="0.6016%" height="15" fill="rgb(226,3,54)"/><text x="20.2220%" y="207.50"></text></g><g><title>check_mod_attrs (330,094 samples, 0.90%)</title><rect x="19.6856%" y="229" width="0.9000%" height="15" fill="rgb(245,192,40)"/><text x="19.9356%" y="239.50"></text></g><g><title>lookup_deprecation_entry (41,681 samples, 0.11%)</title><rect x="20.8871%" y="213" width="0.1136%" height="15" fill="rgb(238,167,29)"/><text x="21.1371%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (134,931 samples, 0.37%)</title><rect x="20.7334%" y="229" width="0.3679%" height="15" fill="rgb(232,182,51)"/><text x="20.9834%" y="239.50"></text></g><g><title>misc_checking_1 (563,337 samples, 1.54%)</title><rect x="19.6512%" y="245" width="1.5359%" height="15" fill="rgb(231,60,39)"/><text x="19.9012%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (56,291 samples, 0.15%)</title><rect x="21.1909%" y="229" width="0.1535%" height="15" fill="rgb(208,69,12)"/><text x="21.4409%" y="239.50"></text></g><g><title>check_mod_liveness (40,191 samples, 0.11%)</title><rect x="21.2348%" y="213" width="0.1096%" height="15" fill="rgb(235,93,37)"/><text x="21.4848%" y="223.50"></text></g><g><title>misc_checking_2 (170,652 samples, 0.47%)</title><rect x="21.1870%" y="245" width="0.4653%" height="15" fill="rgb(213,116,39)"/><text x="21.4370%" y="255.50"></text></g><g><title>match_checking (112,941 samples, 0.31%)</title><rect x="21.3444%" y="229" width="0.3079%" height="15" fill="rgb(222,207,29)"/><text x="21.5944%" y="239.50"></text></g><g><title>check_match (106,791 samples, 0.29%)</title><rect x="21.3612%" y="213" width="0.2912%" height="15" fill="rgb(206,96,30)"/><text x="21.6112%" y="223.50"></text></g><g><title>check_private_in_public (52,891 samples, 0.14%)</title><rect x="21.6723%" y="229" width="0.1442%" height="15" fill="rgb(218,138,4)"/><text x="21.9223%" y="239.50"></text></g><g><title>item_attrs (103,951 samples, 0.28%)</title><rect x="22.0513%" y="213" width="0.2834%" height="15" fill="rgb(250,191,14)"/><text x="22.3013%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,431 samples, 0.28%)</title><rect x="22.0555%" y="197" width="0.2793%" height="15" fill="rgb(239,60,40)"/><text x="22.3055%" y="207.50"></text></g><g><title>death_checking (241,452 samples, 0.66%)</title><rect x="21.8165%" y="229" width="0.6583%" height="15" fill="rgb(206,27,48)"/><text x="22.0665%" y="239.50"></text></g><g><title>lint_levels (51,370 samples, 0.14%)</title><rect x="22.3347%" y="213" width="0.1401%" height="15" fill="rgb(225,35,8)"/><text x="22.5847%" y="223.50"></text></g><g><title>param_env (42,810 samples, 0.12%)</title><rect x="23.6808%" y="197" width="0.1167%" height="15" fill="rgb(250,213,24)"/><text x="23.9308%" y="207.50"></text></g><g><title>crate_lints (802,559 samples, 2.19%)</title><rect x="22.4790%" y="213" width="2.1881%" height="15" fill="rgb(247,123,22)"/><text x="22.7290%" y="223.50">c..</text></g><g><title>type_of (318,966 samples, 0.87%)</title><rect x="23.7975%" y="197" width="0.8696%" height="15" fill="rgb(231,138,38)"/><text x="24.0475%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (239,125 samples, 0.65%)</title><rect x="24.0152%" y="181" width="0.6520%" height="15" fill="rgb(231,145,46)"/><text x="24.2652%" y="191.50"></text></g><g><title>lint_checking (851,739 samples, 2.32%)</title><rect x="22.4748%" y="229" width="2.3222%" height="15" fill="rgb(251,118,11)"/><text x="22.7248%" y="239.50">l..</text></g><g><title>module_lints (47,620 samples, 0.13%)</title><rect x="24.6671%" y="213" width="0.1298%" height="15" fill="rgb(217,147,25)"/><text x="24.9171%" y="223.50"></text></g><g><title>lint_mod (45,420 samples, 0.12%)</title><rect x="24.6731%" y="197" width="0.1238%" height="15" fill="rgb(247,81,37)"/><text x="24.9231%" y="207.50"></text></g><g><title>privacy_access_levels (66,281 samples, 0.18%)</title><rect x="24.7970%" y="229" width="0.1807%" height="15" fill="rgb(209,12,38)"/><text x="25.0470%" y="239.50"></text></g><g><title>privacy_checking_modules (121,952 samples, 0.33%)</title><rect x="24.9777%" y="229" width="0.3325%" height="15" fill="rgb(227,1,9)"/><text x="25.2277%" y="239.50"></text></g><g><title>check_mod_privacy (120,851 samples, 0.33%)</title><rect x="24.9807%" y="213" width="0.3295%" height="15" fill="rgb(248,47,43)"/><text x="25.2307%" y="223.50"></text></g><g><title>misc_checking_3 (1,354,386 samples, 3.69%)</title><rect x="21.6523%" y="245" width="3.6926%" height="15" fill="rgb(221,10,30)"/><text x="21.9023%" y="255.50">misc..</text></g><g><title>adt_destructor (43,100 samples, 0.12%)</title><rect x="25.5574%" y="197" width="0.1175%" height="15" fill="rgb(210,229,1)"/><text x="25.8074%" y="207.50"></text></g><g><title>is_copy_raw (60,621 samples, 0.17%)</title><rect x="25.6749%" y="197" width="0.1653%" height="15" fill="rgb(222,148,37)"/><text x="25.9249%" y="207.50"></text></g><g><title>evaluate_obligation (46,661 samples, 0.13%)</title><rect x="25.7130%" y="181" width="0.1272%" height="15" fill="rgb(234,67,33)"/><text x="25.9630%" y="191.50"></text></g><g><title>param_env (55,671 samples, 0.15%)</title><rect x="25.8402%" y="197" width="0.1518%" height="15" fill="rgb(247,98,35)"/><text x="26.0902%" y="207.50"></text></g><g><title>impl_parent (913,498 samples, 2.49%)</title><rect x="30.9318%" y="181" width="2.4906%" height="15" fill="rgb(247,138,52)"/><text x="31.1818%" y="191.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (518,245 samples, 1.41%)</title><rect x="32.0095%" y="165" width="1.4129%" height="15" fill="rgb(213,79,30)"/><text x="32.2595%" y="175.50"></text></g><g><title>impl_trait_ref (1,719,302 samples, 4.69%)</title><rect x="33.4259%" y="181" width="4.6875%" height="15" fill="rgb(246,177,23)"/><text x="33.6759%" y="191.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,317,856 samples, 3.59%)</title><rect x="34.5204%" y="165" width="3.5930%" height="15" fill="rgb(230,62,27)"/><text x="34.7704%" y="175.50">meta..</text></g><g><title>trait_impls_of (351,564 samples, 0.96%)</title><rect x="38.2253%" y="181" width="0.9585%" height="15" fill="rgb(216,154,8)"/><text x="38.4753%" y="191.50"></text></g><g><title>implementations_of_trait (85,750 samples, 0.23%)</title><rect x="38.9500%" y="165" width="0.2338%" height="15" fill="rgb(244,35,45)"/><text x="39.2000%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (76,660 samples, 0.21%)</title><rect x="38.9748%" y="149" width="0.2090%" height="15" fill="rgb(251,115,12)"/><text x="39.2248%" y="159.50"></text></g><g><title>coherent_trait (5,036,536 samples, 13.73%)</title><rect x="25.4555%" y="213" width="13.7316%" height="15" fill="rgb(240,54,50)"/><text x="25.7055%" y="223.50">coherent_trait</text></g><g><title>specialization_graph_of (4,839,784 samples, 13.20%)</title><rect x="25.9919%" y="197" width="13.1952%" height="15" fill="rgb(233,84,52)"/><text x="26.2419%" y="207.50">specialization_graph..</text></g><g><title>coherence_checking (5,091,506 samples, 13.88%)</title><rect x="25.4116%" y="229" width="13.8815%" height="15" fill="rgb(207,117,47)"/><text x="25.6616%" y="239.50">coherence_checking</text></g><g><title>associated_items (42,420 samples, 0.12%)</title><rect x="43.9943%" y="181" width="0.1157%" height="15" fill="rgb(249,43,39)"/><text x="44.2443%" y="191.50"></text></g><g><title>dropck_outlives (91,852 samples, 0.25%)</title><rect x="44.1259%" y="181" width="0.2504%" height="15" fill="rgb(209,38,44)"/><text x="44.3759%" y="191.50"></text></g><g><title>adt_dtorck_constraint (47,040 samples, 0.13%)</title><rect x="44.2481%" y="165" width="0.1282%" height="15" fill="rgb(236,212,23)"/><text x="44.4981%" y="175.50"></text></g><g><title>evaluate_obligation (115,803 samples, 0.32%)</title><rect x="44.3763%" y="181" width="0.3157%" height="15" fill="rgb(242,79,21)"/><text x="44.6263%" y="191.50"></text></g><g><title>method_autoderef_steps (43,100 samples, 0.12%)</title><rect x="44.8352%" y="181" width="0.1175%" height="15" fill="rgb(211,96,35)"/><text x="45.0852%" y="191.50"></text></g><g><title>evaluate_obligation (47,420 samples, 0.13%)</title><rect x="45.0540%" y="165" width="0.1293%" height="15" fill="rgb(253,215,40)"/><text x="45.3040%" y="175.50"></text></g><g><title>layout_of (40,461 samples, 0.11%)</title><rect x="45.1833%" y="165" width="0.1103%" height="15" fill="rgb(211,81,21)"/><text x="45.4333%" y="175.50"></text></g><g><title>object_safety_violations (135,282 samples, 0.37%)</title><rect x="44.9528%" y="181" width="0.3688%" height="15" fill="rgb(208,190,38)"/><text x="45.2028%" y="191.50"></text></g><g><title>predicates_of (37,451 samples, 0.10%)</title><rect x="45.3443%" y="181" width="0.1021%" height="15" fill="rgb(235,213,38)"/><text x="45.5943%" y="191.50"></text></g><g><title>item_bodies_checking (2,270,406 samples, 6.19%)</title><rect x="39.3410%" y="229" width="6.1900%" height="15" fill="rgb(237,122,38)"/><text x="39.5910%" y="239.50">item_bod..</text></g><g><title>typeck_item_bodies (2,268,536 samples, 6.18%)</title><rect x="39.3461%" y="213" width="6.1849%" height="15" fill="rgb(244,218,35)"/><text x="39.5961%" y="223.50">typeck_i..</text></g><g><title>typeck (2,253,155 samples, 6.14%)</title><rect x="39.3881%" y="197" width="6.1430%" height="15" fill="rgb(240,68,47)"/><text x="39.6381%" y="207.50">typeck</text></g><g><title>fn_sig (62,530 samples, 0.17%)</title><rect x="46.5849%" y="197" width="0.1705%" height="15" fill="rgb(210,16,53)"/><text x="46.8349%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (58,740 samples, 0.16%)</title><rect x="46.5952%" y="181" width="0.1601%" height="15" fill="rgb(235,124,12)"/><text x="46.8452%" y="191.50"></text></g><g><title>item_types_checking (517,685 samples, 1.41%)</title><rect x="45.5311%" y="229" width="1.4114%" height="15" fill="rgb(224,169,11)"/><text x="45.7811%" y="239.50"></text></g><g><title>check_mod_item_types (515,665 samples, 1.41%)</title><rect x="45.5366%" y="213" width="1.4059%" height="15" fill="rgb(250,166,2)"/><text x="45.7866%" y="223.50"></text></g><g><title>predicates_of (36,982 samples, 0.10%)</title><rect x="46.8417%" y="197" width="0.1008%" height="15" fill="rgb(242,216,29)"/><text x="47.0917%" y="207.50"></text></g><g><title>fn_sig (69,271 samples, 0.19%)</title><rect x="47.2028%" y="197" width="0.1889%" height="15" fill="rgb(230,116,27)"/><text x="47.4528%" y="207.50"></text></g><g><title>generics_of (73,821 samples, 0.20%)</title><rect x="47.3917%" y="197" width="0.2013%" height="15" fill="rgb(228,99,48)"/><text x="47.6417%" y="207.50"></text></g><g><title>impl_trait_ref (49,840 samples, 0.14%)</title><rect x="47.5929%" y="197" width="0.1359%" height="15" fill="rgb(253,11,6)"/><text x="47.8429%" y="207.50"></text></g><g><title>late_bound_vars_map (83,042 samples, 0.23%)</title><rect x="48.1346%" y="149" width="0.2264%" height="15" fill="rgb(247,143,39)"/><text x="48.3846%" y="159.50"></text></g><g><title>resolve_lifetimes (75,542 samples, 0.21%)</title><rect x="48.1551%" y="133" width="0.2060%" height="15" fill="rgb(236,97,10)"/><text x="48.4051%" y="143.50"></text></g><g><title>explicit_predicates_of (193,932 samples, 0.53%)</title><rect x="47.8408%" y="165" width="0.5287%" height="15" fill="rgb(233,208,19)"/><text x="48.0908%" y="175.50"></text></g><g><title>predicates_of (271,063 samples, 0.74%)</title><rect x="47.7288%" y="197" width="0.7390%" height="15" fill="rgb(216,164,2)"/><text x="47.9788%" y="207.50"></text></g><g><title>predicates_defined_on (257,893 samples, 0.70%)</title><rect x="47.7647%" y="181" width="0.7031%" height="15" fill="rgb(220,129,5)"/><text x="48.0147%" y="191.50"></text></g><g><title>type_collecting (633,877 samples, 1.73%)</title><rect x="46.9454%" y="229" width="1.7282%" height="15" fill="rgb(242,17,10)"/><text x="47.1954%" y="239.50"></text></g><g><title>collect_mod_item_types (627,457 samples, 1.71%)</title><rect x="46.9629%" y="213" width="1.7107%" height="15" fill="rgb(242,107,0)"/><text x="47.2129%" y="223.50"></text></g><g><title>type_of (75,481 samples, 0.21%)</title><rect x="48.4678%" y="197" width="0.2058%" height="15" fill="rgb(251,28,31)"/><text x="48.7178%" y="207.50"></text></g><g><title>evaluate_obligation (199,992 samples, 0.55%)</title><rect x="50.0899%" y="197" width="0.5453%" height="15" fill="rgb(233,223,10)"/><text x="50.3399%" y="207.50"></text></g><g><title>implied_outlives_bounds (87,301 samples, 0.24%)</title><rect x="50.6351%" y="197" width="0.2380%" height="15" fill="rgb(215,21,27)"/><text x="50.8851%" y="207.50"></text></g><g><title>param_env (76,002 samples, 0.21%)</title><rect x="50.8731%" y="197" width="0.2072%" height="15" fill="rgb(232,23,21)"/><text x="51.1231%" y="207.50"></text></g><g><title>region_scope_tree (53,221 samples, 0.15%)</title><rect x="51.1510%" y="197" width="0.1451%" height="15" fill="rgb(244,5,23)"/><text x="51.4010%" y="207.50"></text></g><g><title>check_impl_item_well_formed (924,669 samples, 2.52%)</title><rect x="48.8043%" y="213" width="2.5210%" height="15" fill="rgb(226,81,46)"/><text x="49.0543%" y="223.50">ch..</text></g><g><title>implied_outlives_bounds (63,950 samples, 0.17%)</title><rect x="52.9173%" y="197" width="0.1744%" height="15" fill="rgb(247,70,30)"/><text x="53.1673%" y="207.50"></text></g><g><title>param_env (92,072 samples, 0.25%)</title><rect x="53.0916%" y="197" width="0.2510%" height="15" fill="rgb(212,68,19)"/><text x="53.3416%" y="207.50"></text></g><g><title>predicates_of (63,011 samples, 0.17%)</title><rect x="53.3426%" y="197" width="0.1718%" height="15" fill="rgb(240,187,13)"/><text x="53.5926%" y="207.50"></text></g><g><title>predicates_defined_on (43,391 samples, 0.12%)</title><rect x="53.3961%" y="181" width="0.1183%" height="15" fill="rgb(223,113,26)"/><text x="53.6461%" y="191.50"></text></g><g><title>analysis (15,734,366 samples, 42.90%)</title><rect x="10.7594%" y="261" width="42.8982%" height="15" fill="rgb(206,192,2)"/><text x="11.0094%" y="271.50">analysis</text></g><g><title>type_check_crate (10,384,635 samples, 28.31%)</title><rect x="25.3449%" y="245" width="28.3127%" height="15" fill="rgb(241,108,4)"/><text x="25.5949%" y="255.50">type_check_crate</text></g><g><title>wf_checking (1,827,121 samples, 4.98%)</title><rect x="48.6761%" y="229" width="4.9815%" height="15" fill="rgb(247,173,49)"/><text x="48.9261%" y="239.50">wf_che..</text></g><g><title>check_item_well_formed (855,452 samples, 2.33%)</title><rect x="51.3253%" y="213" width="2.3323%" height="15" fill="rgb(224,114,35)"/><text x="51.5753%" y="223.50">c..</text></g><g><title>variances_of (42,231 samples, 0.12%)</title><rect x="53.5425%" y="197" width="0.1151%" height="15" fill="rgb(245,159,27)"/><text x="53.7925%" y="207.50"></text></g><g><title>crate_variances (39,471 samples, 0.11%)</title><rect x="53.5500%" y="181" width="0.1076%" height="15" fill="rgb(245,172,44)"/><text x="53.8000%" y="191.50"></text></g><g><title>codegen_module (201,822 samples, 0.55%)</title><rect x="55.1002%" y="245" width="0.5502%" height="15" fill="rgb(236,23,11)"/><text x="55.3502%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (50,871 samples, 0.14%)</title><rect x="55.6518%" y="245" width="0.1387%" height="15" fill="rgb(205,117,38)"/><text x="55.9018%" y="255.50"></text></g><g><title>codegen_crate (789,069 samples, 2.15%)</title><rect x="53.6759%" y="261" width="2.1513%" height="15" fill="rgb(237,72,25)"/><text x="53.9259%" y="271.50">c..</text></g><g><title>codegen_module_optimize (593,676 samples, 1.62%)</title><rect x="55.8272%" y="261" width="1.6186%" height="15" fill="rgb(244,70,9)"/><text x="56.0772%" y="271.50"></text></g><g><title>LLVM_module_optimize (304,673 samples, 0.83%)</title><rect x="56.6151%" y="245" width="0.8307%" height="15" fill="rgb(217,125,39)"/><text x="56.8651%" y="255.50"></text></g><g><title>LLVM_lto_optimize (119,021 samples, 0.32%)</title><rect x="57.9960%" y="245" width="0.3245%" height="15" fill="rgb(235,36,10)"/><text x="58.2460%" y="255.50"></text></g><g><title>LLVM_module_codegen (2,226,795 samples, 6.07%)</title><rect x="58.3205%" y="245" width="6.0711%" height="15" fill="rgb(251,123,47)"/><text x="58.5705%" y="255.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (2,209,115 samples, 6.02%)</title><rect x="58.3687%" y="229" width="6.0229%" height="15" fill="rgb(221,13,13)"/><text x="58.6187%" y="239.50">LLVM_mod..</text></g><g><title>codegen_module_perform_lto (2,573,929 samples, 7.02%)</title><rect x="57.4458%" y="261" width="7.0176%" height="15" fill="rgb(238,131,9)"/><text x="57.6958%" y="271.50">codegen_m..</text></g><g><title>AST_validation (57,141 samples, 0.16%)</title><rect x="64.8126%" y="245" width="0.1558%" height="15" fill="rgb(211,50,8)"/><text x="65.0626%" y="255.50"></text></g><g><title>crate_injection (55,940 samples, 0.15%)</title><rect x="65.0301%" y="245" width="0.1525%" height="15" fill="rgb(245,182,24)"/><text x="65.2801%" y="255.50"></text></g><g><title>metadata_load_macro (52,381 samples, 0.14%)</title><rect x="75.5742%" y="213" width="0.1428%" height="15" fill="rgb(242,14,37)"/><text x="75.8242%" y="223.50"></text></g><g><title>macro_expand_crate (3,962,744 samples, 10.80%)</title><rect x="65.1826%" y="245" width="10.8040%" height="15" fill="rgb(246,228,12)"/><text x="65.4326%" y="255.50">macro_expand_cra..</text></g><g><title>expand_crate (3,949,144 samples, 10.77%)</title><rect x="65.2197%" y="229" width="10.7670%" height="15" fill="rgb(213,55,15)"/><text x="65.4697%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (98,891 samples, 0.27%)</title><rect x="75.7170%" y="213" width="0.2696%" height="15" fill="rgb(209,9,3)"/><text x="75.9670%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (83,671 samples, 0.23%)</title><rect x="75.9936%" y="245" width="0.2281%" height="15" fill="rgb(230,59,30)"/><text x="76.2436%" y="255.50"></text></g><g><title>finalize_macro_resolutions (150,632 samples, 0.41%)</title><rect x="76.2774%" y="229" width="0.4107%" height="15" fill="rgb(209,121,21)"/><text x="76.5274%" y="239.50"></text></g><g><title>late_resolve_crate (535,006 samples, 1.46%)</title><rect x="76.6881%" y="229" width="1.4586%" height="15" fill="rgb(220,109,13)"/><text x="76.9381%" y="239.50"></text></g><g><title>configure_and_expand (5,049,906 samples, 13.77%)</title><rect x="64.4634%" y="261" width="13.7681%" height="15" fill="rgb(232,18,1)"/><text x="64.7134%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (737,128 samples, 2.01%)</title><rect x="76.2217%" y="245" width="2.0097%" height="15" fill="rgb(215,41,42)"/><text x="76.4717%" y="255.50">r..</text></g><g><title>early_lint_checks (90,251 samples, 0.25%)</title><rect x="78.3824%" y="261" width="0.2461%" height="15" fill="rgb(224,123,36)"/><text x="78.6324%" y="271.50"></text></g><g><title>free_global_ctxt (2,146,234 samples, 5.85%)</title><rect x="78.6285%" y="261" width="5.8515%" height="15" fill="rgb(240,125,3)"/><text x="78.8785%" y="271.50">free_gl..</text></g><g><title>crate_hash (61,041 samples, 0.17%)</title><rect x="85.6088%" y="245" width="0.1664%" height="15" fill="rgb(205,98,50)"/><text x="85.8588%" y="255.50"></text></g><g><title>exported_symbols (44,471 samples, 0.12%)</title><rect x="85.8223%" y="245" width="0.1212%" height="15" fill="rgb(205,185,37)"/><text x="86.0723%" y="255.50"></text></g><g><title>reachable_non_generics (37,671 samples, 0.10%)</title><rect x="85.8408%" y="229" width="0.1027%" height="15" fill="rgb(238,207,15)"/><text x="86.0908%" y="239.50"></text></g><g><title>is_sized_raw (47,911 samples, 0.13%)</title><rect x="87.4514%" y="213" width="0.1306%" height="15" fill="rgb(213,199,42)"/><text x="87.7014%" y="223.50"></text></g><g><title>layout_of (143,855 samples, 0.39%)</title><rect x="87.2567%" y="229" width="0.3922%" height="15" fill="rgb(235,201,11)"/><text x="87.5067%" y="239.50"></text></g><g><title>needs_drop_raw (52,521 samples, 0.14%)</title><rect x="88.4645%" y="213" width="0.1432%" height="15" fill="rgb(207,46,11)"/><text x="88.7145%" y="223.50"></text></g><g><title>is_copy_raw (46,991 samples, 0.13%)</title><rect x="88.4796%" y="197" width="0.1281%" height="15" fill="rgb(241,35,35)"/><text x="88.7296%" y="207.50"></text></g><g><title>evaluate_obligation (37,901 samples, 0.10%)</title><rect x="88.5044%" y="181" width="0.1033%" height="15" fill="rgb(243,32,47)"/><text x="88.7544%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (367,592 samples, 1.00%)</title><rect x="87.6489%" y="229" width="1.0022%" height="15" fill="rgb(247,202,23)"/><text x="87.8989%" y="239.50"></text></g><g><title>optimized_mir (978,151 samples, 2.67%)</title><rect x="86.0261%" y="245" width="2.6668%" height="15" fill="rgb(219,102,11)"/><text x="86.2761%" y="255.50">op..</text></g><g><title>generate_crate_metadata (1,561,997 samples, 4.26%)</title><rect x="84.4800%" y="261" width="4.2586%" height="15" fill="rgb(243,110,44)"/><text x="84.7300%" y="271.50">gener..</text></g><g><title>hir_lowering (513,436 samples, 1.40%)</title><rect x="88.7386%" y="261" width="1.3998%" height="15" fill="rgb(222,74,54)"/><text x="88.9886%" y="271.50"></text></g><g><title>finish_ongoing_codegen (725,279 samples, 1.98%)</title><rect x="90.1826%" y="245" width="1.9774%" height="15" fill="rgb(216,99,12)"/><text x="90.4326%" y="255.50">f..</text></g><g><title>link_binary_remove_temps (54,100 samples, 0.15%)</title><rect x="93.1681%" y="213" width="0.1475%" height="15" fill="rgb(226,22,26)"/><text x="93.4181%" y="223.50"></text></g><g><title>link_crate (1,044,021 samples, 2.85%)</title><rect x="92.1600%" y="245" width="2.8464%" height="15" fill="rgb(217,163,10)"/><text x="92.4100%" y="255.50">li..</text></g><g><title>link_binary (1,037,211 samples, 2.83%)</title><rect x="92.1785%" y="229" width="2.8279%" height="15" fill="rgb(213,25,53)"/><text x="92.4285%" y="239.50">li..</text></g><g><title>link_rlib (620,157 samples, 1.69%)</title><rect x="93.3156%" y="213" width="1.6908%" height="15" fill="rgb(252,105,26)"/><text x="93.5656%" y="223.50"></text></g><g><title>link (1,793,851 samples, 4.89%)</title><rect x="90.1385%" y="261" width="4.8908%" height="15" fill="rgb(220,39,43)"/><text x="90.3885%" y="271.50">link</text></g><g><title>parse_crate (498,396 samples, 1.36%)</title><rect x="95.0292%" y="261" width="1.3588%" height="15" fill="rgb(229,68,48)"/><text x="95.2792%" y="271.50"></text></g><g><title>prepare_outputs (181,152 samples, 0.49%)</title><rect x="96.4034%" y="261" width="0.4939%" height="15" fill="rgb(252,8,32)"/><text x="96.6534%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (763,748 samples, 2.08%)</title><rect x="96.8973%" y="261" width="2.0823%" height="15" fill="rgb(223,20,43)"/><text x="97.1473%" y="271.50">s..</text></g><g><title>setup_global_ctxt (85,041 samples, 0.23%)</title><rect x="98.9829%" y="261" width="0.2319%" height="15" fill="rgb(229,81,49)"/><text x="99.2329%" y="271.50"></text></g><g><title>all (36,678,377 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (36,678,377 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (288,023 samples, 0.79%)</title><rect x="99.2147%" y="261" width="0.7853%" height="15" fill="rgb(249,174,33)"/><text x="99.4647%" y="271.50"></text></g></svg></svg>