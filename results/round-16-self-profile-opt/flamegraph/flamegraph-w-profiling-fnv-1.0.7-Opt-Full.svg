<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,153,438 samples, 14.95%)</title><rect x="1.1629%" y="197" width="14.9457%" height="15" fill="rgb(227,0,7)"/><text x="1.4129%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (327,544 samples, 0.80%)</title><rect x="15.3131%" y="181" width="0.7956%" height="15" fill="rgb(217,0,24)"/><text x="15.5631%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (316,554 samples, 0.77%)</title><rect x="15.3398%" y="165" width="0.7689%" height="15" fill="rgb(221,193,54)"/><text x="15.5898%" y="175.50"></text></g><g><title>codegen_fn_attrs (43,281 samples, 0.11%)</title><rect x="18.9798%" y="101" width="0.1051%" height="15" fill="rgb(248,212,6)"/><text x="19.2298%" y="111.50"></text></g><g><title>is_copy_raw (198,942 samples, 0.48%)</title><rect x="19.6060%" y="85" width="0.4832%" height="15" fill="rgb(208,68,35)"/><text x="19.8560%" y="95.50"></text></g><g><title>evaluate_obligation (190,472 samples, 0.46%)</title><rect x="19.6266%" y="69" width="0.4626%" height="15" fill="rgb(232,128,0)"/><text x="19.8766%" y="79.50"></text></g><g><title>trait_impls_of (141,221 samples, 0.34%)</title><rect x="19.7462%" y="53" width="0.3430%" height="15" fill="rgb(207,160,47)"/><text x="19.9962%" y="63.50"></text></g><g><title>is_copy_raw (52,021 samples, 0.13%)</title><rect x="20.1278%" y="53" width="0.1264%" height="15" fill="rgb(228,23,34)"/><text x="20.3778%" y="63.50"></text></g><g><title>evaluate_obligation (48,401 samples, 0.12%)</title><rect x="20.1366%" y="37" width="0.1176%" height="15" fill="rgb(218,30,26)"/><text x="20.3866%" y="47.50"></text></g><g><title>adt_drop_tys (78,781 samples, 0.19%)</title><rect x="20.1140%" y="69" width="0.1913%" height="15" fill="rgb(220,122,19)"/><text x="20.3640%" y="79.50"></text></g><g><title>needs_drop_raw (150,661 samples, 0.37%)</title><rect x="20.0892%" y="85" width="0.3659%" height="15" fill="rgb(250,228,42)"/><text x="20.3392%" y="95.50"></text></g><g><title>is_copy_raw (61,670 samples, 0.15%)</title><rect x="20.3053%" y="69" width="0.1498%" height="15" fill="rgb(240,193,28)"/><text x="20.5553%" y="79.50"></text></g><g><title>evaluate_obligation (55,100 samples, 0.13%)</title><rect x="20.3213%" y="53" width="0.1338%" height="15" fill="rgb(216,20,37)"/><text x="20.5713%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (45,940 samples, 0.11%)</title><rect x="20.5187%" y="69" width="0.1116%" height="15" fill="rgb(206,188,39)"/><text x="20.7687%" y="79.50"></text></g><g><title>impl_parent (174,113 samples, 0.42%)</title><rect x="21.2621%" y="53" width="0.4229%" height="15" fill="rgb(217,207,13)"/><text x="21.5121%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (111,362 samples, 0.27%)</title><rect x="21.4145%" y="37" width="0.2705%" height="15" fill="rgb(231,73,38)"/><text x="21.6645%" y="47.50"></text></g><g><title>specialization_graph_of (961,870 samples, 2.34%)</title><rect x="20.6367%" y="69" width="2.3362%" height="15" fill="rgb(225,20,46)"/><text x="20.8867%" y="79.50">s..</text></g><g><title>impl_trait_ref (530,254 samples, 1.29%)</title><rect x="21.6850%" y="53" width="1.2879%" height="15" fill="rgb(210,31,41)"/><text x="21.9350%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (470,503 samples, 1.14%)</title><rect x="21.8301%" y="37" width="1.1428%" height="15" fill="rgb(221,200,47)"/><text x="22.0801%" y="47.50"></text></g><g><title>resolve_instance (1,041,642 samples, 2.53%)</title><rect x="20.4551%" y="85" width="2.5300%" height="15" fill="rgb(226,26,5)"/><text x="20.7051%" y="95.50">re..</text></g><g><title>thir_body (70,920 samples, 0.17%)</title><rect x="22.9922%" y="85" width="0.1723%" height="15" fill="rgb(249,33,26)"/><text x="23.2422%" y="95.50"></text></g><g><title>mir_const (1,910,132 samples, 4.64%)</title><rect x="18.5287%" y="133" width="4.6394%" height="15" fill="rgb(235,183,28)"/><text x="18.7787%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (1,780,451 samples, 4.32%)</title><rect x="18.8436%" y="117" width="4.3244%" height="15" fill="rgb(221,5,38)"/><text x="19.0936%" y="127.50">unsaf..</text></g><g><title>mir_built (1,681,089 samples, 4.08%)</title><rect x="19.0850%" y="101" width="4.0831%" height="15" fill="rgb(247,18,42)"/><text x="19.3350%" y="111.50">mir_..</text></g><g><title>mir_promoted (2,017,363 samples, 4.90%)</title><rect x="18.2858%" y="149" width="4.8998%" height="15" fill="rgb(241,131,45)"/><text x="18.5358%" y="159.50">mir_pr..</text></g><g><title>type_op_normalize_fn_sig (87,050 samples, 0.21%)</title><rect x="23.1857%" y="149" width="0.2114%" height="15" fill="rgb(249,31,29)"/><text x="23.4357%" y="159.50"></text></g><g><title>normalize_projection_ty (51,980 samples, 0.13%)</title><rect x="23.2708%" y="133" width="0.1263%" height="15" fill="rgb(225,111,53)"/><text x="23.5208%" y="143.50"></text></g><g><title>MIR_borrow_checking (3,014,644 samples, 7.32%)</title><rect x="16.3338%" y="181" width="7.3221%" height="15" fill="rgb(238,160,17)"/><text x="16.5838%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (3,007,344 samples, 7.30%)</title><rect x="16.3515%" y="165" width="7.3044%" height="15" fill="rgb(214,148,48)"/><text x="16.6015%" y="175.50">mir_borrow..</text></g><g><title>type_op_prove_predicate (106,551 samples, 0.26%)</title><rect x="23.3971%" y="149" width="0.2588%" height="15" fill="rgb(232,36,49)"/><text x="23.6471%" y="159.50"></text></g><g><title>hir_module_items (76,791 samples, 0.19%)</title><rect x="23.6660%" y="181" width="0.1865%" height="15" fill="rgb(209,103,24)"/><text x="23.9160%" y="191.50"></text></g><g><title>get_lang_items (45,671 samples, 0.11%)</title><rect x="24.2809%" y="101" width="0.1109%" height="15" fill="rgb(229,88,8)"/><text x="24.5309%" y="111.50"></text></g><g><title>codegen_fn_attrs (126,582 samples, 0.31%)</title><rect x="24.2273%" y="117" width="0.3074%" height="15" fill="rgb(213,181,19)"/><text x="24.4773%" y="127.50"></text></g><g><title>codegen_fn_attrs (203,342 samples, 0.49%)</title><rect x="24.0437%" y="149" width="0.4939%" height="15" fill="rgb(254,191,54)"/><text x="24.2937%" y="159.50"></text></g><g><title>should_inherit_track_caller (177,972 samples, 0.43%)</title><rect x="24.1053%" y="133" width="0.4323%" height="15" fill="rgb(241,83,37)"/><text x="24.3553%" y="143.50"></text></g><g><title>check_mod_attrs (261,623 samples, 0.64%)</title><rect x="23.9025%" y="165" width="0.6354%" height="15" fill="rgb(233,36,39)"/><text x="24.1525%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (88,261 samples, 0.21%)</title><rect x="24.6187%" y="165" width="0.2144%" height="15" fill="rgb(226,3,54)"/><text x="24.8687%" y="175.50"></text></g><g><title>misc_checking_1 (425,824 samples, 1.03%)</title><rect x="23.8534%" y="181" width="1.0343%" height="15" fill="rgb(245,192,40)"/><text x="24.1034%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (76,331 samples, 0.19%)</title><rect x="24.8907%" y="165" width="0.1854%" height="15" fill="rgb(238,167,29)"/><text x="25.1407%" y="175.50"></text></g><g><title>check_mod_liveness (63,341 samples, 0.15%)</title><rect x="24.9222%" y="149" width="0.1538%" height="15" fill="rgb(232,182,51)"/><text x="25.1722%" y="159.50"></text></g><g><title>misc_checking_2 (173,352 samples, 0.42%)</title><rect x="24.8877%" y="181" width="0.4210%" height="15" fill="rgb(231,60,39)"/><text x="25.1377%" y="191.50"></text></g><g><title>match_checking (95,791 samples, 0.23%)</title><rect x="25.0761%" y="165" width="0.2327%" height="15" fill="rgb(208,69,12)"/><text x="25.3261%" y="175.50"></text></g><g><title>check_match (92,631 samples, 0.22%)</title><rect x="25.0837%" y="149" width="0.2250%" height="15" fill="rgb(235,93,37)"/><text x="25.3337%" y="159.50"></text></g><g><title>death_checking (100,411 samples, 0.24%)</title><rect x="25.4147%" y="165" width="0.2439%" height="15" fill="rgb(213,116,39)"/><text x="25.6647%" y="175.50"></text></g><g><title>param_env (87,102 samples, 0.21%)</title><rect x="26.6372%" y="133" width="0.2116%" height="15" fill="rgb(222,207,29)"/><text x="26.8872%" y="143.50"></text></g><g><title>trait_impls_of (212,022 samples, 0.51%)</title><rect x="26.8488%" y="133" width="0.5150%" height="15" fill="rgb(206,96,30)"/><text x="27.0988%" y="143.50"></text></g><g><title>implementations_of_trait (50,700 samples, 0.12%)</title><rect x="27.2406%" y="117" width="0.1231%" height="15" fill="rgb(218,138,4)"/><text x="27.4906%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (46,670 samples, 0.11%)</title><rect x="27.2504%" y="101" width="0.1134%" height="15" fill="rgb(250,191,14)"/><text x="27.5004%" y="111.50"></text></g><g><title>crate_lints (3,043,804 samples, 7.39%)</title><rect x="25.6619%" y="149" width="7.3929%" height="15" fill="rgb(239,60,40)"/><text x="25.9119%" y="159.50">crate_lints</text></g><g><title>type_of (2,341,726 samples, 5.69%)</title><rect x="27.3671%" y="133" width="5.6877%" height="15" fill="rgb(206,27,48)"/><text x="27.6171%" y="143.50">type_of</text></g><g><title>metadata_decode_entry_type_of (2,096,325 samples, 5.09%)</title><rect x="27.9632%" y="117" width="5.0916%" height="15" fill="rgb(225,35,8)"/><text x="28.2132%" y="127.50">metada..</text></g><g><title>lint_checking (3,088,114 samples, 7.50%)</title><rect x="25.6586%" y="165" width="7.5005%" height="15" fill="rgb(250,213,24)"/><text x="25.9086%" y="175.50">lint_check..</text></g><g><title>module_lints (42,960 samples, 0.10%)</title><rect x="33.0548%" y="149" width="0.1043%" height="15" fill="rgb(247,123,22)"/><text x="33.3048%" y="159.50"></text></g><g><title>privacy_access_levels (49,370 samples, 0.12%)</title><rect x="33.1591%" y="165" width="0.1199%" height="15" fill="rgb(231,138,38)"/><text x="33.4091%" y="175.50"></text></g><g><title>privacy_checking_modules (64,971 samples, 0.16%)</title><rect x="33.2791%" y="165" width="0.1578%" height="15" fill="rgb(231,145,46)"/><text x="33.5291%" y="175.50"></text></g><g><title>check_mod_privacy (63,711 samples, 0.15%)</title><rect x="33.2821%" y="149" width="0.1547%" height="15" fill="rgb(251,118,11)"/><text x="33.5321%" y="159.50"></text></g><g><title>misc_checking_3 (3,357,717 samples, 8.16%)</title><rect x="25.3087%" y="181" width="8.1554%" height="15" fill="rgb(217,147,25)"/><text x="25.5587%" y="191.50">misc_checki..</text></g><g><title>impl_parent (245,881 samples, 0.60%)</title><rect x="34.1062%" y="117" width="0.5972%" height="15" fill="rgb(247,81,37)"/><text x="34.3562%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (200,380 samples, 0.49%)</title><rect x="34.2167%" y="101" width="0.4867%" height="15" fill="rgb(209,12,38)"/><text x="34.4667%" y="111.50"></text></g><g><title>impl_trait_ref (615,660 samples, 1.50%)</title><rect x="34.7034%" y="117" width="1.4953%" height="15" fill="rgb(227,1,9)"/><text x="34.9534%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (560,370 samples, 1.36%)</title><rect x="34.8377%" y="101" width="1.3610%" height="15" fill="rgb(248,47,43)"/><text x="35.0877%" y="111.50"></text></g><g><title>coherent_trait (1,179,112 samples, 2.86%)</title><rect x="33.5456%" y="149" width="2.8639%" height="15" fill="rgb(221,10,30)"/><text x="33.7956%" y="159.50">co..</text></g><g><title>specialization_graph_of (1,173,692 samples, 2.85%)</title><rect x="33.5587%" y="133" width="2.8507%" height="15" fill="rgb(210,229,1)"/><text x="33.8087%" y="143.50">sp..</text></g><g><title>trait_impls_of (86,730 samples, 0.21%)</title><rect x="36.1988%" y="117" width="0.2107%" height="15" fill="rgb(222,148,37)"/><text x="36.4488%" y="127.50"></text></g><g><title>coherence_checking (1,220,014 samples, 2.96%)</title><rect x="33.5196%" y="165" width="2.9632%" height="15" fill="rgb(234,67,33)"/><text x="33.7696%" y="175.50">coh..</text></g><g><title>adt_sized_constraint (67,090 samples, 0.16%)</title><rect x="38.7024%" y="117" width="0.1630%" height="15" fill="rgb(247,98,35)"/><text x="38.9524%" y="127.50"></text></g><g><title>associated_item (253,092 samples, 0.61%)</title><rect x="39.0338%" y="101" width="0.6147%" height="15" fill="rgb(247,138,52)"/><text x="39.2838%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (210,572 samples, 0.51%)</title><rect x="39.1370%" y="85" width="0.5114%" height="15" fill="rgb(213,79,30)"/><text x="39.3870%" y="95.50"></text></g><g><title>associated_items (324,713 samples, 0.79%)</title><rect x="38.8711%" y="117" width="0.7887%" height="15" fill="rgb(246,177,23)"/><text x="39.1211%" y="127.50"></text></g><g><title>dropck_outlives (101,511 samples, 0.25%)</title><rect x="39.6772%" y="117" width="0.2466%" height="15" fill="rgb(230,62,27)"/><text x="39.9272%" y="127.50"></text></g><g><title>adt_dtorck_constraint (70,531 samples, 0.17%)</title><rect x="39.7525%" y="101" width="0.1713%" height="15" fill="rgb(216,154,8)"/><text x="40.0025%" y="111.50"></text></g><g><title>specializes (56,300 samples, 0.14%)</title><rect x="40.2892%" y="101" width="0.1367%" height="15" fill="rgb(244,35,45)"/><text x="40.5392%" y="111.50"></text></g><g><title>param_env (46,970 samples, 0.11%)</title><rect x="40.3119%" y="85" width="0.1141%" height="15" fill="rgb(251,115,12)"/><text x="40.5619%" y="95.50"></text></g><g><title>trait_impls_of (113,251 samples, 0.28%)</title><rect x="40.4330%" y="101" width="0.2751%" height="15" fill="rgb(240,54,50)"/><text x="40.6830%" y="111.50"></text></g><g><title>evaluate_obligation (327,313 samples, 0.79%)</title><rect x="39.9238%" y="117" width="0.7950%" height="15" fill="rgb(233,84,52)"/><text x="40.1738%" y="127.50"></text></g><g><title>method_autoderef_steps (41,350 samples, 0.10%)</title><rect x="41.0473%" y="117" width="0.1004%" height="15" fill="rgb(207,117,47)"/><text x="41.2973%" y="127.50"></text></g><g><title>explicit_predicates_of (89,710 samples, 0.22%)</title><rect x="41.2491%" y="85" width="0.2179%" height="15" fill="rgb(249,43,39)"/><text x="41.4991%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (85,250 samples, 0.21%)</title><rect x="41.2599%" y="69" width="0.2071%" height="15" fill="rgb(209,38,44)"/><text x="41.5099%" y="79.50"></text></g><g><title>predicates_of (139,101 samples, 0.34%)</title><rect x="41.1685%" y="117" width="0.3379%" height="15" fill="rgb(236,212,23)"/><text x="41.4185%" y="127.50"></text></g><g><title>predicates_defined_on (119,861 samples, 0.29%)</title><rect x="41.2153%" y="101" width="0.2911%" height="15" fill="rgb(242,79,21)"/><text x="41.4653%" y="111.50"></text></g><g><title>item_bodies_checking (2,113,443 samples, 5.13%)</title><rect x="36.5092%" y="165" width="5.1332%" height="15" fill="rgb(211,96,35)"/><text x="36.7592%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (2,111,103 samples, 5.13%)</title><rect x="36.5149%" y="149" width="5.1275%" height="15" fill="rgb(253,215,40)"/><text x="36.7649%" y="159.50">typeck..</text></g><g><title>typeck (2,105,453 samples, 5.11%)</title><rect x="36.5286%" y="133" width="5.1138%" height="15" fill="rgb(211,81,21)"/><text x="36.7786%" y="143.50">typeck</text></g><g><title>impl_parent (52,120 samples, 0.13%)</title><rect x="42.0822%" y="85" width="0.1266%" height="15" fill="rgb(208,190,38)"/><text x="42.3322%" y="95.50"></text></g><g><title>impl_trait_ref (186,353 samples, 0.45%)</title><rect x="42.2088%" y="85" width="0.4526%" height="15" fill="rgb(235,213,38)"/><text x="42.4588%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (166,233 samples, 0.40%)</title><rect x="42.2577%" y="69" width="0.4038%" height="15" fill="rgb(237,122,38)"/><text x="42.5077%" y="79.50"></text></g><g><title>adt_destructor (339,084 samples, 0.82%)</title><rect x="41.9007%" y="133" width="0.8236%" height="15" fill="rgb(244,218,35)"/><text x="42.1507%" y="143.50"></text></g><g><title>coherent_trait (336,414 samples, 0.82%)</title><rect x="41.9072%" y="117" width="0.8171%" height="15" fill="rgb(240,68,47)"/><text x="42.1572%" y="127.50"></text></g><g><title>specialization_graph_of (335,074 samples, 0.81%)</title><rect x="41.9104%" y="101" width="0.8138%" height="15" fill="rgb(210,16,53)"/><text x="42.1604%" y="111.50"></text></g><g><title>item_types_checking (486,946 samples, 1.18%)</title><rect x="41.6424%" y="165" width="1.1827%" height="15" fill="rgb(235,124,12)"/><text x="41.8924%" y="175.50"></text></g><g><title>check_mod_item_types (485,556 samples, 1.18%)</title><rect x="41.6458%" y="149" width="1.1793%" height="15" fill="rgb(224,169,11)"/><text x="41.8958%" y="159.50"></text></g><g><title>fn_sig (57,080 samples, 0.14%)</title><rect x="42.9783%" y="133" width="0.1386%" height="15" fill="rgb(250,166,2)"/><text x="43.2283%" y="143.50"></text></g><g><title>generics_of (47,801 samples, 0.12%)</title><rect x="43.1170%" y="133" width="0.1161%" height="15" fill="rgb(242,216,29)"/><text x="43.3670%" y="143.50"></text></g><g><title>explicit_predicates_of (44,301 samples, 0.11%)</title><rect x="43.3470%" y="101" width="0.1076%" height="15" fill="rgb(230,116,27)"/><text x="43.5970%" y="111.50"></text></g><g><title>predicates_of (105,781 samples, 0.26%)</title><rect x="43.3035%" y="133" width="0.2569%" height="15" fill="rgb(228,99,48)"/><text x="43.5535%" y="143.50"></text></g><g><title>predicates_defined_on (99,521 samples, 0.24%)</title><rect x="43.3187%" y="117" width="0.2417%" height="15" fill="rgb(253,11,6)"/><text x="43.5687%" y="127.50"></text></g><g><title>inferred_outlives_of (43,600 samples, 0.11%)</title><rect x="43.4546%" y="101" width="0.1059%" height="15" fill="rgb(247,143,39)"/><text x="43.7046%" y="111.50"></text></g><g><title>type_collecting (418,795 samples, 1.02%)</title><rect x="42.8283%" y="165" width="1.0172%" height="15" fill="rgb(236,97,10)"/><text x="43.0783%" y="175.50"></text></g><g><title>collect_mod_item_types (411,774 samples, 1.00%)</title><rect x="42.8453%" y="149" width="1.0001%" height="15" fill="rgb(233,208,19)"/><text x="43.0953%" y="159.50"></text></g><g><title>type_of (117,341 samples, 0.29%)</title><rect x="43.5605%" y="133" width="0.2850%" height="15" fill="rgb(216,164,2)"/><text x="43.8105%" y="143.50"></text></g><g><title>evaluate_obligation (103,822 samples, 0.25%)</title><rect x="44.1911%" y="133" width="0.2522%" height="15" fill="rgb(220,129,5)"/><text x="44.4411%" y="143.50"></text></g><g><title>check_impl_item_well_formed (287,443 samples, 0.70%)</title><rect x="43.9064%" y="149" width="0.6982%" height="15" fill="rgb(242,17,10)"/><text x="44.1564%" y="159.50"></text></g><g><title>evaluate_obligation (80,161 samples, 0.19%)</title><rect x="45.0756%" y="133" width="0.1947%" height="15" fill="rgb(242,107,0)"/><text x="45.3256%" y="143.50"></text></g><g><title>param_env (108,331 samples, 0.26%)</title><rect x="45.3530%" y="133" width="0.2631%" height="15" fill="rgb(251,28,31)"/><text x="45.6030%" y="143.50"></text></g><g><title>analysis (12,207,515 samples, 29.65%)</title><rect x="16.1087%" y="197" width="29.6501%" height="15" fill="rgb(233,223,10)"/><text x="16.3587%" y="207.50">analysis</text></g><g><title>type_check_crate (5,061,946 samples, 12.29%)</title><rect x="33.4641%" y="181" width="12.2946%" height="15" fill="rgb(215,21,27)"/><text x="33.7141%" y="191.50">type_check_crate</text></g><g><title>wf_checking (787,108 samples, 1.91%)</title><rect x="43.8470%" y="165" width="1.9118%" height="15" fill="rgb(232,23,21)"/><text x="44.0970%" y="175.50">w..</text></g><g><title>check_item_well_formed (475,205 samples, 1.15%)</title><rect x="44.6045%" y="149" width="1.1542%" height="15" fill="rgb(244,5,23)"/><text x="44.8545%" y="159.50"></text></g><g><title>codegen_module (226,543 samples, 0.55%)</title><rect x="46.9234%" y="181" width="0.5502%" height="15" fill="rgb(226,81,46)"/><text x="47.1734%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (50,231 samples, 0.12%)</title><rect x="47.4750%" y="181" width="0.1220%" height="15" fill="rgb(247,70,30)"/><text x="47.7250%" y="191.50"></text></g><g><title>codegen_crate (815,989 samples, 1.98%)</title><rect x="45.7736%" y="197" width="1.9819%" height="15" fill="rgb(212,68,19)"/><text x="46.0236%" y="207.50">c..</text></g><g><title>codegen_module_optimize (1,839,760 samples, 4.47%)</title><rect x="47.7555%" y="197" width="4.4685%" height="15" fill="rgb(240,187,13)"/><text x="48.0055%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (444,435 samples, 1.08%)</title><rect x="51.1445%" y="181" width="1.0795%" height="15" fill="rgb(223,113,26)"/><text x="51.3945%" y="191.50"></text></g><g><title>LLVM_lto_optimize (239,433 samples, 0.58%)</title><rect x="53.2125%" y="181" width="0.5815%" height="15" fill="rgb(206,192,2)"/><text x="53.4625%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,427,517 samples, 5.90%)</title><rect x="53.7940%" y="181" width="5.8960%" height="15" fill="rgb(241,108,4)"/><text x="54.0440%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (2,390,666 samples, 5.81%)</title><rect x="53.8835%" y="165" width="5.8065%" height="15" fill="rgb(247,173,49)"/><text x="54.1335%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (3,106,864 samples, 7.55%)</title><rect x="52.2240%" y="197" width="7.5461%" height="15" fill="rgb(224,114,35)"/><text x="52.4740%" y="207.50">codegen_mo..</text></g><g><title>AST_validation (58,620 samples, 0.14%)</title><rect x="60.0874%" y="181" width="0.1424%" height="15" fill="rgb(245,159,27)"/><text x="60.3374%" y="191.50"></text></g><g><title>crate_injection (51,720 samples, 0.13%)</title><rect x="60.2597%" y="181" width="0.1256%" height="15" fill="rgb(245,172,44)"/><text x="60.5097%" y="191.50"></text></g><g><title>macro_expand_crate (5,507,480 samples, 13.38%)</title><rect x="60.3854%" y="181" width="13.3768%" height="15" fill="rgb(236,23,11)"/><text x="60.6354%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (5,497,070 samples, 13.35%)</title><rect x="60.4106%" y="165" width="13.3515%" height="15" fill="rgb(205,117,38)"/><text x="60.6606%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,310,714 samples, 3.18%)</title><rect x="70.5786%" y="149" width="3.1835%" height="15" fill="rgb(237,72,25)"/><text x="70.8286%" y="159.50">met..</text></g><g><title>metadata_register_crate (484,965 samples, 1.18%)</title><rect x="72.5842%" y="133" width="1.1779%" height="15" fill="rgb(244,70,9)"/><text x="72.8342%" y="143.50"></text></g><g><title>metadata_register_crate (43,450 samples, 0.11%)</title><rect x="73.6566%" y="117" width="0.1055%" height="15" fill="rgb(217,125,39)"/><text x="73.9066%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (104,671 samples, 0.25%)</title><rect x="73.7695%" y="181" width="0.2542%" height="15" fill="rgb(235,36,10)"/><text x="74.0195%" y="191.50"></text></g><g><title>finalize_macro_resolutions (139,362 samples, 0.34%)</title><rect x="74.0791%" y="165" width="0.3385%" height="15" fill="rgb(251,123,47)"/><text x="74.3291%" y="175.50"></text></g><g><title>late_resolve_crate (237,743 samples, 0.58%)</title><rect x="74.4176%" y="165" width="0.5774%" height="15" fill="rgb(221,13,13)"/><text x="74.6676%" y="175.50"></text></g><g><title>configure_and_expand (6,296,909 samples, 15.29%)</title><rect x="59.7700%" y="197" width="15.2942%" height="15" fill="rgb(238,131,9)"/><text x="60.0200%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (428,385 samples, 1.04%)</title><rect x="74.0237%" y="181" width="1.0405%" height="15" fill="rgb(211,50,8)"/><text x="74.2737%" y="191.50"></text></g><g><title>drop_ast (51,690 samples, 0.13%)</title><rect x="75.0642%" y="197" width="0.1255%" height="15" fill="rgb(245,182,24)"/><text x="75.3142%" y="207.50"></text></g><g><title>early_lint_checks (66,431 samples, 0.16%)</title><rect x="75.2193%" y="197" width="0.1614%" height="15" fill="rgb(242,14,37)"/><text x="75.4693%" y="207.50"></text></g><g><title>free_global_ctxt (2,693,319 samples, 6.54%)</title><rect x="75.3807%" y="197" width="6.5416%" height="15" fill="rgb(246,228,12)"/><text x="75.6307%" y="207.50">free_glob..</text></g><g><title>crate_hash (68,691 samples, 0.17%)</title><rect x="82.6764%" y="181" width="0.1668%" height="15" fill="rgb(213,55,15)"/><text x="82.9264%" y="191.50"></text></g><g><title>layout_of (111,902 samples, 0.27%)</title><rect x="83.7987%" y="165" width="0.2718%" height="15" fill="rgb(209,9,3)"/><text x="84.0487%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (208,961 samples, 0.51%)</title><rect x="84.0705%" y="165" width="0.5075%" height="15" fill="rgb(230,59,30)"/><text x="84.3205%" y="175.50"></text></g><g><title>optimized_mir (622,817 samples, 1.51%)</title><rect x="83.0842%" y="181" width="1.5127%" height="15" fill="rgb(209,121,21)"/><text x="83.3342%" y="191.50"></text></g><g><title>generate_crate_metadata (1,114,982 samples, 2.71%)</title><rect x="81.9223%" y="197" width="2.7081%" height="15" fill="rgb(220,109,13)"/><text x="82.1723%" y="207.50">ge..</text></g><g><title>hir_lowering (341,604 samples, 0.83%)</title><rect x="84.6304%" y="197" width="0.8297%" height="15" fill="rgb(232,18,1)"/><text x="84.8804%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,101,324 samples, 7.53%)</title><rect x="85.4910%" y="181" width="7.5326%" height="15" fill="rgb(215,41,42)"/><text x="85.7410%" y="191.50">finish_ong..</text></g><g><title>link_crate (539,355 samples, 1.31%)</title><rect x="93.0236%" y="181" width="1.3100%" height="15" fill="rgb(224,123,36)"/><text x="93.2736%" y="191.50"></text></g><g><title>link_binary (526,675 samples, 1.28%)</title><rect x="93.0544%" y="165" width="1.2792%" height="15" fill="rgb(240,125,3)"/><text x="93.3044%" y="175.50"></text></g><g><title>link_rlib (315,603 samples, 0.77%)</title><rect x="93.5671%" y="149" width="0.7665%" height="15" fill="rgb(205,98,50)"/><text x="93.8171%" y="159.50"></text></g><g><title>link (3,661,130 samples, 8.89%)</title><rect x="85.4601%" y="197" width="8.8923%" height="15" fill="rgb(205,185,37)"/><text x="85.7101%" y="207.50">link</text></g><g><title>parse_crate (1,392,665 samples, 3.38%)</title><rect x="94.3524%" y="197" width="3.3826%" height="15" fill="rgb(238,207,15)"/><text x="94.6024%" y="207.50">par..</text></g><g><title>prepare_outputs (175,182 samples, 0.43%)</title><rect x="97.7507%" y="197" width="0.4255%" height="15" fill="rgb(213,199,42)"/><text x="98.0007%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (380,174 samples, 0.92%)</title><rect x="98.1762%" y="197" width="0.9234%" height="15" fill="rgb(235,201,11)"/><text x="98.4262%" y="207.50"></text></g><g><title>setup_global_ctxt (77,980 samples, 0.19%)</title><rect x="99.1018%" y="197" width="0.1894%" height="15" fill="rgb(207,46,11)"/><text x="99.3518%" y="207.50"></text></g><g><title>all (41,171,943 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (41,171,943 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (291,823 samples, 0.71%)</title><rect x="99.2912%" y="197" width="0.7088%" height="15" fill="rgb(247,202,23)"/><text x="99.5412%" y="207.50"></text></g></svg></svg>