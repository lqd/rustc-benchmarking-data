<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,354,349 samples, 12.23%)</title><rect x="1.5507%" y="229" width="12.2287%" height="15" fill="rgb(227,0,7)"/><text x="1.8007%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (109,481 samples, 0.25%)</title><rect x="13.5293%" y="213" width="0.2500%" height="15" fill="rgb(217,0,24)"/><text x="13.7793%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (94,991 samples, 0.22%)</title><rect x="13.5624%" y="197" width="0.2169%" height="15" fill="rgb(221,193,54)"/><text x="13.8124%" y="207.50"></text></g><g><title>needs_drop_raw (173,672 samples, 0.40%)</title><rect x="17.0170%" y="117" width="0.3966%" height="15" fill="rgb(248,212,6)"/><text x="17.2670%" y="127.50"></text></g><g><title>is_copy_raw (168,012 samples, 0.38%)</title><rect x="17.0300%" y="101" width="0.3837%" height="15" fill="rgb(208,68,35)"/><text x="17.2800%" y="111.50"></text></g><g><title>evaluate_obligation (156,152 samples, 0.36%)</title><rect x="17.0571%" y="85" width="0.3566%" height="15" fill="rgb(232,128,0)"/><text x="17.3071%" y="95.50"></text></g><g><title>trait_impls_of (135,412 samples, 0.31%)</title><rect x="17.1044%" y="69" width="0.3093%" height="15" fill="rgb(207,160,47)"/><text x="17.3544%" y="79.50"></text></g><g><title>mir_const (590,756 samples, 1.35%)</title><rect x="16.2325%" y="165" width="1.3492%" height="15" fill="rgb(228,23,34)"/><text x="16.4825%" y="175.50"></text></g><g><title>unsafety_check_result (470,925 samples, 1.08%)</title><rect x="16.5062%" y="149" width="1.0755%" height="15" fill="rgb(218,30,26)"/><text x="16.7562%" y="159.50"></text></g><g><title>mir_built (415,734 samples, 0.95%)</title><rect x="16.6323%" y="133" width="0.9495%" height="15" fill="rgb(220,122,19)"/><text x="16.8823%" y="143.50"></text></g><g><title>mir_promoted (678,386 samples, 1.55%)</title><rect x="16.0477%" y="181" width="1.5494%" height="15" fill="rgb(250,228,42)"/><text x="16.2977%" y="191.50"></text></g><g><title>type_op_prove_predicate (143,981 samples, 0.33%)</title><rect x="17.7514%" y="181" width="0.3288%" height="15" fill="rgb(240,193,28)"/><text x="18.0014%" y="191.50"></text></g><g><title>MIR_borrow_checking (1,756,519 samples, 4.01%)</title><rect x="14.0825%" y="213" width="4.0117%" height="15" fill="rgb(216,20,37)"/><text x="14.3325%" y="223.50">MIR_..</text></g><g><title>mir_borrowck (1,748,569 samples, 3.99%)</title><rect x="14.1006%" y="197" width="3.9935%" height="15" fill="rgb(206,188,39)"/><text x="14.3506%" y="207.50">mir_..</text></g><g><title>hir_module_items (112,821 samples, 0.26%)</title><rect x="18.1013%" y="213" width="0.2577%" height="15" fill="rgb(217,207,13)"/><text x="18.3513%" y="223.50"></text></g><g><title>get_lang_items (80,021 samples, 0.18%)</title><rect x="18.7190%" y="165" width="0.1828%" height="15" fill="rgb(231,73,38)"/><text x="18.9690%" y="175.50"></text></g><g><title>should_inherit_track_caller (67,070 samples, 0.15%)</title><rect x="18.9018%" y="165" width="0.1532%" height="15" fill="rgb(225,20,46)"/><text x="19.1518%" y="175.50"></text></g><g><title>codegen_fn_attrs (227,902 samples, 0.52%)</title><rect x="18.6039%" y="181" width="0.5205%" height="15" fill="rgb(210,31,41)"/><text x="18.8539%" y="191.50"></text></g><g><title>check_mod_attrs (318,363 samples, 0.73%)</title><rect x="18.3986%" y="197" width="0.7271%" height="15" fill="rgb(221,200,47)"/><text x="18.6486%" y="207.50"></text></g><g><title>lookup_stability (65,811 samples, 0.15%)</title><rect x="19.4913%" y="181" width="0.1503%" height="15" fill="rgb(226,26,5)"/><text x="19.7413%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (180,362 samples, 0.41%)</title><rect x="19.2549%" y="197" width="0.4119%" height="15" fill="rgb(249,33,26)"/><text x="19.5049%" y="207.50"></text></g><g><title>misc_checking_1 (612,777 samples, 1.40%)</title><rect x="18.3597%" y="213" width="1.3995%" height="15" fill="rgb(235,183,28)"/><text x="18.6097%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (65,291 samples, 0.15%)</title><rect x="19.7621%" y="197" width="0.1491%" height="15" fill="rgb(221,5,38)"/><text x="20.0121%" y="207.50"></text></g><g><title>check_mod_liveness (53,991 samples, 0.12%)</title><rect x="19.7879%" y="181" width="0.1233%" height="15" fill="rgb(247,18,42)"/><text x="20.0379%" y="191.50"></text></g><g><title>misc_checking_2 (142,372 samples, 0.33%)</title><rect x="19.7592%" y="213" width="0.3252%" height="15" fill="rgb(241,131,45)"/><text x="20.0092%" y="223.50"></text></g><g><title>match_checking (75,821 samples, 0.17%)</title><rect x="19.9112%" y="197" width="0.1732%" height="15" fill="rgb(249,31,29)"/><text x="20.1612%" y="207.50"></text></g><g><title>check_match (72,691 samples, 0.17%)</title><rect x="19.9184%" y="181" width="0.1660%" height="15" fill="rgb(225,111,53)"/><text x="20.1684%" y="191.50"></text></g><g><title>check_private_in_public (47,020 samples, 0.11%)</title><rect x="20.0995%" y="197" width="0.1074%" height="15" fill="rgb(238,160,17)"/><text x="20.3495%" y="207.50"></text></g><g><title>death_checking (90,951 samples, 0.21%)</title><rect x="20.2069%" y="197" width="0.2077%" height="15" fill="rgb(214,148,48)"/><text x="20.4569%" y="207.50"></text></g><g><title>crate_lints (116,082 samples, 0.27%)</title><rect x="20.4176%" y="181" width="0.2651%" height="15" fill="rgb(232,36,49)"/><text x="20.6676%" y="191.50"></text></g><g><title>lint_checking (150,212 samples, 0.34%)</title><rect x="20.4146%" y="197" width="0.3431%" height="15" fill="rgb(209,103,24)"/><text x="20.6646%" y="207.50"></text></g><g><title>privacy_access_levels (55,181 samples, 0.13%)</title><rect x="20.7577%" y="197" width="0.1260%" height="15" fill="rgb(229,88,8)"/><text x="21.0077%" y="207.50"></text></g><g><title>privacy_checking_modules (95,521 samples, 0.22%)</title><rect x="20.8837%" y="197" width="0.2182%" height="15" fill="rgb(213,181,19)"/><text x="21.1337%" y="207.50"></text></g><g><title>check_mod_privacy (94,321 samples, 0.22%)</title><rect x="20.8865%" y="181" width="0.2154%" height="15" fill="rgb(254,191,54)"/><text x="21.1365%" y="191.50"></text></g><g><title>misc_checking_3 (460,145 samples, 1.05%)</title><rect x="20.0844%" y="213" width="1.0509%" height="15" fill="rgb(241,83,37)"/><text x="20.3344%" y="223.50"></text></g><g><title>coherent_trait (78,111 samples, 0.18%)</title><rect x="21.2214%" y="181" width="0.1784%" height="15" fill="rgb(233,36,39)"/><text x="21.4714%" y="191.50"></text></g><g><title>specialization_graph_of (72,141 samples, 0.16%)</title><rect x="21.2350%" y="165" width="0.1648%" height="15" fill="rgb(226,3,54)"/><text x="21.4850%" y="175.50"></text></g><g><title>coherence_checking (128,832 samples, 0.29%)</title><rect x="21.1883%" y="197" width="0.2942%" height="15" fill="rgb(245,192,40)"/><text x="21.4383%" y="207.50"></text></g><g><title>impl_parent (98,101 samples, 0.22%)</title><rect x="23.7620%" y="53" width="0.2241%" height="15" fill="rgb(238,167,29)"/><text x="24.0120%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (77,331 samples, 0.18%)</title><rect x="23.8095%" y="37" width="0.1766%" height="15" fill="rgb(232,182,51)"/><text x="24.0595%" y="47.50"></text></g><g><title>impl_trait_ref (306,532 samples, 0.70%)</title><rect x="23.9861%" y="53" width="0.7001%" height="15" fill="rgb(231,60,39)"/><text x="24.2361%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (287,292 samples, 0.66%)</title><rect x="24.0300%" y="37" width="0.6561%" height="15" fill="rgb(208,69,12)"/><text x="24.2800%" y="47.50"></text></g><g><title>adt_destructor (521,816 samples, 1.19%)</title><rect x="23.5563%" y="117" width="1.1918%" height="15" fill="rgb(235,93,37)"/><text x="23.8063%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (521,076 samples, 1.19%)</title><rect x="23.5580%" y="101" width="1.1901%" height="15" fill="rgb(213,116,39)"/><text x="23.8080%" y="111.50"></text></g><g><title>coherent_trait (517,016 samples, 1.18%)</title><rect x="23.5672%" y="85" width="1.1808%" height="15" fill="rgb(222,207,29)"/><text x="23.8172%" y="95.50"></text></g><g><title>specialization_graph_of (515,246 samples, 1.18%)</title><rect x="23.5713%" y="69" width="1.1768%" height="15" fill="rgb(206,96,30)"/><text x="23.8213%" y="79.50"></text></g><g><title>adt_dtorck_constraint (532,766 samples, 1.22%)</title><rect x="23.5363%" y="133" width="1.2168%" height="15" fill="rgb(218,138,4)"/><text x="23.7863%" y="143.50"></text></g><g><title>dropck_outlives (627,898 samples, 1.43%)</title><rect x="23.4088%" y="149" width="1.4340%" height="15" fill="rgb(250,191,14)"/><text x="23.6588%" y="159.50"></text></g><g><title>method_autoderef_steps (58,171 samples, 0.13%)</title><rect x="25.0464%" y="149" width="0.1329%" height="15" fill="rgb(239,60,40)"/><text x="25.2964%" y="159.50"></text></g><g><title>item_bodies_checking (1,640,198 samples, 3.75%)</title><rect x="21.5362%" y="197" width="3.7460%" height="15" fill="rgb(206,27,48)"/><text x="21.7862%" y="207.50">item..</text></g><g><title>typeck_item_bodies (1,638,678 samples, 3.74%)</title><rect x="21.5396%" y="181" width="3.7425%" height="15" fill="rgb(225,35,8)"/><text x="21.7896%" y="191.50">type..</text></g><g><title>typeck (1,631,498 samples, 3.73%)</title><rect x="21.5560%" y="165" width="3.7261%" height="15" fill="rgb(250,213,24)"/><text x="21.8060%" y="175.50">type..</text></g><g><title>item_types_checking (545,286 samples, 1.25%)</title><rect x="25.2822%" y="197" width="1.2454%" height="15" fill="rgb(247,123,22)"/><text x="25.5322%" y="207.50"></text></g><g><title>check_mod_item_types (543,306 samples, 1.24%)</title><rect x="25.2867%" y="181" width="1.2408%" height="15" fill="rgb(231,138,38)"/><text x="25.5367%" y="191.50"></text></g><g><title>fn_sig (121,942 samples, 0.28%)</title><rect x="26.8108%" y="165" width="0.2785%" height="15" fill="rgb(231,145,46)"/><text x="27.0608%" y="175.50"></text></g><g><title>is_late_bound_map (81,661 samples, 0.19%)</title><rect x="27.2246%" y="149" width="0.1865%" height="15" fill="rgb(251,118,11)"/><text x="27.4746%" y="159.50"></text></g><g><title>resolve_lifetimes (75,701 samples, 0.17%)</title><rect x="27.2382%" y="133" width="0.1729%" height="15" fill="rgb(217,147,25)"/><text x="27.4882%" y="143.50"></text></g><g><title>generics_of (168,852 samples, 0.39%)</title><rect x="27.0893%" y="165" width="0.3856%" height="15" fill="rgb(247,81,37)"/><text x="27.3393%" y="175.50"></text></g><g><title>late_bound_vars_map (68,081 samples, 0.16%)</title><rect x="27.8980%" y="133" width="0.1555%" height="15" fill="rgb(209,12,38)"/><text x="28.1480%" y="143.50"></text></g><g><title>resolve_lifetimes (64,851 samples, 0.15%)</title><rect x="27.9054%" y="117" width="0.1481%" height="15" fill="rgb(227,1,9)"/><text x="28.1554%" y="127.50"></text></g><g><title>explicit_item_bounds (218,272 samples, 0.50%)</title><rect x="27.6633%" y="149" width="0.4985%" height="15" fill="rgb(248,47,43)"/><text x="27.9133%" y="159.50"></text></g><g><title>item_bounds (306,043 samples, 0.70%)</title><rect x="27.4964%" y="165" width="0.6990%" height="15" fill="rgb(221,10,30)"/><text x="27.7464%" y="175.50"></text></g><g><title>explicit_predicates_of (166,820 samples, 0.38%)</title><rect x="28.3233%" y="133" width="0.3810%" height="15" fill="rgb(210,229,1)"/><text x="28.5733%" y="143.50"></text></g><g><title>trait_explicit_predicates_and_bounds (51,750 samples, 0.12%)</title><rect x="28.5862%" y="117" width="0.1182%" height="15" fill="rgb(222,148,37)"/><text x="28.8362%" y="127.50"></text></g><g><title>predicates_of (232,742 samples, 0.53%)</title><rect x="28.1954%" y="165" width="0.5316%" height="15" fill="rgb(234,67,33)"/><text x="28.4454%" y="175.50"></text></g><g><title>predicates_defined_on (215,912 samples, 0.49%)</title><rect x="28.2338%" y="149" width="0.4931%" height="15" fill="rgb(247,98,35)"/><text x="28.4838%" y="159.50"></text></g><g><title>super_predicates_of (49,521 samples, 0.11%)</title><rect x="28.7269%" y="165" width="0.1131%" height="15" fill="rgb(247,138,52)"/><text x="28.9769%" y="175.50"></text></g><g><title>type_collecting (1,171,083 samples, 2.67%)</title><rect x="26.5304%" y="197" width="2.6746%" height="15" fill="rgb(213,79,30)"/><text x="26.7804%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (1,161,763 samples, 2.65%)</title><rect x="26.5517%" y="181" width="2.6533%" height="15" fill="rgb(246,177,23)"/><text x="26.8017%" y="191.50">co..</text></g><g><title>type_of (150,562 samples, 0.34%)</title><rect x="28.8612%" y="165" width="0.3439%" height="15" fill="rgb(230,62,27)"/><text x="29.1112%" y="175.50"></text></g><g><title>type_param_predicates (56,801 samples, 0.13%)</title><rect x="29.0753%" y="149" width="0.1297%" height="15" fill="rgb(216,154,8)"/><text x="29.3253%" y="159.50"></text></g><g><title>type_param_predicates (47,321 samples, 0.11%)</title><rect x="29.0969%" y="133" width="0.1081%" height="15" fill="rgb(244,35,45)"/><text x="29.3469%" y="143.50"></text></g><g><title>evaluate_obligation (45,600 samples, 0.10%)</title><rect x="30.0864%" y="165" width="0.1041%" height="15" fill="rgb(251,115,12)"/><text x="30.3364%" y="175.50"></text></g><g><title>implied_outlives_bounds (58,701 samples, 0.13%)</title><rect x="30.1906%" y="165" width="0.1341%" height="15" fill="rgb(240,54,50)"/><text x="30.4406%" y="175.50"></text></g><g><title>param_env (67,500 samples, 0.15%)</title><rect x="30.3247%" y="165" width="0.1542%" height="15" fill="rgb(233,84,52)"/><text x="30.5747%" y="175.50"></text></g><g><title>check_impl_item_well_formed (541,176 samples, 1.24%)</title><rect x="29.2879%" y="181" width="1.2360%" height="15" fill="rgb(207,117,47)"/><text x="29.5379%" y="191.50"></text></g><g><title>evaluate_obligation (55,591 samples, 0.13%)</title><rect x="31.2218%" y="165" width="0.1270%" height="15" fill="rgb(249,43,39)"/><text x="31.4718%" y="175.50"></text></g><g><title>param_env (127,701 samples, 0.29%)</title><rect x="31.3846%" y="165" width="0.2917%" height="15" fill="rgb(209,38,44)"/><text x="31.6346%" y="175.50"></text></g><g><title>check_item_well_formed (546,896 samples, 1.25%)</title><rect x="30.5239%" y="181" width="1.2490%" height="15" fill="rgb(236,212,23)"/><text x="30.7739%" y="191.50"></text></g><g><title>evaluate_obligation (190,943 samples, 0.44%)</title><rect x="32.8836%" y="165" width="0.4361%" height="15" fill="rgb(242,79,21)"/><text x="33.1336%" y="175.50"></text></g><g><title>implied_outlives_bounds (78,710 samples, 0.18%)</title><rect x="33.3197%" y="165" width="0.1798%" height="15" fill="rgb(211,96,35)"/><text x="33.5697%" y="175.50"></text></g><g><title>param_env (50,392 samples, 0.12%)</title><rect x="33.4995%" y="165" width="0.1151%" height="15" fill="rgb(253,215,40)"/><text x="33.7495%" y="175.50"></text></g><g><title>predicates_of (55,110 samples, 0.13%)</title><rect x="33.6146%" y="165" width="0.1259%" height="15" fill="rgb(211,81,21)"/><text x="33.8646%" y="175.50"></text></g><g><title>predicates_defined_on (50,060 samples, 0.11%)</title><rect x="33.6261%" y="149" width="0.1143%" height="15" fill="rgb(208,190,38)"/><text x="33.8761%" y="159.50"></text></g><g><title>analysis (8,787,027 samples, 20.07%)</title><rect x="13.7794%" y="229" width="20.0685%" height="15" fill="rgb(235,213,38)"/><text x="14.0294%" y="239.50">analysis</text></g><g><title>type_check_crate (5,566,232 samples, 12.71%)</title><rect x="21.1353%" y="213" width="12.7126%" height="15" fill="rgb(237,122,38)"/><text x="21.3853%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,032,353 samples, 4.64%)</title><rect x="29.2062%" y="197" width="4.6416%" height="15" fill="rgb(244,218,35)"/><text x="29.4562%" y="207.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (908,511 samples, 2.07%)</title><rect x="31.7730%" y="181" width="2.0749%" height="15" fill="rgb(240,68,47)"/><text x="32.0230%" y="191.50">c..</text></g><g><title>codegen_module (207,592 samples, 0.47%)</title><rect x="34.8933%" y="213" width="0.4741%" height="15" fill="rgb(210,16,53)"/><text x="35.1433%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (55,211 samples, 0.13%)</title><rect x="35.3681%" y="213" width="0.1261%" height="15" fill="rgb(235,124,12)"/><text x="35.6181%" y="223.50"></text></g><g><title>codegen_crate (776,819 samples, 1.77%)</title><rect x="33.8722%" y="229" width="1.7742%" height="15" fill="rgb(224,169,11)"/><text x="34.1222%" y="239.50">c..</text></g><g><title>codegen_module_optimize (597,137 samples, 1.36%)</title><rect x="35.6463%" y="229" width="1.3638%" height="15" fill="rgb(250,166,2)"/><text x="35.8963%" y="239.50"></text></g><g><title>LLVM_module_optimize (305,674 samples, 0.70%)</title><rect x="36.3120%" y="213" width="0.6981%" height="15" fill="rgb(242,216,29)"/><text x="36.5620%" y="223.50"></text></g><g><title>LLVM_lto_optimize (292,543 samples, 0.67%)</title><rect x="37.8802%" y="213" width="0.6681%" height="15" fill="rgb(230,116,27)"/><text x="38.1302%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,475,607 samples, 5.65%)</title><rect x="38.5483%" y="213" width="5.6540%" height="15" fill="rgb(228,99,48)"/><text x="38.7983%" y="223.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (2,418,266 samples, 5.52%)</title><rect x="38.6793%" y="197" width="5.5230%" height="15" fill="rgb(253,11,6)"/><text x="38.9293%" y="207.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (3,193,756 samples, 7.29%)</title><rect x="37.0101%" y="229" width="7.2941%" height="15" fill="rgb(247,143,39)"/><text x="37.2601%" y="239.50">codegen_mo..</text></g><g><title>AST_validation (128,491 samples, 0.29%)</title><rect x="44.8302%" y="213" width="0.2935%" height="15" fill="rgb(236,97,10)"/><text x="45.0802%" y="223.50"></text></g><g><title>crate_injection (78,611 samples, 0.18%)</title><rect x="45.2119%" y="213" width="0.1795%" height="15" fill="rgb(233,208,19)"/><text x="45.4619%" y="223.50"></text></g><g><title>metadata_load_macro (240,782 samples, 0.55%)</title><rect x="66.5740%" y="181" width="0.5499%" height="15" fill="rgb(216,164,2)"/><text x="66.8240%" y="191.50"></text></g><g><title>macro_expand_crate (12,177,445 samples, 27.81%)</title><rect x="45.3914%" y="213" width="27.8118%" height="15" fill="rgb(220,129,5)"/><text x="45.6414%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,151,584 samples, 27.75%)</title><rect x="45.4505%" y="197" width="27.7527%" height="15" fill="rgb(242,17,10)"/><text x="45.7005%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,661,829 samples, 6.08%)</title><rect x="67.1239%" y="181" width="6.0793%" height="15" fill="rgb(242,107,0)"/><text x="67.3739%" y="191.50">metadata..</text></g><g><title>metadata_register_crate (952,128 samples, 2.17%)</title><rect x="71.0287%" y="165" width="2.1745%" height="15" fill="rgb(251,28,31)"/><text x="71.2787%" y="175.50">m..</text></g><g><title>metadata_register_crate (71,041 samples, 0.16%)</title><rect x="73.0410%" y="149" width="0.1622%" height="15" fill="rgb(233,223,10)"/><text x="73.2910%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (159,362 samples, 0.36%)</title><rect x="73.2147%" y="213" width="0.3640%" height="15" fill="rgb(215,21,27)"/><text x="73.4647%" y="223.50"></text></g><g><title>finalize_imports (271,503 samples, 0.62%)</title><rect x="73.6006%" y="197" width="0.6201%" height="15" fill="rgb(232,23,21)"/><text x="73.8506%" y="207.50"></text></g><g><title>late_resolve_crate (506,936 samples, 1.16%)</title><rect x="74.2439%" y="197" width="1.1578%" height="15" fill="rgb(244,5,23)"/><text x="74.4939%" y="207.50"></text></g><g><title>configure_and_expand (13,675,951 samples, 31.23%)</title><rect x="44.3043%" y="229" width="31.2342%" height="15" fill="rgb(226,81,46)"/><text x="44.5543%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (858,110 samples, 1.96%)</title><rect x="73.5786%" y="213" width="1.9598%" height="15" fill="rgb(247,70,30)"/><text x="73.8286%" y="223.50">r..</text></g><g><title>drop_ast (47,071 samples, 0.11%)</title><rect x="75.5385%" y="229" width="0.1075%" height="15" fill="rgb(212,68,19)"/><text x="75.7885%" y="239.50"></text></g><g><title>early_lint_checks (134,711 samples, 0.31%)</title><rect x="75.6928%" y="229" width="0.3077%" height="15" fill="rgb(240,187,13)"/><text x="75.9428%" y="239.50"></text></g><g><title>free_global_ctxt (2,429,037 samples, 5.55%)</title><rect x="76.0005%" y="229" width="5.5476%" height="15" fill="rgb(223,113,26)"/><text x="76.2505%" y="239.50">free_gl..</text></g><g><title>crate_hash (67,221 samples, 0.15%)</title><rect x="82.3406%" y="213" width="0.1535%" height="15" fill="rgb(206,192,2)"/><text x="82.5906%" y="223.50"></text></g><g><title>adt_sized_constraint (44,211 samples, 0.10%)</title><rect x="83.3737%" y="165" width="0.1010%" height="15" fill="rgb(241,108,4)"/><text x="83.6237%" y="175.50"></text></g><g><title>adt_sized_constraint (88,611 samples, 0.20%)</title><rect x="83.2753%" y="181" width="0.2024%" height="15" fill="rgb(247,173,49)"/><text x="83.5253%" y="191.50"></text></g><g><title>layout_of (211,263 samples, 0.48%)</title><rect x="83.2176%" y="197" width="0.4825%" height="15" fill="rgb(224,114,35)"/><text x="83.4676%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (62,722 samples, 0.14%)</title><rect x="83.5568%" y="181" width="0.1432%" height="15" fill="rgb(245,159,27)"/><text x="83.8068%" y="191.50"></text></g><g><title>optimized_mir (667,778 samples, 1.53%)</title><rect x="82.7286%" y="213" width="1.5251%" height="15" fill="rgb(245,172,44)"/><text x="82.9786%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (242,423 samples, 0.55%)</title><rect x="83.7001%" y="197" width="0.5537%" height="15" fill="rgb(236,23,11)"/><text x="83.9501%" y="207.50"></text></g><g><title>generate_crate_metadata (1,224,204 samples, 2.80%)</title><rect x="81.5481%" y="229" width="2.7959%" height="15" fill="rgb(205,117,38)"/><text x="81.7981%" y="239.50">ge..</text></g><g><title>hir_lowering (783,559 samples, 1.79%)</title><rect x="84.3440%" y="229" width="1.7896%" height="15" fill="rgb(237,72,25)"/><text x="84.5940%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (2,442,907 samples, 5.58%)</title><rect x="86.1786%" y="213" width="5.5793%" height="15" fill="rgb(244,70,9)"/><text x="86.4286%" y="223.50">finish_..</text></g><g><title>link_crate (962,661 samples, 2.20%)</title><rect x="91.7579%" y="213" width="2.1986%" height="15" fill="rgb(217,125,39)"/><text x="92.0079%" y="223.50">l..</text></g><g><title>link_binary (946,981 samples, 2.16%)</title><rect x="91.7937%" y="197" width="2.1628%" height="15" fill="rgb(235,36,10)"/><text x="92.0437%" y="207.50">l..</text></g><g><title>link_rlib (581,637 samples, 1.33%)</title><rect x="92.6281%" y="181" width="1.3284%" height="15" fill="rgb(251,123,47)"/><text x="92.8781%" y="191.50"></text></g><g><title>link (3,438,228 samples, 7.85%)</title><rect x="86.1336%" y="229" width="7.8525%" height="15" fill="rgb(221,13,13)"/><text x="86.3836%" y="239.50">link</text></g><g><title>parse_crate (1,266,884 samples, 2.89%)</title><rect x="93.9861%" y="229" width="2.8934%" height="15" fill="rgb(238,131,9)"/><text x="94.2361%" y="239.50">pa..</text></g><g><title>prepare_outputs (351,714 samples, 0.80%)</title><rect x="96.9013%" y="229" width="0.8033%" height="15" fill="rgb(211,50,8)"/><text x="97.1513%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (577,926 samples, 1.32%)</title><rect x="97.7046%" y="229" width="1.3199%" height="15" fill="rgb(245,182,24)"/><text x="97.9546%" y="239.50"></text></g><g><title>setup_global_ctxt (125,501 samples, 0.29%)</title><rect x="99.0277%" y="229" width="0.2866%" height="15" fill="rgb(242,14,37)"/><text x="99.2777%" y="239.50"></text></g><g><title>all (43,785,175 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (43,785,175 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (300,223 samples, 0.69%)</title><rect x="99.3143%" y="229" width="0.6857%" height="15" fill="rgb(209,9,3)"/><text x="99.5643%" y="239.50"></text></g></svg></svg>