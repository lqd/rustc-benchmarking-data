<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,465,969 samples, 8.95%)</title><rect x="0.6666%" y="181" width="8.9458%" height="15" fill="rgb(227,0,7)"/><text x="0.9166%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (125,251 samples, 0.20%)</title><rect x="9.4074%" y="165" width="0.2050%" height="15" fill="rgb(217,0,24)"/><text x="9.6574%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (114,661 samples, 0.19%)</title><rect x="9.4247%" y="149" width="0.1877%" height="15" fill="rgb(221,193,54)"/><text x="9.6747%" y="159.50"></text></g><g><title>implied_outlives_bounds (166,312 samples, 0.27%)</title><rect x="16.3789%" y="133" width="0.2722%" height="15" fill="rgb(248,212,6)"/><text x="16.6289%" y="143.50"></text></g><g><title>param_env (79,651 samples, 0.13%)</title><rect x="17.5864%" y="101" width="0.1304%" height="15" fill="rgb(208,68,35)"/><text x="17.8364%" y="111.50"></text></g><g><title>item_attrs (82,370 samples, 0.13%)</title><rect x="17.9748%" y="69" width="0.1348%" height="15" fill="rgb(232,128,0)"/><text x="18.2248%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (78,950 samples, 0.13%)</title><rect x="17.9804%" y="53" width="0.1292%" height="15" fill="rgb(207,160,47)"/><text x="18.2304%" y="63.50"></text></g><g><title>codegen_fn_attrs (114,921 samples, 0.19%)</title><rect x="17.9265%" y="85" width="0.1881%" height="15" fill="rgb(228,23,34)"/><text x="18.1765%" y="95.50"></text></g><g><title>is_copy_raw (159,781 samples, 0.26%)</title><rect x="19.4288%" y="69" width="0.2615%" height="15" fill="rgb(218,30,26)"/><text x="19.6788%" y="79.50"></text></g><g><title>evaluate_obligation (133,601 samples, 0.22%)</title><rect x="19.4716%" y="53" width="0.2187%" height="15" fill="rgb(220,122,19)"/><text x="19.7216%" y="63.50"></text></g><g><title>needs_drop_raw (424,444 samples, 0.69%)</title><rect x="19.6903%" y="69" width="0.6947%" height="15" fill="rgb(250,228,42)"/><text x="19.9403%" y="79.50"></text></g><g><title>is_copy_raw (346,863 samples, 0.57%)</title><rect x="19.8173%" y="53" width="0.5677%" height="15" fill="rgb(240,193,28)"/><text x="20.0673%" y="63.50"></text></g><g><title>evaluate_obligation (305,623 samples, 0.50%)</title><rect x="19.8847%" y="37" width="0.5002%" height="15" fill="rgb(216,20,37)"/><text x="20.1347%" y="47.50"></text></g><g><title>thir_body (268,442 samples, 0.44%)</title><rect x="20.4785%" y="69" width="0.4393%" height="15" fill="rgb(206,188,39)"/><text x="20.7285%" y="79.50"></text></g><g><title>mir_const (2,313,836 samples, 3.79%)</title><rect x="17.1469%" y="117" width="3.7869%" height="15" fill="rgb(217,207,13)"/><text x="17.3969%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (1,965,629 samples, 3.22%)</title><rect x="17.7168%" y="101" width="3.2170%" height="15" fill="rgb(231,73,38)"/><text x="17.9668%" y="111.50">uns..</text></g><g><title>mir_built (1,722,556 samples, 2.82%)</title><rect x="18.1146%" y="85" width="2.8192%" height="15" fill="rgb(225,20,46)"/><text x="18.3646%" y="95.50">mi..</text></g><g><title>mir_promoted (2,809,250 samples, 4.60%)</title><rect x="16.6899%" y="133" width="4.5977%" height="15" fill="rgb(210,31,41)"/><text x="16.9399%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (216,182 samples, 0.35%)</title><rect x="20.9338%" y="117" width="0.3538%" height="15" fill="rgb(221,200,47)"/><text x="21.1838%" y="127.50"></text></g><g><title>mir_const (160,151 samples, 0.26%)</title><rect x="21.0255%" y="101" width="0.2621%" height="15" fill="rgb(226,26,5)"/><text x="21.2755%" y="111.50"></text></g><g><title>unsafety_check_result (109,251 samples, 0.18%)</title><rect x="21.1088%" y="85" width="0.1788%" height="15" fill="rgb(249,33,26)"/><text x="21.3588%" y="95.50"></text></g><g><title>mir_built (74,760 samples, 0.12%)</title><rect x="21.1653%" y="69" width="0.1224%" height="15" fill="rgb(235,183,28)"/><text x="21.4153%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (106,551 samples, 0.17%)</title><rect x="21.2876%" y="133" width="0.1744%" height="15" fill="rgb(221,5,38)"/><text x="21.5376%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,178,205 samples, 1.93%)</title><rect x="21.5612%" y="133" width="1.9283%" height="15" fill="rgb(247,18,42)"/><text x="21.8112%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (8,335,962 samples, 13.64%)</title><rect x="9.8505%" y="165" width="13.6430%" height="15" fill="rgb(241,131,45)"/><text x="10.1005%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,287,790 samples, 13.56%)</title><rect x="9.9293%" y="149" width="13.5641%" height="15" fill="rgb(249,31,29)"/><text x="10.1793%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (133,002 samples, 0.22%)</title><rect x="23.4935%" y="165" width="0.2177%" height="15" fill="rgb(225,111,53)"/><text x="23.7435%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (107,231 samples, 0.18%)</title><rect x="23.5356%" y="149" width="0.1755%" height="15" fill="rgb(238,160,17)"/><text x="23.7856%" y="159.50"></text></g><g><title>hir_module_items (101,992 samples, 0.17%)</title><rect x="23.7111%" y="165" width="0.1669%" height="15" fill="rgb(214,148,48)"/><text x="23.9611%" y="175.50"></text></g><g><title>should_inherit_track_caller (110,941 samples, 0.18%)</title><rect x="24.2450%" y="117" width="0.1816%" height="15" fill="rgb(232,36,49)"/><text x="24.4950%" y="127.50"></text></g><g><title>codegen_fn_attrs (211,954 samples, 0.35%)</title><rect x="24.1119%" y="133" width="0.3469%" height="15" fill="rgb(209,103,24)"/><text x="24.3619%" y="143.50"></text></g><g><title>check_mod_attrs (325,965 samples, 0.53%)</title><rect x="23.9255%" y="149" width="0.5335%" height="15" fill="rgb(229,88,8)"/><text x="24.1755%" y="159.50"></text></g><g><title>lookup_deprecation_entry (88,831 samples, 0.15%)</title><rect x="24.7414%" y="133" width="0.1454%" height="15" fill="rgb(213,181,19)"/><text x="24.9914%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (223,721 samples, 0.37%)</title><rect x="24.5980%" y="149" width="0.3662%" height="15" fill="rgb(254,191,54)"/><text x="24.8480%" y="159.50"></text></g><g><title>misc_checking_1 (699,828 samples, 1.15%)</title><rect x="23.8790%" y="165" width="1.1454%" height="15" fill="rgb(241,83,37)"/><text x="24.1290%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (151,691 samples, 0.25%)</title><rect x="25.0270%" y="149" width="0.2483%" height="15" fill="rgb(233,36,39)"/><text x="25.2770%" y="159.50"></text></g><g><title>check_mod_liveness (114,021 samples, 0.19%)</title><rect x="25.0886%" y="133" width="0.1866%" height="15" fill="rgb(226,3,54)"/><text x="25.3386%" y="143.50"></text></g><g><title>misc_checking_2 (436,445 samples, 0.71%)</title><rect x="25.0244%" y="165" width="0.7143%" height="15" fill="rgb(245,192,40)"/><text x="25.2744%" y="175.50"></text></g><g><title>match_checking (283,174 samples, 0.46%)</title><rect x="25.2752%" y="149" width="0.4635%" height="15" fill="rgb(238,167,29)"/><text x="25.5252%" y="159.50"></text></g><g><title>check_match (265,814 samples, 0.44%)</title><rect x="25.3036%" y="133" width="0.4350%" height="15" fill="rgb(232,182,51)"/><text x="25.5536%" y="143.50"></text></g><g><title>check_private_in_public (92,671 samples, 0.15%)</title><rect x="25.7532%" y="149" width="0.1517%" height="15" fill="rgb(231,60,39)"/><text x="26.0032%" y="159.50"></text></g><g><title>death_checking (244,443 samples, 0.40%)</title><rect x="25.9049%" y="149" width="0.4001%" height="15" fill="rgb(208,69,12)"/><text x="26.1549%" y="159.50"></text></g><g><title>item_attrs (66,481 samples, 0.11%)</title><rect x="26.1962%" y="133" width="0.1088%" height="15" fill="rgb(235,93,37)"/><text x="26.4462%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,721 samples, 0.11%)</title><rect x="26.1974%" y="117" width="0.1076%" height="15" fill="rgb(213,116,39)"/><text x="26.4474%" y="127.50"></text></g><g><title>eval_to_const_value_raw (179,761 samples, 0.29%)</title><rect x="26.7976%" y="117" width="0.2942%" height="15" fill="rgb(222,207,29)"/><text x="27.0476%" y="127.50"></text></g><g><title>eval_to_const_value_raw (169,851 samples, 0.28%)</title><rect x="26.8139%" y="101" width="0.2780%" height="15" fill="rgb(206,96,30)"/><text x="27.0639%" y="111.50"></text></g><g><title>eval_to_allocation_raw (160,291 samples, 0.26%)</title><rect x="26.8295%" y="85" width="0.2623%" height="15" fill="rgb(218,138,4)"/><text x="27.0795%" y="95.50"></text></g><g><title>param_env (176,544 samples, 0.29%)</title><rect x="27.0918%" y="117" width="0.2889%" height="15" fill="rgb(250,191,14)"/><text x="27.3418%" y="127.50"></text></g><g><title>predicates_of (80,392 samples, 0.13%)</title><rect x="27.2492%" y="101" width="0.1316%" height="15" fill="rgb(239,60,40)"/><text x="27.4992%" y="111.50"></text></g><g><title>predicates_defined_on (66,921 samples, 0.11%)</title><rect x="27.2712%" y="85" width="0.1095%" height="15" fill="rgb(206,27,48)"/><text x="27.5212%" y="95.50"></text></g><g><title>crate_lints (1,230,264 samples, 2.01%)</title><rect x="26.3075%" y="133" width="2.0135%" height="15" fill="rgb(225,35,8)"/><text x="26.5575%" y="143.50">c..</text></g><g><title>type_of (570,027 samples, 0.93%)</title><rect x="27.3881%" y="117" width="0.9329%" height="15" fill="rgb(250,213,24)"/><text x="27.6381%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (241,723 samples, 0.40%)</title><rect x="27.9254%" y="101" width="0.3956%" height="15" fill="rgb(247,123,22)"/><text x="28.1754%" y="111.50"></text></g><g><title>lint_checking (1,413,216 samples, 2.31%)</title><rect x="26.3050%" y="149" width="2.3129%" height="15" fill="rgb(231,138,38)"/><text x="26.5550%" y="159.50">l..</text></g><g><title>module_lints (181,402 samples, 0.30%)</title><rect x="28.3210%" y="133" width="0.2969%" height="15" fill="rgb(231,145,46)"/><text x="28.5710%" y="143.50"></text></g><g><title>lint_mod (176,662 samples, 0.29%)</title><rect x="28.3288%" y="117" width="0.2891%" height="15" fill="rgb(251,118,11)"/><text x="28.5788%" y="127.50"></text></g><g><title>privacy_access_levels (111,681 samples, 0.18%)</title><rect x="28.6179%" y="149" width="0.1828%" height="15" fill="rgb(217,147,25)"/><text x="28.8679%" y="159.50"></text></g><g><title>privacy_checking_modules (275,253 samples, 0.45%)</title><rect x="28.8007%" y="149" width="0.4505%" height="15" fill="rgb(247,81,37)"/><text x="29.0507%" y="159.50"></text></g><g><title>check_mod_privacy (271,993 samples, 0.45%)</title><rect x="28.8060%" y="133" width="0.4452%" height="15" fill="rgb(209,12,38)"/><text x="29.0560%" y="143.50"></text></g><g><title>misc_checking_3 (2,157,154 samples, 3.53%)</title><rect x="25.7387%" y="165" width="3.5305%" height="15" fill="rgb(227,1,9)"/><text x="25.9887%" y="175.50">mis..</text></g><g><title>is_copy_raw (160,412 samples, 0.26%)</title><rect x="29.4862%" y="117" width="0.2625%" height="15" fill="rgb(248,47,43)"/><text x="29.7362%" y="127.50"></text></g><g><title>evaluate_obligation (133,342 samples, 0.22%)</title><rect x="29.5305%" y="101" width="0.2182%" height="15" fill="rgb(221,10,30)"/><text x="29.7805%" y="111.50"></text></g><g><title>param_env (88,881 samples, 0.15%)</title><rect x="29.7487%" y="117" width="0.1455%" height="15" fill="rgb(210,229,1)"/><text x="29.9987%" y="127.50"></text></g><g><title>impl_parent (564,055 samples, 0.92%)</title><rect x="31.3798%" y="101" width="0.9232%" height="15" fill="rgb(222,148,37)"/><text x="31.6298%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (348,082 samples, 0.57%)</title><rect x="31.7332%" y="85" width="0.5697%" height="15" fill="rgb(234,67,33)"/><text x="31.9832%" y="95.50"></text></g><g><title>impl_trait_ref (1,354,518 samples, 2.22%)</title><rect x="32.3029%" y="101" width="2.2169%" height="15" fill="rgb(247,98,35)"/><text x="32.5529%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,129,796 samples, 1.85%)</title><rect x="32.6707%" y="85" width="1.8491%" height="15" fill="rgb(247,138,52)"/><text x="32.9207%" y="95.50">m..</text></g><g><title>coherent_trait (3,348,796 samples, 5.48%)</title><rect x="29.3560%" y="133" width="5.4808%" height="15" fill="rgb(213,79,30)"/><text x="29.6060%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (3,019,953 samples, 4.94%)</title><rect x="29.8942%" y="117" width="4.9426%" height="15" fill="rgb(246,177,23)"/><text x="30.1442%" y="127.50">specia..</text></g><g><title>trait_impls_of (192,482 samples, 0.32%)</title><rect x="34.5217%" y="101" width="0.3150%" height="15" fill="rgb(230,62,27)"/><text x="34.7717%" y="111.50"></text></g><g><title>coherence_checking (3,411,967 samples, 5.58%)</title><rect x="29.3323%" y="149" width="5.5842%" height="15" fill="rgb(216,154,8)"/><text x="29.5823%" y="159.50">coheren..</text></g><g><title>associated_item (77,791 samples, 0.13%)</title><rect x="42.1891%" y="85" width="0.1273%" height="15" fill="rgb(244,35,45)"/><text x="42.4391%" y="95.50"></text></g><g><title>associated_items (120,891 samples, 0.20%)</title><rect x="42.1336%" y="101" width="0.1979%" height="15" fill="rgb(251,115,12)"/><text x="42.3836%" y="111.50"></text></g><g><title>dropck_outlives (97,880 samples, 0.16%)</title><rect x="42.3502%" y="101" width="0.1602%" height="15" fill="rgb(240,54,50)"/><text x="42.6002%" y="111.50"></text></g><g><title>specializes (83,950 samples, 0.14%)</title><rect x="42.9887%" y="85" width="0.1374%" height="15" fill="rgb(233,84,52)"/><text x="43.2387%" y="95.50"></text></g><g><title>param_env (74,880 samples, 0.12%)</title><rect x="43.0035%" y="69" width="0.1226%" height="15" fill="rgb(207,117,47)"/><text x="43.2535%" y="79.50"></text></g><g><title>def_span (64,500 samples, 0.11%)</title><rect x="43.0205%" y="53" width="0.1056%" height="15" fill="rgb(249,43,39)"/><text x="43.2705%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (63,880 samples, 0.10%)</title><rect x="43.0215%" y="37" width="0.1045%" height="15" fill="rgb(209,38,44)"/><text x="43.2715%" y="47.50"></text></g><g><title>evaluate_obligation (416,554 samples, 0.68%)</title><rect x="42.5104%" y="101" width="0.6817%" height="15" fill="rgb(236,212,23)"/><text x="42.7604%" y="111.50"></text></g><g><title>method_autoderef_steps (65,551 samples, 0.11%)</title><rect x="43.4292%" y="101" width="0.1073%" height="15" fill="rgb(242,79,21)"/><text x="43.6792%" y="111.50"></text></g><g><title>object_safety_violations (121,402 samples, 0.20%)</title><rect x="43.5365%" y="101" width="0.1987%" height="15" fill="rgb(211,96,35)"/><text x="43.7865%" y="111.50"></text></g><g><title>explicit_predicates_of (124,112 samples, 0.20%)</title><rect x="43.8429%" y="69" width="0.2031%" height="15" fill="rgb(253,215,40)"/><text x="44.0929%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (118,592 samples, 0.19%)</title><rect x="43.8519%" y="53" width="0.1941%" height="15" fill="rgb(211,81,21)"/><text x="44.1019%" y="63.50"></text></g><g><title>predicates_of (190,683 samples, 0.31%)</title><rect x="43.7531%" y="101" width="0.3121%" height="15" fill="rgb(208,190,38)"/><text x="44.0031%" y="111.50"></text></g><g><title>predicates_defined_on (161,563 samples, 0.26%)</title><rect x="43.8007%" y="85" width="0.2644%" height="15" fill="rgb(235,213,38)"/><text x="44.0507%" y="95.50"></text></g><g><title>associated_item (138,162 samples, 0.23%)</title><rect x="48.2472%" y="69" width="0.2261%" height="15" fill="rgb(237,122,38)"/><text x="48.4972%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (106,462 samples, 0.17%)</title><rect x="48.2991%" y="53" width="0.1742%" height="15" fill="rgb(244,218,35)"/><text x="48.5491%" y="63.50"></text></g><g><title>associated_items (206,413 samples, 0.34%)</title><rect x="48.1477%" y="85" width="0.3378%" height="15" fill="rgb(240,68,47)"/><text x="48.3977%" y="95.50"></text></g><g><title>evaluate_obligation (331,302 samples, 0.54%)</title><rect x="48.5985%" y="85" width="0.5422%" height="15" fill="rgb(210,16,53)"/><text x="48.8485%" y="95.50"></text></g><g><title>is_copy_raw (101,513 samples, 0.17%)</title><rect x="49.3352%" y="85" width="0.1661%" height="15" fill="rgb(235,124,12)"/><text x="49.5852%" y="95.50"></text></g><g><title>evaluate_obligation (79,541 samples, 0.13%)</title><rect x="49.3712%" y="69" width="0.1302%" height="15" fill="rgb(224,169,11)"/><text x="49.6212%" y="79.50"></text></g><g><title>method_autoderef_steps (97,650 samples, 0.16%)</title><rect x="49.5164%" y="85" width="0.1598%" height="15" fill="rgb(250,166,2)"/><text x="49.7664%" y="95.50"></text></g><g><title>predicates_of (65,981 samples, 0.11%)</title><rect x="49.6849%" y="85" width="0.1080%" height="15" fill="rgb(242,216,29)"/><text x="49.9349%" y="95.50"></text></g><g><title>typeck (3,518,729 samples, 5.76%)</title><rect x="44.1157%" y="101" width="5.7589%" height="15" fill="rgb(230,116,27)"/><text x="44.3657%" y="111.50">typeck</text></g><g><title>item_bodies_checking (9,133,861 samples, 14.95%)</title><rect x="34.9512%" y="149" width="14.9488%" height="15" fill="rgb(228,99,48)"/><text x="35.2012%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,131,171 samples, 14.94%)</title><rect x="34.9556%" y="133" width="14.9444%" height="15" fill="rgb(253,11,6)"/><text x="35.2056%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (9,108,470 samples, 14.91%)</title><rect x="34.9927%" y="117" width="14.9073%" height="15" fill="rgb(247,143,39)"/><text x="35.2427%" y="127.50">typeck</text></g><g><title>item_types_checking (480,195 samples, 0.79%)</title><rect x="49.9000%" y="149" width="0.7859%" height="15" fill="rgb(236,97,10)"/><text x="50.1500%" y="159.50"></text></g><g><title>check_mod_item_types (476,095 samples, 0.78%)</title><rect x="49.9067%" y="133" width="0.7792%" height="15" fill="rgb(233,208,19)"/><text x="50.1567%" y="143.50"></text></g><g><title>typeck (154,721 samples, 0.25%)</title><rect x="50.4327%" y="117" width="0.2532%" height="15" fill="rgb(216,164,2)"/><text x="50.6827%" y="127.50"></text></g><g><title>associated_items (62,001 samples, 0.10%)</title><rect x="51.1967%" y="101" width="0.1015%" height="15" fill="rgb(220,129,5)"/><text x="51.4467%" y="111.50"></text></g><g><title>fn_sig (259,882 samples, 0.43%)</title><rect x="50.9718%" y="117" width="0.4253%" height="15" fill="rgb(242,17,10)"/><text x="51.2218%" y="127.50"></text></g><g><title>named_region_map (82,090 samples, 0.13%)</title><rect x="51.5738%" y="101" width="0.1344%" height="15" fill="rgb(242,107,0)"/><text x="51.8238%" y="111.50"></text></g><g><title>resolve_lifetimes (69,940 samples, 0.11%)</title><rect x="51.5937%" y="85" width="0.1145%" height="15" fill="rgb(251,28,31)"/><text x="51.8437%" y="95.50"></text></g><g><title>generics_of (202,580 samples, 0.33%)</title><rect x="51.3972%" y="117" width="0.3316%" height="15" fill="rgb(233,223,10)"/><text x="51.6472%" y="127.50"></text></g><g><title>late_bound_vars_map (141,062 samples, 0.23%)</title><rect x="52.0385%" y="69" width="0.2309%" height="15" fill="rgb(215,21,27)"/><text x="52.2885%" y="79.50"></text></g><g><title>resolve_lifetimes (136,172 samples, 0.22%)</title><rect x="52.0465%" y="53" width="0.2229%" height="15" fill="rgb(232,23,21)"/><text x="52.2965%" y="63.50"></text></g><g><title>lint_levels (63,560 samples, 0.10%)</title><rect x="52.1653%" y="37" width="0.1040%" height="15" fill="rgb(244,5,23)"/><text x="52.4153%" y="47.50"></text></g><g><title>explicit_predicates_of (267,465 samples, 0.44%)</title><rect x="51.8740%" y="85" width="0.4377%" height="15" fill="rgb(226,81,46)"/><text x="52.1240%" y="95.50"></text></g><g><title>predicates_of (434,557 samples, 0.71%)</title><rect x="51.7537%" y="117" width="0.7112%" height="15" fill="rgb(247,70,30)"/><text x="52.0037%" y="127.50"></text></g><g><title>predicates_defined_on (405,946 samples, 0.66%)</title><rect x="51.8005%" y="101" width="0.6644%" height="15" fill="rgb(212,68,19)"/><text x="52.0505%" y="111.50"></text></g><g><title>inferred_outlives_of (93,551 samples, 0.15%)</title><rect x="52.3118%" y="85" width="0.1531%" height="15" fill="rgb(240,187,13)"/><text x="52.5618%" y="95.50"></text></g><g><title>inferred_outlives_crate (82,511 samples, 0.14%)</title><rect x="52.3298%" y="69" width="0.1350%" height="15" fill="rgb(223,113,26)"/><text x="52.5798%" y="79.50"></text></g><g><title>super_predicates_of (143,332 samples, 0.23%)</title><rect x="52.4649%" y="117" width="0.2346%" height="15" fill="rgb(206,192,2)"/><text x="52.7149%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (132,572 samples, 0.22%)</title><rect x="52.4825%" y="101" width="0.2170%" height="15" fill="rgb(241,108,4)"/><text x="52.7325%" y="111.50"></text></g><g><title>type_collecting (1,341,094 samples, 2.19%)</title><rect x="50.6877%" y="149" width="2.1949%" height="15" fill="rgb(247,173,49)"/><text x="50.9377%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,327,624 samples, 2.17%)</title><rect x="50.7097%" y="133" width="2.1728%" height="15" fill="rgb(224,114,35)"/><text x="50.9597%" y="143.50">c..</text></g><g><title>type_of (108,011 samples, 0.18%)</title><rect x="52.7058%" y="117" width="0.1768%" height="15" fill="rgb(245,159,27)"/><text x="52.9558%" y="127.50"></text></g><g><title>evaluate_obligation (217,581 samples, 0.36%)</title><rect x="53.9358%" y="117" width="0.3561%" height="15" fill="rgb(245,172,44)"/><text x="54.1858%" y="127.50"></text></g><g><title>implied_outlives_bounds (101,701 samples, 0.17%)</title><rect x="54.2975%" y="117" width="0.1664%" height="15" fill="rgb(236,23,11)"/><text x="54.5475%" y="127.50"></text></g><g><title>param_env (83,150 samples, 0.14%)</title><rect x="54.4640%" y="117" width="0.1361%" height="15" fill="rgb(205,117,38)"/><text x="54.7140%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,055,701 samples, 1.73%)</title><rect x="53.0309%" y="133" width="1.7278%" height="15" fill="rgb(237,72,25)"/><text x="53.2809%" y="143.50"></text></g><g><title>region_scope_tree (81,830 samples, 0.13%)</title><rect x="54.6248%" y="117" width="0.1339%" height="15" fill="rgb(244,70,9)"/><text x="54.8748%" y="127.50"></text></g><g><title>param_env (182,582 samples, 0.30%)</title><rect x="56.5937%" y="117" width="0.2988%" height="15" fill="rgb(217,125,39)"/><text x="56.8437%" y="127.50"></text></g><g><title>trait_impls_of (105,722 samples, 0.17%)</title><rect x="56.9955%" y="117" width="0.1730%" height="15" fill="rgb(235,36,10)"/><text x="57.2455%" y="127.50"></text></g><g><title>check_item_well_formed (1,531,160 samples, 2.51%)</title><rect x="54.7587%" y="133" width="2.5060%" height="15" fill="rgb(251,123,47)"/><text x="55.0087%" y="143.50">ch..</text></g><g><title>evaluate_obligation (89,580 samples, 0.15%)</title><rect x="58.1930%" y="117" width="0.1466%" height="15" fill="rgb(221,13,13)"/><text x="58.4430%" y="127.50"></text></g><g><title>implied_outlives_bounds (105,401 samples, 0.17%)</title><rect x="58.3396%" y="117" width="0.1725%" height="15" fill="rgb(238,131,9)"/><text x="58.5896%" y="127.50"></text></g><g><title>param_env (142,162 samples, 0.23%)</title><rect x="58.5121%" y="117" width="0.2327%" height="15" fill="rgb(211,50,8)"/><text x="58.7621%" y="127.50"></text></g><g><title>analysis (30,058,042 samples, 49.19%)</title><rect x="9.6124%" y="181" width="49.1942%" height="15" fill="rgb(245,182,24)"/><text x="9.8624%" y="191.50">analysis</text></g><g><title>type_check_crate (18,047,608 samples, 29.54%)</title><rect x="29.2692%" y="165" width="29.5374%" height="15" fill="rgb(242,14,37)"/><text x="29.5192%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,617,140 samples, 5.92%)</title><rect x="52.8867%" y="149" width="5.9200%" height="15" fill="rgb(246,228,12)"/><text x="53.1367%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (942,139 samples, 1.54%)</title><rect x="57.2647%" y="133" width="1.5419%" height="15" fill="rgb(213,55,15)"/><text x="57.5147%" y="143.50"></text></g><g><title>codegen_module (208,982 samples, 0.34%)</title><rect x="59.7372%" y="165" width="0.3420%" height="15" fill="rgb(209,9,3)"/><text x="59.9872%" y="175.50"></text></g><g><title>codegen_crate (843,749 samples, 1.38%)</title><rect x="58.8158%" y="181" width="1.3809%" height="15" fill="rgb(230,59,30)"/><text x="59.0658%" y="191.50"></text></g><g><title>codegen_module_optimize (1,943,671 samples, 3.18%)</title><rect x="60.1967%" y="181" width="3.1811%" height="15" fill="rgb(209,121,21)"/><text x="60.4467%" y="191.50">cod..</text></g><g><title>LLVM_module_optimize (476,675 samples, 0.78%)</title><rect x="62.5977%" y="165" width="0.7801%" height="15" fill="rgb(220,109,13)"/><text x="62.8477%" y="175.50"></text></g><g><title>LLVM_lto_optimize (288,464 samples, 0.47%)</title><rect x="63.9502%" y="165" width="0.4721%" height="15" fill="rgb(232,18,1)"/><text x="64.2002%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,385,446 samples, 3.90%)</title><rect x="64.4223%" y="165" width="3.9041%" height="15" fill="rgb(215,41,42)"/><text x="64.6723%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,347,835 samples, 3.84%)</title><rect x="64.4839%" y="149" width="3.8426%" height="15" fill="rgb(224,123,36)"/><text x="64.7339%" y="159.50">LLVM..</text></g><g><title>codegen_module_perform_lto (3,068,464 samples, 5.02%)</title><rect x="63.3778%" y="181" width="5.0220%" height="15" fill="rgb(240,125,3)"/><text x="63.6278%" y="191.50">codege..</text></g><g><title>AST_validation (77,241 samples, 0.13%)</title><rect x="68.6112%" y="165" width="0.1264%" height="15" fill="rgb(205,98,50)"/><text x="68.8612%" y="175.50"></text></g><g><title>metadata_load_macro (66,090 samples, 0.11%)</title><rect x="78.4160%" y="133" width="0.1082%" height="15" fill="rgb(205,185,37)"/><text x="78.6660%" y="143.50"></text></g><g><title>metadata_register_crate (104,260 samples, 0.17%)</title><rect x="78.5242%" y="133" width="0.1706%" height="15" fill="rgb(238,207,15)"/><text x="78.7742%" y="143.50"></text></g><g><title>macro_expand_crate (6,094,807 samples, 9.98%)</title><rect x="68.8629%" y="165" width="9.9750%" height="15" fill="rgb(213,199,42)"/><text x="69.1129%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (6,080,357 samples, 9.95%)</title><rect x="68.8866%" y="149" width="9.9514%" height="15" fill="rgb(235,201,11)"/><text x="69.1366%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (87,451 samples, 0.14%)</title><rect x="78.6948%" y="133" width="0.1431%" height="15" fill="rgb(207,46,11)"/><text x="78.9448%" y="143.50"></text></g><g><title>finalize_macro_resolutions (86,011 samples, 0.14%)</title><rect x="79.0181%" y="149" width="0.1408%" height="15" fill="rgb(241,35,35)"/><text x="79.2681%" y="159.50"></text></g><g><title>late_resolve_crate (476,695 samples, 0.78%)</title><rect x="79.1588%" y="149" width="0.7802%" height="15" fill="rgb(243,32,47)"/><text x="79.4088%" y="159.50"></text></g><g><title>configure_and_expand (7,118,328 samples, 11.65%)</title><rect x="68.3998%" y="181" width="11.6501%" height="15" fill="rgb(247,202,23)"/><text x="68.6498%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (679,018 samples, 1.11%)</title><rect x="78.9386%" y="165" width="1.1113%" height="15" fill="rgb(219,102,11)"/><text x="79.1886%" y="175.50"></text></g><g><title>drop_ast (65,821 samples, 0.11%)</title><rect x="80.0499%" y="181" width="0.1077%" height="15" fill="rgb(243,110,44)"/><text x="80.2999%" y="191.50"></text></g><g><title>early_lint_checks (158,512 samples, 0.26%)</title><rect x="80.1831%" y="181" width="0.2594%" height="15" fill="rgb(222,74,54)"/><text x="80.4331%" y="191.50"></text></g><g><title>free_global_ctxt (1,709,369 samples, 2.80%)</title><rect x="80.4425%" y="181" width="2.7976%" height="15" fill="rgb(216,99,12)"/><text x="80.6925%" y="191.50">fr..</text></g><g><title>crate_hash (61,631 samples, 0.10%)</title><rect x="84.6925%" y="165" width="0.1009%" height="15" fill="rgb(226,22,26)"/><text x="84.9425%" y="175.50"></text></g><g><title>exported_symbols (75,651 samples, 0.12%)</title><rect x="84.8324%" y="165" width="0.1238%" height="15" fill="rgb(217,163,10)"/><text x="85.0824%" y="175.50"></text></g><g><title>reachable_non_generics (63,881 samples, 0.10%)</title><rect x="84.8517%" y="149" width="0.1046%" height="15" fill="rgb(213,25,53)"/><text x="85.1017%" y="159.50"></text></g><g><title>is_sized_raw (64,823 samples, 0.11%)</title><rect x="87.2171%" y="133" width="0.1061%" height="15" fill="rgb(252,105,26)"/><text x="87.4671%" y="143.50"></text></g><g><title>layout_of (101,130 samples, 0.17%)</title><rect x="87.3232%" y="133" width="0.1655%" height="15" fill="rgb(220,39,43)"/><text x="87.5732%" y="143.50"></text></g><g><title>layout_of (88,280 samples, 0.14%)</title><rect x="87.3442%" y="117" width="0.1445%" height="15" fill="rgb(229,68,48)"/><text x="87.5942%" y="127.50"></text></g><g><title>is_sized_raw (68,440 samples, 0.11%)</title><rect x="87.3767%" y="101" width="0.1120%" height="15" fill="rgb(252,8,32)"/><text x="87.6267%" y="111.50"></text></g><g><title>layout_of (472,559 samples, 0.77%)</title><rect x="86.7870%" y="149" width="0.7734%" height="15" fill="rgb(223,20,43)"/><text x="87.0370%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (855,019 samples, 1.40%)</title><rect x="87.5604%" y="149" width="1.3994%" height="15" fill="rgb(229,81,49)"/><text x="87.8104%" y="159.50"></text></g><g><title>optimized_mir (2,435,998 samples, 3.99%)</title><rect x="85.0127%" y="165" width="3.9869%" height="15" fill="rgb(236,28,36)"/><text x="85.2627%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (3,570,179 samples, 5.84%)</title><rect x="83.2402%" y="181" width="5.8431%" height="15" fill="rgb(249,185,26)"/><text x="83.4902%" y="191.50">generat..</text></g><g><title>hir_lowering (1,253,184 samples, 2.05%)</title><rect x="89.0833%" y="181" width="2.0510%" height="15" fill="rgb(249,174,33)"/><text x="89.3333%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (3,510,609 samples, 5.75%)</title><rect x="91.1767%" y="165" width="5.7456%" height="15" fill="rgb(233,201,37)"/><text x="91.4267%" y="175.50">finish_..</text></g><g><title>link_crate (637,327 samples, 1.04%)</title><rect x="96.9223%" y="165" width="1.0431%" height="15" fill="rgb(221,78,26)"/><text x="97.1723%" y="175.50"></text></g><g><title>link_binary (621,647 samples, 1.02%)</title><rect x="96.9480%" y="149" width="1.0174%" height="15" fill="rgb(250,127,30)"/><text x="97.1980%" y="159.50"></text></g><g><title>link_rlib (405,175 samples, 0.66%)</title><rect x="97.3023%" y="133" width="0.6631%" height="15" fill="rgb(230,49,44)"/><text x="97.5523%" y="143.50"></text></g><g><title>link (4,182,656 samples, 6.85%)</title><rect x="91.1343%" y="181" width="6.8455%" height="15" fill="rgb(229,67,23)"/><text x="91.3843%" y="191.50">link</text></g><g><title>parse_crate (240,563 samples, 0.39%)</title><rect x="97.9798%" y="181" width="0.3937%" height="15" fill="rgb(249,83,47)"/><text x="98.2298%" y="191.50"></text></g><g><title>prepare_outputs (173,392 samples, 0.28%)</title><rect x="98.3844%" y="181" width="0.2838%" height="15" fill="rgb(215,43,3)"/><text x="98.6344%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (434,524 samples, 0.71%)</title><rect x="98.6681%" y="181" width="0.7112%" height="15" fill="rgb(238,154,13)"/><text x="98.9181%" y="191.50"></text></g><g><title>setup_global_ctxt (88,501 samples, 0.14%)</title><rect x="99.3809%" y="181" width="0.1448%" height="15" fill="rgb(219,56,2)"/><text x="99.6309%" y="191.50"></text></g><g><title>all (61,100,772 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (61,100,772 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (289,783 samples, 0.47%)</title><rect x="99.5257%" y="181" width="0.4743%" height="15" fill="rgb(250,79,13)"/><text x="99.7757%" y="191.50"></text></g></svg></svg>