<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,563,251 samples, 2.73%)</title><rect x="0.4302%" y="197" width="2.7263%" height="15" fill="rgb(227,0,7)"/><text x="0.6802%" y="207.50">LL..</text></g><g><title>implied_outlives_bounds (296,130 samples, 0.18%)</title><rect x="11.4516%" y="149" width="0.1769%" height="15" fill="rgb(217,0,24)"/><text x="11.7016%" y="159.50"></text></g><g><title>is_sized_raw (199,882 samples, 0.12%)</title><rect x="11.6673%" y="149" width="0.1194%" height="15" fill="rgb(221,193,54)"/><text x="11.9173%" y="159.50"></text></g><g><title>param_env (609,937 samples, 0.36%)</title><rect x="12.7662%" y="117" width="0.3644%" height="15" fill="rgb(248,212,6)"/><text x="13.0162%" y="127.50"></text></g><g><title>item_attrs (436,884 samples, 0.26%)</title><rect x="13.4941%" y="85" width="0.2610%" height="15" fill="rgb(208,68,35)"/><text x="13.7441%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (420,164 samples, 0.25%)</title><rect x="13.5041%" y="69" width="0.2510%" height="15" fill="rgb(232,128,0)"/><text x="13.7541%" y="79.50"></text></g><g><title>codegen_fn_attrs (583,925 samples, 0.35%)</title><rect x="13.4195%" y="101" width="0.3489%" height="15" fill="rgb(207,160,47)"/><text x="13.6695%" y="111.50"></text></g><g><title>adt_drop_tys (236,593 samples, 0.14%)</title><rect x="15.4447%" y="53" width="0.1414%" height="15" fill="rgb(228,23,34)"/><text x="15.6947%" y="63.50"></text></g><g><title>adt_drop_tys (498,035 samples, 0.30%)</title><rect x="15.4248%" y="69" width="0.2976%" height="15" fill="rgb(218,30,26)"/><text x="15.6748%" y="79.50"></text></g><g><title>is_copy_raw (1,227,039 samples, 0.73%)</title><rect x="15.7224%" y="69" width="0.7331%" height="15" fill="rgb(220,122,19)"/><text x="15.9724%" y="79.50"></text></g><g><title>evaluate_obligation (949,454 samples, 0.57%)</title><rect x="15.8882%" y="53" width="0.5673%" height="15" fill="rgb(250,228,42)"/><text x="16.1382%" y="63.50"></text></g><g><title>needs_drop_raw (1,931,885 samples, 1.15%)</title><rect x="15.3043%" y="85" width="1.1542%" height="15" fill="rgb(240,193,28)"/><text x="15.5543%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (633,565 samples, 0.38%)</title><rect x="16.6396%" y="69" width="0.3785%" height="15" fill="rgb(216,20,37)"/><text x="16.8896%" y="79.50"></text></g><g><title>specialization_graph_of (294,924 samples, 0.18%)</title><rect x="17.0742%" y="69" width="0.1762%" height="15" fill="rgb(206,188,39)"/><text x="17.3242%" y="79.50"></text></g><g><title>resolve_instance (1,474,317 samples, 0.88%)</title><rect x="16.4585%" y="85" width="0.8808%" height="15" fill="rgb(217,207,13)"/><text x="16.7085%" y="95.50"></text></g><g><title>thir_body (760,670 samples, 0.45%)</title><rect x="17.3595%" y="85" width="0.4545%" height="15" fill="rgb(231,73,38)"/><text x="17.6095%" y="95.50"></text></g><g><title>mir_const (9,383,202 samples, 5.61%)</title><rect x="12.2485%" y="133" width="5.6060%" height="15" fill="rgb(225,20,46)"/><text x="12.4985%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (7,906,839 samples, 4.72%)</title><rect x="13.1306%" y="117" width="4.7240%" height="15" fill="rgb(210,31,41)"/><text x="13.3806%" y="127.50">unsafe..</text></g><g><title>mir_built (6,839,410 samples, 4.09%)</title><rect x="13.7684%" y="101" width="4.0862%" height="15" fill="rgb(221,200,47)"/><text x="14.0184%" y="111.50">mir_..</text></g><g><title>mir_promoted (10,203,881 samples, 6.10%)</title><rect x="11.7867%" y="149" width="6.0964%" height="15" fill="rgb(226,26,5)"/><text x="12.0367%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (389,874 samples, 0.23%)</title><rect x="17.8853%" y="149" width="0.2329%" height="15" fill="rgb(249,33,26)"/><text x="18.1353%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (845,730 samples, 0.51%)</title><rect x="18.1182%" y="149" width="0.5053%" height="15" fill="rgb(235,183,28)"/><text x="18.3682%" y="159.50"></text></g><g><title>normalize_projection_ty (485,095 samples, 0.29%)</title><rect x="18.3337%" y="133" width="0.2898%" height="15" fill="rgb(221,5,38)"/><text x="18.5837%" y="143.50"></text></g><g><title>type_op_normalize_predicate (399,184 samples, 0.24%)</title><rect x="18.6235%" y="149" width="0.2385%" height="15" fill="rgb(247,18,42)"/><text x="18.8735%" y="159.50"></text></g><g><title>type_op_normalize_ty (213,832 samples, 0.13%)</title><rect x="18.8620%" y="149" width="0.1278%" height="15" fill="rgb(241,131,45)"/><text x="19.1120%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,831,147 samples, 3.48%)</title><rect x="18.9897%" y="149" width="3.4839%" height="15" fill="rgb(249,31,29)"/><text x="19.2397%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (31,883,878 samples, 19.05%)</title><rect x="3.4253%" y="181" width="19.0492%" height="15" fill="rgb(225,111,53)"/><text x="3.6753%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (31,735,937 samples, 18.96%)</title><rect x="3.5137%" y="165" width="18.9608%" height="15" fill="rgb(238,160,17)"/><text x="3.7637%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (291,173 samples, 0.17%)</title><rect x="22.4967%" y="181" width="0.1740%" height="15" fill="rgb(214,148,48)"/><text x="22.7467%" y="191.50"></text></g><g><title>item_attrs (171,493 samples, 0.10%)</title><rect x="23.2372%" y="101" width="0.1025%" height="15" fill="rgb(232,36,49)"/><text x="23.4872%" y="111.50"></text></g><g><title>codegen_fn_attrs (529,207 samples, 0.32%)</title><rect x="23.0809%" y="117" width="0.3162%" height="15" fill="rgb(209,103,24)"/><text x="23.3309%" y="127.50"></text></g><g><title>codegen_fn_attrs (866,961 samples, 0.52%)</title><rect x="22.8880%" y="149" width="0.5180%" height="15" fill="rgb(229,88,8)"/><text x="23.1380%" y="159.50"></text></g><g><title>should_inherit_track_caller (776,260 samples, 0.46%)</title><rect x="22.9422%" y="133" width="0.4638%" height="15" fill="rgb(213,181,19)"/><text x="23.1922%" y="143.50"></text></g><g><title>check_mod_attrs (1,196,584 samples, 0.71%)</title><rect x="22.6913%" y="165" width="0.7149%" height="15" fill="rgb(254,191,54)"/><text x="22.9413%" y="175.50"></text></g><g><title>check_mod_const_bodies (211,123 samples, 0.13%)</title><rect x="23.4062%" y="165" width="0.1261%" height="15" fill="rgb(241,83,37)"/><text x="23.6562%" y="175.50"></text></g><g><title>lookup_deprecation_entry (250,032 samples, 0.15%)</title><rect x="23.8056%" y="149" width="0.1494%" height="15" fill="rgb(233,36,39)"/><text x="24.0556%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (718,708 samples, 0.43%)</title><rect x="23.6085%" y="165" width="0.4294%" height="15" fill="rgb(226,3,54)"/><text x="23.8585%" y="175.50"></text></g><g><title>misc_checking_1 (2,365,426 samples, 1.41%)</title><rect x="22.6709%" y="181" width="1.4132%" height="15" fill="rgb(245,192,40)"/><text x="22.9209%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (527,086 samples, 0.31%)</title><rect x="24.0851%" y="165" width="0.3149%" height="15" fill="rgb(238,167,29)"/><text x="24.3351%" y="175.50"></text></g><g><title>check_mod_liveness (457,396 samples, 0.27%)</title><rect x="24.1267%" y="149" width="0.2733%" height="15" fill="rgb(232,182,51)"/><text x="24.3767%" y="159.50"></text></g><g><title>type_uninhabited_from (184,222 samples, 0.11%)</title><rect x="24.2899%" y="133" width="0.1101%" height="15" fill="rgb(231,60,39)"/><text x="24.5399%" y="143.50"></text></g><g><title>misc_checking_2 (1,073,612 samples, 0.64%)</title><rect x="24.0841%" y="181" width="0.6414%" height="15" fill="rgb(208,69,12)"/><text x="24.3341%" y="191.50"></text></g><g><title>match_checking (544,996 samples, 0.33%)</title><rect x="24.4000%" y="165" width="0.3256%" height="15" fill="rgb(235,93,37)"/><text x="24.6500%" y="175.50"></text></g><g><title>check_match (510,826 samples, 0.31%)</title><rect x="24.4204%" y="149" width="0.3052%" height="15" fill="rgb(213,116,39)"/><text x="24.6704%" y="159.50"></text></g><g><title>check_private_in_public (219,903 samples, 0.13%)</title><rect x="24.7316%" y="165" width="0.1314%" height="15" fill="rgb(222,207,29)"/><text x="24.9816%" y="175.50"></text></g><g><title>death_checking (374,324 samples, 0.22%)</title><rect x="24.8630%" y="165" width="0.2236%" height="15" fill="rgb(206,96,30)"/><text x="25.1130%" y="175.50"></text></g><g><title>param_env (260,223 samples, 0.16%)</title><rect x="25.4681%" y="133" width="0.1555%" height="15" fill="rgb(218,138,4)"/><text x="25.7181%" y="143.50"></text></g><g><title>crate_lints (2,011,973 samples, 1.20%)</title><rect x="25.0876%" y="149" width="1.2021%" height="15" fill="rgb(250,191,14)"/><text x="25.3376%" y="159.50"></text></g><g><title>type_of (1,104,433 samples, 0.66%)</title><rect x="25.6298%" y="133" width="0.6598%" height="15" fill="rgb(239,60,40)"/><text x="25.8798%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (870,099 samples, 0.52%)</title><rect x="25.7698%" y="117" width="0.5198%" height="15" fill="rgb(206,27,48)"/><text x="26.0198%" y="127.50"></text></g><g><title>lint_checking (2,335,246 samples, 1.40%)</title><rect x="25.0866%" y="165" width="1.3952%" height="15" fill="rgb(225,35,8)"/><text x="25.3366%" y="175.50"></text></g><g><title>module_lints (321,663 samples, 0.19%)</title><rect x="26.2897%" y="149" width="0.1922%" height="15" fill="rgb(250,213,24)"/><text x="26.5397%" y="159.50"></text></g><g><title>lint_mod (317,133 samples, 0.19%)</title><rect x="26.2924%" y="133" width="0.1895%" height="15" fill="rgb(247,123,22)"/><text x="26.5424%" y="143.50"></text></g><g><title>privacy_access_levels (272,973 samples, 0.16%)</title><rect x="26.4819%" y="165" width="0.1631%" height="15" fill="rgb(231,138,38)"/><text x="26.7319%" y="175.50"></text></g><g><title>privacy_checking_modules (878,690 samples, 0.52%)</title><rect x="26.6449%" y="165" width="0.5250%" height="15" fill="rgb(231,145,46)"/><text x="26.8949%" y="175.50"></text></g><g><title>check_mod_privacy (875,740 samples, 0.52%)</title><rect x="26.6467%" y="149" width="0.5232%" height="15" fill="rgb(251,118,11)"/><text x="26.8967%" y="159.50"></text></g><g><title>misc_checking_3 (4,105,446 samples, 2.45%)</title><rect x="24.7256%" y="181" width="2.4528%" height="15" fill="rgb(217,147,25)"/><text x="24.9756%" y="191.50">mi..</text></g><g><title>impl_parent (3,284,556 samples, 1.96%)</title><rect x="30.3981%" y="117" width="1.9624%" height="15" fill="rgb(247,81,37)"/><text x="30.6481%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,665,848 samples, 1.00%)</title><rect x="31.3652%" y="101" width="0.9953%" height="15" fill="rgb(209,12,38)"/><text x="31.6152%" y="111.50"></text></g><g><title>impl_trait_ref (8,122,706 samples, 4.85%)</title><rect x="32.3615%" y="117" width="4.8530%" height="15" fill="rgb(227,1,9)"/><text x="32.6115%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,958,910 samples, 4.16%)</title><rect x="33.0568%" y="101" width="4.1576%" height="15" fill="rgb(248,47,43)"/><text x="33.3068%" y="111.50">metad..</text></g><g><title>trait_impls_of (1,016,743 samples, 0.61%)</title><rect x="37.3790%" y="117" width="0.6075%" height="15" fill="rgb(221,10,30)"/><text x="37.6290%" y="127.50"></text></g><g><title>implementations_of_trait (295,875 samples, 0.18%)</title><rect x="37.8097%" y="101" width="0.1768%" height="15" fill="rgb(210,229,1)"/><text x="38.0597%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (225,024 samples, 0.13%)</title><rect x="37.8521%" y="85" width="0.1344%" height="15" fill="rgb(222,148,37)"/><text x="38.1021%" y="95.50"></text></g><g><title>coherent_trait (18,012,293 samples, 10.76%)</title><rect x="27.2375%" y="149" width="10.7615%" height="15" fill="rgb(234,67,33)"/><text x="27.4875%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (17,983,633 samples, 10.74%)</title><rect x="27.2547%" y="133" width="10.7444%" height="15" fill="rgb(247,98,35)"/><text x="27.5047%" y="143.50">specialization_g..</text></g><g><title>coherence_checking (18,125,824 samples, 10.83%)</title><rect x="27.2219%" y="165" width="10.8294%" height="15" fill="rgb(247,138,52)"/><text x="27.4719%" y="175.50">coherence_checki..</text></g><g><title>associated_item (268,303 samples, 0.16%)</title><rect x="47.2915%" y="101" width="0.1603%" height="15" fill="rgb(213,79,30)"/><text x="47.5415%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (210,962 samples, 0.13%)</title><rect x="47.3257%" y="85" width="0.1260%" height="15" fill="rgb(246,177,23)"/><text x="47.5757%" y="95.50"></text></g><g><title>associated_items (394,424 samples, 0.24%)</title><rect x="47.2273%" y="117" width="0.2357%" height="15" fill="rgb(230,62,27)"/><text x="47.4773%" y="127.50"></text></g><g><title>adt_def (430,467 samples, 0.26%)</title><rect x="47.7584%" y="85" width="0.2572%" height="15" fill="rgb(216,154,8)"/><text x="48.0084%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (429,207 samples, 0.26%)</title><rect x="47.7592%" y="69" width="0.2564%" height="15" fill="rgb(244,35,45)"/><text x="48.0092%" y="79.50"></text></g><g><title>item_attrs (413,026 samples, 0.25%)</title><rect x="47.7688%" y="53" width="0.2468%" height="15" fill="rgb(251,115,12)"/><text x="48.0188%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (411,606 samples, 0.25%)</title><rect x="47.7697%" y="37" width="0.2459%" height="15" fill="rgb(240,54,50)"/><text x="48.0197%" y="47.50"></text></g><g><title>adt_dtorck_constraint (268,002 samples, 0.16%)</title><rect x="48.0301%" y="85" width="0.1601%" height="15" fill="rgb(233,84,52)"/><text x="48.2801%" y="95.50"></text></g><g><title>adt_dtorck_constraint (801,609 samples, 0.48%)</title><rect x="47.7285%" y="101" width="0.4789%" height="15" fill="rgb(207,117,47)"/><text x="47.9785%" y="111.50"></text></g><g><title>dropck_outlives (1,228,503 samples, 0.73%)</title><rect x="47.5077%" y="117" width="0.7340%" height="15" fill="rgb(249,43,39)"/><text x="47.7577%" y="127.50"></text></g><g><title>evaluate_obligation (1,361,562 samples, 0.81%)</title><rect x="48.2417%" y="117" width="0.8135%" height="15" fill="rgb(209,38,44)"/><text x="48.4917%" y="127.50"></text></g><g><title>evaluate_obligation (409,883 samples, 0.24%)</title><rect x="49.6448%" y="101" width="0.2449%" height="15" fill="rgb(236,212,23)"/><text x="49.8948%" y="111.50"></text></g><g><title>method_autoderef_steps (832,726 samples, 0.50%)</title><rect x="49.3983%" y="117" width="0.4975%" height="15" fill="rgb(242,79,21)"/><text x="49.6483%" y="127.50"></text></g><g><title>predicates_of (361,045 samples, 0.22%)</title><rect x="49.9299%" y="117" width="0.2157%" height="15" fill="rgb(211,96,35)"/><text x="50.1799%" y="127.50"></text></g><g><title>predicates_defined_on (255,274 samples, 0.15%)</title><rect x="49.9931%" y="101" width="0.1525%" height="15" fill="rgb(253,215,40)"/><text x="50.2431%" y="111.50"></text></g><g><title>evaluate_obligation (1,591,283 samples, 0.95%)</title><rect x="54.3555%" y="101" width="0.9507%" height="15" fill="rgb(211,81,21)"/><text x="54.6055%" y="111.50"></text></g><g><title>method_autoderef_steps (473,523 samples, 0.28%)</title><rect x="55.5799%" y="101" width="0.2829%" height="15" fill="rgb(208,190,38)"/><text x="55.8299%" y="111.50"></text></g><g><title>evaluate_obligation (214,162 samples, 0.13%)</title><rect x="55.7349%" y="85" width="0.1280%" height="15" fill="rgb(235,213,38)"/><text x="55.9849%" y="95.50"></text></g><g><title>typeck (9,617,566 samples, 5.75%)</title><rect x="50.2385%" y="117" width="5.7461%" height="15" fill="rgb(237,122,38)"/><text x="50.4885%" y="127.50">typeck</text></g><g><title>item_bodies_checking (29,991,866 samples, 17.92%)</title><rect x="38.1013%" y="165" width="17.9188%" height="15" fill="rgb(244,218,35)"/><text x="38.3513%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (29,988,596 samples, 17.92%)</title><rect x="38.1032%" y="149" width="17.9169%" height="15" fill="rgb(240,68,47)"/><text x="38.3532%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (29,901,136 samples, 17.86%)</title><rect x="38.1555%" y="133" width="17.8646%" height="15" fill="rgb(210,16,53)"/><text x="38.4055%" y="143.50">typeck</text></g><g><title>adt_destructor (317,243 samples, 0.19%)</title><rect x="57.3307%" y="133" width="0.1895%" height="15" fill="rgb(235,124,12)"/><text x="57.5807%" y="143.50"></text></g><g><title>coherent_trait (310,123 samples, 0.19%)</title><rect x="57.3349%" y="117" width="0.1853%" height="15" fill="rgb(224,169,11)"/><text x="57.5849%" y="127.50"></text></g><g><title>specialization_graph_of (307,603 samples, 0.18%)</title><rect x="57.3365%" y="101" width="0.1838%" height="15" fill="rgb(250,166,2)"/><text x="57.5865%" y="111.50"></text></g><g><title>item_types_checking (2,907,392 samples, 1.74%)</title><rect x="56.0201%" y="165" width="1.7370%" height="15" fill="rgb(242,216,29)"/><text x="56.2701%" y="175.50"></text></g><g><title>check_mod_item_types (2,903,232 samples, 1.73%)</title><rect x="56.0226%" y="149" width="1.7346%" height="15" fill="rgb(230,116,27)"/><text x="56.2726%" y="159.50"></text></g><g><title>fn_sig (730,840 samples, 0.44%)</title><rect x="58.0670%" y="133" width="0.4366%" height="15" fill="rgb(228,99,48)"/><text x="58.3170%" y="143.50"></text></g><g><title>type_param_predicates (199,282 samples, 0.12%)</title><rect x="58.3845%" y="117" width="0.1191%" height="15" fill="rgb(253,11,6)"/><text x="58.6345%" y="127.50"></text></g><g><title>is_late_bound_map (471,937 samples, 0.28%)</title><rect x="58.6627%" y="117" width="0.2820%" height="15" fill="rgb(247,143,39)"/><text x="58.9127%" y="127.50"></text></g><g><title>resolve_lifetimes (437,457 samples, 0.26%)</title><rect x="58.6833%" y="101" width="0.2614%" height="15" fill="rgb(236,97,10)"/><text x="58.9333%" y="111.50"></text></g><g><title>generics_of (785,009 samples, 0.47%)</title><rect x="58.5036%" y="133" width="0.4690%" height="15" fill="rgb(233,208,19)"/><text x="58.7536%" y="143.50"></text></g><g><title>late_bound_vars_map (715,028 samples, 0.43%)</title><rect x="59.6557%" y="85" width="0.4272%" height="15" fill="rgb(216,164,2)"/><text x="59.9057%" y="95.50"></text></g><g><title>resolve_lifetimes (684,048 samples, 0.41%)</title><rect x="59.6742%" y="69" width="0.4087%" height="15" fill="rgb(220,129,5)"/><text x="59.9242%" y="79.50"></text></g><g><title>lint_levels (174,712 samples, 0.10%)</title><rect x="59.9785%" y="53" width="0.1044%" height="15" fill="rgb(242,17,10)"/><text x="60.2285%" y="63.50"></text></g><g><title>explicit_predicates_of (1,551,995 samples, 0.93%)</title><rect x="59.1883%" y="101" width="0.9272%" height="15" fill="rgb(242,107,0)"/><text x="59.4383%" y="111.50"></text></g><g><title>predicates_of (230,084 samples, 0.14%)</title><rect x="60.2532%" y="69" width="0.1375%" height="15" fill="rgb(251,28,31)"/><text x="60.5032%" y="79.50"></text></g><g><title>predicates_defined_on (219,814 samples, 0.13%)</title><rect x="60.2594%" y="53" width="0.1313%" height="15" fill="rgb(233,223,10)"/><text x="60.5094%" y="63.50"></text></g><g><title>predicates_of (2,570,376 samples, 1.54%)</title><rect x="59.0420%" y="133" width="1.5357%" height="15" fill="rgb(215,21,27)"/><text x="59.2920%" y="143.50"></text></g><g><title>predicates_defined_on (2,480,346 samples, 1.48%)</title><rect x="59.0957%" y="117" width="1.4819%" height="15" fill="rgb(232,23,21)"/><text x="59.3457%" y="127.50"></text></g><g><title>inferred_outlives_of (773,439 samples, 0.46%)</title><rect x="60.1155%" y="101" width="0.4621%" height="15" fill="rgb(244,5,23)"/><text x="60.3655%" y="111.50"></text></g><g><title>inferred_outlives_crate (734,159 samples, 0.44%)</title><rect x="60.1390%" y="85" width="0.4386%" height="15" fill="rgb(226,81,46)"/><text x="60.3890%" y="95.50"></text></g><g><title>type_of (312,892 samples, 0.19%)</title><rect x="60.3907%" y="69" width="0.1869%" height="15" fill="rgb(247,70,30)"/><text x="60.6407%" y="79.50"></text></g><g><title>type_collecting (5,044,947 samples, 3.01%)</title><rect x="57.7589%" y="165" width="3.0141%" height="15" fill="rgb(212,68,19)"/><text x="58.0089%" y="175.50">typ..</text></g><g><title>collect_mod_item_types (5,031,817 samples, 3.01%)</title><rect x="57.7667%" y="149" width="3.0063%" height="15" fill="rgb(240,187,13)"/><text x="58.0167%" y="159.50">col..</text></g><g><title>type_of (326,996 samples, 0.20%)</title><rect x="60.5776%" y="133" width="0.1954%" height="15" fill="rgb(223,113,26)"/><text x="60.8276%" y="143.50"></text></g><g><title>evaluate_obligation (592,046 samples, 0.35%)</title><rect x="63.2256%" y="133" width="0.3537%" height="15" fill="rgb(206,192,2)"/><text x="63.4756%" y="143.50"></text></g><g><title>implied_outlives_bounds (592,679 samples, 0.35%)</title><rect x="63.5842%" y="133" width="0.3541%" height="15" fill="rgb(241,108,4)"/><text x="63.8342%" y="143.50"></text></g><g><title>param_env (631,375 samples, 0.38%)</title><rect x="63.9781%" y="133" width="0.3772%" height="15" fill="rgb(247,173,49)"/><text x="64.2281%" y="143.50"></text></g><g><title>region_scope_tree (304,421 samples, 0.18%)</title><rect x="64.4114%" y="133" width="0.1819%" height="15" fill="rgb(224,114,35)"/><text x="64.6614%" y="143.50"></text></g><g><title>check_impl_item_well_formed (6,226,600 samples, 3.72%)</title><rect x="60.9061%" y="149" width="3.7201%" height="15" fill="rgb(245,159,27)"/><text x="61.1561%" y="159.50">chec..</text></g><g><title>implied_outlives_bounds (196,702 samples, 0.12%)</title><rect x="66.1989%" y="133" width="0.1175%" height="15" fill="rgb(245,172,44)"/><text x="66.4489%" y="143.50"></text></g><g><title>param_env (350,397 samples, 0.21%)</title><rect x="66.3164%" y="133" width="0.2093%" height="15" fill="rgb(236,23,11)"/><text x="66.5664%" y="143.50"></text></g><g><title>trait_impls_of (212,053 samples, 0.13%)</title><rect x="66.5884%" y="133" width="0.1267%" height="15" fill="rgb(205,117,38)"/><text x="66.8384%" y="143.50"></text></g><g><title>analysis (106,517,254 samples, 63.64%)</title><rect x="3.1566%" y="197" width="63.6393%" height="15" fill="rgb(237,72,25)"/><text x="3.4066%" y="207.50">analysis</text></g><g><title>type_check_crate (66,310,354 samples, 39.62%)</title><rect x="27.1784%" y="181" width="39.6175%" height="15" fill="rgb(244,70,9)"/><text x="27.4284%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,075,943 samples, 6.02%)</title><rect x="60.7760%" y="165" width="6.0199%" height="15" fill="rgb(217,125,39)"/><text x="61.0260%" y="175.50">wf_check..</text></g><g><title>check_item_well_formed (3,631,551 samples, 2.17%)</title><rect x="64.6262%" y="149" width="2.1697%" height="15" fill="rgb(235,36,10)"/><text x="64.8762%" y="159.50">c..</text></g><g><title>codegen_module (219,562 samples, 0.13%)</title><rect x="67.1383%" y="181" width="0.1312%" height="15" fill="rgb(251,123,47)"/><text x="67.3883%" y="191.50"></text></g><g><title>codegen_crate (920,650 samples, 0.55%)</title><rect x="66.8019%" y="197" width="0.5500%" height="15" fill="rgb(221,13,13)"/><text x="67.0519%" y="207.50"></text></g><g><title>codegen_module_optimize (569,497 samples, 0.34%)</title><rect x="67.3520%" y="197" width="0.3402%" height="15" fill="rgb(238,131,9)"/><text x="67.6020%" y="207.50"></text></g><g><title>LLVM_module_optimize (290,804 samples, 0.17%)</title><rect x="67.5185%" y="181" width="0.1737%" height="15" fill="rgb(211,50,8)"/><text x="67.7685%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,385,258 samples, 2.02%)</title><rect x="67.8944%" y="181" width="2.0225%" height="15" fill="rgb(245,182,24)"/><text x="68.1444%" y="191.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (3,369,028 samples, 2.01%)</title><rect x="67.9041%" y="165" width="2.0128%" height="15" fill="rgb(242,14,37)"/><text x="68.1541%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (3,744,752 samples, 2.24%)</title><rect x="67.6922%" y="197" width="2.2373%" height="15" fill="rgb(246,228,12)"/><text x="67.9422%" y="207.50">c..</text></g><g><title>AST_validation (208,473 samples, 0.12%)</title><rect x="70.0344%" y="181" width="0.1246%" height="15" fill="rgb(213,55,15)"/><text x="70.2844%" y="191.50"></text></g><g><title>metadata_register_crate (2,132,673 samples, 1.27%)</title><rect x="77.8955%" y="149" width="1.2742%" height="15" fill="rgb(209,9,3)"/><text x="78.1455%" y="159.50"></text></g><g><title>metadata_register_crate (751,466 samples, 0.45%)</title><rect x="78.7207%" y="133" width="0.4490%" height="15" fill="rgb(230,59,30)"/><text x="78.9707%" y="143.50"></text></g><g><title>macro_expand_crate (15,008,368 samples, 8.97%)</title><rect x="70.2565%" y="181" width="8.9668%" height="15" fill="rgb(209,121,21)"/><text x="70.5065%" y="191.50">macro_expand_..</text></g><g><title>expand_crate (14,994,818 samples, 8.96%)</title><rect x="70.2646%" y="165" width="8.9587%" height="15" fill="rgb(220,109,13)"/><text x="70.5146%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (421,645 samples, 0.25%)</title><rect x="79.2259%" y="181" width="0.2519%" height="15" fill="rgb(232,18,1)"/><text x="79.4759%" y="191.50"></text></g><g><title>late_resolve_crate (2,311,836 samples, 1.38%)</title><rect x="79.5733%" y="165" width="1.3812%" height="15" fill="rgb(215,41,42)"/><text x="79.8233%" y="175.50"></text></g><g><title>configure_and_expand (18,609,638 samples, 11.12%)</title><rect x="69.9295%" y="197" width="11.1184%" height="15" fill="rgb(224,123,36)"/><text x="70.1795%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (2,628,129 samples, 1.57%)</title><rect x="79.4778%" y="181" width="1.5702%" height="15" fill="rgb(240,125,3)"/><text x="79.7278%" y="191.50"></text></g><g><title>drop_ast (324,684 samples, 0.19%)</title><rect x="81.0480%" y="197" width="0.1940%" height="15" fill="rgb(205,98,50)"/><text x="81.2980%" y="207.50"></text></g><g><title>early_lint_checks (505,906 samples, 0.30%)</title><rect x="81.2514%" y="197" width="0.3023%" height="15" fill="rgb(205,185,37)"/><text x="81.5014%" y="207.50"></text></g><g><title>free_global_ctxt (3,866,073 samples, 2.31%)</title><rect x="81.5536%" y="197" width="2.3098%" height="15" fill="rgb(238,207,15)"/><text x="81.8036%" y="207.50">f..</text></g><g><title>is_sized_raw (185,563 samples, 0.11%)</title><rect x="87.4007%" y="149" width="0.1109%" height="15" fill="rgb(213,199,42)"/><text x="87.6507%" y="159.50"></text></g><g><title>layout_of (220,254 samples, 0.13%)</title><rect x="87.8415%" y="101" width="0.1316%" height="15" fill="rgb(235,201,11)"/><text x="88.0915%" y="111.50"></text></g><g><title>layout_of (178,593 samples, 0.11%)</title><rect x="87.8664%" y="85" width="0.1067%" height="15" fill="rgb(207,46,11)"/><text x="88.1164%" y="95.50"></text></g><g><title>layout_of (375,827 samples, 0.22%)</title><rect x="87.7566%" y="117" width="0.2245%" height="15" fill="rgb(241,35,35)"/><text x="88.0066%" y="127.50"></text></g><g><title>layout_of (652,968 samples, 0.39%)</title><rect x="87.6446%" y="133" width="0.3901%" height="15" fill="rgb(243,32,47)"/><text x="87.8946%" y="143.50"></text></g><g><title>layout_of (914,830 samples, 0.55%)</title><rect x="87.5115%" y="149" width="0.5466%" height="15" fill="rgb(247,202,23)"/><text x="87.7615%" y="159.50"></text></g><g><title>layout_of (1,711,877 samples, 1.02%)</title><rect x="87.1036%" y="165" width="1.0228%" height="15" fill="rgb(219,102,11)"/><text x="87.3536%" y="175.50"></text></g><g><title>is_copy_raw (788,369 samples, 0.47%)</title><rect x="90.5265%" y="133" width="0.4710%" height="15" fill="rgb(243,110,44)"/><text x="90.7765%" y="143.50"></text></g><g><title>evaluate_obligation (585,723 samples, 0.35%)</title><rect x="90.6475%" y="117" width="0.3499%" height="15" fill="rgb(222,74,54)"/><text x="90.8975%" y="127.50"></text></g><g><title>needs_drop_raw (924,412 samples, 0.55%)</title><rect x="90.4509%" y="149" width="0.5523%" height="15" fill="rgb(216,99,12)"/><text x="90.7009%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,049,443 samples, 3.02%)</title><rect x="88.1264%" y="165" width="3.0168%" height="15" fill="rgb(226,22,26)"/><text x="88.3764%" y="175.50">mir..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (182,142 samples, 0.11%)</title><rect x="91.0343%" y="149" width="0.1088%" height="15" fill="rgb(217,163,10)"/><text x="91.2843%" y="159.50"></text></g><g><title>optimized_mir (9,990,011 samples, 5.97%)</title><rect x="85.1861%" y="181" width="5.9686%" height="15" fill="rgb(213,25,53)"/><text x="85.4361%" y="191.50">optimize..</text></g><g><title>generate_crate_metadata (12,280,618 samples, 7.34%)</title><rect x="83.8634%" y="197" width="7.3371%" height="15" fill="rgb(252,105,26)"/><text x="84.1134%" y="207.50">generate_c..</text></g><g><title>hir_lowering (4,725,953 samples, 2.82%)</title><rect x="91.2005%" y="197" width="2.8235%" height="15" fill="rgb(220,39,43)"/><text x="91.4505%" y="207.50">hi..</text></g><g><title>link_crate (864,759 samples, 0.52%)</title><rect x="94.0357%" y="181" width="0.5167%" height="15" fill="rgb(229,68,48)"/><text x="94.2857%" y="191.50"></text></g><g><title>link_binary (834,869 samples, 0.50%)</title><rect x="94.0536%" y="165" width="0.4988%" height="15" fill="rgb(252,8,32)"/><text x="94.3036%" y="175.50"></text></g><g><title>link_rlib (547,107 samples, 0.33%)</title><rect x="94.2255%" y="149" width="0.3269%" height="15" fill="rgb(223,20,43)"/><text x="94.4755%" y="159.50"></text></g><g><title>link (890,780 samples, 0.53%)</title><rect x="94.0241%" y="197" width="0.5322%" height="15" fill="rgb(229,81,49)"/><text x="94.2741%" y="207.50"></text></g><g><title>parse_crate (7,517,864 samples, 4.49%)</title><rect x="94.5563%" y="197" width="4.4916%" height="15" fill="rgb(236,28,36)"/><text x="94.8063%" y="207.50">parse..</text></g><g><title>prepare_outputs (250,303 samples, 0.15%)</title><rect x="99.0519%" y="197" width="0.1495%" height="15" fill="rgb(249,185,26)"/><text x="99.3019%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (854,780 samples, 0.51%)</title><rect x="99.2015%" y="197" width="0.5107%" height="15" fill="rgb(249,174,33)"/><text x="99.4515%" y="207.50"></text></g><g><title>all (167,376,447 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (167,376,447 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (363,044 samples, 0.22%)</title><rect x="99.7831%" y="197" width="0.2169%" height="15" fill="rgb(250,127,30)"/><text x="100.0331%" y="207.50"></text></g></svg></svg>