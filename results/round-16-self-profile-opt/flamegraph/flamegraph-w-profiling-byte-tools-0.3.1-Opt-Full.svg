<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,096,514 samples, 13.41%)</title><rect x="1.5102%" y="181" width="13.4145%" height="15" fill="rgb(227,0,7)"/><text x="1.7602%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (76,111 samples, 0.20%)</title><rect x="14.7244%" y="165" width="0.2003%" height="15" fill="rgb(217,0,24)"/><text x="14.9744%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (66,710 samples, 0.18%)</title><rect x="14.7491%" y="149" width="0.1756%" height="15" fill="rgb(221,193,54)"/><text x="14.9991%" y="159.50"></text></g><g><title>param_env (70,551 samples, 0.19%)</title><rect x="19.5057%" y="101" width="0.1857%" height="15" fill="rgb(248,212,6)"/><text x="19.7557%" y="111.50"></text></g><g><title>item_attrs (62,411 samples, 0.16%)</title><rect x="20.0285%" y="69" width="0.1643%" height="15" fill="rgb(208,68,35)"/><text x="20.2785%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,461 samples, 0.16%)</title><rect x="20.0336%" y="53" width="0.1591%" height="15" fill="rgb(232,128,0)"/><text x="20.2836%" y="63.50"></text></g><g><title>codegen_fn_attrs (94,421 samples, 0.25%)</title><rect x="19.9496%" y="85" width="0.2485%" height="15" fill="rgb(207,160,47)"/><text x="20.1996%" y="95.50"></text></g><g><title>is_copy_raw (163,432 samples, 0.43%)</title><rect x="20.8819%" y="69" width="0.4302%" height="15" fill="rgb(228,23,34)"/><text x="21.1319%" y="79.50"></text></g><g><title>evaluate_obligation (153,992 samples, 0.41%)</title><rect x="20.9067%" y="53" width="0.4053%" height="15" fill="rgb(218,30,26)"/><text x="21.1567%" y="63.50"></text></g><g><title>trait_impls_of (85,371 samples, 0.22%)</title><rect x="21.0873%" y="37" width="0.2247%" height="15" fill="rgb(220,122,19)"/><text x="21.3373%" y="47.50"></text></g><g><title>resolve_instance (42,172 samples, 0.11%)</title><rect x="21.3120%" y="69" width="0.1110%" height="15" fill="rgb(250,228,42)"/><text x="21.5620%" y="79.50"></text></g><g><title>thir_body (122,891 samples, 0.32%)</title><rect x="21.4316%" y="69" width="0.3235%" height="15" fill="rgb(240,193,28)"/><text x="21.6816%" y="79.50"></text></g><g><title>mir_const (1,038,691 samples, 2.73%)</title><rect x="19.0268%" y="117" width="2.7339%" height="15" fill="rgb(216,20,37)"/><text x="19.2768%" y="127.50">mi..</text></g><g><title>unsafety_check_result (786,179 samples, 2.07%)</title><rect x="19.6914%" y="101" width="2.0693%" height="15" fill="rgb(206,188,39)"/><text x="19.9414%" y="111.50">u..</text></g><g><title>mir_built (593,668 samples, 1.56%)</title><rect x="20.1981%" y="85" width="1.5626%" height="15" fill="rgb(217,207,13)"/><text x="20.4481%" y="95.50"></text></g><g><title>mir_promoted (1,197,164 samples, 3.15%)</title><rect x="18.6348%" y="133" width="3.1510%" height="15" fill="rgb(231,73,38)"/><text x="18.8848%" y="143.50">mir..</text></g><g><title>MIR_borrow_checking (2,601,907 samples, 6.85%)</title><rect x="15.2419%" y="165" width="6.8485%" height="15" fill="rgb(225,20,46)"/><text x="15.4919%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (2,590,547 samples, 6.82%)</title><rect x="15.2718%" y="149" width="6.8186%" height="15" fill="rgb(210,31,41)"/><text x="15.5218%" y="159.50">mir_borro..</text></g><g><title>type_op_prove_predicate (115,700 samples, 0.30%)</title><rect x="21.7858%" y="133" width="0.3045%" height="15" fill="rgb(221,200,47)"/><text x="22.0358%" y="143.50"></text></g><g><title>hir_module_items (99,971 samples, 0.26%)</title><rect x="22.1085%" y="165" width="0.2631%" height="15" fill="rgb(226,26,5)"/><text x="22.3585%" y="175.50"></text></g><g><title>get_lang_items (53,830 samples, 0.14%)</title><rect x="22.8087%" y="117" width="0.1417%" height="15" fill="rgb(249,33,26)"/><text x="23.0587%" y="127.50"></text></g><g><title>codegen_fn_attrs (167,672 samples, 0.44%)</title><rect x="22.6087%" y="133" width="0.4413%" height="15" fill="rgb(235,183,28)"/><text x="22.8587%" y="143.50"></text></g><g><title>check_mod_attrs (228,473 samples, 0.60%)</title><rect x="22.4490%" y="149" width="0.6014%" height="15" fill="rgb(221,5,38)"/><text x="22.6990%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (74,720 samples, 0.20%)</title><rect x="23.1470%" y="149" width="0.1967%" height="15" fill="rgb(247,18,42)"/><text x="23.3970%" y="159.50"></text></g><g><title>misc_checking_1 (396,984 samples, 1.04%)</title><rect x="22.3734%" y="165" width="1.0449%" height="15" fill="rgb(241,131,45)"/><text x="22.6234%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (76,101 samples, 0.20%)</title><rect x="23.4240%" y="149" width="0.2003%" height="15" fill="rgb(249,31,29)"/><text x="23.6740%" y="159.50"></text></g><g><title>check_mod_liveness (60,261 samples, 0.16%)</title><rect x="23.4657%" y="133" width="0.1586%" height="15" fill="rgb(225,111,53)"/><text x="23.7157%" y="143.50"></text></g><g><title>misc_checking_2 (193,582 samples, 0.51%)</title><rect x="23.4183%" y="165" width="0.5095%" height="15" fill="rgb(238,160,17)"/><text x="23.6683%" y="175.50"></text></g><g><title>match_checking (115,301 samples, 0.30%)</title><rect x="23.6243%" y="149" width="0.3035%" height="15" fill="rgb(214,148,48)"/><text x="23.8743%" y="159.50"></text></g><g><title>check_match (105,011 samples, 0.28%)</title><rect x="23.6514%" y="133" width="0.2764%" height="15" fill="rgb(232,36,49)"/><text x="23.9014%" y="143.50"></text></g><g><title>death_checking (85,571 samples, 0.23%)</title><rect x="24.0195%" y="149" width="0.2252%" height="15" fill="rgb(209,103,24)"/><text x="24.2695%" y="159.50"></text></g><g><title>param_env (71,661 samples, 0.19%)</title><rect x="24.4125%" y="117" width="0.1886%" height="15" fill="rgb(229,88,8)"/><text x="24.6625%" y="127.50"></text></g><g><title>crate_lints (135,881 samples, 0.36%)</title><rect x="24.2507%" y="133" width="0.3577%" height="15" fill="rgb(213,181,19)"/><text x="24.5007%" y="143.50"></text></g><g><title>lint_checking (187,212 samples, 0.49%)</title><rect x="24.2448%" y="149" width="0.4928%" height="15" fill="rgb(254,191,54)"/><text x="24.4948%" y="159.50"></text></g><g><title>module_lints (49,071 samples, 0.13%)</title><rect x="24.6084%" y="133" width="0.1292%" height="15" fill="rgb(241,83,37)"/><text x="24.8584%" y="143.50"></text></g><g><title>lint_mod (45,801 samples, 0.12%)</title><rect x="24.6170%" y="117" width="0.1206%" height="15" fill="rgb(233,36,39)"/><text x="24.8670%" y="127.50"></text></g><g><title>privacy_access_levels (56,810 samples, 0.15%)</title><rect x="24.7375%" y="149" width="0.1495%" height="15" fill="rgb(226,3,54)"/><text x="24.9875%" y="159.50"></text></g><g><title>privacy_checking_modules (64,840 samples, 0.17%)</title><rect x="24.8871%" y="149" width="0.1707%" height="15" fill="rgb(245,192,40)"/><text x="25.1371%" y="159.50"></text></g><g><title>check_mod_privacy (62,870 samples, 0.17%)</title><rect x="24.8922%" y="133" width="0.1655%" height="15" fill="rgb(238,167,29)"/><text x="25.1422%" y="143.50"></text></g><g><title>misc_checking_3 (464,704 samples, 1.22%)</title><rect x="23.9278%" y="165" width="1.2231%" height="15" fill="rgb(232,182,51)"/><text x="24.1778%" y="175.50"></text></g><g><title>associated_item (239,143 samples, 0.63%)</title><rect x="31.3529%" y="85" width="0.6294%" height="15" fill="rgb(231,60,39)"/><text x="31.6029%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (187,243 samples, 0.49%)</title><rect x="31.4895%" y="69" width="0.4928%" height="15" fill="rgb(208,69,12)"/><text x="31.7395%" y="79.50"></text></g><g><title>associated_items (330,455 samples, 0.87%)</title><rect x="31.1351%" y="101" width="0.8698%" height="15" fill="rgb(235,93,37)"/><text x="31.3851%" y="111.50"></text></g><g><title>predicates_of (52,680 samples, 0.14%)</title><rect x="32.6797%" y="85" width="0.1387%" height="15" fill="rgb(213,116,39)"/><text x="32.9297%" y="95.50"></text></g><g><title>predicates_defined_on (42,110 samples, 0.11%)</title><rect x="32.7075%" y="69" width="0.1108%" height="15" fill="rgb(222,207,29)"/><text x="32.9575%" y="79.50"></text></g><g><title>evaluate_obligation (404,663 samples, 1.07%)</title><rect x="32.0390%" y="101" width="1.0651%" height="15" fill="rgb(206,96,30)"/><text x="32.2890%" y="111.50"></text></g><g><title>trait_impls_of (106,921 samples, 0.28%)</title><rect x="32.8227%" y="85" width="0.2814%" height="15" fill="rgb(218,138,4)"/><text x="33.0727%" y="95.50"></text></g><g><title>fn_sig (90,721 samples, 0.24%)</title><rect x="33.1189%" y="101" width="0.2388%" height="15" fill="rgb(250,191,14)"/><text x="33.3689%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (83,651 samples, 0.22%)</title><rect x="33.1375%" y="85" width="0.2202%" height="15" fill="rgb(239,60,40)"/><text x="33.3875%" y="95.50"></text></g><g><title>generics_of (54,850 samples, 0.14%)</title><rect x="33.3577%" y="101" width="0.1444%" height="15" fill="rgb(206,27,48)"/><text x="33.6077%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (41,850 samples, 0.11%)</title><rect x="33.3919%" y="85" width="0.1102%" height="15" fill="rgb(225,35,8)"/><text x="33.6419%" y="95.50"></text></g><g><title>associated_item (121,751 samples, 0.32%)</title><rect x="33.5172%" y="69" width="0.3205%" height="15" fill="rgb(250,213,24)"/><text x="33.7672%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (120,551 samples, 0.32%)</title><rect x="33.5204%" y="53" width="0.3173%" height="15" fill="rgb(247,123,22)"/><text x="33.7704%" y="63.50"></text></g><g><title>impl_item_implementor_ids (135,841 samples, 0.36%)</title><rect x="33.5021%" y="101" width="0.3575%" height="15" fill="rgb(231,138,38)"/><text x="33.7521%" y="111.50"></text></g><g><title>associated_items (132,781 samples, 0.35%)</title><rect x="33.5101%" y="85" width="0.3495%" height="15" fill="rgb(231,145,46)"/><text x="33.7601%" y="95.50"></text></g><g><title>item_attrs (123,551 samples, 0.33%)</title><rect x="33.9737%" y="101" width="0.3252%" height="15" fill="rgb(251,118,11)"/><text x="34.2237%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (119,451 samples, 0.31%)</title><rect x="33.9845%" y="85" width="0.3144%" height="15" fill="rgb(217,147,25)"/><text x="34.2345%" y="95.50"></text></g><g><title>method_autoderef_steps (92,951 samples, 0.24%)</title><rect x="34.3252%" y="101" width="0.2447%" height="15" fill="rgb(247,81,37)"/><text x="34.5752%" y="111.50"></text></g><g><title>evaluate_obligation (58,471 samples, 0.15%)</title><rect x="34.4159%" y="85" width="0.1539%" height="15" fill="rgb(209,12,38)"/><text x="34.6659%" y="95.50"></text></g><g><title>explicit_predicates_of (49,780 samples, 0.13%)</title><rect x="34.7727%" y="69" width="0.1310%" height="15" fill="rgb(227,1,9)"/><text x="35.0227%" y="79.50"></text></g><g><title>predicates_of (133,230 samples, 0.35%)</title><rect x="34.6020%" y="101" width="0.3507%" height="15" fill="rgb(248,47,43)"/><text x="34.8520%" y="111.50"></text></g><g><title>predicates_defined_on (96,650 samples, 0.25%)</title><rect x="34.6983%" y="85" width="0.2544%" height="15" fill="rgb(221,10,30)"/><text x="34.9483%" y="95.50"></text></g><g><title>trait_impls_of (93,821 samples, 0.25%)</title><rect x="34.9981%" y="101" width="0.2469%" height="15" fill="rgb(210,229,1)"/><text x="35.2481%" y="111.50"></text></g><g><title>type_of (55,260 samples, 0.15%)</title><rect x="35.2450%" y="101" width="0.1454%" height="15" fill="rgb(222,148,37)"/><text x="35.4950%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (50,920 samples, 0.13%)</title><rect x="35.2564%" y="85" width="0.1340%" height="15" fill="rgb(234,67,33)"/><text x="35.5064%" y="95.50"></text></g><g><title>item_bodies_checking (3,842,611 samples, 10.11%)</title><rect x="25.2910%" y="149" width="10.1141%" height="15" fill="rgb(247,98,35)"/><text x="25.5410%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (3,839,851 samples, 10.11%)</title><rect x="25.2983%" y="133" width="10.1068%" height="15" fill="rgb(247,138,52)"/><text x="25.5483%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (3,831,171 samples, 10.08%)</title><rect x="25.3211%" y="117" width="10.0840%" height="15" fill="rgb(213,79,30)"/><text x="25.5711%" y="127.50">typeck</text></g><g><title>fn_sig (62,421 samples, 0.16%)</title><rect x="35.5760%" y="117" width="0.1643%" height="15" fill="rgb(246,177,23)"/><text x="35.8260%" y="127.50"></text></g><g><title>named_region_map (60,492 samples, 0.16%)</title><rect x="35.8022%" y="101" width="0.1592%" height="15" fill="rgb(230,62,27)"/><text x="36.0522%" y="111.50"></text></g><g><title>resolve_lifetimes (48,312 samples, 0.13%)</title><rect x="35.8342%" y="85" width="0.1272%" height="15" fill="rgb(216,154,8)"/><text x="36.0842%" y="95.50"></text></g><g><title>generics_of (90,852 samples, 0.24%)</title><rect x="35.7403%" y="117" width="0.2391%" height="15" fill="rgb(244,35,45)"/><text x="35.9903%" y="127.50"></text></g><g><title>predicates_of (40,260 samples, 0.11%)</title><rect x="35.9795%" y="117" width="0.1060%" height="15" fill="rgb(251,115,12)"/><text x="36.2295%" y="127.50"></text></g><g><title>type_collecting (268,313 samples, 0.71%)</title><rect x="35.4201%" y="149" width="0.7062%" height="15" fill="rgb(240,54,50)"/><text x="35.6701%" y="159.50"></text></g><g><title>collect_mod_item_types (253,023 samples, 0.67%)</title><rect x="35.4603%" y="133" width="0.6660%" height="15" fill="rgb(233,84,52)"/><text x="35.7103%" y="143.50"></text></g><g><title>evaluate_obligation (69,380 samples, 0.18%)</title><rect x="37.2687%" y="117" width="0.1826%" height="15" fill="rgb(207,117,47)"/><text x="37.5187%" y="127.50"></text></g><g><title>implied_outlives_bounds (85,251 samples, 0.22%)</title><rect x="37.4513%" y="117" width="0.2244%" height="15" fill="rgb(249,43,39)"/><text x="37.7013%" y="127.50"></text></g><g><title>param_env (186,911 samples, 0.49%)</title><rect x="37.6757%" y="117" width="0.4920%" height="15" fill="rgb(209,38,44)"/><text x="37.9257%" y="127.50"></text></g><g><title>analysis (8,865,434 samples, 23.33%)</title><rect x="14.9247%" y="181" width="23.3346%" height="15" fill="rgb(236,212,23)"/><text x="15.1747%" y="191.50">analysis</text></g><g><title>type_check_crate (4,980,233 samples, 13.11%)</title><rect x="25.1509%" y="165" width="13.1084%" height="15" fill="rgb(242,79,21)"/><text x="25.4009%" y="175.50">type_check_crate</text></g><g><title>wf_checking (809,629 samples, 2.13%)</title><rect x="36.1283%" y="149" width="2.1310%" height="15" fill="rgb(211,96,35)"/><text x="36.3783%" y="159.50">w..</text></g><g><title>check_item_well_formed (778,889 samples, 2.05%)</title><rect x="36.2092%" y="133" width="2.0501%" height="15" fill="rgb(253,215,40)"/><text x="36.4592%" y="143.50">c..</text></g><g><title>codegen_module (345,364 samples, 0.91%)</title><rect x="40.4364%" y="165" width="0.9090%" height="15" fill="rgb(211,81,21)"/><text x="40.6864%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (81,021 samples, 0.21%)</title><rect x="41.3470%" y="165" width="0.2133%" height="15" fill="rgb(208,190,38)"/><text x="41.5970%" y="175.50"></text></g><g><title>codegen_crate (1,269,533 samples, 3.34%)</title><rect x="38.2823%" y="181" width="3.3415%" height="15" fill="rgb(235,213,38)"/><text x="38.5323%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (1,641,298 samples, 4.32%)</title><rect x="41.6238%" y="181" width="4.3200%" height="15" fill="rgb(237,122,38)"/><text x="41.8738%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (449,685 samples, 1.18%)</title><rect x="44.7602%" y="165" width="1.1836%" height="15" fill="rgb(244,218,35)"/><text x="45.0102%" y="175.50"></text></g><g><title>LLVM_lto_optimize (228,983 samples, 0.60%)</title><rect x="46.9393%" y="165" width="0.6027%" height="15" fill="rgb(240,68,47)"/><text x="47.1893%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,506,377 samples, 6.60%)</title><rect x="47.5420%" y="165" width="6.5970%" height="15" fill="rgb(210,16,53)"/><text x="47.7920%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,469,606 samples, 6.50%)</title><rect x="47.6388%" y="149" width="6.5002%" height="15" fill="rgb(235,124,12)"/><text x="47.8888%" y="159.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (3,145,164 samples, 8.28%)</title><rect x="45.9438%" y="181" width="8.2784%" height="15" fill="rgb(224,169,11)"/><text x="46.1938%" y="191.50">codegen_modu..</text></g><g><title>AST_validation (67,590 samples, 0.18%)</title><rect x="54.7257%" y="165" width="0.1779%" height="15" fill="rgb(250,166,2)"/><text x="54.9757%" y="175.50"></text></g><g><title>crate_injection (92,241 samples, 0.24%)</title><rect x="54.9355%" y="165" width="0.2428%" height="15" fill="rgb(242,216,29)"/><text x="55.1855%" y="175.50"></text></g><g><title>metadata_load_macro (75,370 samples, 0.20%)</title><rect x="70.3631%" y="133" width="0.1984%" height="15" fill="rgb(230,116,27)"/><text x="70.6131%" y="143.50"></text></g><g><title>macro_expand_crate (6,033,665 samples, 15.88%)</title><rect x="55.1782%" y="165" width="15.8812%" height="15" fill="rgb(228,99,48)"/><text x="55.4282%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (6,014,164 samples, 15.83%)</title><rect x="55.2296%" y="149" width="15.8298%" height="15" fill="rgb(253,11,6)"/><text x="55.4796%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (189,162 samples, 0.50%)</title><rect x="70.5615%" y="133" width="0.4979%" height="15" fill="rgb(247,143,39)"/><text x="70.8115%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (68,721 samples, 0.18%)</title><rect x="71.0686%" y="165" width="0.1809%" height="15" fill="rgb(236,97,10)"/><text x="71.3186%" y="175.50"></text></g><g><title>finalize_macro_resolutions (236,792 samples, 0.62%)</title><rect x="71.3178%" y="149" width="0.6233%" height="15" fill="rgb(233,208,19)"/><text x="71.5678%" y="159.50"></text></g><g><title>late_resolve_crate (969,460 samples, 2.55%)</title><rect x="71.9411%" y="149" width="2.5517%" height="15" fill="rgb(216,164,2)"/><text x="72.1911%" y="159.50">la..</text></g><g><title>configure_and_expand (7,732,842 samples, 20.35%)</title><rect x="54.2222%" y="181" width="20.3535%" height="15" fill="rgb(220,129,5)"/><text x="54.4722%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,263,744 samples, 3.33%)</title><rect x="71.2494%" y="165" width="3.3263%" height="15" fill="rgb(242,17,10)"/><text x="71.4994%" y="175.50">res..</text></g><g><title>early_lint_checks (68,831 samples, 0.18%)</title><rect x="74.7160%" y="181" width="0.1812%" height="15" fill="rgb(242,107,0)"/><text x="74.9660%" y="191.50"></text></g><g><title>free_global_ctxt (1,305,013 samples, 3.43%)</title><rect x="74.8971%" y="181" width="3.4349%" height="15" fill="rgb(251,28,31)"/><text x="75.1471%" y="191.50">fre..</text></g><g><title>crate_hash (112,721 samples, 0.30%)</title><rect x="79.1632%" y="165" width="0.2967%" height="15" fill="rgb(233,223,10)"/><text x="79.4132%" y="175.50"></text></g><g><title>exported_symbols (54,030 samples, 0.14%)</title><rect x="79.5018%" y="165" width="0.1422%" height="15" fill="rgb(215,21,27)"/><text x="79.7518%" y="175.50"></text></g><g><title>layout_of (88,522 samples, 0.23%)</title><rect x="80.7993%" y="149" width="0.2330%" height="15" fill="rgb(232,23,21)"/><text x="81.0493%" y="159.50"></text></g><g><title>is_sized_raw (48,171 samples, 0.13%)</title><rect x="80.9055%" y="133" width="0.1268%" height="15" fill="rgb(244,5,23)"/><text x="81.1555%" y="143.50"></text></g><g><title>optimized_mir (864,208 samples, 2.27%)</title><rect x="79.7279%" y="165" width="2.2747%" height="15" fill="rgb(226,81,46)"/><text x="79.9779%" y="175.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (368,653 samples, 0.97%)</title><rect x="81.0323%" y="149" width="0.9703%" height="15" fill="rgb(247,70,30)"/><text x="81.2823%" y="159.50"></text></g><g><title>generate_crate_metadata (1,427,105 samples, 3.76%)</title><rect x="78.3320%" y="181" width="3.7563%" height="15" fill="rgb(212,68,19)"/><text x="78.5820%" y="191.50">gene..</text></g><g><title>hir_lowering (406,774 samples, 1.07%)</title><rect x="82.0883%" y="181" width="1.0707%" height="15" fill="rgb(240,187,13)"/><text x="82.3383%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,496,598 samples, 9.20%)</title><rect x="83.2057%" y="165" width="9.2034%" height="15" fill="rgb(223,113,26)"/><text x="83.4557%" y="175.50">finish_ongoin..</text></g><g><title>link_crate (955,040 samples, 2.51%)</title><rect x="92.4090%" y="165" width="2.5138%" height="15" fill="rgb(206,192,2)"/><text x="92.6590%" y="175.50">li..</text></g><g><title>link_binary (940,120 samples, 2.47%)</title><rect x="92.4483%" y="149" width="2.4745%" height="15" fill="rgb(241,108,4)"/><text x="92.6983%" y="159.50">li..</text></g><g><title>link_rlib (553,866 samples, 1.46%)</title><rect x="93.4649%" y="133" width="1.4578%" height="15" fill="rgb(247,173,49)"/><text x="93.7149%" y="143.50"></text></g><g><title>link (4,481,348 samples, 11.80%)</title><rect x="83.1590%" y="181" width="11.7953%" height="15" fill="rgb(224,114,35)"/><text x="83.4090%" y="191.50">link</text></g><g><title>parse_crate (567,896 samples, 1.49%)</title><rect x="94.9543%" y="181" width="1.4948%" height="15" fill="rgb(245,159,27)"/><text x="95.2043%" y="191.50"></text></g><g><title>prepare_outputs (280,093 samples, 0.74%)</title><rect x="96.4713%" y="181" width="0.7372%" height="15" fill="rgb(245,172,44)"/><text x="96.7213%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (500,006 samples, 1.32%)</title><rect x="97.2085%" y="181" width="1.3161%" height="15" fill="rgb(236,23,11)"/><text x="97.4585%" y="191.50"></text></g><g><title>setup_global_ctxt (118,512 samples, 0.31%)</title><rect x="98.5274%" y="181" width="0.3119%" height="15" fill="rgb(205,117,38)"/><text x="98.7774%" y="191.50"></text></g><g><title>all (37,992,604 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (37,992,604 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (440,955 samples, 1.16%)</title><rect x="98.8394%" y="181" width="1.1606%" height="15" fill="rgb(217,125,39)"/><text x="99.0894%" y="191.50"></text></g></svg></svg>