<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,094,816,925 samples, 5.30%)</title><rect x="0.0209%" y="181" width="5.3044%" height="15" fill="rgb(227,0,7)"/><text x="0.2709%" y="191.50">LLVM_p..</text></g><g><title>codegen_generate_lto_work (26,585,229 samples, 0.13%)</title><rect x="5.1965%" y="165" width="0.1288%" height="15" fill="rgb(217,0,24)"/><text x="5.4465%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (25,706,508 samples, 0.12%)</title><rect x="5.2008%" y="149" width="0.1245%" height="15" fill="rgb(221,193,54)"/><text x="5.4508%" y="159.50"></text></g><g><title>implied_outlives_bounds (26,808,142 samples, 0.13%)</title><rect x="12.5541%" y="133" width="0.1299%" height="15" fill="rgb(248,212,6)"/><text x="12.8041%" y="143.50"></text></g><g><title>is_copy_raw (99,923,870 samples, 0.48%)</title><rect x="15.6283%" y="53" width="0.4841%" height="15" fill="rgb(208,68,35)"/><text x="15.8783%" y="63.50"></text></g><g><title>evaluate_obligation (74,818,525 samples, 0.36%)</title><rect x="15.7500%" y="37" width="0.3625%" height="15" fill="rgb(232,128,0)"/><text x="16.0000%" y="47.50"></text></g><g><title>needs_drop_raw (120,817,560 samples, 0.59%)</title><rect x="15.5276%" y="69" width="0.5854%" height="15" fill="rgb(207,160,47)"/><text x="15.7776%" y="79.50"></text></g><g><title>thir_body (129,639,587 samples, 0.63%)</title><rect x="16.2043%" y="69" width="0.6281%" height="15" fill="rgb(228,23,34)"/><text x="16.4543%" y="79.50"></text></g><g><title>mir_const (761,729,854 samples, 3.69%)</title><rect x="13.1923%" y="117" width="3.6906%" height="15" fill="rgb(218,30,26)"/><text x="13.4423%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (675,479,017 samples, 3.27%)</title><rect x="13.6102%" y="101" width="3.2727%" height="15" fill="rgb(220,122,19)"/><text x="13.8602%" y="111.50">uns..</text></g><g><title>mir_built (625,264,605 samples, 3.03%)</title><rect x="13.8535%" y="85" width="3.0294%" height="15" fill="rgb(250,228,42)"/><text x="14.1035%" y="95.50">mir..</text></g><g><title>mir_const (25,477,796 samples, 0.12%)</title><rect x="16.9377%" y="101" width="0.1234%" height="15" fill="rgb(240,193,28)"/><text x="17.1877%" y="111.50"></text></g><g><title>mir_promoted (888,911,514 samples, 4.31%)</title><rect x="12.7553%" y="133" width="4.3068%" height="15" fill="rgb(216,20,37)"/><text x="13.0053%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (36,990,421 samples, 0.18%)</title><rect x="16.8829%" y="117" width="0.1792%" height="15" fill="rgb(206,188,39)"/><text x="17.1329%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (63,637,789 samples, 0.31%)</title><rect x="17.0623%" y="133" width="0.3083%" height="15" fill="rgb(217,207,13)"/><text x="17.3123%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (42,587,123 samples, 0.21%)</title><rect x="17.3706%" y="133" width="0.2063%" height="15" fill="rgb(231,73,38)"/><text x="17.6206%" y="143.50"></text></g><g><title>type_op_normalize_ty (45,400,925 samples, 0.22%)</title><rect x="17.5824%" y="133" width="0.2200%" height="15" fill="rgb(225,20,46)"/><text x="17.8324%" y="143.50"></text></g><g><title>type_op_prove_predicate (111,873,842 samples, 0.54%)</title><rect x="17.8024%" y="133" width="0.5420%" height="15" fill="rgb(210,31,41)"/><text x="18.0524%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,657,287,929 samples, 12.87%)</title><rect x="5.4700%" y="165" width="12.8747%" height="15" fill="rgb(221,200,47)"/><text x="5.7200%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (2,632,498,932 samples, 12.75%)</title><rect x="5.5901%" y="149" width="12.7545%" height="15" fill="rgb(226,26,5)"/><text x="5.8401%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (47,835,902 samples, 0.23%)</title><rect x="18.5235%" y="149" width="0.2318%" height="15" fill="rgb(249,33,26)"/><text x="18.7735%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (32,983,418 samples, 0.16%)</title><rect x="18.8973%" y="149" width="0.1598%" height="15" fill="rgb(235,183,28)"/><text x="19.1473%" y="159.50"></text></g><g><title>misc_checking_1 (113,944,522 samples, 0.55%)</title><rect x="18.5228%" y="165" width="0.5521%" height="15" fill="rgb(221,5,38)"/><text x="18.7728%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (51,890,013 samples, 0.25%)</title><rect x="19.0749%" y="149" width="0.2514%" height="15" fill="rgb(247,18,42)"/><text x="19.3249%" y="159.50"></text></g><g><title>check_mod_liveness (39,610,225 samples, 0.19%)</title><rect x="19.1344%" y="133" width="0.1919%" height="15" fill="rgb(241,131,45)"/><text x="19.3844%" y="143.50"></text></g><g><title>misc_checking_2 (167,835,816 samples, 0.81%)</title><rect x="19.0749%" y="165" width="0.8132%" height="15" fill="rgb(249,31,29)"/><text x="19.3249%" y="175.50"></text></g><g><title>match_checking (115,942,243 samples, 0.56%)</title><rect x="19.3263%" y="149" width="0.5617%" height="15" fill="rgb(225,111,53)"/><text x="19.5763%" y="159.50"></text></g><g><title>check_match (110,771,653 samples, 0.54%)</title><rect x="19.3514%" y="133" width="0.5367%" height="15" fill="rgb(238,160,17)"/><text x="19.6014%" y="143.50"></text></g><g><title>check_private_in_public (38,527,072 samples, 0.19%)</title><rect x="19.8882%" y="149" width="0.1867%" height="15" fill="rgb(214,148,48)"/><text x="20.1382%" y="159.50"></text></g><g><title>death_checking (42,290,715 samples, 0.20%)</title><rect x="20.0749%" y="149" width="0.2049%" height="15" fill="rgb(232,36,49)"/><text x="20.3249%" y="159.50"></text></g><g><title>eval_to_const_value_raw (25,690,530 samples, 0.12%)</title><rect x="20.5349%" y="117" width="0.1245%" height="15" fill="rgb(209,103,24)"/><text x="20.7849%" y="127.50"></text></g><g><title>eval_to_const_value_raw (24,859,858 samples, 0.12%)</title><rect x="20.5390%" y="101" width="0.1204%" height="15" fill="rgb(229,88,8)"/><text x="20.7890%" y="111.50"></text></g><g><title>eval_to_allocation_raw (23,925,651 samples, 0.12%)</title><rect x="20.5435%" y="85" width="0.1159%" height="15" fill="rgb(213,181,19)"/><text x="20.7935%" y="95.50"></text></g><g><title>crate_lints (92,767,802 samples, 0.45%)</title><rect x="20.2798%" y="133" width="0.4495%" height="15" fill="rgb(254,191,54)"/><text x="20.5298%" y="143.50"></text></g><g><title>lint_checking (156,246,745 samples, 0.76%)</title><rect x="20.2798%" y="149" width="0.7570%" height="15" fill="rgb(241,83,37)"/><text x="20.5298%" y="159.50"></text></g><g><title>module_lints (63,473,753 samples, 0.31%)</title><rect x="20.7293%" y="133" width="0.3075%" height="15" fill="rgb(233,36,39)"/><text x="20.9793%" y="143.50"></text></g><g><title>lint_mod (63,418,173 samples, 0.31%)</title><rect x="20.7295%" y="117" width="0.3073%" height="15" fill="rgb(226,3,54)"/><text x="20.9795%" y="127.50"></text></g><g><title>privacy_access_levels (40,033,081 samples, 0.19%)</title><rect x="21.0368%" y="149" width="0.1940%" height="15" fill="rgb(245,192,40)"/><text x="21.2868%" y="159.50"></text></g><g><title>privacy_checking_modules (128,878,919 samples, 0.62%)</title><rect x="21.2308%" y="149" width="0.6244%" height="15" fill="rgb(238,167,29)"/><text x="21.4808%" y="159.50"></text></g><g><title>check_mod_privacy (128,833,079 samples, 0.62%)</title><rect x="21.2310%" y="133" width="0.6242%" height="15" fill="rgb(232,182,51)"/><text x="21.4810%" y="143.50"></text></g><g><title>misc_checking_3 (406,739,432 samples, 1.97%)</title><rect x="19.8881%" y="165" width="1.9707%" height="15" fill="rgb(231,60,39)"/><text x="20.1381%" y="175.50">m..</text></g><g><title>coherent_trait (25,487,226 samples, 0.12%)</title><rect x="21.8872%" y="133" width="0.1235%" height="15" fill="rgb(208,69,12)"/><text x="22.1372%" y="143.50"></text></g><g><title>specialization_graph_of (24,403,054 samples, 0.12%)</title><rect x="21.8925%" y="117" width="0.1182%" height="15" fill="rgb(235,93,37)"/><text x="22.1425%" y="127.50"></text></g><g><title>coherence_checking (29,114,818 samples, 0.14%)</title><rect x="21.8869%" y="149" width="0.1411%" height="15" fill="rgb(213,116,39)"/><text x="22.1369%" y="159.50"></text></g><g><title>dropck_outlives (42,952,822 samples, 0.21%)</title><rect x="34.6271%" y="101" width="0.2081%" height="15" fill="rgb(222,207,29)"/><text x="34.8771%" y="111.50"></text></g><g><title>evaluate_obligation (45,104,217 samples, 0.22%)</title><rect x="34.8352%" y="101" width="0.2185%" height="15" fill="rgb(206,96,30)"/><text x="35.0852%" y="111.50"></text></g><g><title>typeck (32,320,762 samples, 0.16%)</title><rect x="35.0912%" y="101" width="0.1566%" height="15" fill="rgb(218,138,4)"/><text x="35.3412%" y="111.50"></text></g><g><title>item_bodies_checking (2,725,840,501 samples, 13.21%)</title><rect x="22.0533%" y="149" width="13.2068%" height="15" fill="rgb(250,191,14)"/><text x="22.3033%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (2,725,836,731 samples, 13.21%)</title><rect x="22.0534%" y="133" width="13.2068%" height="15" fill="rgb(239,60,40)"/><text x="22.3034%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (2,706,979,557 samples, 13.12%)</title><rect x="22.1447%" y="117" width="13.1154%" height="15" fill="rgb(206,27,48)"/><text x="22.3947%" y="127.50">typeck</text></g><g><title>item_types_checking (218,393,305 samples, 1.06%)</title><rect x="35.2601%" y="149" width="1.0581%" height="15" fill="rgb(225,35,8)"/><text x="35.5101%" y="159.50"></text></g><g><title>check_mod_item_types (218,350,124 samples, 1.06%)</title><rect x="35.2603%" y="133" width="1.0579%" height="15" fill="rgb(250,213,24)"/><text x="35.5103%" y="143.50"></text></g><g><title>typeck (26,686,165 samples, 0.13%)</title><rect x="36.1890%" y="117" width="0.1293%" height="15" fill="rgb(247,123,22)"/><text x="36.4390%" y="127.50"></text></g><g><title>fn_sig (34,549,286 samples, 0.17%)</title><rect x="36.4732%" y="117" width="0.1674%" height="15" fill="rgb(231,138,38)"/><text x="36.7232%" y="127.50"></text></g><g><title>lint_levels (28,492,410 samples, 0.14%)</title><rect x="36.8556%" y="69" width="0.1380%" height="15" fill="rgb(231,145,46)"/><text x="37.1056%" y="79.50"></text></g><g><title>is_late_bound_map (59,299,853 samples, 0.29%)</title><rect x="36.7074%" y="101" width="0.2873%" height="15" fill="rgb(251,118,11)"/><text x="36.9574%" y="111.50"></text></g><g><title>resolve_lifetimes (57,837,035 samples, 0.28%)</title><rect x="36.7145%" y="85" width="0.2802%" height="15" fill="rgb(217,147,25)"/><text x="36.9645%" y="95.50"></text></g><g><title>generics_of (91,351,529 samples, 0.44%)</title><rect x="36.6406%" y="117" width="0.4426%" height="15" fill="rgb(247,81,37)"/><text x="36.8906%" y="127.50"></text></g><g><title>predicates_of (49,466,154 samples, 0.24%)</title><rect x="37.1021%" y="117" width="0.2397%" height="15" fill="rgb(209,12,38)"/><text x="37.3521%" y="127.50"></text></g><g><title>predicates_defined_on (42,411,315 samples, 0.21%)</title><rect x="37.1362%" y="101" width="0.2055%" height="15" fill="rgb(227,1,9)"/><text x="37.3862%" y="111.50"></text></g><g><title>type_collecting (220,512,019 samples, 1.07%)</title><rect x="36.3183%" y="149" width="1.0684%" height="15" fill="rgb(248,47,43)"/><text x="36.5683%" y="159.50"></text></g><g><title>collect_mod_item_types (220,452,739 samples, 1.07%)</title><rect x="36.3186%" y="133" width="1.0681%" height="15" fill="rgb(221,10,30)"/><text x="36.5686%" y="143.50"></text></g><g><title>evaluate_obligation (31,015,885 samples, 0.15%)</title><rect x="38.7150%" y="117" width="0.1503%" height="15" fill="rgb(210,229,1)"/><text x="38.9650%" y="127.50"></text></g><g><title>implied_outlives_bounds (29,021,786 samples, 0.14%)</title><rect x="38.8744%" y="117" width="0.1406%" height="15" fill="rgb(222,148,37)"/><text x="39.1244%" y="127.50"></text></g><g><title>param_env (38,305,783 samples, 0.19%)</title><rect x="39.0155%" y="117" width="0.1856%" height="15" fill="rgb(234,67,33)"/><text x="39.2655%" y="127.50"></text></g><g><title>region_scope_tree (49,862,738 samples, 0.24%)</title><rect x="39.2016%" y="117" width="0.2416%" height="15" fill="rgb(247,98,35)"/><text x="39.4516%" y="127.50"></text></g><g><title>check_impl_item_well_formed (401,966,629 samples, 1.95%)</title><rect x="37.4974%" y="133" width="1.9475%" height="15" fill="rgb(247,138,52)"/><text x="37.7474%" y="143.50">c..</text></g><g><title>evaluate_obligation (23,067,717 samples, 0.11%)</title><rect x="39.9059%" y="117" width="0.1118%" height="15" fill="rgb(213,79,30)"/><text x="40.1559%" y="127.50"></text></g><g><title>param_env (20,866,128 samples, 0.10%)</title><rect x="40.0458%" y="117" width="0.1011%" height="15" fill="rgb(246,177,23)"/><text x="40.2958%" y="127.50"></text></g><g><title>check_item_well_formed (158,298,977 samples, 0.77%)</title><rect x="39.4450%" y="133" width="0.7670%" height="15" fill="rgb(230,62,27)"/><text x="39.6950%" y="143.50"></text></g><g><title>analysis (7,201,059,684 samples, 34.89%)</title><rect x="5.3253%" y="181" width="34.8894%" height="15" fill="rgb(216,154,8)"/><text x="5.5753%" y="191.50">analysis</text></g><g><title>type_check_crate (3,788,608,477 samples, 18.36%)</title><rect x="21.8587%" y="165" width="18.3559%" height="15" fill="rgb(244,35,45)"/><text x="22.1087%" y="175.50">type_check_crate</text></g><g><title>wf_checking (582,814,591 samples, 2.82%)</title><rect x="37.3909%" y="149" width="2.8238%" height="15" fill="rgb(251,115,12)"/><text x="37.6409%" y="159.50">wf..</text></g><g><title>fn_abi_of_instance (64,081,778 samples, 0.31%)</title><rect x="41.4826%" y="149" width="0.3105%" height="15" fill="rgb(240,54,50)"/><text x="41.7326%" y="159.50"></text></g><g><title>codegen_module (332,635,178 samples, 1.61%)</title><rect x="40.2318%" y="165" width="1.6116%" height="15" fill="rgb(233,84,52)"/><text x="40.4818%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (39,030,437 samples, 0.19%)</title><rect x="42.2098%" y="101" width="0.1891%" height="15" fill="rgb(207,117,47)"/><text x="42.4598%" y="111.50"></text></g><g><title>optimized_mir (90,111,358 samples, 0.44%)</title><rect x="41.9703%" y="117" width="0.4366%" height="15" fill="rgb(249,43,39)"/><text x="42.2203%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (155,131,594 samples, 0.75%)</title><rect x="41.8442%" y="133" width="0.7516%" height="15" fill="rgb(209,38,44)"/><text x="42.0942%" y="143.50"></text></g><g><title>monomorphization_collector (160,039,579 samples, 0.78%)</title><rect x="41.8442%" y="149" width="0.7754%" height="15" fill="rgb(236,212,23)"/><text x="42.0942%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (180,896,464 samples, 0.88%)</title><rect x="41.8435%" y="165" width="0.8764%" height="15" fill="rgb(242,79,21)"/><text x="42.0935%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (20,703,442 samples, 0.10%)</title><rect x="42.6196%" y="149" width="0.1003%" height="15" fill="rgb(211,96,35)"/><text x="42.8696%" y="159.50"></text></g><g><title>codegen_crate (517,181,913 samples, 2.51%)</title><rect x="40.2147%" y="181" width="2.5058%" height="15" fill="rgb(253,215,40)"/><text x="40.4647%" y="191.50">co..</text></g><g><title>codegen_module_optimize (1,894,411,850 samples, 9.18%)</title><rect x="42.7205%" y="181" width="9.1785%" height="15" fill="rgb(211,81,21)"/><text x="42.9705%" y="191.50">codegen_modul..</text></g><g><title>LLVM_module_optimize (1,706,067,825 samples, 8.27%)</title><rect x="43.6330%" y="165" width="8.2660%" height="15" fill="rgb(208,190,38)"/><text x="43.8830%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (1,407,448,907 samples, 6.82%)</title><rect x="52.2422%" y="165" width="6.8191%" height="15" fill="rgb(235,213,38)"/><text x="52.4922%" y="175.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (1,618,789,634 samples, 7.84%)</title><rect x="59.0614%" y="165" width="7.8431%" height="15" fill="rgb(237,122,38)"/><text x="59.3114%" y="175.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (1,609,905,213 samples, 7.80%)</title><rect x="59.1044%" y="149" width="7.8000%" height="15" fill="rgb(244,218,35)"/><text x="59.3544%" y="159.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (159,580,863 samples, 0.77%)</title><rect x="66.9045%" y="165" width="0.7732%" height="15" fill="rgb(240,68,47)"/><text x="67.1545%" y="175.50"></text></g><g><title>codegen_module_perform_lto (3,268,946,178 samples, 15.84%)</title><rect x="51.8990%" y="181" width="15.8382%" height="15" fill="rgb(210,16,53)"/><text x="52.1490%" y="191.50">codegen_module_perform_l..</text></g><g><title>AST_validation (26,143,554 samples, 0.13%)</title><rect x="67.7380%" y="165" width="0.1267%" height="15" fill="rgb(235,124,12)"/><text x="67.9880%" y="175.50"></text></g><g><title>macro_expand_crate (3,436,089,858 samples, 16.65%)</title><rect x="67.9428%" y="165" width="16.6480%" height="15" fill="rgb(224,169,11)"/><text x="68.1928%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (3,436,031,558 samples, 16.65%)</title><rect x="67.9431%" y="149" width="16.6477%" height="15" fill="rgb(250,166,2)"/><text x="68.1931%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (237,442,769 samples, 1.15%)</title><rect x="84.6499%" y="149" width="1.1504%" height="15" fill="rgb(242,216,29)"/><text x="84.8999%" y="159.50"></text></g><g><title>configure_and_expand (3,753,968,472 samples, 18.19%)</title><rect x="67.7371%" y="181" width="18.1881%" height="15" fill="rgb(230,116,27)"/><text x="67.9871%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (275,181,024 samples, 1.33%)</title><rect x="84.5920%" y="165" width="1.3333%" height="15" fill="rgb(228,99,48)"/><text x="84.8420%" y="175.50"></text></g><g><title>drop_ast (71,426,752 samples, 0.35%)</title><rect x="85.9252%" y="181" width="0.3461%" height="15" fill="rgb(253,11,6)"/><text x="86.1752%" y="191.50"></text></g><g><title>early_lint_checks (71,470,984 samples, 0.35%)</title><rect x="86.2714%" y="181" width="0.3463%" height="15" fill="rgb(247,143,39)"/><text x="86.5214%" y="191.50"></text></g><g><title>free_global_ctxt (101,605,522 samples, 0.49%)</title><rect x="86.6177%" y="181" width="0.4923%" height="15" fill="rgb(236,97,10)"/><text x="86.8677%" y="191.50"></text></g><g><title>exported_symbols (27,823,263 samples, 0.13%)</title><rect x="88.7001%" y="165" width="0.1348%" height="15" fill="rgb(233,208,19)"/><text x="88.9501%" y="175.50"></text></g><g><title>layout_of (50,555,461 samples, 0.24%)</title><rect x="90.5615%" y="149" width="0.2449%" height="15" fill="rgb(216,164,2)"/><text x="90.8115%" y="159.50"></text></g><g><title>is_copy_raw (60,201,747 samples, 0.29%)</title><rect x="93.6739%" y="117" width="0.2917%" height="15" fill="rgb(220,129,5)"/><text x="93.9239%" y="127.50"></text></g><g><title>evaluate_obligation (47,794,556 samples, 0.23%)</title><rect x="93.7340%" y="101" width="0.2316%" height="15" fill="rgb(242,17,10)"/><text x="93.9840%" y="111.50"></text></g><g><title>needs_drop_raw (67,895,357 samples, 0.33%)</title><rect x="93.6368%" y="133" width="0.3290%" height="15" fill="rgb(242,107,0)"/><text x="93.8868%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (664,288,025 samples, 3.22%)</title><rect x="90.8065%" y="149" width="3.2185%" height="15" fill="rgb(251,28,31)"/><text x="91.0565%" y="159.50">mir..</text></g><g><title>optimized_mir (1,064,842,397 samples, 5.16%)</title><rect x="88.8702%" y="165" width="5.1592%" height="15" fill="rgb(233,223,10)"/><text x="89.1202%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (1,442,354,612 samples, 6.99%)</title><rect x="87.1100%" y="181" width="6.9883%" height="15" fill="rgb(215,21,27)"/><text x="87.3600%" y="191.50">generate_..</text></g><g><title>hir_lowering (372,597,179 samples, 1.81%)</title><rect x="94.0983%" y="181" width="1.8052%" height="15" fill="rgb(232,23,21)"/><text x="94.3483%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (700,234,361 samples, 3.39%)</title><rect x="95.9036%" y="165" width="3.3927%" height="15" fill="rgb(244,5,23)"/><text x="96.1536%" y="175.50">fin..</text></g><g><title>link_crate (97,757,768 samples, 0.47%)</title><rect x="99.2963%" y="165" width="0.4736%" height="15" fill="rgb(226,81,46)"/><text x="99.5463%" y="175.50"></text></g><g><title>link_binary (97,464,255 samples, 0.47%)</title><rect x="99.2977%" y="149" width="0.4722%" height="15" fill="rgb(247,70,30)"/><text x="99.5477%" y="159.50"></text></g><g><title>link_rlib (92,545,020 samples, 0.45%)</title><rect x="99.3216%" y="133" width="0.4484%" height="15" fill="rgb(212,68,19)"/><text x="99.5716%" y="143.50"></text></g><g><title>link (798,035,169 samples, 3.87%)</title><rect x="95.9035%" y="181" width="3.8665%" height="15" fill="rgb(240,187,13)"/><text x="96.1535%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (21,412,761 samples, 0.10%)</title><rect x="99.7997%" y="181" width="0.1037%" height="15" fill="rgb(223,113,26)"/><text x="100.0497%" y="191.50"></text></g><g><title>all (20,639,689,701 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (20,639,689,701 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>