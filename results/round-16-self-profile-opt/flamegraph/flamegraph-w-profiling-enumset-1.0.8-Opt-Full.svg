<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,328,130 samples, 2.68%)</title><rect x="0.3297%" y="181" width="2.6834%" height="15" fill="rgb(227,0,7)"/><text x="0.5797%" y="191.50">LL..</text></g><g><title>item_attrs (449,193 samples, 0.19%)</title><rect x="15.1662%" y="69" width="0.1905%" height="15" fill="rgb(217,0,24)"/><text x="15.4162%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (436,483 samples, 0.19%)</title><rect x="15.1716%" y="53" width="0.1851%" height="15" fill="rgb(221,193,54)"/><text x="15.4216%" y="63.50"></text></g><g><title>codegen_fn_attrs (603,864 samples, 0.26%)</title><rect x="15.1089%" y="85" width="0.2561%" height="15" fill="rgb(248,212,6)"/><text x="15.3589%" y="95.50"></text></g><g><title>needs_drop_raw (1,160,475 samples, 0.49%)</title><rect x="17.8849%" y="69" width="0.4921%" height="15" fill="rgb(208,68,35)"/><text x="18.1349%" y="79.50"></text></g><g><title>is_copy_raw (1,013,183 samples, 0.43%)</title><rect x="17.9473%" y="53" width="0.4296%" height="15" fill="rgb(232,128,0)"/><text x="18.1973%" y="63.50"></text></g><g><title>evaluate_obligation (859,161 samples, 0.36%)</title><rect x="18.0126%" y="37" width="0.3643%" height="15" fill="rgb(207,160,47)"/><text x="18.2626%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (991,103 samples, 0.42%)</title><rect x="18.6177%" y="53" width="0.4203%" height="15" fill="rgb(228,23,34)"/><text x="18.8677%" y="63.50"></text></g><g><title>resolve_instance (1,817,952 samples, 0.77%)</title><rect x="18.3770%" y="69" width="0.7709%" height="15" fill="rgb(218,30,26)"/><text x="18.6270%" y="79.50"></text></g><g><title>thir_body (1,938,835 samples, 0.82%)</title><rect x="19.1915%" y="69" width="0.8222%" height="15" fill="rgb(220,122,19)"/><text x="19.4415%" y="79.50"></text></g><g><title>mir_const (15,072,657 samples, 6.39%)</title><rect x="13.6730%" y="117" width="6.3915%" height="15" fill="rgb(250,228,42)"/><text x="13.9230%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (12,790,653 samples, 5.42%)</title><rect x="14.6407%" y="101" width="5.4239%" height="15" fill="rgb(240,193,28)"/><text x="14.8907%" y="111.50">unsafet..</text></g><g><title>mir_built (11,082,684 samples, 4.70%)</title><rect x="15.3649%" y="85" width="4.6996%" height="15" fill="rgb(216,20,37)"/><text x="15.6149%" y="95.50">mir_b..</text></g><g><title>mir_const_qualif (305,895 samples, 0.13%)</title><rect x="20.0645%" y="117" width="0.1297%" height="15" fill="rgb(206,188,39)"/><text x="20.3145%" y="127.50"></text></g><g><title>mir_promoted (17,309,630 samples, 7.34%)</title><rect x="12.8542%" y="133" width="7.3401%" height="15" fill="rgb(217,207,13)"/><text x="13.1042%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (1,726,386 samples, 0.73%)</title><rect x="20.1949%" y="133" width="0.7321%" height="15" fill="rgb(231,73,38)"/><text x="20.4449%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,591,988 samples, 0.68%)</title><rect x="20.9270%" y="133" width="0.6751%" height="15" fill="rgb(225,20,46)"/><text x="21.1770%" y="143.50"></text></g><g><title>normalize_projection_ty (1,002,425 samples, 0.43%)</title><rect x="21.1770%" y="117" width="0.4251%" height="15" fill="rgb(210,31,41)"/><text x="21.4270%" y="127.50"></text></g><g><title>type_op_normalize_predicate (378,777 samples, 0.16%)</title><rect x="21.6020%" y="133" width="0.1606%" height="15" fill="rgb(221,200,47)"/><text x="21.8520%" y="143.50"></text></g><g><title>type_op_normalize_ty (387,642 samples, 0.16%)</title><rect x="21.7627%" y="133" width="0.1644%" height="15" fill="rgb(226,26,5)"/><text x="22.0127%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,090,154 samples, 1.31%)</title><rect x="21.9270%" y="133" width="1.3104%" height="15" fill="rgb(249,33,26)"/><text x="22.1770%" y="143.50"></text></g><g><title>evaluate_obligation (405,338 samples, 0.17%)</title><rect x="23.0655%" y="117" width="0.1719%" height="15" fill="rgb(235,183,28)"/><text x="23.3155%" y="127.50"></text></g><g><title>MIR_borrow_checking (47,268,081 samples, 20.04%)</title><rect x="3.1946%" y="165" width="20.0439%" height="15" fill="rgb(221,5,38)"/><text x="3.4446%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (46,791,905 samples, 19.84%)</title><rect x="3.3965%" y="149" width="19.8420%" height="15" fill="rgb(247,18,42)"/><text x="3.6465%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (263,993 samples, 0.11%)</title><rect x="23.2385%" y="165" width="0.1119%" height="15" fill="rgb(241,131,45)"/><text x="23.4885%" y="175.50"></text></g><g><title>hir_module_items (343,613 samples, 0.15%)</title><rect x="23.3505%" y="165" width="0.1457%" height="15" fill="rgb(249,31,29)"/><text x="23.6005%" y="175.50"></text></g><g><title>codegen_fn_attrs (405,026 samples, 0.17%)</title><rect x="23.9865%" y="101" width="0.1718%" height="15" fill="rgb(225,111,53)"/><text x="24.2365%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,059,063 samples, 0.45%)</title><rect x="23.7218%" y="133" width="0.4491%" height="15" fill="rgb(238,160,17)"/><text x="23.9718%" y="143.50"></text></g><g><title>should_inherit_track_caller (804,992 samples, 0.34%)</title><rect x="23.8295%" y="117" width="0.3414%" height="15" fill="rgb(214,148,48)"/><text x="24.0795%" y="127.50"></text></g><g><title>check_mod_attrs (1,570,427 samples, 0.67%)</title><rect x="23.5051%" y="149" width="0.6659%" height="15" fill="rgb(232,36,49)"/><text x="23.7551%" y="159.50"></text></g><g><title>check_mod_const_bodies (289,314 samples, 0.12%)</title><rect x="24.1710%" y="149" width="0.1227%" height="15" fill="rgb(209,103,24)"/><text x="24.4210%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (475,766 samples, 0.20%)</title><rect x="24.3418%" y="149" width="0.2017%" height="15" fill="rgb(229,88,8)"/><text x="24.5918%" y="159.50"></text></g><g><title>misc_checking_1 (2,517,738 samples, 1.07%)</title><rect x="23.4963%" y="165" width="1.0676%" height="15" fill="rgb(213,181,19)"/><text x="23.7463%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (701,158 samples, 0.30%)</title><rect x="24.5647%" y="149" width="0.2973%" height="15" fill="rgb(254,191,54)"/><text x="24.8147%" y="159.50"></text></g><g><title>check_mod_liveness (572,877 samples, 0.24%)</title><rect x="24.6191%" y="133" width="0.2429%" height="15" fill="rgb(241,83,37)"/><text x="24.8691%" y="143.50"></text></g><g><title>misc_checking_2 (1,951,141 samples, 0.83%)</title><rect x="24.5640%" y="165" width="0.8274%" height="15" fill="rgb(233,36,39)"/><text x="24.8140%" y="175.50"></text></g><g><title>match_checking (1,248,353 samples, 0.53%)</title><rect x="24.8620%" y="149" width="0.5294%" height="15" fill="rgb(226,3,54)"/><text x="25.1120%" y="159.50"></text></g><g><title>check_match (1,143,070 samples, 0.48%)</title><rect x="24.9067%" y="133" width="0.4847%" height="15" fill="rgb(245,192,40)"/><text x="25.1567%" y="143.50"></text></g><g><title>check_private_in_public (367,334 samples, 0.16%)</title><rect x="25.3959%" y="149" width="0.1558%" height="15" fill="rgb(238,167,29)"/><text x="25.6459%" y="159.50"></text></g><g><title>death_checking (810,050 samples, 0.34%)</title><rect x="25.5517%" y="149" width="0.3435%" height="15" fill="rgb(232,182,51)"/><text x="25.8017%" y="159.50"></text></g><g><title>item_attrs (304,713 samples, 0.13%)</title><rect x="25.7660%" y="133" width="0.1292%" height="15" fill="rgb(231,60,39)"/><text x="26.0160%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (303,313 samples, 0.13%)</title><rect x="25.7666%" y="117" width="0.1286%" height="15" fill="rgb(208,69,12)"/><text x="26.0166%" y="127.50"></text></g><g><title>crate_lints (1,453,476 samples, 0.62%)</title><rect x="25.8958%" y="133" width="0.6163%" height="15" fill="rgb(235,93,37)"/><text x="26.1458%" y="143.50"></text></g><g><title>type_of (350,464 samples, 0.15%)</title><rect x="26.3635%" y="117" width="0.1486%" height="15" fill="rgb(213,116,39)"/><text x="26.6135%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (271,964 samples, 0.12%)</title><rect x="26.3968%" y="101" width="0.1153%" height="15" fill="rgb(222,207,29)"/><text x="26.6468%" y="111.50"></text></g><g><title>lint_checking (1,971,242 samples, 0.84%)</title><rect x="25.8952%" y="149" width="0.8359%" height="15" fill="rgb(206,96,30)"/><text x="26.1452%" y="159.50"></text></g><g><title>module_lints (516,296 samples, 0.22%)</title><rect x="26.5122%" y="133" width="0.2189%" height="15" fill="rgb(218,138,4)"/><text x="26.7622%" y="143.50"></text></g><g><title>lint_mod (512,286 samples, 0.22%)</title><rect x="26.5139%" y="117" width="0.2172%" height="15" fill="rgb(250,191,14)"/><text x="26.7639%" y="127.50"></text></g><g><title>privacy_access_levels (413,444 samples, 0.18%)</title><rect x="26.7311%" y="149" width="0.1753%" height="15" fill="rgb(239,60,40)"/><text x="26.9811%" y="159.50"></text></g><g><title>privacy_checking_modules (1,080,762 samples, 0.46%)</title><rect x="26.9064%" y="149" width="0.4583%" height="15" fill="rgb(206,27,48)"/><text x="27.1564%" y="159.50"></text></g><g><title>check_mod_privacy (1,077,982 samples, 0.46%)</title><rect x="26.9076%" y="133" width="0.4571%" height="15" fill="rgb(225,35,8)"/><text x="27.1576%" y="143.50"></text></g><g><title>misc_checking_3 (4,679,622 samples, 1.98%)</title><rect x="25.3914%" y="165" width="1.9844%" height="15" fill="rgb(250,213,24)"/><text x="25.6414%" y="175.50">m..</text></g><g><title>impl_parent (1,685,636 samples, 0.71%)</title><rect x="28.8991%" y="101" width="0.7148%" height="15" fill="rgb(247,123,22)"/><text x="29.1491%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (931,989 samples, 0.40%)</title><rect x="29.2186%" y="85" width="0.3952%" height="15" fill="rgb(231,138,38)"/><text x="29.4686%" y="95.50"></text></g><g><title>impl_trait_ref (3,423,339 samples, 1.45%)</title><rect x="29.6138%" y="101" width="1.4517%" height="15" fill="rgb(231,145,46)"/><text x="29.8638%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,228,067 samples, 0.94%)</title><rect x="30.1207%" y="85" width="0.9448%" height="15" fill="rgb(251,118,11)"/><text x="30.3707%" y="95.50"></text></g><g><title>trait_impls_of (526,024 samples, 0.22%)</title><rect x="31.0960%" y="101" width="0.2231%" height="15" fill="rgb(217,147,25)"/><text x="31.3460%" y="111.50"></text></g><g><title>coherent_trait (9,113,121 samples, 3.86%)</title><rect x="27.4554%" y="133" width="3.8644%" height="15" fill="rgb(247,81,37)"/><text x="27.7054%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (8,885,428 samples, 3.77%)</title><rect x="27.5520%" y="117" width="3.7679%" height="15" fill="rgb(209,12,38)"/><text x="27.8020%" y="127.50">spec..</text></g><g><title>coherence_checking (9,217,741 samples, 3.91%)</title><rect x="27.4436%" y="149" width="3.9088%" height="15" fill="rgb(227,1,9)"/><text x="27.6936%" y="159.50">cohe..</text></g><g><title>associated_item (642,467 samples, 0.27%)</title><rect x="46.5151%" y="85" width="0.2724%" height="15" fill="rgb(248,47,43)"/><text x="46.7651%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (501,956 samples, 0.21%)</title><rect x="46.5747%" y="69" width="0.2129%" height="15" fill="rgb(221,10,30)"/><text x="46.8247%" y="79.50"></text></g><g><title>associated_items (926,452 samples, 0.39%)</title><rect x="46.4096%" y="101" width="0.3929%" height="15" fill="rgb(210,229,1)"/><text x="46.6596%" y="111.50"></text></g><g><title>dropck_outlives (313,395 samples, 0.13%)</title><rect x="46.8412%" y="101" width="0.1329%" height="15" fill="rgb(222,148,37)"/><text x="47.0912%" y="111.50"></text></g><g><title>generics_of (756,078 samples, 0.32%)</title><rect x="49.5340%" y="85" width="0.3206%" height="15" fill="rgb(234,67,33)"/><text x="49.7840%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (548,337 samples, 0.23%)</title><rect x="49.6221%" y="69" width="0.2325%" height="15" fill="rgb(247,98,35)"/><text x="49.8721%" y="79.50"></text></g><g><title>impl_polarity (406,192 samples, 0.17%)</title><rect x="49.8780%" y="85" width="0.1722%" height="15" fill="rgb(247,138,52)"/><text x="50.1280%" y="95.50"></text></g><g><title>impl_trait_ref (736,967 samples, 0.31%)</title><rect x="50.0503%" y="85" width="0.3125%" height="15" fill="rgb(213,79,30)"/><text x="50.3003%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (590,155 samples, 0.25%)</title><rect x="50.1125%" y="69" width="0.2503%" height="15" fill="rgb(246,177,23)"/><text x="50.3625%" y="79.50"></text></g><g><title>predicates_of (1,017,539 samples, 0.43%)</title><rect x="50.3801%" y="85" width="0.4315%" height="15" fill="rgb(230,62,27)"/><text x="50.6301%" y="95.50"></text></g><g><title>predicates_defined_on (566,795 samples, 0.24%)</title><rect x="50.5713%" y="69" width="0.2403%" height="15" fill="rgb(216,154,8)"/><text x="50.8213%" y="79.50"></text></g><g><title>specializes (2,406,495 samples, 1.02%)</title><rect x="50.8116%" y="85" width="1.0205%" height="15" fill="rgb(244,35,45)"/><text x="51.0616%" y="95.50"></text></g><g><title>param_env (1,466,786 samples, 0.62%)</title><rect x="51.2101%" y="69" width="0.6220%" height="15" fill="rgb(251,115,12)"/><text x="51.4601%" y="79.50"></text></g><g><title>def_span (663,318 samples, 0.28%)</title><rect x="51.5508%" y="53" width="0.2813%" height="15" fill="rgb(240,54,50)"/><text x="51.8008%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (589,604 samples, 0.25%)</title><rect x="51.5821%" y="37" width="0.2500%" height="15" fill="rgb(233,84,52)"/><text x="51.8321%" y="47.50"></text></g><g><title>evaluate_obligation (11,587,175 samples, 4.91%)</title><rect x="46.9741%" y="101" width="4.9135%" height="15" fill="rgb(207,117,47)"/><text x="47.2241%" y="111.50">evalua..</text></g><g><title>method_autoderef_steps (362,303 samples, 0.15%)</title><rect x="52.1516%" y="101" width="0.1536%" height="15" fill="rgb(249,43,39)"/><text x="52.4016%" y="111.50"></text></g><g><title>predicates_of (239,444 samples, 0.10%)</title><rect x="52.4225%" y="101" width="0.1015%" height="15" fill="rgb(209,38,44)"/><text x="52.6725%" y="111.50"></text></g><g><title>evaluate_obligation (411,944 samples, 0.17%)</title><rect x="55.2604%" y="85" width="0.1747%" height="15" fill="rgb(236,212,23)"/><text x="55.5104%" y="95.50"></text></g><g><title>is_copy_raw (359,023 samples, 0.15%)</title><rect x="55.4532%" y="85" width="0.1522%" height="15" fill="rgb(242,79,21)"/><text x="55.7032%" y="95.50"></text></g><g><title>evaluate_obligation (312,083 samples, 0.13%)</title><rect x="55.4731%" y="69" width="0.1323%" height="15" fill="rgb(211,96,35)"/><text x="55.7231%" y="79.50"></text></g><g><title>typeck (7,284,219 samples, 3.09%)</title><rect x="52.6161%" y="101" width="3.0889%" height="15" fill="rgb(253,215,40)"/><text x="52.8661%" y="111.50">typ..</text></g><g><title>item_bodies_checking (57,474,073 samples, 24.37%)</title><rect x="31.3806%" y="149" width="24.3718%" height="15" fill="rgb(211,81,21)"/><text x="31.6306%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (57,470,363 samples, 24.37%)</title><rect x="31.3822%" y="133" width="24.3702%" height="15" fill="rgb(208,190,38)"/><text x="31.6322%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (57,156,517 samples, 24.24%)</title><rect x="31.5153%" y="117" width="24.2371%" height="15" fill="rgb(235,213,38)"/><text x="31.7653%" y="127.50">typeck</text></g><g><title>item_types_checking (3,121,015 samples, 1.32%)</title><rect x="55.7524%" y="149" width="1.3235%" height="15" fill="rgb(237,122,38)"/><text x="56.0024%" y="159.50"></text></g><g><title>check_mod_item_types (3,117,025 samples, 1.32%)</title><rect x="55.7541%" y="133" width="1.3218%" height="15" fill="rgb(244,218,35)"/><text x="56.0041%" y="143.50"></text></g><g><title>fn_sig (636,314 samples, 0.27%)</title><rect x="57.3302%" y="117" width="0.2698%" height="15" fill="rgb(240,68,47)"/><text x="57.5802%" y="127.50"></text></g><g><title>named_region_map (392,605 samples, 0.17%)</title><rect x="57.7293%" y="101" width="0.1665%" height="15" fill="rgb(210,16,53)"/><text x="57.9793%" y="111.50"></text></g><g><title>resolve_lifetimes (352,604 samples, 0.15%)</title><rect x="57.7463%" y="85" width="0.1495%" height="15" fill="rgb(235,124,12)"/><text x="57.9963%" y="95.50"></text></g><g><title>generics_of (735,299 samples, 0.31%)</title><rect x="57.6001%" y="117" width="0.3118%" height="15" fill="rgb(224,169,11)"/><text x="57.8501%" y="127.50"></text></g><g><title>late_bound_vars_map (671,499 samples, 0.28%)</title><rect x="58.2843%" y="69" width="0.2847%" height="15" fill="rgb(250,166,2)"/><text x="58.5343%" y="79.50"></text></g><g><title>resolve_lifetimes (646,069 samples, 0.27%)</title><rect x="58.2951%" y="53" width="0.2740%" height="15" fill="rgb(242,216,29)"/><text x="58.5451%" y="63.50"></text></g><g><title>explicit_predicates_of (1,046,682 samples, 0.44%)</title><rect x="58.1435%" y="85" width="0.4438%" height="15" fill="rgb(230,116,27)"/><text x="58.3935%" y="95.50"></text></g><g><title>predicates_of (1,560,248 samples, 0.66%)</title><rect x="57.9968%" y="117" width="0.6616%" height="15" fill="rgb(228,99,48)"/><text x="58.2468%" y="127.50"></text></g><g><title>predicates_defined_on (1,429,665 samples, 0.61%)</title><rect x="58.0522%" y="101" width="0.6062%" height="15" fill="rgb(253,11,6)"/><text x="58.3022%" y="111.50"></text></g><g><title>type_collecting (4,018,724 samples, 1.70%)</title><rect x="57.0770%" y="149" width="1.7041%" height="15" fill="rgb(247,143,39)"/><text x="57.3270%" y="159.50"></text></g><g><title>collect_mod_item_types (4,009,914 samples, 1.70%)</title><rect x="57.0807%" y="133" width="1.7004%" height="15" fill="rgb(236,97,10)"/><text x="57.3307%" y="143.50"></text></g><g><title>evaluate_obligation (499,079 samples, 0.21%)</title><rect x="61.4300%" y="117" width="0.2116%" height="15" fill="rgb(233,208,19)"/><text x="61.6800%" y="127.50"></text></g><g><title>implied_outlives_bounds (317,161 samples, 0.13%)</title><rect x="61.6488%" y="117" width="0.1345%" height="15" fill="rgb(216,164,2)"/><text x="61.8988%" y="127.50"></text></g><g><title>param_env (1,402,467 samples, 0.59%)</title><rect x="61.7833%" y="117" width="0.5947%" height="15" fill="rgb(220,129,5)"/><text x="62.0333%" y="127.50"></text></g><g><title>region_scope_tree (765,482 samples, 0.32%)</title><rect x="62.3964%" y="117" width="0.3246%" height="15" fill="rgb(242,17,10)"/><text x="62.6464%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,828,768 samples, 3.74%)</title><rect x="58.9820%" y="133" width="3.7438%" height="15" fill="rgb(242,107,0)"/><text x="59.2320%" y="143.50">chec..</text></g><g><title>evaluate_obligation (970,220 samples, 0.41%)</title><rect x="63.7950%" y="117" width="0.4114%" height="15" fill="rgb(251,28,31)"/><text x="64.0450%" y="127.50"></text></g><g><title>param_env (426,276 samples, 0.18%)</title><rect x="64.2386%" y="117" width="0.1808%" height="15" fill="rgb(233,223,10)"/><text x="64.4886%" y="127.50"></text></g><g><title>check_item_well_formed (4,284,237 samples, 1.82%)</title><rect x="62.7258%" y="133" width="1.8167%" height="15" fill="rgb(215,21,27)"/><text x="62.9758%" y="143.50">c..</text></g><g><title>param_env (460,994 samples, 0.20%)</title><rect x="65.6685%" y="117" width="0.1955%" height="15" fill="rgb(232,23,21)"/><text x="65.9185%" y="127.50"></text></g><g><title>analysis (148,266,783 samples, 62.87%)</title><rect x="3.0131%" y="181" width="62.8723%" height="15" fill="rgb(244,5,23)"/><text x="3.2631%" y="191.50">analysis</text></g><g><title>type_check_crate (90,814,260 samples, 38.51%)</title><rect x="27.3758%" y="165" width="38.5096%" height="15" fill="rgb(226,81,46)"/><text x="27.6258%" y="175.50">type_check_crate</text></g><g><title>wf_checking (16,731,284 samples, 7.09%)</title><rect x="58.7905%" y="149" width="7.0949%" height="15" fill="rgb(247,70,30)"/><text x="59.0405%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,166,765 samples, 1.34%)</title><rect x="64.5425%" y="133" width="1.3429%" height="15" fill="rgb(212,68,19)"/><text x="64.7925%" y="143.50"></text></g><g><title>codegen_crate (959,420 samples, 0.41%)</title><rect x="65.8910%" y="181" width="0.4068%" height="15" fill="rgb(240,187,13)"/><text x="66.1410%" y="191.50"></text></g><g><title>codegen_module_optimize (1,033,531 samples, 0.44%)</title><rect x="66.2978%" y="181" width="0.4383%" height="15" fill="rgb(223,113,26)"/><text x="66.5478%" y="191.50"></text></g><g><title>LLVM_module_optimize (517,496 samples, 0.22%)</title><rect x="66.5166%" y="165" width="0.2194%" height="15" fill="rgb(206,192,2)"/><text x="66.7666%" y="175.50"></text></g><g><title>LLVM_lto_optimize (249,303 samples, 0.11%)</title><rect x="66.9183%" y="165" width="0.1057%" height="15" fill="rgb(241,108,4)"/><text x="67.1683%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,763,670 samples, 1.17%)</title><rect x="67.0240%" y="165" width="1.1719%" height="15" fill="rgb(247,173,49)"/><text x="67.2740%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,723,930 samples, 1.16%)</title><rect x="67.0409%" y="149" width="1.1551%" height="15" fill="rgb(224,114,35)"/><text x="67.2909%" y="159.50"></text></g><g><title>codegen_module_perform_lto (3,485,608 samples, 1.48%)</title><rect x="66.7361%" y="181" width="1.4781%" height="15" fill="rgb(245,159,27)"/><text x="66.9861%" y="191.50"></text></g><g><title>AST_validation (561,476 samples, 0.24%)</title><rect x="68.3092%" y="165" width="0.2381%" height="15" fill="rgb(245,172,44)"/><text x="68.5592%" y="175.50"></text></g><g><title>metadata_register_crate (13,227,266 samples, 5.61%)</title><rect x="76.2902%" y="133" width="5.6090%" height="15" fill="rgb(236,23,11)"/><text x="76.5402%" y="143.50">metadat..</text></g><g><title>macro_expand_crate (31,396,825 samples, 13.31%)</title><rect x="68.6253%" y="165" width="13.3138%" height="15" fill="rgb(205,117,38)"/><text x="68.8753%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (31,377,685 samples, 13.31%)</title><rect x="68.6334%" y="149" width="13.3057%" height="15" fill="rgb(237,72,25)"/><text x="68.8834%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (360,034 samples, 0.15%)</title><rect x="81.9410%" y="165" width="0.1527%" height="15" fill="rgb(244,70,9)"/><text x="82.1910%" y="175.50"></text></g><g><title>late_resolve_crate (1,995,632 samples, 0.85%)</title><rect x="82.2023%" y="149" width="0.8462%" height="15" fill="rgb(217,125,39)"/><text x="82.4523%" y="159.50"></text></g><g><title>configure_and_expand (35,134,386 samples, 14.90%)</title><rect x="68.2142%" y="181" width="14.8987%" height="15" fill="rgb(235,36,10)"/><text x="68.4642%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,403,397 samples, 1.02%)</title><rect x="82.0937%" y="165" width="1.0192%" height="15" fill="rgb(251,123,47)"/><text x="82.3437%" y="175.50"></text></g><g><title>drop_ast (334,604 samples, 0.14%)</title><rect x="83.1128%" y="181" width="0.1419%" height="15" fill="rgb(221,13,13)"/><text x="83.3628%" y="191.50"></text></g><g><title>early_lint_checks (493,015 samples, 0.21%)</title><rect x="83.2620%" y="181" width="0.2091%" height="15" fill="rgb(238,131,9)"/><text x="83.5120%" y="191.50"></text></g><g><title>free_global_ctxt (2,891,522 samples, 1.23%)</title><rect x="83.4711%" y="181" width="1.2261%" height="15" fill="rgb(211,50,8)"/><text x="83.7211%" y="191.50"></text></g><g><title>exported_symbols (307,384 samples, 0.13%)</title><rect x="86.2635%" y="165" width="0.1303%" height="15" fill="rgb(245,182,24)"/><text x="86.5135%" y="175.50"></text></g><g><title>reachable_non_generics (299,254 samples, 0.13%)</title><rect x="86.2669%" y="149" width="0.1269%" height="15" fill="rgb(242,14,37)"/><text x="86.5169%" y="159.50"></text></g><g><title>reachable_set (250,083 samples, 0.11%)</title><rect x="86.2878%" y="133" width="0.1060%" height="15" fill="rgb(246,228,12)"/><text x="86.5378%" y="143.50"></text></g><g><title>is_sized_raw (415,544 samples, 0.18%)</title><rect x="89.7545%" y="133" width="0.1762%" height="15" fill="rgb(213,55,15)"/><text x="90.0045%" y="143.50"></text></g><g><title>evaluate_obligation (352,712 samples, 0.15%)</title><rect x="89.7811%" y="117" width="0.1496%" height="15" fill="rgb(209,9,3)"/><text x="90.0311%" y="127.50"></text></g><g><title>layout_of (329,286 samples, 0.14%)</title><rect x="89.9307%" y="133" width="0.1396%" height="15" fill="rgb(230,59,30)"/><text x="90.1807%" y="143.50"></text></g><g><title>layout_of (1,287,635 samples, 0.55%)</title><rect x="89.5546%" y="149" width="0.5460%" height="15" fill="rgb(209,121,21)"/><text x="89.8046%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,494,791 samples, 2.75%)</title><rect x="90.1007%" y="149" width="2.7541%" height="15" fill="rgb(220,109,13)"/><text x="90.3507%" y="159.50">mi..</text></g><g><title>optimized_mir (15,079,224 samples, 6.39%)</title><rect x="86.4764%" y="165" width="6.3943%" height="15" fill="rgb(232,18,1)"/><text x="86.7264%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (19,474,544 samples, 8.26%)</title><rect x="84.6972%" y="181" width="8.2581%" height="15" fill="rgb(215,41,42)"/><text x="84.9472%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (5,489,751 samples, 2.33%)</title><rect x="92.9553%" y="181" width="2.3279%" height="15" fill="rgb(224,123,36)"/><text x="93.2053%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (2,378,646 samples, 1.01%)</title><rect x="95.2889%" y="165" width="1.0087%" height="15" fill="rgb(240,125,3)"/><text x="95.5389%" y="175.50"></text></g><g><title>link_crate (1,137,563 samples, 0.48%)</title><rect x="96.2976%" y="165" width="0.4824%" height="15" fill="rgb(205,98,50)"/><text x="96.5476%" y="175.50"></text></g><g><title>link_binary (1,112,713 samples, 0.47%)</title><rect x="96.3081%" y="149" width="0.4718%" height="15" fill="rgb(205,185,37)"/><text x="96.5581%" y="159.50"></text></g><g><title>link_rlib (807,749 samples, 0.34%)</title><rect x="96.4374%" y="133" width="0.3425%" height="15" fill="rgb(238,207,15)"/><text x="96.6874%" y="143.50"></text></g><g><title>link (3,537,669 samples, 1.50%)</title><rect x="95.2833%" y="181" width="1.5001%" height="15" fill="rgb(213,199,42)"/><text x="95.5333%" y="191.50"></text></g><g><title>parse_crate (5,515,501 samples, 2.34%)</title><rect x="96.7834%" y="181" width="2.3388%" height="15" fill="rgb(235,201,11)"/><text x="97.0334%" y="191.50">p..</text></g><g><title>self_profile_alloc_query_strings (1,247,273 samples, 0.53%)</title><rect x="99.2261%" y="181" width="0.5289%" height="15" fill="rgb(207,46,11)"/><text x="99.4761%" y="191.50"></text></g><g><title>all (235,822,196 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (235,822,196 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (504,426 samples, 0.21%)</title><rect x="99.7861%" y="181" width="0.2139%" height="15" fill="rgb(247,202,23)"/><text x="100.0361%" y="191.50"></text></g></svg></svg>