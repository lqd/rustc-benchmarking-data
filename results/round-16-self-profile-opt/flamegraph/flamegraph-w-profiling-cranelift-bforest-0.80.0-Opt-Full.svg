<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,307,475 samples, 5.26%)</title><rect x="0.2262%" y="197" width="5.2573%" height="15" fill="rgb(227,0,7)"/><text x="0.4762%" y="207.50">LLVM_p..</text></g><g><title>implied_outlives_bounds (510,648 samples, 0.13%)</title><rect x="15.1686%" y="149" width="0.1322%" height="15" fill="rgb(217,0,24)"/><text x="15.4186%" y="159.50"></text></g><g><title>param_env (441,034 samples, 0.11%)</title><rect x="16.4656%" y="117" width="0.1142%" height="15" fill="rgb(221,193,54)"/><text x="16.7156%" y="127.50"></text></g><g><title>codegen_fn_attrs (442,494 samples, 0.11%)</title><rect x="17.0032%" y="101" width="0.1146%" height="15" fill="rgb(248,212,6)"/><text x="17.2532%" y="111.50"></text></g><g><title>is_copy_raw (1,883,258 samples, 0.49%)</title><rect x="19.3955%" y="69" width="0.4875%" height="15" fill="rgb(208,68,35)"/><text x="19.6455%" y="79.50"></text></g><g><title>evaluate_obligation (1,539,290 samples, 0.40%)</title><rect x="19.4845%" y="53" width="0.3985%" height="15" fill="rgb(232,128,0)"/><text x="19.7345%" y="63.50"></text></g><g><title>needs_drop_raw (2,325,711 samples, 0.60%)</title><rect x="19.2939%" y="85" width="0.6021%" height="15" fill="rgb(207,160,47)"/><text x="19.5439%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (786,983 samples, 0.20%)</title><rect x="20.0100%" y="69" width="0.2037%" height="15" fill="rgb(228,23,34)"/><text x="20.2600%" y="79.50"></text></g><g><title>specialization_graph_of (413,675 samples, 0.11%)</title><rect x="20.2348%" y="69" width="0.1071%" height="15" fill="rgb(218,30,26)"/><text x="20.4848%" y="79.50"></text></g><g><title>resolve_instance (1,854,621 samples, 0.48%)</title><rect x="19.8960%" y="85" width="0.4801%" height="15" fill="rgb(220,122,19)"/><text x="20.1460%" y="95.50"></text></g><g><title>thir_body (3,366,302 samples, 0.87%)</title><rect x="20.4039%" y="85" width="0.8715%" height="15" fill="rgb(250,228,42)"/><text x="20.6539%" y="95.50"></text></g><g><title>mir_const (20,856,269 samples, 5.40%)</title><rect x="15.9044%" y="133" width="5.3993%" height="15" fill="rgb(240,193,28)"/><text x="16.1544%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (18,247,493 samples, 4.72%)</title><rect x="16.5798%" y="117" width="4.7240%" height="15" fill="rgb(216,20,37)"/><text x="16.8298%" y="127.50">unsafe..</text></g><g><title>mir_built (16,169,335 samples, 4.19%)</title><rect x="17.1178%" y="101" width="4.1860%" height="15" fill="rgb(206,188,39)"/><text x="17.3678%" y="111.50">mir_b..</text></g><g><title>mir_promoted (23,016,010 samples, 5.96%)</title><rect x="15.3728%" y="149" width="5.9585%" height="15" fill="rgb(217,207,13)"/><text x="15.6228%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (1,000,140 samples, 0.26%)</title><rect x="21.3312%" y="149" width="0.2589%" height="15" fill="rgb(231,73,38)"/><text x="21.5812%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,909,161 samples, 0.49%)</title><rect x="21.5901%" y="149" width="0.4942%" height="15" fill="rgb(225,20,46)"/><text x="21.8401%" y="159.50"></text></g><g><title>normalize_projection_ty (1,076,440 samples, 0.28%)</title><rect x="21.8057%" y="133" width="0.2787%" height="15" fill="rgb(210,31,41)"/><text x="22.0557%" y="143.50"></text></g><g><title>type_op_normalize_ty (477,939 samples, 0.12%)</title><rect x="22.1701%" y="149" width="0.1237%" height="15" fill="rgb(221,200,47)"/><text x="22.4201%" y="159.50"></text></g><g><title>type_op_prove_predicate (7,084,233 samples, 1.83%)</title><rect x="22.2938%" y="149" width="1.8340%" height="15" fill="rgb(226,26,5)"/><text x="22.5438%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (71,411,732 samples, 18.49%)</title><rect x="5.6426%" y="181" width="18.4873%" height="15" fill="rgb(249,33,26)"/><text x="5.8926%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (71,098,028 samples, 18.41%)</title><rect x="5.7238%" y="165" width="18.4061%" height="15" fill="rgb(235,183,28)"/><text x="5.9738%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (586,514 samples, 0.15%)</title><rect x="24.3782%" y="149" width="0.1518%" height="15" fill="rgb(221,5,38)"/><text x="24.6282%" y="159.50"></text></g><g><title>check_mod_attrs (1,083,201 samples, 0.28%)</title><rect x="24.2497%" y="165" width="0.2804%" height="15" fill="rgb(247,18,42)"/><text x="24.4997%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (881,512 samples, 0.23%)</title><rect x="24.6451%" y="165" width="0.2282%" height="15" fill="rgb(241,131,45)"/><text x="24.8951%" y="175.50"></text></g><g><title>misc_checking_1 (2,501,028 samples, 0.65%)</title><rect x="24.2443%" y="181" width="0.6475%" height="15" fill="rgb(249,31,29)"/><text x="24.4943%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,502,247 samples, 0.39%)</title><rect x="24.8922%" y="165" width="0.3889%" height="15" fill="rgb(225,111,53)"/><text x="25.1422%" y="175.50"></text></g><g><title>check_mod_liveness (1,234,454 samples, 0.32%)</title><rect x="24.9615%" y="149" width="0.3196%" height="15" fill="rgb(238,160,17)"/><text x="25.2115%" y="159.50"></text></g><g><title>misc_checking_2 (3,222,626 samples, 0.83%)</title><rect x="24.8917%" y="181" width="0.8343%" height="15" fill="rgb(214,148,48)"/><text x="25.1417%" y="191.50"></text></g><g><title>match_checking (1,718,619 samples, 0.44%)</title><rect x="25.2811%" y="165" width="0.4449%" height="15" fill="rgb(232,36,49)"/><text x="25.5311%" y="175.50"></text></g><g><title>check_match (1,628,149 samples, 0.42%)</title><rect x="25.3045%" y="149" width="0.4215%" height="15" fill="rgb(209,103,24)"/><text x="25.5545%" y="159.50"></text></g><g><title>check_private_in_public (477,976 samples, 0.12%)</title><rect x="25.7282%" y="165" width="0.1237%" height="15" fill="rgb(229,88,8)"/><text x="25.9782%" y="175.50"></text></g><g><title>death_checking (897,500 samples, 0.23%)</title><rect x="25.8520%" y="165" width="0.2323%" height="15" fill="rgb(213,181,19)"/><text x="26.1020%" y="175.50"></text></g><g><title>param_env (422,584 samples, 0.11%)</title><rect x="26.3374%" y="133" width="0.1094%" height="15" fill="rgb(254,191,54)"/><text x="26.5874%" y="143.50"></text></g><g><title>crate_lints (1,824,000 samples, 0.47%)</title><rect x="26.0847%" y="149" width="0.4722%" height="15" fill="rgb(241,83,37)"/><text x="26.3347%" y="159.50"></text></g><g><title>type_of (414,455 samples, 0.11%)</title><rect x="26.4496%" y="133" width="0.1073%" height="15" fill="rgb(233,36,39)"/><text x="26.6996%" y="143.50"></text></g><g><title>lint_checking (3,017,184 samples, 0.78%)</title><rect x="26.0843%" y="165" width="0.7811%" height="15" fill="rgb(226,3,54)"/><text x="26.3343%" y="175.50"></text></g><g><title>module_lints (1,191,554 samples, 0.31%)</title><rect x="26.5569%" y="149" width="0.3085%" height="15" fill="rgb(245,192,40)"/><text x="26.8069%" y="159.50"></text></g><g><title>lint_mod (1,184,674 samples, 0.31%)</title><rect x="26.5587%" y="133" width="0.3067%" height="15" fill="rgb(238,167,29)"/><text x="26.8087%" y="143.50"></text></g><g><title>privacy_access_levels (486,555 samples, 0.13%)</title><rect x="26.8654%" y="165" width="0.1260%" height="15" fill="rgb(232,182,51)"/><text x="27.1154%" y="175.50"></text></g><g><title>privacy_checking_modules (2,388,646 samples, 0.62%)</title><rect x="26.9914%" y="165" width="0.6184%" height="15" fill="rgb(231,60,39)"/><text x="27.2414%" y="175.50"></text></g><g><title>check_mod_privacy (2,383,026 samples, 0.62%)</title><rect x="26.9928%" y="149" width="0.6169%" height="15" fill="rgb(208,69,12)"/><text x="27.2428%" y="159.50"></text></g><g><title>misc_checking_3 (7,298,731 samples, 1.89%)</title><rect x="25.7260%" y="181" width="1.8895%" height="15" fill="rgb(235,93,37)"/><text x="25.9760%" y="191.50">m..</text></g><g><title>mir_for_ctfe (477,366 samples, 0.12%)</title><rect x="27.8237%" y="85" width="0.1236%" height="15" fill="rgb(213,116,39)"/><text x="28.0737%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (441,755 samples, 0.11%)</title><rect x="27.8329%" y="69" width="0.1144%" height="15" fill="rgb(222,207,29)"/><text x="28.0829%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,409,895 samples, 0.36%)</title><rect x="27.7300%" y="133" width="0.3650%" height="15" fill="rgb(206,96,30)"/><text x="27.9800%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,398,895 samples, 0.36%)</title><rect x="27.7328%" y="117" width="0.3622%" height="15" fill="rgb(218,138,4)"/><text x="27.9828%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,395,825 samples, 0.36%)</title><rect x="27.7336%" y="101" width="0.3614%" height="15" fill="rgb(250,191,14)"/><text x="27.9836%" y="111.50"></text></g><g><title>typeck (390,594 samples, 0.10%)</title><rect x="27.9938%" y="85" width="0.1011%" height="15" fill="rgb(239,60,40)"/><text x="28.2438%" y="95.50"></text></g><g><title>impl_parent (926,380 samples, 0.24%)</title><rect x="28.5964%" y="117" width="0.2398%" height="15" fill="rgb(206,27,48)"/><text x="28.8464%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (525,917 samples, 0.14%)</title><rect x="28.7001%" y="101" width="0.1362%" height="15" fill="rgb(225,35,8)"/><text x="28.9501%" y="111.50"></text></g><g><title>impl_trait_ref (2,167,113 samples, 0.56%)</title><rect x="28.8363%" y="117" width="0.5610%" height="15" fill="rgb(250,213,24)"/><text x="29.0863%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,508,404 samples, 0.39%)</title><rect x="29.0068%" y="101" width="0.3905%" height="15" fill="rgb(247,123,22)"/><text x="29.2568%" y="111.50"></text></g><g><title>coherent_trait (7,084,118 samples, 1.83%)</title><rect x="27.6602%" y="149" width="1.8340%" height="15" fill="rgb(231,138,38)"/><text x="27.9102%" y="159.50">c..</text></g><g><title>specialization_graph_of (5,131,666 samples, 1.33%)</title><rect x="28.1656%" y="133" width="1.3285%" height="15" fill="rgb(231,145,46)"/><text x="28.4156%" y="143.50"></text></g><g><title>coherence_checking (7,159,339 samples, 1.85%)</title><rect x="27.6557%" y="165" width="1.8534%" height="15" fill="rgb(251,118,11)"/><text x="27.9057%" y="175.50">c..</text></g><g><title>associated_items (486,045 samples, 0.13%)</title><rect x="46.1492%" y="117" width="0.1258%" height="15" fill="rgb(217,147,25)"/><text x="46.3992%" y="127.50"></text></g><g><title>dropck_outlives (923,732 samples, 0.24%)</title><rect x="46.2951%" y="117" width="0.2391%" height="15" fill="rgb(247,81,37)"/><text x="46.5451%" y="127.50"></text></g><g><title>eval_to_allocation_raw (453,485 samples, 0.12%)</title><rect x="46.5386%" y="101" width="0.1174%" height="15" fill="rgb(209,12,38)"/><text x="46.7886%" y="111.50"></text></g><g><title>mir_borrowck (486,915 samples, 0.13%)</title><rect x="46.8080%" y="37" width="0.1261%" height="15" fill="rgb(227,1,9)"/><text x="47.0580%" y="47.50"></text></g><g><title>mir_for_ctfe (719,618 samples, 0.19%)</title><rect x="46.7483%" y="69" width="0.1863%" height="15" fill="rgb(248,47,43)"/><text x="46.9983%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (659,517 samples, 0.17%)</title><rect x="46.7638%" y="53" width="0.1707%" height="15" fill="rgb(221,10,30)"/><text x="47.0138%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,551,887 samples, 0.40%)</title><rect x="46.5351%" y="117" width="0.4018%" height="15" fill="rgb(210,229,1)"/><text x="46.7851%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,084,962 samples, 0.28%)</title><rect x="46.6560%" y="101" width="0.2809%" height="15" fill="rgb(222,148,37)"/><text x="46.9060%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,072,732 samples, 0.28%)</title><rect x="46.6592%" y="85" width="0.2777%" height="15" fill="rgb(234,67,33)"/><text x="46.9092%" y="95.50"></text></g><g><title>evaluate_obligation (6,084,971 samples, 1.58%)</title><rect x="46.9369%" y="117" width="1.5753%" height="15" fill="rgb(247,98,35)"/><text x="47.1869%" y="127.50"></text></g><g><title>impl_trait_ref (572,916 samples, 0.15%)</title><rect x="48.6409%" y="117" width="0.1483%" height="15" fill="rgb(247,138,52)"/><text x="48.8909%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (506,526 samples, 0.13%)</title><rect x="48.6581%" y="101" width="0.1311%" height="15" fill="rgb(213,79,30)"/><text x="48.9081%" y="111.50"></text></g><g><title>method_autoderef_steps (808,821 samples, 0.21%)</title><rect x="48.8423%" y="117" width="0.2094%" height="15" fill="rgb(246,177,23)"/><text x="49.0923%" y="127.50"></text></g><g><title>evaluate_obligation (439,395 samples, 0.11%)</title><rect x="48.9379%" y="101" width="0.1138%" height="15" fill="rgb(230,62,27)"/><text x="49.1879%" y="111.50"></text></g><g><title>predicates_of (395,554 samples, 0.10%)</title><rect x="49.1236%" y="117" width="0.1024%" height="15" fill="rgb(216,154,8)"/><text x="49.3736%" y="127.50"></text></g><g><title>evaluate_obligation (1,212,018 samples, 0.31%)</title><rect x="54.2783%" y="101" width="0.3138%" height="15" fill="rgb(244,35,45)"/><text x="54.5283%" y="111.50"></text></g><g><title>is_copy_raw (448,033 samples, 0.12%)</title><rect x="54.6563%" y="101" width="0.1160%" height="15" fill="rgb(251,115,12)"/><text x="54.9063%" y="111.50"></text></g><g><title>method_autoderef_steps (388,085 samples, 0.10%)</title><rect x="54.7810%" y="101" width="0.1005%" height="15" fill="rgb(240,54,50)"/><text x="55.0310%" y="111.50"></text></g><g><title>typeck (21,737,650 samples, 5.63%)</title><rect x="49.3160%" y="117" width="5.6275%" height="15" fill="rgb(233,84,52)"/><text x="49.5660%" y="127.50">typeck</text></g><g><title>item_bodies_checking (98,262,930 samples, 25.44%)</title><rect x="29.5220%" y="165" width="25.4386%" height="15" fill="rgb(207,117,47)"/><text x="29.7720%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (98,260,310 samples, 25.44%)</title><rect x="29.5226%" y="149" width="25.4379%" height="15" fill="rgb(249,43,39)"/><text x="29.7726%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (98,059,498 samples, 25.39%)</title><rect x="29.5746%" y="133" width="25.3859%" height="15" fill="rgb(209,38,44)"/><text x="29.8246%" y="143.50">typeck</text></g><g><title>item_types_checking (1,717,909 samples, 0.44%)</title><rect x="54.9606%" y="165" width="0.4447%" height="15" fill="rgb(236,212,23)"/><text x="55.2106%" y="175.50"></text></g><g><title>check_mod_item_types (1,711,989 samples, 0.44%)</title><rect x="54.9621%" y="149" width="0.4432%" height="15" fill="rgb(242,79,21)"/><text x="55.2121%" y="159.50"></text></g><g><title>fn_sig (691,287 samples, 0.18%)</title><rect x="55.5434%" y="133" width="0.1790%" height="15" fill="rgb(211,96,35)"/><text x="55.7934%" y="143.50"></text></g><g><title>generics_of (516,556 samples, 0.13%)</title><rect x="55.7223%" y="133" width="0.1337%" height="15" fill="rgb(253,215,40)"/><text x="55.9723%" y="143.50"></text></g><g><title>late_bound_vars_map (520,676 samples, 0.13%)</title><rect x="56.0536%" y="85" width="0.1348%" height="15" fill="rgb(211,81,21)"/><text x="56.3036%" y="95.50"></text></g><g><title>resolve_lifetimes (500,386 samples, 0.13%)</title><rect x="56.0588%" y="69" width="0.1295%" height="15" fill="rgb(208,190,38)"/><text x="56.3088%" y="79.50"></text></g><g><title>explicit_predicates_of (923,850 samples, 0.24%)</title><rect x="55.9661%" y="101" width="0.2392%" height="15" fill="rgb(235,213,38)"/><text x="56.2161%" y="111.50"></text></g><g><title>predicates_of (1,721,386 samples, 0.45%)</title><rect x="55.8989%" y="133" width="0.4456%" height="15" fill="rgb(237,122,38)"/><text x="56.1489%" y="143.50"></text></g><g><title>predicates_defined_on (1,626,976 samples, 0.42%)</title><rect x="55.9234%" y="117" width="0.4212%" height="15" fill="rgb(244,218,35)"/><text x="56.1734%" y="127.50"></text></g><g><title>inferred_outlives_of (538,096 samples, 0.14%)</title><rect x="56.2053%" y="101" width="0.1393%" height="15" fill="rgb(240,68,47)"/><text x="56.4553%" y="111.50"></text></g><g><title>inferred_outlives_crate (497,505 samples, 0.13%)</title><rect x="56.2158%" y="85" width="0.1288%" height="15" fill="rgb(210,16,53)"/><text x="56.4658%" y="95.50"></text></g><g><title>type_collecting (3,825,892 samples, 0.99%)</title><rect x="55.4067%" y="165" width="0.9905%" height="15" fill="rgb(235,124,12)"/><text x="55.6567%" y="175.50"></text></g><g><title>collect_mod_item_types (3,815,812 samples, 0.99%)</title><rect x="55.4093%" y="149" width="0.9878%" height="15" fill="rgb(224,169,11)"/><text x="55.6593%" y="159.50"></text></g><g><title>mir_for_ctfe (468,934 samples, 0.12%)</title><rect x="58.0096%" y="85" width="0.1214%" height="15" fill="rgb(250,166,2)"/><text x="58.2596%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (429,414 samples, 0.11%)</title><rect x="58.0199%" y="69" width="0.1112%" height="15" fill="rgb(242,216,29)"/><text x="58.2699%" y="79.50"></text></g><g><title>evaluate_obligation (1,209,633 samples, 0.31%)</title><rect x="58.2262%" y="69" width="0.3132%" height="15" fill="rgb(230,116,27)"/><text x="58.4762%" y="79.50"></text></g><g><title>eval_to_const_value_raw (2,320,707 samples, 0.60%)</title><rect x="57.9517%" y="133" width="0.6008%" height="15" fill="rgb(228,99,48)"/><text x="58.2017%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,317,417 samples, 0.60%)</title><rect x="57.9525%" y="117" width="0.5999%" height="15" fill="rgb(253,11,6)"/><text x="58.2025%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,309,077 samples, 0.60%)</title><rect x="57.9547%" y="101" width="0.5978%" height="15" fill="rgb(247,143,39)"/><text x="58.2047%" y="111.50"></text></g><g><title>typeck (1,627,098 samples, 0.42%)</title><rect x="58.1312%" y="85" width="0.4212%" height="15" fill="rgb(236,97,10)"/><text x="58.3812%" y="95.50"></text></g><g><title>evaluate_obligation (629,782 samples, 0.16%)</title><rect x="58.5525%" y="133" width="0.1630%" height="15" fill="rgb(233,208,19)"/><text x="58.8025%" y="143.50"></text></g><g><title>implied_outlives_bounds (610,025 samples, 0.16%)</title><rect x="58.7196%" y="133" width="0.1579%" height="15" fill="rgb(216,164,2)"/><text x="58.9696%" y="143.50"></text></g><g><title>param_env (903,660 samples, 0.23%)</title><rect x="58.9126%" y="133" width="0.2339%" height="15" fill="rgb(220,129,5)"/><text x="59.1626%" y="143.50"></text></g><g><title>region_scope_tree (1,019,157 samples, 0.26%)</title><rect x="59.1520%" y="133" width="0.2638%" height="15" fill="rgb(242,17,10)"/><text x="59.4020%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,222,733 samples, 2.91%)</title><rect x="56.5164%" y="149" width="2.9054%" height="15" fill="rgb(242,107,0)"/><text x="56.7664%" y="159.50">ch..</text></g><g><title>eval_to_const_value_raw (494,976 samples, 0.13%)</title><rect x="60.0628%" y="133" width="0.1281%" height="15" fill="rgb(251,28,31)"/><text x="60.3128%" y="143.50"></text></g><g><title>eval_to_const_value_raw (492,496 samples, 0.13%)</title><rect x="60.0634%" y="117" width="0.1275%" height="15" fill="rgb(233,223,10)"/><text x="60.3134%" y="127.50"></text></g><g><title>eval_to_allocation_raw (488,416 samples, 0.13%)</title><rect x="60.0644%" y="101" width="0.1264%" height="15" fill="rgb(215,21,27)"/><text x="60.3144%" y="111.50"></text></g><g><title>param_env (422,903 samples, 0.11%)</title><rect x="60.3078%" y="133" width="0.1095%" height="15" fill="rgb(232,23,21)"/><text x="60.5578%" y="143.50"></text></g><g><title>check_item_well_formed (4,207,280 samples, 1.09%)</title><rect x="59.4218%" y="149" width="1.0892%" height="15" fill="rgb(244,5,23)"/><text x="59.6718%" y="159.50"></text></g><g><title>analysis (213,100,144 samples, 55.17%)</title><rect x="5.4834%" y="197" width="55.1680%" height="15" fill="rgb(226,81,46)"/><text x="5.7334%" y="207.50">analysis</text></g><g><title>type_check_crate (127,609,455 samples, 33.04%)</title><rect x="27.6155%" y="181" width="33.0359%" height="15" fill="rgb(247,70,30)"/><text x="27.8655%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,417,502 samples, 4.25%)</title><rect x="56.4013%" y="165" width="4.2502%" height="15" fill="rgb(212,68,19)"/><text x="56.6513%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (542,546 samples, 0.14%)</title><rect x="60.5110%" y="149" width="0.1405%" height="15" fill="rgb(240,187,13)"/><text x="60.7610%" y="159.50"></text></g><g><title>fn_abi_of_instance (595,266 samples, 0.15%)</title><rect x="61.1619%" y="165" width="0.1541%" height="15" fill="rgb(223,113,26)"/><text x="61.4119%" y="175.50"></text></g><g><title>codegen_module (2,128,163 samples, 0.55%)</title><rect x="60.8104%" y="181" width="0.5509%" height="15" fill="rgb(206,192,2)"/><text x="61.0604%" y="191.50"></text></g><g><title>optimized_mir (861,871 samples, 0.22%)</title><rect x="61.4250%" y="133" width="0.2231%" height="15" fill="rgb(241,108,4)"/><text x="61.6750%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (1,225,184 samples, 0.32%)</title><rect x="61.3670%" y="149" width="0.3172%" height="15" fill="rgb(247,173,49)"/><text x="61.6170%" y="159.50"></text></g><g><title>monomorphization_collector (1,276,084 samples, 0.33%)</title><rect x="61.3665%" y="165" width="0.3304%" height="15" fill="rgb(224,114,35)"/><text x="61.6165%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,395,435 samples, 0.36%)</title><rect x="61.3615%" y="181" width="0.3613%" height="15" fill="rgb(245,159,27)"/><text x="61.6115%" y="191.50"></text></g><g><title>codegen_crate (4,146,205 samples, 1.07%)</title><rect x="60.6541%" y="197" width="1.0734%" height="15" fill="rgb(245,172,44)"/><text x="60.9041%" y="207.50"></text></g><g><title>codegen_module_optimize (18,821,240 samples, 4.87%)</title><rect x="61.7275%" y="197" width="4.8725%" height="15" fill="rgb(236,23,11)"/><text x="61.9775%" y="207.50">codege..</text></g><g><title>LLVM_module_optimize (14,654,243 samples, 3.79%)</title><rect x="62.8062%" y="181" width="3.7937%" height="15" fill="rgb(205,117,38)"/><text x="63.0562%" y="191.50">LLVM..</text></g><g><title>LLVM_lto_optimize (7,182,891 samples, 1.86%)</title><rect x="66.9336%" y="181" width="1.8595%" height="15" fill="rgb(237,72,25)"/><text x="67.1836%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (15,502,912 samples, 4.01%)</title><rect x="68.7932%" y="181" width="4.0134%" height="15" fill="rgb(244,70,9)"/><text x="69.0432%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (15,233,439 samples, 3.94%)</title><rect x="68.8629%" y="165" width="3.9437%" height="15" fill="rgb(217,125,39)"/><text x="69.1129%" y="175.50">LLVM..</text></g><g><title>codegen_module_perform_lto (24,343,961 samples, 6.30%)</title><rect x="66.6000%" y="197" width="6.3022%" height="15" fill="rgb(235,36,10)"/><text x="66.8500%" y="207.50">codegen_..</text></g><g><title>macro_expand_crate (43,210,929 samples, 11.19%)</title><rect x="73.0676%" y="181" width="11.1866%" height="15" fill="rgb(251,123,47)"/><text x="73.3176%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (43,194,439 samples, 11.18%)</title><rect x="73.0719%" y="165" width="11.1823%" height="15" fill="rgb(221,13,13)"/><text x="73.3219%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,619,178 samples, 0.42%)</title><rect x="83.8350%" y="149" width="0.4192%" height="15" fill="rgb(238,131,9)"/><text x="84.0850%" y="159.50"></text></g><g><title>late_resolve_crate (3,229,565 samples, 0.84%)</title><rect x="84.3517%" y="165" width="0.8361%" height="15" fill="rgb(211,50,8)"/><text x="84.6017%" y="175.50"></text></g><g><title>configure_and_expand (47,715,269 samples, 12.35%)</title><rect x="72.9022%" y="197" width="12.3527%" height="15" fill="rgb(245,182,24)"/><text x="73.1522%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (3,692,601 samples, 0.96%)</title><rect x="84.2989%" y="181" width="0.9560%" height="15" fill="rgb(242,14,37)"/><text x="84.5489%" y="191.50"></text></g><g><title>drop_ast (494,056 samples, 0.13%)</title><rect x="85.2549%" y="197" width="0.1279%" height="15" fill="rgb(246,228,12)"/><text x="85.5049%" y="207.50"></text></g><g><title>early_lint_checks (808,379 samples, 0.21%)</title><rect x="85.3868%" y="197" width="0.2093%" height="15" fill="rgb(213,55,15)"/><text x="85.6368%" y="207.50"></text></g><g><title>free_global_ctxt (4,588,281 samples, 1.19%)</title><rect x="85.5961%" y="197" width="1.1878%" height="15" fill="rgb(209,9,3)"/><text x="85.8461%" y="207.50"></text></g><g><title>is_sized_raw (468,719 samples, 0.12%)</title><rect x="90.6399%" y="149" width="0.1213%" height="15" fill="rgb(230,59,30)"/><text x="90.8899%" y="159.50"></text></g><g><title>evaluate_obligation (387,706 samples, 0.10%)</title><rect x="90.6608%" y="133" width="0.1004%" height="15" fill="rgb(209,121,21)"/><text x="90.9108%" y="143.50"></text></g><g><title>layout_of (593,996 samples, 0.15%)</title><rect x="90.7612%" y="149" width="0.1538%" height="15" fill="rgb(220,109,13)"/><text x="91.0112%" y="159.50"></text></g><g><title>layout_of (2,221,996 samples, 0.58%)</title><rect x="90.3931%" y="165" width="0.5752%" height="15" fill="rgb(232,18,1)"/><text x="90.6431%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,805,943 samples, 2.28%)</title><rect x="90.9683%" y="165" width="2.2797%" height="15" fill="rgb(215,41,42)"/><text x="91.2183%" y="175.50">m..</text></g><g><title>optimized_mir (20,476,261 samples, 5.30%)</title><rect x="87.9872%" y="181" width="5.3010%" height="15" fill="rgb(224,123,36)"/><text x="88.2372%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (25,555,574 samples, 6.62%)</title><rect x="86.7839%" y="197" width="6.6159%" height="15" fill="rgb(240,125,3)"/><text x="87.0339%" y="207.50">generate_..</text></g><g><title>hir_lowering (6,247,489 samples, 1.62%)</title><rect x="93.3998%" y="197" width="1.6174%" height="15" fill="rgb(205,98,50)"/><text x="93.6498%" y="207.50"></text></g><g><title>finish_ongoing_codegen (12,960,424 samples, 3.36%)</title><rect x="95.0209%" y="181" width="3.3552%" height="15" fill="rgb(205,185,37)"/><text x="95.2709%" y="191.50">fin..</text></g><g><title>link_crate (1,490,117 samples, 0.39%)</title><rect x="98.3762%" y="181" width="0.3858%" height="15" fill="rgb(238,207,15)"/><text x="98.6262%" y="191.50"></text></g><g><title>link_binary (1,419,786 samples, 0.37%)</title><rect x="98.3944%" y="165" width="0.3676%" height="15" fill="rgb(213,199,42)"/><text x="98.6444%" y="175.50"></text></g><g><title>link_rlib (985,661 samples, 0.26%)</title><rect x="98.5068%" y="149" width="0.2552%" height="15" fill="rgb(235,201,11)"/><text x="98.7568%" y="159.50"></text></g><g><title>link (14,472,501 samples, 3.75%)</title><rect x="95.0172%" y="197" width="3.7467%" height="15" fill="rgb(207,46,11)"/><text x="95.2672%" y="207.50">link</text></g><g><title>parse_crate (1,761,260 samples, 0.46%)</title><rect x="98.7639%" y="197" width="0.4560%" height="15" fill="rgb(241,35,35)"/><text x="99.0139%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,122,244 samples, 0.55%)</title><rect x="99.2793%" y="197" width="0.5494%" height="15" fill="rgb(243,32,47)"/><text x="99.5293%" y="207.50"></text></g><g><title>all (386,274,727 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (386,274,727 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (580,457 samples, 0.15%)</title><rect x="99.8497%" y="197" width="0.1503%" height="15" fill="rgb(243,110,44)"/><text x="100.0997%" y="207.50"></text></g></svg></svg>