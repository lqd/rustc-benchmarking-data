<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,440,323 samples, 9.30%)</title><rect x="0.6077%" y="197" width="9.3004%" height="15" fill="rgb(227,0,7)"/><text x="0.8577%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (80,091 samples, 0.12%)</title><rect x="9.7924%" y="181" width="0.1157%" height="15" fill="rgb(217,0,24)"/><text x="10.0424%" y="191.50"></text></g><g><title>implied_outlives_bounds (151,661 samples, 0.22%)</title><rect x="15.3827%" y="149" width="0.2190%" height="15" fill="rgb(221,193,54)"/><text x="15.6327%" y="159.50"></text></g><g><title>param_env (116,612 samples, 0.17%)</title><rect x="16.4414%" y="117" width="0.1684%" height="15" fill="rgb(248,212,6)"/><text x="16.6914%" y="127.50"></text></g><g><title>codegen_fn_attrs (108,091 samples, 0.16%)</title><rect x="16.7957%" y="101" width="0.1561%" height="15" fill="rgb(208,68,35)"/><text x="17.0457%" y="111.50"></text></g><g><title>is_copy_raw (107,381 samples, 0.16%)</title><rect x="18.2923%" y="53" width="0.1551%" height="15" fill="rgb(232,128,0)"/><text x="18.5423%" y="63.50"></text></g><g><title>evaluate_obligation (91,771 samples, 0.13%)</title><rect x="18.3148%" y="37" width="0.1325%" height="15" fill="rgb(207,160,47)"/><text x="18.5648%" y="47.50"></text></g><g><title>adt_drop_tys (223,972 samples, 0.32%)</title><rect x="18.2662%" y="69" width="0.3234%" height="15" fill="rgb(228,23,34)"/><text x="18.5162%" y="79.50"></text></g><g><title>is_copy_raw (542,615 samples, 0.78%)</title><rect x="18.5896%" y="69" width="0.7836%" height="15" fill="rgb(218,30,26)"/><text x="18.8396%" y="79.50"></text></g><g><title>evaluate_obligation (482,605 samples, 0.70%)</title><rect x="18.6763%" y="53" width="0.6969%" height="15" fill="rgb(220,122,19)"/><text x="18.9263%" y="63.50"></text></g><g><title>trait_impls_of (130,322 samples, 0.19%)</title><rect x="19.1850%" y="37" width="0.1882%" height="15" fill="rgb(250,228,42)"/><text x="19.4350%" y="47.50"></text></g><g><title>needs_drop_raw (884,470 samples, 1.28%)</title><rect x="18.2007%" y="85" width="1.2773%" height="15" fill="rgb(240,193,28)"/><text x="18.4507%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (72,552 samples, 0.10%)</title><rect x="19.3732%" y="69" width="0.1048%" height="15" fill="rgb(216,20,37)"/><text x="19.6232%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (302,492 samples, 0.44%)</title><rect x="19.6082%" y="69" width="0.4368%" height="15" fill="rgb(206,188,39)"/><text x="19.8582%" y="79.50"></text></g><g><title>impl_parent (365,813 samples, 0.53%)</title><rect x="21.0945%" y="53" width="0.5283%" height="15" fill="rgb(217,207,13)"/><text x="21.3445%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (251,091 samples, 0.36%)</title><rect x="21.2601%" y="37" width="0.3626%" height="15" fill="rgb(231,73,38)"/><text x="21.5101%" y="47.50"></text></g><g><title>specialization_graph_of (2,048,983 samples, 2.96%)</title><rect x="20.0802%" y="69" width="2.9589%" height="15" fill="rgb(225,20,46)"/><text x="20.3302%" y="79.50">spe..</text></g><g><title>impl_trait_ref (980,822 samples, 1.42%)</title><rect x="21.6227%" y="53" width="1.4164%" height="15" fill="rgb(210,31,41)"/><text x="21.8727%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (857,881 samples, 1.24%)</title><rect x="21.8003%" y="37" width="1.2389%" height="15" fill="rgb(221,200,47)"/><text x="22.0503%" y="47.50"></text></g><g><title>resolve_instance (2,512,179 samples, 3.63%)</title><rect x="19.4780%" y="85" width="3.6278%" height="15" fill="rgb(226,26,5)"/><text x="19.7280%" y="95.50">reso..</text></g><g><title>thir_body (266,504 samples, 0.38%)</title><rect x="23.1134%" y="85" width="0.3849%" height="15" fill="rgb(249,33,26)"/><text x="23.3634%" y="95.50"></text></g><g><title>mir_const (5,161,010 samples, 7.45%)</title><rect x="16.0799%" y="133" width="7.4530%" height="15" fill="rgb(235,183,28)"/><text x="16.3299%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (4,794,026 samples, 6.92%)</title><rect x="16.6098%" y="117" width="6.9230%" height="15" fill="rgb(221,5,38)"/><text x="16.8598%" y="127.50">unsafety_..</text></g><g><title>mir_built (4,557,234 samples, 6.58%)</title><rect x="16.9518%" y="101" width="6.5811%" height="15" fill="rgb(247,18,42)"/><text x="17.2018%" y="111.50">mir_built</text></g><g><title>mir_promoted (5,427,083 samples, 7.84%)</title><rect x="15.7089%" y="149" width="7.8372%" height="15" fill="rgb(241,131,45)"/><text x="15.9589%" y="159.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (164,802 samples, 0.24%)</title><rect x="23.5461%" y="149" width="0.2380%" height="15" fill="rgb(249,31,29)"/><text x="23.7961%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (190,381 samples, 0.27%)</title><rect x="23.7841%" y="149" width="0.2749%" height="15" fill="rgb(225,111,53)"/><text x="24.0341%" y="159.50"></text></g><g><title>normalize_projection_ty (103,051 samples, 0.15%)</title><rect x="23.9102%" y="133" width="0.1488%" height="15" fill="rgb(238,160,17)"/><text x="24.1602%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,641,461 samples, 15.37%)</title><rect x="10.0896%" y="181" width="15.3672%" height="15" fill="rgb(214,148,48)"/><text x="10.3396%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,627,211 samples, 15.35%)</title><rect x="10.1102%" y="165" width="15.3467%" height="15" fill="rgb(232,36,49)"/><text x="10.3602%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (900,831 samples, 1.30%)</title><rect x="24.1560%" y="149" width="1.3009%" height="15" fill="rgb(209,103,24)"/><text x="24.4060%" y="159.50"></text></g><g><title>hir_module_items (74,541 samples, 0.11%)</title><rect x="25.4634%" y="181" width="0.1076%" height="15" fill="rgb(229,88,8)"/><text x="25.7134%" y="191.50"></text></g><g><title>codegen_fn_attrs (144,352 samples, 0.21%)</title><rect x="25.6932%" y="149" width="0.2085%" height="15" fill="rgb(213,181,19)"/><text x="25.9432%" y="159.50"></text></g><g><title>check_mod_attrs (212,752 samples, 0.31%)</title><rect x="25.5947%" y="165" width="0.3072%" height="15" fill="rgb(254,191,54)"/><text x="25.8447%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (112,411 samples, 0.16%)</title><rect x="25.9861%" y="165" width="0.1623%" height="15" fill="rgb(241,83,37)"/><text x="26.2361%" y="175.50"></text></g><g><title>misc_checking_1 (429,495 samples, 0.62%)</title><rect x="25.5717%" y="181" width="0.6202%" height="15" fill="rgb(233,36,39)"/><text x="25.8217%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (148,442 samples, 0.21%)</title><rect x="26.1938%" y="165" width="0.2144%" height="15" fill="rgb(226,3,54)"/><text x="26.4438%" y="175.50"></text></g><g><title>check_mod_liveness (120,802 samples, 0.17%)</title><rect x="26.2338%" y="149" width="0.1744%" height="15" fill="rgb(245,192,40)"/><text x="26.4838%" y="159.50"></text></g><g><title>misc_checking_2 (314,384 samples, 0.45%)</title><rect x="26.1919%" y="181" width="0.4540%" height="15" fill="rgb(238,167,29)"/><text x="26.4419%" y="191.50"></text></g><g><title>match_checking (164,612 samples, 0.24%)</title><rect x="26.4082%" y="165" width="0.2377%" height="15" fill="rgb(232,182,51)"/><text x="26.6582%" y="175.50"></text></g><g><title>check_match (159,131 samples, 0.23%)</title><rect x="26.4161%" y="149" width="0.2298%" height="15" fill="rgb(231,60,39)"/><text x="26.6661%" y="159.50"></text></g><g><title>death_checking (120,541 samples, 0.17%)</title><rect x="26.7421%" y="165" width="0.1741%" height="15" fill="rgb(208,69,12)"/><text x="26.9921%" y="175.50"></text></g><g><title>param_env (77,650 samples, 0.11%)</title><rect x="27.5663%" y="133" width="0.1121%" height="15" fill="rgb(235,93,37)"/><text x="27.8163%" y="143.50"></text></g><g><title>crate_lints (2,350,677 samples, 3.39%)</title><rect x="26.9182%" y="149" width="3.3946%" height="15" fill="rgb(213,116,39)"/><text x="27.1682%" y="159.50">cra..</text></g><g><title>type_of (1,823,122 samples, 2.63%)</title><rect x="27.6800%" y="133" width="2.6328%" height="15" fill="rgb(222,207,29)"/><text x="27.9300%" y="143.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,576,670 samples, 2.28%)</title><rect x="28.0359%" y="117" width="2.2769%" height="15" fill="rgb(206,96,30)"/><text x="28.2859%" y="127.50">m..</text></g><g><title>lint_checking (2,463,208 samples, 3.56%)</title><rect x="26.9162%" y="165" width="3.5571%" height="15" fill="rgb(218,138,4)"/><text x="27.1662%" y="175.50">lint..</text></g><g><title>module_lints (111,121 samples, 0.16%)</title><rect x="30.3128%" y="149" width="0.1605%" height="15" fill="rgb(250,191,14)"/><text x="30.5628%" y="159.50"></text></g><g><title>lint_mod (108,571 samples, 0.16%)</title><rect x="30.3165%" y="133" width="0.1568%" height="15" fill="rgb(239,60,40)"/><text x="30.5665%" y="143.50"></text></g><g><title>privacy_access_levels (75,371 samples, 0.11%)</title><rect x="30.4733%" y="165" width="0.1088%" height="15" fill="rgb(206,27,48)"/><text x="30.7233%" y="175.50"></text></g><g><title>privacy_checking_modules (263,963 samples, 0.38%)</title><rect x="30.5821%" y="165" width="0.3812%" height="15" fill="rgb(225,35,8)"/><text x="30.8321%" y="175.50"></text></g><g><title>check_mod_privacy (262,203 samples, 0.38%)</title><rect x="30.5846%" y="149" width="0.3786%" height="15" fill="rgb(250,213,24)"/><text x="30.8346%" y="159.50"></text></g><g><title>misc_checking_3 (3,002,594 samples, 4.34%)</title><rect x="26.6459%" y="181" width="4.3360%" height="15" fill="rgb(247,123,22)"/><text x="26.8959%" y="191.50">misc_..</text></g><g><title>adt_sized_constraint (110,132 samples, 0.16%)</title><rect x="44.4564%" y="117" width="0.1590%" height="15" fill="rgb(231,138,38)"/><text x="44.7064%" y="127.50"></text></g><g><title>associated_item (231,513 samples, 0.33%)</title><rect x="44.7704%" y="101" width="0.3343%" height="15" fill="rgb(231,145,46)"/><text x="45.0204%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (179,452 samples, 0.26%)</title><rect x="44.8456%" y="85" width="0.2591%" height="15" fill="rgb(251,118,11)"/><text x="45.0956%" y="95.50"></text></g><g><title>associated_items (358,335 samples, 0.52%)</title><rect x="44.6220%" y="117" width="0.5175%" height="15" fill="rgb(217,147,25)"/><text x="44.8720%" y="127.50"></text></g><g><title>adt_dtorck_constraint (95,241 samples, 0.14%)</title><rect x="45.3825%" y="101" width="0.1375%" height="15" fill="rgb(247,81,37)"/><text x="45.6325%" y="111.50"></text></g><g><title>dropck_outlives (431,394 samples, 0.62%)</title><rect x="45.1889%" y="117" width="0.6230%" height="15" fill="rgb(209,12,38)"/><text x="45.4389%" y="127.50"></text></g><g><title>normalize_projection_ty (202,092 samples, 0.29%)</title><rect x="45.5201%" y="101" width="0.2918%" height="15" fill="rgb(227,1,9)"/><text x="45.7701%" y="111.50"></text></g><g><title>generics_of (517,275 samples, 0.75%)</title><rect x="47.7747%" y="101" width="0.7470%" height="15" fill="rgb(248,47,43)"/><text x="48.0247%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (449,274 samples, 0.65%)</title><rect x="47.8729%" y="85" width="0.6488%" height="15" fill="rgb(221,10,30)"/><text x="48.1229%" y="95.50"></text></g><g><title>impl_trait_ref (720,593 samples, 1.04%)</title><rect x="48.5728%" y="101" width="1.0406%" height="15" fill="rgb(210,229,1)"/><text x="48.8228%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (651,401 samples, 0.94%)</title><rect x="48.6727%" y="85" width="0.9407%" height="15" fill="rgb(222,148,37)"/><text x="48.9227%" y="95.50"></text></g><g><title>predicates_of (134,871 samples, 0.19%)</title><rect x="49.6328%" y="101" width="0.1948%" height="15" fill="rgb(234,67,33)"/><text x="49.8828%" y="111.50"></text></g><g><title>predicates_defined_on (88,711 samples, 0.13%)</title><rect x="49.6995%" y="85" width="0.1281%" height="15" fill="rgb(247,98,35)"/><text x="49.9495%" y="95.50"></text></g><g><title>specializes (226,332 samples, 0.33%)</title><rect x="49.8276%" y="101" width="0.3268%" height="15" fill="rgb(247,138,52)"/><text x="50.0776%" y="111.50"></text></g><g><title>param_env (178,072 samples, 0.26%)</title><rect x="49.8973%" y="85" width="0.2572%" height="15" fill="rgb(213,79,30)"/><text x="50.1473%" y="95.50"></text></g><g><title>def_span (126,361 samples, 0.18%)</title><rect x="49.9720%" y="69" width="0.1825%" height="15" fill="rgb(246,177,23)"/><text x="50.2220%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (122,311 samples, 0.18%)</title><rect x="49.9778%" y="53" width="0.1766%" height="15" fill="rgb(230,62,27)"/><text x="50.2278%" y="63.50"></text></g><g><title>trait_impls_of (578,636 samples, 0.84%)</title><rect x="50.1682%" y="101" width="0.8356%" height="15" fill="rgb(216,154,8)"/><text x="50.4182%" y="111.50"></text></g><g><title>implementations_of_trait (204,333 samples, 0.30%)</title><rect x="50.7087%" y="85" width="0.2951%" height="15" fill="rgb(244,35,45)"/><text x="50.9587%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (130,941 samples, 0.19%)</title><rect x="50.8147%" y="69" width="0.1891%" height="15" fill="rgb(251,115,12)"/><text x="51.0647%" y="79.50"></text></g><g><title>evaluate_obligation (3,604,499 samples, 5.21%)</title><rect x="45.8119%" y="117" width="5.2052%" height="15" fill="rgb(240,54,50)"/><text x="46.0619%" y="127.50">evalua..</text></g><g><title>fn_sig (72,982 samples, 0.11%)</title><rect x="51.0523%" y="117" width="0.1054%" height="15" fill="rgb(233,84,52)"/><text x="51.3023%" y="127.50"></text></g><g><title>generics_of (728,200 samples, 1.05%)</title><rect x="51.1576%" y="117" width="1.0516%" height="15" fill="rgb(207,117,47)"/><text x="51.4076%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (583,397 samples, 0.84%)</title><rect x="51.3668%" y="101" width="0.8425%" height="15" fill="rgb(249,43,39)"/><text x="51.6168%" y="111.50"></text></g><g><title>impl_item_implementor_ids (83,982 samples, 0.12%)</title><rect x="52.2092%" y="117" width="0.1213%" height="15" fill="rgb(209,38,44)"/><text x="52.4592%" y="127.50"></text></g><g><title>associated_items (74,422 samples, 0.11%)</title><rect x="52.2230%" y="101" width="0.1075%" height="15" fill="rgb(236,212,23)"/><text x="52.4730%" y="111.50"></text></g><g><title>impl_trait_ref (1,241,667 samples, 1.79%)</title><rect x="52.3451%" y="117" width="1.7931%" height="15" fill="rgb(242,79,21)"/><text x="52.5951%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,098,705 samples, 1.59%)</title><rect x="52.5515%" y="101" width="1.5866%" height="15" fill="rgb(211,96,35)"/><text x="52.8015%" y="111.50"></text></g><g><title>evaluate_obligation (210,033 samples, 0.30%)</title><rect x="54.6374%" y="101" width="0.3033%" height="15" fill="rgb(253,215,40)"/><text x="54.8874%" y="111.50"></text></g><g><title>method_autoderef_steps (466,504 samples, 0.67%)</title><rect x="54.2946%" y="117" width="0.6737%" height="15" fill="rgb(211,81,21)"/><text x="54.5446%" y="127.50"></text></g><g><title>explicit_predicates_of (92,271 samples, 0.13%)</title><rect x="55.1885%" y="85" width="0.1332%" height="15" fill="rgb(208,190,38)"/><text x="55.4385%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (75,051 samples, 0.11%)</title><rect x="55.2134%" y="69" width="0.1084%" height="15" fill="rgb(235,213,38)"/><text x="55.4634%" y="79.50"></text></g><g><title>predicates_of (252,042 samples, 0.36%)</title><rect x="55.0002%" y="117" width="0.3640%" height="15" fill="rgb(237,122,38)"/><text x="55.2502%" y="127.50"></text></g><g><title>predicates_defined_on (171,041 samples, 0.25%)</title><rect x="55.1172%" y="101" width="0.2470%" height="15" fill="rgb(244,218,35)"/><text x="55.3672%" y="111.50"></text></g><g><title>specializes (73,801 samples, 0.11%)</title><rect x="55.3642%" y="117" width="0.1066%" height="15" fill="rgb(240,68,47)"/><text x="55.6142%" y="127.50"></text></g><g><title>trait_impls_of (150,941 samples, 0.22%)</title><rect x="55.4965%" y="117" width="0.2180%" height="15" fill="rgb(210,16,53)"/><text x="55.7465%" y="127.50"></text></g><g><title>item_bodies_checking (17,130,284 samples, 24.74%)</title><rect x="31.0676%" y="165" width="24.7377%" height="15" fill="rgb(235,124,12)"/><text x="31.3176%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,127,674 samples, 24.73%)</title><rect x="31.0714%" y="149" width="24.7339%" height="15" fill="rgb(224,169,11)"/><text x="31.3214%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (17,115,654 samples, 24.72%)</title><rect x="31.0887%" y="133" width="24.7166%" height="15" fill="rgb(250,166,2)"/><text x="31.3387%" y="143.50">typeck</text></g><g><title>impl_parent (131,152 samples, 0.19%)</title><rect x="55.9746%" y="85" width="0.1894%" height="15" fill="rgb(242,216,29)"/><text x="56.2246%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (109,802 samples, 0.16%)</title><rect x="56.0054%" y="69" width="0.1586%" height="15" fill="rgb(230,116,27)"/><text x="56.2554%" y="79.50"></text></g><g><title>impl_trait_ref (433,064 samples, 0.63%)</title><rect x="56.1640%" y="85" width="0.6254%" height="15" fill="rgb(228,99,48)"/><text x="56.4140%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (411,514 samples, 0.59%)</title><rect x="56.1951%" y="69" width="0.5943%" height="15" fill="rgb(253,11,6)"/><text x="56.4451%" y="79.50"></text></g><g><title>item_types_checking (714,688 samples, 1.03%)</title><rect x="55.8053%" y="165" width="1.0321%" height="15" fill="rgb(247,143,39)"/><text x="56.0553%" y="175.50"></text></g><g><title>check_mod_item_types (712,968 samples, 1.03%)</title><rect x="55.8078%" y="149" width="1.0296%" height="15" fill="rgb(236,97,10)"/><text x="56.0578%" y="159.50"></text></g><g><title>adt_destructor (701,318 samples, 1.01%)</title><rect x="55.8246%" y="133" width="1.0128%" height="15" fill="rgb(233,208,19)"/><text x="56.0746%" y="143.50"></text></g><g><title>coherent_trait (697,118 samples, 1.01%)</title><rect x="55.8307%" y="117" width="1.0067%" height="15" fill="rgb(216,164,2)"/><text x="56.0807%" y="127.50"></text></g><g><title>specialization_graph_of (693,368 samples, 1.00%)</title><rect x="55.8361%" y="101" width="1.0013%" height="15" fill="rgb(220,129,5)"/><text x="56.0861%" y="111.50"></text></g><g><title>late_bound_vars_map (105,790 samples, 0.15%)</title><rect x="57.3228%" y="85" width="0.1528%" height="15" fill="rgb(242,17,10)"/><text x="57.5728%" y="95.50"></text></g><g><title>resolve_lifetimes (101,350 samples, 0.15%)</title><rect x="57.3292%" y="69" width="0.1464%" height="15" fill="rgb(242,107,0)"/><text x="57.5792%" y="79.50"></text></g><g><title>explicit_predicates_of (429,605 samples, 0.62%)</title><rect x="57.1034%" y="101" width="0.6204%" height="15" fill="rgb(251,28,31)"/><text x="57.3534%" y="111.50"></text></g><g><title>type_param_predicates (162,512 samples, 0.23%)</title><rect x="57.4891%" y="85" width="0.2347%" height="15" fill="rgb(233,223,10)"/><text x="57.7391%" y="95.50"></text></g><g><title>predicates_of (508,715 samples, 0.73%)</title><rect x="57.0775%" y="133" width="0.7346%" height="15" fill="rgb(215,21,27)"/><text x="57.3275%" y="143.50"></text></g><g><title>predicates_defined_on (502,585 samples, 0.73%)</title><rect x="57.0864%" y="117" width="0.7258%" height="15" fill="rgb(232,23,21)"/><text x="57.3364%" y="127.50"></text></g><g><title>type_collecting (717,238 samples, 1.04%)</title><rect x="56.8398%" y="165" width="1.0358%" height="15" fill="rgb(244,5,23)"/><text x="57.0898%" y="175.50"></text></g><g><title>collect_mod_item_types (710,888 samples, 1.03%)</title><rect x="56.8490%" y="149" width="1.0266%" height="15" fill="rgb(226,81,46)"/><text x="57.0990%" y="159.50"></text></g><g><title>evaluate_obligation (120,091 samples, 0.17%)</title><rect x="58.9577%" y="133" width="0.1734%" height="15" fill="rgb(247,70,30)"/><text x="59.2077%" y="143.50"></text></g><g><title>implied_outlives_bounds (214,702 samples, 0.31%)</title><rect x="59.1311%" y="133" width="0.3100%" height="15" fill="rgb(212,68,19)"/><text x="59.3811%" y="143.50"></text></g><g><title>param_env (227,193 samples, 0.33%)</title><rect x="59.4411%" y="133" width="0.3281%" height="15" fill="rgb(240,187,13)"/><text x="59.6911%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,390,216 samples, 2.01%)</title><rect x="57.9269%" y="149" width="2.0076%" height="15" fill="rgb(223,113,26)"/><text x="58.1769%" y="159.50">c..</text></g><g><title>region_scope_tree (90,490 samples, 0.13%)</title><rect x="59.8038%" y="133" width="0.1307%" height="15" fill="rgb(206,192,2)"/><text x="60.0538%" y="143.50"></text></g><g><title>implied_outlives_bounds (81,720 samples, 0.12%)</title><rect x="60.5389%" y="133" width="0.1180%" height="15" fill="rgb(241,108,4)"/><text x="60.7889%" y="143.50"></text></g><g><title>param_env (427,615 samples, 0.62%)</title><rect x="60.6965%" y="133" width="0.6175%" height="15" fill="rgb(247,173,49)"/><text x="60.9465%" y="143.50"></text></g><g><title>trait_impls_of (274,893 samples, 0.40%)</title><rect x="61.3773%" y="133" width="0.3970%" height="15" fill="rgb(224,114,35)"/><text x="61.6273%" y="143.50"></text></g><g><title>implementations_of_trait (85,360 samples, 0.12%)</title><rect x="61.6510%" y="117" width="0.1233%" height="15" fill="rgb(245,159,27)"/><text x="61.9010%" y="127.50"></text></g><g><title>analysis (35,946,658 samples, 51.91%)</title><rect x="9.9081%" y="197" width="51.9102%" height="15" fill="rgb(245,172,44)"/><text x="10.1581%" y="207.50">analysis</text></g><g><title>type_check_crate (21,353,502 samples, 30.84%)</title><rect x="30.9819%" y="181" width="30.8364%" height="15" fill="rgb(236,23,11)"/><text x="31.2319%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,729,251 samples, 3.94%)</title><rect x="57.8770%" y="165" width="3.9413%" height="15" fill="rgb(205,117,38)"/><text x="58.1270%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (1,304,515 samples, 1.88%)</title><rect x="59.9345%" y="149" width="1.8838%" height="15" fill="rgb(237,72,25)"/><text x="60.1845%" y="159.50">c..</text></g><g><title>codegen_module (215,223 samples, 0.31%)</title><rect x="62.4968%" y="181" width="0.3108%" height="15" fill="rgb(244,70,9)"/><text x="62.7468%" y="191.50"></text></g><g><title>native_libraries (114,311 samples, 0.17%)</title><rect x="62.9393%" y="181" width="0.1651%" height="15" fill="rgb(217,125,39)"/><text x="63.1893%" y="191.50"></text></g><g><title>metadata_decode_entry_native_libraries (106,461 samples, 0.15%)</title><rect x="62.9506%" y="165" width="0.1537%" height="15" fill="rgb(235,36,10)"/><text x="63.2006%" y="175.50"></text></g><g><title>codegen_crate (902,800 samples, 1.30%)</title><rect x="61.8281%" y="197" width="1.3037%" height="15" fill="rgb(251,123,47)"/><text x="62.0781%" y="207.50"></text></g><g><title>codegen_module_optimize (579,627 samples, 0.84%)</title><rect x="63.1318%" y="197" width="0.8370%" height="15" fill="rgb(221,13,13)"/><text x="63.3818%" y="207.50"></text></g><g><title>LLVM_module_optimize (309,144 samples, 0.45%)</title><rect x="63.5224%" y="181" width="0.4464%" height="15" fill="rgb(238,131,9)"/><text x="63.7724%" y="191.50"></text></g><g><title>LLVM_lto_optimize (280,414 samples, 0.40%)</title><rect x="64.5256%" y="181" width="0.4049%" height="15" fill="rgb(211,50,8)"/><text x="64.7756%" y="191.50"></text></g><g><title>LLVM_module_codegen (4,839,165 samples, 6.99%)</title><rect x="64.9306%" y="181" width="6.9882%" height="15" fill="rgb(245,182,24)"/><text x="65.1806%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (4,796,364 samples, 6.93%)</title><rect x="64.9924%" y="165" width="6.9264%" height="15" fill="rgb(242,14,37)"/><text x="65.2424%" y="175.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (5,545,213 samples, 8.01%)</title><rect x="63.9688%" y="197" width="8.0078%" height="15" fill="rgb(246,228,12)"/><text x="64.2188%" y="207.50">codegen_mod..</text></g><g><title>macro_expand_crate (5,738,385 samples, 8.29%)</title><rect x="72.3337%" y="181" width="8.2867%" height="15" fill="rgb(213,55,15)"/><text x="72.5837%" y="191.50">macro_expand..</text></g><g><title>expand_crate (5,724,415 samples, 8.27%)</title><rect x="72.3539%" y="165" width="8.2666%" height="15" fill="rgb(209,9,3)"/><text x="72.6039%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,483,948 samples, 2.14%)</title><rect x="78.4775%" y="149" width="2.1430%" height="15" fill="rgb(230,59,30)"/><text x="78.7275%" y="159.50">m..</text></g><g><title>metadata_register_crate (999,340 samples, 1.44%)</title><rect x="79.1773%" y="133" width="1.4431%" height="15" fill="rgb(209,121,21)"/><text x="79.4273%" y="143.50"></text></g><g><title>metadata_register_crate (373,364 samples, 0.54%)</title><rect x="80.0813%" y="117" width="0.5392%" height="15" fill="rgb(220,109,13)"/><text x="80.3313%" y="127.50"></text></g><g><title>finalize_imports (141,121 samples, 0.20%)</title><rect x="80.7295%" y="165" width="0.2038%" height="15" fill="rgb(232,18,1)"/><text x="80.9795%" y="175.50"></text></g><g><title>late_resolve_crate (360,754 samples, 0.52%)</title><rect x="80.9375%" y="165" width="0.5210%" height="15" fill="rgb(215,41,42)"/><text x="81.1875%" y="175.50"></text></g><g><title>configure_and_expand (6,600,955 samples, 9.53%)</title><rect x="71.9766%" y="197" width="9.5324%" height="15" fill="rgb(224,123,36)"/><text x="72.2266%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (543,806 samples, 0.79%)</title><rect x="80.7237%" y="181" width="0.7853%" height="15" fill="rgb(240,125,3)"/><text x="80.9737%" y="191.50"></text></g><g><title>early_lint_checks (95,581 samples, 0.14%)</title><rect x="81.6125%" y="197" width="0.1380%" height="15" fill="rgb(205,98,50)"/><text x="81.8625%" y="207.50"></text></g><g><title>free_global_ctxt (4,522,631 samples, 6.53%)</title><rect x="81.7506%" y="197" width="6.5311%" height="15" fill="rgb(205,185,37)"/><text x="82.0006%" y="207.50">free_glob..</text></g><g><title>layout_of (265,313 samples, 0.38%)</title><rect x="90.4033%" y="165" width="0.3831%" height="15" fill="rgb(238,207,15)"/><text x="90.6533%" y="175.50"></text></g><g><title>is_copy_raw (183,683 samples, 0.27%)</title><rect x="92.2942%" y="133" width="0.2653%" height="15" fill="rgb(213,199,42)"/><text x="92.5442%" y="143.50"></text></g><g><title>evaluate_obligation (146,643 samples, 0.21%)</title><rect x="92.3476%" y="117" width="0.2118%" height="15" fill="rgb(235,201,11)"/><text x="92.5976%" y="127.50"></text></g><g><title>needs_drop_raw (310,385 samples, 0.45%)</title><rect x="92.2581%" y="149" width="0.4482%" height="15" fill="rgb(207,46,11)"/><text x="92.5081%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (101,721 samples, 0.15%)</title><rect x="92.5594%" y="133" width="0.1469%" height="15" fill="rgb(241,35,35)"/><text x="92.8094%" y="143.50"></text></g><g><title>normalize_projection_ty (80,171 samples, 0.12%)</title><rect x="92.5905%" y="117" width="0.1158%" height="15" fill="rgb(243,32,47)"/><text x="92.8405%" y="127.50"></text></g><g><title>optimized_mir (2,526,240 samples, 3.65%)</title><rect x="89.1450%" y="181" width="3.6481%" height="15" fill="rgb(247,202,23)"/><text x="89.3950%" y="191.50">opti..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,389,586 samples, 2.01%)</title><rect x="90.7864%" y="165" width="2.0067%" height="15" fill="rgb(219,102,11)"/><text x="91.0364%" y="175.50">m..</text></g><g><title>generate_crate_metadata (3,182,157 samples, 4.60%)</title><rect x="88.2817%" y="197" width="4.5953%" height="15" fill="rgb(243,110,44)"/><text x="88.5317%" y="207.50">gener..</text></g><g><title>hir_lowering (603,447 samples, 0.87%)</title><rect x="92.8770%" y="197" width="0.8714%" height="15" fill="rgb(222,74,54)"/><text x="93.1270%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,156,783 samples, 1.67%)</title><rect x="93.7730%" y="181" width="1.6705%" height="15" fill="rgb(216,99,12)"/><text x="94.0230%" y="191.50"></text></g><g><title>link_crate (900,951 samples, 1.30%)</title><rect x="95.4435%" y="181" width="1.3011%" height="15" fill="rgb(226,22,26)"/><text x="95.6935%" y="191.50"></text></g><g><title>link_binary (885,941 samples, 1.28%)</title><rect x="95.4652%" y="165" width="1.2794%" height="15" fill="rgb(217,163,10)"/><text x="95.7152%" y="175.50"></text></g><g><title>link_rlib (535,836 samples, 0.77%)</title><rect x="95.9707%" y="149" width="0.7738%" height="15" fill="rgb(213,25,53)"/><text x="96.2207%" y="159.50"></text></g><g><title>link (2,084,264 samples, 3.01%)</title><rect x="93.7484%" y="197" width="3.0099%" height="15" fill="rgb(252,105,26)"/><text x="93.9984%" y="207.50">link</text></g><g><title>parse_crate (811,579 samples, 1.17%)</title><rect x="96.7583%" y="197" width="1.1720%" height="15" fill="rgb(220,39,43)"/><text x="97.0083%" y="207.50"></text></g><g><title>prepare_outputs (177,802 samples, 0.26%)</title><rect x="97.9373%" y="197" width="0.2568%" height="15" fill="rgb(229,68,48)"/><text x="98.1873%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (871,220 samples, 1.26%)</title><rect x="98.1941%" y="197" width="1.2581%" height="15" fill="rgb(252,8,32)"/><text x="98.4441%" y="207.50"></text></g><g><title>setup_global_ctxt (81,481 samples, 0.12%)</title><rect x="99.4544%" y="197" width="0.1177%" height="15" fill="rgb(223,20,43)"/><text x="99.7044%" y="207.50"></text></g><g><title>all (69,247,717 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (69,247,717 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (296,303 samples, 0.43%)</title><rect x="99.5721%" y="197" width="0.4279%" height="15" fill="rgb(249,185,26)"/><text x="99.8221%" y="207.50"></text></g></svg></svg>