<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,503,289 samples, 10.30%)</title><rect x="1.8471%" y="149" width="10.3010%" height="15" fill="rgb(227,0,7)"/><text x="2.0971%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (341,744 samples, 1.00%)</title><rect x="11.1432%" y="133" width="1.0049%" height="15" fill="rgb(217,0,24)"/><text x="11.3932%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (328,034 samples, 0.96%)</title><rect x="11.1836%" y="117" width="0.9645%" height="15" fill="rgb(221,193,54)"/><text x="11.4336%" y="127.50"></text></g><g><title>mir_const (415,195 samples, 1.22%)</title><rect x="15.3188%" y="85" width="1.2208%" height="15" fill="rgb(248,212,6)"/><text x="15.5688%" y="95.50"></text></g><g><title>unsafety_check_result (311,343 samples, 0.92%)</title><rect x="15.6241%" y="69" width="0.9155%" height="15" fill="rgb(208,68,35)"/><text x="15.8741%" y="79.50"></text></g><g><title>mir_built (238,623 samples, 0.70%)</title><rect x="15.8380%" y="53" width="0.7016%" height="15" fill="rgb(232,128,0)"/><text x="16.0880%" y="63.50"></text></g><g><title>mir_promoted (552,757 samples, 1.63%)</title><rect x="14.9419%" y="101" width="1.6253%" height="15" fill="rgb(207,160,47)"/><text x="15.1919%" y="111.50"></text></g><g><title>MIR_borrow_checking (1,423,846 samples, 4.19%)</title><rect x="12.5322%" y="133" width="4.1867%" height="15" fill="rgb(228,23,34)"/><text x="12.7822%" y="143.50">MIR_b..</text></g><g><title>mir_borrowck (1,414,726 samples, 4.16%)</title><rect x="12.5590%" y="117" width="4.1599%" height="15" fill="rgb(218,30,26)"/><text x="12.8090%" y="127.50">mir_b..</text></g><g><title>type_op_prove_predicate (51,561 samples, 0.15%)</title><rect x="16.5673%" y="101" width="0.1516%" height="15" fill="rgb(220,122,19)"/><text x="16.8173%" y="111.50"></text></g><g><title>hir_module_items (107,931 samples, 0.32%)</title><rect x="16.7338%" y="133" width="0.3174%" height="15" fill="rgb(250,228,42)"/><text x="16.9838%" y="143.50"></text></g><g><title>get_lang_items (79,580 samples, 0.23%)</title><rect x="17.5019%" y="85" width="0.2340%" height="15" fill="rgb(240,193,28)"/><text x="17.7519%" y="95.50"></text></g><g><title>associated_item (47,451 samples, 0.14%)</title><rect x="17.7740%" y="69" width="0.1395%" height="15" fill="rgb(216,20,37)"/><text x="18.0240%" y="79.50"></text></g><g><title>should_inherit_track_caller (63,151 samples, 0.19%)</title><rect x="17.7359%" y="85" width="0.1857%" height="15" fill="rgb(206,188,39)"/><text x="17.9859%" y="95.50"></text></g><g><title>codegen_fn_attrs (241,882 samples, 0.71%)</title><rect x="17.3183%" y="101" width="0.7112%" height="15" fill="rgb(217,207,13)"/><text x="17.5683%" y="111.50"></text></g><g><title>supported_target_features (36,740 samples, 0.11%)</title><rect x="17.9215%" y="85" width="0.1080%" height="15" fill="rgb(231,73,38)"/><text x="18.1715%" y="95.50"></text></g><g><title>check_mod_attrs (306,154 samples, 0.90%)</title><rect x="17.1306%" y="117" width="0.9002%" height="15" fill="rgb(225,20,46)"/><text x="17.3806%" y="127.50"></text></g><g><title>lookup_stability (46,060 samples, 0.14%)</title><rect x="18.2883%" y="101" width="0.1354%" height="15" fill="rgb(210,31,41)"/><text x="18.5383%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (98,001 samples, 0.29%)</title><rect x="18.1473%" y="117" width="0.2882%" height="15" fill="rgb(221,200,47)"/><text x="18.3973%" y="127.50"></text></g><g><title>misc_checking_1 (500,215 samples, 1.47%)</title><rect x="17.0534%" y="133" width="1.4708%" height="15" fill="rgb(226,26,5)"/><text x="17.3034%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (56,701 samples, 0.17%)</title><rect x="18.5477%" y="117" width="0.1667%" height="15" fill="rgb(249,33,26)"/><text x="18.7977%" y="127.50"></text></g><g><title>check_mod_liveness (43,971 samples, 0.13%)</title><rect x="18.5852%" y="101" width="0.1293%" height="15" fill="rgb(235,183,28)"/><text x="18.8352%" y="111.50"></text></g><g><title>misc_checking_2 (156,872 samples, 0.46%)</title><rect x="18.5242%" y="133" width="0.4613%" height="15" fill="rgb(221,5,38)"/><text x="18.7742%" y="143.50"></text></g><g><title>match_checking (92,161 samples, 0.27%)</title><rect x="18.7145%" y="117" width="0.2710%" height="15" fill="rgb(247,18,42)"/><text x="18.9645%" y="127.50"></text></g><g><title>check_match (87,551 samples, 0.26%)</title><rect x="18.7280%" y="101" width="0.2574%" height="15" fill="rgb(241,131,45)"/><text x="18.9780%" y="111.50"></text></g><g><title>check_private_in_public (37,960 samples, 0.11%)</title><rect x="19.0220%" y="117" width="0.1116%" height="15" fill="rgb(249,31,29)"/><text x="19.2720%" y="127.50"></text></g><g><title>death_checking (58,151 samples, 0.17%)</title><rect x="19.1336%" y="117" width="0.1710%" height="15" fill="rgb(225,111,53)"/><text x="19.3836%" y="127.50"></text></g><g><title>crate_lints (99,031 samples, 0.29%)</title><rect x="19.3120%" y="101" width="0.2912%" height="15" fill="rgb(238,160,17)"/><text x="19.5620%" y="111.50"></text></g><g><title>param_env (43,711 samples, 0.13%)</title><rect x="19.4747%" y="85" width="0.1285%" height="15" fill="rgb(214,148,48)"/><text x="19.7247%" y="95.50"></text></g><g><title>lint_checking (136,591 samples, 0.40%)</title><rect x="19.3046%" y="117" width="0.4016%" height="15" fill="rgb(232,36,49)"/><text x="19.5546%" y="127.50"></text></g><g><title>module_lints (35,050 samples, 0.10%)</title><rect x="19.6032%" y="101" width="0.1031%" height="15" fill="rgb(209,103,24)"/><text x="19.8532%" y="111.50"></text></g><g><title>privacy_access_levels (69,261 samples, 0.20%)</title><rect x="19.7063%" y="117" width="0.2037%" height="15" fill="rgb(229,88,8)"/><text x="19.9563%" y="127.50"></text></g><g><title>privacy_checking_modules (44,691 samples, 0.13%)</title><rect x="19.9099%" y="117" width="0.1314%" height="15" fill="rgb(213,181,19)"/><text x="20.1599%" y="127.50"></text></g><g><title>check_mod_privacy (42,781 samples, 0.13%)</title><rect x="19.9155%" y="101" width="0.1258%" height="15" fill="rgb(254,191,54)"/><text x="20.1655%" y="111.50"></text></g><g><title>misc_checking_3 (376,454 samples, 1.11%)</title><rect x="18.9855%" y="133" width="1.1069%" height="15" fill="rgb(241,83,37)"/><text x="19.2355%" y="143.50"></text></g><g><title>coherent_trait (103,561 samples, 0.30%)</title><rect x="20.2281%" y="101" width="0.3045%" height="15" fill="rgb(233,36,39)"/><text x="20.4781%" y="111.50"></text></g><g><title>specialization_graph_of (95,731 samples, 0.28%)</title><rect x="20.2512%" y="85" width="0.2815%" height="15" fill="rgb(226,3,54)"/><text x="20.5012%" y="95.50"></text></g><g><title>coherence_checking (161,021 samples, 0.47%)</title><rect x="20.1802%" y="117" width="0.4735%" height="15" fill="rgb(245,192,40)"/><text x="20.4302%" y="127.50"></text></g><g><title>method_autoderef_steps (120,232 samples, 0.35%)</title><rect x="22.4987%" y="69" width="0.3535%" height="15" fill="rgb(238,167,29)"/><text x="22.7487%" y="79.50"></text></g><g><title>evaluate_obligation (106,971 samples, 0.31%)</title><rect x="22.5377%" y="53" width="0.3145%" height="15" fill="rgb(232,182,51)"/><text x="22.7877%" y="63.50"></text></g><g><title>trait_impls_of (66,680 samples, 0.20%)</title><rect x="22.6562%" y="37" width="0.1961%" height="15" fill="rgb(231,60,39)"/><text x="22.9062%" y="47.50"></text></g><g><title>trait_impls_of (36,460 samples, 0.11%)</title><rect x="22.9052%" y="69" width="0.1072%" height="15" fill="rgb(208,69,12)"/><text x="23.1552%" y="79.50"></text></g><g><title>item_bodies_checking (784,288 samples, 2.31%)</title><rect x="20.7120%" y="117" width="2.3061%" height="15" fill="rgb(235,93,37)"/><text x="20.9620%" y="127.50">i..</text></g><g><title>typeck_item_bodies (780,978 samples, 2.30%)</title><rect x="20.7217%" y="101" width="2.2964%" height="15" fill="rgb(213,116,39)"/><text x="20.9717%" y="111.50">t..</text></g><g><title>typeck (773,148 samples, 2.27%)</title><rect x="20.7448%" y="85" width="2.2734%" height="15" fill="rgb(222,207,29)"/><text x="20.9948%" y="95.50">t..</text></g><g><title>item_types_checking (181,173 samples, 0.53%)</title><rect x="23.0181%" y="117" width="0.5327%" height="15" fill="rgb(206,96,30)"/><text x="23.2681%" y="127.50"></text></g><g><title>check_mod_item_types (176,822 samples, 0.52%)</title><rect x="23.0309%" y="101" width="0.5199%" height="15" fill="rgb(218,138,4)"/><text x="23.2809%" y="111.50"></text></g><g><title>fn_sig (39,871 samples, 0.12%)</title><rect x="23.8382%" y="85" width="0.1172%" height="15" fill="rgb(250,191,14)"/><text x="24.0882%" y="95.50"></text></g><g><title>is_late_bound_map (135,911 samples, 0.40%)</title><rect x="24.1007%" y="69" width="0.3996%" height="15" fill="rgb(239,60,40)"/><text x="24.3507%" y="79.50"></text></g><g><title>resolve_lifetimes (119,061 samples, 0.35%)</title><rect x="24.1503%" y="53" width="0.3501%" height="15" fill="rgb(206,27,48)"/><text x="24.4003%" y="63.50"></text></g><g><title>generics_of (210,451 samples, 0.62%)</title><rect x="23.9555%" y="85" width="0.6188%" height="15" fill="rgb(225,35,8)"/><text x="24.2055%" y="95.50"></text></g><g><title>explicit_predicates_of (118,381 samples, 0.35%)</title><rect x="24.7127%" y="53" width="0.3481%" height="15" fill="rgb(250,213,24)"/><text x="24.9627%" y="63.50"></text></g><g><title>trait_explicit_predicates_and_bounds (34,831 samples, 0.10%)</title><rect x="24.9584%" y="37" width="0.1024%" height="15" fill="rgb(247,123,22)"/><text x="25.2084%" y="47.50"></text></g><g><title>predicates_of (150,571 samples, 0.44%)</title><rect x="24.6245%" y="85" width="0.4427%" height="15" fill="rgb(231,138,38)"/><text x="24.8745%" y="95.50"></text></g><g><title>predicates_defined_on (134,711 samples, 0.40%)</title><rect x="24.6711%" y="69" width="0.3961%" height="15" fill="rgb(231,145,46)"/><text x="24.9211%" y="79.50"></text></g><g><title>super_predicates_of (53,191 samples, 0.16%)</title><rect x="25.0672%" y="85" width="0.1564%" height="15" fill="rgb(251,118,11)"/><text x="25.3172%" y="95.50"></text></g><g><title>super_predicates_that_define_assoc_type (39,370 samples, 0.12%)</title><rect x="25.1079%" y="69" width="0.1158%" height="15" fill="rgb(217,147,25)"/><text x="25.3579%" y="79.50"></text></g><g><title>type_collecting (608,906 samples, 1.79%)</title><rect x="23.5537%" y="117" width="1.7904%" height="15" fill="rgb(247,81,37)"/><text x="23.8037%" y="127.50">t..</text></g><g><title>collect_mod_item_types (598,246 samples, 1.76%)</title><rect x="23.5850%" y="101" width="1.7591%" height="15" fill="rgb(209,12,38)"/><text x="23.8350%" y="111.50"></text></g><g><title>type_of (38,810 samples, 0.11%)</title><rect x="25.2300%" y="85" width="0.1141%" height="15" fill="rgb(227,1,9)"/><text x="25.4800%" y="95.50"></text></g><g><title>evaluate_obligation (94,901 samples, 0.28%)</title><rect x="26.1187%" y="85" width="0.2790%" height="15" fill="rgb(248,47,43)"/><text x="26.3687%" y="95.50"></text></g><g><title>implied_outlives_bounds (37,570 samples, 0.11%)</title><rect x="26.3978%" y="85" width="0.1105%" height="15" fill="rgb(221,10,30)"/><text x="26.6478%" y="95.50"></text></g><g><title>param_env (34,560 samples, 0.10%)</title><rect x="26.5082%" y="85" width="0.1016%" height="15" fill="rgb(210,229,1)"/><text x="26.7582%" y="95.50"></text></g><g><title>check_impl_item_well_formed (421,244 samples, 1.24%)</title><rect x="25.4323%" y="101" width="1.2386%" height="15" fill="rgb(222,148,37)"/><text x="25.6823%" y="111.50"></text></g><g><title>param_env (233,742 samples, 0.69%)</title><rect x="28.2564%" y="85" width="0.6873%" height="15" fill="rgb(234,67,33)"/><text x="28.5064%" y="95.50"></text></g><g><title>check_item_well_formed (797,689 samples, 2.35%)</title><rect x="26.6709%" y="101" width="2.3455%" height="15" fill="rgb(247,98,35)"/><text x="26.9209%" y="111.50">c..</text></g><g><title>evaluate_obligation (259,183 samples, 0.76%)</title><rect x="29.6182%" y="85" width="0.7621%" height="15" fill="rgb(247,138,52)"/><text x="29.8682%" y="95.50"></text></g><g><title>trait_impls_of (39,220 samples, 0.12%)</title><rect x="30.2650%" y="69" width="0.1153%" height="15" fill="rgb(213,79,30)"/><text x="30.5150%" y="79.50"></text></g><g><title>implied_outlives_bounds (61,621 samples, 0.18%)</title><rect x="30.3803%" y="85" width="0.1812%" height="15" fill="rgb(246,177,23)"/><text x="30.6303%" y="95.50"></text></g><g><title>analysis (6,275,870 samples, 18.45%)</title><rect x="12.1481%" y="149" width="18.4535%" height="15" fill="rgb(230,62,27)"/><text x="12.3981%" y="159.50">analysis</text></g><g><title>type_check_crate (3,574,100 samples, 10.51%)</title><rect x="20.0924%" y="133" width="10.5093%" height="15" fill="rgb(216,154,8)"/><text x="20.3424%" y="143.50">type_check_crate</text></g><g><title>wf_checking (1,787,100 samples, 5.25%)</title><rect x="25.3469%" y="117" width="5.2548%" height="15" fill="rgb(244,35,45)"/><text x="25.5969%" y="127.50">wf_che..</text></g><g><title>check_trait_item_well_formed (539,116 samples, 1.59%)</title><rect x="29.0164%" y="101" width="1.5852%" height="15" fill="rgb(251,115,12)"/><text x="29.2664%" y="111.50"></text></g><g><title>codegen_module (346,304 samples, 1.02%)</title><rect x="32.5541%" y="133" width="1.0183%" height="15" fill="rgb(240,54,50)"/><text x="32.8041%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (102,361 samples, 0.30%)</title><rect x="33.5745%" y="133" width="0.3010%" height="15" fill="rgb(233,84,52)"/><text x="33.8245%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (45,330 samples, 0.13%)</title><rect x="33.7422%" y="117" width="0.1333%" height="15" fill="rgb(207,117,47)"/><text x="33.9922%" y="127.50"></text></g><g><title>native_libraries (53,531 samples, 0.16%)</title><rect x="34.0618%" y="133" width="0.1574%" height="15" fill="rgb(249,43,39)"/><text x="34.3118%" y="143.50"></text></g><g><title>metadata_decode_entry_native_libraries (42,010 samples, 0.12%)</title><rect x="34.0957%" y="117" width="0.1235%" height="15" fill="rgb(209,38,44)"/><text x="34.3457%" y="127.50"></text></g><g><title>codegen_crate (1,249,404 samples, 3.67%)</title><rect x="30.6315%" y="149" width="3.6737%" height="15" fill="rgb(236,212,23)"/><text x="30.8815%" y="159.50">code..</text></g><g><title>codegen_module_optimize (524,586 samples, 1.54%)</title><rect x="34.3052%" y="149" width="1.5425%" height="15" fill="rgb(242,79,21)"/><text x="34.5552%" y="159.50"></text></g><g><title>LLVM_module_optimize (269,283 samples, 0.79%)</title><rect x="35.0559%" y="133" width="0.7918%" height="15" fill="rgb(211,96,35)"/><text x="35.3059%" y="143.50"></text></g><g><title>LLVM_lto_optimize (116,752 samples, 0.34%)</title><rect x="36.5057%" y="133" width="0.3433%" height="15" fill="rgb(253,215,40)"/><text x="36.7557%" y="143.50"></text></g><g><title>LLVM_module_codegen (1,230,804 samples, 3.62%)</title><rect x="36.8490%" y="133" width="3.6190%" height="15" fill="rgb(211,81,21)"/><text x="37.0990%" y="143.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (1,213,133 samples, 3.57%)</title><rect x="36.9010%" y="117" width="3.5671%" height="15" fill="rgb(208,190,38)"/><text x="37.1510%" y="127.50">LLVM..</text></g><g><title>codegen_module_perform_lto (1,595,278 samples, 4.69%)</title><rect x="35.8477%" y="149" width="4.6907%" height="15" fill="rgb(235,213,38)"/><text x="36.0977%" y="159.50">codeg..</text></g><g><title>AST_validation (53,871 samples, 0.16%)</title><rect x="41.2460%" y="133" width="0.1584%" height="15" fill="rgb(237,122,38)"/><text x="41.4960%" y="143.50"></text></g><g><title>crate_injection (94,981 samples, 0.28%)</title><rect x="41.4418%" y="133" width="0.2793%" height="15" fill="rgb(244,218,35)"/><text x="41.6918%" y="143.50"></text></g><g><title>metadata_load_macro (62,081 samples, 0.18%)</title><rect x="66.9785%" y="101" width="0.1825%" height="15" fill="rgb(240,68,47)"/><text x="67.2285%" y="111.50"></text></g><g><title>macro_expand_crate (11,336,126 samples, 33.33%)</title><rect x="41.7211%" y="133" width="33.3327%" height="15" fill="rgb(210,16,53)"/><text x="41.9711%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (11,313,316 samples, 33.27%)</title><rect x="41.7882%" y="117" width="33.2656%" height="15" fill="rgb(235,124,12)"/><text x="42.0382%" y="127.50">expand_crate</text></g><g><title>metadata_register_crate (2,684,250 samples, 7.89%)</title><rect x="67.1610%" y="101" width="7.8928%" height="15" fill="rgb(224,169,11)"/><text x="67.4110%" y="111.50">metadata_re..</text></g><g><title>metadata_register_crate (983,861 samples, 2.89%)</title><rect x="72.1609%" y="85" width="2.8929%" height="15" fill="rgb(250,166,2)"/><text x="72.4109%" y="95.50">me..</text></g><g><title>metadata_register_crate (74,651 samples, 0.22%)</title><rect x="74.8343%" y="69" width="0.2195%" height="15" fill="rgb(242,216,29)"/><text x="75.0843%" y="79.50"></text></g><g><title>pre_AST_expansion_lint_checks (58,771 samples, 0.17%)</title><rect x="75.0671%" y="133" width="0.1728%" height="15" fill="rgb(230,116,27)"/><text x="75.3171%" y="143.50"></text></g><g><title>finalize_macro_resolutions (335,774 samples, 0.99%)</title><rect x="75.2984%" y="117" width="0.9873%" height="15" fill="rgb(228,99,48)"/><text x="75.5484%" y="127.50"></text></g><g><title>late_resolve_crate (408,375 samples, 1.20%)</title><rect x="76.2857%" y="117" width="1.2008%" height="15" fill="rgb(253,11,6)"/><text x="76.5357%" y="127.50"></text></g><g><title>configure_and_expand (12,600,200 samples, 37.05%)</title><rect x="40.5384%" y="149" width="37.0496%" height="15" fill="rgb(247,143,39)"/><text x="40.7884%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (798,569 samples, 2.35%)</title><rect x="75.2399%" y="133" width="2.3481%" height="15" fill="rgb(236,97,10)"/><text x="75.4899%" y="143.50">r..</text></g><g><title>early_lint_checks (66,281 samples, 0.19%)</title><rect x="77.7176%" y="149" width="0.1949%" height="15" fill="rgb(233,208,19)"/><text x="77.9676%" y="159.50"></text></g><g><title>free_global_ctxt (1,368,026 samples, 4.02%)</title><rect x="77.9125%" y="149" width="4.0225%" height="15" fill="rgb(216,164,2)"/><text x="78.1625%" y="159.50">free..</text></g><g><title>crate_hash (161,302 samples, 0.47%)</title><rect x="83.1863%" y="133" width="0.4743%" height="15" fill="rgb(220,129,5)"/><text x="83.4363%" y="143.50"></text></g><g><title>exported_symbols (62,211 samples, 0.18%)</title><rect x="83.8098%" y="133" width="0.1829%" height="15" fill="rgb(242,17,10)"/><text x="84.0598%" y="143.50"></text></g><g><title>reachable_non_generics (41,051 samples, 0.12%)</title><rect x="83.8720%" y="117" width="0.1207%" height="15" fill="rgb(242,107,0)"/><text x="84.1220%" y="127.50"></text></g><g><title>layout_of (45,180 samples, 0.13%)</title><rect x="84.9738%" y="117" width="0.1328%" height="15" fill="rgb(251,28,31)"/><text x="85.2238%" y="127.50"></text></g><g><title>optimized_mir (566,227 samples, 1.66%)</title><rect x="84.1633%" y="133" width="1.6649%" height="15" fill="rgb(233,223,10)"/><text x="84.4133%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (245,412 samples, 0.72%)</title><rect x="85.1066%" y="117" width="0.7216%" height="15" fill="rgb(215,21,27)"/><text x="85.3566%" y="127.50"></text></g><g><title>variances_of (38,910 samples, 0.11%)</title><rect x="85.8758%" y="133" width="0.1144%" height="15" fill="rgb(232,23,21)"/><text x="86.1258%" y="143.50"></text></g><g><title>generate_crate_metadata (1,379,565 samples, 4.06%)</title><rect x="81.9350%" y="149" width="4.0565%" height="15" fill="rgb(244,5,23)"/><text x="82.1850%" y="159.50">gene..</text></g><g><title>hir_lowering (346,894 samples, 1.02%)</title><rect x="85.9915%" y="149" width="1.0200%" height="15" fill="rgb(226,81,46)"/><text x="86.2415%" y="159.50"></text></g><g><title>finish_ongoing_codegen (1,859,341 samples, 5.47%)</title><rect x="87.0442%" y="133" width="5.4672%" height="15" fill="rgb(247,70,30)"/><text x="87.2942%" y="143.50">finish_..</text></g><g><title>link_crate (547,226 samples, 1.61%)</title><rect x="92.5114%" y="133" width="1.6091%" height="15" fill="rgb(212,68,19)"/><text x="92.7614%" y="143.50"></text></g><g><title>link_binary (534,956 samples, 1.57%)</title><rect x="92.5475%" y="117" width="1.5730%" height="15" fill="rgb(240,187,13)"/><text x="92.7975%" y="127.50"></text></g><g><title>link_rlib (326,673 samples, 0.96%)</title><rect x="93.1599%" y="101" width="0.9605%" height="15" fill="rgb(223,113,26)"/><text x="93.4099%" y="111.50"></text></g><g><title>link (2,424,747 samples, 7.13%)</title><rect x="87.0115%" y="149" width="7.1297%" height="15" fill="rgb(206,192,2)"/><text x="87.2615%" y="159.50">link</text></g><g><title>parse_crate (511,596 samples, 1.50%)</title><rect x="94.1412%" y="149" width="1.5043%" height="15" fill="rgb(241,108,4)"/><text x="94.3912%" y="159.50"></text></g><g><title>prepare_outputs (361,214 samples, 1.06%)</title><rect x="95.6768%" y="149" width="1.0621%" height="15" fill="rgb(247,173,49)"/><text x="95.9268%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (439,115 samples, 1.29%)</title><rect x="96.7389%" y="149" width="1.2912%" height="15" fill="rgb(224,114,35)"/><text x="96.9889%" y="159.50"></text></g><g><title>setup_global_ctxt (139,792 samples, 0.41%)</title><rect x="98.0522%" y="149" width="0.4110%" height="15" fill="rgb(245,159,27)"/><text x="98.3022%" y="159.50"></text></g><g><title>all (34,009,049 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (34,009,049 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (522,646 samples, 1.54%)</title><rect x="98.4632%" y="149" width="1.5368%" height="15" fill="rgb(205,117,38)"/><text x="98.7132%" y="159.50"></text></g></svg></svg>