<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (18,042,962 samples, 4.73%)</title><rect x="0.1988%" y="181" width="4.7291%" height="15" fill="rgb(227,0,7)"/><text x="0.4488%" y="191.50">LLVM_p..</text></g><g><title>implied_outlives_bounds (1,020,882 samples, 0.27%)</title><rect x="13.4462%" y="133" width="0.2676%" height="15" fill="rgb(217,0,24)"/><text x="13.6962%" y="143.50"></text></g><g><title>param_env (677,304 samples, 0.18%)</title><rect x="15.0620%" y="101" width="0.1775%" height="15" fill="rgb(221,193,54)"/><text x="15.3120%" y="111.50"></text></g><g><title>item_attrs (583,410 samples, 0.15%)</title><rect x="15.6269%" y="69" width="0.1529%" height="15" fill="rgb(248,212,6)"/><text x="15.8769%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (566,050 samples, 0.15%)</title><rect x="15.6314%" y="53" width="0.1484%" height="15" fill="rgb(208,68,35)"/><text x="15.8814%" y="63.50"></text></g><g><title>codegen_fn_attrs (814,113 samples, 0.21%)</title><rect x="15.5747%" y="85" width="0.2134%" height="15" fill="rgb(232,128,0)"/><text x="15.8247%" y="95.50"></text></g><g><title>is_copy_raw (573,516 samples, 0.15%)</title><rect x="17.9458%" y="69" width="0.1503%" height="15" fill="rgb(207,160,47)"/><text x="18.1958%" y="79.50"></text></g><g><title>evaluate_obligation (433,714 samples, 0.11%)</title><rect x="17.9824%" y="53" width="0.1137%" height="15" fill="rgb(228,23,34)"/><text x="18.2324%" y="63.50"></text></g><g><title>is_copy_raw (2,041,377 samples, 0.54%)</title><rect x="18.2292%" y="53" width="0.5351%" height="15" fill="rgb(218,30,26)"/><text x="18.4792%" y="63.50"></text></g><g><title>evaluate_obligation (1,595,901 samples, 0.42%)</title><rect x="18.3460%" y="37" width="0.4183%" height="15" fill="rgb(220,122,19)"/><text x="18.5960%" y="47.50"></text></g><g><title>needs_drop_raw (2,560,742 samples, 0.67%)</title><rect x="18.0970%" y="69" width="0.6712%" height="15" fill="rgb(250,228,42)"/><text x="18.3470%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,479,833 samples, 0.39%)</title><rect x="18.9355%" y="53" width="0.3879%" height="15" fill="rgb(240,193,28)"/><text x="19.1855%" y="63.50"></text></g><g><title>resolve_instance (2,801,927 samples, 0.73%)</title><rect x="18.7687%" y="69" width="0.7344%" height="15" fill="rgb(216,20,37)"/><text x="19.0187%" y="79.50"></text></g><g><title>thir_body (2,897,296 samples, 0.76%)</title><rect x="19.5239%" y="69" width="0.7594%" height="15" fill="rgb(206,188,39)"/><text x="19.7739%" y="79.50"></text></g><g><title>mir_const (22,543,313 samples, 5.91%)</title><rect x="14.4494%" y="117" width="5.9087%" height="15" fill="rgb(217,207,13)"/><text x="14.6994%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (19,528,607 samples, 5.12%)</title><rect x="15.2395%" y="101" width="5.1185%" height="15" fill="rgb(231,73,38)"/><text x="15.4895%" y="111.50">unsafe..</text></g><g><title>mir_built (17,435,790 samples, 4.57%)</title><rect x="15.7881%" y="85" width="4.5700%" height="15" fill="rgb(225,20,46)"/><text x="16.0381%" y="95.50">mir_b..</text></g><g><title>mir_const_qualif (485,695 samples, 0.13%)</title><rect x="20.3580%" y="117" width="0.1273%" height="15" fill="rgb(210,31,41)"/><text x="20.6080%" y="127.50"></text></g><g><title>mir_promoted (25,284,472 samples, 6.63%)</title><rect x="13.8586%" y="133" width="6.6271%" height="15" fill="rgb(221,200,47)"/><text x="14.1086%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (1,247,964 samples, 0.33%)</title><rect x="20.4863%" y="133" width="0.3271%" height="15" fill="rgb(226,26,5)"/><text x="20.7363%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,395,688 samples, 0.37%)</title><rect x="20.8134%" y="133" width="0.3658%" height="15" fill="rgb(249,33,26)"/><text x="21.0634%" y="143.50"></text></g><g><title>normalize_projection_ty (812,637 samples, 0.21%)</title><rect x="20.9662%" y="117" width="0.2130%" height="15" fill="rgb(235,183,28)"/><text x="21.2162%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,131,084 samples, 1.61%)</title><rect x="21.3075%" y="133" width="1.6070%" height="15" fill="rgb(221,5,38)"/><text x="21.5575%" y="143.50"></text></g><g><title>MIR_borrow_checking (67,972,648 samples, 17.82%)</title><rect x="5.1009%" y="165" width="17.8159%" height="15" fill="rgb(247,18,42)"/><text x="5.3509%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (67,585,452 samples, 17.71%)</title><rect x="5.2023%" y="149" width="17.7144%" height="15" fill="rgb(241,131,45)"/><text x="5.4523%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (403,234 samples, 0.11%)</title><rect x="22.9167%" y="165" width="0.1057%" height="15" fill="rgb(249,31,29)"/><text x="23.1667%" y="175.50"></text></g><g><title>hir_module_items (483,286 samples, 0.13%)</title><rect x="23.0224%" y="165" width="0.1267%" height="15" fill="rgb(225,111,53)"/><text x="23.2724%" y="175.50"></text></g><g><title>should_inherit_track_caller (493,076 samples, 0.13%)</title><rect x="23.3761%" y="117" width="0.1292%" height="15" fill="rgb(238,160,17)"/><text x="23.6261%" y="127.50"></text></g><g><title>codegen_fn_attrs (782,760 samples, 0.21%)</title><rect x="23.3045%" y="133" width="0.2052%" height="15" fill="rgb(214,148,48)"/><text x="23.5545%" y="143.50"></text></g><g><title>check_mod_attrs (1,340,944 samples, 0.35%)</title><rect x="23.1582%" y="149" width="0.3515%" height="15" fill="rgb(232,36,49)"/><text x="23.4082%" y="159.50"></text></g><g><title>is_copy_raw (396,904 samples, 0.10%)</title><rect x="23.7661%" y="133" width="0.1040%" height="15" fill="rgb(209,103,24)"/><text x="24.0161%" y="143.50"></text></g><g><title>lookup_deprecation_entry (393,634 samples, 0.10%)</title><rect x="23.9501%" y="133" width="0.1032%" height="15" fill="rgb(229,88,8)"/><text x="24.2001%" y="143.50"></text></g><g><title>param_env (637,668 samples, 0.17%)</title><rect x="24.0917%" y="133" width="0.1671%" height="15" fill="rgb(213,181,19)"/><text x="24.3417%" y="143.50"></text></g><g><title>predicates_of (507,886 samples, 0.13%)</title><rect x="24.1257%" y="117" width="0.1331%" height="15" fill="rgb(254,191,54)"/><text x="24.3757%" y="127.50"></text></g><g><title>predicates_defined_on (505,926 samples, 0.13%)</title><rect x="24.1262%" y="101" width="0.1326%" height="15" fill="rgb(241,83,37)"/><text x="24.3762%" y="111.50"></text></g><g><title>inferred_outlives_of (490,865 samples, 0.13%)</title><rect x="24.1302%" y="85" width="0.1287%" height="15" fill="rgb(233,36,39)"/><text x="24.3802%" y="95.50"></text></g><g><title>inferred_outlives_crate (483,605 samples, 0.13%)</title><rect x="24.1321%" y="69" width="0.1268%" height="15" fill="rgb(226,3,54)"/><text x="24.3821%" y="79.50"></text></g><g><title>check_mod_unstable_api_usage (2,415,476 samples, 0.63%)</title><rect x="23.6510%" y="149" width="0.6331%" height="15" fill="rgb(245,192,40)"/><text x="23.9010%" y="159.50"></text></g><g><title>misc_checking_1 (4,437,720 samples, 1.16%)</title><rect x="23.1492%" y="165" width="1.1631%" height="15" fill="rgb(238,167,29)"/><text x="23.3992%" y="175.50"></text></g><g><title>check_mod_intrinsics (437,594 samples, 0.11%)</title><rect x="24.3163%" y="133" width="0.1147%" height="15" fill="rgb(232,182,51)"/><text x="24.5663%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (1,577,058 samples, 0.41%)</title><rect x="24.3129%" y="149" width="0.4134%" height="15" fill="rgb(231,60,39)"/><text x="24.5629%" y="159.50"></text></g><g><title>check_mod_liveness (1,126,674 samples, 0.30%)</title><rect x="24.4310%" y="133" width="0.2953%" height="15" fill="rgb(208,69,12)"/><text x="24.6810%" y="143.50"></text></g><g><title>misc_checking_2 (3,248,787 samples, 0.85%)</title><rect x="24.3124%" y="165" width="0.8515%" height="15" fill="rgb(235,93,37)"/><text x="24.5624%" y="175.50"></text></g><g><title>match_checking (1,669,639 samples, 0.44%)</title><rect x="24.7263%" y="149" width="0.4376%" height="15" fill="rgb(213,116,39)"/><text x="24.9763%" y="159.50"></text></g><g><title>check_match (1,568,978 samples, 0.41%)</title><rect x="24.7527%" y="133" width="0.4112%" height="15" fill="rgb(222,207,29)"/><text x="25.0027%" y="143.50"></text></g><g><title>check_private_in_public (611,327 samples, 0.16%)</title><rect x="25.1668%" y="149" width="0.1602%" height="15" fill="rgb(206,96,30)"/><text x="25.4168%" y="159.50"></text></g><g><title>death_checking (1,109,912 samples, 0.29%)</title><rect x="25.3270%" y="149" width="0.2909%" height="15" fill="rgb(218,138,4)"/><text x="25.5770%" y="159.50"></text></g><g><title>param_env (646,068 samples, 0.17%)</title><rect x="26.0346%" y="117" width="0.1693%" height="15" fill="rgb(250,191,14)"/><text x="26.2846%" y="127.50"></text></g><g><title>crate_lints (3,386,078 samples, 0.89%)</title><rect x="25.6184%" y="133" width="0.8875%" height="15" fill="rgb(239,60,40)"/><text x="25.8684%" y="143.50"></text></g><g><title>type_of (1,140,393 samples, 0.30%)</title><rect x="26.2070%" y="117" width="0.2989%" height="15" fill="rgb(206,27,48)"/><text x="26.4570%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (907,230 samples, 0.24%)</title><rect x="26.2681%" y="101" width="0.2378%" height="15" fill="rgb(225,35,8)"/><text x="26.5181%" y="111.50"></text></g><g><title>lint_checking (4,496,810 samples, 1.18%)</title><rect x="25.6179%" y="149" width="1.1786%" height="15" fill="rgb(250,213,24)"/><text x="25.8679%" y="159.50"></text></g><g><title>module_lints (1,108,982 samples, 0.29%)</title><rect x="26.5059%" y="133" width="0.2907%" height="15" fill="rgb(247,123,22)"/><text x="26.7559%" y="143.50"></text></g><g><title>lint_mod (1,099,482 samples, 0.29%)</title><rect x="26.5084%" y="117" width="0.2882%" height="15" fill="rgb(231,138,38)"/><text x="26.7584%" y="127.50"></text></g><g><title>privacy_access_levels (802,809 samples, 0.21%)</title><rect x="26.7966%" y="149" width="0.2104%" height="15" fill="rgb(231,145,46)"/><text x="27.0466%" y="159.50"></text></g><g><title>privacy_checking_modules (2,255,926 samples, 0.59%)</title><rect x="27.0070%" y="149" width="0.5913%" height="15" fill="rgb(251,118,11)"/><text x="27.2570%" y="159.50"></text></g><g><title>check_mod_privacy (2,248,916 samples, 0.59%)</title><rect x="27.0088%" y="133" width="0.5894%" height="15" fill="rgb(217,147,25)"/><text x="27.2588%" y="143.50"></text></g><g><title>misc_checking_3 (9,310,934 samples, 2.44%)</title><rect x="25.1639%" y="165" width="2.4404%" height="15" fill="rgb(247,81,37)"/><text x="25.4139%" y="175.50">mi..</text></g><g><title>impl_parent (3,116,601 samples, 0.82%)</title><rect x="29.2906%" y="101" width="0.8169%" height="15" fill="rgb(209,12,38)"/><text x="29.5406%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,805,696 samples, 0.47%)</title><rect x="29.6342%" y="85" width="0.4733%" height="15" fill="rgb(227,1,9)"/><text x="29.8842%" y="95.50"></text></g><g><title>impl_trait_ref (6,487,928 samples, 1.70%)</title><rect x="30.1075%" y="101" width="1.7005%" height="15" fill="rgb(248,47,43)"/><text x="30.3575%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,168,223 samples, 1.35%)</title><rect x="30.4534%" y="85" width="1.3546%" height="15" fill="rgb(221,10,30)"/><text x="30.7034%" y="95.50"></text></g><g><title>trait_impls_of (1,046,339 samples, 0.27%)</title><rect x="31.8196%" y="101" width="0.2742%" height="15" fill="rgb(210,229,1)"/><text x="32.0696%" y="111.50"></text></g><g><title>coherent_trait (16,917,109 samples, 4.43%)</title><rect x="27.6605%" y="133" width="4.4340%" height="15" fill="rgb(222,148,37)"/><text x="27.9105%" y="143.50">coher..</text></g><g><title>specialization_graph_of (16,469,295 samples, 4.32%)</title><rect x="27.7779%" y="117" width="4.3167%" height="15" fill="rgb(234,67,33)"/><text x="28.0279%" y="127.50">speci..</text></g><g><title>coherence_checking (17,083,920 samples, 4.48%)</title><rect x="27.6514%" y="149" width="4.4778%" height="15" fill="rgb(247,98,35)"/><text x="27.9014%" y="159.50">coher..</text></g><g><title>associated_item (851,899 samples, 0.22%)</title><rect x="47.0576%" y="85" width="0.2233%" height="15" fill="rgb(247,138,52)"/><text x="47.3076%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (682,998 samples, 0.18%)</title><rect x="47.1018%" y="69" width="0.1790%" height="15" fill="rgb(213,79,30)"/><text x="47.3518%" y="79.50"></text></g><g><title>associated_items (1,195,722 samples, 0.31%)</title><rect x="46.9796%" y="101" width="0.3134%" height="15" fill="rgb(246,177,23)"/><text x="47.2296%" y="111.50"></text></g><g><title>dropck_outlives (1,394,156 samples, 0.37%)</title><rect x="47.3225%" y="101" width="0.3654%" height="15" fill="rgb(230,62,27)"/><text x="47.5725%" y="111.50"></text></g><g><title>mir_for_ctfe (487,616 samples, 0.13%)</title><rect x="47.8068%" y="69" width="0.1278%" height="15" fill="rgb(216,154,8)"/><text x="48.0568%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (447,595 samples, 0.12%)</title><rect x="47.8173%" y="53" width="0.1173%" height="15" fill="rgb(244,35,45)"/><text x="48.0673%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,124,362 samples, 0.29%)</title><rect x="47.6880%" y="101" width="0.2947%" height="15" fill="rgb(251,115,12)"/><text x="47.9380%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,109,922 samples, 0.29%)</title><rect x="47.6918%" y="85" width="0.2909%" height="15" fill="rgb(240,54,50)"/><text x="47.9418%" y="95.50"></text></g><g><title>generics_of (679,616 samples, 0.18%)</title><rect x="49.5515%" y="85" width="0.1781%" height="15" fill="rgb(233,84,52)"/><text x="49.8015%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (540,506 samples, 0.14%)</title><rect x="49.5879%" y="69" width="0.1417%" height="15" fill="rgb(207,117,47)"/><text x="49.8379%" y="79.50"></text></g><g><title>predicates_of (407,758 samples, 0.11%)</title><rect x="49.8625%" y="85" width="0.1069%" height="15" fill="rgb(249,43,39)"/><text x="50.1125%" y="95.50"></text></g><g><title>specializes (700,098 samples, 0.18%)</title><rect x="49.9694%" y="85" width="0.1835%" height="15" fill="rgb(209,38,44)"/><text x="50.2194%" y="95.50"></text></g><g><title>param_env (416,305 samples, 0.11%)</title><rect x="50.0438%" y="69" width="0.1091%" height="15" fill="rgb(236,212,23)"/><text x="50.2938%" y="79.50"></text></g><g><title>trait_impls_of (509,594 samples, 0.13%)</title><rect x="50.1578%" y="85" width="0.1336%" height="15" fill="rgb(242,79,21)"/><text x="50.4078%" y="95.50"></text></g><g><title>evaluate_obligation (8,829,099 samples, 2.31%)</title><rect x="47.9827%" y="101" width="2.3141%" height="15" fill="rgb(211,96,35)"/><text x="48.2327%" y="111.50">e..</text></g><g><title>fn_sig (429,424 samples, 0.11%)</title><rect x="50.3108%" y="101" width="0.1126%" height="15" fill="rgb(253,215,40)"/><text x="50.5608%" y="111.50"></text></g><g><title>generics_of (731,704 samples, 0.19%)</title><rect x="50.4233%" y="101" width="0.1918%" height="15" fill="rgb(211,81,21)"/><text x="50.6733%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (561,162 samples, 0.15%)</title><rect x="50.4680%" y="85" width="0.1471%" height="15" fill="rgb(208,190,38)"/><text x="50.7180%" y="95.50"></text></g><g><title>item_attrs (518,655 samples, 0.14%)</title><rect x="50.6648%" y="101" width="0.1359%" height="15" fill="rgb(235,213,38)"/><text x="50.9148%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (506,464 samples, 0.13%)</title><rect x="50.6680%" y="85" width="0.1327%" height="15" fill="rgb(237,122,38)"/><text x="50.9180%" y="95.50"></text></g><g><title>evaluate_obligation (1,093,624 samples, 0.29%)</title><rect x="51.1987%" y="85" width="0.2866%" height="15" fill="rgb(244,218,35)"/><text x="51.4487%" y="95.50"></text></g><g><title>method_autoderef_steps (2,480,795 samples, 0.65%)</title><rect x="50.8370%" y="101" width="0.6502%" height="15" fill="rgb(240,68,47)"/><text x="51.0870%" y="111.50"></text></g><g><title>predicates_of (539,246 samples, 0.14%)</title><rect x="51.5575%" y="101" width="0.1413%" height="15" fill="rgb(210,16,53)"/><text x="51.8075%" y="111.50"></text></g><g><title>evaluate_obligation (766,809 samples, 0.20%)</title><rect x="53.7411%" y="85" width="0.2010%" height="15" fill="rgb(235,124,12)"/><text x="53.9911%" y="95.50"></text></g><g><title>typeck (9,015,331 samples, 2.36%)</title><rect x="51.7773%" y="101" width="2.3629%" height="15" fill="rgb(224,169,11)"/><text x="52.0273%" y="111.50">ty..</text></g><g><title>item_bodies_checking (84,019,347 samples, 22.02%)</title><rect x="32.1518%" y="149" width="22.0218%" height="15" fill="rgb(250,166,2)"/><text x="32.4018%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (84,015,337 samples, 22.02%)</title><rect x="32.1528%" y="133" width="22.0207%" height="15" fill="rgb(242,216,29)"/><text x="32.4028%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (83,748,413 samples, 21.95%)</title><rect x="32.2228%" y="117" width="21.9507%" height="15" fill="rgb(230,116,27)"/><text x="32.4728%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,533,956 samples, 0.40%)</title><rect x="55.1890%" y="101" width="0.4021%" height="15" fill="rgb(228,99,48)"/><text x="55.4390%" y="111.50"></text></g><g><title>item_types_checking (5,516,621 samples, 1.45%)</title><rect x="54.1735%" y="149" width="1.4459%" height="15" fill="rgb(253,11,6)"/><text x="54.4235%" y="159.50"></text></g><g><title>check_mod_item_types (5,508,141 samples, 1.44%)</title><rect x="54.1757%" y="133" width="1.4437%" height="15" fill="rgb(247,143,39)"/><text x="54.4257%" y="143.50"></text></g><g><title>typeck (2,223,815 samples, 0.58%)</title><rect x="55.0366%" y="117" width="0.5829%" height="15" fill="rgb(236,97,10)"/><text x="55.2866%" y="127.50"></text></g><g><title>fn_sig (791,244 samples, 0.21%)</title><rect x="55.8141%" y="117" width="0.2074%" height="15" fill="rgb(233,208,19)"/><text x="56.0641%" y="127.50"></text></g><g><title>generics_of (914,653 samples, 0.24%)</title><rect x="56.0215%" y="117" width="0.2397%" height="15" fill="rgb(216,164,2)"/><text x="56.2715%" y="127.50"></text></g><g><title>late_bound_vars_map (540,067 samples, 0.14%)</title><rect x="56.6031%" y="69" width="0.1416%" height="15" fill="rgb(220,129,5)"/><text x="56.8531%" y="79.50"></text></g><g><title>resolve_lifetimes (510,167 samples, 0.13%)</title><rect x="56.6109%" y="53" width="0.1337%" height="15" fill="rgb(242,17,10)"/><text x="56.8609%" y="63.50"></text></g><g><title>explicit_predicates_of (1,214,892 samples, 0.32%)</title><rect x="56.4466%" y="85" width="0.3184%" height="15" fill="rgb(242,107,0)"/><text x="56.6966%" y="95.50"></text></g><g><title>predicates_of (1,632,757 samples, 0.43%)</title><rect x="56.3492%" y="117" width="0.4280%" height="15" fill="rgb(251,28,31)"/><text x="56.5992%" y="127.50"></text></g><g><title>predicates_defined_on (1,490,203 samples, 0.39%)</title><rect x="56.3866%" y="101" width="0.3906%" height="15" fill="rgb(233,223,10)"/><text x="56.6366%" y="111.50"></text></g><g><title>type_collecting (4,727,252 samples, 1.24%)</title><rect x="55.6210%" y="149" width="1.2390%" height="15" fill="rgb(215,21,27)"/><text x="55.8710%" y="159.50"></text></g><g><title>collect_mod_item_types (4,713,462 samples, 1.24%)</title><rect x="55.6246%" y="133" width="1.2354%" height="15" fill="rgb(232,23,21)"/><text x="55.8746%" y="143.50"></text></g><g><title>evaluate_obligation (1,037,679 samples, 0.27%)</title><rect x="58.8059%" y="117" width="0.2720%" height="15" fill="rgb(244,5,23)"/><text x="59.0559%" y="127.50"></text></g><g><title>implied_outlives_bounds (833,112 samples, 0.22%)</title><rect x="59.0779%" y="117" width="0.2184%" height="15" fill="rgb(226,81,46)"/><text x="59.3279%" y="127.50"></text></g><g><title>param_env (1,194,449 samples, 0.31%)</title><rect x="59.2963%" y="117" width="0.3131%" height="15" fill="rgb(247,70,30)"/><text x="59.5463%" y="127.50"></text></g><g><title>region_scope_tree (1,012,403 samples, 0.27%)</title><rect x="59.6173%" y="117" width="0.2654%" height="15" fill="rgb(212,68,19)"/><text x="59.8673%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,942,669 samples, 2.87%)</title><rect x="57.0278%" y="133" width="2.8681%" height="15" fill="rgb(240,187,13)"/><text x="57.2778%" y="143.50">ch..</text></g><g><title>evaluate_obligation (828,879 samples, 0.22%)</title><rect x="61.0678%" y="117" width="0.2173%" height="15" fill="rgb(223,113,26)"/><text x="61.3178%" y="127.50"></text></g><g><title>param_env (819,237 samples, 0.21%)</title><rect x="61.3755%" y="117" width="0.2147%" height="15" fill="rgb(206,192,2)"/><text x="61.6255%" y="127.50"></text></g><g><title>check_item_well_formed (7,039,033 samples, 1.84%)</title><rect x="59.8959%" y="133" width="1.8450%" height="15" fill="rgb(241,108,4)"/><text x="60.1459%" y="143.50">c..</text></g><g><title>analysis (218,960,522 samples, 57.39%)</title><rect x="4.9279%" y="181" width="57.3903%" height="15" fill="rgb(247,173,49)"/><text x="5.1779%" y="191.50">analysis</text></g><g><title>type_check_crate (132,443,566 samples, 34.71%)</title><rect x="27.6043%" y="165" width="34.7139%" height="15" fill="rgb(224,114,35)"/><text x="27.8543%" y="175.50">type_check_crate</text></g><g><title>wf_checking (20,808,903 samples, 5.45%)</title><rect x="56.8641%" y="149" width="5.4541%" height="15" fill="rgb(245,159,27)"/><text x="57.1141%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (2,202,814 samples, 0.58%)</title><rect x="61.7409%" y="133" width="0.5774%" height="15" fill="rgb(245,172,44)"/><text x="61.9909%" y="143.50"></text></g><g><title>fn_abi_of_instance (401,913 samples, 0.11%)</title><rect x="62.8658%" y="149" width="0.1053%" height="15" fill="rgb(236,23,11)"/><text x="63.1158%" y="159.50"></text></g><g><title>codegen_module (1,490,617 samples, 0.39%)</title><rect x="62.5880%" y="165" width="0.3907%" height="15" fill="rgb(205,117,38)"/><text x="62.8380%" y="175.50"></text></g><g><title>optimized_mir (528,966 samples, 0.14%)</title><rect x="63.0158%" y="117" width="0.1386%" height="15" fill="rgb(237,72,25)"/><text x="63.2658%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (670,017 samples, 0.18%)</title><rect x="62.9845%" y="133" width="0.1756%" height="15" fill="rgb(244,70,9)"/><text x="63.2345%" y="143.50"></text></g><g><title>monomorphization_collector (754,308 samples, 0.20%)</title><rect x="62.9839%" y="149" width="0.1977%" height="15" fill="rgb(217,125,39)"/><text x="63.2339%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (836,759 samples, 0.22%)</title><rect x="62.9790%" y="165" width="0.2193%" height="15" fill="rgb(235,36,10)"/><text x="63.2290%" y="175.50"></text></g><g><title>codegen_crate (3,431,548 samples, 0.90%)</title><rect x="62.3211%" y="181" width="0.8994%" height="15" fill="rgb(251,123,47)"/><text x="62.5711%" y="191.50"></text></g><g><title>codegen_module_optimize (13,668,483 samples, 3.58%)</title><rect x="63.2205%" y="181" width="3.5826%" height="15" fill="rgb(221,13,13)"/><text x="63.4705%" y="191.50">code..</text></g><g><title>LLVM_module_optimize (6,262,390 samples, 1.64%)</title><rect x="65.1617%" y="165" width="1.6414%" height="15" fill="rgb(238,131,9)"/><text x="65.4117%" y="175.50"></text></g><g><title>LLVM_lto_optimize (3,883,603 samples, 1.02%)</title><rect x="67.0789%" y="165" width="1.0179%" height="15" fill="rgb(211,50,8)"/><text x="67.3289%" y="175.50"></text></g><g><title>LLVM_module_codegen (12,766,131 samples, 3.35%)</title><rect x="68.0968%" y="165" width="3.3460%" height="15" fill="rgb(245,182,24)"/><text x="68.3468%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (12,558,029 samples, 3.29%)</title><rect x="68.1513%" y="149" width="3.2915%" height="15" fill="rgb(242,14,37)"/><text x="68.4013%" y="159.50">LLV..</text></g><g><title>codegen_module_perform_lto (17,819,218 samples, 4.67%)</title><rect x="66.8031%" y="181" width="4.6705%" height="15" fill="rgb(246,228,12)"/><text x="67.0531%" y="191.50">codeg..</text></g><g><title>metadata_register_crate (1,308,295 samples, 0.34%)</title><rect x="82.4002%" y="133" width="0.3429%" height="15" fill="rgb(213,55,15)"/><text x="82.6502%" y="143.50"></text></g><g><title>metadata_register_crate (455,025 samples, 0.12%)</title><rect x="82.6239%" y="117" width="0.1193%" height="15" fill="rgb(209,9,3)"/><text x="82.8739%" y="127.50"></text></g><g><title>macro_expand_crate (43,195,702 samples, 11.32%)</title><rect x="71.6825%" y="165" width="11.3217%" height="15" fill="rgb(230,59,30)"/><text x="71.9325%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (43,182,492 samples, 11.32%)</title><rect x="71.6860%" y="149" width="11.3183%" height="15" fill="rgb(209,121,21)"/><text x="71.9360%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (996,412 samples, 0.26%)</title><rect x="82.7431%" y="133" width="0.2612%" height="15" fill="rgb(220,109,13)"/><text x="82.9931%" y="143.50"></text></g><g><title>late_resolve_crate (4,819,914 samples, 1.26%)</title><rect x="83.0959%" y="149" width="1.2633%" height="15" fill="rgb(232,18,1)"/><text x="83.3459%" y="159.50"></text></g><g><title>configure_and_expand (49,438,342 samples, 12.96%)</title><rect x="71.4735%" y="181" width="12.9580%" height="15" fill="rgb(215,41,42)"/><text x="71.7235%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,381,660 samples, 1.41%)</title><rect x="83.0209%" y="165" width="1.4106%" height="15" fill="rgb(224,123,36)"/><text x="83.2709%" y="175.50"></text></g><g><title>drop_ast (847,979 samples, 0.22%)</title><rect x="84.4315%" y="181" width="0.2223%" height="15" fill="rgb(240,125,3)"/><text x="84.6815%" y="191.50"></text></g><g><title>early_lint_checks (927,321 samples, 0.24%)</title><rect x="84.6595%" y="181" width="0.2431%" height="15" fill="rgb(205,98,50)"/><text x="84.9095%" y="191.50"></text></g><g><title>free_global_ctxt (5,855,246 samples, 1.53%)</title><rect x="84.9025%" y="181" width="1.5347%" height="15" fill="rgb(205,185,37)"/><text x="85.1525%" y="191.50"></text></g><g><title>reachable_non_generics (401,755 samples, 0.11%)</title><rect x="87.7518%" y="149" width="0.1053%" height="15" fill="rgb(238,207,15)"/><text x="88.0018%" y="159.50"></text></g><g><title>exported_symbols (519,106 samples, 0.14%)</title><rect x="87.7451%" y="165" width="0.1361%" height="15" fill="rgb(213,199,42)"/><text x="87.9951%" y="175.50"></text></g><g><title>is_sized_raw (505,755 samples, 0.13%)</title><rect x="90.7562%" y="133" width="0.1326%" height="15" fill="rgb(235,201,11)"/><text x="91.0062%" y="143.50"></text></g><g><title>evaluate_obligation (391,465 samples, 0.10%)</title><rect x="90.7862%" y="117" width="0.1026%" height="15" fill="rgb(207,46,11)"/><text x="91.0362%" y="127.50"></text></g><g><title>layout_of (539,547 samples, 0.14%)</title><rect x="90.8888%" y="133" width="0.1414%" height="15" fill="rgb(241,35,35)"/><text x="91.1388%" y="143.50"></text></g><g><title>layout_of (2,374,336 samples, 0.62%)</title><rect x="90.4775%" y="149" width="0.6223%" height="15" fill="rgb(243,32,47)"/><text x="90.7275%" y="159.50"></text></g><g><title>is_copy_raw (730,058 samples, 0.19%)</title><rect x="93.6850%" y="117" width="0.1914%" height="15" fill="rgb(247,202,23)"/><text x="93.9350%" y="127.50"></text></g><g><title>evaluate_obligation (486,274 samples, 0.13%)</title><rect x="93.7489%" y="101" width="0.1275%" height="15" fill="rgb(219,102,11)"/><text x="93.9989%" y="111.50"></text></g><g><title>needs_drop_raw (861,188 samples, 0.23%)</title><rect x="93.6587%" y="133" width="0.2257%" height="15" fill="rgb(243,110,44)"/><text x="93.9087%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,050,532 samples, 2.90%)</title><rect x="91.0998%" y="149" width="2.8964%" height="15" fill="rgb(222,74,54)"/><text x="91.3498%" y="159.50">mi..</text></g><g><title>optimized_mir (23,337,787 samples, 6.12%)</title><rect x="87.9417%" y="165" width="6.1169%" height="15" fill="rgb(216,99,12)"/><text x="88.1917%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (29,399,407 samples, 7.71%)</title><rect x="86.4372%" y="181" width="7.7057%" height="15" fill="rgb(226,22,26)"/><text x="86.6872%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (8,103,789 samples, 2.12%)</title><rect x="94.1429%" y="181" width="2.1240%" height="15" fill="rgb(217,163,10)"/><text x="94.3929%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (8,837,408 samples, 2.32%)</title><rect x="96.2738%" y="165" width="2.3163%" height="15" fill="rgb(213,25,53)"/><text x="96.5238%" y="175.50">f..</text></g><g><title>link_crate (1,456,097 samples, 0.38%)</title><rect x="98.5901%" y="165" width="0.3816%" height="15" fill="rgb(252,105,26)"/><text x="98.8401%" y="175.50"></text></g><g><title>link_binary (1,247,134 samples, 0.33%)</title><rect x="98.6449%" y="149" width="0.3269%" height="15" fill="rgb(220,39,43)"/><text x="98.8949%" y="159.50"></text></g><g><title>link_rlib (945,540 samples, 0.25%)</title><rect x="98.7239%" y="133" width="0.2478%" height="15" fill="rgb(229,68,48)"/><text x="98.9739%" y="143.50"></text></g><g><title>link (10,329,045 samples, 2.71%)</title><rect x="96.2669%" y="181" width="2.7073%" height="15" fill="rgb(252,8,32)"/><text x="96.5169%" y="191.50">li..</text></g><g><title>parse_crate (531,376 samples, 0.14%)</title><rect x="98.9742%" y="181" width="0.1393%" height="15" fill="rgb(223,20,43)"/><text x="99.2242%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,571,529 samples, 0.67%)</title><rect x="99.1780%" y="181" width="0.6740%" height="15" fill="rgb(229,81,49)"/><text x="99.4280%" y="191.50"></text></g><g><title>all (381,528,895 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (381,528,895 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (472,106 samples, 0.12%)</title><rect x="99.8763%" y="181" width="0.1237%" height="15" fill="rgb(249,174,33)"/><text x="100.1263%" y="191.50"></text></g></svg></svg>