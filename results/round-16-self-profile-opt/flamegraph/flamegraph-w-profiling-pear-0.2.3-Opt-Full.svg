<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (322,783,702 samples, 9.44%)</title><rect x="0.0285%" y="165" width="9.4396%" height="15" fill="rgb(227,0,7)"/><text x="0.2785%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (3,948,139 samples, 0.12%)</title><rect x="13.5157%" y="37" width="0.1155%" height="15" fill="rgb(217,0,24)"/><text x="13.7657%" y="47.50"></text></g><g><title>needs_drop_raw (5,620,066 samples, 0.16%)</title><rect x="13.4675%" y="53" width="0.1644%" height="15" fill="rgb(221,193,54)"/><text x="13.7175%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (4,520,209 samples, 0.13%)</title><rect x="13.6737%" y="37" width="0.1322%" height="15" fill="rgb(248,212,6)"/><text x="13.9237%" y="47.50"></text></g><g><title>resolve_instance (7,952,888 samples, 0.23%)</title><rect x="13.6319%" y="53" width="0.2326%" height="15" fill="rgb(208,68,35)"/><text x="13.8819%" y="63.50"></text></g><g><title>thir_body (7,101,021 samples, 0.21%)</title><rect x="13.8728%" y="53" width="0.2077%" height="15" fill="rgb(232,128,0)"/><text x="14.1228%" y="63.50"></text></g><g><title>mir_const (50,567,912 samples, 1.48%)</title><rect x="12.6259%" y="101" width="1.4788%" height="15" fill="rgb(207,160,47)"/><text x="12.8759%" y="111.50"></text></g><g><title>unsafety_check_result (44,794,626 samples, 1.31%)</title><rect x="12.7948%" y="85" width="1.3100%" height="15" fill="rgb(228,23,34)"/><text x="13.0448%" y="95.50"></text></g><g><title>mir_built (40,779,120 samples, 1.19%)</title><rect x="12.9122%" y="69" width="1.1926%" height="15" fill="rgb(218,30,26)"/><text x="13.1622%" y="79.50"></text></g><g><title>mir_promoted (58,398,773 samples, 1.71%)</title><rect x="12.4626%" y="117" width="1.7078%" height="15" fill="rgb(220,122,19)"/><text x="12.7126%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (7,963,345 samples, 0.23%)</title><rect x="14.2329%" y="117" width="0.2329%" height="15" fill="rgb(250,228,42)"/><text x="14.4829%" y="127.50"></text></g><g><title>normalize_projection_ty (4,675,395 samples, 0.14%)</title><rect x="14.3291%" y="101" width="0.1367%" height="15" fill="rgb(240,193,28)"/><text x="14.5791%" y="111.50"></text></g><g><title>type_op_prove_predicate (23,837,308 samples, 0.70%)</title><rect x="14.6431%" y="117" width="0.6971%" height="15" fill="rgb(216,20,37)"/><text x="14.8931%" y="127.50"></text></g><g><title>MIR_borrow_checking (199,442,797 samples, 5.83%)</title><rect x="9.5084%" y="149" width="5.8325%" height="15" fill="rgb(206,188,39)"/><text x="9.7584%" y="159.50">MIR_bor..</text></g><g><title>mir_borrowck (198,431,847 samples, 5.80%)</title><rect x="9.5379%" y="133" width="5.8030%" height="15" fill="rgb(217,207,13)"/><text x="9.7879%" y="143.50">mir_bor..</text></g><g><title>misc_checking_1 (4,652,292 samples, 0.14%)</title><rect x="15.4231%" y="149" width="0.1361%" height="15" fill="rgb(231,73,38)"/><text x="15.6731%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (3,436,268 samples, 0.10%)</title><rect x="15.5592%" y="133" width="0.1005%" height="15" fill="rgb(225,20,46)"/><text x="15.8092%" y="143.50"></text></g><g><title>misc_checking_2 (8,661,446 samples, 0.25%)</title><rect x="15.5591%" y="149" width="0.2533%" height="15" fill="rgb(210,31,41)"/><text x="15.8091%" y="159.50"></text></g><g><title>match_checking (5,222,728 samples, 0.15%)</title><rect x="15.6597%" y="133" width="0.1527%" height="15" fill="rgb(221,200,47)"/><text x="15.9097%" y="143.50"></text></g><g><title>check_match (4,943,452 samples, 0.14%)</title><rect x="15.6678%" y="117" width="0.1446%" height="15" fill="rgb(226,26,5)"/><text x="15.9178%" y="127.50"></text></g><g><title>crate_lints (5,058,926 samples, 0.15%)</title><rect x="15.9056%" y="117" width="0.1479%" height="15" fill="rgb(249,33,26)"/><text x="16.1556%" y="127.50"></text></g><g><title>lint_checking (8,124,900 samples, 0.24%)</title><rect x="15.9055%" y="133" width="0.2376%" height="15" fill="rgb(235,183,28)"/><text x="16.1555%" y="143.50"></text></g><g><title>privacy_checking_modules (7,112,069 samples, 0.21%)</title><rect x="16.2173%" y="133" width="0.2080%" height="15" fill="rgb(221,5,38)"/><text x="16.4673%" y="143.50"></text></g><g><title>check_mod_privacy (7,097,059 samples, 0.21%)</title><rect x="16.2177%" y="117" width="0.2075%" height="15" fill="rgb(247,18,42)"/><text x="16.4677%" y="127.50"></text></g><g><title>misc_checking_3 (20,991,124 samples, 0.61%)</title><rect x="15.8124%" y="149" width="0.6139%" height="15" fill="rgb(241,131,45)"/><text x="16.0624%" y="159.50"></text></g><g><title>impl_trait_ref (6,033,878 samples, 0.18%)</title><rect x="16.9079%" y="85" width="0.1765%" height="15" fill="rgb(249,31,29)"/><text x="17.1579%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,496,732 samples, 0.13%)</title><rect x="16.9529%" y="69" width="0.1315%" height="15" fill="rgb(225,111,53)"/><text x="17.2029%" y="79.50"></text></g><g><title>coherent_trait (23,172,469 samples, 0.68%)</title><rect x="16.4381%" y="117" width="0.6777%" height="15" fill="rgb(238,160,17)"/><text x="16.6881%" y="127.50"></text></g><g><title>specialization_graph_of (22,493,751 samples, 0.66%)</title><rect x="16.4580%" y="101" width="0.6578%" height="15" fill="rgb(214,148,48)"/><text x="16.7080%" y="111.50"></text></g><g><title>coherence_checking (23,404,791 samples, 0.68%)</title><rect x="16.4373%" y="133" width="0.6845%" height="15" fill="rgb(232,36,49)"/><text x="16.6873%" y="143.50"></text></g><g><title>evaluate_obligation (7,903,020 samples, 0.23%)</title><rect x="19.4355%" y="85" width="0.2311%" height="15" fill="rgb(209,103,24)"/><text x="19.6855%" y="95.50"></text></g><g><title>evaluate_obligation (9,555,444 samples, 0.28%)</title><rect x="23.0002%" y="69" width="0.2794%" height="15" fill="rgb(229,88,8)"/><text x="23.2502%" y="79.50"></text></g><g><title>typeck (125,874,804 samples, 3.68%)</title><rect x="19.8094%" y="85" width="3.6811%" height="15" fill="rgb(213,181,19)"/><text x="20.0594%" y="95.50">type..</text></g><g><title>item_bodies_checking (217,780,741 samples, 6.37%)</title><rect x="17.1265%" y="133" width="6.3688%" height="15" fill="rgb(254,191,54)"/><text x="17.3765%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (217,776,231 samples, 6.37%)</title><rect x="17.1266%" y="117" width="6.3687%" height="15" fill="rgb(241,83,37)"/><text x="17.3766%" y="127.50">typeck_i..</text></g><g><title>typeck (217,203,467 samples, 6.35%)</title><rect x="17.1434%" y="101" width="6.3519%" height="15" fill="rgb(233,36,39)"/><text x="17.3934%" y="111.50">typeck</text></g><g><title>item_types_checking (8,691,468 samples, 0.25%)</title><rect x="23.4953%" y="133" width="0.2542%" height="15" fill="rgb(226,3,54)"/><text x="23.7453%" y="143.50"></text></g><g><title>check_mod_item_types (8,675,718 samples, 0.25%)</title><rect x="23.4958%" y="117" width="0.2537%" height="15" fill="rgb(245,192,40)"/><text x="23.7458%" y="127.50"></text></g><g><title>predicates_of (4,683,690 samples, 0.14%)</title><rect x="23.9298%" y="101" width="0.1370%" height="15" fill="rgb(238,167,29)"/><text x="24.1798%" y="111.50"></text></g><g><title>predicates_defined_on (4,420,462 samples, 0.13%)</title><rect x="23.9375%" y="85" width="0.1293%" height="15" fill="rgb(232,182,51)"/><text x="24.1875%" y="95.50"></text></g><g><title>type_collecting (11,788,652 samples, 0.34%)</title><rect x="23.7497%" y="133" width="0.3447%" height="15" fill="rgb(231,60,39)"/><text x="23.9997%" y="143.50"></text></g><g><title>collect_mod_item_types (11,758,561 samples, 0.34%)</title><rect x="23.7506%" y="117" width="0.3439%" height="15" fill="rgb(208,69,12)"/><text x="24.0006%" y="127.50"></text></g><g><title>check_impl_item_well_formed (21,204,538 samples, 0.62%)</title><rect x="24.1332%" y="117" width="0.6201%" height="15" fill="rgb(235,93,37)"/><text x="24.3832%" y="127.50"></text></g><g><title>check_item_well_formed (24,585,385 samples, 0.72%)</title><rect x="24.7534%" y="117" width="0.7190%" height="15" fill="rgb(213,116,39)"/><text x="25.0034%" y="127.50"></text></g><g><title>analysis (549,430,112 samples, 16.07%)</title><rect x="9.4681%" y="165" width="16.0676%" height="15" fill="rgb(222,207,29)"/><text x="9.7181%" y="175.50">analysis</text></g><g><title>type_check_crate (311,496,547 samples, 9.11%)</title><rect x="16.4263%" y="149" width="9.1095%" height="15" fill="rgb(206,96,30)"/><text x="16.6763%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (49,238,269 samples, 1.44%)</title><rect x="24.0958%" y="133" width="1.4399%" height="15" fill="rgb(218,138,4)"/><text x="24.3458%" y="143.50"></text></g><g><title>param_env (7,780,548 samples, 0.23%)</title><rect x="28.2658%" y="117" width="0.2275%" height="15" fill="rgb(250,191,14)"/><text x="28.5158%" y="127.50"></text></g><g><title>fn_abi_of_instance (24,364,039 samples, 0.71%)</title><rect x="27.8413%" y="133" width="0.7125%" height="15" fill="rgb(239,60,40)"/><text x="28.0913%" y="143.50"></text></g><g><title>codegen_module (103,986,331 samples, 3.04%)</title><rect x="25.6112%" y="149" width="3.0410%" height="15" fill="rgb(206,27,48)"/><text x="25.8612%" y="159.50">cod..</text></g><g><title>metadata_decode_entry_optimized_mir (4,880,420 samples, 0.14%)</title><rect x="29.0067%" y="85" width="0.1427%" height="15" fill="rgb(225,35,8)"/><text x="29.2567%" y="95.50"></text></g><g><title>optimized_mir (10,395,191 samples, 0.30%)</title><rect x="28.9254%" y="101" width="0.3040%" height="15" fill="rgb(250,213,24)"/><text x="29.1754%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (6,179,776 samples, 0.18%)</title><rect x="29.2846%" y="85" width="0.1807%" height="15" fill="rgb(247,123,22)"/><text x="29.5346%" y="95.50"></text></g><g><title>resolve_instance (12,778,719 samples, 0.37%)</title><rect x="29.2294%" y="101" width="0.3737%" height="15" fill="rgb(231,138,38)"/><text x="29.4794%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (35,531,696 samples, 1.04%)</title><rect x="28.6541%" y="117" width="1.0391%" height="15" fill="rgb(231,145,46)"/><text x="28.9041%" y="127.50"></text></g><g><title>monomorphization_collector (35,676,348 samples, 1.04%)</title><rect x="28.6540%" y="133" width="1.0433%" height="15" fill="rgb(251,118,11)"/><text x="28.9040%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (4,191,137 samples, 0.12%)</title><rect x="29.6975%" y="117" width="0.1226%" height="15" fill="rgb(217,147,25)"/><text x="29.9475%" y="127.50"></text></g><g><title>symbol_name (3,582,917 samples, 0.10%)</title><rect x="29.7153%" y="101" width="0.1048%" height="15" fill="rgb(247,81,37)"/><text x="29.9653%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (41,276,400 samples, 1.21%)</title><rect x="28.6525%" y="149" width="1.2071%" height="15" fill="rgb(209,12,38)"/><text x="28.9025%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (5,548,322 samples, 0.16%)</title><rect x="29.6973%" y="133" width="0.1623%" height="15" fill="rgb(227,1,9)"/><text x="29.9473%" y="143.50"></text></g><g><title>codegen_crate (147,915,261 samples, 4.33%)</title><rect x="25.5360%" y="165" width="4.3257%" height="15" fill="rgb(248,47,43)"/><text x="25.7860%" y="175.50">codeg..</text></g><g><title>codegen_module_optimize (915,632,282 samples, 26.78%)</title><rect x="29.8617%" y="165" width="26.7769%" height="15" fill="rgb(221,10,30)"/><text x="30.1117%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (889,951,374 samples, 26.03%)</title><rect x="30.6127%" y="149" width="26.0259%" height="15" fill="rgb(210,229,1)"/><text x="30.8627%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (342,253,310 samples, 10.01%)</title><rect x="57.1523%" y="149" width="10.0089%" height="15" fill="rgb(222,148,37)"/><text x="57.4023%" y="159.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (290,425,254 samples, 8.49%)</title><rect x="67.1612%" y="149" width="8.4933%" height="15" fill="rgb(234,67,33)"/><text x="67.4112%" y="159.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (287,666,020 samples, 8.41%)</title><rect x="67.2419%" y="133" width="8.4126%" height="15" fill="rgb(247,98,35)"/><text x="67.4919%" y="143.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (25,883,082 samples, 0.76%)</title><rect x="75.6545%" y="149" width="0.7569%" height="15" fill="rgb(247,138,52)"/><text x="75.9045%" y="159.50"></text></g><g><title>codegen_module_perform_lto (677,195,685 samples, 19.80%)</title><rect x="56.6386%" y="165" width="19.8041%" height="15" fill="rgb(213,79,30)"/><text x="56.8886%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (5,434,651 samples, 0.16%)</title><rect x="90.0172%" y="117" width="0.1589%" height="15" fill="rgb(246,177,23)"/><text x="90.2672%" y="127.50"></text></g><g><title>macro_expand_crate (468,823,514 samples, 13.71%)</title><rect x="76.4825%" y="149" width="13.7104%" height="15" fill="rgb(230,62,27)"/><text x="76.7325%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (468,811,124 samples, 13.71%)</title><rect x="76.4829%" y="133" width="13.7100%" height="15" fill="rgb(216,154,8)"/><text x="76.7329%" y="143.50">expand_crate</text></g><g><title>late_resolve_crate (7,750,896 samples, 0.23%)</title><rect x="90.2122%" y="133" width="0.2267%" height="15" fill="rgb(244,35,45)"/><text x="90.4622%" y="143.50"></text></g><g><title>configure_and_expand (479,261,489 samples, 14.02%)</title><rect x="76.4426%" y="165" width="14.0156%" height="15" fill="rgb(251,115,12)"/><text x="76.6926%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (8,987,870 samples, 0.26%)</title><rect x="90.1954%" y="149" width="0.2628%" height="15" fill="rgb(240,54,50)"/><text x="90.4454%" y="159.50"></text></g><g><title>free_global_ctxt (18,417,475 samples, 0.54%)</title><rect x="90.5546%" y="165" width="0.5386%" height="15" fill="rgb(233,84,52)"/><text x="90.8046%" y="175.50"></text></g><g><title>layout_of (5,265,765 samples, 0.15%)</title><rect x="92.0640%" y="133" width="0.1540%" height="15" fill="rgb(207,117,47)"/><text x="92.3140%" y="143.50"></text></g><g><title>is_copy_raw (3,560,753 samples, 0.10%)</title><rect x="92.9107%" y="101" width="0.1041%" height="15" fill="rgb(249,43,39)"/><text x="93.1607%" y="111.50"></text></g><g><title>needs_drop_raw (3,984,831 samples, 0.12%)</title><rect x="92.8985%" y="117" width="0.1165%" height="15" fill="rgb(209,38,44)"/><text x="93.1485%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (27,968,269 samples, 0.82%)</title><rect x="92.2180%" y="133" width="0.8179%" height="15" fill="rgb(236,212,23)"/><text x="92.4680%" y="143.50"></text></g><g><title>optimized_mir (54,880,162 samples, 1.60%)</title><rect x="91.4610%" y="149" width="1.6049%" height="15" fill="rgb(242,79,21)"/><text x="91.7110%" y="159.50"></text></g><g><title>generate_crate_metadata (68,158,691 samples, 1.99%)</title><rect x="91.0932%" y="165" width="1.9932%" height="15" fill="rgb(211,96,35)"/><text x="91.3432%" y="175.50">g..</text></g><g><title>hir_lowering (16,281,592 samples, 0.48%)</title><rect x="93.0864%" y="165" width="0.4761%" height="15" fill="rgb(253,215,40)"/><text x="93.3364%" y="175.50"></text></g><g><title>finish_ongoing_codegen (210,835,423 samples, 6.17%)</title><rect x="93.5631%" y="149" width="6.1657%" height="15" fill="rgb(211,81,21)"/><text x="93.8131%" y="159.50">finish_o..</text></g><g><title>link (213,889,167 samples, 6.26%)</title><rect x="93.5626%" y="165" width="6.2550%" height="15" fill="rgb(208,190,38)"/><text x="93.8126%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (4,872,714 samples, 0.14%)</title><rect x="99.8307%" y="165" width="0.1425%" height="15" fill="rgb(235,213,38)"/><text x="100.0807%" y="175.50"></text></g><g><title>all (3,419,480,725 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,419,480,725 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>