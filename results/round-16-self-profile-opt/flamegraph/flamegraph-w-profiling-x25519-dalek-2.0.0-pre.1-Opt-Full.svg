<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (60,187,643 samples, 18.46%)</title><rect x="0.2035%" y="325" width="18.4583%" height="15" fill="rgb(227,0,7)"/><text x="0.4535%" y="335.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (394,825 samples, 0.12%)</title><rect x="18.5407%" y="309" width="0.1211%" height="15" fill="rgb(217,0,24)"/><text x="18.7907%" y="319.50"></text></g><g><title>LLVM_thin_lto_global_analysis (362,135 samples, 0.11%)</title><rect x="18.5507%" y="293" width="0.1111%" height="15" fill="rgb(221,193,54)"/><text x="18.8007%" y="303.50"></text></g><g><title>specialization_graph_of (459,585 samples, 0.14%)</title><rect x="20.7505%" y="197" width="0.1409%" height="15" fill="rgb(248,212,6)"/><text x="21.0005%" y="207.50"></text></g><g><title>resolve_instance (778,028 samples, 0.24%)</title><rect x="20.6643%" y="213" width="0.2386%" height="15" fill="rgb(208,68,35)"/><text x="20.9143%" y="223.50"></text></g><g><title>mir_const (2,796,578 samples, 0.86%)</title><rect x="20.1361%" y="261" width="0.8577%" height="15" fill="rgb(232,128,0)"/><text x="20.3861%" y="271.50"></text></g><g><title>unsafety_check_result (2,423,676 samples, 0.74%)</title><rect x="20.2504%" y="245" width="0.7433%" height="15" fill="rgb(207,160,47)"/><text x="20.5004%" y="255.50"></text></g><g><title>mir_built (2,220,835 samples, 0.68%)</title><rect x="20.3126%" y="229" width="0.6811%" height="15" fill="rgb(228,23,34)"/><text x="20.5626%" y="239.50"></text></g><g><title>mir_const_qualif (681,693 samples, 0.21%)</title><rect x="20.9937%" y="261" width="0.2091%" height="15" fill="rgb(218,30,26)"/><text x="21.2437%" y="271.50"></text></g><g><title>mir_const (538,242 samples, 0.17%)</title><rect x="21.0377%" y="245" width="0.1651%" height="15" fill="rgb(220,122,19)"/><text x="21.2877%" y="255.50"></text></g><g><title>unsafety_check_result (376,172 samples, 0.12%)</title><rect x="21.0874%" y="229" width="0.1154%" height="15" fill="rgb(250,228,42)"/><text x="21.3374%" y="239.50"></text></g><g><title>mir_promoted (3,906,845 samples, 1.20%)</title><rect x="20.0052%" y="277" width="1.1981%" height="15" fill="rgb(240,193,28)"/><text x="20.2552%" y="287.50"></text></g><g><title>type_op_prove_predicate (423,455 samples, 0.13%)</title><rect x="21.2503%" y="277" width="0.1299%" height="15" fill="rgb(216,20,37)"/><text x="21.5003%" y="287.50"></text></g><g><title>MIR_borrow_checking (8,717,224 samples, 2.67%)</title><rect x="18.7074%" y="309" width="2.6734%" height="15" fill="rgb(206,188,39)"/><text x="18.9574%" y="319.50">MI..</text></g><g><title>mir_borrowck (8,630,612 samples, 2.65%)</title><rect x="18.7340%" y="293" width="2.6468%" height="15" fill="rgb(217,207,13)"/><text x="18.9840%" y="303.50">mi..</text></g><g><title>MIR_effect_checking (341,074 samples, 0.10%)</title><rect x="21.3808%" y="309" width="0.1046%" height="15" fill="rgb(231,73,38)"/><text x="21.6308%" y="319.50"></text></g><g><title>check_mod_attrs (387,614 samples, 0.12%)</title><rect x="21.5317%" y="293" width="0.1189%" height="15" fill="rgb(225,20,46)"/><text x="21.7817%" y="303.50"></text></g><g><title>misc_checking_1 (742,419 samples, 0.23%)</title><rect x="21.5260%" y="309" width="0.2277%" height="15" fill="rgb(210,31,41)"/><text x="21.7760%" y="319.50"></text></g><g><title>misc_checking_2 (329,044 samples, 0.10%)</title><rect x="21.7537%" y="309" width="0.1009%" height="15" fill="rgb(221,200,47)"/><text x="22.0037%" y="319.50"></text></g><g><title>crate_lints (2,238,517 samples, 0.69%)</title><rect x="21.9833%" y="277" width="0.6865%" height="15" fill="rgb(226,26,5)"/><text x="22.2333%" y="287.50"></text></g><g><title>type_of (1,104,214 samples, 0.34%)</title><rect x="22.3312%" y="261" width="0.3386%" height="15" fill="rgb(249,33,26)"/><text x="22.5812%" y="271.50"></text></g><g><title>metadata_decode_entry_type_of (858,742 samples, 0.26%)</title><rect x="22.4064%" y="245" width="0.2634%" height="15" fill="rgb(235,183,28)"/><text x="22.6564%" y="255.50"></text></g><g><title>lint_checking (2,368,518 samples, 0.73%)</title><rect x="21.9828%" y="293" width="0.7264%" height="15" fill="rgb(221,5,38)"/><text x="22.2328%" y="303.50"></text></g><g><title>misc_checking_3 (3,163,308 samples, 0.97%)</title><rect x="21.8546%" y="309" width="0.9701%" height="15" fill="rgb(247,18,42)"/><text x="22.1046%" y="319.50"></text></g><g><title>adt_destructor (497,166 samples, 0.15%)</title><rect x="22.8621%" y="261" width="0.1525%" height="15" fill="rgb(241,131,45)"/><text x="23.1121%" y="271.50"></text></g><g><title>coherent_trait (488,786 samples, 0.15%)</title><rect x="22.8647%" y="245" width="0.1499%" height="15" fill="rgb(249,31,29)"/><text x="23.1147%" y="255.50"></text></g><g><title>specialization_graph_of (486,286 samples, 0.15%)</title><rect x="22.8655%" y="229" width="0.1491%" height="15" fill="rgb(225,111,53)"/><text x="23.1155%" y="239.50"></text></g><g><title>impl_parent (2,946,760 samples, 0.90%)</title><rect x="24.6446%" y="245" width="0.9037%" height="15" fill="rgb(238,160,17)"/><text x="24.8946%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,730,316 samples, 0.53%)</title><rect x="25.0176%" y="229" width="0.5307%" height="15" fill="rgb(214,148,48)"/><text x="25.2676%" y="239.50"></text></g><g><title>impl_trait_ref (6,264,253 samples, 1.92%)</title><rect x="25.5483%" y="245" width="1.9211%" height="15" fill="rgb(232,36,49)"/><text x="25.7983%" y="255.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,040,060 samples, 1.55%)</title><rect x="25.9237%" y="229" width="1.5457%" height="15" fill="rgb(209,103,24)"/><text x="26.1737%" y="239.50"></text></g><g><title>trait_impls_of (1,139,396 samples, 0.35%)</title><rect x="27.4851%" y="245" width="0.3494%" height="15" fill="rgb(229,88,8)"/><text x="27.7351%" y="255.50"></text></g><g><title>coherent_trait (16,252,355 samples, 4.98%)</title><rect x="22.8507%" y="277" width="4.9843%" height="15" fill="rgb(213,181,19)"/><text x="23.1007%" y="287.50">cohere..</text></g><g><title>specialization_graph_of (15,609,098 samples, 4.79%)</title><rect x="23.0480%" y="261" width="4.7870%" height="15" fill="rgb(254,191,54)"/><text x="23.2980%" y="271.50">specia..</text></g><g><title>coherence_checking (16,346,046 samples, 5.01%)</title><rect x="22.8447%" y="293" width="5.0130%" height="15" fill="rgb(241,83,37)"/><text x="23.0947%" y="303.50">cohere..</text></g><g><title>evaluate_obligation (2,223,077 samples, 0.68%)</title><rect x="29.6228%" y="245" width="0.6818%" height="15" fill="rgb(233,36,39)"/><text x="29.8728%" y="255.50"></text></g><g><title>item_bodies_checking (9,037,369 samples, 2.77%)</title><rect x="27.8667%" y="293" width="2.7716%" height="15" fill="rgb(226,3,54)"/><text x="28.1167%" y="303.50">it..</text></g><g><title>typeck_item_bodies (9,035,309 samples, 2.77%)</title><rect x="27.8673%" y="277" width="2.7709%" height="15" fill="rgb(245,192,40)"/><text x="28.1173%" y="287.50">ty..</text></g><g><title>typeck (8,980,779 samples, 2.75%)</title><rect x="27.8840%" y="261" width="2.7542%" height="15" fill="rgb(238,167,29)"/><text x="28.1340%" y="271.50">ty..</text></g><g><title>item_types_checking (844,190 samples, 0.26%)</title><rect x="30.6382%" y="293" width="0.2589%" height="15" fill="rgb(232,182,51)"/><text x="30.8882%" y="303.50"></text></g><g><title>check_mod_item_types (841,140 samples, 0.26%)</title><rect x="30.6392%" y="277" width="0.2580%" height="15" fill="rgb(231,60,39)"/><text x="30.8892%" y="287.50"></text></g><g><title>generics_of (339,333 samples, 0.10%)</title><rect x="30.9892%" y="261" width="0.1041%" height="15" fill="rgb(208,69,12)"/><text x="31.2392%" y="271.50"></text></g><g><title>predicates_of (335,886 samples, 0.10%)</title><rect x="31.1151%" y="261" width="0.1030%" height="15" fill="rgb(235,93,37)"/><text x="31.3651%" y="271.50"></text></g><g><title>type_collecting (1,121,394 samples, 0.34%)</title><rect x="30.8977%" y="293" width="0.3439%" height="15" fill="rgb(213,116,39)"/><text x="31.1477%" y="303.50"></text></g><g><title>collect_mod_item_types (1,108,373 samples, 0.34%)</title><rect x="30.9017%" y="277" width="0.3399%" height="15" fill="rgb(222,207,29)"/><text x="31.1517%" y="287.50"></text></g><g><title>check_impl_item_well_formed (1,455,406 samples, 0.45%)</title><rect x="31.2737%" y="277" width="0.4463%" height="15" fill="rgb(206,96,30)"/><text x="31.5237%" y="287.50"></text></g><g><title>analysis (43,839,107 samples, 13.44%)</title><rect x="18.6618%" y="325" width="13.4445%" height="15" fill="rgb(218,138,4)"/><text x="18.9118%" y="335.50">analysis</text></g><g><title>type_check_crate (30,264,755 samples, 9.28%)</title><rect x="22.8247%" y="309" width="9.2816%" height="15" fill="rgb(250,191,14)"/><text x="23.0747%" y="319.50">type_check_cr..</text></g><g><title>wf_checking (2,815,275 samples, 0.86%)</title><rect x="31.2429%" y="293" width="0.8634%" height="15" fill="rgb(239,60,40)"/><text x="31.4929%" y="303.50"></text></g><g><title>check_item_well_formed (1,259,408 samples, 0.39%)</title><rect x="31.7200%" y="277" width="0.3862%" height="15" fill="rgb(206,27,48)"/><text x="31.9700%" y="287.50"></text></g><g><title>layout_of (524,426 samples, 0.16%)</title><rect x="33.2923%" y="277" width="0.1608%" height="15" fill="rgb(225,35,8)"/><text x="33.5423%" y="287.50"></text></g><g><title>fn_abi_of_instance (1,448,272 samples, 0.44%)</title><rect x="33.0675%" y="293" width="0.4442%" height="15" fill="rgb(250,213,24)"/><text x="33.3175%" y="303.50"></text></g><g><title>codegen_module (4,105,880 samples, 1.26%)</title><rect x="32.3319%" y="309" width="1.2592%" height="15" fill="rgb(247,123,22)"/><text x="32.5819%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (563,417 samples, 0.17%)</title><rect x="34.0165%" y="245" width="0.1728%" height="15" fill="rgb(231,138,38)"/><text x="34.2665%" y="255.50"></text></g><g><title>mir_for_ctfe (2,259,357 samples, 0.69%)</title><rect x="36.1029%" y="53" width="0.6929%" height="15" fill="rgb(231,145,46)"/><text x="36.3529%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (2,258,867 samples, 0.69%)</title><rect x="36.1030%" y="37" width="0.6927%" height="15" fill="rgb(251,118,11)"/><text x="36.3530%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,054,163 samples, 1.86%)</title><rect x="34.9396%" y="101" width="1.8567%" height="15" fill="rgb(217,147,25)"/><text x="35.1896%" y="111.50">e..</text></g><g><title>eval_to_const_value_raw (6,047,453 samples, 1.85%)</title><rect x="34.9417%" y="85" width="1.8546%" height="15" fill="rgb(247,81,37)"/><text x="35.1917%" y="95.50">e..</text></g><g><title>eval_to_allocation_raw (6,043,723 samples, 1.85%)</title><rect x="34.9428%" y="69" width="1.8535%" height="15" fill="rgb(209,12,38)"/><text x="35.1928%" y="79.50">e..</text></g><g><title>eval_to_const_value_raw (6,865,853 samples, 2.11%)</title><rect x="34.6933%" y="165" width="2.1056%" height="15" fill="rgb(227,1,9)"/><text x="34.9433%" y="175.50">e..</text></g><g><title>eval_to_const_value_raw (6,864,863 samples, 2.11%)</title><rect x="34.6937%" y="149" width="2.1053%" height="15" fill="rgb(248,47,43)"/><text x="34.9437%" y="159.50">e..</text></g><g><title>eval_to_allocation_raw (6,864,013 samples, 2.11%)</title><rect x="34.6939%" y="133" width="2.1050%" height="15" fill="rgb(221,10,30)"/><text x="34.9439%" y="143.50">e..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,075,023 samples, 1.86%)</title><rect x="34.9359%" y="117" width="1.8631%" height="15" fill="rgb(210,229,1)"/><text x="35.1859%" y="127.50">t..</text></g><g><title>eval_to_const_value_raw (8,497,712 samples, 2.61%)</title><rect x="34.1930%" y="229" width="2.6061%" height="15" fill="rgb(222,148,37)"/><text x="34.4430%" y="239.50">ev..</text></g><g><title>eval_to_const_value_raw (8,496,022 samples, 2.61%)</title><rect x="34.1935%" y="213" width="2.6055%" height="15" fill="rgb(234,67,33)"/><text x="34.4435%" y="223.50">ev..</text></g><g><title>eval_to_allocation_raw (8,492,982 samples, 2.60%)</title><rect x="34.1944%" y="197" width="2.6046%" height="15" fill="rgb(247,98,35)"/><text x="34.4444%" y="207.50">ev..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,876,853 samples, 2.11%)</title><rect x="34.6901%" y="181" width="2.1090%" height="15" fill="rgb(247,138,52)"/><text x="34.9401%" y="191.50">t..</text></g><g><title>optimized_mir (9,992,160 samples, 3.06%)</title><rect x="33.7365%" y="261" width="3.0644%" height="15" fill="rgb(213,79,30)"/><text x="33.9865%" y="271.50">opt..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,515,853 samples, 2.61%)</title><rect x="34.1893%" y="245" width="2.6116%" height="15" fill="rgb(246,177,23)"/><text x="34.4393%" y="255.50">tr..</text></g><g><title>codegen_fulfill_obligation (407,364 samples, 0.12%)</title><rect x="36.8292%" y="245" width="0.1249%" height="15" fill="rgb(230,62,27)"/><text x="37.0792%" y="255.50"></text></g><g><title>resolve_instance (636,756 samples, 0.20%)</title><rect x="36.8009%" y="261" width="0.1953%" height="15" fill="rgb(216,154,8)"/><text x="37.0509%" y="271.50"></text></g><g><title>monomorphization_collector_graph_walk (11,181,934 samples, 3.43%)</title><rect x="33.5996%" y="277" width="3.4293%" height="15" fill="rgb(244,35,45)"/><text x="33.8496%" y="287.50">mon..</text></g><g><title>monomorphization_collector (11,234,985 samples, 3.45%)</title><rect x="33.5989%" y="293" width="3.4455%" height="15" fill="rgb(251,115,12)"/><text x="33.8489%" y="303.50">mon..</text></g><g><title>collect_and_partition_mono_items (11,427,627 samples, 3.50%)</title><rect x="33.5914%" y="309" width="3.5046%" height="15" fill="rgb(240,54,50)"/><text x="33.8414%" y="319.50">col..</text></g><g><title>codegen_crate (16,433,067 samples, 5.04%)</title><rect x="32.1097%" y="325" width="5.0397%" height="15" fill="rgb(233,84,52)"/><text x="32.3597%" y="335.50">codege..</text></g><g><title>codegen_module_optimize (31,737,511 samples, 9.73%)</title><rect x="37.1494%" y="325" width="9.7332%" height="15" fill="rgb(207,117,47)"/><text x="37.3994%" y="335.50">codegen_module..</text></g><g><title>LLVM_module_optimize (26,862,563 samples, 8.24%)</title><rect x="38.6445%" y="309" width="8.2382%" height="15" fill="rgb(249,43,39)"/><text x="38.8945%" y="319.50">LLVM_module..</text></g><g><title>LLVM_lto_optimize (17,958,015 samples, 5.51%)</title><rect x="47.9051%" y="309" width="5.5073%" height="15" fill="rgb(209,38,44)"/><text x="48.1551%" y="319.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (36,223,025 samples, 11.11%)</title><rect x="53.4125%" y="309" width="11.1088%" height="15" fill="rgb(236,212,23)"/><text x="53.6625%" y="319.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (35,711,470 samples, 10.95%)</title><rect x="53.5693%" y="293" width="10.9520%" height="15" fill="rgb(242,79,21)"/><text x="53.8193%" y="303.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (2,480,161 samples, 0.76%)</title><rect x="64.5213%" y="309" width="0.7606%" height="15" fill="rgb(211,96,35)"/><text x="64.7713%" y="319.50"></text></g><g><title>codegen_module_perform_lto (60,201,273 samples, 18.46%)</title><rect x="46.8826%" y="325" width="18.4625%" height="15" fill="rgb(253,215,40)"/><text x="47.1326%" y="335.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (15,108,923 samples, 4.63%)</title><rect x="75.1971%" y="277" width="4.6336%" height="15" fill="rgb(211,81,21)"/><text x="75.4471%" y="287.50">metad..</text></g><g><title>metadata_register_crate (14,083,589 samples, 4.32%)</title><rect x="75.5116%" y="261" width="4.3191%" height="15" fill="rgb(208,190,38)"/><text x="75.7616%" y="271.50">metad..</text></g><g><title>metadata_register_crate (11,821,392 samples, 3.63%)</title><rect x="76.2053%" y="245" width="3.6254%" height="15" fill="rgb(235,213,38)"/><text x="76.4553%" y="255.50">meta..</text></g><g><title>macro_expand_crate (46,873,854 samples, 14.38%)</title><rect x="65.4831%" y="309" width="14.3752%" height="15" fill="rgb(237,122,38)"/><text x="65.7331%" y="319.50">macro_expand_crate</text></g><g><title>expand_crate (46,858,354 samples, 14.37%)</title><rect x="65.4879%" y="293" width="14.3705%" height="15" fill="rgb(244,218,35)"/><text x="65.7379%" y="303.50">expand_crate</text></g><g><title>late_resolve_crate (619,318 samples, 0.19%)</title><rect x="79.9346%" y="293" width="0.1899%" height="15" fill="rgb(240,68,47)"/><text x="80.1846%" y="303.50"></text></g><g><title>configure_and_expand (48,248,450 samples, 14.80%)</title><rect x="65.3451%" y="325" width="14.7968%" height="15" fill="rgb(210,16,53)"/><text x="65.5951%" y="335.50">configure_and_expand</text></g><g><title>resolve_crate (862,740 samples, 0.26%)</title><rect x="79.8773%" y="309" width="0.2646%" height="15" fill="rgb(235,124,12)"/><text x="80.1273%" y="319.50"></text></g><g><title>free_global_ctxt (4,056,169 samples, 1.24%)</title><rect x="80.2239%" y="325" width="1.2439%" height="15" fill="rgb(224,169,11)"/><text x="80.4739%" y="335.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (358,197 samples, 0.11%)</title><rect x="82.0243%" y="293" width="0.1099%" height="15" fill="rgb(250,166,2)"/><text x="82.2743%" y="303.50"></text></g><g><title>optimized_mir (923,370 samples, 0.28%)</title><rect x="81.8565%" y="309" width="0.2832%" height="15" fill="rgb(242,216,29)"/><text x="82.1065%" y="319.50"></text></g><g><title>generate_crate_metadata (2,222,187 samples, 0.68%)</title><rect x="81.4679%" y="325" width="0.6815%" height="15" fill="rgb(230,116,27)"/><text x="81.7179%" y="335.50"></text></g><g><title>hir_lowering (1,031,923 samples, 0.32%)</title><rect x="82.1494%" y="325" width="0.3165%" height="15" fill="rgb(228,99,48)"/><text x="82.3994%" y="335.50"></text></g><g><title>finish_ongoing_codegen (54,300,003 samples, 16.65%)</title><rect x="82.4705%" y="309" width="16.6527%" height="15" fill="rgb(253,11,6)"/><text x="82.7205%" y="319.50">finish_ongoing_codegen</text></g><g><title>link_crate (874,991 samples, 0.27%)</title><rect x="99.1232%" y="309" width="0.2683%" height="15" fill="rgb(247,143,39)"/><text x="99.3732%" y="319.50"></text></g><g><title>link_binary (859,530 samples, 0.26%)</title><rect x="99.1279%" y="293" width="0.2636%" height="15" fill="rgb(236,97,10)"/><text x="99.3779%" y="303.50"></text></g><g><title>link_rlib (582,707 samples, 0.18%)</title><rect x="99.2128%" y="277" width="0.1787%" height="15" fill="rgb(233,208,19)"/><text x="99.4628%" y="287.50"></text></g><g><title>link (55,199,814 samples, 16.93%)</title><rect x="82.4658%" y="325" width="16.9286%" height="15" fill="rgb(216,164,2)"/><text x="82.7158%" y="335.50">link</text></g><g><title>parse_crate (463,936 samples, 0.14%)</title><rect x="99.3944%" y="325" width="0.1423%" height="15" fill="rgb(220,129,5)"/><text x="99.6444%" y="335.50"></text></g><g><title>self_profile_alloc_query_strings (890,080 samples, 0.27%)</title><rect x="99.6003%" y="325" width="0.2730%" height="15" fill="rgb(242,17,10)"/><text x="99.8503%" y="335.50"></text></g><g><title>all (326,074,068 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (326,074,068 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="351.50">rustc</text></g><g><title>write_crate_metadata (328,094 samples, 0.10%)</title><rect x="99.8994%" y="325" width="0.1006%" height="15" fill="rgb(233,223,10)"/><text x="100.1494%" y="335.50"></text></g></svg></svg>