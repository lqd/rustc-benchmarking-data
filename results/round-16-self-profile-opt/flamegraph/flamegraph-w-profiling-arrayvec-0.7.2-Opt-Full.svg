<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (59,892,417 samples, 12.54%)</title><rect x="0.1311%" y="181" width="12.5428%" height="15" fill="rgb(227,0,7)"/><text x="0.3811%" y="191.50">LLVM_passes</text></g><g><title>mir_promoted (2,317,378 samples, 0.49%)</title><rect x="18.8300%" y="117" width="0.4853%" height="15" fill="rgb(217,0,24)"/><text x="19.0800%" y="127.50"></text></g><g><title>mir_const_qualif_const_arg (1,944,704 samples, 0.41%)</title><rect x="18.9081%" y="101" width="0.4073%" height="15" fill="rgb(221,193,54)"/><text x="19.1581%" y="111.50"></text></g><g><title>mir_const (1,622,535 samples, 0.34%)</title><rect x="18.9756%" y="85" width="0.3398%" height="15" fill="rgb(248,212,6)"/><text x="19.2256%" y="95.50"></text></g><g><title>unsafety_check_result_for_const_arg (1,099,630 samples, 0.23%)</title><rect x="19.0851%" y="69" width="0.2303%" height="15" fill="rgb(208,68,35)"/><text x="19.3351%" y="79.50"></text></g><g><title>mir_built (949,729 samples, 0.20%)</title><rect x="19.1165%" y="53" width="0.1989%" height="15" fill="rgb(232,128,0)"/><text x="19.3665%" y="63.50"></text></g><g><title>mir_borrowck_const_arg (5,740,044 samples, 1.20%)</title><rect x="18.1170%" y="133" width="1.2021%" height="15" fill="rgb(207,160,47)"/><text x="18.3670%" y="143.50"></text></g><g><title>param_env (650,664 samples, 0.14%)</title><rect x="20.0521%" y="101" width="0.1363%" height="15" fill="rgb(228,23,34)"/><text x="20.3021%" y="111.50"></text></g><g><title>codegen_fn_attrs (650,729 samples, 0.14%)</title><rect x="20.4055%" y="85" width="0.1363%" height="15" fill="rgb(218,30,26)"/><text x="20.6555%" y="95.50"></text></g><g><title>needs_drop_raw (1,612,141 samples, 0.34%)</title><rect x="21.7201%" y="69" width="0.3376%" height="15" fill="rgb(220,122,19)"/><text x="21.9701%" y="79.50"></text></g><g><title>is_copy_raw (1,270,488 samples, 0.27%)</title><rect x="21.7916%" y="53" width="0.2661%" height="15" fill="rgb(250,228,42)"/><text x="22.0416%" y="63.50"></text></g><g><title>evaluate_obligation (1,071,233 samples, 0.22%)</title><rect x="21.8333%" y="37" width="0.2243%" height="15" fill="rgb(240,193,28)"/><text x="22.0833%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (804,237 samples, 0.17%)</title><rect x="22.1999%" y="53" width="0.1684%" height="15" fill="rgb(216,20,37)"/><text x="22.4499%" y="63.50"></text></g><g><title>resolve_instance (1,957,802 samples, 0.41%)</title><rect x="22.0635%" y="69" width="0.4100%" height="15" fill="rgb(206,188,39)"/><text x="22.3135%" y="79.50"></text></g><g><title>thir_body (2,190,105 samples, 0.46%)</title><rect x="22.4852%" y="69" width="0.4587%" height="15" fill="rgb(217,207,13)"/><text x="22.7352%" y="79.50"></text></g><g><title>mir_const (15,584,767 samples, 3.26%)</title><rect x="19.6910%" y="117" width="3.2638%" height="15" fill="rgb(231,73,38)"/><text x="19.9410%" y="127.50">mir..</text></g><g><title>unsafety_check_result (13,209,887 samples, 2.77%)</title><rect x="20.1883%" y="101" width="2.7665%" height="15" fill="rgb(225,20,46)"/><text x="20.4383%" y="111.50">un..</text></g><g><title>mir_built (11,522,182 samples, 2.41%)</title><rect x="20.5418%" y="85" width="2.4130%" height="15" fill="rgb(210,31,41)"/><text x="20.7918%" y="95.50">mi..</text></g><g><title>mir_const (987,024 samples, 0.21%)</title><rect x="23.0587%" y="101" width="0.2067%" height="15" fill="rgb(221,200,47)"/><text x="23.3087%" y="111.50"></text></g><g><title>unsafety_check_result (761,592 samples, 0.16%)</title><rect x="23.1059%" y="85" width="0.1595%" height="15" fill="rgb(226,26,5)"/><text x="23.3559%" y="95.50"></text></g><g><title>mir_built (680,249 samples, 0.14%)</title><rect x="23.1230%" y="69" width="0.1425%" height="15" fill="rgb(249,33,26)"/><text x="23.3730%" y="79.50"></text></g><g><title>mir_const_qualif (1,658,711 samples, 0.35%)</title><rect x="22.9548%" y="117" width="0.3474%" height="15" fill="rgb(235,183,28)"/><text x="23.2048%" y="127.50"></text></g><g><title>mir_promoted (19,019,340 samples, 3.98%)</title><rect x="19.3191%" y="133" width="3.9831%" height="15" fill="rgb(221,5,38)"/><text x="19.5691%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (745,784 samples, 0.16%)</title><rect x="23.3030%" y="133" width="0.1562%" height="15" fill="rgb(247,18,42)"/><text x="23.5530%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (980,664 samples, 0.21%)</title><rect x="23.4592%" y="133" width="0.2054%" height="15" fill="rgb(241,131,45)"/><text x="23.7092%" y="143.50"></text></g><g><title>normalize_projection_ty (532,606 samples, 0.11%)</title><rect x="23.5530%" y="117" width="0.1115%" height="15" fill="rgb(249,31,29)"/><text x="23.8030%" y="127.50"></text></g><g><title>type_op_normalize_ty (515,294 samples, 0.11%)</title><rect x="23.6989%" y="133" width="0.1079%" height="15" fill="rgb(225,111,53)"/><text x="23.9489%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,843,116 samples, 0.80%)</title><rect x="23.8068%" y="133" width="0.8048%" height="15" fill="rgb(238,160,17)"/><text x="24.0568%" y="143.50"></text></g><g><title>MIR_borrow_checking (56,520,261 samples, 11.84%)</title><rect x="12.7764%" y="165" width="11.8366%" height="15" fill="rgb(214,148,48)"/><text x="13.0264%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (56,061,960 samples, 11.74%)</title><rect x="12.8724%" y="149" width="11.7407%" height="15" fill="rgb(232,36,49)"/><text x="13.1224%" y="159.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (839,616 samples, 0.18%)</title><rect x="24.8068%" y="133" width="0.1758%" height="15" fill="rgb(209,103,24)"/><text x="25.0568%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,454,505 samples, 0.30%)</title><rect x="24.6813%" y="149" width="0.3046%" height="15" fill="rgb(229,88,8)"/><text x="24.9313%" y="159.50"></text></g><g><title>MIR_effect_checking (1,807,029 samples, 0.38%)</title><rect x="24.6131%" y="165" width="0.3784%" height="15" fill="rgb(213,181,19)"/><text x="24.8631%" y="175.50"></text></g><g><title>should_inherit_track_caller (515,777 samples, 0.11%)</title><rect x="25.1933%" y="117" width="0.1080%" height="15" fill="rgb(254,191,54)"/><text x="25.4433%" y="127.50"></text></g><g><title>codegen_fn_attrs (722,580 samples, 0.15%)</title><rect x="25.1520%" y="133" width="0.1513%" height="15" fill="rgb(241,83,37)"/><text x="25.4020%" y="143.50"></text></g><g><title>check_mod_attrs (1,120,393 samples, 0.23%)</title><rect x="25.0687%" y="149" width="0.2346%" height="15" fill="rgb(233,36,39)"/><text x="25.3187%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (787,698 samples, 0.16%)</title><rect x="25.3893%" y="149" width="0.1650%" height="15" fill="rgb(226,3,54)"/><text x="25.6393%" y="159.50"></text></g><g><title>misc_checking_1 (2,411,086 samples, 0.50%)</title><rect x="25.0637%" y="165" width="0.5049%" height="15" fill="rgb(245,192,40)"/><text x="25.3137%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (941,140 samples, 0.20%)</title><rect x="25.5690%" y="149" width="0.1971%" height="15" fill="rgb(238,167,29)"/><text x="25.8190%" y="159.50"></text></g><g><title>check_mod_liveness (748,468 samples, 0.16%)</title><rect x="25.6094%" y="133" width="0.1567%" height="15" fill="rgb(232,182,51)"/><text x="25.8594%" y="143.50"></text></g><g><title>misc_checking_2 (1,895,240 samples, 0.40%)</title><rect x="25.5687%" y="165" width="0.3969%" height="15" fill="rgb(231,60,39)"/><text x="25.8187%" y="175.50"></text></g><g><title>match_checking (952,360 samples, 0.20%)</title><rect x="25.7661%" y="149" width="0.1994%" height="15" fill="rgb(208,69,12)"/><text x="26.0161%" y="159.50"></text></g><g><title>check_match (837,657 samples, 0.18%)</title><rect x="25.7902%" y="133" width="0.1754%" height="15" fill="rgb(235,93,37)"/><text x="26.0402%" y="143.50"></text></g><g><title>death_checking (821,538 samples, 0.17%)</title><rect x="26.0618%" y="149" width="0.1720%" height="15" fill="rgb(213,116,39)"/><text x="26.3118%" y="159.50"></text></g><g><title>param_env (664,688 samples, 0.14%)</title><rect x="26.4999%" y="117" width="0.1392%" height="15" fill="rgb(222,207,29)"/><text x="26.7499%" y="127.50"></text></g><g><title>crate_lints (3,055,252 samples, 0.64%)</title><rect x="26.2342%" y="133" width="0.6398%" height="15" fill="rgb(206,96,30)"/><text x="26.4842%" y="143.50"></text></g><g><title>type_of (1,115,331 samples, 0.23%)</title><rect x="26.6405%" y="117" width="0.2336%" height="15" fill="rgb(218,138,4)"/><text x="26.8905%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (885,689 samples, 0.19%)</title><rect x="26.6886%" y="101" width="0.1855%" height="15" fill="rgb(250,191,14)"/><text x="26.9386%" y="111.50"></text></g><g><title>lint_checking (3,836,241 samples, 0.80%)</title><rect x="26.2338%" y="149" width="0.8034%" height="15" fill="rgb(239,60,40)"/><text x="26.4838%" y="159.50"></text></g><g><title>module_lints (779,199 samples, 0.16%)</title><rect x="26.8740%" y="133" width="0.1632%" height="15" fill="rgb(206,27,48)"/><text x="27.1240%" y="143.50"></text></g><g><title>lint_mod (773,209 samples, 0.16%)</title><rect x="26.8753%" y="117" width="0.1619%" height="15" fill="rgb(225,35,8)"/><text x="27.1253%" y="127.50"></text></g><g><title>privacy_access_levels (600,437 samples, 0.13%)</title><rect x="27.0372%" y="149" width="0.1257%" height="15" fill="rgb(250,213,24)"/><text x="27.2872%" y="159.50"></text></g><g><title>privacy_checking_modules (1,630,627 samples, 0.34%)</title><rect x="27.1630%" y="149" width="0.3415%" height="15" fill="rgb(247,123,22)"/><text x="27.4130%" y="159.50"></text></g><g><title>check_mod_privacy (1,625,977 samples, 0.34%)</title><rect x="27.1639%" y="133" width="0.3405%" height="15" fill="rgb(231,138,38)"/><text x="27.4139%" y="143.50"></text></g><g><title>misc_checking_3 (7,369,899 samples, 1.54%)</title><rect x="25.9656%" y="165" width="1.5434%" height="15" fill="rgb(231,145,46)"/><text x="26.2156%" y="175.50"></text></g><g><title>impl_parent (3,560,146 samples, 0.75%)</title><rect x="29.0999%" y="101" width="0.7456%" height="15" fill="rgb(251,118,11)"/><text x="29.3499%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,909,655 samples, 0.40%)</title><rect x="29.4455%" y="85" width="0.3999%" height="15" fill="rgb(217,147,25)"/><text x="29.6955%" y="95.50"></text></g><g><title>impl_trait_ref (7,151,589 samples, 1.50%)</title><rect x="29.8459%" y="101" width="1.4977%" height="15" fill="rgb(247,81,37)"/><text x="30.0959%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,538,821 samples, 1.16%)</title><rect x="30.1837%" y="85" width="1.1600%" height="15" fill="rgb(209,12,38)"/><text x="30.4337%" y="95.50"></text></g><g><title>trait_impls_of (1,408,174 samples, 0.29%)</title><rect x="31.4339%" y="101" width="0.2949%" height="15" fill="rgb(227,1,9)"/><text x="31.6839%" y="111.50"></text></g><g><title>coherent_trait (19,758,051 samples, 4.14%)</title><rect x="27.5969%" y="133" width="4.1378%" height="15" fill="rgb(248,47,43)"/><text x="27.8469%" y="143.50">coher..</text></g><g><title>specialization_graph_of (19,057,974 samples, 3.99%)</title><rect x="27.7435%" y="117" width="3.9912%" height="15" fill="rgb(221,10,30)"/><text x="27.9935%" y="127.50">spec..</text></g><g><title>coherence_checking (19,898,091 samples, 4.17%)</title><rect x="27.5901%" y="149" width="4.1671%" height="15" fill="rgb(210,229,1)"/><text x="27.8401%" y="159.50">coher..</text></g><g><title>associated_item (665,501 samples, 0.14%)</title><rect x="40.2726%" y="85" width="0.1394%" height="15" fill="rgb(222,148,37)"/><text x="40.5226%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (520,830 samples, 0.11%)</title><rect x="40.3029%" y="69" width="0.1091%" height="15" fill="rgb(234,67,33)"/><text x="40.5529%" y="79.50"></text></g><g><title>associated_items (980,591 samples, 0.21%)</title><rect x="40.2157%" y="101" width="0.2054%" height="15" fill="rgb(247,98,35)"/><text x="40.4657%" y="111.50"></text></g><g><title>dropck_outlives (669,639 samples, 0.14%)</title><rect x="40.4454%" y="101" width="0.1402%" height="15" fill="rgb(247,138,52)"/><text x="40.6954%" y="111.50"></text></g><g><title>evaluate_obligation (4,123,932 samples, 0.86%)</title><rect x="40.5856%" y="101" width="0.8636%" height="15" fill="rgb(213,79,30)"/><text x="40.8356%" y="111.50"></text></g><g><title>method_autoderef_steps (1,122,381 samples, 0.24%)</title><rect x="41.6730%" y="101" width="0.2351%" height="15" fill="rgb(246,177,23)"/><text x="41.9230%" y="111.50"></text></g><g><title>opt_const_param_of (2,453,228 samples, 0.51%)</title><rect x="41.9081%" y="101" width="0.5138%" height="15" fill="rgb(230,62,27)"/><text x="42.1581%" y="111.50"></text></g><g><title>typeck (2,348,975 samples, 0.49%)</title><rect x="41.9299%" y="85" width="0.4919%" height="15" fill="rgb(216,154,8)"/><text x="42.1799%" y="95.50"></text></g><g><title>predicates_of (503,102 samples, 0.11%)</title><rect x="42.4675%" y="101" width="0.1054%" height="15" fill="rgb(244,35,45)"/><text x="42.7175%" y="111.50"></text></g><g><title>typeck (6,282,246 samples, 1.32%)</title><rect x="42.6094%" y="101" width="1.3156%" height="15" fill="rgb(251,115,12)"/><text x="42.8594%" y="111.50"></text></g><g><title>param_env (915,668 samples, 0.19%)</title><rect x="44.3528%" y="85" width="0.1918%" height="15" fill="rgb(240,54,50)"/><text x="44.6028%" y="95.50"></text></g><g><title>typeck_const_arg (3,319,868 samples, 0.70%)</title><rect x="43.9251%" y="101" width="0.6953%" height="15" fill="rgb(233,84,52)"/><text x="44.1751%" y="111.50"></text></g><g><title>item_bodies_checking (61,452,552 samples, 12.87%)</title><rect x="31.7734%" y="149" width="12.8696%" height="15" fill="rgb(207,117,47)"/><text x="32.0234%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (61,450,172 samples, 12.87%)</title><rect x="31.7739%" y="133" width="12.8691%" height="15" fill="rgb(249,43,39)"/><text x="32.0239%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (61,123,691 samples, 12.80%)</title><rect x="31.8423%" y="117" width="12.8007%" height="15" fill="rgb(209,38,44)"/><text x="32.0923%" y="127.50">typeck</text></g><g><title>item_types_checking (3,982,013 samples, 0.83%)</title><rect x="44.6430%" y="149" width="0.8339%" height="15" fill="rgb(236,212,23)"/><text x="44.8930%" y="159.50"></text></g><g><title>check_mod_item_types (3,975,382 samples, 0.83%)</title><rect x="44.6443%" y="133" width="0.8325%" height="15" fill="rgb(242,79,21)"/><text x="44.8943%" y="143.50"></text></g><g><title>typeck (483,645 samples, 0.10%)</title><rect x="45.3756%" y="117" width="0.1013%" height="15" fill="rgb(211,96,35)"/><text x="45.6256%" y="127.50"></text></g><g><title>fn_sig (953,766 samples, 0.20%)</title><rect x="45.6027%" y="117" width="0.1997%" height="15" fill="rgb(253,215,40)"/><text x="45.8527%" y="127.50"></text></g><g><title>generics_of (813,950 samples, 0.17%)</title><rect x="45.8024%" y="117" width="0.1705%" height="15" fill="rgb(211,81,21)"/><text x="46.0524%" y="127.50"></text></g><g><title>explicit_predicates_of (815,758 samples, 0.17%)</title><rect x="46.0739%" y="85" width="0.1708%" height="15" fill="rgb(208,190,38)"/><text x="46.3239%" y="95.50"></text></g><g><title>predicates_of (1,350,712 samples, 0.28%)</title><rect x="46.0131%" y="117" width="0.2829%" height="15" fill="rgb(235,213,38)"/><text x="46.2631%" y="127.50"></text></g><g><title>predicates_defined_on (1,240,041 samples, 0.26%)</title><rect x="46.0363%" y="101" width="0.2597%" height="15" fill="rgb(237,122,38)"/><text x="46.2863%" y="111.50"></text></g><g><title>type_collecting (4,187,624 samples, 0.88%)</title><rect x="45.4777%" y="149" width="0.8770%" height="15" fill="rgb(244,218,35)"/><text x="45.7277%" y="159.50"></text></g><g><title>collect_mod_item_types (4,174,284 samples, 0.87%)</title><rect x="45.4805%" y="133" width="0.8742%" height="15" fill="rgb(240,68,47)"/><text x="45.7305%" y="143.50"></text></g><g><title>evaluate_obligation (806,801 samples, 0.17%)</title><rect x="47.5356%" y="117" width="0.1690%" height="15" fill="rgb(210,16,53)"/><text x="47.7856%" y="127.50"></text></g><g><title>param_env (821,358 samples, 0.17%)</title><rect x="47.8089%" y="117" width="0.1720%" height="15" fill="rgb(235,124,12)"/><text x="48.0589%" y="127.50"></text></g><g><title>region_scope_tree (738,717 samples, 0.15%)</title><rect x="47.9974%" y="117" width="0.1547%" height="15" fill="rgb(224,169,11)"/><text x="48.2474%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,019,062 samples, 1.68%)</title><rect x="46.4786%" y="133" width="1.6794%" height="15" fill="rgb(250,166,2)"/><text x="46.7286%" y="143.50"></text></g><g><title>param_env (544,975 samples, 0.11%)</title><rect x="48.9469%" y="117" width="0.1141%" height="15" fill="rgb(242,216,29)"/><text x="49.1969%" y="127.50"></text></g><g><title>check_item_well_formed (4,795,994 samples, 1.00%)</title><rect x="48.1580%" y="133" width="1.0044%" height="15" fill="rgb(230,116,27)"/><text x="48.4080%" y="143.50"></text></g><g><title>analysis (175,100,902 samples, 36.67%)</title><rect x="12.6739%" y="181" width="36.6701%" height="15" fill="rgb(228,99,48)"/><text x="12.9239%" y="191.50">analysis</text></g><g><title>type_check_crate (104,262,878 samples, 21.84%)</title><rect x="27.5090%" y="165" width="21.8350%" height="15" fill="rgb(253,11,6)"/><text x="27.7590%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,250,082 samples, 2.98%)</title><rect x="46.3597%" y="149" width="2.9843%" height="15" fill="rgb(247,143,39)"/><text x="46.6097%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (867,569 samples, 0.18%)</title><rect x="49.1623%" y="133" width="0.1817%" height="15" fill="rgb(236,97,10)"/><text x="49.4123%" y="143.50"></text></g><g><title>layout_of (757,307 samples, 0.16%)</title><rect x="51.6603%" y="133" width="0.1586%" height="15" fill="rgb(233,208,19)"/><text x="51.9103%" y="143.50"></text></g><g><title>param_env (817,650 samples, 0.17%)</title><rect x="51.8189%" y="133" width="0.1712%" height="15" fill="rgb(216,164,2)"/><text x="52.0689%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,686,225 samples, 0.56%)</title><rect x="51.4475%" y="149" width="0.5626%" height="15" fill="rgb(220,129,5)"/><text x="51.6975%" y="159.50"></text></g><g><title>codegen_module (12,164,970 samples, 2.55%)</title><rect x="49.6113%" y="165" width="2.5476%" height="15" fill="rgb(242,17,10)"/><text x="49.8613%" y="175.50">co..</text></g><g><title>optimized_mir (555,144 samples, 0.12%)</title><rect x="52.4085%" y="117" width="0.1163%" height="15" fill="rgb(242,107,0)"/><text x="52.6585%" y="127.50"></text></g><g><title>resolve_instance (736,058 samples, 0.15%)</title><rect x="52.5248%" y="117" width="0.1541%" height="15" fill="rgb(251,28,31)"/><text x="52.7748%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,057,383 samples, 0.64%)</title><rect x="52.1641%" y="133" width="0.6403%" height="15" fill="rgb(233,223,10)"/><text x="52.4141%" y="143.50"></text></g><g><title>vtable_entries (543,886 samples, 0.11%)</title><rect x="52.6905%" y="117" width="0.1139%" height="15" fill="rgb(215,21,27)"/><text x="52.9405%" y="127.50"></text></g><g><title>monomorphization_collector (3,098,114 samples, 0.65%)</title><rect x="52.1637%" y="149" width="0.6488%" height="15" fill="rgb(232,23,21)"/><text x="52.4137%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (3,712,660 samples, 0.78%)</title><rect x="52.1597%" y="165" width="0.7775%" height="15" fill="rgb(244,5,23)"/><text x="52.4097%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (595,556 samples, 0.12%)</title><rect x="52.8125%" y="149" width="0.1247%" height="15" fill="rgb(226,81,46)"/><text x="53.0625%" y="159.50"></text></g><g><title>codegen_crate (17,207,764 samples, 3.60%)</title><rect x="49.3456%" y="181" width="3.6037%" height="15" fill="rgb(247,70,30)"/><text x="49.5956%" y="191.50">code..</text></g><g><title>codegen_module_optimize (46,601,845 samples, 9.76%)</title><rect x="52.9493%" y="181" width="9.7595%" height="15" fill="rgb(212,68,19)"/><text x="53.1993%" y="191.50">codegen_module..</text></g><g><title>LLVM_module_optimize (41,501,510 samples, 8.69%)</title><rect x="54.0174%" y="165" width="8.6914%" height="15" fill="rgb(240,187,13)"/><text x="54.2674%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (12,371,912 samples, 2.59%)</title><rect x="63.6610%" y="165" width="2.5910%" height="15" fill="rgb(223,113,26)"/><text x="63.9110%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (35,598,488 samples, 7.46%)</title><rect x="66.2520%" y="165" width="7.4551%" height="15" fill="rgb(206,192,2)"/><text x="66.5020%" y="175.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (34,775,258 samples, 7.28%)</title><rect x="66.4244%" y="149" width="7.2827%" height="15" fill="rgb(241,108,4)"/><text x="66.6744%" y="159.50">LLVM_modul..</text></g><g><title>LLVM_thin_lto_import (1,424,375 samples, 0.30%)</title><rect x="73.7071%" y="165" width="0.2983%" height="15" fill="rgb(247,173,49)"/><text x="73.9571%" y="175.50"></text></g><g><title>codegen_module_perform_lto (54,241,358 samples, 11.36%)</title><rect x="62.7088%" y="181" width="11.3594%" height="15" fill="rgb(224,114,35)"/><text x="62.9588%" y="191.50">codegen_module_pe..</text></g><g><title>metadata_register_crate (2,345,055 samples, 0.49%)</title><rect x="80.2753%" y="133" width="0.4911%" height="15" fill="rgb(245,159,27)"/><text x="80.5253%" y="143.50"></text></g><g><title>metadata_register_crate (859,879 samples, 0.18%)</title><rect x="80.5863%" y="117" width="0.1801%" height="15" fill="rgb(245,172,44)"/><text x="80.8363%" y="127.50"></text></g><g><title>macro_expand_crate (32,180,493 samples, 6.74%)</title><rect x="74.1878%" y="165" width="6.7393%" height="15" fill="rgb(236,23,11)"/><text x="74.4378%" y="175.50">macro_exp..</text></g><g><title>expand_crate (32,170,203 samples, 6.74%)</title><rect x="74.1900%" y="149" width="6.7372%" height="15" fill="rgb(205,117,38)"/><text x="74.4400%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (767,638 samples, 0.16%)</title><rect x="80.7664%" y="133" width="0.1608%" height="15" fill="rgb(237,72,25)"/><text x="81.0164%" y="143.50"></text></g><g><title>late_resolve_crate (3,444,447 samples, 0.72%)</title><rect x="80.9791%" y="149" width="0.7213%" height="15" fill="rgb(244,70,9)"/><text x="81.2291%" y="159.50"></text></g><g><title>configure_and_expand (36,642,660 samples, 7.67%)</title><rect x="74.0681%" y="181" width="7.6738%" height="15" fill="rgb(217,125,39)"/><text x="74.3181%" y="191.50">configure_a..</text></g><g><title>resolve_crate (3,840,842 samples, 0.80%)</title><rect x="80.9376%" y="165" width="0.8044%" height="15" fill="rgb(235,36,10)"/><text x="81.1876%" y="175.50"></text></g><g><title>early_lint_checks (600,856 samples, 0.13%)</title><rect x="81.8315%" y="181" width="0.1258%" height="15" fill="rgb(251,123,47)"/><text x="82.0815%" y="191.50"></text></g><g><title>free_global_ctxt (6,430,809 samples, 1.35%)</title><rect x="81.9573%" y="181" width="1.3468%" height="15" fill="rgb(221,13,13)"/><text x="82.2073%" y="191.50"></text></g><g><title>mir_for_ctfe (492,616 samples, 0.10%)</title><rect x="84.2878%" y="165" width="0.1032%" height="15" fill="rgb(238,131,9)"/><text x="84.5378%" y="175.50"></text></g><g><title>layout_of (1,454,788 samples, 0.30%)</title><rect x="85.9098%" y="149" width="0.3047%" height="15" fill="rgb(211,50,8)"/><text x="86.1598%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,859,286 samples, 1.44%)</title><rect x="86.2144%" y="149" width="1.4365%" height="15" fill="rgb(245,182,24)"/><text x="86.4644%" y="159.50"></text></g><g><title>optimized_mir (15,727,265 samples, 3.29%)</title><rect x="84.4097%" y="165" width="3.2936%" height="15" fill="rgb(242,14,37)"/><text x="84.6597%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (21,389,487 samples, 4.48%)</title><rect x="83.3041%" y="181" width="4.4794%" height="15" fill="rgb(246,228,12)"/><text x="83.5541%" y="191.50">gener..</text></g><g><title>hir_lowering (5,794,802 samples, 1.21%)</title><rect x="87.7835%" y="181" width="1.2136%" height="15" fill="rgb(213,55,15)"/><text x="88.0335%" y="191.50"></text></g><g><title>finish_ongoing_codegen (46,075,230 samples, 9.65%)</title><rect x="89.0011%" y="165" width="9.6492%" height="15" fill="rgb(209,9,3)"/><text x="89.2511%" y="175.50">finish_ongoing..</text></g><g><title>link_crate (2,578,898 samples, 0.54%)</title><rect x="98.6503%" y="165" width="0.5401%" height="15" fill="rgb(230,59,30)"/><text x="98.9003%" y="175.50"></text></g><g><title>link_binary (2,514,647 samples, 0.53%)</title><rect x="98.6638%" y="149" width="0.5266%" height="15" fill="rgb(209,121,21)"/><text x="98.9138%" y="159.50"></text></g><g><title>link_rlib (1,838,210 samples, 0.38%)</title><rect x="98.8054%" y="133" width="0.3850%" height="15" fill="rgb(220,109,13)"/><text x="99.0554%" y="143.50"></text></g><g><title>link (48,686,038 samples, 10.20%)</title><rect x="88.9971%" y="181" width="10.1960%" height="15" fill="rgb(232,18,1)"/><text x="89.2471%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,710,688 samples, 0.57%)</title><rect x="99.3192%" y="181" width="0.5677%" height="15" fill="rgb(215,41,42)"/><text x="99.5692%" y="191.50"></text></g><g><title>all (477,502,848 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (477,502,848 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (477,835 samples, 0.10%)</title><rect x="99.8999%" y="181" width="0.1001%" height="15" fill="rgb(205,98,50)"/><text x="100.1499%" y="191.50"></text></g></svg></svg>