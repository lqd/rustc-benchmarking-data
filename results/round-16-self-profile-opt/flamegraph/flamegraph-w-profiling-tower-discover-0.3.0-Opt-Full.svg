<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,887,131 samples, 10.24%)</title><rect x="0.4071%" y="197" width="10.2364%" height="15" fill="rgb(227,0,7)"/><text x="0.6571%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (148,381 samples, 0.14%)</title><rect x="10.5040%" y="181" width="0.1395%" height="15" fill="rgb(217,0,24)"/><text x="10.7540%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (133,611 samples, 0.13%)</title><rect x="10.5179%" y="165" width="0.1256%" height="15" fill="rgb(221,193,54)"/><text x="10.7679%" y="175.50"></text></g><g><title>codegen_fn_attrs (152,681 samples, 0.14%)</title><rect x="15.2937%" y="101" width="0.1436%" height="15" fill="rgb(248,212,6)"/><text x="15.5437%" y="111.50"></text></g><g><title>adt_drop_tys (115,412 samples, 0.11%)</title><rect x="16.2642%" y="69" width="0.1085%" height="15" fill="rgb(208,68,35)"/><text x="16.5142%" y="79.50"></text></g><g><title>is_copy_raw (855,339 samples, 0.80%)</title><rect x="16.3727%" y="69" width="0.8042%" height="15" fill="rgb(232,128,0)"/><text x="16.6227%" y="79.50"></text></g><g><title>evaluate_obligation (765,479 samples, 0.72%)</title><rect x="16.4572%" y="53" width="0.7197%" height="15" fill="rgb(207,160,47)"/><text x="16.7072%" y="63.50"></text></g><g><title>trait_impls_of (141,491 samples, 0.13%)</title><rect x="17.0439%" y="37" width="0.1330%" height="15" fill="rgb(228,23,34)"/><text x="17.2939%" y="47.50"></text></g><g><title>needs_drop_raw (1,069,092 samples, 1.01%)</title><rect x="16.1856%" y="85" width="1.0052%" height="15" fill="rgb(218,30,26)"/><text x="16.4356%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (107,822 samples, 0.10%)</title><rect x="17.2706%" y="69" width="0.1014%" height="15" fill="rgb(220,122,19)"/><text x="17.5206%" y="79.50"></text></g><g><title>impl_parent (181,890 samples, 0.17%)</title><rect x="17.7008%" y="53" width="0.1710%" height="15" fill="rgb(250,228,42)"/><text x="17.9508%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (126,850 samples, 0.12%)</title><rect x="17.7526%" y="37" width="0.1193%" height="15" fill="rgb(240,193,28)"/><text x="18.0026%" y="47.50"></text></g><g><title>specialization_graph_of (971,201 samples, 0.91%)</title><rect x="17.3863%" y="69" width="0.9132%" height="15" fill="rgb(216,20,37)"/><text x="17.6363%" y="79.50"></text></g><g><title>impl_trait_ref (454,766 samples, 0.43%)</title><rect x="17.8719%" y="53" width="0.4276%" height="15" fill="rgb(206,188,39)"/><text x="18.1219%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (399,785 samples, 0.38%)</title><rect x="17.9235%" y="37" width="0.3759%" height="15" fill="rgb(217,207,13)"/><text x="18.1735%" y="47.50"></text></g><g><title>resolve_instance (1,203,034 samples, 1.13%)</title><rect x="17.1908%" y="85" width="1.1311%" height="15" fill="rgb(231,73,38)"/><text x="17.4408%" y="95.50"></text></g><g><title>thir_body (247,711 samples, 0.23%)</title><rect x="18.3304%" y="85" width="0.2329%" height="15" fill="rgb(225,20,46)"/><text x="18.5804%" y="95.50"></text></g><g><title>mir_const (4,044,823 samples, 3.80%)</title><rect x="14.7804%" y="133" width="3.8031%" height="15" fill="rgb(210,31,41)"/><text x="15.0304%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (3,667,709 samples, 3.45%)</title><rect x="15.1349%" y="117" width="3.4485%" height="15" fill="rgb(221,200,47)"/><text x="15.3849%" y="127.50">uns..</text></g><g><title>mir_built (3,346,197 samples, 3.15%)</title><rect x="15.4372%" y="101" width="3.1462%" height="15" fill="rgb(226,26,5)"/><text x="15.6872%" y="111.50">mir..</text></g><g><title>mir_promoted (4,382,175 samples, 4.12%)</title><rect x="14.5251%" y="149" width="4.1203%" height="15" fill="rgb(249,33,26)"/><text x="14.7751%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (348,225 samples, 0.33%)</title><rect x="18.6453%" y="149" width="0.3274%" height="15" fill="rgb(235,183,28)"/><text x="18.8953%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (195,700 samples, 0.18%)</title><rect x="18.9728%" y="149" width="0.1840%" height="15" fill="rgb(221,5,38)"/><text x="19.2228%" y="159.50"></text></g><g><title>type_op_normalize_ty (399,795 samples, 0.38%)</title><rect x="19.2081%" y="149" width="0.3759%" height="15" fill="rgb(247,18,42)"/><text x="19.4581%" y="159.50"></text></g><g><title>normalize_projection_ty (285,324 samples, 0.27%)</title><rect x="19.3158%" y="133" width="0.2683%" height="15" fill="rgb(241,131,45)"/><text x="19.5658%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,203,948 samples, 1.13%)</title><rect x="19.5840%" y="149" width="1.1320%" height="15" fill="rgb(249,31,29)"/><text x="19.8340%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,537,467 samples, 9.91%)</title><rect x="10.8161%" y="181" width="9.9076%" height="15" fill="rgb(225,111,53)"/><text x="11.0661%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (10,498,167 samples, 9.87%)</title><rect x="10.8530%" y="165" width="9.8707%" height="15" fill="rgb(238,160,17)"/><text x="11.1030%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (131,021 samples, 0.12%)</title><rect x="20.7237%" y="181" width="0.1232%" height="15" fill="rgb(214,148,48)"/><text x="20.9737%" y="191.50"></text></g><g><title>hir_module_items (135,032 samples, 0.13%)</title><rect x="20.8469%" y="181" width="0.1270%" height="15" fill="rgb(232,36,49)"/><text x="21.0969%" y="191.50"></text></g><g><title>should_inherit_track_caller (122,921 samples, 0.12%)</title><rect x="21.2424%" y="133" width="0.1156%" height="15" fill="rgb(209,103,24)"/><text x="21.4924%" y="143.50"></text></g><g><title>codegen_fn_attrs (267,504 samples, 0.25%)</title><rect x="21.1271%" y="149" width="0.2515%" height="15" fill="rgb(229,88,8)"/><text x="21.3771%" y="159.50"></text></g><g><title>check_mod_attrs (398,937 samples, 0.38%)</title><rect x="21.0039%" y="165" width="0.3751%" height="15" fill="rgb(213,181,19)"/><text x="21.2539%" y="175.50"></text></g><g><title>lookup_deprecation_entry (114,361 samples, 0.11%)</title><rect x="21.6025%" y="149" width="0.1075%" height="15" fill="rgb(254,191,54)"/><text x="21.8525%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (313,452 samples, 0.29%)</title><rect x="21.4839%" y="165" width="0.2947%" height="15" fill="rgb(241,83,37)"/><text x="21.7339%" y="175.50"></text></g><g><title>misc_checking_1 (909,410 samples, 0.86%)</title><rect x="20.9742%" y="181" width="0.8551%" height="15" fill="rgb(233,36,39)"/><text x="21.2242%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (171,842 samples, 0.16%)</title><rect x="21.8306%" y="165" width="0.1616%" height="15" fill="rgb(226,3,54)"/><text x="22.0806%" y="175.50"></text></g><g><title>check_mod_liveness (126,952 samples, 0.12%)</title><rect x="21.8728%" y="149" width="0.1194%" height="15" fill="rgb(245,192,40)"/><text x="22.1228%" y="159.50"></text></g><g><title>misc_checking_2 (397,714 samples, 0.37%)</title><rect x="21.8293%" y="181" width="0.3739%" height="15" fill="rgb(238,167,29)"/><text x="22.0793%" y="191.50"></text></g><g><title>match_checking (224,472 samples, 0.21%)</title><rect x="21.9922%" y="165" width="0.2111%" height="15" fill="rgb(232,182,51)"/><text x="22.2422%" y="175.50"></text></g><g><title>check_match (211,892 samples, 0.20%)</title><rect x="22.0040%" y="149" width="0.1992%" height="15" fill="rgb(231,60,39)"/><text x="22.2540%" y="159.50"></text></g><g><title>check_private_in_public (145,321 samples, 0.14%)</title><rect x="22.2123%" y="165" width="0.1366%" height="15" fill="rgb(208,69,12)"/><text x="22.4623%" y="175.50"></text></g><g><title>death_checking (268,643 samples, 0.25%)</title><rect x="22.3490%" y="165" width="0.2526%" height="15" fill="rgb(235,93,37)"/><text x="22.5990%" y="175.50"></text></g><g><title>eval_to_const_value_raw (169,652 samples, 0.16%)</title><rect x="23.1297%" y="133" width="0.1595%" height="15" fill="rgb(213,116,39)"/><text x="23.3797%" y="143.50"></text></g><g><title>eval_to_const_value_raw (166,432 samples, 0.16%)</title><rect x="23.1327%" y="117" width="0.1565%" height="15" fill="rgb(222,207,29)"/><text x="23.3827%" y="127.50"></text></g><g><title>eval_to_allocation_raw (159,601 samples, 0.15%)</title><rect x="23.1391%" y="101" width="0.1501%" height="15" fill="rgb(206,96,30)"/><text x="23.3891%" y="111.50"></text></g><g><title>param_env (268,194 samples, 0.25%)</title><rect x="23.2892%" y="133" width="0.2522%" height="15" fill="rgb(218,138,4)"/><text x="23.5392%" y="143.50"></text></g><g><title>predicates_of (133,023 samples, 0.13%)</title><rect x="23.4163%" y="117" width="0.1251%" height="15" fill="rgb(250,191,14)"/><text x="23.6663%" y="127.50"></text></g><g><title>predicates_defined_on (108,343 samples, 0.10%)</title><rect x="23.4395%" y="101" width="0.1019%" height="15" fill="rgb(239,60,40)"/><text x="23.6895%" y="111.50"></text></g><g><title>crate_lints (2,012,462 samples, 1.89%)</title><rect x="22.6030%" y="149" width="1.8922%" height="15" fill="rgb(206,27,48)"/><text x="22.8530%" y="159.50">c..</text></g><g><title>type_of (1,012,751 samples, 0.95%)</title><rect x="23.5430%" y="133" width="0.9522%" height="15" fill="rgb(225,35,8)"/><text x="23.7930%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (778,117 samples, 0.73%)</title><rect x="23.7636%" y="117" width="0.7316%" height="15" fill="rgb(250,213,24)"/><text x="24.0136%" y="127.50"></text></g><g><title>lint_checking (2,171,664 samples, 2.04%)</title><rect x="22.6015%" y="165" width="2.0419%" height="15" fill="rgb(247,123,22)"/><text x="22.8515%" y="175.50">l..</text></g><g><title>module_lints (157,632 samples, 0.15%)</title><rect x="24.4952%" y="149" width="0.1482%" height="15" fill="rgb(231,138,38)"/><text x="24.7452%" y="159.50"></text></g><g><title>lint_mod (153,202 samples, 0.14%)</title><rect x="24.4994%" y="133" width="0.1440%" height="15" fill="rgb(231,145,46)"/><text x="24.7494%" y="143.50"></text></g><g><title>privacy_access_levels (206,282 samples, 0.19%)</title><rect x="24.6434%" y="165" width="0.1940%" height="15" fill="rgb(251,118,11)"/><text x="24.8934%" y="175.50"></text></g><g><title>privacy_checking_modules (523,126 samples, 0.49%)</title><rect x="24.8374%" y="165" width="0.4919%" height="15" fill="rgb(217,147,25)"/><text x="25.0874%" y="175.50"></text></g><g><title>check_mod_privacy (519,206 samples, 0.49%)</title><rect x="24.8410%" y="149" width="0.4882%" height="15" fill="rgb(247,81,37)"/><text x="25.0910%" y="159.50"></text></g><g><title>misc_checking_3 (3,341,347 samples, 3.14%)</title><rect x="22.2032%" y="181" width="3.1416%" height="15" fill="rgb(209,12,38)"/><text x="22.4532%" y="191.50">mis..</text></g><g><title>impl_parent (896,277 samples, 0.84%)</title><rect x="26.7395%" y="117" width="0.8427%" height="15" fill="rgb(227,1,9)"/><text x="26.9895%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (595,775 samples, 0.56%)</title><rect x="27.0220%" y="101" width="0.5602%" height="15" fill="rgb(248,47,43)"/><text x="27.2720%" y="111.50"></text></g><g><title>impl_trait_ref (2,907,103 samples, 2.73%)</title><rect x="27.5822%" y="117" width="2.7333%" height="15" fill="rgb(221,10,30)"/><text x="27.8322%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,603,471 samples, 2.45%)</title><rect x="27.8677%" y="101" width="2.4479%" height="15" fill="rgb(210,229,1)"/><text x="28.1177%" y="111.50">me..</text></g><g><title>coherent_trait (5,576,542 samples, 5.24%)</title><rect x="25.4098%" y="149" width="5.2432%" height="15" fill="rgb(222,148,37)"/><text x="25.6598%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (5,562,671 samples, 5.23%)</title><rect x="25.4229%" y="133" width="5.2302%" height="15" fill="rgb(234,67,33)"/><text x="25.6729%" y="143.50">specia..</text></g><g><title>trait_impls_of (317,032 samples, 0.30%)</title><rect x="30.3550%" y="117" width="0.2981%" height="15" fill="rgb(247,98,35)"/><text x="30.6050%" y="127.50"></text></g><g><title>coherence_checking (5,648,053 samples, 5.31%)</title><rect x="25.3906%" y="165" width="5.3105%" height="15" fill="rgb(247,138,52)"/><text x="25.6406%" y="175.50">coheren..</text></g><g><title>associated_item (135,094 samples, 0.13%)</title><rect x="37.2830%" y="101" width="0.1270%" height="15" fill="rgb(213,79,30)"/><text x="37.5330%" y="111.50"></text></g><g><title>associated_items (210,794 samples, 0.20%)</title><rect x="37.2230%" y="117" width="0.1982%" height="15" fill="rgb(246,177,23)"/><text x="37.4730%" y="127.50"></text></g><g><title>dropck_outlives (323,811 samples, 0.30%)</title><rect x="37.4564%" y="117" width="0.3045%" height="15" fill="rgb(230,62,27)"/><text x="37.7064%" y="127.50"></text></g><g><title>evaluate_obligation (459,616 samples, 0.43%)</title><rect x="37.7609%" y="117" width="0.4321%" height="15" fill="rgb(216,154,8)"/><text x="38.0109%" y="127.50"></text></g><g><title>item_attrs (137,421 samples, 0.13%)</title><rect x="38.4144%" y="117" width="0.1292%" height="15" fill="rgb(244,35,45)"/><text x="38.6644%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (131,991 samples, 0.12%)</title><rect x="38.4195%" y="101" width="0.1241%" height="15" fill="rgb(251,115,12)"/><text x="38.6695%" y="111.50"></text></g><g><title>method_autoderef_steps (419,135 samples, 0.39%)</title><rect x="38.5800%" y="117" width="0.3941%" height="15" fill="rgb(240,54,50)"/><text x="38.8300%" y="127.50"></text></g><g><title>evaluate_obligation (119,592 samples, 0.11%)</title><rect x="38.8616%" y="101" width="0.1124%" height="15" fill="rgb(233,84,52)"/><text x="39.1116%" y="111.50"></text></g><g><title>object_safety_violations (147,762 samples, 0.14%)</title><rect x="38.9741%" y="117" width="0.1389%" height="15" fill="rgb(207,117,47)"/><text x="39.2241%" y="127.50"></text></g><g><title>predicates_of (204,401 samples, 0.19%)</title><rect x="39.1334%" y="117" width="0.1922%" height="15" fill="rgb(249,43,39)"/><text x="39.3834%" y="127.50"></text></g><g><title>predicates_defined_on (145,191 samples, 0.14%)</title><rect x="39.1891%" y="101" width="0.1365%" height="15" fill="rgb(209,38,44)"/><text x="39.4391%" y="111.50"></text></g><g><title>item_bodies_checking (9,306,843 samples, 8.75%)</title><rect x="30.7320%" y="165" width="8.7506%" height="15" fill="rgb(236,212,23)"/><text x="30.9820%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (9,304,703 samples, 8.75%)</title><rect x="30.7340%" y="149" width="8.7486%" height="15" fill="rgb(242,79,21)"/><text x="30.9840%" y="159.50">typeck_item_..</text></g><g><title>typeck (9,275,732 samples, 8.72%)</title><rect x="30.7612%" y="133" width="8.7213%" height="15" fill="rgb(211,96,35)"/><text x="31.0112%" y="143.50">typeck</text></g><g><title>adt_destructor (357,464 samples, 0.34%)</title><rect x="40.6099%" y="133" width="0.3361%" height="15" fill="rgb(253,215,40)"/><text x="40.8599%" y="143.50"></text></g><g><title>coherent_trait (351,504 samples, 0.33%)</title><rect x="40.6155%" y="117" width="0.3305%" height="15" fill="rgb(211,81,21)"/><text x="40.8655%" y="127.50"></text></g><g><title>specialization_graph_of (349,494 samples, 0.33%)</title><rect x="40.6174%" y="101" width="0.3286%" height="15" fill="rgb(208,190,38)"/><text x="40.8674%" y="111.50"></text></g><g><title>impl_trait_ref (178,554 samples, 0.17%)</title><rect x="40.7781%" y="85" width="0.1679%" height="15" fill="rgb(235,213,38)"/><text x="41.0281%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (155,403 samples, 0.15%)</title><rect x="40.7999%" y="69" width="0.1461%" height="15" fill="rgb(237,122,38)"/><text x="41.0499%" y="79.50"></text></g><g><title>evaluate_obligation (266,662 samples, 0.25%)</title><rect x="40.9554%" y="133" width="0.2507%" height="15" fill="rgb(244,218,35)"/><text x="41.2054%" y="143.50"></text></g><g><title>predicates_of (239,662 samples, 0.23%)</title><rect x="40.9808%" y="117" width="0.2253%" height="15" fill="rgb(240,68,47)"/><text x="41.2308%" y="127.50"></text></g><g><title>predicates_defined_on (235,382 samples, 0.22%)</title><rect x="40.9848%" y="101" width="0.2213%" height="15" fill="rgb(210,16,53)"/><text x="41.2348%" y="111.50"></text></g><g><title>item_types_checking (1,983,652 samples, 1.87%)</title><rect x="39.4825%" y="165" width="1.8651%" height="15" fill="rgb(235,124,12)"/><text x="39.7325%" y="175.50">i..</text></g><g><title>check_mod_item_types (1,978,412 samples, 1.86%)</title><rect x="39.4875%" y="149" width="1.8602%" height="15" fill="rgb(224,169,11)"/><text x="39.7375%" y="159.50">c..</text></g><g><title>fn_sig (193,693 samples, 0.18%)</title><rect x="41.5514%" y="133" width="0.1821%" height="15" fill="rgb(250,166,2)"/><text x="41.8014%" y="143.50"></text></g><g><title>generics_of (199,752 samples, 0.19%)</title><rect x="41.7335%" y="133" width="0.1878%" height="15" fill="rgb(242,216,29)"/><text x="41.9835%" y="143.50"></text></g><g><title>lint_levels (122,321 samples, 0.12%)</title><rect x="42.6047%" y="53" width="0.1150%" height="15" fill="rgb(230,116,27)"/><text x="42.8547%" y="63.50"></text></g><g><title>late_bound_vars_map (354,904 samples, 0.33%)</title><rect x="42.3876%" y="85" width="0.3337%" height="15" fill="rgb(228,99,48)"/><text x="42.6376%" y="95.50"></text></g><g><title>resolve_lifetimes (340,664 samples, 0.32%)</title><rect x="42.4010%" y="69" width="0.3203%" height="15" fill="rgb(253,11,6)"/><text x="42.6510%" y="79.50"></text></g><g><title>explicit_predicates_of (732,347 samples, 0.69%)</title><rect x="42.1410%" y="101" width="0.6886%" height="15" fill="rgb(247,143,39)"/><text x="42.3910%" y="111.50"></text></g><g><title>predicates_of (1,150,502 samples, 1.08%)</title><rect x="42.0421%" y="133" width="1.0817%" height="15" fill="rgb(236,97,10)"/><text x="42.2921%" y="143.50"></text></g><g><title>predicates_defined_on (1,109,792 samples, 1.04%)</title><rect x="42.0804%" y="117" width="1.0435%" height="15" fill="rgb(233,208,19)"/><text x="42.3304%" y="127.50"></text></g><g><title>inferred_outlives_of (313,054 samples, 0.29%)</title><rect x="42.8295%" y="101" width="0.2943%" height="15" fill="rgb(216,164,2)"/><text x="43.0795%" y="111.50"></text></g><g><title>inferred_outlives_crate (292,684 samples, 0.28%)</title><rect x="42.8487%" y="85" width="0.2752%" height="15" fill="rgb(220,129,5)"/><text x="43.0987%" y="95.50"></text></g><g><title>type_of (174,631 samples, 0.16%)</title><rect x="42.9597%" y="69" width="0.1642%" height="15" fill="rgb(242,17,10)"/><text x="43.2097%" y="79.50"></text></g><g><title>type_collecting (2,162,153 samples, 2.03%)</title><rect x="41.3505%" y="165" width="2.0329%" height="15" fill="rgb(242,107,0)"/><text x="41.6005%" y="175.50">t..</text></g><g><title>collect_mod_item_types (2,152,663 samples, 2.02%)</title><rect x="41.3594%" y="149" width="2.0240%" height="15" fill="rgb(251,28,31)"/><text x="41.6094%" y="159.50">c..</text></g><g><title>type_of (228,742 samples, 0.22%)</title><rect x="43.1683%" y="133" width="0.2151%" height="15" fill="rgb(233,223,10)"/><text x="43.4183%" y="143.50"></text></g><g><title>evaluate_obligation (785,000 samples, 0.74%)</title><rect x="45.3015%" y="133" width="0.7381%" height="15" fill="rgb(215,21,27)"/><text x="45.5515%" y="143.50"></text></g><g><title>implied_outlives_bounds (275,411 samples, 0.26%)</title><rect x="46.0830%" y="133" width="0.2589%" height="15" fill="rgb(232,23,21)"/><text x="46.3330%" y="143.50"></text></g><g><title>param_env (217,024 samples, 0.20%)</title><rect x="46.3498%" y="133" width="0.2041%" height="15" fill="rgb(244,5,23)"/><text x="46.5998%" y="143.50"></text></g><g><title>region_scope_tree (113,970 samples, 0.11%)</title><rect x="46.6224%" y="133" width="0.1072%" height="15" fill="rgb(226,81,46)"/><text x="46.8724%" y="143.50"></text></g><g><title>trait_impls_of (272,042 samples, 0.26%)</title><rect x="46.7295%" y="133" width="0.2558%" height="15" fill="rgb(247,70,30)"/><text x="46.9795%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,694,349 samples, 3.47%)</title><rect x="43.5141%" y="149" width="3.4735%" height="15" fill="rgb(212,68,19)"/><text x="43.7641%" y="159.50">che..</text></g><g><title>evaluate_obligation (131,731 samples, 0.12%)</title><rect x="48.4168%" y="133" width="0.1239%" height="15" fill="rgb(240,187,13)"/><text x="48.6668%" y="143.50"></text></g><g><title>param_env (357,355 samples, 0.34%)</title><rect x="48.6661%" y="133" width="0.3360%" height="15" fill="rgb(223,113,26)"/><text x="48.9161%" y="143.50"></text></g><g><title>trait_impls_of (116,231 samples, 0.11%)</title><rect x="49.1228%" y="133" width="0.1093%" height="15" fill="rgb(206,192,2)"/><text x="49.3728%" y="143.50"></text></g><g><title>check_item_well_formed (2,468,996 samples, 2.32%)</title><rect x="46.9876%" y="149" width="2.3214%" height="15" fill="rgb(241,108,4)"/><text x="47.2376%" y="159.50">c..</text></g><g><title>analysis (41,388,608 samples, 38.91%)</title><rect x="10.6435%" y="197" width="38.9148%" height="15" fill="rgb(247,173,49)"/><text x="10.8935%" y="207.50">analysis</text></g><g><title>type_check_crate (25,752,725 samples, 24.21%)</title><rect x="25.3449%" y="181" width="24.2135%" height="15" fill="rgb(224,114,35)"/><text x="25.5949%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,565,882 samples, 6.17%)</title><rect x="43.3849%" y="165" width="6.1734%" height="15" fill="rgb(245,159,27)"/><text x="43.6349%" y="175.50">wf_check..</text></g><g><title>check_trait_item_well_formed (265,163 samples, 0.25%)</title><rect x="49.3090%" y="149" width="0.2493%" height="15" fill="rgb(245,172,44)"/><text x="49.5590%" y="159.50"></text></g><g><title>fn_abi_of_instance (216,573 samples, 0.20%)</title><rect x="50.3765%" y="165" width="0.2036%" height="15" fill="rgb(236,23,11)"/><text x="50.6265%" y="175.50"></text></g><g><title>codegen_module (638,067 samples, 0.60%)</title><rect x="49.9893%" y="181" width="0.5999%" height="15" fill="rgb(205,117,38)"/><text x="50.2393%" y="191.50"></text></g><g><title>monomorphization_collector (129,382 samples, 0.12%)</title><rect x="50.6181%" y="165" width="0.1216%" height="15" fill="rgb(237,72,25)"/><text x="50.8681%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (195,262 samples, 0.18%)</title><rect x="50.5897%" y="181" width="0.1836%" height="15" fill="rgb(244,70,9)"/><text x="50.8397%" y="191.50"></text></g><g><title>codegen_crate (1,364,065 samples, 1.28%)</title><rect x="49.5650%" y="197" width="1.2825%" height="15" fill="rgb(217,125,39)"/><text x="49.8150%" y="207.50"></text></g><g><title>codegen_module_optimize (4,715,572 samples, 4.43%)</title><rect x="50.8475%" y="197" width="4.4337%" height="15" fill="rgb(235,36,10)"/><text x="51.0975%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (4,084,015 samples, 3.84%)</title><rect x="51.4413%" y="181" width="3.8399%" height="15" fill="rgb(251,123,47)"/><text x="51.6913%" y="191.50">LLVM..</text></g><g><title>LLVM_lto_optimize (1,525,737 samples, 1.43%)</title><rect x="55.6708%" y="181" width="1.4345%" height="15" fill="rgb(221,13,13)"/><text x="55.9208%" y="191.50"></text></g><g><title>LLVM_module_codegen (3,750,092 samples, 3.53%)</title><rect x="57.1053%" y="181" width="3.5259%" height="15" fill="rgb(238,131,9)"/><text x="57.3553%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (3,663,181 samples, 3.44%)</title><rect x="57.1870%" y="165" width="3.4442%" height="15" fill="rgb(211,50,8)"/><text x="57.4370%" y="175.50">LLV..</text></g><g><title>codegen_module_perform_lto (5,729,994 samples, 5.39%)</title><rect x="55.2812%" y="197" width="5.3875%" height="15" fill="rgb(245,182,24)"/><text x="55.5312%" y="207.50">codegen..</text></g><g><title>AST_validation (142,241 samples, 0.13%)</title><rect x="60.8008%" y="181" width="0.1337%" height="15" fill="rgb(242,14,37)"/><text x="61.0508%" y="191.50"></text></g><g><title>metadata_load_macro (130,240 samples, 0.12%)</title><rect x="75.1575%" y="149" width="0.1225%" height="15" fill="rgb(246,228,12)"/><text x="75.4075%" y="159.50"></text></g><g><title>metadata_register_crate (5,161,807 samples, 4.85%)</title><rect x="75.2800%" y="149" width="4.8533%" height="15" fill="rgb(213,55,15)"/><text x="75.5300%" y="159.50">metada..</text></g><g><title>metadata_register_crate (3,890,573 samples, 3.66%)</title><rect x="76.4752%" y="133" width="3.6580%" height="15" fill="rgb(209,9,3)"/><text x="76.7252%" y="143.50">meta..</text></g><g><title>macro_expand_crate (20,360,296 samples, 19.14%)</title><rect x="61.0310%" y="181" width="19.1434%" height="15" fill="rgb(230,59,30)"/><text x="61.2810%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (20,343,505 samples, 19.13%)</title><rect x="61.0468%" y="165" width="19.1276%" height="15" fill="rgb(209,121,21)"/><text x="61.2968%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (1,407,435 samples, 1.32%)</title><rect x="80.3732%" y="165" width="1.3233%" height="15" fill="rgb(220,109,13)"/><text x="80.6232%" y="175.50"></text></g><g><title>configure_and_expand (22,437,109 samples, 21.10%)</title><rect x="60.6687%" y="197" width="21.0960%" height="15" fill="rgb(232,18,1)"/><text x="60.9187%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,596,378 samples, 1.50%)</title><rect x="80.2638%" y="181" width="1.5010%" height="15" fill="rgb(215,41,42)"/><text x="80.5138%" y="191.50"></text></g><g><title>early_lint_checks (288,993 samples, 0.27%)</title><rect x="81.8749%" y="197" width="0.2717%" height="15" fill="rgb(224,123,36)"/><text x="82.1249%" y="207.50"></text></g><g><title>free_global_ctxt (2,908,741 samples, 2.73%)</title><rect x="82.1466%" y="197" width="2.7349%" height="15" fill="rgb(240,125,3)"/><text x="82.3966%" y="207.50">fr..</text></g><g><title>exported_symbols (148,672 samples, 0.14%)</title><rect x="86.0362%" y="181" width="0.1398%" height="15" fill="rgb(205,98,50)"/><text x="86.2862%" y="191.50"></text></g><g><title>layout_of (147,572 samples, 0.14%)</title><rect x="87.2463%" y="149" width="0.1388%" height="15" fill="rgb(205,185,37)"/><text x="87.4963%" y="159.50"></text></g><g><title>layout_of (504,296 samples, 0.47%)</title><rect x="87.0462%" y="165" width="0.4742%" height="15" fill="rgb(238,207,15)"/><text x="87.2962%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (121,761 samples, 0.11%)</title><rect x="87.4059%" y="149" width="0.1145%" height="15" fill="rgb(213,199,42)"/><text x="87.6559%" y="159.50"></text></g><g><title>is_copy_raw (243,054 samples, 0.23%)</title><rect x="88.4546%" y="133" width="0.2285%" height="15" fill="rgb(235,201,11)"/><text x="88.7046%" y="143.50"></text></g><g><title>evaluate_obligation (208,602 samples, 0.20%)</title><rect x="88.4870%" y="117" width="0.1961%" height="15" fill="rgb(207,46,11)"/><text x="88.7370%" y="127.50"></text></g><g><title>needs_drop_raw (285,504 samples, 0.27%)</title><rect x="88.4175%" y="149" width="0.2684%" height="15" fill="rgb(241,35,35)"/><text x="88.6675%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,352,264 samples, 1.27%)</title><rect x="87.5204%" y="165" width="1.2714%" height="15" fill="rgb(243,32,47)"/><text x="87.7704%" y="175.50"></text></g><g><title>optimized_mir (2,731,660 samples, 2.57%)</title><rect x="86.2362%" y="181" width="2.5684%" height="15" fill="rgb(247,202,23)"/><text x="86.4862%" y="191.50">op..</text></g><g><title>generate_crate_metadata (4,209,387 samples, 3.96%)</title><rect x="84.8815%" y="197" width="3.9578%" height="15" fill="rgb(219,102,11)"/><text x="85.1315%" y="207.50">gene..</text></g><g><title>hir_lowering (1,590,598 samples, 1.50%)</title><rect x="88.8393%" y="197" width="1.4955%" height="15" fill="rgb(243,110,44)"/><text x="89.0893%" y="207.50"></text></g><g><title>finish_ongoing_codegen (7,716,175 samples, 7.25%)</title><rect x="90.3570%" y="181" width="7.2550%" height="15" fill="rgb(222,74,54)"/><text x="90.6070%" y="191.50">finish_ong..</text></g><g><title>link_crate (785,649 samples, 0.74%)</title><rect x="97.6120%" y="181" width="0.7387%" height="15" fill="rgb(216,99,12)"/><text x="97.8620%" y="191.50"></text></g><g><title>link_binary (763,329 samples, 0.72%)</title><rect x="97.6330%" y="165" width="0.7177%" height="15" fill="rgb(226,22,26)"/><text x="97.8830%" y="175.50"></text></g><g><title>link_rlib (481,745 samples, 0.45%)</title><rect x="97.8977%" y="149" width="0.4530%" height="15" fill="rgb(217,163,10)"/><text x="98.1477%" y="159.50"></text></g><g><title>link (8,534,285 samples, 8.02%)</title><rect x="90.3348%" y="197" width="8.0242%" height="15" fill="rgb(213,25,53)"/><text x="90.5848%" y="207.50">link</text></g><g><title>parse_crate (583,826 samples, 0.55%)</title><rect x="98.3590%" y="197" width="0.5489%" height="15" fill="rgb(252,105,26)"/><text x="98.6090%" y="207.50"></text></g><g><title>prepare_outputs (231,482 samples, 0.22%)</title><rect x="98.9132%" y="197" width="0.2176%" height="15" fill="rgb(220,39,43)"/><text x="99.1632%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (478,406 samples, 0.45%)</title><rect x="99.1308%" y="197" width="0.4498%" height="15" fill="rgb(229,68,48)"/><text x="99.3808%" y="207.50"></text></g><g><title>all (106,356,947 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (106,356,947 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (360,744 samples, 0.34%)</title><rect x="99.6608%" y="197" width="0.3392%" height="15" fill="rgb(229,81,49)"/><text x="99.9108%" y="207.50"></text></g></svg></svg>