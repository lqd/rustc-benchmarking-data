time:   0.000; rss:   59MB ->   59MB (   +0MB)	parse_crate
time:   0.000; rss:   59MB ->   59MB (   +0MB)	attributes_injection
time:   0.000; rss:   59MB ->   59MB (   +0MB)	plugin_loading
time:   0.000; rss:   59MB ->   59MB (   +0MB)	plugin_registration
time:   0.000; rss:   63MB ->   63MB (   +0MB)	crate_injection
time:   0.024; rss:   63MB ->  102MB (  +40MB)	expand_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	check_unused_macros
time:   0.024; rss:   63MB ->  102MB (  +40MB)	macro_expand_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:  102MB ->  102MB (   +0MB)	AST_validation
time:   0.000; rss:  102MB ->  102MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	finalize_imports
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_access_levels
time:   0.000; rss:  102MB ->  102MB (   +0MB)	finalize_macro_resolutions
time:   0.005; rss:  102MB ->  105MB (   +3MB)	late_resolve_crate
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_main
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_postprocess
time:   0.007; rss:  102MB ->  105MB (   +3MB)	resolve_crate
time:   0.000; rss:  105MB ->  105MB (   +0MB)	complete_gated_feature_checking
time:   0.031; rss:   59MB ->  105MB (  +46MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpPiYhgW/target/debug/deps/parse_zoneinfo-750a3536158f1ec3.d","emit":"dep-info"}
time:   0.000; rss:  105MB ->  105MB (   +0MB)	prepare_outputs
time:   0.011; rss:  105MB ->  110MB (   +5MB)	hir_lowering
time:   0.002; rss:  110MB ->  110MB (   +0MB)	early_lint_checks
time:   0.001; rss:  110MB ->  110MB (   +0MB)	drop_ast
time:   0.000; rss:  109MB ->  109MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  113MB ->  113MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  113MB ->  113MB (   +0MB)	looking_for_derive_registrar
time:   0.003; rss:  113MB ->  113MB (   +0MB)	misc_checking_1
time:   0.008; rss:  113MB ->  130MB (  +17MB)	type_collecting
time:   0.000; rss:  130MB ->  130MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  130MB ->  130MB (   +0MB)	unsafety_checking
time:   0.012; rss:  130MB ->  150MB (  +20MB)	coherence_checking
time:   0.015; rss:  150MB ->  152MB (   +2MB)	wf_checking
time:   0.007; rss:  152MB ->  154MB (   +2MB)	item_types_checking
time:   0.115; rss:  154MB ->  167MB (  +13MB)	item_bodies_checking
time:   0.157; rss:  113MB ->  167MB (  +55MB)	type_check_crate
time:   0.004; rss:  167MB ->  167MB (   +0MB)	match_checking
time:   0.001; rss:  167MB ->  167MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.005; rss:  167MB ->  167MB (   +0MB)	misc_checking_2
time:   0.095; rss:  167MB ->  173MB (   +6MB)	MIR_borrow_checking
time:   0.001; rss:  173MB ->  173MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  173MB ->  173MB (   +0MB)	layout_testing
time:   0.001; rss:  173MB ->  174MB (   +1MB)	death_checking
time:   0.000; rss:  174MB ->  174MB (   +0MB)	unused_lib_feature_checking
time:   0.003; rss:  174MB ->  174MB (   +0MB)	crate_lints
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14117,"byte_end":14160,"line_start":337,"line_end":337,"column_start":25,"column_end":68,"is_primary":true,"text":[{"text":"                        replace(start_utc_offset, timespan.offset);","highlight_start":25,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_must_use)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:337:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m337\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        replace(start_utc_offset, timespan.offset);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_must_use)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14185,"byte_end":14224,"line_start":338,"line_end":338,"column_start":25,"column_end":64,"is_primary":true,"text":[{"text":"                        replace(start_dst_offset, *dst_offset);","highlight_start":25,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:338:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        replace(start_dst_offset, *dst_offset);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14249,"byte_end":14567,"line_start":339,"line_end":346,"column_start":25,"column_end":27,"is_primary":true,"text":[{"text":"                        replace(","highlight_start":25,"highlight_end":33},{"text":"                            start_zone_id,","highlight_start":1,"highlight_end":43},{"text":"                            Some(","highlight_start":1,"highlight_end":34},{"text":"                                timespan","highlight_start":1,"highlight_end":41},{"text":"                                    .format","highlight_start":1,"highlight_end":44},{"text":"                                    .format(*dst_offset, earliest_rule.letters.as_ref()),","highlight_start":1,"highlight_end":90},{"text":"                            ),","highlight_start":1,"highlight_end":31},{"text":"                        );","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:339:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m339\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        replace(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            start_zone_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m341\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Some(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m342\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                timespan\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m345\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            ),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m346\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
{"message":"unused return value of `std::mem::replace` that must be used","code":{"code":"unused_must_use","explanation":null},"level":"warning","spans":[{"file_name":"src/transitions.rs","byte_start":14816,"byte_end":15134,"line_start":353,"line_end":360,"column_start":25,"column_end":27,"is_primary":true,"text":[{"text":"                        replace(","highlight_start":25,"highlight_end":33},{"text":"                            start_zone_id,","highlight_start":1,"highlight_end":43},{"text":"                            Some(","highlight_start":1,"highlight_end":34},{"text":"                                timespan","highlight_start":1,"highlight_end":41},{"text":"                                    .format","highlight_start":1,"highlight_end":44},{"text":"                                    .format(*dst_offset, earliest_rule.letters.as_ref()),","highlight_start":1,"highlight_end":90},{"text":"                            ),","highlight_start":1,"highlight_end":31},{"text":"                        );","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if you don't need the old value, you can just assign the new value directly","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused return value of `std::mem::replace` that must be used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transitions.rs:353:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m353\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        replace(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m354\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            start_zone_id,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m355\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            Some(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m356\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                timespan\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m359\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            ),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m360\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if you don't need the old value, you can just assign the new value directly\u001b[0m\n\n"}
time:   0.008; rss:  174MB ->  179MB (   +5MB)	module_lints
time:   0.011; rss:  174MB ->  179MB (   +6MB)	lint_checking
time:   0.004; rss:  179MB ->  179MB (   +0MB)	privacy_checking_modules
time:   0.018; rss:  173MB ->  179MB (   +6MB)	misc_checking_3
time:   0.000; rss:  180MB ->  180MB (   +0MB)	monomorphization_collector_root_collections
time:   0.084; rss:  180MB ->  192MB (  +12MB)	monomorphization_collector_graph_walk
time:   0.017; rss:  192MB ->  194MB (   +2MB)	partition_and_assert_distinct_symbols
time:   0.117; rss:  179MB ->  194MB (  +15MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpPiYhgW/target/debug/deps/libparse_zoneinfo-750a3536158f1ec3.rmeta","emit":"metadata"}
time:   0.000; rss:  194MB ->  194MB (   +0MB)	find_cgu_reuse
time:   0.398; rss:  194MB ->  249MB (  +55MB)	codegen_to_LLVM_IR
time:   0.401; rss:  194MB ->  249MB (  +55MB)	codegen_crate
time:   0.000; rss:  249MB ->  249MB (   +0MB)	serialize_dep_graph
time:   0.012; rss:  249MB ->  181MB (  -68MB)	free_global_ctxt
time:   0.405; rss:  205MB ->  182MB (  -23MB)	LLVM_passes(crate)
time:   0.000; rss:  182MB ->  182MB (   +0MB)	join_worker_thread
time:   0.046; rss:  181MB ->  182MB (   +1MB)	finish_ongoing_codegen
time:   0.000; rss:  182MB ->  182MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  182MB ->  182MB (   +0MB)	serialize_work_products
time:   0.000; rss:  182MB ->  182MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.007; rss:  182MB ->  182MB (   +0MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpPiYhgW/target/debug/deps/libparse_zoneinfo-750a3536158f1ec3.rlib","emit":"link"}
time:   0.001; rss:  182MB ->  182MB (   +0MB)	link_binary_remove_temps
time:   0.009; rss:  182MB ->  182MB (   +0MB)	link_binary
time:   0.009; rss:  182MB ->  182MB (   +0MB)	link_crate
time:   0.054; rss:  181MB ->  182MB (   +2MB)	link
{"message":"4 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 4 warnings emitted\u001b[0m\n\n"}
time:   0.917; rss:   46MB ->  177MB ( +131MB)	total
