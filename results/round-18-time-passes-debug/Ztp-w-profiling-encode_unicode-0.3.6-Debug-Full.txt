time:   0.001; rss:   59MB ->   59MB (   +0MB)	parse_crate
time:   0.000; rss:   59MB ->   59MB (   +0MB)	attributes_injection
time:   0.000; rss:   61MB ->   61MB (   +0MB)	plugin_loading
time:   0.000; rss:   61MB ->   61MB (   +0MB)	plugin_registration
time:   0.000; rss:   61MB ->   61MB (   +0MB)	crate_injection
time:   0.048; rss:   61MB ->  103MB (  +41MB)	expand_crate
time:   0.000; rss:  103MB ->  103MB (   +0MB)	check_unused_macros
time:   0.048; rss:   61MB ->  103MB (  +41MB)	macro_expand_crate
time:   0.000; rss:  103MB ->  103MB (   +0MB)	maybe_building_test_harness
time:   0.000; rss:  103MB ->  103MB (   +0MB)	AST_validation
time:   0.000; rss:  103MB ->  103MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:  103MB ->  103MB (   +0MB)	finalize_imports
time:   0.000; rss:  103MB ->  103MB (   +0MB)	resolve_access_levels
time:   0.000; rss:  103MB ->  103MB (   +0MB)	finalize_macro_resolutions
time:   0.006; rss:  103MB ->  105MB (   +3MB)	late_resolve_crate
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_main
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  105MB ->  105MB (   +0MB)	resolve_postprocess
time:   0.008; rss:  103MB ->  105MB (   +3MB)	resolve_crate
time:   0.000; rss:  105MB ->  105MB (   +0MB)	complete_gated_feature_checking
time:   0.058; rss:   61MB ->  105MB (  +44MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpQV1s43/target/debug/deps/encode_unicode-d7e99fa755d3f50c.d","emit":"dep-info"}
time:   0.000; rss:  105MB ->  105MB (   +0MB)	prepare_outputs
time:   0.013; rss:  105MB ->  110MB (   +5MB)	hir_lowering
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":2066,"byte_end":2069,"line_start":61,"line_end":61,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"            n @ 1...3 => Ok(n as usize),","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(ellipsis_inclusive_range_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":2066,"byte_end":2069,"line_start":61,"line_end":61,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"            n @ 1...3 => Ok(n as usize),","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:61:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            n @ 1...3 => Ok(n as usize),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(ellipsis_inclusive_range_patterns)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":6268,"byte_end":6271,"line_start":145,"line_end":145,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"            0x00_00...0xd7_ff | 0xe0_00...0xff_ff => Ok(false),","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":6268,"byte_end":6271,"line_start":145,"line_end":145,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"            0x00_00...0xd7_ff | 0xe0_00...0xff_ff => Ok(false),","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:145:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            0x00_00...0xd7_ff | 0xe0_00...0xff_ff => Ok(false),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":6288,"byte_end":6291,"line_start":145,"line_end":145,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"            0x00_00...0xd7_ff | 0xe0_00...0xff_ff => Ok(false),","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":6288,"byte_end":6291,"line_start":145,"line_end":145,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"            0x00_00...0xd7_ff | 0xe0_00...0xff_ff => Ok(false),","highlight_start":40,"highlight_end":43}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:145:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            0x00_00...0xd7_ff | 0xe0_00...0xff_ff => Ok(false),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":6332,"byte_end":6335,"line_start":146,"line_end":146,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"            0xd8_00...0xdb_ff => Ok(true),","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":6332,"byte_end":6335,"line_start":146,"line_end":146,"column_start":20,"column_end":23,"is_primary":true,"text":[{"text":"            0xd8_00...0xdb_ff => Ok(true),","highlight_start":20,"highlight_end":23}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:146:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            0xd8_00...0xdb_ff => Ok(true),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19339,"byte_end":19342,"line_start":497,"line_end":497,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"            (Some(&u @ 0x00_00...0xd7_ff), _) |","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19339,"byte_end":19342,"line_start":497,"line_end":497,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"            (Some(&u @ 0x00_00...0xd7_ff), _) |","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:497:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&u @ 0x00_00...0xd7_ff), _) |\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19387,"byte_end":19390,"line_start":498,"line_end":498,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"            (Some(&u @ 0xe0_00...0xff_ff), _)","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19387,"byte_end":19390,"line_start":498,"line_end":498,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"            (Some(&u @ 0xe0_00...0xff_ff), _)","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:498:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m498\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&u @ 0xe0_00...0xff_ff), _)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19485,"byte_end":19503,"line_start":500,"line_end":500,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            (Some(&0xdc_00...0xdf_ff), _) => Err(FirstLowSurrogate),","highlight_start":19,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19485,"byte_end":19503,"line_start":500,"line_end":500,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            (Some(&0xdc_00...0xdf_ff), _) => Err(FirstLowSurrogate),","highlight_start":19,"highlight_end":37}],"label":null,"suggested_replacement":"&(0xdc_00..=0xdf_ff)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:500:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m500\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&0xdc_00...0xdf_ff), _) => Err(FirstLowSurrogate),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range: `&(0xdc_00..=0xdf_ff)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19608,"byte_end":19611,"line_start":502,"line_end":502,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"            (Some(&f @ 0xd8_00...0xdb_ff), Some(&s @ 0xdc_00...0xdf_ff))","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19608,"byte_end":19611,"line_start":502,"line_end":502,"column_start":31,"column_end":34,"is_primary":true,"text":[{"text":"            (Some(&f @ 0xd8_00...0xdb_ff), Some(&s @ 0xdc_00...0xdf_ff))","highlight_start":31,"highlight_end":34}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:502:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&f @ 0xd8_00...0xdb_ff), Some(&s @ 0xdc_00...0xdf_ff))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19638,"byte_end":19641,"line_start":502,"line_end":502,"column_start":61,"column_end":64,"is_primary":true,"text":[{"text":"            (Some(&f @ 0xd8_00...0xdb_ff), Some(&s @ 0xdc_00...0xdf_ff))","highlight_start":61,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19638,"byte_end":19641,"line_start":502,"line_end":502,"column_start":61,"column_end":64,"is_primary":true,"text":[{"text":"            (Some(&f @ 0xd8_00...0xdb_ff), Some(&s @ 0xdc_00...0xdf_ff))","highlight_start":61,"highlight_end":64}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:502:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&f @ 0xd8_00...0xdb_ff), Some(&s @ 0xdc_00...0xdf_ff))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19745,"byte_end":19763,"line_start":504,"line_end":504,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            (Some(&0xd8_00...0xdb_ff), Some(_)) => Err(SecondNotLowSurrogate),","highlight_start":19,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19745,"byte_end":19763,"line_start":504,"line_end":504,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            (Some(&0xd8_00...0xdb_ff), Some(_)) => Err(SecondNotLowSurrogate),","highlight_start":19,"highlight_end":37}],"label":null,"suggested_replacement":"&(0xd8_00..=0xdb_ff)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:504:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&0xd8_00...0xdb_ff), Some(_)) => Err(SecondNotLowSurrogate),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range: `&(0xd8_00..=0xdb_ff)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19824,"byte_end":19842,"line_start":505,"line_end":505,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            (Some(&0xd8_00...0xdb_ff), None) => Err(MissingSecond),","highlight_start":19,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":19824,"byte_end":19842,"line_start":505,"line_end":505,"column_start":19,"column_end":37,"is_primary":true,"text":[{"text":"            (Some(&0xd8_00...0xdb_ff), None) => Err(MissingSecond),","highlight_start":19,"highlight_end":37}],"label":null,"suggested_replacement":"&(0xd8_00..=0xdb_ff)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:505:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(&0xd8_00...0xdb_ff), None) => Err(MissingSecond),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range: `&(0xd8_00..=0xdb_ff)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":20648,"byte_end":20651,"line_start":526,"line_end":526,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0x00_00...0xd7_ff, None) | // single","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":20648,"byte_end":20651,"line_start":526,"line_end":526,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0x00_00...0xd7_ff, None) | // single","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:526:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m526\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0x00_00...0xd7_ff, None) | // single\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":20698,"byte_end":20701,"line_start":527,"line_end":527,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xe0_00...0xff_ff, None) | // single","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":20698,"byte_end":20701,"line_start":527,"line_end":527,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xe0_00...0xff_ff, None) | // single","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:527:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m527\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0xe0_00...0xff_ff, None) | // single\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":20748,"byte_end":20751,"line_start":528,"line_end":528,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, Some(0xdc_00...0xdf_ff)) // correct surrogate","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":20748,"byte_end":20751,"line_start":528,"line_end":528,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, Some(0xdc_00...0xdf_ff)) // correct surrogate","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:528:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0xd8_00...0xdb_ff, Some(0xdc_00...0xdf_ff)) // correct surrogate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":20772,"byte_end":20775,"line_start":528,"line_end":528,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, Some(0xdc_00...0xdf_ff)) // correct surrogate","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":20772,"byte_end":20775,"line_start":528,"line_end":528,"column_start":45,"column_end":48,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, Some(0xdc_00...0xdf_ff)) // correct surrogate","highlight_start":45,"highlight_end":48}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:528:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m528\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0xd8_00...0xdb_ff, Some(0xdc_00...0xdf_ff)) // correct surrogate\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":20890,"byte_end":20893,"line_start":530,"line_end":530,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, Some(_)) => Err(InvalidSecond),","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":20890,"byte_end":20893,"line_start":530,"line_end":530,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, Some(_)) => Err(InvalidSecond),","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:530:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m530\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0xd8_00...0xdb_ff, Some(_)) => Err(InvalidSecond),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":20954,"byte_end":20957,"line_start":531,"line_end":531,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, None   ) => Err(MissingSecond),","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":20954,"byte_end":20957,"line_start":531,"line_end":531,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xd8_00...0xdb_ff, None   ) => Err(MissingSecond),","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:531:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0xd8_00...0xdb_ff, None   ) => Err(MissingSecond),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":21018,"byte_end":21021,"line_start":532,"line_end":532,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xdc_00...0xdf_ff,    _   ) => Err(FirstIsTrailingSurrogate),","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/traits.rs","byte_start":21018,"byte_end":21021,"line_start":532,"line_end":532,"column_start":21,"column_end":24,"is_primary":true,"text":[{"text":"            (0xdc_00...0xdf_ff,    _   ) => Err(FirstIsTrailingSurrogate),","highlight_start":21,"highlight_end":24}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:532:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (0xdc_00...0xdf_ff,    _   ) => Err(FirstIsTrailingSurrogate),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/utf8_char.rs","byte_start":2961,"byte_end":2964,"line_start":85,"line_end":85,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"            (a @ 0...0x00_7f, _) => {","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/utf8_char.rs","byte_start":2961,"byte_end":2964,"line_start":85,"line_end":85,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"            (a @ 0...0x00_7f, _) => {","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utf8_char.rs:85:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (a @ 0...0x00_7f, _) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/utf8_char.rs","byte_start":3068,"byte_end":3071,"line_start":88,"line_end":88,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"            (u @ 0...0x07_ff, _) => {","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/utf8_char.rs","byte_start":3068,"byte_end":3071,"line_start":88,"line_end":88,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"            (u @ 0...0x07_ff, _) => {","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utf8_char.rs:88:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (u @ 0...0x07_ff, _) => {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/utf16_char.rs","byte_start":14068,"byte_end":14071,"line_start":442,"line_end":442,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"            0...127 => {// 1 byte => 1 unit","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/utf16_char.rs","byte_start":14068,"byte_end":14071,"line_start":442,"line_end":442,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"            0...127 => {// 1 byte => 1 unit","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utf16_char.rs:442:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m442\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            0...127 => {// 1 byte => 1 unit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/utf16_char.rs","byte_start":14256,"byte_end":14259,"line_start":446,"line_end":446,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"            0b1000_0000...0b1101_1111 => {// 2 bytes => 1 unit","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/utf16_char.rs","byte_start":14256,"byte_end":14259,"line_start":446,"line_end":446,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"            0b1000_0000...0b1101_1111 => {// 2 bytes => 1 unit","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utf16_char.rs:446:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m446\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            0b1000_0000...0b1101_1111 => {// 2 bytes => 1 unit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/utf16_char.rs","byte_start":14553,"byte_end":14556,"line_start":451,"line_end":451,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"            0b1110_0000...0b1110_1111 => {// 3 bytes => 1 unit","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/utf16_char.rs","byte_start":14553,"byte_end":14556,"line_start":451,"line_end":451,"column_start":24,"column_end":27,"is_primary":true,"text":[{"text":"            0b1110_0000...0b1110_1111 => {// 3 bytes => 1 unit","highlight_start":24,"highlight_end":27}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utf16_char.rs:451:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m451\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            0b1110_0000...0b1110_1111 => {// 3 bytes => 1 unit\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":5679,"byte_end":5682,"line_start":146,"line_end":146,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b0000_0000...0b0111_1111 => {/*1 and */Ok(())},","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":5679,"byte_end":5682,"line_start":146,"line_end":146,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b0000_0000...0b0111_1111 => {/*1 and */Ok(())},","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:146:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b0000_0000...0b0111_1111 => {/*1 and */Ok(())},\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":5744,"byte_end":5747,"line_start":147,"line_end":147,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1100_0010...0b1101_1111 => {//2 and not overlong","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":5744,"byte_end":5747,"line_start":147,"line_end":147,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1100_0010...0b1101_1111 => {//2 and not overlong","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:147:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1100_0010...0b1101_1111 => {//2 and not overlong\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":5908,"byte_end":5911,"line_start":150,"line_end":150,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1110_0000...0b1110_1111 => {//3","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":5908,"byte_end":5911,"line_start":150,"line_end":150,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1110_0000...0b1110_1111 => {//3","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:150:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1110_0000...0b1110_1111 => {//3\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":6528,"byte_end":6531,"line_start":163,"line_end":163,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1111_0000...0b1111_0100 => {//4","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":6528,"byte_end":6531,"line_start":163,"line_end":163,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1111_0000...0b1111_0100 => {//4","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:163:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1111_0000...0b1111_0100 => {//4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7163,"byte_end":7166,"line_start":176,"line_end":176,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1000_0000...0b1011_1111 => {// continuation byte","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7163,"byte_end":7166,"line_start":176,"line_end":176,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1000_0000...0b1011_1111 => {// continuation byte","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:176:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1000_0000...0b1011_1111 => {// continuation byte\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7308,"byte_end":7311,"line_start":179,"line_end":179,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1100_0000...0b1100_0001 => {// 2 and overlong","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7308,"byte_end":7311,"line_start":179,"line_end":179,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1100_0000...0b1100_0001 => {// 2 and overlong","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:179:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1100_0000...0b1100_0001 => {// 2 and overlong\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7431,"byte_end":7434,"line_start":182,"line_end":182,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1111_0101...0b1111_0111 => {// 4 and too high codepoint","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7431,"byte_end":7434,"line_start":182,"line_end":182,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1111_0101...0b1111_0111 => {// 4 and too high codepoint","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:182:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1111_0101...0b1111_0111 => {// 4 and too high codepoint\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
{"message":"`...` range patterns are deprecated","code":{"code":"ellipsis_inclusive_range_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7568,"byte_end":7571,"line_start":185,"line_end":185,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1111_1000...0b1111_1111 => {","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `..=` for an inclusive range","code":null,"level":"help","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7568,"byte_end":7571,"line_start":185,"line_end":185,"column_start":28,"column_end":31,"is_primary":true,"text":[{"text":"                0b1111_1000...0b1111_1111 => {","highlight_start":28,"highlight_end":31}],"label":null,"suggested_replacement":"..=","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `...` range patterns are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:185:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                0b1111_1000...0b1111_1111 => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `..=` for an inclusive range\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\n"}
time:   0.004; rss:  110MB ->  110MB (   +0MB)	early_lint_checks
time:   0.001; rss:  110MB ->  110MB (   +0MB)	drop_ast
time:   0.000; rss:  110MB ->  110MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  110MB ->  110MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  110MB ->  114MB (   +4MB)	looking_for_derive_registrar
time:   0.004; rss:  110MB ->  114MB (   +4MB)	misc_checking_1
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/errors.rs","byte_start":7437,"byte_end":7442,"line_start":200,"line_end":200,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/errors.rs","byte_start":8535,"byte_end":9129,"line_start":231,"line_end":242,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8 {","highlight_start":1,"highlight_end":23},{"text":"        InvalidUtf8FirstByte => FirstByte,","highlight_start":1,"highlight_end":43},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        FirstByte(TooLongSeqence) => \"the first byte is greater than 239 (UTF-8 sequences cannot be longer than four bytes)\",","highlight_start":1,"highlight_end":126},{"text":"        FirstByte(ContinuationByte) => \"the first byte is a continuation of a previous sequence\",","highlight_start":1,"highlight_end":98},{"text":"        OverLong => \"the sequence contains too many zeros and could be shorter\",","highlight_start":1,"highlight_end":81},{"text":"        NotAContinuationByte(_) => \"the sequence is too short\",","highlight_start":1,"highlight_end":64},{"text":"    } => false => {","highlight_start":1,"highlight_end":20},{"text":"        FirstByte(ref cause) => Some(cause),","highlight_start":1,"highlight_end":45},{"text":"        _ => None,","highlight_start":1,"highlight_end":19},{"text":"    }/// Returns `Some` if the error is a `InvalidUtf8FirstByte`.","highlight_start":1,"highlight_end":66},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(bare_trait_objects)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/errors.rs","byte_start":7437,"byte_end":7437,"line_start":200,"line_end":200,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/errors.rs","byte_start":8535,"byte_end":9129,"line_start":231,"line_end":242,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8 {","highlight_start":1,"highlight_end":23},{"text":"        InvalidUtf8FirstByte => FirstByte,","highlight_start":1,"highlight_end":43},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        FirstByte(TooLongSeqence) => \"the first byte is greater than 239 (UTF-8 sequences cannot be longer than four bytes)\",","highlight_start":1,"highlight_end":126},{"text":"        FirstByte(ContinuationByte) => \"the first byte is a continuation of a previous sequence\",","highlight_start":1,"highlight_end":98},{"text":"        OverLong => \"the sequence contains too many zeros and could be shorter\",","highlight_start":1,"highlight_end":81},{"text":"        NotAContinuationByte(_) => \"the sequence is too short\",","highlight_start":1,"highlight_end":64},{"text":"    } => false => {","highlight_start":1,"highlight_end":20},{"text":"        FirstByte(ref cause) => Some(cause),","highlight_start":1,"highlight_end":45},{"text":"        _ => None,","highlight_start":1,"highlight_end":19},{"text":"    }/// Returns `Some` if the error is a `InvalidUtf8FirstByte`.","highlight_start":1,"highlight_end":66},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/errors.rs","byte_start":7442,"byte_end":7442,"line_start":200,"line_end":200,"column_start":41,"column_end":41,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":41,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/errors.rs","byte_start":8535,"byte_end":9129,"line_start":231,"line_end":242,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8 {","highlight_start":1,"highlight_end":23},{"text":"        InvalidUtf8FirstByte => FirstByte,","highlight_start":1,"highlight_end":43},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        FirstByte(TooLongSeqence) => \"the first byte is greater than 239 (UTF-8 sequences cannot be longer than four bytes)\",","highlight_start":1,"highlight_end":126},{"text":"        FirstByte(ContinuationByte) => \"the first byte is a continuation of a previous sequence\",","highlight_start":1,"highlight_end":98},{"text":"        OverLong => \"the sequence contains too many zeros and could be shorter\",","highlight_start":1,"highlight_end":81},{"text":"        NotAContinuationByte(_) => \"the sequence is too short\",","highlight_start":1,"highlight_end":64},{"text":"    } => false => {","highlight_start":1,"highlight_end":20},{"text":"        FirstByte(ref cause) => Some(cause),","highlight_start":1,"highlight_end":45},{"text":"        _ => None,","highlight_start":1,"highlight_end":19},{"text":"    }/// Returns `Some` if the error is a `InvalidUtf8FirstByte`.","highlight_start":1,"highlight_end":66},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/errors.rs:200:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        fn cause(&self) -> Option<&Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcomplex!{InvalidUtf8 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InvalidUtf8FirstByte => FirstByte,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        FirstByte(TooLongSeqence) => \"the first byte is greater than 239 (UTF-8 sequences cannot be longer than four bytes)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }/// Returns `Some` if the error is a `InvalidUtf8FirstByte`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(bare_trait_objects)]` on by default\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `complex` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        fn cause(&self) -> Option<&Error> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        fn cause(&self) -> Option<&\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/errors.rs","byte_start":7437,"byte_end":7442,"line_start":200,"line_end":200,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/errors.rs","byte_start":9408,"byte_end":9853,"line_start":253,"line_end":263,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8Array {","highlight_start":1,"highlight_end":28},{"text":"        InvalidUtf8 => InvalidUtf8Array::Utf8,","highlight_start":1,"highlight_end":47},{"text":"        InvalidCodepoint => InvalidUtf8Array::Codepoint,","highlight_start":1,"highlight_end":57},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        InvalidUtf8Array::Utf8(_) => \"the sequence is invalid UTF-8\",","highlight_start":1,"highlight_end":70},{"text":"        InvalidUtf8Array::Codepoint(_) => \"the encoded codepoint is invalid\",","highlight_start":1,"highlight_end":78},{"text":"    } => true => {","highlight_start":1,"highlight_end":19},{"text":"        InvalidUtf8Array::Utf8(ref u) => Some(u),","highlight_start":1,"highlight_end":50},{"text":"        InvalidUtf8Array::Codepoint(ref c) => Some(c),","highlight_start":1,"highlight_end":55},{"text":"    }/// Always returns `Some`.","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/errors.rs","byte_start":7437,"byte_end":7437,"line_start":200,"line_end":200,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/errors.rs","byte_start":9408,"byte_end":9853,"line_start":253,"line_end":263,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8Array {","highlight_start":1,"highlight_end":28},{"text":"        InvalidUtf8 => InvalidUtf8Array::Utf8,","highlight_start":1,"highlight_end":47},{"text":"        InvalidCodepoint => InvalidUtf8Array::Codepoint,","highlight_start":1,"highlight_end":57},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        InvalidUtf8Array::Utf8(_) => \"the sequence is invalid UTF-8\",","highlight_start":1,"highlight_end":70},{"text":"        InvalidUtf8Array::Codepoint(_) => \"the encoded codepoint is invalid\",","highlight_start":1,"highlight_end":78},{"text":"    } => true => {","highlight_start":1,"highlight_end":19},{"text":"        InvalidUtf8Array::Utf8(ref u) => Some(u),","highlight_start":1,"highlight_end":50},{"text":"        InvalidUtf8Array::Codepoint(ref c) => Some(c),","highlight_start":1,"highlight_end":55},{"text":"    }/// Always returns `Some`.","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/errors.rs","byte_start":7442,"byte_end":7442,"line_start":200,"line_end":200,"column_start":41,"column_end":41,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":41,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/errors.rs","byte_start":9408,"byte_end":9853,"line_start":253,"line_end":263,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8Array {","highlight_start":1,"highlight_end":28},{"text":"        InvalidUtf8 => InvalidUtf8Array::Utf8,","highlight_start":1,"highlight_end":47},{"text":"        InvalidCodepoint => InvalidUtf8Array::Codepoint,","highlight_start":1,"highlight_end":57},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        InvalidUtf8Array::Utf8(_) => \"the sequence is invalid UTF-8\",","highlight_start":1,"highlight_end":70},{"text":"        InvalidUtf8Array::Codepoint(_) => \"the encoded codepoint is invalid\",","highlight_start":1,"highlight_end":78},{"text":"    } => true => {","highlight_start":1,"highlight_end":19},{"text":"        InvalidUtf8Array::Utf8(ref u) => Some(u),","highlight_start":1,"highlight_end":50},{"text":"        InvalidUtf8Array::Codepoint(ref c) => Some(c),","highlight_start":1,"highlight_end":55},{"text":"    }/// Always returns `Some`.","highlight_start":1,"highlight_end":32},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/errors.rs:200:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        fn cause(&self) -> Option<&Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcomplex!{InvalidUtf8Array {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InvalidUtf8 => InvalidUtf8Array::Utf8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InvalidCodepoint => InvalidUtf8Array::Codepoint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }/// Always returns `Some`.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `complex` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        fn cause(&self) -> Option<&Error> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        fn cause(&self) -> Option<&\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
{"message":"trait objects without an explicit `dyn` are deprecated","code":{"code":"bare_trait_objects","explanation":null},"level":"warning","spans":[{"file_name":"src/errors.rs","byte_start":7437,"byte_end":7442,"line_start":200,"line_end":200,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/errors.rs","byte_start":10232,"byte_end":10844,"line_start":276,"line_end":289,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8Slice {","highlight_start":1,"highlight_end":28},{"text":"        InvalidUtf8 => InvalidUtf8Slice::Utf8,","highlight_start":1,"highlight_end":47},{"text":"        InvalidCodepoint => InvalidUtf8Slice::Codepoint,","highlight_start":1,"highlight_end":57},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        InvalidUtf8Slice::Utf8(_) => \"the sequence is invalid UTF-8\",","highlight_start":1,"highlight_end":70},{"text":"        InvalidUtf8Slice::Codepoint(_) => \"the encoded codepoint is invalid\",","highlight_start":1,"highlight_end":78},{"text":"        InvalidUtf8Slice::TooShort(1) => \"the slice is empty\",","highlight_start":1,"highlight_end":63},{"text":"        InvalidUtf8Slice::TooShort(_) => \"the slice is shorter than the sequence\",","highlight_start":1,"highlight_end":83},{"text":"    } => true => {","highlight_start":1,"highlight_end":19},{"text":"        InvalidUtf8Slice::Utf8(ref u) => Some(u),","highlight_start":1,"highlight_end":50},{"text":"        InvalidUtf8Slice::Codepoint(ref c) => Some(c),","highlight_start":1,"highlight_end":55},{"text":"        InvalidUtf8Slice::TooShort(_) => None,","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use `dyn`","code":null,"level":"help","spans":[{"file_name":"src/errors.rs","byte_start":7437,"byte_end":7437,"line_start":200,"line_end":200,"column_start":36,"column_end":36,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":36,"highlight_end":36}],"label":null,"suggested_replacement":"dyn ","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/errors.rs","byte_start":10232,"byte_end":10844,"line_start":276,"line_end":289,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8Slice {","highlight_start":1,"highlight_end":28},{"text":"        InvalidUtf8 => InvalidUtf8Slice::Utf8,","highlight_start":1,"highlight_end":47},{"text":"        InvalidCodepoint => InvalidUtf8Slice::Codepoint,","highlight_start":1,"highlight_end":57},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        InvalidUtf8Slice::Utf8(_) => \"the sequence is invalid UTF-8\",","highlight_start":1,"highlight_end":70},{"text":"        InvalidUtf8Slice::Codepoint(_) => \"the encoded codepoint is invalid\",","highlight_start":1,"highlight_end":78},{"text":"        InvalidUtf8Slice::TooShort(1) => \"the slice is empty\",","highlight_start":1,"highlight_end":63},{"text":"        InvalidUtf8Slice::TooShort(_) => \"the slice is shorter than the sequence\",","highlight_start":1,"highlight_end":83},{"text":"    } => true => {","highlight_start":1,"highlight_end":19},{"text":"        InvalidUtf8Slice::Utf8(ref u) => Some(u),","highlight_start":1,"highlight_end":50},{"text":"        InvalidUtf8Slice::Codepoint(ref c) => Some(c),","highlight_start":1,"highlight_end":55},{"text":"        InvalidUtf8Slice::TooShort(_) => None,","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/errors.rs","byte_start":7442,"byte_end":7442,"line_start":200,"line_end":200,"column_start":41,"column_end":41,"is_primary":true,"text":[{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":41,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/errors.rs","byte_start":10232,"byte_end":10844,"line_start":276,"line_end":289,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"complex!{InvalidUtf8Slice {","highlight_start":1,"highlight_end":28},{"text":"        InvalidUtf8 => InvalidUtf8Slice::Utf8,","highlight_start":1,"highlight_end":47},{"text":"        InvalidCodepoint => InvalidUtf8Slice::Codepoint,","highlight_start":1,"highlight_end":57},{"text":"    } {","highlight_start":1,"highlight_end":8},{"text":"        InvalidUtf8Slice::Utf8(_) => \"the sequence is invalid UTF-8\",","highlight_start":1,"highlight_end":70},{"text":"        InvalidUtf8Slice::Codepoint(_) => \"the encoded codepoint is invalid\",","highlight_start":1,"highlight_end":78},{"text":"        InvalidUtf8Slice::TooShort(1) => \"the slice is empty\",","highlight_start":1,"highlight_end":63},{"text":"        InvalidUtf8Slice::TooShort(_) => \"the slice is shorter than the sequence\",","highlight_start":1,"highlight_end":83},{"text":"    } => true => {","highlight_start":1,"highlight_end":19},{"text":"        InvalidUtf8Slice::Utf8(ref u) => Some(u),","highlight_start":1,"highlight_end":50},{"text":"        InvalidUtf8Slice::Codepoint(ref c) => Some(c),","highlight_start":1,"highlight_end":55},{"text":"        InvalidUtf8Slice::TooShort(_) => None,","highlight_start":1,"highlight_end":47},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"complex!","def_site_span":{"file_name":"src/errors.rs","byte_start":6622,"byte_end":7836,"line_start":173,"line_end":212,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! complex {","highlight_start":1,"highlight_end":23},{"text":"($err:ty","highlight_start":1,"highlight_end":9},{"text":" {$($sub:ty => $to:expr,)*}","highlight_start":1,"highlight_end":28},{"text":" {$($desc:pat => $string:expr),+,}","highlight_start":1,"highlight_end":35},{"text":" => $use_cause:expr =>","highlight_start":1,"highlight_end":23},{"text":" {$($cause:pat => $result:expr),+,} $(#[$causedoc:meta])*","highlight_start":1,"highlight_end":58},{"text":") => {","highlight_start":1,"highlight_end":7},{"text":"    $(impl From<$sub> for $err {","highlight_start":1,"highlight_end":33},{"text":"          fn from(error: $sub) -> $err {","highlight_start":1,"highlight_end":41},{"text":"              $to(error)","highlight_start":1,"highlight_end":25},{"text":"          }","highlight_start":1,"highlight_end":12},{"text":"      })*","highlight_start":1,"highlight_end":10},{"text":"    #[cfg(not(feature=\"std\"))]","highlight_start":1,"highlight_end":31},{"text":"    impl $err {","highlight_start":1,"highlight_end":16},{"text":"        #[allow(missing_docs)]","highlight_start":1,"highlight_end":31},{"text":"        pub fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":52},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        /// A hack to avoid two Display impls","highlight_start":1,"highlight_end":46},{"text":"        fn cause(&self) -> Option<&Display> {None}","highlight_start":1,"highlight_end":51},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    #[cfg(feature=\"std\")]","highlight_start":1,"highlight_end":26},{"text":"    impl Error for $err {","highlight_start":1,"highlight_end":26},{"text":"        fn description(&self) -> &'static str {","highlight_start":1,"highlight_end":48},{"text":"            match *self{ $($desc => $string,)* }","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $(#[$causedoc])*","highlight_start":1,"highlight_end":25},{"text":"        fn cause(&self) -> Option<&Error> {","highlight_start":1,"highlight_end":44},{"text":"            match *self{ $($cause => $result,)* }","highlight_start":1,"highlight_end":50},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    impl Display for $err {","highlight_start":1,"highlight_end":28},{"text":"        fn fmt(&self,  fmtr: &mut Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":62},{"text":"            match (self.cause(), $use_cause) {","highlight_start":1,"highlight_end":47},{"text":"                (Some(d),true) => write!(fmtr, \"{}: {}\", self.description(), d),","highlight_start":1,"highlight_end":81},{"text":"                        _      => write!(fmtr, \"{}\", self.description()),","highlight_start":1,"highlight_end":74},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait objects without an explicit `dyn` are deprecated\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/errors.rs:200:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        fn cause(&self) -> Option<&Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m276\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mcomplex!{InvalidUtf8Slice {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m277\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InvalidUtf8 => InvalidUtf8Slice::Utf8,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        InvalidCodepoint => InvalidUtf8Slice::Codepoint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m289\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `complex` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use `dyn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        fn cause(&self) -> Option<&Error> {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        fn cause(&self) -> Option<&\u001b[0m\u001b[0m\u001b[38;5;10mdyn \u001b[0m\u001b[0mError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\n"}
time:   0.008; rss:  114MB ->  122MB (   +8MB)	type_collecting
time:   0.000; rss:  122MB ->  122MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  122MB ->  122MB (   +0MB)	unsafety_checking
time:   0.018; rss:  122MB ->  145MB (  +23MB)	coherence_checking
time:   0.027; rss:  145MB ->  147MB (   +2MB)	wf_checking
time:   0.006; rss:  147MB ->  148MB (   +1MB)	item_types_checking
time:   0.141; rss:  148MB ->  167MB (  +19MB)	item_bodies_checking
time:   0.200; rss:  114MB ->  167MB (  +53MB)	type_check_crate
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":19886,"byte_end":19898,"line_start":506,"line_end":506,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"            (Some(_), _) => unreachable!()","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:506:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m506\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (Some(_), _) => unreachable!()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/traits.rs","byte_start":21153,"byte_end":21181,"line_start":534,"line_end":534,"column_start":13,"column_end":41,"is_primary":true,"text":[{"text":"            (        _        , None   ) => unreachable!()","highlight_start":13,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/traits.rs:534:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m534\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            (        _        , None   ) => unreachable!()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/decoding_iterators.rs","byte_start":7680,"byte_end":7681,"line_start":188,"line_end":188,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                _ => unreachable!(\"all possible byte values should be covered\")","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/decoding_iterators.rs:188:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                _ => unreachable!(\"all possible byte values should be covered\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
time:   0.004; rss:  167MB ->  169MB (   +2MB)	match_checking
time:   0.002; rss:  169MB ->  169MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.006; rss:  167MB ->  169MB (   +2MB)	misc_checking_2
time:   0.105; rss:  169MB ->  177MB (   +8MB)	MIR_borrow_checking
time:   0.001; rss:  177MB ->  177MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  177MB ->  177MB (   +0MB)	layout_testing
time:   0.002; rss:  178MB ->  178MB (   +0MB)	death_checking
time:   0.000; rss:  178MB ->  178MB (   +0MB)	unused_lib_feature_checking
time:   0.004; rss:  178MB ->  178MB (   +1MB)	crate_lints
time:   0.002; rss:  178MB ->  178MB (   +0MB)	module_lints
time:   0.005; rss:  178MB ->  178MB (   +1MB)	lint_checking
time:   0.004; rss:  178MB ->  178MB (   +0MB)	privacy_checking_modules
time:   0.014; rss:  177MB ->  178MB (   +1MB)	misc_checking_3
time:   0.000; rss:  180MB ->  180MB (   +0MB)	monomorphization_collector_root_collections
time:   0.037; rss:  180MB ->  184MB (   +4MB)	monomorphization_collector_graph_walk
time:   0.005; rss:  184MB ->  185MB (   +0MB)	partition_and_assert_distinct_symbols
time:   0.067; rss:  178MB ->  185MB (   +7MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpQV1s43/target/debug/deps/libencode_unicode-d7e99fa755d3f50c.rmeta","emit":"metadata"}
time:   0.000; rss:  186MB ->  186MB (   +0MB)	find_cgu_reuse
time:   0.103; rss:  186MB ->  217MB (  +31MB)	codegen_to_LLVM_IR
time:   0.106; rss:  185MB ->  217MB (  +31MB)	codegen_crate
time:   0.000; rss:  217MB ->  217MB (   +0MB)	serialize_dep_graph
time:   0.010; rss:  217MB ->  153MB (  -64MB)	free_global_ctxt
time:   0.135; rss:  190MB ->  154MB (  -36MB)	LLVM_passes(crate)
time:   0.000; rss:  154MB ->  154MB (   +0MB)	join_worker_thread
time:   0.026; rss:  153MB ->  154MB (   +1MB)	finish_ongoing_codegen
time:   0.000; rss:  154MB ->  154MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  154MB ->  154MB (   +0MB)	serialize_work_products
time:   0.000; rss:  154MB ->  154MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.003; rss:  154MB ->  155MB (   +1MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpQV1s43/target/debug/deps/libencode_unicode-d7e99fa755d3f50c.rlib","emit":"link"}
time:   0.000; rss:  155MB ->  155MB (   +0MB)	link_binary_remove_temps
time:   0.004; rss:  154MB ->  155MB (   +1MB)	link_binary
time:   0.004; rss:  154MB ->  154MB (   +0MB)	link_crate
time:   0.030; rss:  153MB ->  154MB (   +1MB)	link
{"message":"37 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 37 warnings emitted\u001b[0m\n\n"}
time:   0.628; rss:   46MB ->  153MB ( +107MB)	total
