time:   0.001; rss:   56MB ->   58MB (   +2MB)	parse_crate
time:   0.000; rss:   58MB ->   58MB (   +0MB)	attributes_injection
time:   0.000; rss:   60MB ->   60MB (   +0MB)	plugin_loading
time:   0.000; rss:   60MB ->   60MB (   +0MB)	plugin_registration
time:   0.000; rss:   60MB ->   60MB (   +0MB)	crate_injection
time:   0.061; rss:   60MB ->  102MB (  +41MB)	expand_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	check_unused_macros
time:   0.061; rss:   60MB ->  102MB (  +41MB)	macro_expand_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	maybe_building_test_harness
time:   0.001; rss:  102MB ->  102MB (   +0MB)	AST_validation
time:   0.000; rss:  102MB ->  102MB (   +0MB)	maybe_create_a_macro_crate
time:   0.000; rss:  102MB ->  102MB (   +0MB)	finalize_imports
time:   0.000; rss:  102MB ->  102MB (   +0MB)	resolve_access_levels
time:   0.001; rss:  102MB ->  102MB (   +0MB)	finalize_macro_resolutions
time:   0.010; rss:  102MB ->  110MB (   +8MB)	late_resolve_crate
time:   0.000; rss:  110MB ->  110MB (   +0MB)	resolve_main
time:   0.001; rss:  110MB ->  110MB (   +0MB)	resolve_check_unused
time:   0.000; rss:  110MB ->  110MB (   +0MB)	resolve_report_errors
time:   0.000; rss:  110MB ->  110MB (   +0MB)	resolve_postprocess
time:   0.012; rss:  102MB ->  110MB (   +8MB)	resolve_crate
time:   0.000; rss:  110MB ->  110MB (   +0MB)	complete_gated_feature_checking
time:   0.075; rss:   60MB ->  110MB (  +49MB)	configure_and_expand
{"artifact":"/usr/home/liquid/tmp/.tmpjy7G48/target/debug/deps/rand_distr-c80d221fe2857f65.d","emit":"dep-info"}
time:   0.000; rss:  110MB ->  110MB (   +0MB)	prepare_outputs
time:   0.020; rss:  110MB ->  116MB (   +6MB)	hir_lowering
time:   0.003; rss:  116MB ->  116MB (   +0MB)	early_lint_checks
time:   0.002; rss:  116MB ->  116MB (   +0MB)	drop_ast
time:   0.000; rss:  115MB ->  115MB (   +0MB)	setup_global_ctxt
time:   0.000; rss:  115MB ->  115MB (   +0MB)	looking_for_entry_point
time:   0.000; rss:  115MB ->  118MB (   +4MB)	looking_for_derive_registrar
time:   0.006; rss:  115MB ->  118MB (   +4MB)	misc_checking_1
time:   0.009; rss:  118MB ->  123MB (   +4MB)	type_collecting
time:   0.000; rss:  123MB ->  123MB (   +0MB)	impl_wf_inference
time:   0.000; rss:  123MB ->  123MB (   +0MB)	unsafety_checking
time:   0.012; rss:  123MB ->  144MB (  +21MB)	coherence_checking
time:   0.049; rss:  144MB ->  149MB (   +4MB)	wf_checking
time:   0.007; rss:  149MB ->  149MB (   +0MB)	item_types_checking
time:   0.167; rss:  149MB ->  170MB (  +21MB)	item_bodies_checking
time:   0.245; rss:  118MB ->  170MB (  +51MB)	type_check_crate
time:   0.003; rss:  170MB ->  170MB (   +0MB)	match_checking
time:   0.002; rss:  170MB ->  170MB (   +0MB)	liveness_and_intrinsic_checking
time:   0.005; rss:  170MB ->  170MB (   +0MB)	misc_checking_2
time:   0.118; rss:  170MB ->  180MB (  +10MB)	MIR_borrow_checking
time:   0.001; rss:  180MB ->  180MB (   +0MB)	MIR_effect_checking
time:   0.000; rss:  180MB ->  180MB (   +0MB)	layout_testing
{"message":"field is never read: `delta`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/gamma.rs","byte_start":15193,"byte_end":15201,"line_start":547,"line_end":547,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    delta: N,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`BC` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/gamma.rs","byte_start":15062,"byte_end":15067,"line_start":542,"line_end":542,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/gamma.rs","byte_start":15062,"byte_end":15067,"line_start":542,"line_end":542,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/clone.rs","byte_start":4850,"byte_end":4909,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":1},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/gamma.rs","byte_start":15075,"byte_end":15080,"line_start":542,"line_end":542,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/gamma.rs","byte_start":15075,"byte_end":15080,"line_start":542,"line_end":542,"column_start":23,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `delta`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gamma.rs:547:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    delta: N,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `BC` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/gamma.rs:542:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Clone, Copy, Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `alpha`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/normal_inverse_gaussian.rs","byte_start":1207,"byte_end":1215,"line_start":37,"line_end":37,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    alpha: F,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`NormalInverseGaussian` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/normal_inverse_gaussian.rs","byte_start":978,"byte_end":983,"line_start":29,"line_end":29,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, Copy)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/normal_inverse_gaussian.rs","byte_start":978,"byte_end":983,"line_start":29,"line_end":29,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, Copy)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/normal_inverse_gaussian.rs","byte_start":985,"byte_end":990,"line_start":29,"line_end":29,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"#[derive(Debug, Clone, Copy)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/normal_inverse_gaussian.rs","byte_start":985,"byte_end":990,"line_start":29,"line_end":29,"column_start":17,"column_end":22,"is_primary":false,"text":[{"text":"#[derive(Debug, Clone, Copy)]","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/clone.rs","byte_start":4850,"byte_end":4909,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":30},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `alpha`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/normal_inverse_gaussian.rs:37:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    alpha: F,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `NormalInverseGaussian` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/normal_inverse_gaussian.rs:29:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, Clone, Copy)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"field is never read: `n`","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/zipf.rs","byte_start":4642,"byte_end":4646,"line_start":148,"line_end":148,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    n: F,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Zipf` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis","code":null,"level":"note","spans":[{"file_name":"src/zipf.rs","byte_start":4554,"byte_end":4559,"line_start":145,"line_end":145,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zipf.rs","byte_start":4554,"byte_end":4559,"line_start":145,"line_end":145,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":10,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Clone)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/clone.rs","byte_start":4850,"byte_end":4909,"line_start":139,"line_end":141,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro Clone($item:item) {","highlight_start":1,"highlight_end":30},{"text":"    /* compiler built-in */","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/zipf.rs","byte_start":4567,"byte_end":4572,"line_start":145,"line_end":145,"column_start":23,"column_end":28,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/zipf.rs","byte_start":4567,"byte_end":4572,"line_start":145,"line_end":145,"column_start":23,"column_end":28,"is_primary":false,"text":[{"text":"#[derive(Clone, Copy, Debug)]","highlight_start":23,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Debug)]","def_site_span":{"file_name":"/usr/home/liquid/rust/worktree-benchmarking/library/core/src/fmt/mod.rs","byte_start":22619,"byte_end":22686,"line_start":668,"line_end":670,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    pub macro Debug($item:item) {","highlight_start":5,"highlight_end":34},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field is never read: `n`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zipf.rs:148:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    n: F,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Zipf` has derived impls for the traits `Debug` and `Clone`, but these are intentionally ignored during dead code analysis\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/zipf.rs:145:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Clone, Copy, Debug)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
time:   0.003; rss:  180MB ->  181MB (   +1MB)	death_checking
time:   0.000; rss:  181MB ->  181MB (   +0MB)	unused_lib_feature_checking
time:   0.006; rss:  181MB ->  181MB (   +0MB)	crate_lints
time:   0.003; rss:  181MB ->  181MB (   +0MB)	module_lints
time:   0.009; rss:  181MB ->  181MB (   +0MB)	lint_checking
time:   0.005; rss:  181MB ->  181MB (   +0MB)	privacy_checking_modules
time:   0.020; rss:  180MB ->  181MB (   +1MB)	misc_checking_3
time:   0.000; rss:  186MB ->  186MB (   +0MB)	monomorphization_collector_root_collections
time:   0.021; rss:  186MB ->  190MB (   +4MB)	monomorphization_collector_graph_walk
time:   0.003; rss:  190MB ->  190MB (   +0MB)	partition_and_assert_distinct_symbols
time:   0.063; rss:  181MB ->  190MB (   +9MB)	generate_crate_metadata
{"artifact":"/usr/home/liquid/tmp/.tmpjy7G48/target/debug/deps/librand_distr-c80d221fe2857f65.rmeta","emit":"metadata"}
time:   0.000; rss:  193MB ->  193MB (   +0MB)	find_cgu_reuse
time:   0.058; rss:  193MB ->  221MB (  +28MB)	codegen_to_LLVM_IR
time:   0.060; rss:  190MB ->  221MB (  +31MB)	codegen_crate
time:   0.000; rss:  221MB ->  221MB (   +0MB)	serialize_dep_graph
time:   0.013; rss:  221MB ->  155MB (  -66MB)	free_global_ctxt
time:   0.079; rss:  199MB ->  156MB (  -44MB)	LLVM_passes(crate)
time:   0.000; rss:  154MB ->  154MB (   +0MB)	join_worker_thread
time:   0.014; rss:  155MB ->  154MB (   -1MB)	finish_ongoing_codegen
time:   0.000; rss:  154MB ->  154MB (   +0MB)	llvm_dump_timing_file
time:   0.000; rss:  154MB ->  154MB (   +0MB)	serialize_work_products
time:   0.000; rss:  154MB ->  154MB (   +0MB)	link_binary_check_files_are_writeable
time:   0.003; rss:  154MB ->  154MB (   +0MB)	link_rlib
{"artifact":"/usr/home/liquid/tmp/.tmpjy7G48/target/debug/deps/librand_distr-c80d221fe2857f65.rlib","emit":"link"}
time:   0.000; rss:  154MB ->  154MB (   +0MB)	link_binary_remove_temps
time:   0.004; rss:  154MB ->  154MB (   +0MB)	link_binary
time:   0.004; rss:  154MB ->  154MB (   +0MB)	link_crate
time:   0.018; rss:  155MB ->  154MB (   +0MB)	link
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
time:   0.659; rss:   46MB ->  154MB ( +108MB)	total
