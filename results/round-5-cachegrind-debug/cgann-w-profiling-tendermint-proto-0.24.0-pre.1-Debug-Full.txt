--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name tendermint_proto --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=a96c0640ba6ffb89 -C extra-filename=-a96c0640ba6ffb89 --out-dir /usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps --extern bytes=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libbytes-243b1106a731a505.rmeta --extern flex_error=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libflex_error-d920bbb8b718f9a6.rmeta --extern num_derive=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libnum_derive-48da11f4d6d46b78.so --extern num_traits=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libnum_traits-442542bb0ff3ec66.rmeta --extern prost=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libprost-7879ab29b296b3b7.rmeta --extern prost_types=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libprost_types-1c1b43a4f286a8b0.rmeta --extern serde=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libserde-c827c75af33ce6e1.rmeta --extern serde_bytes=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libserde_bytes-3ee91f96d7d60763.rmeta --extern subtle_encoding=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libsubtle_encoding-7bbcc3474a18f770.rmeta --extern time=/usr/home/liquid/tmp/.tmpat6tCc/target/debug/deps/libtime-214197ca977c0a29.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-tendermint-proto-0.24.0-pre.1-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
22,493,839,245 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
714,925,848 ( 3.18%)  ./malloc/malloc.c:_int_free
652,411,955 ( 2.90%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
600,174,555 ( 2.67%)  ./malloc/malloc.c:_int_malloc
403,079,362 ( 1.79%)  ./malloc/malloc.c:malloc
375,184,701 ( 1.67%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
208,558,138 ( 0.93%)  ./malloc/malloc.c:free
136,700,050 ( 0.61%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
133,909,452 ( 0.60%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
120,022,551 ( 0.53%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs:<proc_macro::bridge::server::Dispatcher<proc_macro::bridge::server::MarkedTypes<rustc_expand::proc_macro_server::Rustc>> as proc_macro::bridge::server::DispatcherTrait>::dispatch
118,477,031 ( 0.53%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
113,606,328 ( 0.51%)  ./elf/../elf/dl-tls.c:_dl_update_slotinfo
108,846,958 ( 0.48%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 93,642,360 ( 0.42%)  ./malloc/malloc.c:malloc_consolidate
 89,964,412 ( 0.40%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 88,198,508 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 81,704,534 ( 0.36%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 81,125,995 ( 0.36%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 80,382,309 ( 0.36%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 80,040,309 ( 0.36%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 78,929,059 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 76,431,452 ( 0.34%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 74,191,554 ( 0.33%)  ./malloc/malloc.c:realloc
 63,116,017 ( 0.28%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 59,638,889 ( 0.27%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 54,261,587 ( 0.24%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 54,130,914 ( 0.24%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 53,921,052 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 51,801,070 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::DecodeMut<()>>::decode
 51,571,552 ( 0.23%)  ./malloc/malloc.c:_int_realloc
 50,829,808 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 49,062,410 ( 0.22%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 48,196,624 ( 0.21%)  ./elf/../elf/dl-tls.c:update_get_addr
 47,988,626 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 46,860,340 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 45,575,749 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 44,787,754 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 44,691,537 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 44,451,331 ( 0.20%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 42,524,990 ( 0.19%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 42,422,698 ( 0.19%)  ./malloc/malloc.c:calloc
 42,303,411 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 42,070,717 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 41,174,091 ( 0.18%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 41,034,390 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 40,603,687 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 40,430,738 ( 0.18%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 40,358,027 ( 0.18%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 39,642,721 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 38,824,320 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 38,168,691 ( 0.17%)  ./elf/../sysdeps/x86_64/tls_get_addr.S:__tls_get_addr
 37,556,262 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 37,002,058 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 36,588,498 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs:<core::result::Result<T,E> as proc_macro::bridge::rpc::DecodeMut<S>>::decode
 36,404,228 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 35,388,359 ( 0.16%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 34,701,701 ( 0.15%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 34,546,497 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 34,263,562 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 33,825,174 ( 0.15%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 33,383,344 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs:proc_macro::bridge::scoped_cell::ScopedCell<T>::replace
 32,670,113 ( 0.15%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 32,371,170 ( 0.14%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 32,170,651 ( 0.14%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 32,127,928 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 32,122,113 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs:<std::collections::hash::map::DefaultHasher as core::hash::Hasher>::write
 31,030,802 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<proc_macro::bridge::api_tags::Method as proc_macro::bridge::rpc::Encode<S>>::encode
 30,985,961 ( 0.14%)  ???:???
 30,796,852 ( 0.14%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 30,629,957 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_expand::proc_macro_server::Ident, proc_macro::bridge::client::Ident>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 29,814,869 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 29,771,745 ( 0.13%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 29,337,587 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 29,210,468 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::ptr::drop_in_place<proc_macro::bridge::scoped_cell::ScopedCell<T>::replace::PutBackOnDrop<proc_macro::bridge::client::BridgeStateL>>
 29,208,422 ( 0.13%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 28,558,475 ( 0.13%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 28,433,610 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<alloc::rc::Rc<rustc_span::SourceFile>, proc_macro::bridge::client::SourceFile>, alloc::collections::btree::node::marker::LeafOrInternal>>::search_tree::<core::num::nonzero::NonZeroU32>
 27,907,539 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs:<u32 as proc_macro::bridge::rpc::Encode<S>>::encode
 27,676,506 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs:core::mem::replace
 27,368,075 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 27,045,337 ( 0.12%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 26,818,228 ( 0.12%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 26,773,744 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next
 26,642,798 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs:<alloc::collections::btree::node::Handle<alloc::collections::btree::node::NodeRef<alloc::collections::btree::node::marker::Mut, core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>, alloc::collections::btree::node::marker::Leaf>, alloc::collections::btree::node::marker::Edge>>::insert_recursing
 26,512,528 ( 0.12%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 26,067,272 ( 0.12%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 26,057,504 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 25,714,296 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
 25,646,238 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_infer::infer::type_variable::TypeVariableTable>::probe
 25,539,569 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs:<rustc_mir_transform::simplify::CfgSimplifier>::simplify
 25,143,796 ( 0.11%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 24,534,451 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 24,416,559 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
 24,290,493 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:core::ptr::read
 24,062,178 ( 0.11%)  ./elf/dl-lookup.c:do_lookup_x
 23,824,453 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs:<rustc_middle::mir::terminator::TerminatorKind>::successors
 23,487,307 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 23,346,928 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs:alloc::string::String::push
 23,329,607 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::RegionKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 23,276,074 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
 23,246,498 ( 0.10%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
 23,185,999 ( 0.10%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 22,916,032 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs:<alloc::collections::btree::map::BTreeMap<core::num::nonzero::NonZeroU32, proc_macro::bridge::Marked<rustc_ast::tokenstream::TokenStream, proc_macro::bridge::client::TokenStream>>>::insert
 22,567,585 ( 0.10%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 108 ----------------------------------------
         .                   suppress_errors: bool,
         .               },
         .           }
         .           
         .           impl RegionckMode {
         .               /// Indicates that the MIR borrowck will repeat these region
         .               /// checks, so we should ignore errors if NLL is (unconditionally)
         .               /// enabled.
     3,210 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
         .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
         .                   // this always `true` and then proceed to eliminate the dead code.
     3,210 ( 0.00%)          match tcx.borrowck_mode() {
         .                       // If we're on Migrate mode, report AST region errors
         .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
         .           
         .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
         .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
         .                   }
     6,420 ( 0.00%)      }
         .           }
         .           
         .           /// This type contains all the things within `InferCtxt` that sit within a
         .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
         .           /// operations are hot enough that we want only one call to `borrow_mut` per
         .           /// call to `start_snapshot` and `rollback_to`.
         .           pub struct InferCtxtInner<'tcx> {
         .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
         .               /// type instantiations (`ty::Infer`) to the actual opaque
         .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
         .               /// opaque type inference variables to their corresponding
         .               /// opaque type.
         .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
         .           }
         .           
         .           impl<'tcx> InferCtxtInner<'tcx> {
   445,475 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
 3,029,230 ( 0.01%)          InferCtxtInner {
         .                       projection_cache: Default::default(),
         .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
         .                       undo_log: InferCtxtUndoLogs::default(),
         .                       const_unification_storage: ut::UnificationTableStorage::new(),
         .                       int_unification_storage: ut::UnificationTableStorage::new(),
         .                       float_unification_storage: ut::UnificationTableStorage::new(),
   267,285 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
         .                       region_obligations: vec![],
         .                       opaque_types: Default::default(),
         .                       opaque_types_vars: Default::default(),
         .                   }
   534,570 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
         .                   &self.region_obligations
         .               }
         .           
         .               #[inline]
         .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    41,620 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 2,633,020 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn int_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::IntVid,
         .                       &mut ut::UnificationStorage<ty::IntVid>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
    41,403 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               fn float_unification_table(
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
         .                   &mut self,
         .               ) -> ut::UnificationTable<
         .                   ut::InPlace<
         .                       ty::ConstVid<'tcx>,
         .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
         .                       &mut InferCtxtUndoLogs<'tcx>,
         .                   >,
         .               > {
     9,454 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
         .               }
         .           
         .               #[inline]
         .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   475,484 ( 0.00%)          self.region_constraint_storage
         .                       .as_mut()
         .                       .expect("region constraints already solved")
   578,594 ( 0.00%)              .with_log(&mut self.undo_log)
         .               }
         .           }
         .           
         .           pub struct InferCtxt<'a, 'tcx> {
         .               pub tcx: TyCtxt<'tcx>,
         .           
         .               /// The `DefId` of the item in whose context we are performing inference or typeck.
         .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
         .               /// item we are type-checking, and just consider those names as
         .               /// part of the root universe. So this would only get incremented
         .               /// when we enter into a higher-ranked (`for<..>`) type or trait
         .               /// bound.
         .               universe: Cell<ty::UniverseIndex>,
         .           }
         .           
         .           /// See the `error_reporting` module for more details.
   924,208 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
         .           pub enum ValuePairs<'tcx> {
         .               Types(ExpectedFound<Ty<'tcx>>),
         .               Regions(ExpectedFound<ty::Region<'tcx>>),
         .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
         .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
         .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
         .           }
         .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
         .           pub struct TypeTrace<'tcx> {
         .               cause: ObligationCause<'tcx>,
         .               values: ValuePairs<'tcx>,
         .           }
         .           
         .           /// The origin of a `r1 <= r2` constraint.
         .           ///
         .           /// See `error_reporting` module for more details
   832,788 ( 0.00%)  #[derive(Clone, Debug)]
         .           pub enum SubregionOrigin<'tcx> {
         .               /// Arose from a subtyping relation
    46,154 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
         .           
         .               /// When casting `&'a T` to an `&'b Trait` object,
         .               /// relating `'a` to `'b`
         .               RelateObjectBound(Span),
         .           
         .               /// Some type parameter was instantiated with the given type,
         .               /// and that type must outlive some region.
     8,251 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
         .           
         .               /// The given region parameter was instantiated with a region
         .               /// that must outlive some other region.
         .               RelateRegionParamBound(Span),
         .           
         .               /// Creating a pointer `b` to contents of another reference
         .               Reborrow(Span),
         .           
         .               /// Creating a pointer `b` to contents of an upvar
         .               ReborrowUpvar(Span, ty::UpvarId),
         .           
         .               /// Data with type `Ty<'tcx>` was borrowed
     7,898 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
         .           
         .               /// (&'a &'b T) where a >= b
     6,529 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
         .           
         .               /// Comparing the signature and requirements of an impl method against
         .               /// the containing trait.
         .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
         .           
         .               /// Comparing the signature and requirements of an impl associated type
         .               /// against the containing trait
         .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
         .               defining_use_anchor: Option<LocalDefId>,
         .           }
         .           
         .           pub trait TyCtxtInferExt<'tcx> {
         .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
         .           }
         .           
         .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
    89,095 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   267,285 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
    89,095 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> InferCtxtBuilder<'tcx> {
         .               /// Used only by `rustc_typeck` during body type-checking/inference,
         .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
         .               /// Will also change the scope for opaque type defining use checks to the given owner.
    78,570 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    96,030 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    43,650 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    61,110 ( 0.00%)      }
         .           
         .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
         .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
         .               ///
         .               /// It is only meant to be called in two places, for typeck
         .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
         .               /// in mir borrowck.
     8,110 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
     4,055 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
    25,570 ( 0.00%)          self
    12,165 ( 0.00%)      }
         .           
         .               /// Given a canonical value `C` as a starting point, create an
         .               /// inference context that contains each of the bound values
         .               /// within instantiated as a fresh variable. The `f` closure is
         .               /// invoked with the new infcx, along with the instantiated value
         .               /// `V` and a substitution `S`. This substitution `S` maps from
         .               /// the bound values in `C` to their instantiated values in `V`
         .               /// (in other words, `S(C) = V`).
   126,537 ( 0.00%)      pub fn enter_with_canonical<T, R>(
         .                   &mut self,
         .                   span: Span,
         .                   canonical: &Canonical<'tcx, T>,
         .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
         .               ) -> R
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   self.enter(|infcx| {
   202,340 ( 0.00%)              let (value, subst) =
    19,638 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   292,306 ( 0.00%)              f(infcx, value, subst)
         .                   })
   137,634 ( 0.00%)      }
         .           
   490,789 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   250,991 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
         .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
 3,786,065 ( 0.02%)          f(InferCtxt {
         .                       tcx,
         .                       defining_use_anchor,
         .                       in_progress_typeck_results,
    89,095 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
         .                       lexical_region_resolutions: RefCell::new(None),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         .                       reported_trait_errors: Default::default(),
         .                       reported_closure_mismatch: Default::default(),
         .                       tainted_by_errors_flag: Cell::new(false),
    89,095 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
         .                       in_snapshot: Cell::new(false),
         .                       skip_leak_check: Cell::new(false),
         .                       universe: Cell::new(ty::UniverseIndex::ROOT),
         .                   })
   528,362 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx, T> InferOk<'tcx, T> {
         .               pub fn unit(self) -> InferOk<'tcx, ()> {
         .                   InferOk { value: (), obligations: self.obligations }
         .               }
         .           
         .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
         .               pub fn into_value_registering_obligations(
         .                   self,
         .                   infcx: &InferCtxt<'_, 'tcx>,
         .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
         .               ) -> T {
     3,515 ( 0.00%)          let InferOk { value, obligations } = self;
    12,494 ( 0.00%)          for obligation in obligations {
       403 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
         .                   }
         .                   value
         .               }
         .           }
         .           
         .           impl<'tcx> InferOk<'tcx, ()> {
    94,453 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   377,812 ( 0.00%)          self.obligations
    94,453 ( 0.00%)      }
         .           }
         .           
         .           #[must_use = "once you start a snapshot, you should always consume it"]
         .           pub struct CombinedSnapshot<'a, 'tcx> {
         .               undo_snapshot: Snapshot<'tcx>,
         .               region_constraints_snapshot: RegionSnapshot,
         .               universe: ty::UniverseIndex,
         .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
         .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
         .                   debug!("canonical consts: {:?}", &canonical.value);
         .           
         .                   self.tcx.try_unify_abstract_consts(canonical.value)
         .               }
         .           
         .               pub fn is_in_snapshot(&self) -> bool {
         .                   self.in_snapshot.get()
   155,907 ( 0.00%)      }
         .           
 1,107,600 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
 1,246,050 ( 0.01%)          t.fold_with(&mut self.freshener())
 1,246,050 ( 0.01%)      }
         .           
         .               /// Returns the origin of the type variable identified by `vid`, or `None`
         .               /// if this is not a type variable.
         .               ///
         .               /// No attempt is made to resolve `ty`.
     3,594 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
     7,188 ( 0.00%)          match *ty.kind() {
     1,797 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
     7,188 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
         .                       }
         .                       _ => None,
         .                   }
     7,188 ( 0.00%)      }
         .           
   138,450 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, false)
   138,450 ( 0.00%)      }
         .           
         .               /// Like `freshener`, but does not replace `'static` regions.
   514,326 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
         .                   freshen::TypeFreshener::new(self, true)
   514,326 ( 0.00%)      }
         .           
    15,060 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
     7,530 ( 0.00%)          let mut inner = self.inner.borrow_mut();
     7,530 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
         .                       .type_variables()
         .                       .unsolved_variables()
         .                       .into_iter()
     3,594 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
         .                       .collect();
         .                   vars.extend(
         .                       (0..inner.int_unification_table().len())
         .                           .map(|i| ty::IntVid { index: i as u32 })
     2,668 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_int_var(v)),
         .                   );
         .                   vars.extend(
         .                       (0..inner.float_unification_table().len())
         .                           .map(|i| ty::FloatVid { index: i as u32 })
         .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
         .                           .map(|v| self.tcx.mk_float_var(v)),
         .                   );
         .                   vars
    26,355 ( 0.00%)      }
         .           
   264,151 ( 0.00%)      fn combine_fields(
         .                   &'a self,
         .                   trace: TypeTrace<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .               ) -> CombineFields<'a, 'tcx> {
 1,058,920 ( 0.00%)          CombineFields {
         .                       infcx: self,
 2,647,300 ( 0.01%)              trace,
         .                       cause: None,
         .                       param_env,
         .                       obligations: PredicateObligations::new(),
         .                   }
   264,151 ( 0.00%)      }
         .           
         .               /// Clear the "currently in a snapshot" flag, invoke the closure,
         .               /// then restore the flag to its original value. This flag is a
         .               /// debugging measure designed to detect cases where we start a
         .               /// snapshot, create type variables, and register obligations
         .               /// which may involve those type variables in the fulfillment cx,
         .               /// potentially leaving "dangling type variables" behind.
         .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
         .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
         .               ///
         .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
         .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
         .               /// obligations. As long as this fulfillment cx is fully drained
         .               /// before we return, this is not a problem, as there won't be any
         .               /// escaping obligations in the main cx. In those cases, you can
         .               /// use this function.
        72 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
         .               where
         .                   F: FnOnce(&Self) -> R,
         .               {
         .                   let flag = self.in_snapshot.replace(false);
    50,739 ( 0.00%)          let result = func(self);
         .                   self.in_snapshot.set(flag);
         .                   result
        81 ( 0.00%)      }
         .           
 1,368,532 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
         .                   debug!("start_snapshot()");
         .           
         .                   let in_snapshot = self.in_snapshot.replace(true);
         .           
         .                   let mut inner = self.inner.borrow_mut();
         .           
 4,105,596 ( 0.02%)          CombinedSnapshot {
         .                       undo_snapshot: inner.undo_log.start_snapshot(),
         .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
         .                       universe: self.universe(),
         .                       was_in_snapshot: in_snapshot,
         .                       // Borrow typeck results "in progress" (i.e., during typeck)
         .                       // to ban writes from within a snapshot to them.
   684,266 ( 0.00%)              _in_progress_typeck_results: self
         .                           .in_progress_typeck_results
         .                           .map(|typeck_results| typeck_results.borrow()),
         .                   }
 2,737,064 ( 0.01%)      }
         .           
 1,901,042 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   172,822 ( 0.00%)              undo_snapshot,
   172,822 ( 0.00%)              region_constraints_snapshot,
   172,822 ( 0.00%)              universe,
   172,822 ( 0.00%)              was_in_snapshot,
   345,644 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .                   self.universe.set(universe);
         .           
         .                   let mut inner = self.inner.borrow_mut();
   172,822 ( 0.00%)          inner.rollback_to(undo_snapshot);
         .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
         .               }
         .           
 7,671,660 ( 0.03%)      #[instrument(skip(self, snapshot), level = "debug")]
         .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
         .                   let CombinedSnapshot {
   511,444 ( 0.00%)              undo_snapshot,
         .                       region_constraints_snapshot: _,
         .                       universe: _,
   511,444 ( 0.00%)              was_in_snapshot,
 1,022,888 ( 0.00%)              _in_progress_typeck_results,
         .                   } = snapshot;
         .           
         .                   self.in_snapshot.set(was_in_snapshot);
         .           
         .                   self.inner.borrow_mut().commit(undo_snapshot);
         .               }
         .           
         .               /// Executes `f` and commit the bindings.
   288,245 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   361,889 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
    32,899 ( 0.00%)          let snapshot = self.start_snapshot();
   122,362 ( 0.00%)          let r = f(&snapshot);
   230,293 ( 0.00%)          self.commit_from(snapshot);
   233,328 ( 0.00%)          r
         .               }
         .           
         .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
 3,128,431 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
 3,858,372 ( 0.02%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
         .               {
   610,062 ( 0.00%)          let snapshot = self.start_snapshot();
 1,779,080 ( 0.01%)          let r = f(&snapshot);
         .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   590,888 ( 0.00%)          match r {
         .                       Ok(_) => {
 3,453,404 ( 0.02%)                  self.commit_from(snapshot);
         .                       }
         .                       Err(_) => {
   685,220 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
         .                       }
         .                   }
 3,378,652 ( 0.02%)          r
         .               }
         .           
         .               /// Execute `f` then unroll any bindings it creates.
   704,731 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
   810,124 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
   200,361 ( 0.00%)          let snapshot = self.start_snapshot();
   293,106 ( 0.00%)          let r = f(&snapshot);
   945,597 ( 0.00%)          self.rollback_to("probe", snapshot);
   184,149 ( 0.00%)          r
         .               }
         .           
         .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
       171 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
       228 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
         .               where
         .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
         .               {
        38 ( 0.00%)          let snapshot = self.start_snapshot();
        19 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
        38 ( 0.00%)          if should_skip {
         .                       self.skip_leak_check.set(true);
         .                   }
        76 ( 0.00%)          let r = f(&snapshot);
       171 ( 0.00%)          self.rollback_to("probe", snapshot);
         .                   self.skip_leak_check.set(was_skip_leak_check);
       228 ( 0.00%)          r
         .               }
         .           
         .               /// Scan the constraints produced since `snapshot` began and returns:
         .               ///
         .               /// - `None` -- if none of them involve "region outlives" constraints
         .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
         .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
    66,978 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
         .                   &self,
         .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
         .               ) -> Option<bool> {
   133,956 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
         .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   100,467 ( 0.00%)      }
         .           
         .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
         .               }
         .           
    12,708 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
     9,531 ( 0.00%)      }
         .           
    48,792 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
         .               where
         .                   T: at::ToTrace<'tcx>,
         .               {
         .                   let origin = &ObligationCause::dummy();
         .                   self.probe(|_| {
         .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
         .                           // Ignore obligations, since we are unrolling
         .                           // everything anyway.
         .                       })
         .                   })
    36,594 ( 0.00%)      }
         .           
   339,590 ( 0.00%)      #[instrument(skip(self), level = "debug")]
         .               pub fn sub_regions(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   b: ty::Region<'tcx>,
         .               ) {
   305,631 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
         .               }
         .           
         .               /// Require that the region `r` be equal to one of the regions in
         .               /// the set `regions`.
         .               #[instrument(skip(self), level = "debug")]
         .               pub fn member_constraint(
         .                   &self,
         .                   opaque_type_def_id: DefId,
-- line 947 ----------------------------------------
-- line 969 ----------------------------------------
         .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
         .               /// actually requiring `a <: b`. This is of course a valid coercion,
         .               /// but it's not as flexible as `FnCtxt::coerce` would be.
         .               ///
         .               /// (We may refactor this in the future, but there are a number of
         .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
         .               /// records adjustments that are required on the HIR in order to perform
         .               /// the coercion, and we don't currently have a way to manage that.)
       858 ( 0.00%)      pub fn coerce_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolyCoercePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
       572 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
         .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
         .                       a: p.a,
         .                       b: p.b,
         .                   });
     1,430 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
     1,144 ( 0.00%)      }
         .           
    31,692 ( 0.00%)      pub fn subtype_predicate(
         .                   &self,
         .                   cause: &ObligationCause<'tcx>,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   predicate: ty::PolySubtypePredicate<'tcx>,
         .               ) -> Option<InferResult<'tcx, ()>> {
         .                   // Check for two unresolved inference variables, in which case we can
         .                   // make no progress. This is partly a micro-optimization, but it's
         .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
         .                   // earlier that they are sub-unified).
         .                   //
         .                   // Note that we can just skip the binders here because
         .                   // type variables can't (at present, at
         .                   // least) capture any of the things bound by this binder.
         .                   //
         .                   // Note that this sub here is not just for diagnostics - it has semantic
         .                   // effects as well.
     2,641 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     2,641 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    18,854 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     4,162 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
         .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     4,162 ( 0.00%)                  return None;
         .                       }
         .                       _ => {}
         .                   }
         .           
         .                   Some(self.commit_if_ok(|_snapshot| {
       560 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .           
     1,120 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
         .           
         .                       Ok(ok.unit())
         .                   }))
    23,769 ( 0.00%)      }
         .           
    57,216 ( 0.00%)      pub fn region_outlives_predicate(
         .                   &self,
         .                   cause: &traits::ObligationCause<'tcx>,
         .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
         .               ) -> UnitResult<'tcx> {
         .                   self.commit_if_ok(|_snapshot| {
         .                       let ty::OutlivesPredicate(r_a, r_b) =
         .                           self.replace_bound_vars_with_placeholders(predicate);
         .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
         .                           RelateRegionParamBound(cause.span)
         .                       });
    47,680 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
         .                       Ok(())
         .                   })
    38,144 ( 0.00%)      }
         .           
         .               /// Number of type variables created so far.
       555 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
         .                   self.inner.borrow_mut().type_variables().num_vars()
     1,110 ( 0.00%)      }
         .           
   132,674 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   663,370 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
   199,011 ( 0.00%)      }
         .           
   124,300 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   460,172 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
   186,450 ( 0.00%)      }
         .           
     7,298 ( 0.00%)      pub fn next_ty_var_in_universe(
         .                   &self,
         .                   origin: TypeVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> Ty<'tcx> {
    40,139 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
     3,649 ( 0.00%)          self.tcx.mk_ty_var(vid)
    10,947 ( 0.00%)      }
         .           
         .               pub fn next_const_var(
         .                   &self,
         .                   ty: Ty<'tcx>,
         .                   origin: ConstVariableOrigin,
         .               ) -> &'tcx ty::Const<'tcx> {
         .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
         .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
         .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
         .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                       origin,
         .                       val: ConstVariableValue::Unknown { universe: self.universe() },
         .                   })
         .               }
         .           
         .               fn next_int_var_id(&self) -> IntVid {
     4,245 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
         .               }
         .           
     2,547 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_int_var(self.next_int_var_id())
     3,396 ( 0.00%)      }
         .           
         .               fn next_float_var_id(&self) -> FloatVid {
         .                   self.inner.borrow_mut().float_unification_table().new_key(None)
         .               }
         .           
         .               pub fn next_float_var(&self) -> Ty<'tcx> {
         .                   self.tcx.mk_float_var(self.next_float_var_id())
         .               }
         .           
         .               /// Creates a fresh region variable with the next available index.
         .               /// The variable will be created in the maximum universe created
         .               /// thus far, allowing it to name any region created thus far.
    56,077 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
 1,151,284 ( 0.01%)          self.next_region_var_in_universe(origin, self.universe())
   112,154 ( 0.00%)      }
         .           
         .               /// Creates a fresh region variable with the next available index
         .               /// in the given universe; typically, you can use
         .               /// `next_region_var` and just use the maximal universe.
   456,236 ( 0.00%)      pub fn next_region_var_in_universe(
         .                   &self,
         .                   origin: RegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
         .                   let region_var =
 2,965,534 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
 1,140,590 ( 0.01%)          self.tcx.mk_region(ty::ReVar(region_var))
   684,354 ( 0.00%)      }
         .           
         .               /// Return the universe that the region `r` was created in.  For
         .               /// most regions (e.g., `'static`, named regions from the user,
         .               /// etc) this is the root universe U0. For inference variables or
         .               /// placeholders, however, it will return the universe which which
         .               /// they are associated.
    61,418 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
         .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    92,127 ( 0.00%)      }
         .           
         .               /// Number of region variables created so far.
    34,130 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
         .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    51,195 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    98,770 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
         .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   197,540 ( 0.00%)      }
         .           
         .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
       335 ( 0.00%)      pub fn next_nll_region_var_in_universe(
         .                   &self,
         .                   origin: NllRegionVariableOrigin,
         .                   universe: ty::UniverseIndex,
         .               ) -> ty::Region<'tcx> {
     3,257 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
       670 ( 0.00%)      }
         .           
   763,928 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   412,529 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
         .                           // Create a region inference variable for the given
         .                           // region parameter definition.
    32,463 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
         .                       }
         .                       GenericParamDefKind::Type { .. } => {
         .                           // Create a type inference variable for the given
         .                           // type parameter definition. The substitutions are
         .                           // for actual parameters that may be referred to by
         .                           // the default of this type parameter, if it exists.
         .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
         .                           // used in a path such as `Foo::<T, U>::new()` will
         .                           // use an inference variable for `C` with `[T, U]`
         .                           // as the substitutions for the default, `(T, U)`.
   251,284 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
         .                               self.universe(),
   314,105 ( 0.00%)                      TypeVariableOrigin {
         .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
    62,821 ( 0.00%)                              param.name,
    62,821 ( 0.00%)                              Some(param.def_id),
         .                                   ),
         .                                   span,
         .                               },
         .                           );
         .           
    62,821 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
         .                       }
         .                       GenericParamDefKind::Const { .. } => {
         .                           let origin = ConstVariableOrigin {
         .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
         .                                   param.name,
         .                                   param.def_id,
         .                               ),
         .                               span,
         .                           };
         .                           let const_var_id =
     2,277 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
         .                                   origin,
         .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
         .                               });
       207 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
         .                       }
         .                   }
     1,656 ( 0.00%)      }
         .           
         .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
         .               /// type/region parameter to a fresh inference variable.
   120,237 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
   623,129 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
    80,158 ( 0.00%)      }
         .           
         .               /// Returns `true` if errors have been reported since this infcx was
         .               /// created. This is sometimes used as a heuristic to skip
         .               /// reporting errors that often occur as a result of earlier
         .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
         .               /// inference variables, regionck errors).
    10,014 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
         .                   debug!(
         .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
         .                        tainted_by_errors_flag={})",
         .                       self.tcx.sess.err_count(),
         .                       self.err_count_on_creation,
         .                       self.tainted_by_errors_flag.get()
         .                   );
         .           
   218,133 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
         .                       return true; // errors reported since this infcx was made
         .                   }
         .                   self.tainted_by_errors_flag.get()
    15,021 ( 0.00%)      }
         .           
         .               /// Set the "tainted by errors" flag to true. We call this when we
         .               /// observe an error from a prior pass.
         .               pub fn set_tainted_by_errors(&self) {
         .                   debug!("set_tainted_by_errors()");
         .                   self.tainted_by_errors_flag.set(true)
         .               }
         .           
         .               /// Process the region constraints and return any any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   213,598 ( 0.00%)      pub fn resolve_regions(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) -> Vec<RegionResolutionError<'tcx>> {
   579,766 ( 0.00%)          let (var_infos, data) = {
         .                       let mut inner = self.inner.borrow_mut();
         .                       let inner = &mut *inner;
    30,514 ( 0.00%)              assert!(
    91,542 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
         .                           "region_obligations not empty: {:#?}",
         .                           inner.region_obligations
         .                       );
         .                       inner
         .                           .region_constraint_storage
         .                           .take()
         .                           .expect("regions already resolved")
         .                           .with_log(&mut inner.undo_log)
         .                           .into_infos_and_data()
    30,514 ( 0.00%)          };
         .           
         .                   let region_rels =
    30,514 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
         .           
   274,626 ( 0.00%)          let (lexical_region_resolutions, errors) =
   732,336 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
         .           
   122,056 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    30,514 ( 0.00%)          assert!(old_value.is_none());
         .           
         .                   errors
   274,626 ( 0.00%)      }
         .           
         .               /// Process the region constraints and report any errors that
         .               /// result. After this, no more unification operations should be
         .               /// done -- or the compiler will panic -- but it is legal to use
         .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   305,140 ( 0.00%)      pub fn resolve_regions_and_report_errors(
         .                   &self,
         .                   region_context: DefId,
         .                   outlives_env: &OutlivesEnvironment<'tcx>,
         .                   mode: RegionckMode,
         .               ) {
    61,028 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
         .           
    91,542 ( 0.00%)          if !self.is_tainted_by_errors() {
         .                       // As a heuristic, just skip reporting region errors
         .                       // altogether if other errors have been reported while
         .                       // this infcx was in use.  This is totally hokey but
         .                       // otherwise we have a hard time separating legit region
         .                       // errors from silly ones.
    61,028 ( 0.00%)              self.report_region_errors(&errors);
         .                   }
   152,570 ( 0.00%)      }
         .           
         .               /// Obtains (and clears) the current set of region
         .               /// constraints. The inference context is still usable: further
         .               /// unifications will simply add new constraints.
         .               ///
         .               /// This method is not meant to be used with normal lexical region
         .               /// resolution. Rather, it is used in the NLL mode as a kind of
         .               /// interim hack: basically we run normal type-check and generate
-- line 1307 ----------------------------------------
-- line 1319 ----------------------------------------
         .               }
         .           
         .               /// Gives temporary access to the region constraint data.
         .               pub fn with_region_constraints<R>(
         .                   &self,
         .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
         .               ) -> R {
         .                   let mut inner = self.inner.borrow_mut();
    71,572 ( 0.00%)          op(inner.unwrap_region_constraints().data())
         .               }
         .           
         .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
         .                   let mut inner = self.inner.borrow_mut();
         .                   let inner = &mut *inner;
         .                   inner
         .                       .region_constraint_storage
         .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
         .                       .var_origin(vid)
         .               }
         .           
         .               /// Takes ownership of the list of variable regions. This implies
         .               /// that all the region constraints have already been taken, and
         .               /// hence that `resolve_regions_and_report_errors` can never be
         .               /// called. This is used only during NLL processing to "hand off" ownership
         .               /// of the set of region variables into the NLL region context.
    20,275 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
         .                   let mut inner = self.inner.borrow_mut();
    77,045 ( 0.00%)          let (var_infos, data) = inner
         .                       .region_constraint_storage
         .                       .take()
         .                       .expect("regions already resolved")
         .                       .with_log(&mut inner.undo_log)
     4,055 ( 0.00%)              .into_infos_and_data();
     4,055 ( 0.00%)          assert!(data.is_empty());
         .                   var_infos
    32,440 ( 0.00%)      }
         .           
         .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
         .                   self.resolve_vars_if_possible(t).to_string()
         .               }
         .           
         .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
         .               /// universe index of `TyVar(vid)`.
    53,072 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
         .                   use self::type_variable::TypeVariableValue;
         .           
   159,216 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
         .                       TypeVariableValue::Known { value } => Ok(value),
         .                       TypeVariableValue::Unknown { universe } => Err(universe),
         .                   }
   185,752 ( 0.00%)      }
         .           
         .               /// Resolve any type variables found in `value` -- but only one
         .               /// level.  So, if the variable `?X` is bound to some type
         .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
         .               /// itself be bound to a type).
         .               ///
         .               /// Useful when you only need to inspect the outermost level of
         .               /// the type and don't care about nested types (or perhaps you
         .               /// will be resolving them as well, e.g. in a loop).
         .               pub fn shallow_resolve<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,205,957 ( 0.01%)          value.fold_with(&mut ShallowResolver { infcx: self })
         .               }
         .           
   108,910 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
         .                   self.inner.borrow_mut().type_variables().root_var(var)
   163,365 ( 0.00%)      }
         .           
         .               /// Where possible, replaces type/const variables in
         .               /// `value` with their final value. Note that region variables
         .               /// are unaffected. If a type/const variable has not been unified, it
         .               /// is left as is. This is an idempotent operation that does
         .               /// not affect inference state in any way and so you can do it
         .               /// at will.
     1,052 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
 1,119,110 ( 0.00%)          if !value.needs_infer() {
   838,189 ( 0.00%)              return value; // Avoid duplicated subst-folding.
         .                   }
 1,117,232 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
 1,363,387 ( 0.01%)          value.fold_with(&mut r)
     1,182 ( 0.00%)      }
         .           
         .               /// Returns the first unresolved variable contained in `T`. In the
         .               /// process of visiting `T`, this will resolve (where possible)
         .               /// type variables in `T`, but it never constructs the final,
         .               /// resolved type, so it's more efficient than
         .               /// `resolve_vars_if_possible()`.
         .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
         .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
         .                   expected: &'tcx ty::Const<'tcx>,
         .                   actual: &'tcx ty::Const<'tcx>,
         .                   err: TypeError<'tcx>,
         .               ) -> DiagnosticBuilder<'tcx> {
         .                   let trace = TypeTrace::consts(cause, true, expected, actual);
         .                   self.report_and_explain_type_error(trace, &err)
         .               }
         .           
    87,777 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
         .                   &self,
         .                   span: Span,
         .                   lbrct: LateBoundRegionConversionTime,
         .                   value: ty::Binder<'tcx, T>,
         .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
         .                   let fld_r =
   581,811 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
         .                   let fld_t = |_| {
         .                       self.next_ty_var(TypeVariableOrigin {
         .                           kind: TypeVariableOriginKind::MiscVariable,
         .                           span,
         .                       })
         .                   };
         .                   let fld_c = |_, ty| {
         .                       self.next_const_var(
         .                           ty,
         .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
         .                       )
         .                   };
 1,098,457 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    58,518 ( 0.00%)      }
         .           
         .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    36,464 ( 0.00%)      pub fn verify_generic_bound(
         .                   &self,
         .                   origin: SubregionOrigin<'tcx>,
         .                   kind: GenericKind<'tcx>,
         .                   a: ty::Region<'tcx>,
         .                   bound: VerifyBound<'tcx>,
         .               ) {
         .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
         .           
    13,674 ( 0.00%)          self.inner
         .                       .borrow_mut()
         .                       .unwrap_region_constraints()
    77,486 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    31,906 ( 0.00%)      }
         .           
         .               /// Obtains the latest type of the given closure; this may be a
         .               /// closure in the current function, in which case its
         .               /// `ClosureKind` may not yet be known.
    10,474 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    20,948 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
         .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    15,711 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
         .               }
         .           
         .               /// Clears the selection, evaluation, and projection caches. This is useful when
         .               /// repeatedly attempting to select an `Obligation` while changing only
         .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
         .               pub fn clear_caches(&self) {
         .                   self.selection_cache.clear();
         .                   self.evaluation_cache.clear();
         .                   self.inner.borrow_mut().projection_cache().clear();
         .               }
         .           
         .               pub fn universe(&self) -> ty::UniverseIndex {
 1,930,412 ( 0.01%)          self.universe.get()
   699,934 ( 0.00%)      }
         .           
         .               /// Creates and return a fresh universe that extends all previous
         .               /// universes. Updates `self.universe` to that new universe.
        78 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
       262 ( 0.00%)          let u = self.universe.get().next_universe();
         .                   self.universe.set(u);
         .                   u
        78 ( 0.00%)      }
         .           
         .               /// Resolves and evaluates a constant.
         .               ///
         .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
         .               /// substitutions and environment are used to resolve the constant. Alternatively if the
         .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
         .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
         .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
         .               /// too generic for the constant to be evaluated then `Err(ErrorHandled::TooGeneric)` is
         .               /// returned.
         .               ///
         .               /// This handles inferences variables within both `param_env` and `substs` by
         .               /// performing the operation on their respective canonical forms.
       832 ( 0.00%)      pub fn const_eval_resolve(
         .                   &self,
         .                   param_env: ty::ParamEnv<'tcx>,
         .                   unevaluated: ty::Unevaluated<'tcx>,
         .                   span: Option<Span>,
         .               ) -> EvalToConstValueResult<'tcx> {
        64 ( 0.00%)          let substs = self.resolve_vars_if_possible(unevaluated.substs);
         .           
         .                   // Postpone the evaluation of constants whose substs depend on inference
         .                   // variables
         .                   if substs.has_infer_types_or_consts() {
         .                       return Err(ErrorHandled::TooGeneric);
         .                   }
         .           
        64 ( 0.00%)          let param_env_erased = self.tcx.erase_regions(param_env);
         .                   let substs_erased = self.tcx.erase_regions(substs);
         .           
         .                   let unevaluated = ty::Unevaluated {
         .                       def: unevaluated.def,
         .                       substs: substs_erased,
       128 ( 0.00%)              promoted: unevaluated.promoted,
         .                   };
         .           
         .                   // The return value is the evaluated value which doesn't contain any reference to inference
         .                   // variables, thus we don't need to substitute back the original values.
       768 ( 0.00%)          self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
       576 ( 0.00%)      }
         .           
         .               /// If `typ` is a type variable of some kind, resolve it one level
         .               /// (but do not resolve types found in the result). If `typ` is
         .               /// not a type variable, just return it unmodified.
         .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
12,535,056 ( 0.06%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
 6,705,691 ( 0.03%)          match *typ.kind() {
         .                       ty::Infer(ty::TyVar(v)) => {
         .                           // Not entirely obvious: if `typ` is a type variable,
         .                           // it can be resolved to an int/float variable, which
         .                           // can then be recursively resolved, hence the
         .                           // recursion. Note though that we prevent type
         .                           // variables from unifying to other type variables
         .                           // directly (though they may be embedded
         .                           // structurally), and we prevent cycles in any case,
         .                           // so this recursion should always be of very limited
         .                           // depth.
         .                           //
         .                           // Note: if these two lines are combined into one we get
         .                           // dynamic borrow errors on `self.inner`.
 3,493,272 ( 0.02%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
         .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
         .                       }
         .           
    65,324 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .int_unification_table()
         .                           .probe_value(v)
    19,926 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       ty::Infer(ty::FloatVar(v)) => self
         .                           .inner
         .                           .borrow_mut()
         .                           .float_unification_table()
         .                           .probe_value(v)
         .                           .map(|v| v.to_type(self.tcx))
         .                           .unwrap_or(typ),
         .           
         .                       _ => typ,
         .                   }
14,101,938 ( 0.06%)      }
         .           
         .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
         .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
         .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
         .               ///
         .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
         .               /// inlined, despite being large, because it has only two call sites that
         .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
         .               #[inline(always)]
         .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
         .                   match infer_var {
         .                       TyOrConstInferVar::Ty(v) => {
         .                           use self::type_variable::TypeVariableValue;
         .           
         .                           // If `inlined_probe` returns a `Known` value, it never equals
         .                           // `ty::Infer(ty::TyVar(v))`.
 3,758,943 ( 0.02%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
         .                               TypeVariableValue::Unknown { .. } => false,
         .                               TypeVariableValue::Known { .. } => true,
         .                           }
         .                       }
         .           
         .                       TyOrConstInferVar::TyInt(v) => {
         .                           // If `inlined_probe_value` returns a value it's always a
         .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
         .                           // `ty::Infer(_)`.
    10,674 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
         .                       }
         .           
         .                       TyOrConstInferVar::TyFloat(v) => {
         .                           // If `probe_value` returns a value it's always a
         .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
         .                           //
         .                           // Not `inlined_probe_value(v)` because this call site is colder.
         .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
         .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
         .               Const(ConstVid<'tcx>),
         .           }
         .           
         .           impl<'tcx> TyOrConstInferVar<'tcx> {
         .               /// Tries to extract an inference variable from a type or a constant, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    43,494 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
         .                   match arg.unpack() {
         .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
         .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
         .                       GenericArgKind::Lifetime(_) => None,
         .                   }
    43,494 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a type, returns `None`
         .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     4,148 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   427,206 ( 0.00%)          match *ty.kind() {
    94,362 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
       662 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
         .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
         .                       _ => None,
         .                   }
     4,148 ( 0.00%)      }
         .           
         .               /// Tries to extract an inference variable from a constant, returns `None`
         .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
         .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
         .                   match ct.val {
         .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
         .                       _ => None,
         .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
         .           }
         .           
         .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
         .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
         .                   self.infcx.tcx
         .               }
         .           
         .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 2,376,881 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
         .               }
         .           
     2,748 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
     1,818 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
     1,110 ( 0.00%)              self.infcx
         .                           .inner
         .                           .borrow_mut()
         .                           .const_unification_table()
       666 ( 0.00%)                  .probe_value(*vid)
         .                           .val
         .                           .known()
         .                           .unwrap_or(ct)
         .                   } else {
         .                       ct
         .                   }
     3,435 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TypeTrace<'tcx> {
         .               pub fn span(&self) -> Span {
        26 ( 0.00%)          self.cause.span
         .               }
         .           
         .               pub fn types(
         .                   cause: &ObligationCause<'tcx>,
         .                   a_is_expected: bool,
         .                   a: Ty<'tcx>,
         .                   b: Ty<'tcx>,
         .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
         .                   b: &'tcx ty::Const<'tcx>,
         .               ) -> TypeTrace<'tcx> {
         .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
         .               }
         .           }
         .           
         .           impl<'tcx> SubregionOrigin<'tcx> {
         .               pub fn span(&self) -> Span {
        65 ( 0.00%)          match *self {
        13 ( 0.00%)              Subtype(ref a) => a.span(),
         .                       RelateObjectBound(a) => a,
         .                       RelateParamBound(a, ..) => a,
         .                       RelateRegionParamBound(a) => a,
         .                       Reborrow(a) => a,
         .                       ReborrowUpvar(a, _) => a,
         .                       DataBorrowed(_, a) => a,
         .                       ReferenceOutlivesReferent(_, a) => a,
         .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
         .                       CompareImplTypeObligation { span, .. } => span,
         .                   }
         .               }
         .           
         .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
         .               where
         .                   F: FnOnce() -> Self,
         .               {
   103,954 ( 0.00%)          match *cause.code() {
    20,691 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
   103,455 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
         .                       }
         .           
         .                       traits::ObligationCauseCode::CompareImplMethodObligation {
         .                           impl_item_def_id,
         .                           trait_item_def_id,
         .                       } => SubregionOrigin::CompareImplMethodObligation {
         .                           span: cause.span,
         .                           impl_item_def_id,
-- line 1836 ----------------------------------------

11,537,680 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs
--------------------------------------------------------------------------------
Ir                  

-- line 40 ----------------------------------------
         .           
         .           impl<BorrowType: marker::BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .               /// Looks up a given key in a (sub)tree headed by the node, recursively.
         .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
         .               /// returns a `GoDown` with the handle of the leaf edge where the key belongs.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
10,509,794 ( 0.05%)      pub fn search_tree<Q: ?Sized>(
         .                   mut self,
         .                   key: &Q,
         .               ) -> SearchResult<BorrowType, K, V, marker::LeafOrInternal, marker::Leaf>
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
         .                   loop {
       180 ( 0.00%)              self = match self.search_node(key) {
         .                           Found(handle) => return Found(handle),
 2,054,193 ( 0.01%)                  GoDown(handle) => match handle.force() {
       380 ( 0.00%)                      Leaf(leaf) => return GoDown(leaf),
         .                               Internal(internal) => internal.descend(),
         .                           },
         .                       }
         .                   }
 4,415,395 ( 0.02%)      }
         .           
         .               /// Descends to the nearest node where the edge matching the lower bound
         .               /// of the range is different from the edge matching the upper bound, i.e.,
         .               /// the nearest node that has at least one key contained in the range.
         .               ///
         .               /// If found, returns an `Ok` with that node, the strictly ascending pair of
         .               /// edge indices in the node delimiting the range, and the corresponding
         .               /// pair of bounds for continuing the search in the child nodes, in case
-- line 73 ----------------------------------------
-- line 175 ----------------------------------------
         .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
         .               /// Looks up a given key in the node, without recursion.
         .               /// Returns a `Found` with the handle of the matching KV, if any. Otherwise,
         .               /// returns a `GoDown` with the handle of the edge where the key might be found
         .               /// (if the node is internal) or where the key can be inserted.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
       240 ( 0.00%)      pub fn search_node<Q: ?Sized>(self, key: &Q) -> SearchResult<BorrowType, K, V, Type, Type>
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
       160 ( 0.00%)          match unsafe { self.find_key_index(key, 0) } {
         .                       IndexResult::KV(idx) => Found(unsafe { Handle::new_kv(self, idx) }),
       260 ( 0.00%)              IndexResult::Edge(idx) => GoDown(unsafe { Handle::new_edge(self, idx) }),
         .                   }
        40 ( 0.00%)      }
         .           
         .               /// Returns either the KV index in the node at which the key (or an equivalent)
         .               /// exists, or the edge index where the key belongs, starting from a particular index.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key, like the tree
         .               /// in a `BTreeMap` is.
         .               ///
         .               /// # Safety
         .               /// `start_index` must be a valid edge index for the node.
       120 ( 0.00%)      unsafe fn find_key_index<Q: ?Sized>(&self, key: &Q, start_index: usize) -> IndexResult
         .               where
         .                   Q: Ord,
         .                   K: Borrow<Q>,
         .               {
        60 ( 0.00%)          let node = self.reborrow();
       120 ( 0.00%)          let keys = node.keys();
         .                   debug_assert!(start_index <= keys.len());
21,127,902 ( 0.09%)          for (offset, k) in unsafe { keys.get_unchecked(start_index..) }.iter().enumerate() {
88,201,296 ( 0.39%)              match key.cmp(k.borrow()) {
         .                           Ordering::Greater => {}
         .                           Ordering::Equal => return IndexResult::KV(start_index + offset),
         .                           Ordering::Less => return IndexResult::Edge(start_index + offset),
         .                       }
         .                   }
        40 ( 0.00%)          IndexResult::Edge(keys.len())
       100 ( 0.00%)      }
         .           
         .               /// Finds an edge index in the node delimiting the lower bound of a range.
         .               /// Also returns the lower bound to be used for continuing the search in
         .               /// the matching child node, if `self` is an internal node.
         .               ///
         .               /// The result is meaningful only if the tree is ordered by key.
         .               fn find_lower_bound_index<'r, Q>(
         .                   &self,
-- line 226 ----------------------------------------

 5,112,951 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/search.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 180 ----------------------------------------
          .           /// assert_eq!(v, &[0.into()]);
          .           ///
          .           /// // Ensure that the last item was dropped.
          .           /// assert!(weak.upgrade().is_none());
          .           /// ```
          .           #[stable(feature = "drop_in_place", since = "1.8.0")]
          .           #[lang = "drop_in_place"]
          .           #[allow(unconditional_recursion)]
219,419,334 ( 0.98%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
          .               // Code here does not matter - this is replaced by the
          .               // real drop glue by the compiler.
          .           
          .               // SAFETY: see comment above
          .               unsafe { drop_in_place(to_drop) }
          .           }
          .           
          .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 206 ----------------------------------------
          .           #[inline(always)]
          .           #[must_use]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_promotable]
          .           #[rustc_const_stable(feature = "const_ptr_null", since = "1.24.0")]
          .           #[rustc_diagnostic_item = "ptr_null"]
          .           pub const fn null<T>() -> *const T {
          .               0 as *const T
      4,111 ( 0.00%)  }
          .           
          .           /// Creates a null mutable raw pointer.
          .           ///
          .           /// # Examples
          .           ///
          .           /// ```
          .           /// use std::ptr;
          .           ///
-- line 222 ----------------------------------------
-- line 251 ----------------------------------------
          .           /// let x = [5, 6, 7];
          .           /// let raw_pointer = x.as_ptr();
          .           /// let slice = ptr::slice_from_raw_parts(raw_pointer, 3);
          .           /// assert_eq!(unsafe { &*slice }[2], 7);
          .           /// ```
          .           #[inline]
          .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
          .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
  1,040,012 ( 0.00%)  pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
  1,300,015 ( 0.01%)      from_raw_parts(data.cast(), len)
    520,006 ( 0.00%)  }
          .           
          .           /// Performs the same functionality as [`slice_from_raw_parts`], except that a
          .           /// raw mutable slice is returned, as opposed to a raw immutable slice.
          .           ///
          .           /// See the documentation of [`slice_from_raw_parts`] for more details.
          .           ///
          .           /// This function is safe, but actually using the return value is unsafe.
          .           /// See the documentation of [`slice::from_raw_parts_mut`] for slice safety requirements.
-- line 269 ----------------------------------------
-- line 283 ----------------------------------------
          .           ///     (*slice)[2] = 99; // assign a value at an index in the slice
          .           /// };
          .           ///
          .           /// assert_eq!(unsafe { &*slice }[2], 99);
          .           /// ```
          .           #[inline]
          .           #[stable(feature = "slice_from_raw_parts", since = "1.42.0")]
          .           #[rustc_const_unstable(feature = "const_slice_from_raw_parts", issue = "67456")]
  3,617,176 ( 0.02%)  pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
  1,356,441 ( 0.01%)      from_raw_parts_mut(data.cast(), len)
    904,294 ( 0.00%)  }
          .           
          .           /// Swaps the values at two mutable locations of the same type, without
          .           /// deinitializing either.
          .           ///
          .           /// But for the following two exceptions, this function is semantically
          .           /// equivalent to [`mem::swap`]:
          .           ///
          .           /// * It operates on raw pointers instead of references. When references are
-- line 301 ----------------------------------------
-- line 366 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .           
          .               // Perform the swap
          .               // SAFETY: the caller must guarantee that `x` and `y` are
          .               // valid for writes and properly aligned. `tmp` cannot be
          .               // overlapping either `x` or `y` because `tmp` was just allocated
          .               // on the stack as a separate allocated object.
          .               unsafe {
        159 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
        159 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
          .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
          .               }
          .           }
          .           
          .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
          .           /// beginning at `x` and `y`. The two regions must *not* overlap.
          .           ///
          .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
          .                       return;
          .                   }
          .               }
          .           
          .               // Direct swapping, for the cases not going through the block optimization.
          .               // SAFETY: the caller must guarantee that `x` and `y` are valid
          .               // for writes, properly aligned, and non-overlapping.
          .               unsafe {
      5,832 ( 0.00%)          let z = read(x);
          .                   copy_nonoverlapping(y, x, 1);
          .                   write(y, z);
          .               }
          .           }
          .           
          .           #[inline]
          .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
          .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 677 ----------------------------------------
          .           ///
          .           /// assert_eq!(s, "bar");
          .           /// ```
          .           ///
          .           /// [valid]: self#safety
          .           #[inline]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_const_unstable(feature = "const_ptr_read", issue = "80377")]
  6,715,650 ( 0.03%)  pub const unsafe fn read<T>(src: *const T) -> T {
          .               // We are calling the intrinsics directly to avoid function calls in the generated code
          .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
          .               extern "rust-intrinsic" {
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
  1,820,399 ( 0.01%)      let mut tmp = MaybeUninit::<T>::uninit();
          .               // SAFETY: the caller must guarantee that `src` is valid for reads.
          .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
          .               // the stack as a separate allocated object.
          .               //
          .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
          .               // to be properly initialized.
          .               unsafe {
 12,201,730 ( 0.05%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 81,796,079 ( 0.36%)          tmp.assume_init()
          .               }
  3,273,102 ( 0.01%)  }
          .           
          .           /// Reads the value from `src` without moving it. This leaves the
          .           /// memory in `src` unchanged.
          .           ///
          .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
          .           ///
          .           /// # Safety
          .           ///
-- line 712 ----------------------------------------
-- line 872 ----------------------------------------
          .           /// swap(&mut foo, &mut bar);
          .           ///
          .           /// assert_eq!(foo, "bar");
          .           /// assert_eq!(bar, "foo");
          .           /// ```
          .           #[inline]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_const_unstable(feature = "const_ptr_write", issue = "86302")]
  4,670,554 ( 0.02%)  pub const unsafe fn write<T>(dst: *mut T, src: T) {
          .               // We are calling the intrinsics directly to avoid function calls in the generated code
          .               // as `intrinsics::copy_nonoverlapping` is a wrapper function.
          .               extern "rust-intrinsic" {
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
          .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
          .               // `dst` cannot overlap `src` because the caller has mutable access
          .               // to `dst` while `src` is owned by this function.
          .               unsafe {
197,202,597 ( 0.88%)          copy_nonoverlapping(&src as *const T, dst, 1);
          .                   intrinsics::forget(src);
          .               }
  2,780,442 ( 0.01%)  }
          .           
          .           /// Overwrites a memory location with the given value without reading or
          .           /// dropping the old value.
          .           ///
          .           /// Unlike [`write()`], the pointer may be unaligned.
          .           ///
          .           /// `write_unaligned` does not drop the contents of `dst`. This is safe, but it
          .           /// could leak allocations or resources, so care should be taken not to overwrite
-- line 903 ----------------------------------------
-- line 1206 ----------------------------------------
          .               if stride == 1 {
          .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
          .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
          .                   //
          .                   //    round_up_to_next_alignment(p, a) - p
          .                   //
          .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
          .                   // for LLVM to be able to utilize the various optimizations it knows about.
    117,445 ( 0.00%)          return wrapping_sub(
    252,280 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
          .                       p as usize,
          .                   );
          .               }
          .           
          .               let pmoda = p as usize & a_minus_one;
          .               if pmoda == 0 {
          .                   // Already aligned. Yay!
          .                   return 0;
-- line 1223 ----------------------------------------
-- line 1347 ----------------------------------------
          .           /// // Converting the reference to a `*const u8` compares by address.
          .           /// assert!(std::ptr::eq(
          .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
          .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
          .           /// ));
          .           /// ```
          .           #[stable(feature = "ptr_eq", since = "1.17.0")]
          .           #[inline]
          3 ( 0.00%)  pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  8,342,117 ( 0.04%)      a == b
          4 ( 0.00%)  }
          .           
          .           /// Hash a raw pointer.
          .           ///
          .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
          .           /// by its address rather than the value it points to
          .           /// (which is what the `Hash for &T` implementation does).
          .           ///
          .           /// # Examples
-- line 1365 ----------------------------------------

 38,541,939 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 11,809,812 ( 0.05%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    842,288 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
251,249,155 ( 1.12%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  1,450,524 ( 0.01%)          self.stride += Group::WIDTH;
  1,450,524 ( 0.01%)          self.pos += self.stride;
  1,225,107 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
  1,040,948 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  2,228,210 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    448,992 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  2,792,229 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    598,381 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  2,120,539 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  2,830,808 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
     16,154 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
          .           
          .           impl<T> RawTable<T, Global> {
          .               /// Creates a new empty hash table without allocating any memory.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
        297 ( 0.00%)      pub const fn new() -> Self {
        792 ( 0.00%)          Self {
        198 ( 0.00%)              table: RawTableInner::new_in(Global),
          .                       marker: PhantomData,
          .                   }
        198 ( 0.00%)      }
          .           
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               #[cfg(feature = "raw")]
          .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
          .                   Self::try_with_capacity_in(capacity, Global)
          .               }
          .           
-- line 413 ----------------------------------------
-- line 421 ----------------------------------------
          .           impl<T, A: Allocator + Clone> RawTable<T, A> {
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
        297 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
      6,819 ( 0.00%)          Self {
        198 ( 0.00%)              table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
        198 ( 0.00%)      }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
      1,985 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     39,938 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    166,832 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    166,832 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    333,664 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
    113,460 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    220,204 ( 0.00%)          self.erase_no_drop(&item);
      1,790 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,422,188 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     16,716 ( 0.00%)          match self.find(hash, eq) {
     55,054 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
  1,083,748 ( 0.00%)              None => None,
          .                   }
  6,041,230 ( 0.03%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    108,194 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
          .                           }
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
        693 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,431,555 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,831,940 ( 0.01%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
        495 ( 0.00%)      }
          .           
          .               /// Tries to ensure that at least `additional` items can be inserted into
          .               /// the table without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn try_reserve(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  4,194,081 ( 0.02%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  2,973,952 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 15,930,258 ( 0.07%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     44,709 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 11,294,235 ( 0.05%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 11,764,343 ( 0.05%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,379,256 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      1,804 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  2,534,442 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     39,612 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,292,014 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     86,780 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  4,815,823 ( 0.02%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  3,819,906 ( 0.02%)          self.table.items += 1;
          .                   bucket
     64,445 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    169,021 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     64,782 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    260,673 ( 0.00%)              eq(self.bucket(index).as_ref())
     29,423 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      7,986 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    188,720 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    199,667 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     12,257 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     93,399 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     14,008 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
          .               /// more, but is guaranteed to be able to hold at least this many.
          .               #[inline]
          .               pub fn capacity(&self) -> usize {
          .                   self.table.items + self.table.growth_left
          .               }
          .           
          .               /// Returns the number of elements in the table.
          .               #[inline]
        548 ( 0.00%)      pub fn len(&self) -> usize {
        274 ( 0.00%)          self.table.items
        548 ( 0.00%)      }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
        350 ( 0.00%)      pub fn is_empty(&self) -> bool {
  7,240,798 ( 0.03%)          self.len() == 0
        700 ( 0.00%)      }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
         11 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    896,717 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     65,508 ( 0.00%)          let allocation = self.into_allocation();
     49,131 ( 0.00%)          RawIntoIter {
     81,885 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     30,892 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      4,299 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1041 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
        594 ( 0.00%)      const fn new_in(alloc: A) -> Self {
  5,731,752 ( 0.03%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
      1,386 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
        396 ( 0.00%)      }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,846,816 ( 0.02%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    892,052 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  2,117,520 ( 0.01%)          Ok(Self {
          .                       ctrl,
    873,791 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  2,799,824 ( 0.01%)      }
          .           
          .               #[inline]
    150,402 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     40,008 ( 0.00%)          if capacity == 0 {
     22,515 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,742,286 ( 0.01%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
     89,157 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
    150,402 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    813,764 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    813,764 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,627,528 ( 0.01%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  7,639,102 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 22,371,410 ( 0.10%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
 10,276,617 ( 0.05%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    844,464 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 27,740,114 ( 0.12%)              for bit in group.match_byte(h2_hash) {
 55,065,955 ( 0.24%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 35,578,536 ( 0.16%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  7,919,900 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
         18 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
         18 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 27,595,432 ( 0.12%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
149,189,042 ( 0.66%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 14,118,128 ( 0.06%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 11,286,864 ( 0.05%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        147 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 21,348,377 ( 0.09%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  7,113,433 ( 0.03%)          *self.ctrl(index) = ctrl;
  7,120,222 ( 0.03%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  2,690,404 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  2,327,287 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
        396 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
 10,444,230 ( 0.05%)          self.bucket_mask == 0
        792 ( 0.00%)      }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     27,651 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
  1,150,019 ( 0.01%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    514,829 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
  1,029,682 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
  1,029,670 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  2,175,959 ( 0.01%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
         12 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    514,829 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     69,705 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  4,354,911 ( 0.02%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    514,829 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        384 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         49 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
         18 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    342,645 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
    117,710 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
    148,234 ( 0.00%)          self.items = 0;
    118,207 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    653,284 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  2,613,136 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  3,221,265 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  2,613,136 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     16,088 ( 0.00%)      fn clone(&self) -> Self {
      2,566 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
     18,099 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        794 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,953,826 ( 0.02%)      fn drop(&mut self) {
  4,479,820 ( 0.02%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  5,311,170 ( 0.02%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     65,508 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     81,885 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  1,998,723 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    337,536 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    565,232 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  1,814,242 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     44,381 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     53,288 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     73,299 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
     10,129 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    405,499 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    933,196 ( 0.00%)          if let Some(b) = self.iter.next() {
  2,915,771 ( 0.01%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    810,998 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     22,116 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
    145,597 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
      2,480 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     14,656 ( 0.00%)      fn next(&mut self) -> Option<T> {
     10,632 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     33,346 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          6 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
      4,720 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
        590 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
      4,720 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

 81,317,361 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 23 ----------------------------------------
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
    24,390 ( 0.00%)      pub ty: Ty<'tcx>,
   121,950 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
   149,960 ( 0.00%)      pub scope: DefId,
   318,246 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
 1,804,975 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        56 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    42,629 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
     1,858 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
     5,100 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
   435,772 ( 0.00%)      pub var: BoundVar,
   354,120 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
53,113,713 ( 0.24%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   434,395 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 5,624,860 ( 0.03%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    30,359 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
 6,712,429 ( 0.03%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   155,457 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
         .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
    23,434 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
       845 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
     1,690 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
     3,380 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
     1,690 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
    10,895 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    91,146 ( 0.00%)              [
    24,235 ( 0.00%)                  ref parent_substs @ ..,
    24,577 ( 0.00%)                  closure_kind_ty,
    13,480 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    18,489 ( 0.00%)                  tupled_upvars_ty,
    43,580 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
    32,685 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        78 ( 0.00%)      pub fn is_valid(self) -> bool {
       156 ( 0.00%)          self.substs.len() >= 3
       156 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
       156 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
     1,572 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     7,503 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
     2,824 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
     1,048 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    49,097 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
     5,237 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
    10,474 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        79 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        82 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       158 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
     6,810 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
    13,620 ( 0.00%)          match ty.kind() {
    27,240 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
    20,430 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
     1,848 ( 0.00%)          let tupled_tys = match self {
     2,693 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
     4,462 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
     3,617 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     3,538 ( 0.00%)          match self {
     3,693 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
         .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
   113,689 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   129,040 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
         6 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        30 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
        32 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
        36 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
    20,970 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
    11,650 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
         .                           let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
    18,640 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
     1,458 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
    12,830 ( 0.00%)          self[0]
     8,456 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     5,832 ( 0.00%)              })
         .                       .transpose()
     4,374 ( 0.00%)      }
         .           
     2,330 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
     4,660 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
         .                       predicate
        48 ( 0.00%)                  .map_bound(|pred| match pred {
         .                               ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
-- line 874 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    20,275 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 5,767,819 ( 0.03%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
     3,633 ( 0.00%)      pub def_id: DefId,
 3,801,680 ( 0.02%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
     9,913 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
    39,652 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
       603 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       268 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       402 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
       536 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
    14,352 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
     1,794 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    19,734 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
    49,794 ( 0.00%)          self.skip_binder().def_id
    16,598 ( 0.00%)      }
         .           
    12,092 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    24,184 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
    12,092 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        64 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    62,982 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     9,170 ( 0.00%)      pub def_id: DefId,
    76,304 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
     1,556 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
     1,556 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
         .               pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 985 ----------------------------------------
-- line 994 ----------------------------------------
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
     3,498 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
     5,030 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
     4,664 ( 0.00%)      }
         .           }
         .           
   196,007 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       120 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   160,856 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
 1,774,598 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
   204,435 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
   716,471 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
 1,603,052 ( 0.01%)          Binder(value, ty::List::empty())
   203,431 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    70,074 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 5,819,862 ( 0.03%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     4,829 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    44,683 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
     6,760 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
   170,799 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
 1,418,205 ( 0.01%)          Binder(value, self.1)
     6,760 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    36,009 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    78,495 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   909,188 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     4,140 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     4,490 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   410,914 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
   247,173 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   382,963 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    93,842 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    26,812 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
   107,248 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
   102,599 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
    43,971 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
    73,285 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
   131,913 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
   113,049 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
    12,561 ( 0.00%)          let def_id = self.trait_def_id(tcx);
    12,561 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
   138,171 ( 0.00%)      }
         .           
    23,575 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    70,725 ( 0.00%)          self.substs.type_at(0)
    47,150 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   301,911 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   181,839 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
    23,107 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   208,215 ( 0.00%)      pub c_variadic: bool,
    41,312 ( 0.00%)      pub unsafety: hir::Unsafety,
   190,647 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
   163,428 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   695,124 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   326,856 ( 0.00%)      }
         .           
   100,480 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   755,044 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
   200,960 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    35,510 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
    85,270 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
     3,724 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
    51,105 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
     7,448 ( 0.00%)          self.skip_binder().c_variadic
     3,724 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
    20,172 ( 0.00%)          self.skip_binder().unsafety
    10,086 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
   180,464 ( 0.00%)          self.skip_binder().abi
    45,116 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       104 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       272 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
       658 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
     2,312 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
     1,156 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
         .                   ParamTy::new(def.index, def.name)
         .               }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
       104 ( 0.00%)      pub index: u32,
       104 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
19,987,213 ( 0.09%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
     1,434 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
   707,900 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    26,870 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
    92,361 ( 0.00%)      pub def_id: DefId,
    69,208 ( 0.00%)      pub index: u32,
   266,197 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
     7,216 ( 0.00%)      pub index: u32,
       510 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
    23,434 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
   398,531 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
-- line 1532 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
    16,507 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   585,869 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   762,234 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
    81,521 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
    23,680 ( 0.00%)          match self.kind() {
     4,850 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
   265,733 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
   374,046 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
   263,108 ( 0.00%)          match self.kind() {
    45,356 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
     2,535 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
       849 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         .                   *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
     2,798 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       109 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       190 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       380 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       190 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1838 ----------------------------------------
         .                           }
         .                       }
         .                       _ => bug!("`simd_size_and_type` called on invalid type"),
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_region_ptr(&self) -> bool {
       121 ( 0.00%)          matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_mutable_ptr(&self) -> bool {
         .                   matches!(
         .                       self.kind(),
         .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
         .                           | Ref(_, _, hir::Mutability::Mut)
-- line 1854 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
    34,276 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
       140 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
   317,678 ( 0.00%)          match self.kind() {
    65,414 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
        14 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
        14 ( 0.00%)          match self.kind() {
        35 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
        14 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
     7,716 ( 0.00%)          matches!(
    17,958 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
     3,291 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
     2,249 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
    10,598 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
    74,317 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
    19,750 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
    36,380 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
    62,850 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
    15,316 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
       793 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
     9,315 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    82,336 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   571,493 ( 0.00%)          match self.kind() {
     1,986 ( 0.00%)              Adt(def, _) if def.is_box() => {
         8 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
   357,334 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
    11,290 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
   164,672 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
    13,544 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
     1,064 ( 0.00%)      }
         .           
   561,936 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   280,968 ( 0.00%)          match self.kind() {
   210,522 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       340 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
   632,178 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
    29,739 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    18,973 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
     2,500 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    12,468 ( 0.00%)          match self.kind() {
     8,460 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
     5,000 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
       465 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       930 ( 0.00%)          match self.kind() {
       930 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       930 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
    18,650 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
    33,333 ( 0.00%)          match self.kind() {
    11,958 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     5,979 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
         .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
    14,920 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
    59,820 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    29,910 ( 0.00%)          match self.kind() {
    47,856 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    47,856 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       612 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
       612 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       340 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
       136 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
       544 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
    14,024 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    28,048 ( 0.00%)          match self.kind() {
    28,048 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
    14,024 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
 1,131,669 ( 0.01%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   754,446 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
    12,826 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    95,754 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
 1,131,669 ( 0.01%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
        90 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
   267,446 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
   401,169 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
   133,723 ( 0.00%)      }
         .           }

75,743,537 ( 0.34%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs
--------------------------------------------------------------------------------
Ir                  

-- line 28 ----------------------------------------
         .                   (type SourceFile: 'static + Clone;);
         .               (type MultiSpan) =>
         .                   (type MultiSpan: 'static;);
         .               (type Diagnostic) =>
         .                   (type Diagnostic: 'static;);
         .               (type Span) =>
         .                   (type Span: 'static + Copy + Eq + Hash;);
         .               (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>
   168,423 ( 0.00%)          (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });
         .               (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>
    20,382 ( 0.00%)          (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });
         .               ($($item:tt)*) => ($($item)*;)
         .           }
         .           
         .           macro_rules! declare_server_traits {
         .               ($($name:ident {
         .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
         .               }),* $(,)?) => {
         .                   pub trait Types {
-- line 46 ----------------------------------------
-- line 63 ----------------------------------------
         .               ($($name:ident {
         .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)?;)*
         .               }),* $(,)?) => {
         .                   impl<S: Types> Types for MarkedTypes<S> {
         .                       $(type $name = Marked<S::$name, client::$name>;)*
         .                   }
         .           
         .                   $(impl<S: $name> $name for MarkedTypes<S> {
     6,426 ( 0.00%)              $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)? {
 8,233,888 ( 0.04%)                  <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))
     6,426 ( 0.00%)              })*
         .                   })*
         .               }
         .           }
         .           with_api!(Self, self_, define_mark_types_impls);
         .           
         .           struct Dispatcher<S: Types> {
         .               handle_store: HandleStore<S>,
         .               server: S,
-- line 81 ----------------------------------------
-- line 89 ----------------------------------------
         .                   pub trait DispatcherTrait {
         .                       // HACK(eddyb) these are here to allow `Self::$name` to work below.
         .                       $(type $name;)*
         .                       fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;
         .                   }
         .           
         .                   impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {
         .                       $(type $name = <MarkedTypes<S> as Types>::$name;)*
20,864,590 ( 0.09%)              fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {
         .                           let Dispatcher { handle_store, server } = self;
         .           
 6,259,377 ( 0.03%)                  let mut reader = &b[..];
14,605,213 ( 0.06%)                  match api_tags::Method::decode(&mut reader, &mut ()) {
10,060,620 ( 0.04%)                      $(api_tags::Method::$name(m) => match m {
         .                                   $(api_tags::$name::$method => {
         .                                       let mut call_method = || {
 6,537,966 ( 0.03%)                                  reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);
     3,213 ( 0.00%)                                  $name::$method(server, $($arg),*)
         .                                       };
         .                                       // HACK(eddyb) don't use `panic::catch_unwind` in a panic.
         .                                       // If client and server happen to use the same `libstd`,
         .                                       // `catch_unwind` asserts that the panic counter was 0,
         .                                       // even when the closure passed to it didn't panic.
         .                                       let r = if thread::panicking() {
         .                                           Ok(call_method())
         .                                       } else {
 9,283,984 ( 0.04%)                                  panic::catch_unwind(panic::AssertUnwindSafe(call_method))
         .                                               .map_err(PanicMessage::from)
         .                                       };
         .           
         .                                       b.clear();
23,015,158 ( 0.10%)                              r.encode(&mut b, handle_store);
         .                                   })*
         .                               }),*
         .                           }
12,518,754 ( 0.06%)                  b
18,778,131 ( 0.08%)              }
         .                   }
         .               }
         .           }
         .           with_api!(Self, self_, define_dispatcher_impl);
         .           
         .           pub trait ExecutionStrategy {
         .               fn run_bridge_and_client<D: Copy + Send + 'static>(
         .                   &self,
-- line 133 ----------------------------------------
-- line 145 ----------------------------------------
         .               fn run_bridge_and_client<D: Copy + Send + 'static>(
         .                   &self,
         .                   dispatcher: &mut impl DispatcherTrait,
         .                   input: Buffer<u8>,
         .                   run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
         .                   client_data: D,
         .                   force_show_panics: bool,
         .               ) -> Buffer<u8> {
18,778,421 ( 0.08%)          let mut dispatch = |b| dispatcher.dispatch(b);
         .           
     2,900 ( 0.00%)          run_client(
     3,190 ( 0.00%)              Bridge { cached_buffer: input, dispatch: (&mut dispatch).into(), force_show_panics },
         .                       client_data,
         .                   )
         .               }
         .           }
         .           
         .           // NOTE(eddyb) Two implementations are provided, the second one is a bit
         .           // faster but neither is anywhere near as fast as same-thread execution.
         .           
-- line 164 ----------------------------------------
-- line 263 ----------------------------------------
         .                       *state.lock().unwrap() = State::Res(b);
         .                       join_handle.thread().unpark();
         .                   }
         .           
         .                   join_handle.join().unwrap()
         .               }
         .           }
         .           
     3,770 ( 0.00%)  fn run_server<
         .               S: Server,
         .               I: Encode<HandleStore<MarkedTypes<S>>>,
         .               O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,
         .               D: Copy + Send + 'static,
         .           >(
         .               strategy: &impl ExecutionStrategy,
         .               handle_counters: &'static client::HandleCounters,
         .               server: S,
         .               input: I,
         .               run_client: extern "C" fn(Bridge<'_>, D) -> Buffer<u8>,
         .               client_data: D,
         .               force_show_panics: bool,
         .           ) -> Result<O, PanicMessage> {
         .               let mut dispatcher =
     4,930 ( 0.00%)          Dispatcher { handle_store: HandleStore::new(handle_counters), server: MarkedTypes(server) };
         .           
         .               let mut b = Buffer::new();
       870 ( 0.00%)      input.encode(&mut b, &mut dispatcher.handle_store);
         .           
     1,740 ( 0.00%)      b = strategy.run_bridge_and_client(
         .                   &mut dispatcher,
         .                   b,
         .                   run_client,
         .                   client_data,
         .                   force_show_panics,
         .               );
         .           
     1,450 ( 0.00%)      Result::decode(&mut &b[..], &mut dispatcher.handle_store)
     2,900 ( 0.00%)  }
         .           
         .           impl client::Client<fn(crate::TokenStream) -> crate::TokenStream> {
         .               pub fn run<S: Server>(
         .                   &self,
         .                   strategy: &impl ExecutionStrategy,
         .                   server: S,
         .                   input: S::TokenStream,
         .                   force_show_panics: bool,
         .               ) -> Result<S::TokenStream, PanicMessage> {
       580 ( 0.00%)          let client::Client { get_handle_counters, run, f } = *self;
     3,190 ( 0.00%)          run_server(
         .                       strategy,
       290 ( 0.00%)              get_handle_counters(),
     2,900 ( 0.00%)              server,
         .                       <MarkedTypes<S> as Types>::TokenStream::mark(input),
         .                       run,
         .                       f,
         .                       force_show_panics,
         .                   )
         .                   .map(<MarkedTypes<S> as Types>::TokenStream::unmark)
         .               }
         .           }
-- line 322 ----------------------------------------

 4,750,536 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/server.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
5,722,423 ( 0.03%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
    1,687 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
      946 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
      268 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,941 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       60 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
      240 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           }
        .           
        .           impl RealFileName {
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path(&self) -> Option<&Path> {
        4 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => {
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
       32 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
       32 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
       48 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
   41,424 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
       31 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       30 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
   11,502 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
   25,365 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
   17,253 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   53,379 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,086 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
    1,071 ( 0.00%)      ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
        .               /// Strings provided as crate attributes in the CLI.
        .               CliCrateAttr(u64),
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
      210 ( 0.00%)      fn from(p: PathBuf) -> Self {
       60 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
      180 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
      210 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
   54,888 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
   82,332 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
   82,332 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
   68,610 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      564 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      423 ( 0.00%)          match self.inner {
      141 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      564 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
   28,472 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
   13,830 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
   27,660 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
       30 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       60 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 377 ----------------------------------------
        .               }
        .           
        .               pub fn anon_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::Anon(hasher.finish())
        .               }
        .           
    5,355 ( 0.00%)      pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
    2,142 ( 0.00%)          FileName::ProcMacroSourceCode(hasher.finish())
    5,355 ( 0.00%)      }
        .           
        .               pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::QuoteExpansion(hasher.finish())
        .               }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
-- line 397 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
       11 ( 0.00%)      pub lo: BytePos,
       11 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       31 ( 0.00%)      pub ctxt: SyntaxContext,
       10 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
1,916,736 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
   11,256 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   93,464 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   70,098 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   93,464 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  495,945 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  330,630 ( 0.00%)      }
        .               #[inline]
   25,984 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
   25,984 ( 0.00%)      }
        .               #[inline]
  153,018 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
  102,012 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
   90,705 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
   54,423 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
        .               #[inline]
       39 ( 0.00%)      pub fn from_expansion(self) -> bool {
        .                   self.ctxt() != SyntaxContext::root()
       26 ( 0.00%)      }
        .           
        .               /// Returns `true` if `span` originates in a derive-macro's expansion.
        .               pub fn in_derive_expansion(self) -> bool {
        .                   matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))
        .               }
        .           
        .               /// Gate suggestions that would not be appropriate in a context the user didn't write.
        .               pub fn can_be_used_for_suggestions(self) -> bool {
-- line 586 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
    1,659 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
    1,106 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
   33,768 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
   22,512 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 650 ----------------------------------------
        .               pub fn trim_start(self, other: Span) -> Option<Span> {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   if span.hi > other.hi { Some(span.with_lo(cmp::max(span.lo, other.hi))) } else { None }
        .               }
        .           
        .               /// Returns the source span -- this is either the supplied span, or the span for
        .               /// the macro callsite that expanded to it.
      150 ( 0.00%)      pub fn source_callsite(self) -> Span {
        .                   let expn_data = self.ctxt().outer_expn_data();
       60 ( 0.00%)          if !expn_data.is_root() { expn_data.call_site.source_callsite() } else { self }
      120 ( 0.00%)      }
        .           
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    7,730 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
    3,865 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    8,503 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
  149,922 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   99,948 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   26,808 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
   24,062 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
   12,116 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    4,195 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      839 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
    3,356 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
  102,375 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
   87,750 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
   73,125 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
    4,375 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
    5,250 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
    3,500 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
3,318,337 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  590,681 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
   12,653 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
   10,160 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
2,027,837 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
2,715,003 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
   11,594 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
    7,378 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
    8,432 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
   23,793 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
    4,324 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        2 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
   15,127 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
   19,467 ( 0.00%)      }
        .           
      330 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      210 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    8,904 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
      608 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
      580 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
   60,552 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
   35,322 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
  194,004 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
    5,210 ( 0.00%)          let mut span = self.data();
    5,210 ( 0.00%)          let mark = span.ctxt.remove_mark();
   20,840 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  649,854 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
  433,236 ( 0.00%)          let mut span = self.data();
  356,246 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  649,854 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  717,276 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
      232 ( 0.00%)          let mut span = self.data();
      348 ( 0.00%)          let mark = span.ctxt.glob_adjust(expn_id, glob_span);
      928 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
      657 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
    2,718 ( 0.00%)          let mut span = self.data();
    4,925 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
    9,777 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
      730 ( 0.00%)      }
        .           
        .               #[inline]
  494,448 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  432,642 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
   43,525 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
       20 ( 0.00%)      pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
    2,020 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
       20 ( 0.00%)      }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
    2,575 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
      115 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
   43,525 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
   43,525 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
    2,000 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
    1,600 ( 0.00%)          MultiSpan::from_spans(spans)
    2,000 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      294 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      518 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      147 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      518 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      441 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       90 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      931 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
      954 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
      180 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    1,908 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        2 ( 0.00%)          let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
      216 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
        .                   hash
        .               }
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        2 ( 0.00%)          Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
      118 ( 0.00%)          let len = self.hash_len();
      118 ( 0.00%)          &self.value[..len]
      118 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      450 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
    1,740 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
       30 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
       30 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
       30 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
      120 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       60 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       60 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       90 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
      330 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,293 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      477 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  794,938 ( 0.00%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
      954 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,247 ( 0.00%)              SourceFile {
    3,816 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    1,908 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    1,908 ( 0.00%)                  lines,
    1,908 ( 0.00%)                  multibyte_chars,
    1,908 ( 0.00%)                  non_narrow_chars,
    1,908 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,293 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      770 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
      210 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
      140 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
      140 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
      210 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      840 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
      140 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
    1,190 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      770 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
      280 ( 0.00%)              lines,
      280 ( 0.00%)              multibyte_chars,
      280 ( 0.00%)              non_narrow_chars,
      280 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      630 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
  158,248 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
   79,124 ( 0.00%)          self.lines[line_index]
  158,248 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
   38,773 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
    5,661 ( 0.00%)          if matches!(
   11,078 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        2 ( 0.00%)              let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        6 ( 0.00%)              if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
        .                       {
       10 ( 0.00%)                  if let Some(mut src) = src {
        .                               // The src_hash needs to be computed on the pre-normalized src.
        2 ( 0.00%)                      if self.src_hash.matches(&src) {
        6 ( 0.00%)                          normalize_src(&mut src, BytePos::from_usize(0));
       16 ( 0.00%)                          *src_kind = ExternalSourceKind::Present(Lrc::new(src));
        .                                   return true;
        .                               }
        .                           } else {
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
    5,537 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
   49,851 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
   14,236 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  237,559 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
  181,990 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
  102,266 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   67,154 ( 0.00%)          assert!(line_index < self.lines.len());
   99,342 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      181 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   66,082 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
    1,734 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    5,202 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    1,032 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    2,652 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    2,210 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
   10,404 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    8,670 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
    3,468 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    6,069 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
    1,734 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      824 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      867 ( 0.00%)                  let linebpos = self.lines[a];
    1,734 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      867 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    6,936 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    6,936 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
    2,601 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
    1,734 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      867 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        9 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    4,335 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    6,069 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      720 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      648 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       69 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       72 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  264,998 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    3,306 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   89,537 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,667,296 ( 0.01%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
5,252,561 ( 0.02%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  265,332 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2042 ----------------------------------------
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        .               pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      182 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
       91 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
3,773,000 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  671,855 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
3,101,145 ( 0.01%)          let span = self.data_untracked();
1,218,435 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
1,617,000 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
1,084,752 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
1,064,496 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
2,128,992 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
1,064,496 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  532,248 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  532,248 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
4,312,000 ( 0.02%)      }
        .           }

8,461,947 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/closure.rs
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .               type Env;
         .           }
         .           
         .           impl<'a, A, R> !Sync for Closure<'a, A, R> {}
         .           impl<'a, A, R> !Send for Closure<'a, A, R> {}
         .           
         .           impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {
         .               fn from(f: &'a mut F) -> Self {
 6,259,377 ( 0.03%)          unsafe extern "C" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {
         .                       (*(env as *mut _ as *mut F))(arg)
 8,345,836 ( 0.04%)          }
         .                   Closure { call: call::<A, R, F>, env: unsafe { &mut *(f as *mut _ as *mut Env) } }
         .               }
         .           }
         .           
         .           impl<'a, A, R> Closure<'a, A, R> {
         .               pub fn call(&mut self, arg: A) -> R {
33,383,344 ( 0.15%)          unsafe { (self.call)(self.env, arg) }
         .               }
         .           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_span::Span;
         .           use std::borrow::Cow;
         .           use std::fmt::{self, Debug, Formatter, Write};
         .           use std::iter;
         .           use std::slice;
         .           
         .           pub use super::query::*;
         .           
   101,921 ( 0.00%)  #[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]
         .           pub struct SwitchTargets {
         .               /// Possible values. The locations to branch to in each case
         .               /// are found in the corresponding indices from the `targets` vector.
         .               values: SmallVec<[u128; 1]>,
         .           
         .               /// Possible branch sites. The last element of this vector is used
         .               /// for the otherwise branch, so targets.len() == values.len() + 1
         .               /// should hold.
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
         .               targets: SmallVec<[BasicBlock; 2]>,
         .           }
         .           
         .           impl SwitchTargets {
         .               /// Creates switch targets from an iterator of values and target blocks.
         .               ///
         .               /// The iterator may be empty, in which case the `SwitchInt` instruction is equivalent to
         .               /// `goto otherwise;`.
    42,128 ( 0.00%)      pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {
    62,160 ( 0.00%)          let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();
         .                   targets.push(otherwise);
    62,160 ( 0.00%)          Self { values, targets }
    42,128 ( 0.00%)      }
         .           
         .               /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,
         .               /// and to `else_` if not.
        58 ( 0.00%)      pub fn static_if(value: u128, then: BasicBlock, else_: BasicBlock) -> Self {
       435 ( 0.00%)          Self { values: smallvec![value], targets: smallvec![then, else_] }
        58 ( 0.00%)      }
         .           
         .               /// Returns the fallback target that is jumped to when none of the values match the operand.
    14,880 ( 0.00%)      pub fn otherwise(&self) -> BasicBlock {
    14,943 ( 0.00%)          *self.targets.last().unwrap()
    29,760 ( 0.00%)      }
         .           
         .               /// Returns an iterator over the switch targets.
         .               ///
         .               /// The iterator will yield tuples containing the value and corresponding target to jump to, not
         .               /// including the `otherwise` fallback target.
         .               ///
         .               /// Note that this may yield 0 elements. Only the `otherwise` branch is mandatory.
    15,138 ( 0.00%)      pub fn iter(&self) -> SwitchTargetsIter<'_> {
   105,966 ( 0.00%)          SwitchTargetsIter { inner: iter::zip(&self.values, &self.targets) }
    15,138 ( 0.00%)      }
         .           
         .               /// Returns a slice with all possible jump targets (including the fallback target).
    35,826 ( 0.00%)      pub fn all_targets(&self) -> &[BasicBlock] {
         .                   &self.targets
    35,826 ( 0.00%)      }
         .           
         2 ( 0.00%)      pub fn all_targets_mut(&mut self) -> &mut [BasicBlock] {
         .                   &mut self.targets
         2 ( 0.00%)      }
         .           
         .               /// Finds the `BasicBlock` to which this `SwitchInt` will branch given the
         .               /// specific value.  This cannot fail, as it'll return the `otherwise`
         .               /// branch if there's not a specific match for the value.
       315 ( 0.00%)      pub fn target_for_value(&self, value: u128) -> BasicBlock {
       252 ( 0.00%)          self.iter().find_map(|(v, t)| (v == value).then_some(t)).unwrap_or_else(|| self.otherwise())
       378 ( 0.00%)      }
         .           }
         .           
         .           pub struct SwitchTargetsIter<'a> {
         .               inner: iter::Zip<slice::Iter<'a, u128>, slice::Iter<'a, BasicBlock>>,
         .           }
         .           
         .           impl<'a> Iterator for SwitchTargetsIter<'a> {
         .               type Item = (u128, BasicBlock);
         .           
         .               fn next(&mut self) -> Option<Self::Item> {
    52,508 ( 0.00%)          self.inner.next().map(|(val, bb)| (*val, *bb))
    40,536 ( 0.00%)      }
         .           
     2,529 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
     2,529 ( 0.00%)          self.inner.size_hint()
     7,587 ( 0.00%)      }
         .           }
         .           
         .           impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}
         .           
 2,306,342 ( 0.01%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
         .           pub enum TerminatorKind<'tcx> {
         .               /// Block should have one successor in the graph; we jump there.
   227,220 ( 0.00%)      Goto { target: BasicBlock },
         .           
         .               /// Operand evaluates to an integer; jump depending on its value
         .               /// to one of the targets, and otherwise fallback to `otherwise`.
         .               SwitchInt {
         .                   /// The discriminant value being tested.
         .                   discr: Operand<'tcx>,
         .           
         .                   /// The type of value being tested.
         .                   /// This is always the same as the type of `discr`.
         .                   /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.
     4,547 ( 0.00%)          switch_ty: Ty<'tcx>,
         .           
         .                   targets: SwitchTargets,
         .               },
         .           
         .               /// Indicates that the landing pad is finished and unwinding should
         .               /// continue. Emitted by `build::scope::diverge_cleanup`.
         .               Resume,
         .           
-- line 130 ----------------------------------------
-- line 136 ----------------------------------------
         .               /// been filled in before this executes. This can occur multiple times
         .               /// in different basic blocks.
         .               Return,
         .           
         .               /// Indicates a terminator that can never be reached.
         .               Unreachable,
         .           
         .               /// Drop the `Place`.
   238,260 ( 0.00%)      Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },
         .           
         .               /// Drop the `Place` and assign the new value over it. This ensures
         .               /// that the assignment to `P` occurs *even if* the destructor for
         .               /// place unwinds. Its semantics are best explained by the
         .               /// elaboration:
         .               ///
         .               /// ```
         .               /// BB0 {
-- line 152 ----------------------------------------
-- line 167 ----------------------------------------
         .               /// BB2 {
         .               ///   // P is now uninitialized -- its dtor panicked
         .               ///   P <- V
         .               /// }
         .               /// ```
         .               ///
         .               /// Note that DropAndReplace is eliminated as part of the `ElaborateDrops` pass.
         .               DropAndReplace {
       786 ( 0.00%)          place: Place<'tcx>,
         .                   value: Operand<'tcx>,
       524 ( 0.00%)          target: BasicBlock,
       262 ( 0.00%)          unwind: Option<BasicBlock>,
         .               },
         .           
         .               /// Block ends with a call of a function.
         .               Call {
         .                   /// The function that’s being called.
         .                   func: Operand<'tcx>,
         .                   /// Arguments the function is called with.
         .                   /// These are owned by the callee, which is free to modify them.
         .                   /// This allows the memory occupied by "by-value" arguments to be
         .                   /// reused across function calls without duplicating the contents.
    59,277 ( 0.00%)          args: Vec<Operand<'tcx>>,
         .                   /// Destination for the return value. If some, the call is converging.
         .                   destination: Option<(Place<'tcx>, BasicBlock)>,
         .                   /// Cleanups to be done if the call unwinds.
    39,518 ( 0.00%)          cleanup: Option<BasicBlock>,
         .                   /// `true` if this is from a call in HIR rather than from an overloaded
         .                   /// operator. True for overloaded function call.
         .                   from_hir_call: bool,
         .                   /// This `Span` is the span of the function, without the dot and receiver
         .                   /// (e.g. `foo(a, b)` in `x.foo(a, b)`
         .                   fn_span: Span,
         .               },
         .           
         .               /// Jump to the target if the condition has the expected value,
         .               /// otherwise panic with a message and a cleanup target.
         .               Assert {
         .                   cond: Operand<'tcx>,
     1,252 ( 0.00%)          expected: bool,
         .                   msg: AssertMessage<'tcx>,
     2,504 ( 0.00%)          target: BasicBlock,
     2,504 ( 0.00%)          cleanup: Option<BasicBlock>,
         .               },
         .           
         .               /// A suspend point.
         .               Yield {
         .                   /// The value to return.
         .                   value: Operand<'tcx>,
         .                   /// Where to resume to.
         .                   resume: BasicBlock,
-- line 217 ----------------------------------------
-- line 223 ----------------------------------------
         .           
         .               /// Indicates the end of the dropping of a generator.
         .               GeneratorDrop,
         .           
         .               /// A block where control flow only ever takes one real path, but borrowck
         .               /// needs to be more conservative.
         .               FalseEdge {
         .                   /// The target normal control flow will take.
     5,968 ( 0.00%)          real_target: BasicBlock,
         .                   /// A block control flow could conceptually jump to, but won't in
         .                   /// practice.
     8,952 ( 0.00%)          imaginary_target: BasicBlock,
         .               },
         .               /// A terminator for blocks that only take one path in reality, but where we
         .               /// reserve the right to unwind in borrowck, even if it won't happen in practice.
         .               /// This can arise in infinite loops with no function calls for example.
         .               FalseUnwind {
         .                   /// The target normal control flow will take.
       202 ( 0.00%)          real_target: BasicBlock,
         .                   /// The imaginary cleanup block link. This particular path will never be taken
         .                   /// in practice, but in order to avoid fragility we want to always
         .                   /// consider it in borrowck. We don't want to accept programs which
         .                   /// pass borrowck only when `panic=abort` or some assertions are disabled
         .                   /// due to release vs. debug mode builds. This needs to be an `Option` because
         .                   /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.
       202 ( 0.00%)          unwind: Option<BasicBlock>,
         .               },
         .           
         .               /// Block ends with an inline assembly block. This is a terminator since
         .               /// inline assembly is allowed to diverge.
         .               InlineAsm {
         .                   /// The template for the inline assembly, with placeholders.
         .                   template: &'tcx [InlineAsmTemplatePiece],
         .           
-- line 256 ----------------------------------------
-- line 268 ----------------------------------------
         .                   /// diverging (InlineAsmOptions::NORETURN).
         .                   destination: Option<BasicBlock>,
         .           
         .                   /// Cleanup to be done if the inline assembly unwinds. This is present
         .                   /// if and only if InlineAsmOptions::MAY_UNWIND is set.
         .                   cleanup: Option<BasicBlock>,
         .               },
         .           }
 2,177,908 ( 0.01%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
         .           pub struct Terminator<'tcx> {
         .               pub source_info: SourceInfo,
         .               pub kind: TerminatorKind<'tcx>,
         .           }
         .           
         .           impl<'tcx> Terminator<'tcx> {
 1,161,892 ( 0.01%)      pub fn successors(&self) -> Successors<'_> {
 2,454,222 ( 0.01%)          self.kind.successors()
 1,742,838 ( 0.01%)      }
         .           
 1,004,124 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
   502,062 ( 0.00%)          self.kind.successors_mut()
 1,506,186 ( 0.01%)      }
         .           
         .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
         .                   self.kind.unwind()
         .               }
         .           
         .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
         .                   self.kind.unwind_mut()
   101,420 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TerminatorKind<'tcx> {
     2,146 ( 0.00%)      pub fn if_(
         .                   tcx: TyCtxt<'tcx>,
         .                   cond: Operand<'tcx>,
         .                   t: BasicBlock,
         .                   f: BasicBlock,
         .               ) -> TerminatorKind<'tcx> {
    21,460 ( 0.00%)          TerminatorKind::SwitchInt {
     4,292 ( 0.00%)              discr: cond,
     2,146 ( 0.00%)              switch_ty: tcx.types.bool,
         .                       targets: SwitchTargets::static_if(0, f, t),
         .                   }
     2,146 ( 0.00%)      }
         .           
 1,847,592 ( 0.01%)      pub fn successors(&self) -> Successors<'_> {
         .                   use self::TerminatorKind::*;
13,662,026 ( 0.06%)          match *self {
         .                       Resume
         .                       | Abort
         .                       | GeneratorDrop
         .                       | Return
         .                       | Unreachable
         .                       | Call { destination: None, cleanup: None, .. }
         .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),
 1,048,839 ( 0.00%)              Goto { target: ref t }
         .                       | Call { destination: None, cleanup: Some(ref t), .. }
         .                       | Call { destination: Some((_, ref t)), cleanup: None, .. }
         .                       | Yield { resume: ref t, drop: None, .. }
         .                       | DropAndReplace { target: ref t, unwind: None, .. }
         .                       | Drop { target: ref t, unwind: None, .. }
         .                       | Assert { target: ref t, cleanup: None, .. }
         .                       | FalseUnwind { real_target: ref t, unwind: None }
         .                       | InlineAsm { destination: Some(ref t), cleanup: None, .. }
-- line 332 ----------------------------------------
-- line 338 ----------------------------------------
         .                       | DropAndReplace { target: ref t, unwind: Some(ref u), .. }
         .                       | Drop { target: ref t, unwind: Some(ref u), .. }
         .                       | Assert { target: ref t, cleanup: Some(ref u), .. }
         .                       | FalseUnwind { real_target: ref t, unwind: Some(ref u) }
         .                       | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {
         .                           Some(t).into_iter().chain(slice::from_ref(u))
         .                       }
         .                       SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),
   100,786 ( 0.00%)              FalseEdge { ref real_target, ref imaginary_target } => {
         .                           Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))
         .                       }
         .                   }
 1,847,592 ( 0.01%)      }
         .           
   502,062 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
         .                   use self::TerminatorKind::*;
 3,704,464 ( 0.02%)          match *self {
         .                       Resume
         .                       | Abort
         .                       | GeneratorDrop
         .                       | Return
         .                       | Unreachable
         .                       | Call { destination: None, cleanup: None, .. }
         .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),
   349,830 ( 0.00%)              Goto { target: ref mut t }
         .                       | Call { destination: None, cleanup: Some(ref mut t), .. }
         .                       | Call { destination: Some((_, ref mut t)), cleanup: None, .. }
         .                       | Yield { resume: ref mut t, drop: None, .. }
         .                       | DropAndReplace { target: ref mut t, unwind: None, .. }
         .                       | Drop { target: ref mut t, unwind: None, .. }
         .                       | Assert { target: ref mut t, cleanup: None, .. }
         .                       | FalseUnwind { real_target: ref mut t, unwind: None }
         .                       | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }
-- line 370 ----------------------------------------
-- line 376 ----------------------------------------
         .                       | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }
         .                       | Drop { target: ref mut t, unwind: Some(ref mut u), .. }
         .                       | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }
         .                       | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }
         .                       | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {
         .                           Some(t).into_iter().chain(slice::from_mut(u))
         .                       }
         .                       SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),
    17,386 ( 0.00%)              FalseEdge { ref mut real_target, ref mut imaginary_target } => {
         .                           Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))
         .                       }
         .                   }
   502,062 ( 0.00%)      }
         .           
         .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
         .                   match *self {
         .                       TerminatorKind::Goto { .. }
         .                       | TerminatorKind::Resume
         .                       | TerminatorKind::Abort
         .                       | TerminatorKind::Return
         .                       | TerminatorKind::Unreachable
-- line 396 ----------------------------------------
-- line 403 ----------------------------------------
         .                       | TerminatorKind::DropAndReplace { ref unwind, .. }
         .                       | TerminatorKind::Drop { ref unwind, .. }
         .                       | TerminatorKind::FalseUnwind { ref unwind, .. }
         .                       | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),
         .                   }
         .               }
         .           
         .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
   608,520 ( 0.00%)          match *self {
         .                       TerminatorKind::Goto { .. }
         .                       | TerminatorKind::Resume
         .                       | TerminatorKind::Abort
         .                       | TerminatorKind::Return
         .                       | TerminatorKind::Unreachable
         .                       | TerminatorKind::GeneratorDrop
         .                       | TerminatorKind::Yield { .. }
         .                       | TerminatorKind::SwitchInt { .. }
         .                       | TerminatorKind::FalseEdge { .. } => None,
    61,058 ( 0.00%)              TerminatorKind::Call { cleanup: ref mut unwind, .. }
         .                       | TerminatorKind::Assert { cleanup: ref mut unwind, .. }
         .                       | TerminatorKind::DropAndReplace { ref mut unwind, .. }
         .                       | TerminatorKind::Drop { ref mut unwind, .. }
         .                       | TerminatorKind::FalseUnwind { ref mut unwind, .. }
         .                       | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),
         .                   }
         .               }
         .           
-- line 429 ----------------------------------------

 7,248,783 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 136 ----------------------------------------
         .           /// [`Box::leak`]: ../../std/boxed/struct.Box.html#method.leak
         .           /// [`Box::into_raw`]: ../../std/boxed/struct.Box.html#method.into_raw
         .           /// [`mem::drop`]: drop
         .           /// [ub]: ../../reference/behavior-considered-undefined.html
         .           #[inline]
         .           #[rustc_const_stable(feature = "const_forget", since = "1.46.0")]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_forget")]
   117,239 ( 0.00%)  pub const fn forget<T>(t: T) {
    18,273 ( 0.00%)      let _ = ManuallyDrop::new(t);
    51,928 ( 0.00%)  }
         .           
         .           /// Like [`forget`], but also accepts unsized values.
         .           ///
         .           /// This function is just a shim intended to be removed when the `unsized_locals` feature gets
         .           /// stabilized.
         .           #[inline]
         .           #[unstable(feature = "forget_unsized", issue = "none")]
         .           pub fn forget_unsized<T: ?Sized>(t: T) {
-- line 154 ----------------------------------------
-- line 324 ----------------------------------------
         .           /// let y: &[u8] = &x;
         .           /// assert_eq!(13, mem::size_of_val(y));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_size_of_val", issue = "46571")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_size_of_val")]
   498,022 ( 0.00%)  pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: `val` is a reference, so it's a valid raw pointer
   871,110 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
   336,026 ( 0.00%)  }
         .           
         .           /// Returns the size of the pointed-to value in bytes.
         .           ///
         .           /// This is usually the same as `size_of::<T>()`. However, when `T` *has* no
         .           /// statically-known size, e.g., a slice [`[T]`][slice] or a [trait object],
         .           /// then `size_of_val_raw` can be used to get the dynamically-known size.
         .           ///
         .           /// # Safety
-- line 343 ----------------------------------------
-- line 375 ----------------------------------------
         .           /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[unstable(feature = "layout_for_ptr", issue = "69835")]
         .           #[rustc_const_unstable(feature = "const_size_of_val_raw", issue = "46571")]
         .           pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
         .               // SAFETY: the caller must provide a valid raw pointer
       238 ( 0.00%)      unsafe { intrinsics::size_of_val(val) }
         .           }
         .           
         .           /// Returns the [ABI]-required minimum alignment of a type.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// This is the alignment used for struct fields. It may be smaller than the preferred alignment.
         .           ///
-- line 391 ----------------------------------------
-- line 467 ----------------------------------------
         .           ///
         .           /// assert_eq!(4, mem::align_of_val(&5i32));
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_align_of_val", issue = "46571")]
         .           #[allow(deprecated)]
    12,034 ( 0.00%)  pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {
         .               // SAFETY: val is a reference, so it's a valid raw pointer
    18,051 ( 0.00%)      unsafe { intrinsics::min_align_of_val(val) }
    12,034 ( 0.00%)  }
         .           
         .           /// Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.
         .           ///
         .           /// Every reference to a value of the type `T` must be a multiple of this number.
         .           ///
         .           /// [ABI]: https://en.wikipedia.org/wiki/Application_binary_interface
         .           ///
         .           /// # Safety
-- line 486 ----------------------------------------
-- line 578 ----------------------------------------
         .           ///     }
         .           /// }
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "needs_drop", since = "1.21.0")]
         .           #[rustc_const_stable(feature = "const_needs_drop", since = "1.36.0")]
         .           #[rustc_diagnostic_item = "needs_drop"]
         1 ( 0.00%)  pub const fn needs_drop<T>() -> bool {
         3 ( 0.00%)      intrinsics::needs_drop::<T>()
         4 ( 0.00%)  }
         .           
         .           /// Returns the value of type `T` represented by the all-zero byte-pattern.
         .           ///
         .           /// This means that, for example, the padding byte in `(u8, u16)` is not
         .           /// necessarily zeroed.
         .           ///
         .           /// There is no guarantee that an all-zero byte-pattern represents a valid value
         .           /// of some type `T`. For example, the all-zero byte-pattern is not a valid value
-- line 596 ----------------------------------------
-- line 759 ----------------------------------------
         .           /// let mut buffer = Buffer { buf: vec![0, 1] };
         .           /// assert_eq!(buffer.buf.len(), 2);
         .           ///
         .           /// assert_eq!(buffer.get_and_reset(), vec![0, 1]);
         .           /// assert_eq!(buffer.buf.len(), 0);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "mem_take", since = "1.40.0")]
     8,190 ( 0.00%)  pub fn take<T: Default>(dest: &mut T) -> T {
     6,552 ( 0.00%)      replace(dest, T::default())
     3,276 ( 0.00%)  }
         .           
         .           /// Moves `src` into the referenced `dest`, returning the previous `dest` value.
         .           ///
         .           /// Neither value is dropped.
         .           ///
         .           /// * If you want to replace the values of two variables, see [`swap`].
         .           /// * If you want to replace with a default value, see [`take`].
         .           ///
-- line 777 ----------------------------------------
-- line 826 ----------------------------------------
         .           /// assert_eq!(buffer.replace_index(0, 2), 0);
         .           /// assert_eq!(buffer.buf[0], 2);
         .           /// ```
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[must_use = "if you don't need the old value, you can just assign the new value directly"]
         .           #[rustc_const_unstable(feature = "const_replace", issue = "83164")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_replace")]
 6,583,912 ( 0.03%)  pub const fn replace<T>(dest: &mut T, src: T) -> T {
         .               // SAFETY: We read from `dest` but directly write `src` into it afterwards,
         .               // such that the old value is not duplicated. Nothing is dropped and
         .               // nothing here can panic.
         .               unsafe {
 8,012,478 ( 0.04%)          let result = ptr::read(dest);
87,380,262 ( 0.39%)          ptr::write(dest, src);
         .                   result
         .               }
 2,256,763 ( 0.01%)  }
         .           
         .           /// Disposes of a value.
         .           ///
         .           /// This does so by calling the argument's implementation of [`Drop`][drop].
         .           ///
         .           /// This effectively does nothing for types which implement `Copy`, e.g.
         .           /// integers. Such values are copied and _then_ moved into the function, so the
         .           /// value persists after this function call.
-- line 851 ----------------------------------------
-- line 901 ----------------------------------------
         .           ///
         .           /// println!("x: {}, y: {}", x, y.0); // still available
         .           /// ```
         .           ///
         .           /// [`RefCell`]: crate::cell::RefCell
         .           #[inline]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_drop")]
   494,594 ( 0.00%)  pub fn drop<T>(_x: T) {}
         .           
         .           /// Interprets `src` as having type `&U`, and then reads `src` without moving
         .           /// the contained value.
         .           ///
         .           /// This function will unsafely assume the pointer `src` is valid for [`size_of::<U>`][size_of]
         .           /// bytes by transmuting `&T` to `&U` and then reading the `&U` (except that this is done in a way
         .           /// that is correct even when `&U` makes stricter alignment requirements than `&T`). It will also
         .           /// unsafely create a copy of the contained value instead of moving out of `src`.
-- line 917 ----------------------------------------
-- line 947 ----------------------------------------
         .           ///
         .           /// // The contents of 'foo_array' should not have changed
         .           /// assert_eq!(foo_array, [10]);
         .           /// ```
         .           #[inline]
         .           #[must_use]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           #[rustc_const_unstable(feature = "const_transmute_copy", issue = "83165")]
     4,095 ( 0.00%)  pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {
         .               // If U has a higher alignment requirement, src might not be suitably aligned.
     1,638 ( 0.00%)      if align_of::<U>() > align_of::<T>() {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // The caller must guarantee that the actual transmutation is safe.
         .                   unsafe { ptr::read_unaligned(src as *const T as *const U) }
         .               } else {
         .                   // SAFETY: `src` is a reference which is guaranteed to be valid for reads.
         .                   // We just checked that `src as *const U` was properly aligned.
         .                   // The caller must guarantee that the actual transmutation is safe.
     1,638 ( 0.00%)          unsafe { ptr::read(src as *const T as *const U) }
         .               }
     1,638 ( 0.00%)  }
         .           
         .           /// Opaque type representing the discriminant of an enum.
         .           ///
         .           /// See the [`discriminant`] function in this module for more information.
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           pub struct Discriminant<T>(<T as DiscriminantKind>::Discriminant);
         .           
         .           // N.B. These trait implementations cannot be derived because we don't want any bounds on T.
-- line 975 ----------------------------------------
-- line 991 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> cmp::Eq for Discriminant<T> {}
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> hash::Hash for Discriminant<T> {
    21,273 ( 0.00%)      fn hash<H: hash::Hasher>(&self, state: &mut H) {
         .                   self.0.hash(state);
    37,390 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           impl<T> fmt::Debug for Discriminant<T> {
         .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt.debug_tuple("Discriminant").field(&self.0).finish()
         .               }
         .           }
-- line 1009 ----------------------------------------
-- line 1031 ----------------------------------------
         .           /// assert_eq!(mem::discriminant(&Foo::A("bar")), mem::discriminant(&Foo::A("baz")));
         .           /// assert_eq!(mem::discriminant(&Foo::B(1)), mem::discriminant(&Foo::B(2)));
         .           /// assert_ne!(mem::discriminant(&Foo::B(3)), mem::discriminant(&Foo::C(3)));
         .           /// ```
         .           #[stable(feature = "discriminant_value", since = "1.21.0")]
         .           #[rustc_const_unstable(feature = "const_discriminant", issue = "69821")]
         .           #[cfg_attr(not(test), rustc_diagnostic_item = "mem_discriminant")]
         .           pub const fn discriminant<T>(v: &T) -> Discriminant<T> {
   173,476 ( 0.00%)      Discriminant(intrinsics::discriminant_value(v))
         .           }
         .           
         .           /// Returns the number of variants in the enum type `T`.
         .           ///
         .           /// If `T` is not an enum, calling this function will not result in undefined behavior, but the
         .           /// return value is unspecified. Equally, if `T` is an enum with more variants than `usize::MAX`
         .           /// the return value is unspecified. Uninhabited variants will be counted.
         .           ///
-- line 1047 ----------------------------------------

 3,380,603 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/mem/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs
--------------------------------------------------------------------------------
Ir                  

-- line 374 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let s = String::new();
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
    48,501 ( 0.00%)      pub const fn new() -> String {
   287,655 ( 0.00%)          String { vec: Vec::new() }
    32,334 ( 0.00%)      }
         .           
         .               /// Creates a new empty `String` with a particular capacity.
         .               ///
         .               /// `String`s have an internal buffer to hold their data. The capacity is
         .               /// the length of that buffer, and can be queried with the [`capacity`]
         .               /// method. This method creates an empty `String`, but one with an initial
         .               /// buffer that can hold `capacity` bytes. This is useful when you may be
         .               /// appending a bunch of data to the `String`, reducing the number of
-- line 392 ----------------------------------------
-- line 419 ----------------------------------------
         .               ///
         .               /// // ...but this may make the string reallocate
         .               /// s.push('a');
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[must_use]
       576 ( 0.00%)      pub fn with_capacity(capacity: usize) -> String {
   398,246 ( 0.00%)          String { vec: Vec::with_capacity(capacity) }
       288 ( 0.00%)      }
         .           
         .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
         .               // required for this method definition, is not available. Since we don't
         .               // require this method for testing purposes, I'll just stub it
         .               // NB see the slice::hack module in slice.rs for more information
         .               #[inline]
         .               #[cfg(test)]
         .               pub fn from_str(_: &str) -> String {
-- line 437 ----------------------------------------
-- line 492 ----------------------------------------
         .               ///
         .               /// [`from_utf8_unchecked`]: String::from_utf8_unchecked
         .               /// [`Vec<u8>`]: crate::vec::Vec "Vec"
         .               /// [`&str`]: prim@str "&str"
         .               /// [`into_bytes`]: String::into_bytes
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn from_utf8(vec: Vec<u8>) -> Result<String, FromUtf8Error> {
   104,020 ( 0.00%)          match str::from_utf8(&vec) {
         .                       Ok(..) => Ok(String { vec }),
    20,757 ( 0.00%)              Err(e) => Err(FromUtf8Error { bytes: vec, error: e }),
         .                   }
         .               }
         .           
         .               /// Converts a slice of bytes to a string, including invalid characters.
         .               ///
         .               /// Strings are made of bytes ([`u8`]), and a slice of bytes
         .               /// ([`&[u8]`][byteslice]) is made of bytes, so this function converts
         .               /// between the two. Not all byte slices are valid strings, however: strings
-- line 510 ----------------------------------------
-- line 550 ----------------------------------------
         .               /// let input = b"Hello \xF0\x90\x80World";
         .               /// let output = String::from_utf8_lossy(input);
         .               ///
         .               /// assert_eq!("Hello �World", output);
         .               /// ```
         .               #[must_use]
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   176,949 ( 0.00%)      pub fn from_utf8_lossy(v: &[u8]) -> Cow<'_, str> {
   196,610 ( 0.00%)          let mut iter = lossy::Utf8Lossy::from_bytes(v).chunks();
         .           
    98,305 ( 0.00%)          let first_valid = if let Some(chunk) = iter.next() {
         .                       let lossy::Utf8LossyChunk { valid, broken } = chunk;
    19,661 ( 0.00%)              if broken.is_empty() {
         .                           debug_assert_eq!(valid.len(), v.len());
    19,661 ( 0.00%)                  return Cow::Borrowed(valid);
         .                       }
         .                       valid
         .                   } else {
         .                       return Cow::Borrowed("");
         .                   };
         .           
         .                   const REPLACEMENT: &str = "\u{FFFD}";
         .           
-- line 573 ----------------------------------------
-- line 578 ----------------------------------------
         .                   for lossy::Utf8LossyChunk { valid, broken } in iter {
         .                       res.push_str(valid);
         .                       if !broken.is_empty() {
         .                           res.push_str(REPLACEMENT);
         .                       }
         .                   }
         .           
         .                   Cow::Owned(res)
   157,288 ( 0.00%)      }
         .           
         .               /// Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]
         .               /// if `v` contains any invalid data.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
-- line 594 ----------------------------------------
-- line 761 ----------------------------------------
         .               ///     String::from_utf8_unchecked(sparkle_heart)
         .               /// };
         .               ///
         .               /// assert_eq!("💖", sparkle_heart);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     6,754 ( 0.00%)      pub unsafe fn from_utf8_unchecked(bytes: Vec<u8>) -> String {
    64,152 ( 0.00%)          String { vec: bytes }
     6,754 ( 0.00%)      }
         .           
         .               /// Converts a `String` into a byte vector.
         .               ///
         .               /// This consumes the `String`, so we do not need to copy its contents.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
-- line 779 ----------------------------------------
-- line 800 ----------------------------------------
         .               /// ```
         .               /// let s = String::from("foo");
         .               ///
         .               /// assert_eq!("foo", s.as_str());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "string_as_str", since = "1.7.0")]
    17,014 ( 0.00%)      pub fn as_str(&self) -> &str {
    25,521 ( 0.00%)          self
    17,014 ( 0.00%)      }
         .           
         .               /// Converts a `String` into a mutable string slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
         .               /// ```
-- line 818 ----------------------------------------
-- line 841 ----------------------------------------
         .               ///
         .               /// s.push_str("bar");
         .               ///
         .               /// assert_eq!("foobar", s);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
    95,039 ( 0.00%)      pub fn push_str(&mut self, string: &str) {
    32,558 ( 0.00%)          self.vec.extend_from_slice(string.as_bytes())
    27,154 ( 0.00%)      }
         .           
         .               /// Copies elements from `src` range to the end of the string.
         .               ///
         .               /// ## Panics
         .               ///
         .               /// Panics if the starting point or end point do not lie on a [`char`]
         .               /// boundary, or if they're out of bounds.
         .               ///
-- line 859 ----------------------------------------
-- line 1138 ----------------------------------------
         .               /// s.push('2');
         .               /// s.push('3');
         .               ///
         .               /// assert_eq!("abc123", s);
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
14,739,858 ( 0.07%)      pub fn push(&mut self, ch: char) {
   153,804 ( 0.00%)          match ch.len_utf8() {
   153,804 ( 0.00%)              1 => self.vec.push(ch as u8),
         .                       _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
         .                   }
12,103,777 ( 0.05%)      }
         .           
         .               /// Returns a byte slice of this `String`'s contents.
         .               ///
         .               /// The inverse of this method is [`from_utf8`].
         .               ///
         .               /// [`from_utf8`]: String::from_utf8
         .               ///
         .               /// # Examples
-- line 1159 ----------------------------------------
-- line 1163 ----------------------------------------
         .               /// ```
         .               /// let s = String::from("hello");
         .               ///
         .               /// assert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
     3,296 ( 0.00%)      pub fn as_bytes(&self) -> &[u8] {
     4,944 ( 0.00%)          &self.vec
     3,296 ( 0.00%)      }
         .           
         .               /// Shortens this `String` to the specified length.
         .               ///
         .               /// If `new_len` is greater than the string's current length, this has no
         .               /// effect.
         .               ///
         .               /// Note that this method has no effect on the allocated capacity
         .               /// of the string
-- line 1181 ----------------------------------------
-- line 1378 ----------------------------------------
         .               {
         .                   struct SetLenOnDrop<'a> {
         .                       s: &'a mut String,
         .                       idx: usize,
         .                       del_bytes: usize,
         .                   }
         .           
         .                   impl<'a> Drop for SetLenOnDrop<'a> {
         2 ( 0.00%)              fn drop(&mut self) {
         6 ( 0.00%)                  let new_len = self.idx - self.del_bytes;
         .                           debug_assert!(new_len <= self.s.len());
         2 ( 0.00%)                  unsafe { self.s.vec.set_len(new_len) };
         4 ( 0.00%)              }
         .                   }
         .           
         .                   let len = self.len();
         6 ( 0.00%)          let mut guard = SetLenOnDrop { s: self, idx: 0, del_bytes: 0 };
         .           
        50 ( 0.00%)          while guard.idx < len {
         .                       let ch = unsafe { guard.s.get_unchecked(guard.idx..len).chars().next().unwrap() };
         .                       let ch_len = ch.len_utf8();
         .           
        24 ( 0.00%)              if !f(ch) {
        25 ( 0.00%)                  guard.del_bytes += ch_len;
        38 ( 0.00%)              } else if guard.del_bytes > 0 {
         .                           unsafe {
         .                               ptr::copy(
         .                                   guard.s.vec.as_ptr().add(guard.idx),
        45 ( 0.00%)                          guard.s.vec.as_mut_ptr().add(guard.idx - guard.del_bytes),
         .                                   ch_len,
         .                               );
         .                           }
         .                       }
         .           
         .                       // Point idx to the next char
        72 ( 0.00%)              guard.idx += ch_len;
         .                   }
         .           
        14 ( 0.00%)          drop(guard);
         .               }
         .           
         .               /// Inserts a character into this `String` at a byte position.
         .               ///
         .               /// This is an *O*(*n*) operation as it requires copying every element in the
         .               /// buffer.
         .               ///
         .               /// # Panics
-- line 1424 ----------------------------------------
-- line 1542 ----------------------------------------
         .               ///
         .               /// let fancy_f = String::from("ƒoo");
         .               /// assert_eq!(fancy_f.len(), 4);
         .               /// assert_eq!(fancy_f.chars().count(), 3);
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       392 ( 0.00%)      pub fn len(&self) -> usize {
     8,380 ( 0.00%)          self.vec.len()
       392 ( 0.00%)      }
         .           
         .               /// Returns `true` if this `String` has a length of zero, and `false` otherwise.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
         .               ///
         .               /// ```
-- line 1560 ----------------------------------------
-- line 1562 ----------------------------------------
         .               /// assert!(v.is_empty());
         .               ///
         .               /// v.push('a');
         .               /// assert!(!v.is_empty());
         .               /// ```
         .               #[inline]
         .               #[must_use]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       392 ( 0.00%)      pub fn is_empty(&self) -> bool {
   265,498 ( 0.00%)          self.len() == 0
       784 ( 0.00%)      }
         .           
         .               /// Splits the string into two at the given byte index.
         .               ///
         .               /// Returns a newly allocated `String`. `self` contains bytes `[0, at)`, and
         .               /// the returned `String` contains bytes `[at, len)`. `at` must be on the
         .               /// boundary of a UTF-8 code point.
         .               ///
         .               /// Note that the capacity of `self` does not change.
-- line 1580 ----------------------------------------
-- line 1747 ----------------------------------------
         .               /// let s = String::from("hello");
         .               ///
         .               /// let b = s.into_boxed_str();
         .               /// ```
         .               #[cfg(not(no_global_oom_handling))]
         .               #[stable(feature = "box_str", since = "1.4.0")]
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[inline]
     5,290 ( 0.00%)      pub fn into_boxed_str(self) -> Box<str> {
    63,480 ( 0.00%)          let slice = self.vec.into_boxed_slice();
    15,870 ( 0.00%)          unsafe { from_boxed_utf8_unchecked(slice) }
    10,580 ( 0.00%)      }
         .           }
         .           
         .           impl FromUtf8Error {
         .               /// Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// Basic usage:
-- line 1766 ----------------------------------------
-- line 1845 ----------------------------------------
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Display::fmt("invalid utf-16: lone surrogate found", f)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Clone for String {
    14,988 ( 0.00%)      fn clone(&self) -> Self {
     7,494 ( 0.00%)          String { vec: self.vec.clone() }
    17,486 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.vec.clone_from(&source.vec);
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl FromIterator<char> for String {
     3,022 ( 0.00%)      fn from_iter<I: IntoIterator<Item = char>>(iter: I) -> String {
         .                   let mut buf = String::new();
         .                   buf.extend(iter);
         .                   buf
     3,442 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "string_from_iter_by_ref", since = "1.17.0")]
         .           impl<'a> FromIterator<&'a char> for String {
         .               fn from_iter<I: IntoIterator<Item = &'a char>>(iter: I) -> String {
         .                   let mut buf = String::new();
         .                   buf.extend(iter);
-- line 1877 ----------------------------------------
-- line 1937 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Extend<char> for String {
         .               fn extend<I: IntoIterator<Item = char>>(&mut self, iter: I) {
   253,102 ( 0.00%)          let iterator = iter.into_iter();
   251,380 ( 0.00%)          let (lower_bound, _) = iterator.size_hint();
         .                   self.reserve(lower_bound);
 6,558,272 ( 0.03%)          iterator.for_each(move |c| self.push(c));
         .               }
         .           
         .               #[inline]
         .               fn extend_one(&mut self, c: char) {
         .                   self.push(c);
         .               }
         .           
         .               #[inline]
-- line 1956 ----------------------------------------
-- line 2067 ----------------------------------------
         .               fn strip_suffix_of(self, haystack: &'a str) -> Option<&'a str> {
         .                   self[..].strip_suffix_of(haystack)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl PartialEq for String {
         .               #[inline]
        56 ( 0.00%)      fn eq(&self, other: &String) -> bool {
       140 ( 0.00%)          PartialEq::eq(&self[..], &other[..])
        56 ( 0.00%)      }
         .               #[inline]
         .               fn ne(&self, other: &String) -> bool {
         .                   PartialEq::ne(&self[..], &other[..])
         .               }
         .           }
         .           
         .           macro_rules! impl_eq {
         .               ($lhs:ty, $rhs: ty) => {
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[allow(unused_lifetimes)]
         .                   impl<'a, 'b> PartialEq<$rhs> for $lhs {
         .                       #[inline]
   179,456 ( 0.00%)              fn eq(&self, other: &$rhs) -> bool {
   538,368 ( 0.00%)                  PartialEq::eq(&self[..], &other[..])
   179,456 ( 0.00%)              }
         .                       #[inline]
         .                       fn ne(&self, other: &$rhs) -> bool {
         .                           PartialEq::ne(&self[..], &other[..])
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[allow(unused_lifetimes)]
-- line 2100 ----------------------------------------
-- line 2128 ----------------------------------------
         .               fn default() -> String {
         .                   String::new()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl fmt::Display for String {
         .               #[inline]
    16,374 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    33,074 ( 0.00%)          fmt::Display::fmt(&**self, f)
       908 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl fmt::Debug for String {
         .               #[inline]
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   fmt::Debug::fmt(&**self, f)
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl hash::Hash for String {
         .               #[inline]
         .               fn hash<H: hash::Hasher>(&self, hasher: &mut H) {
     7,062 ( 0.00%)          (**self).hash(hasher)
         .               }
         .           }
         .           
         .           /// Implements the `+` operator for concatenating two strings.
         .           ///
         .           /// This consumes the `String` on the left-hand side and re-uses its buffer (growing it if
         .           /// necessary). This is done to avoid allocating a new `String` and copying the entire contents on
         .           /// every operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by
-- line 2161 ----------------------------------------
-- line 2194 ----------------------------------------
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl Add<&str> for String {
         .               type Output = String;
         .           
         .               #[inline]
         .               fn add(mut self, other: &str) -> String {
         .                   self.push_str(other);
         2 ( 0.00%)          self
         .               }
         .           }
         .           
         .           /// Implements the `+=` operator for appending to a `String`.
         .           ///
         .           /// This has the same behavior as the [`push_str`][String::push_str] method.
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "stringaddassign", since = "1.12.0")]
-- line 2210 ----------------------------------------
-- line 2233 ----------------------------------------
         .                   &self[..][index]
         .               }
         .           }
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl ops::Index<ops::RangeFrom<usize>> for String {
         .               type Output = str;
         .           
         .               #[inline]
     1,680 ( 0.00%)      fn index(&self, index: ops::RangeFrom<usize>) -> &str {
        72 ( 0.00%)          &self[..][index]
     1,608 ( 0.00%)      }
         .           }
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl ops::Index<ops::RangeFull> for String {
         .               type Output = str;
         .           
         .               #[inline]
    89,808 ( 0.00%)      fn index(&self, _index: ops::RangeFull) -> &str {
   269,424 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
    89,808 ( 0.00%)      }
         .           }
         .           #[stable(feature = "inclusive_range", since = "1.26.0")]
         .           impl ops::Index<ops::RangeInclusive<usize>> for String {
         .               type Output = str;
         .           
         .               #[inline]
         .               fn index(&self, index: ops::RangeInclusive<usize>) -> &str {
         .                   Index::index(&**self, index)
-- line 2260 ----------------------------------------
-- line 2313 ----------------------------------------
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl ops::Deref for String {
         .               type Target = str;
         .           
         .               #[inline]
    36,934 ( 0.00%)      fn deref(&self) -> &str {
   110,802 ( 0.00%)          unsafe { str::from_utf8_unchecked(&self.vec) }
    36,934 ( 0.00%)      }
         .           }
         .           
         .           #[stable(feature = "derefmut_for_string", since = "1.3.0")]
         .           impl ops::DerefMut for String {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut str {
         .                   unsafe { str::from_utf8_unchecked_mut(&mut *self.vec) }
         .               }
-- line 2331 ----------------------------------------
-- line 2386 ----------------------------------------
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: fmt::Display + ?Sized> ToString for T {
         .               // A common guideline is to not inline generic functions. However,
         .               // removing `#[inline]` from this method causes non-negligible regressions.
         .               // See <https://github.com/rust-lang/rust/pull/74852>, the last attempt
         .               // to try to remove it.
         .               #[inline]
    81,462 ( 0.00%)      default fn to_string(&self) -> String {
    13,577 ( 0.00%)          let mut buf = String::new();
   660,841 ( 0.00%)          let mut formatter = core::fmt::Formatter::new(&mut buf);
         .                   // Bypass format_args!() to avoid write_str with zero-length strs
   333,204 ( 0.00%)          fmt::Display::fmt(self, &mut formatter)
         .                       .expect("a Display implementation returned an error unexpectedly");
         .                   buf
    27,154 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "char_to_string_specialization", since = "1.46.0")]
         .           impl ToString for char {
         .               #[inline]
         .               fn to_string(&self) -> String {
         .                   String::from(self.encode_utf8(&mut [0; 4]))
-- line 2409 ----------------------------------------
-- line 2431 ----------------------------------------
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "i8_to_string_specialization", since = "1.54.0")]
         .           impl ToString for i8 {
         .               #[inline]
         .               fn to_string(&self) -> String {
         .                   let mut buf = String::with_capacity(4);
         6 ( 0.00%)          if self.is_negative() {
         .                       buf.push('-');
         .                   }
         .                   let mut n = self.unsigned_abs();
        12 ( 0.00%)          if n >= 10 {
         .                       if n >= 100 {
         .                           buf.push('1');
         .                           n -= 100;
         .                       }
         .                       buf.push((b'0' + n / 10) as char);
         .                       n %= 10;
         .                   }
        24 ( 0.00%)          buf.push((b'0' + n) as char);
         .                   buf
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "str_to_string_specialization", since = "1.9.0")]
         .           impl ToString for str {
         .               #[inline]
-- line 2459 ----------------------------------------
-- line 2494 ----------------------------------------
         .               fn as_mut(&mut self) -> &mut str {
         .                   self
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl AsRef<[u8]> for String {
         .               #[inline]
     3,084 ( 0.00%)      fn as_ref(&self) -> &[u8] {
     4,626 ( 0.00%)          self.as_bytes()
     3,084 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl From<&str> for String {
         .               /// Converts a `&str` into a [`String`].
         .               ///
         .               /// The result is allocated on the heap.
-- line 2512 ----------------------------------------
-- line 2553 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let s1: String = String::from("hello world");
         .               /// let s2: Box<str> = s1.into_boxed_str();
         .               /// let s3: String = String::from(s2);
         .               ///
         .               /// assert_eq!("hello world", s3)
         .               /// ```
     1,103 ( 0.00%)      fn from(s: Box<str>) -> String {
         .                   s.into_string()
     1,103 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "box_from_str", since = "1.20.0")]
         .           impl From<String> for Box<str> {
         .               /// Converts the given [`String`] to a boxed `str` slice that is owned.
         .               ///
         .               /// # Examples
-- line 2571 ----------------------------------------
-- line 2620 ----------------------------------------
         .               /// ```
         .               /// # use std::borrow::Cow;
         .               /// assert_eq!(Cow::from("eggplant"), Cow::Borrowed("eggplant"));
         .               /// ```
         .               ///
         .               /// [`Borrowed`]: crate::borrow::Cow::Borrowed "borrow::Cow::Borrowed"
         .               #[inline]
         .               fn from(s: &'a str) -> Cow<'a, str> {
   214,640 ( 0.00%)          Cow::Borrowed(s)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<'a> From<String> for Cow<'a, str> {
         .               /// Converts a [`String`] into an [`Owned`] variant.
         .               /// No heap allocation is performed, and the string
-- line 2636 ----------------------------------------
-- line 2643 ----------------------------------------
         .               /// let s = "eggplant".to_string();
         .               /// let s2 = "eggplant".to_string();
         .               /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));
         .               /// ```
         .               ///
         .               /// [`Owned`]: crate::borrow::Cow::Owned "borrow::Cow::Owned"
         .               #[inline]
         .               fn from(s: String) -> Cow<'a, str> {
    42,380 ( 0.00%)          Cow::Owned(s)
         .               }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "cow_from_string_ref", since = "1.28.0")]
         .           impl<'a> From<&'a String> for Cow<'a, str> {
         .               /// Converts a [`String`] reference into a [`Borrowed`] variant.
         .               /// No heap allocation is performed, and the string
-- line 2659 ----------------------------------------
-- line 2709 ----------------------------------------
         .               /// ```
         .               /// let s1 = String::from("hello world");
         .               /// let v1 = Vec::from(s1);
         .               ///
         .               /// for b in v1 {
         .               ///     println!("{}", b);
         .               /// }
         .               /// ```
        68 ( 0.00%)      fn from(string: String) -> Vec<u8> {
       272 ( 0.00%)          string.into_bytes()
        68 ( 0.00%)      }
         .           }
         .           
         .           #[cfg(not(no_global_oom_handling))]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl fmt::Write for String {
         .               #[inline]
 1,285,564 ( 0.01%)      fn write_str(&mut self, s: &str) -> fmt::Result {
    13,577 ( 0.00%)          self.push_str(s);
    13,577 ( 0.00%)          Ok(())
 1,145,234 ( 0.01%)      }
         .           
         .               #[inline]
   181,950 ( 0.00%)      fn write_char(&mut self, c: char) -> fmt::Result {
        45 ( 0.00%)          self.push(c);
         .                   Ok(())
   181,950 ( 0.00%)      }
         .           }
         .           
         .           /// A draining iterator for `String`.
         .           ///
         .           /// This struct is created by the [`drain`] method on [`String`]. See its
         .           /// documentation for more.
         .           ///
         .           /// [`drain`]: String::drain
-- line 2743 ----------------------------------------

 1,129,726 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/string.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     4,440 ( 0.00%)      fn clone(&self) -> Self {
    11,125 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
     2,010 ( 0.00%)              table: self.table.clone(),
         .                   }
     4,995 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
       198 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
 1,226,178 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
       297 ( 0.00%)  }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,827,811 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,825,101 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
    92,204 ( 0.00%)      hash_builder.hash_one(val)
        12 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
 2,148,756 ( 0.01%)      hash_builder.hash_one(val)
         .           }
         .           
         .           #[cfg(feature = "ahash")]
         .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
         .               /// Creates an empty `HashMap`.
         .               ///
         .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
         .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 366 ----------------------------------------
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
       792 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
 1,527,632 ( 0.01%)          Self {
         .                       hash_builder,
       198 ( 0.00%)              table: RawTable::new(),
         .                   }
       198 ( 0.00%)      }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
         .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 436 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       792 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     1,297 ( 0.00%)          Self {
         .                       hash_builder,
       198 ( 0.00%)              table: RawTable::new_in(alloc),
         .                   }
       198 ( 0.00%)      }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
         .               /// The hash map will be able to hold at least `capacity` elements without
         .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
         .               ///
         .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 662 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       198 ( 0.00%)      pub fn len(&self) -> usize {
   177,815 ( 0.00%)          self.table.len()
       198 ( 0.00%)      }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       198 ( 0.00%)      pub fn is_empty(&self) -> bool {
   601,503 ( 0.00%)          self.len() == 0
       396 ( 0.00%)      }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 697 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 865 ----------------------------------------
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               /// let mut map: HashMap<&str, i32> = HashMap::new();
         .               /// map.reserve(10);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
       396 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
       396 ( 0.00%)          self.table
       198 ( 0.00%)              .reserve(additional, make_hasher::<K, _, V, S>(&self.hash_builder));
       198 ( 0.00%)      }
         .           
         .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
         .               /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid
         .               /// frequent reallocations.
         .               ///
         .               /// # Errors
         .               ///
         .               /// If the capacity overflows, or the allocator reports a failure, then an error
-- line 884 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     5,404 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     1,610 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     5,145 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     6,755 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 5,651,029 ( 0.03%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1086 ----------------------------------------
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.get_inner(k) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               #[inline]
       875 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 7,192,123 ( 0.03%)          if self.table.is_empty() {
       175 ( 0.00%)              None
         .                   } else {
         3 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
       525 ( 0.00%)      }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,433,615 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
       875 ( 0.00%)          self.get_inner(k).is_some()
 3,240,452 ( 0.01%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,685 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    10,308 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     3,370 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
     3,436 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
     3,502 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
18,650,355 ( 0.08%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    19,197 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         .                       Some(mem::replace(item, v))
         .                   } else {
 7,502,986 ( 0.03%)              self.table
 7,155,724 ( 0.03%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   884,078 ( 0.00%)              None
         .                   }
17,548,679 ( 0.08%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   597,372 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,572,025 ( 0.02%)          match self.remove_entry(k) {
   224,956 ( 0.00%)              Some((_, v)) => Some(v),
   487,917 ( 0.00%)              None => None,
         .                   }
 1,352,427 ( 0.01%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 1,408,870 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
         .           
         .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
         .           where
         .               S: Default,
         .               A: Default + Allocator + Clone,
         .           {
         .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
         .               #[cfg_attr(feature = "inline-more", inline)]
       297 ( 0.00%)      fn default() -> Self {
     1,089 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
       198 ( 0.00%)      }
         .           }
         .           
         .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash + Borrow<Q>,
         .               Q: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2069 ----------------------------------------
         .           where
         .               F: FnMut(&K, &mut V) -> bool,
         .               A: Allocator + Clone,
         .           {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Self::Item> {
        18 ( 0.00%)          self.inner.next(&mut self.f)
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (0, self.inner.iter.size_hint().1)
         .               }
         .           }
         .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
         .               where
         .                   F: FnMut(&K, &mut V) -> bool,
         .               {
         .                   unsafe {
         .                       for item in &mut self.iter {
         .                           let &mut (ref key, ref mut value) = item.as_mut();
        18 ( 0.00%)                  if f(key, value) {
         6 ( 0.00%)                      return Some(self.table.remove(item));
         .                           }
         .                       }
         .                   }
         .                   None
         .               }
         .           }
         .           
         .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
13,164,250 ( 0.06%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
34,429,886 ( 0.15%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
36,815,561 ( 0.16%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 4,345,790 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
22,201,117 ( 0.10%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 1,425,264 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
 9,326,329 ( 0.04%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
10,378,622 ( 0.05%)          self.from_hash(hash, equivalent(k))
16,881,950 ( 0.08%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
16,001,265 ( 0.07%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 2,372,817 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
    14,515 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   284,185 ( 0.00%)          IntoIter {
   142,822 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    43,545 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,279,190 ( 0.01%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
    11,676 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
       388 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
    33,340 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       672 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
     1,344 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       320 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   234,316 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   187,111 ( 0.00%)          let iter = iter.into_iter();
   164,841 ( 0.00%)          let reserve = if self.is_empty() {
       396 ( 0.00%)              iter.size_hint().0
         .                   } else {
    16,207 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
       297 ( 0.00%)          self.reserve(reserve);
       693 ( 0.00%)          iter.for_each(move |(k, v)| {
   476,119 ( 0.00%)              self.insert(k, v);
         .                   });
   152,483 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

14,624,066 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 57 ----------------------------------------
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
          .                   /// ```
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
      7,184 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      3,592 ( 0.00%)              from_str_radix(src, radix)
     10,776 ( 0.00%)          }
          .           
          .                   /// Returns the number of ones in the binary representation of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
          .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[doc(alias = "popcount")]
          .                   #[doc(alias = "popcnt")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn count_ones(self) -> u32 {
  2,047,980 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
          .                   }
          .           
          .                   /// Returns the number of zeros in the binary representation of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
          .                   /// assert_eq!(n.leading_zeros(), 2);
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn leading_zeros(self) -> u32 {
  2,694,705 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
          .                   }
          .           
          .                   /// Returns the number of trailing zeros in the binary representation
          .                   /// of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
          .                   /// assert_eq!(n.trailing_zeros(), 3);
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn trailing_zeros(self) -> u32 {
  2,407,251 ( 0.01%)              intrinsics::cttz(self) as u32
          .                   }
          .           
          .                   /// Returns the number of leading ones in the binary representation of `self`.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn rotate_left(self, n: u32) -> Self {
110,673,402 ( 0.49%)              intrinsics::rotate_left(self, n as $SelfT)
          .                   }
          .           
          .                   /// Shifts the bits to the right by a specified amount, `n`,
          .                   /// wrapping the truncated bits to the beginning of the resulting
          .                   /// integer.
          .                   ///
          .                   /// Please note this isn't the same operation as the `>>` shifting operator!
          .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
          .                   )]
          .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
    563,555 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    452,456 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
  1,127,110 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
    450,844 ( 0.00%)          }
          .           
          .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
          .                   /// cannot occur.
          .                   ///
          .                   /// # Safety
          .                   ///
          .                   /// This results in undefined behavior when
          .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
          .                   )]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
          .                   #[inline(always)]
          .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
          .                       // SAFETY: the caller must uphold the safety contract for
          .                       // `unchecked_add`.
  5,927,903 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
          .                   }
          .           
          .                   /// Checked addition with a signed integer. Computes `self + rhs`,
          .                   /// returning `None` if overflow occurred.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
          .                   )]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
          .                   #[inline(always)]
          .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
          .                       // SAFETY: the caller must uphold the safety contract for
          .                       // `unchecked_sub`.
    860,743 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
          .                   }
          .           
          .                   /// Checked integer multiplication. Computes `self * rhs`, returning
          .                   /// `None` if overflow occurred.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
    844,302 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    562,868 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
  1,407,170 ( 0.01%)              if unlikely!(b) {None} else {Some(a)}
    562,868 ( 0.00%)          }
          .           
          .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
          .                   /// cannot occur.
          .                   ///
          .                   /// # Safety
          .                   ///
          .                   /// This results in undefined behavior when
          .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 596 ----------------------------------------
          .                                 without modifying the original"]
          .                   #[inline]
          .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
          .                       if unlikely!(rhs == 0) {
          .                           None
          .                       } else {
          .                           // SAFETY: div by zero has been checked above and unsigned types have no other
          .                           // failure modes for division
     13,224 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
          .                       }
          .                   }
          .           
          .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
          .                   /// if `rhs == 0`.
          .                   ///
          .                   /// # Examples
          .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
          .                   #[inline(always)]
          .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  2,102,671 ( 0.01%)              intrinsics::saturating_add(self, rhs)
      2,014 ( 0.00%)          }
          .           
          .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
          .                   /// saturating at the numeric bounds instead of overflowing.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
          .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
          .                   #[inline(always)]
          .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
     52,123 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
          .                   }
          .           
          .                   /// Saturating integer multiplication. Computes `self * rhs`,
          .                   /// saturating at the numeric bounds instead of overflowing.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
 58,949,850 ( 0.26%)              intrinsics::wrapping_add(self, rhs)
          .                   }
          .           
          .                   /// Wrapping (modular) addition with a signed integer. Computes
          .                   /// `self + rhs`, wrapping around at the boundary of the type.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 15,250,676 ( 0.07%)              intrinsics::wrapping_sub(self, rhs)
          .                   }
          .           
          .                   /// Wrapping (modular) multiplication. Computes `self *
          .                   /// rhs`, wrapping around at the boundary of the type.
          .                   ///
          .                   /// # Examples
          .                   ///
          .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
          .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
 46,225,981 ( 0.21%)              intrinsics::wrapping_mul(self, rhs)
          .                   }
          .           
          .                   /// Wrapping (modular) division. Computes `self / rhs`.
          .                   /// Wrapped division on unsigned types is just normal division.
          .                   /// There's no way wrapping could ever happen.
          .                   /// This function exists, so that all operations
          .                   /// are accounted for in the wrapping operations.
          .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
          .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
          .                       // out of bounds
          .                       unsafe {
         24 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
          .                       }
          .                   }
          .           
          .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
          .                   /// where `mask` removes any high-order bits of `rhs` that
          .                   /// would cause the shift to exceed the bitwidth of the type.
          .                   ///
          .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
          .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
        394 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  6,974,718 ( 0.03%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    225,422 ( 0.00%)              (a as Self, b)
    451,632 ( 0.00%)          }
          .           
          .                   /// Calculates `self + rhs + carry` without the ability to overflow.
          .                   ///
          .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
          .                   /// additional bit of overflow. This allows for chaining together multiple additions
          .                   /// to create "big integers" which represent larger values.
          .                   ///
          .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
          .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
          .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline(always)]
         45 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  1,686,447 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
          .                       (a as Self, b)
         90 ( 0.00%)          }
          .           
          .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
          .                   ///
          .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
          .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
          .                   /// to create "big integers" which represent larger values.
          .                   ///
          .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
          .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
          .                   /// ```
          .                   #[stable(feature = "wrapping", since = "1.7.0")]
          .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                     without modifying the original"]
          .                   #[inline(always)]
          .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 13,831,572 ( 0.06%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    281,434 ( 0.00%)              (a as Self, b)
    562,868 ( 0.00%)          }
          .           
          .                   /// Calculates the divisor when `self` is divided by `rhs`.
          .                   ///
          .                   /// Returns a tuple of the divisor along with a boolean indicating
          .                   /// whether an arithmetic overflow would occur. Note that for unsigned
          .                   /// integers overflow never occurs, so the second value is always
          .                   /// `false`.
          .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
          .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
          .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
          .                   /// ```
          .                   #[must_use]
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
          .                   #[inline(always)]
          .                   pub const fn is_power_of_two(self) -> bool {
        168 ( 0.00%)              self.count_ones() == 1
          .                   }
          .           
          .                   // Returns one less than next power of two.
          .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
          .                   //
          .                   // 8u8.one_less_than_next_power_of_two() == 7
          .                   // 6u8.one_less_than_next_power_of_two() == 7
          .                   //
          .                   // This method cannot overflow, as in the `next_power_of_two`
          .                   // overflow cases it instead ends up returning the maximum value
          .                   // of the type, and can return 0 for 0.
          .                   #[inline]
          .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
          .                   const fn one_less_than_next_power_of_two(self) -> Self {
    224,350 ( 0.00%)              if self <= 1 { return 0; }
          .           
    282,799 ( 0.00%)              let p = self - 1;
          .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
          .                       // That means the shift is always in-bounds, and some processors
          .                       // (such as intel pre-haswell) have more efficient ctlz
          .                       // intrinsics when the argument is non-zero.
    847,828 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    283,088 ( 0.00%)              <$SelfT>::MAX >> z
          .                   }
          .           
          .                   /// Returns the smallest power of two greater than or equal to `self`.
          .                   ///
          .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
          .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
          .                   /// release mode (the only situation in which method can return 0).
          .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
          .                   /// ```
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
          .                   #[rustc_inherit_overflow_checks]
          .                   pub const fn next_power_of_two(self) -> Self {
    341,108 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
          .                   }
          .           
          .                   /// Returns the smallest power of two greater than or equal to `n`. If
          .                   /// the next power of two is greater than the type's maximum value,
          .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
          .                   ///
          .                   /// # Examples
          .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
          .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
          .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   #[inline]
      1,365 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
      1,092 ( 0.00%)              self.to_le().to_ne_bytes()
        819 ( 0.00%)          }
          .           
          .                   /// Return the memory representation of this integer as a byte array in
          .                   /// native byte order.
          .                   ///
          .                   /// As the target platform's native endianness is used, portable code
          .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
          .                   /// instead.
          .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use = "this returns the result of the operation, \
          .                                 without modifying the original"]
          .                   // SAFETY: const sound because integers are plain old datatypes so we can always
          .                   // transmute them to arrays of bytes
          .                   #[inline]
        546 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
          .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
          .                       // arrays of bytes
        273 ( 0.00%)              unsafe { mem::transmute(self) }
        819 ( 0.00%)          }
          .           
          .                   /// Create a native endian integer value from its representation
          .                   /// as a byte array in big endian.
          .                   ///
          .                   #[doc = $from_xe_bytes_doc]
          .                   ///
          .                   /// # Examples
          .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
          .                   ///     *input = rest;
          .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
          .                   /// }
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use]
          .                   #[inline]
      1,092 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
      1,365 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
        546 ( 0.00%)          }
          .           
          .                   /// Create a native endian integer value from its memory representation
          .                   /// as a byte array in native endianness.
          .                   ///
          .                   /// As the target platform's native endianness is used, portable code
          .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
          .                   /// appropriate instead.
          .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
          .                   /// }
          .                   /// ```
          .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
          .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
          .                   #[must_use]
          .                   // SAFETY: const sound because integers are plain old datatypes so we can always
          .                   // transmute to them
          .                   #[inline]
      1,092 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
          .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
      1,638 ( 0.00%)              unsafe { mem::transmute(bytes) }
        546 ( 0.00%)          }
          .           
          .                   /// New code should prefer to use
          .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
          .                   ///
          .                   /// Returns the smallest value that can be represented by this integer type.
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   #[rustc_promotable]
          .                   #[inline(always)]
-- line 2421 ----------------------------------------

  2,199,396 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .           // maximum of number bytes needed to fill an 8-byte-sized element on which
         .           // SipHash operates. Note that for variable-sized copies which are known to be
         .           // less than 8 bytes, this function will perform more work than necessary unless
         .           // the compiler is able to optimize the extra work away.
         .           #[inline]
         .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
         .               debug_assert!(count <= 8);
         .           
   330,315 ( 0.00%)      if count == 8 {
         .                   ptr::copy_nonoverlapping(src, dst, 8);
         .                   return;
         .               }
         .           
         .               let mut i = 0;
   334,724 ( 0.00%)      if i + 3 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
         .                   i += 4;
         .               }
         .           
   730,090 ( 0.00%)      if i + 1 < count {
         .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    82,466 ( 0.00%)          i += 2
         .               }
         .           
   334,724 ( 0.00%)      if i < count {
   256,616 ( 0.00%)          *dst.add(i) = *src.add(i);
         .                   i += 1;
         .               }
         .           
         .               debug_assert_eq!(i, count);
         .           }
         .           
         .           // # Implementation
         .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
         .           
         .                   hasher
         .               }
         .           
         .               // A specialized write function for values with size <= 8.
         .               #[inline]
         .               fn short_write<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
 5,034,791 ( 0.02%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
35,039,589 ( 0.16%)          if nbuf + size < BUFFER_SIZE {
         .                       unsafe {
         .                           // The memcpy call is optimized away because the size is known.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .                       }
         .           
11,148,927 ( 0.05%)              self.nbuf = nbuf + size;
         .           
         .                       return;
         .                   }
         .           
 1,907,279 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
         .               }
         .           
         .               // A specialized write function for values with size <= 8 that should only
         .               // be called when the write would cause the buffer to fill.
         .               //
         .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
         .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
         .               // overflow) if it wasn't already.
         .               #[inline(never)]
   567,026 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
         .                   let size = mem::size_of::<T>();
   567,026 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(size <= 8);
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
         .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
         .           
         .                   // Copy first part of input into end of buffer, possibly into spill
         .                   // element. The memcpy call is optimized away because the size is known.
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
         .           
         .                   // Process buffer.
         .                   for i in 0..BUFFER_CAPACITY {
 5,670,260 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
 4,536,208 ( 0.02%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
 5,103,234 ( 0.02%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer by copying size - 1
         .                   // elements from spill (at most size - 1 bytes could have overflowed
         .                   // into the spill). The memcpy call is optimized away because the size
         .                   // is known. And the whole copy is optimized away for size == 1.
         .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
         .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
         .           
         .                   // This function should only be called when the write fills the buffer.
         .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
         .                   // is statically known, so the branch is optimized away.
 2,696,414 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
 2,268,104 ( 0.01%)          self.processed += BUFFER_SIZE;
 1,134,052 ( 0.01%)      }
         .           
         .               // A write function for byte slices.
         .               #[inline]
         .               fn slice_write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    35,560 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .           
 1,078,955 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
         .                       unsafe {
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .           
   389,162 ( 0.00%)                  if length <= 8 {
         .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
         .                           } else {
         .                               // This memcpy is *not* optimized away.
         .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
         .                           }
         .                       }
         .           
   200,011 ( 0.00%)              self.nbuf = nbuf + length;
         .           
         .                       return;
         .                   }
         .           
   153,432 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
         .               }
         .           
         .               // A write function for byte slices that should only be called when the
         .               // write would cause the buffer to fill.
         .               //
         .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
         .               // and `msg` must contain enough bytes to initialize the rest of the element
         .               // containing the byte offset `self.nbuf`.
         .               #[inline(never)]
    90,625 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
    18,125 ( 0.00%)          let nbuf = self.nbuf;
         .                   debug_assert!(nbuf < BUFFER_SIZE);
         .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
         .           
         .                   // Always copy first part of input into current element of buffer.
         .                   // This function should only be called when the write fills the buffer,
         .                   // so we know that there is enough input to fill the current element.
    54,375 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    18,125 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
         .           
         .                   let src = msg.as_ptr();
         .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
         .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
         .           
         .                   // Process buffer.
         .           
         .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
         .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
         .                   // We know that is true, because last step ensured we have a full
         .                   // element in the buffer.
    36,250 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
         .           
         .                   for i in 0..last {
   141,107 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   159,232 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
   282,214 ( 0.00%)              self.state.v0 ^= elem;
         .                   }
         .           
         .                   // Process the remaining element-sized chunks of input.
         .                   let mut processed = needed_in_elem;
    36,250 ( 0.00%)          let input_left = length - processed;
    16,764 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
         .                   let extra_bytes_left = input_left % ELEM_SIZE;
         .           
         .                   for _ in 0..elems_left {
     8,059 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
     8,059 ( 0.00%)              self.state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut self.state);
     8,059 ( 0.00%)              self.state.v0 ^= elem;
    16,118 ( 0.00%)              processed += ELEM_SIZE;
         .                   }
         .           
         .                   // Copy remaining input into start of buffer.
         .                   let src = msg.as_ptr().add(processed);
         .                   let dst = self.buf.as_mut_ptr() as *mut u8;
         .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
         .           
    18,125 ( 0.00%)          self.nbuf = extra_bytes_left;
    90,625 ( 0.00%)          self.processed += nbuf + processed;
   108,750 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn finish128(mut self) -> (u64, u64) {
         .                   debug_assert!(self.nbuf < BUFFER_SIZE);
         .           
         .                   // Process full elements in buffer.
   197,523 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
         .           
         .                   // Since we're consuming self, avoid updating members for a potential
         .                   // performance gain.
   263,364 ( 0.00%)          let mut state = self.state;
         .           
         .                   for i in 0..last {
   193,885 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   193,885 ( 0.00%)              state.v3 ^= elem;
         .                       Sip24Rounds::c_rounds(&mut state);
   193,885 ( 0.00%)              state.v0 ^= elem;
         .                   }
         .           
         .                   // Get remaining partial element.
   131,682 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
         .                       unsafe {
         .                           // Ensure element is initialized by writing zero bytes. At most
         .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
         .                           // to write this many because we have the spill and we maintain
         .                           // `self.nbuf` such that this write will start before the spill.
         .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
         .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    48,039 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
         .                       }
         .                   } else {
         .                       0
         .                   };
         .           
         .                   // Finalize the hash.
   175,706 ( 0.00%)          let length = self.processed + self.nbuf;
   123,634 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
         .           
    61,817 ( 0.00%)          state.v3 ^= b;
         .                   Sip24Rounds::c_rounds(&mut state);
    61,817 ( 0.00%)          state.v0 ^= b;
         .           
    61,817 ( 0.00%)          state.v2 ^= 0xee;
         .                   Sip24Rounds::d_rounds(&mut state);
   208,666 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
    85,030 ( 0.00%)          state.v1 ^= 0xdd;
         .                   Sip24Rounds::d_rounds(&mut state);
    85,030 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
         .           
         .                   (_0, _1)
         .               }
         .           }
         .           
         .           impl Hasher for SipHasher128 {
         .               #[inline]
         .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip24Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
20,385,705 ( 0.09%)          compress!(state);
21,888,703 ( 0.10%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
   417,328 ( 0.00%)          compress!(state);
   417,328 ( 0.00%)          compress!(state);
   417,328 ( 0.00%)          compress!(state);
   355,512 ( 0.00%)          compress!(state);
         .               }
         .           }

 3,961,468 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    446,037 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
  2,854,572 ( 0.01%)                      let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  6,315,093 ( 0.03%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    475,762 ( 0.00%)                      old
          .                           }
    951,524 ( 0.00%)              }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     84,692 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
     21,086 ( 0.00%)                      self.end
          .                           }
     21,086 ( 0.00%)              }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
  1,809,924 ( 0.01%)                  len!(self)
    100,662 ( 0.00%)              }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> Iterator for $name<'a, T> {
          .                       type Item = $elem;
          .           
          .                       #[inline]
  1,656,222 ( 0.01%)              fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  4,030,665 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
  2,760,370 ( 0.01%)                      if mem::size_of::<T>() != 0 {
  1,303,872 ( 0.01%)                          assume(!self.end.is_null());
          .                               }
270,311,101 ( 1.20%)                      if is_empty!(self) {
     76,312 ( 0.00%)                          None
          .                               } else {
    951,527 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
  1,656,222 ( 0.01%)              }
          .           
          .                       #[inline]
      7,100 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
  8,881,810 ( 0.04%)                  let exact = len!(self);
     12,780 ( 0.00%)                  (exact, Some(exact))
      2,840 ( 0.00%)              }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    107,988 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     39,858 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
        216 ( 0.00%)              fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
     17,896 ( 0.00%)                  while let Some(x) = self.next() {
    140,433 ( 0.00%)                      if !f(x) {
         54 ( 0.00%)                          return false;
          .                               }
          .                           }
          .                           true
        324 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
        546 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  3,104,839 ( 0.01%)                  while let Some(x) = self.next() {
  3,059,928 ( 0.01%)                      if f(x) {
          7 ( 0.00%)                          return true;
          .                               }
          .                           }
         98 ( 0.00%)                  false
        548 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
      6,512 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
    393,057 ( 0.00%)                  while let Some(x) = self.next() {
    433,818 ( 0.00%)                      if predicate(&x) {
      1,093 ( 0.00%)                          return Some(x);
          .                               }
          .                           }
        687 ( 0.00%)                  None
      7,937 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
         46 ( 0.00%)              fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
    187,180 ( 0.00%)                  while let Some(x) = self.next() {
  1,070,552 ( 0.00%)                      if let Some(y) = f(x) {
    142,045 ( 0.00%)                          return Some(y);
          .                               }
         16 ( 0.00%)                  }
          6 ( 0.00%)                  None
     32,599 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
        180 ( 0.00%)              fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
      1,125 ( 0.00%)                  let n = len!(self);
         45 ( 0.00%)                  let mut i = 0;
      1,880 ( 0.00%)                  while let Some(x) = self.next() {
  1,400,354 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         33 ( 0.00%)                          unsafe { assume(i < n) };
         99 ( 0.00%)                          return Some(i);
          .                               }
        728 ( 0.00%)                      i += 1;
          .                           }
         12 ( 0.00%)                  None
        213 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
    354,719 ( 0.00%)                  while let Some(x) = self.next_back() {
  4,718,356 ( 0.02%)                      i -= 1;
  3,847,213 ( 0.02%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
          .           
          .                       #[doc(hidden)]
        388 ( 0.00%)              unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> Self::Item {
          .                           // SAFETY: the caller must guarantee that `i` is in bounds of
          .                           // the underlying slice, so `i` cannot overflow an `isize`, and
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    412,888 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
        194 ( 0.00%)              }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
     32,256 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
     53,846 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
     53,760 ( 0.00%)                      if mem::size_of::<T>() != 0 {
     32,355 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  8,422,952 ( 0.04%)                      if is_empty!(self) {
        209 ( 0.00%)                          None
          .                               } else {
     21,086 ( 0.00%)                          Some(next_back_unchecked!(self))
          .                               }
          .                           }
     32,256 ( 0.00%)              }
          .           
          .                       #[inline]
          .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
          .                           if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               self.end = self.ptr.as_ptr();
          .                               return None;
          .                           }
-- line 375 ----------------------------------------

 61,478,733 ( 0.27%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
13,770,928 ( 0.06%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
 8,606,830 ( 0.04%)              .intern(kind, |kind| {
   272,648 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
   545,296 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
15,492,294 ( 0.07%)      }
         .           
         .               #[inline(never)]
 5,000,088 ( 0.02%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 4,375,077 ( 0.02%)              .intern(kind, |kind| {
   665,118 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 5,625,099 ( 0.03%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 2,108,453 ( 0.01%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
 1,644,675 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   330,067 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   330,067 ( 0.00%)          self.data.get(&id.local_id)
 1,318,332 ( 0.01%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
    22,344 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         .                   self.get(key).expect("LocalTableInContext: key not found")
    14,896 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    71,640 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   847,740 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    71,640 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   425,055 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   283,370 ( 0.00%)          match *qpath {
   823,032 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
    27,078 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   708,425 ( 0.00%)      }
         .           
       648 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    22,428 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
       648 ( 0.00%)      }
         .           
    14,223 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    29,433 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    28,446 ( 0.00%)      }
         .           
    42,788 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    42,788 ( 0.00%)      }
         .           
   125,566 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   125,566 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   125,566 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    37,621 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     8,320 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    48,462 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    24,231 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    52,390 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    26,195 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
     4,404 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     2,202 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   311,220 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   155,610 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   506,494 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   253,247 ( 0.00%)      }
         .           
 2,174,112 ( 0.01%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   362,352 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
 1,811,760 ( 0.01%)      }
         .           
   479,841 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   479,841 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
   959,682 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    60,128 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    30,064 ( 0.00%)      }
         .           
   164,982 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   164,982 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   329,964 ( 0.00%)      }
         .           
   111,226 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   111,226 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   222,452 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    40,476 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   398,086 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   431,572 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   210,216 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   105,108 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   326,060 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   163,030 ( 0.00%)      }
         .           
   189,888 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   379,776 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   379,776 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
    30,345 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     6,069 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
    13,884 ( 0.00%)      }
         .           
       640 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       128 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
       384 ( 0.00%)      }
         .           
    21,780 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    43,560 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    48,372 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    43,560 ( 0.00%)      }
         .           
   119,604 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
   159,472 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
   103,976 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    32,054 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    52,444 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    26,222 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   131,136 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    65,568 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    39,628 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    19,814 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
    30,372 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
    37,965 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     6,420 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     3,210 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         .               }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    21,316 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    10,658 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    14,896 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     7,448 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     6,420 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     3,210 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         .               }
         .           
       696 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       232 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
       464 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     3,210 ( 0.00%)          &self.coercion_casts
     3,210 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
       486 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     1,210 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
    10,846 ( 0.00%)      pub fn is_identity(&self) -> bool {
    21,692 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
    10,846 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
    33,326 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    16,201 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
     1,542 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
    21,692 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
     7,260 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   107,142 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   171,880 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    68,752 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
   137,504 ( 0.00%)      }
         .           
    12,165 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     4,055 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    16,220 ( 0.00%)      }
         .           
    81,100 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    16,220 ( 0.00%)          self.arena.alloc(Steal::new(mir))
   113,540 ( 0.00%)      }
         .           
    16,220 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     4,055 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    20,275 ( 0.00%)      }
         .           
     5,598 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     9,952 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     2,488 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
       380 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
        76 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
       988 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
       380 ( 0.00%)      }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    98,144 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    49,072 ( 0.00%)          let attrs = self.get_attrs(def_id);
   208,556 ( 0.00%)          let get = |name| {
    49,072 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       888 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       444 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
       222 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
   245,360 ( 0.00%)          };
    73,608 ( 0.00%)          (
    73,608 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    36,804 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    98,144 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
   123,095 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    17,585 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   133,871 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   140,680 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 4,883,641 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 6,278,967 ( 0.03%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     1,477 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     1,688 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
   152,523 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   174,312 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
    99,470 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   113,680 ( 0.00%)      }
         .           
    60,515 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    77,805 ( 0.00%)      }
         .           
 2,075,696 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 2,372,224 ( 0.01%)      }
         .           
    95,773 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
   677,853 ( 0.00%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
   484,375 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
    96,234 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
       138 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       207 ( 0.00%)          if let Some(id) = id.as_local() {
       123 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
       140 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
       207 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    40,713 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
    11,533 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
    42,452 ( 0.00%)          &*self.untracked_resolutions.cstore
    21,226 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    12,198 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    49,059 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     6,420 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     9,630 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     3,210 ( 0.00%)          self.sess.opts.borrowck_mode
    12,840 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
       492 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
       192 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
     5,984 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
     9,978 ( 0.00%)              match crate_type {
         .                           CrateType::Executable
         .                           | CrateType::Staticlib
         .                           | CrateType::ProcMacro
         .                           | CrateType::Cdylib => false,
         .           
         .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
         .                           // We want to block export of generics from dylibs,
         .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
    24,742 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    24,742 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    49,484 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
       900 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
       150 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
       300 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
       900 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    16,401 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    11,928 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    26,838 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
    13,419 ( 0.00%)      }
         .           
    46,844 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
    53,536 ( 0.00%)      }
         .           
 1,706,607 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 1,950,408 ( 0.01%)      }
         .           
   207,270 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
   236,880 ( 0.00%)      }
         .           
     9,058 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
    10,352 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     7,192 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   432,304 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 1,777,718 ( 0.01%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
     3,752 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   840,466 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   828,474 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 1,611,252 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   695,308 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   531,755 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   114,684 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 1,702,015 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   177,457 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   568,031 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
    74,336 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 4,678,681 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 2,412,591 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    20,923 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 5,248,602 ( 0.02%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
18,431,919 ( 0.08%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
16,436,547 ( 0.07%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
     5,472 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
     4,104 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
       912 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
     4,104 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       938 ( 0.00%)              let trait_did = stack.pop()?;
       469 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
     1,104 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
       736 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   557,728 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
12,106,436 ( 0.05%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 6,774,980 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
 6,559,808 ( 0.03%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
   488,633 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 6,559,808 ( 0.03%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     1,381 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
     1,381 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     4,950 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     4,950 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        10 ( 0.00%)          match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
        10 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     4,980 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
    15,916 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    16,264 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     8,628 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    19,816 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    27,836 ( 0.00%)          iter.intern_with(|ts| {
    12,183 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    71,282 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    25,047 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
     7,800 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    11,676 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     1,242 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
   100,478 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    63,698 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
    24,216 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
    20,636 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
   100,478 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
     9,753 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
     9,753 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    19,506 ( 0.00%)      }
         .           
       538 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
     1,614 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
     1,076 ( 0.00%)      }
         .           
     2,964 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
     2,964 ( 0.00%)          self.mk_place_elem(
         .                       place,
     5,928 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
     5,928 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
         .           
        58 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        58 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
       116 ( 0.00%)      }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   147,483 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   163,870 ( 0.00%)      }
         .           
    29,442 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     4,206 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
        30 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
    16,824 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    33,648 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    86,981 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
    59,266 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    55,904 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   311,335 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    13,666 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 2,765,826 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   203,868 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   131,836 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    48,208 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
   223,856 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
     3,644 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    48,495 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    62,544 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    35,123 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     6,033 ( 0.00%)              c_variadic,
     8,311 ( 0.00%)              unsafety,
     7,510 ( 0.00%)              abi,
     8,450 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    16,809 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        24 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    91,832 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
        72 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 1,303,207 ( 0.01%)          iter.intern_with(|xs| self.intern_substs(xs))
        96 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    31,840 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
   150,822 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   301,644 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   200,648 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
 1,231,020 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
 1,231,020 ( 0.01%)          let hir = self.hir();
         .                   loop {
 2,458,626 ( 0.01%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 3,220,258 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 1,931,046 ( 0.01%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
 1,758,600 ( 0.01%)      }
         .           
    53,080 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   501,814 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    45,436 ( 0.00%)              let next = self.hir().get_parent_node(id);
   136,308 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    53,080 ( 0.00%)      }
         .           
     5,516 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
    21,654 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     6,368 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     3,152 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    27,790 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     7,940 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
     7,940 ( 0.00%)          Some(&*candidates)
    31,760 ( 0.00%)      }
         .           
    92,603 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   119,061 ( 0.00%)      }
         .           
    12,006 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
       660 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    10,672 ( 0.00%)      }
         .           
    72,079 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
    92,673 ( 0.00%)      }
         .           
    79,047 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    79,047 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
     4,070 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       407 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        90 ( 0.00%)              match self.lookup_const_stability(def_id) {
        16 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
         6 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
     3,663 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
    92,112 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
 6,180,418 ( 0.03%)          E::intern_with(self, f)
    80,460 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 1,004,876 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,125,924 ( 0.01%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         3 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
       191 ( 0.00%)                  assert!(iter.next().is_none());
   141,542 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
     3,123 ( 0.00%)                  assert!(iter.next().is_none());
   176,285 ( 0.00%)                  f(&[t0, t1])
         .                       }
    11,640 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
 1,015,101 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    57,141 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
     3,380 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    48,788 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
 2,039,464 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
 1,561,872 ( 0.01%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
    12,555 ( 0.00%)                  let t0 = iter.next().unwrap()?;
         .                           assert!(iter.next().is_none());
   111,678 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
     4,746 ( 0.00%)                  let t0 = iter.next().unwrap()?;
     4,746 ( 0.00%)                  let t1 = iter.next().unwrap()?;
     7,119 ( 0.00%)                  assert!(iter.next().is_none());
   171,414 ( 0.00%)                  f(&[t0, t1])
         .                       }
    20,655 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 2,289,988 ( 0.01%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   840,466 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
        72 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    69,080 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 6,180,992 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                 

-- line 44 ----------------------------------------
        .           /// Convert from a specific kind of undo to the more general UndoLog
        .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
        .               fn from(l: Instantiate) -> Self {
        .                   UndoLog::Values(sv::UndoLog::Other(l))
        .               }
        .           }
        .           
        .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
  387,308 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
1,630,114 ( 0.01%)          match undo {
  306,426 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
  177,796 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
  290,394 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
        .                   }
  774,616 ( 0.00%)      }
        .           }
        .           
        .           pub struct TypeVariableStorage<'tcx> {
        .               values: sv::SnapshotVecStorage<Delegate>,
        .           
        .               /// Two variables are unified in `eq_relations` when we have a
        .               /// constraint `?X == ?Y`. This table also stores, for each key,
        .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
        .               DynReturnFn,
        .               LatticeVariable,
        .           }
        .           
        .           pub(crate) struct TypeVariableData {
        .               origin: TypeVariableOrigin,
        .           }
        .           
3,122,498 ( 0.01%)  #[derive(Copy, Clone, Debug)]
        .           pub enum TypeVariableValue<'tcx> {
        .               Known { value: Ty<'tcx> },
        .               Unknown { universe: ty::UniverseIndex },
        .           }
        .           
        .           impl<'tcx> TypeVariableValue<'tcx> {
        .               /// If this value is known, returns the type it is known to be.
        .               /// Otherwise, `None`.
        .               pub fn known(&self) -> Option<Ty<'tcx>> {
2,043,490 ( 0.01%)          match *self {
        .                       TypeVariableValue::Unknown { .. } => None,
        .                       TypeVariableValue::Known { value } => Some(value),
        .                   }
        .               }
        .           
        .               pub fn is_unknown(&self) -> bool {
        .                   match *self {
        .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
        .           }
        .           
        .           pub(crate) struct Instantiate;
        .           
        .           pub(crate) struct Delegate;
        .           
        .           impl<'tcx> TypeVariableStorage<'tcx> {
        .               pub fn new() -> TypeVariableStorage<'tcx> {
  267,285 ( 0.00%)          TypeVariableStorage {
        .                       values: sv::SnapshotVecStorage::new(),
        .                       eq_relations: ut::UnificationTableStorage::new(),
        .                       sub_relations: ut::UnificationTableStorage::new(),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
        .               /// Returns the origin that was given when `vid` was created.
        .               ///
        .               /// Note that this function does not return care whether
        .               /// `vid` has been unified with something else or not.
        .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
    4,436 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
        .               }
        .           
        .               /// Records that `a == b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   38,696 ( 0.00%)          self.eq_relations().union(a, b);
   33,168 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Records that `a <: b`, depending on `dir`.
        .               ///
        .               /// Precondition: neither `a` nor `b` are known.
        .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
        .                   debug_assert!(self.probe(a).is_unknown());
        .                   debug_assert!(self.probe(b).is_unknown());
   21,519 ( 0.00%)          self.sub_relations().union(a, b);
        .               }
        .           
        .               /// Instantiates `vid` with the type `ty`.
        .               ///
        .               /// Precondition: `vid` must not have been previously instantiated.
  639,820 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
        .                   let vid = self.root_var(vid);
        .                   debug_assert!(self.probe(vid).is_unknown());
        .                   debug_assert!(
        .                       self.eq_relations().probe_value(vid).is_unknown(),
        .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
        .                       vid,
        .                       ty,
        .                       self.eq_relations().probe_value(vid)
        .                   );
  895,748 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
        .           
        .                   // Hack: we only need this so that `types_escaping_snapshot`
        .                   // can see what has been unified; see the Delegate impl for
        .                   // more details.
        .                   self.undo_log.push(Instantiate);
  639,820 ( 0.00%)      }
        .           
        .               /// Creates a new type variable.
        .               ///
        .               /// - `diverging`: indicates if this is a "diverging" type
        .               ///   variable, e.g.,  one created as the type of a `return`
        .               ///   expression. The code in this module doesn't care if a
        .               ///   variable is diverging, but the main Rust type-checker will
        .               ///   sometimes "unify" such variables with the `!` or `()` types.
        .               /// - `origin`: indicates *why* the type variable was created.
        .               ///   The code in this module doesn't care, but it can be useful
        .               ///   for improving error messages.
  812,676 ( 0.00%)      pub fn new_var(
        .                   &mut self,
        .                   universe: ty::UniverseIndex,
        .                   origin: TypeVariableOrigin,
        .               ) -> ty::TyVid {
1,219,014 ( 0.01%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
        .           
  677,230 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
  135,446 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
        .           
1,219,014 ( 0.01%)          let index = self.values().push(TypeVariableData { origin });
  541,784 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
        .           
        .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
        .           
        .                   eq_key.vid
  948,122 ( 0.00%)      }
        .           
        .               /// Returns the number of type variables created thus far.
        .               pub fn num_vars(&self) -> usize {
    8,452 ( 0.00%)          self.storage.values.len()
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `eq_relations`
        .               /// equivalence table. All type variables that have been equated
        .               /// will yield the same root variable (per the union-find
        .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
        .               /// b` (transitively).
        .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  571,992 ( 0.00%)          self.eq_relations().find(vid).vid
        .               }
        .           
        .               /// Returns the "root" variable of `vid` in the `sub_relations`
        .               /// equivalence table. All type variables that have been are
        .               /// related via equality or subtyping will yield the same root
        .               /// variable (per the union-find algorithm), so `sub_root_var(a)
        .               /// == sub_root_var(b)` implies that:
        .               ///
        .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
    2,562 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
  408,627 ( 0.00%)          self.sub_relations().find(vid)
    5,124 ( 0.00%)      }
        .           
        .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
        .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
        .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
        .                   self.sub_root_var(a) == self.sub_root_var(b)
        .               }
        .           
        .               /// Retrieves the type to which `vid` has been instantiated, if
        .               /// any.
7,123,955 ( 0.03%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
        .                   self.inlined_probe(vid)
7,123,955 ( 0.03%)      }
        .           
        .               /// An always-inlined variant of `probe`, for very hot call sites.
        .               #[inline(always)]
        .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
4,336,030 ( 0.02%)          self.eq_relations().inlined_probe_value(vid)
        .               }
        .           
        .               /// If `t` is a type-inference variable, and it has been
        .               /// instantiated, then return the with which it was
        .               /// instantiated. Otherwise, returns `t`.
        .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
1,315,830 ( 0.01%)          match *t.kind() {
1,050,214 ( 0.00%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
        .                           TypeVariableValue::Unknown { .. } => t,
        .                           TypeVariableValue::Known { value } => value,
        .                       },
        .                       _ => t,
        .                   }
        .               }
        .           
        .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
        .               fn values(
        .                   &mut self,
        .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
        .                   self.storage.values.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
5,876,055 ( 0.03%)          self.storage.eq_relations.with_log(self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
  292,305 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
        .               }
        .           
        .               /// Returns a range of the type variables created during the snapshot.
   42,260 ( 0.00%)      pub fn vars_since_snapshot(
        .                   &mut self,
        .                   value_count: usize,
        .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
        .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
   50,712 ( 0.00%)          (
        .                       range.start..range.end,
        .                       (range.start.as_usize()..range.end.as_usize())
        .                           .map(|index| self.storage.values.get(index).origin)
        .                           .collect(),
        .                   )
   50,712 ( 0.00%)      }
        .           
        .               /// Returns indices of all variables that are not yet
        .               /// instantiated.
        .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
        .                   (0..self.storage.values.len())
        .                       .filter_map(|i| {
        .                           let vid = ty::TyVid::from_usize(i);
  319,724 ( 0.00%)                  match self.probe(vid) {
        .                               TypeVariableValue::Unknown { .. } => Some(vid),
        .                               TypeVariableValue::Known { .. } => None,
        .                           }
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
        .           /// These structs (a newtyped TyVid) are used as the unification key
        .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
        .           /// with them.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
        .           pub(crate) struct TyVidEqKey<'tcx> {
        .               vid: ty::TyVid,
        .           
        .               // in the table, we map each ty-vid to one of these:
4,120,420 ( 0.02%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
        .           }
        .           
        .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
        .               #[inline] // make this function eligible for inlining - it is quite hot.
        .               fn from(vid: ty::TyVid) -> Self {
        .                   TyVidEqKey { vid, phantom: PhantomData }
        .               }
        .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
        .                   "TyVidEqKey"
        .               }
        .           }
        .           
        .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
        .               type Error = ut::NoError;
        .           
        .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
  539,496 ( 0.00%)          match (value1, value2) {
        .                       // We never equate two type variables, both of which
        .                       // have known types.  Instead, we recursively equate
        .                       // those types.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
        .                           bug!("equating two type variables, both of which have known types")
        .                       }
        .           
        .                       // If one side is known, prefer that one.
        .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
        .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
        .           
        .                       // If both sides are *unknown*, it hardly matters, does it?
        .                       (
    5,528 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
    5,528 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
        .                       ) => {
        .                           // If we unify two unbound variables, ?T and ?U, then whatever
        .                           // value they wind up taking (which must be the same value) must
        .                           // be nameable by both universes. Therefore, the resulting
        .                           // universe is the minimum of the two universes, because that is
        .                           // the one which contains the fewest names in scope.
        .                           let universe = cmp::min(universe1, universe2);
   22,112 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
        .                       }
        .                   }
        .               }
        .           }

  375,230 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs
--------------------------------------------------------------------------------
Ir                  

-- line 22 ----------------------------------------
         .           impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {
         .               type Target = <T as ApplyL<'b>>::Out;
         .               fn deref(&self) -> &Self::Target {
         .                   self.0
         .               }
         .           }
         .           
         .           impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {
     1,092 ( 0.00%)      fn deref_mut(&mut self) -> &mut Self::Target {
       546 ( 0.00%)          self.0
     1,092 ( 0.00%)      }
         .           }
         .           
         .           pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);
         .           
         .           impl<T: LambdaL> ScopedCell<T> {
         .               #[rustc_allow_const_fn_unstable(const_fn)]
         3 ( 0.00%)      pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {
        10 ( 0.00%)          ScopedCell(Cell::new(value))
         2 ( 0.00%)      }
         .           
         .               /// Sets the value in `self` to `replacement` while
         .               /// running `f`, which gets the old value, mutably.
         .               /// The old value will be restored after `f` exits, even
         .               /// by panic, including modifications made to it by `f`.
15,329,607 ( 0.07%)      pub fn replace<'a, R>(
         .                   &self,
         .                   replacement: <T as ApplyL<'a>>::Out,
         .                   f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,
         .               ) -> R {
         .                   /// Wrapper that ensures that the cell always gets filled
         .                   /// (with the original state, optionally changed by `f`),
         .                   /// even if `f` had panicked.
         .                   struct PutBackOnDrop<'a, T: LambdaL> {
         .                       cell: &'a ScopedCell<T>,
         .                       value: Option<<T as ApplyL<'static>>::Out>,
         .                   }
         .           
         .                   impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {
     2,457 ( 0.00%)              fn drop(&mut self) {
 2,095,471 ( 0.01%)                  self.cell.0.set(self.value.take().unwrap());
     1,638 ( 0.00%)              }
         .                   }
         .           
 4,186,844 ( 0.02%)          let mut put_back_on_drop = PutBackOnDrop {
         .                       cell: self,
     8,190 ( 0.00%)              value: Some(self.0.replace(unsafe {
     1,638 ( 0.00%)                  let erased = mem::transmute_copy(&replacement);
     9,828 ( 0.00%)                  mem::forget(replacement);
     8,190 ( 0.00%)                  erased
         .                       })),
         .                   };
         .           
 1,168,632 ( 0.01%)          f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))
20,311,689 ( 0.09%)      }
         .           
         .               /// Sets the value in `self` to `value` while running `f`.
     1,911 ( 0.00%)      pub fn set<R>(&self, value: <T as ApplyL<'_>>::Out, f: impl FnOnce() -> R) -> R {
     4,368 ( 0.00%)          self.replace(value, |_| f())
       546 ( 0.00%)      }
         .           }

 1,047,744 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/scoped_cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs
--------------------------------------------------------------------------------
Ir                  

-- line 18 ----------------------------------------
         .                       // FIXME(eddyb) use a reference to the `static COUNTERS`, instead of
         .                       // a wrapper `fn` pointer, once `const fn` can reference `static`s.
         .                       extern "C" fn get() -> &'static Self {
         .                           static COUNTERS: HandleCounters = HandleCounters {
         .                               $($oty: AtomicUsize::new(1),)*
         .                               $($ity: AtomicUsize::new(1),)*
         .                           };
         .                           &COUNTERS
       580 ( 0.00%)              }
         .                   }
         .           
         .                   // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.
         .                   #[repr(C)]
         .                   #[allow(non_snake_case)]
         .                   pub(super) struct HandleStore<S: server::Types> {
         .                       $($oty: handle::OwnedStore<S::$oty>,)*
         .                       $($ity: handle::InternedStore<S::$ity>,)*
         .                   }
         .           
         .                   impl<S: server::Types> HandleStore<S> {
     1,740 ( 0.00%)              pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {
    17,110 ( 0.00%)                  HandleStore {
         .                               $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*
         .                               $($ity: handle::InternedStore::new(&handle_counters.$ity),)*
         .                           }
     2,320 ( 0.00%)              }
         .                   }
         .           
         .                   $(
         .                       #[repr(C)]
         .                       pub(crate) struct $oty(handle::Handle);
         .                       impl !Send for $oty {}
         .                       impl !Sync for $oty {}
         .           
         .                       // Forward `Drop::drop` to the inherent `drop` method.
         .                       impl Drop for $oty {
    29,166 ( 0.00%)                  fn drop(&mut self) {
   193,014 ( 0.00%)                      $oty(self.0).drop();
    43,749 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S> Encode<S> for $oty {
     2,184 ( 0.00%)                  fn encode(self, w: &mut Writer, s: &mut S) {
       819 ( 0.00%)                      let handle = self.0;
     1,092 ( 0.00%)                      mem::forget(self);
       273 ( 0.00%)                      handle.encode(w, s);
       546 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$oty, $oty>
         .                       {
 1,681,308 ( 0.01%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
         .                               s.$oty.take(handle::Handle::decode(r, &mut ()))
 2,241,744 ( 0.01%)                  }
         .                       }
         .           
         .                       impl<S> Encode<S> for &$oty {
         .                           fn encode(self, w: &mut Writer, s: &mut S) {
   345,273 ( 0.00%)                      self.0.encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<'s, S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>
         .                           for &'s Marked<S::$oty, $oty>
         .                       {
   115,091 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {
         .                               &s.$oty[handle::Handle::decode(r, &mut ())]
   230,182 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S> Encode<S> for &mut $oty {
         .                           fn encode(self, w: &mut Writer, s: &mut S) {
 1,290,903 ( 0.01%)                      self.0.encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<'s, S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>
         .                           for &'s mut Marked<S::$oty, $oty>
         .                       {
   430,301 ( 0.00%)                  fn decode(
         .                               r: &mut Reader<'_>,
         .                               s: &'s mut HandleStore<server::MarkedTypes<S>>
         .                           ) -> Self {
         .                               &mut s.$oty[handle::Handle::decode(r, &mut ())]
   860,602 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$oty, $oty>
         .                       {
 3,384,980 ( 0.02%)                  fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
   582,160 ( 0.00%)                      s.$oty.alloc(self).encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<S> DecodeMut<'_, '_, S> for $oty {
       819 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
       819 ( 0.00%)                      $oty(handle::Handle::decode(r, s))
       819 ( 0.00%)                  }
         .                       }
         .                   )*
         .           
         .                   $(
         .                       #[repr(C)]
   868,665 ( 0.00%)              #[derive(Copy, Clone, PartialEq, Eq, Hash)]
         .                       pub(crate) struct $ity(handle::Handle);
         .                       impl !Send for $ity {}
         .                       impl !Sync for $ity {}
         .           
         .                       impl<S> Encode<S> for $ity {
         .                           fn encode(self, w: &mut Writer, s: &mut S) {
         .                               self.0.encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$ity, $ity>
         .                       {
   456,653 ( 0.00%)                  fn decode(r: &mut Reader<'_>, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {
         .                               s.$ity.copy(handle::Handle::decode(r, &mut ()))
   913,306 ( 0.00%)                  }
         .                       }
         .           
         .                       impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>
         .                           for Marked<S::$ity, $ity>
         .                       {
         .                           fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {
 3,942,076 ( 0.02%)                      s.$ity.alloc(self).encode(w, s);
         .                           }
         .                       }
         .           
         .                       impl<S> DecodeMut<'_, '_, S> for $ity {
         .                           fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
         .                               $ity(handle::Handle::decode(r, s))
         .                           }
         .                       }
-- line 154 ----------------------------------------
-- line 175 ----------------------------------------
         .           
         .           // FIXME(eddyb) generate these impls by pattern-matching on the
         .           // names of methods - also could use the presence of `fn drop`
         .           // to distinguish between 'owned and 'interned, above.
         .           // Alternatively, special 'modes" could be listed of types in with_api
         .           // instead of pattern matching on methods, here and in server decl.
         .           
         .           impl Clone for TokenStream {
    61,146 ( 0.00%)      fn clone(&self) -> Self {
         .                   self.clone()
    61,146 ( 0.00%)      }
         .           }
         .           
         .           impl Clone for TokenStreamIter {
         .               fn clone(&self) -> Self {
         .                   self.clone()
         .               }
         .           }
         .           
         .           impl Clone for Group {
    31,173 ( 0.00%)      fn clone(&self) -> Self {
         .                   self.clone()
    31,173 ( 0.00%)      }
         .           }
         .           
         .           impl Clone for Literal {
    13,527 ( 0.00%)      fn clone(&self) -> Self {
         .                   self.clone()
    13,527 ( 0.00%)      }
         .           }
         .           
         .           impl fmt::Debug for Literal {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_struct("Literal")
         .                       // format the kind without quotes, as in `kind: Float`
         .                       .field("kind", &format_args!("{}", &self.debug_kind()))
         .                       .field("symbol", &self.symbol())
-- line 211 ----------------------------------------
-- line 219 ----------------------------------------
         .           impl Clone for SourceFile {
         .               fn clone(&self) -> Self {
         .                   self.clone()
         .               }
         .           }
         .           
         .           impl fmt::Debug for Span {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    21,995 ( 0.00%)          f.write_str(&self.debug())
         .               }
         .           }
         .           
         .           macro_rules! define_client_side {
         .               ($($name:ident {
         .                   $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)?) $(-> $ret_ty:ty)*;)*
         .               }),* $(,)?) => {
         .                   $(impl $name {
 2,261,862 ( 0.01%)              $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {
 1,157,389 ( 0.01%)                  Bridge::with(|bridge| {
         .                               let mut b = bridge.cached_buffer.take();
         .           
         .                               b.clear();
 6,259,377 ( 0.03%)                      api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());
 1,681,580 ( 0.01%)                      reverse_encode!(b; $($arg),*);
         .           
12,518,754 ( 0.06%)                      b = bridge.dispatch.call(b);
         .           
 8,763,755 ( 0.04%)                      let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());
         .           
25,037,508 ( 0.11%)                      bridge.cached_buffer = b;
         .           
 3,134,357 ( 0.01%)                      r.unwrap_or_else(|e| panic::resume_unwind(e.into()))
         .                           })
 1,884,885 ( 0.01%)              })*
         .                   })*
         .               }
         .           }
         .           with_api!(self, self, define_client_side);
         .           
         .           enum BridgeState<'a> {
         .               /// No server is currently connected to this client.
         .               NotConnected,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
         .           enum BridgeStateL {}
         .           
         .           impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {
         .               type Out = BridgeState<'a>;
         .           }
         .           
         .           thread_local! {
         .               static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =
         3 ( 0.00%)          scoped_cell::ScopedCell::new(BridgeState::NotConnected);
         .           }
         .           
         .           impl BridgeState<'_> {
         .               /// Take exclusive control of the thread-local
         .               /// `BridgeState`, and pass it to `f`, mutably.
         .               /// The state will be restored after `f` exits, even
         .               /// by panic, including modifications made to it by `f`.
         .               ///
         .               /// N.B., while `f` is running, the thread-local state
         .               /// is `BridgeState::InUse`.
 1,185,535 ( 0.01%)      fn with<R>(f: impl FnOnce(&mut BridgeState<'_>) -> R) -> R {
 1,007,984 ( 0.00%)          BRIDGE_STATE.with(|state| {
11,323,154 ( 0.05%)              state.replace(BridgeState::InUse, |mut state| {
         .                           // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone
     6,552 ( 0.00%)                  f(&mut *state)
     1,092 ( 0.00%)              })
     1,092 ( 0.00%)          })
 1,021,414 ( 0.00%)      }
         .           }
         .           
         .           impl Bridge<'_> {
         .               pub(crate) fn is_available() -> bool {
         9 ( 0.00%)          BridgeState::with(|state| match state {
         .                       BridgeState::Connected(_) | BridgeState::InUse => true,
         .                       BridgeState::NotConnected => false,
         .                   })
         .               }
         .           
     1,638 ( 0.00%)      fn enter<R>(self, f: impl FnOnce() -> R) -> R {
     1,911 ( 0.00%)          let force_show_panics = self.force_show_panics;
         .                   // Hide the default panic output within `proc_macro` expansions.
         .                   // NB. the server can't do this because it may use a different libstd.
         .                   static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();
     1,367 ( 0.00%)          HIDE_PANICS_DURING_EXPANSION.call_once(|| {
         7 ( 0.00%)              panic::update_hook(move |prev, info| {
         .                           let show = BridgeState::with(|state| match state {
         .                               BridgeState::NotConnected => true,
         .                               BridgeState::Connected(_) | BridgeState::InUse => force_show_panics,
         .                           });
         .                           if show {
         .                               prev(info)
         .                           }
         .                       });
         2 ( 0.00%)          });
         .           
    10,101 ( 0.00%)          BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))
       546 ( 0.00%)      }
         .           
     1,365 ( 0.00%)      fn with<R>(f: impl FnOnce(&mut Bridge<'_>) -> R) -> R {
14,781,346 ( 0.07%)          BridgeState::with(|state| match state {
         .                       BridgeState::NotConnected => {
         .                           panic!("procedural macro API is used outside of a procedural macro");
         .                       }
         .                       BridgeState::InUse => {
         .                           panic!("procedural macro API is used while it's already in use");
         .                       }
     3,549 ( 0.00%)              BridgeState::Connected(bridge) => f(bridge),
     1,092 ( 0.00%)          })
     1,092 ( 0.00%)      }
         .           }
         .           
         .           /// A client-side "global object" (usually a function pointer),
         .           /// which may be using a different `proc_macro` from the one
         .           /// used by the server, but can be interacted with compatibly.
         .           ///
         .           /// N.B., `F` must have FFI-friendly memory layout (e.g., a pointer).
         .           /// The call ABI of function pointers used for `F` doesn't
-- line 345 ----------------------------------------
-- line 353 ----------------------------------------
         .               pub(super) get_handle_counters: extern "C" fn() -> &'static HandleCounters,
         .               pub(super) run: extern "C" fn(Bridge<'_>, F) -> Buffer<u8>,
         .               pub(super) f: F,
         .           }
         .           
         .           /// Client-side helper for handling client panics, entering the bridge,
         .           /// deserializing input and serializing output.
         .           // FIXME(eddyb) maybe replace `Bridge::enter` with this?
     1,911 ( 0.00%)  fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(
         .               mut bridge: Bridge<'_>,
         .               f: impl FnOnce(A) -> R,
         .           ) -> Buffer<u8> {
         .               // The initial `cached_buffer` contains the input.
     1,638 ( 0.00%)      let mut b = bridge.cached_buffer.take();
         .           
     9,828 ( 0.00%)      panic::catch_unwind(panic::AssertUnwindSafe(|| {
     4,095 ( 0.00%)          bridge.enter(|| {
     5,187 ( 0.00%)              let reader = &mut &b[..];
     1,911 ( 0.00%)              let input = A::decode(reader, &mut ());
         .           
         .                       // Put the `cached_buffer` back in the `Bridge`, for requests.
     5,460 ( 0.00%)              Bridge::with(|bridge| bridge.cached_buffer = b.take());
         .           
     4,368 ( 0.00%)              let output = f(input);
         .           
         .                       // Take the `cached_buffer` back out, for the output value.
     5,187 ( 0.00%)              b = Bridge::with(|bridge| bridge.cached_buffer.take());
         .           
         .                       // HACK(eddyb) Separate encoding a success value (`Ok(output)`)
         .                       // from encoding a panic (`Err(e: PanicMessage)`) to avoid
         .                       // having handles outside the `bridge.enter(|| ...)` scope, and
         .                       // to catch panics that could happen while encoding the success.
         .                       //
         .                       // Note that panics should be impossible beyond this point, but
         .                       // this is defensively trying to avoid any accidental panicking
         .                       // reaching the `extern "C"` (which should `abort` but might not
         .                       // at the moment, so this is also potentially preventing UB).
       819 ( 0.00%)              b.clear();
     2,730 ( 0.00%)              Ok::<_, ()>(output).encode(&mut b, &mut ());
     1,092 ( 0.00%)          })
       546 ( 0.00%)      }))
         .               .map_err(PanicMessage::from)
       273 ( 0.00%)      .unwrap_or_else(|e| {
         .                   b.clear();
         .                   Err::<(), _>(e).encode(&mut b, &mut ());
         .               });
         .               b
       546 ( 0.00%)  }
         .           
         .           impl Client<fn(crate::TokenStream) -> crate::TokenStream> {
         .               #[rustc_allow_const_fn_unstable(const_fn)]
         1 ( 0.00%)      pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {
     1,911 ( 0.00%)          extern "C" fn run(
         .                       bridge: Bridge<'_>,
         .                       f: impl FnOnce(crate::TokenStream) -> crate::TokenStream,
         .                   ) -> Buffer<u8> {
     8,190 ( 0.00%)              run_client(bridge, |input| f(crate::TokenStream(input)).0)
       546 ( 0.00%)          }
         5 ( 0.00%)          Client { get_handle_counters: HandleCounters::get, run, f }
         1 ( 0.00%)      }
         .           }
         .           
         .           impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {
         .               #[rustc_allow_const_fn_unstable(const_fn)]
         .               pub const fn expand2(
         .                   f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,
         .               ) -> Self {
         .                   extern "C" fn run(
-- line 420 ----------------------------------------

 5,363,533 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/client.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs
--------------------------------------------------------------------------------
Ir                  

-- line 124 ----------------------------------------
         .           /// sizes and avoid calling `memcpy`, which is good for speed.
         .           ///
         .           /// Unsafe because: unchecked indexing at start..start+len
         .           #[inline]
         .           unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {
         .               debug_assert!(len < 8);
         .               let mut i = 0; // current byte index (from LSB) in the output u64
         .               let mut out = 0;
 8,104,426 ( 0.04%)      if i + 3 < len {
         .                   // SAFETY: `i` cannot be greater than `len`, and the caller must guarantee
         .                   // that the index start..start+len is in bounds.
         .                   out = unsafe { load_int_le!(buf, start + i, u32) } as u64;
         .                   i += 4;
         .               }
16,825,861 ( 0.07%)      if i + 1 < len {
         .                   // SAFETY: same as above.
 8,412,950 ( 0.04%)          out |= (unsafe { load_int_le!(buf, start + i, u16) } as u64) << (i * 8);
 4,206,250 ( 0.02%)          i += 2
         .               }
 9,389,783 ( 0.04%)      if i < len {
         .                   // SAFETY: same as above.
13,609,763 ( 0.06%)          out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);
         .                   i += 1;
         .               }
         .               debug_assert_eq!(i, len);
         .               out
         .           }
         .           
         .           impl SipHasher {
         .               /// Creates a new `SipHasher` with the two initial keys set to 0.
-- line 153 ----------------------------------------
-- line 190 ----------------------------------------
         .               /// Creates a `SipHasher13` that is keyed off the provided keys.
         .               #[inline]
         .               #[unstable(feature = "hashmap_internals", issue = "none")]
         .               #[rustc_deprecated(
         .                   since = "1.13.0",
         .                   reason = "use `std::collections::hash_map::DefaultHasher` instead"
         .               )]
         .               pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {
 1,616,915 ( 0.01%)          SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }
         .               }
         .           }
         .           
         .           impl<S: Sip> Hasher<S> {
         .               #[inline]
         .               fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {
         9 ( 0.00%)          let mut state = Hasher {
         .                       k0: key0,
         .                       k1: key1,
         .                       length: 0,
         .                       state: State { v0: 0, v1: 0, v2: 0, v3: 0 },
         .                       tail: 0,
         .                       ntail: 0,
         .                       _marker: PhantomData,
         .                   };
         .                   state.reset();
         .                   state
         .               }
         .           
         .               #[inline]
         .               fn reset(&mut self) {
         .                   self.length = 0;
 2,425,368 ( 0.01%)          self.state.v0 = self.k0 ^ 0x736f6d6570736575;
 2,579,622 ( 0.01%)          self.state.v1 = self.k1 ^ 0x646f72616e646f6d;
         .                   self.state.v2 = self.k0 ^ 0x6c7967656e657261;
         .                   self.state.v3 = self.k1 ^ 0x7465646279746573;
         .                   self.ntail = 0;
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl super::Hasher for SipHasher {
-- line 230 ----------------------------------------
-- line 258 ----------------------------------------
         .               // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`
         .               // methods to `SipHasher`, `SipHasher13`, and `DefaultHasher`. This would
         .               // greatly speed up integer hashing by those hashers, at the cost of
         .               // slightly slowing down compile speeds on some benchmarks. See #69152 for
         .               // details.
         .               #[inline]
         .               fn write(&mut self, msg: &[u8]) {
         .                   let length = msg.len();
10,347,314 ( 0.05%)          self.length += length;
         .           
         .                   let mut needed = 0;
         .           
10,193,049 ( 0.05%)          if self.ntail != 0 {
 5,178,310 ( 0.02%)              needed = 8 - self.ntail;
         .                       // SAFETY: `cmp::min(length, needed)` is guaranteed to not be over `length`
25,891,500 ( 0.12%)              self.tail |= unsafe { u8to64_le(msg, 0, cmp::min(length, needed)) } << (8 * self.ntail);
 5,178,300 ( 0.02%)              if length < needed {
 3,560,772 ( 0.02%)                  self.ntail += length;
         .                           return;
         .                       } else {
   808,764 ( 0.00%)                  self.state.v3 ^= self.tail;
         .                           S::c_rounds(&mut self.state);
 1,617,528 ( 0.01%)                  self.state.v0 ^= self.tail;
   808,764 ( 0.00%)                  self.ntail = 0;
         .                       }
         .                   }
         .           
         .                   // Buffered tail is now flushed, process new input.
 2,926,075 ( 0.01%)          let len = length - needed;
 2,926,086 ( 0.01%)          let left = len & 0x7; // len % 8
         .           
         .                   let mut i = needed;
 4,389,463 ( 0.02%)          while i < len - left {
         .                       // SAFETY: because `len - left` is the biggest multiple of 8 under
         .                       // `len`, and because `i` starts at `needed` where `len` is `length - needed`,
         .                       // `i + 8` is guaranteed to be less than or equal to `length`.
         .                       let mi = unsafe { load_int_le!(msg, i, u64) };
         .           
       167 ( 0.00%)              self.state.v3 ^= mi;
         .                       S::c_rounds(&mut self.state);
       167 ( 0.00%)              self.state.v0 ^= mi;
         .           
       334 ( 0.00%)              i += 8;
         .                   }
         .           
         .                   // SAFETY: `i` is now `needed + len.div_euclid(8) * 8`,
         .                   // so `i + left` = `needed + len` = `length`, which is by
         .                   // definition equal to `msg.len()`.
 3,080,329 ( 0.01%)          self.tail = unsafe { u8to64_le(msg, i, left) };
         .                   self.ntail = left;
         .               }
         .           
         .               #[inline]
         .               fn finish(&self) -> u64 {
   808,459 ( 0.00%)          let mut state = self.state;
         .           
 4,042,295 ( 0.02%)          let b: u64 = ((self.length as u64 & 0xff) << 56) | self.tail;
         .           
   808,459 ( 0.00%)          state.v3 ^= b;
         .                   S::c_rounds(&mut state);
   808,459 ( 0.00%)          state.v0 ^= b;
         .           
   808,459 ( 0.00%)          state.v2 ^= 0xff;
         .                   S::d_rounds(&mut state);
         .           
 1,616,918 ( 0.01%)          state.v0 ^ state.v1 ^ state.v2 ^ state.v3
         .               }
         .           }
         .           
         .           impl<S: Sip> Clone for Hasher<S> {
         .               #[inline]
         .               fn clone(&self) -> Hasher<S> {
         .                   Hasher {
         .                       k0: self.k0,
-- line 331 ----------------------------------------
-- line 354 ----------------------------------------
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip13Rounds;
         .           
         .           impl Sip for Sip13Rounds {
         .               #[inline]
         .               fn c_rounds(state: &mut State) {
10,513,624 ( 0.05%)          compress!(state);
         .               }
         .           
         .               #[inline]
         .               fn d_rounds(state: &mut State) {
 3,233,836 ( 0.01%)          compress!(state);
 3,233,836 ( 0.01%)          compress!(state);
 2,425,377 ( 0.01%)          compress!(state);
         .               }
         .           }
         .           
         .           #[derive(Debug, Clone, Default)]
         .           struct Sip24Rounds;
         .           
         .           impl Sip for Sip24Rounds {
         .               #[inline]
-- line 377 ----------------------------------------

24,112,050 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/hash/sip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                  

-- line 10 ----------------------------------------
         .           pub fn move_path_children_matching<'tcx, F>(
         .               move_data: &MoveData<'tcx>,
         .               path: MovePathIndex,
         .               mut cond: F,
         .           ) -> Option<MovePathIndex>
         .           where
         .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
         .           {
     6,943 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
    18,002 ( 0.00%)      while let Some(child_index) = next_child {
         .                   let move_path_children = &move_data.move_paths[child_index];
    16,144 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
    27,355 ( 0.00%)              if cond(elem) {
         .                           return Some(child_index);
         .                       }
         .                   }
         .                   next_child = move_path_children.next_sibling;
         .               }
         .           
         .               None
         .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
         .           //
         .           // FIXME: we have to do something for moving slice patterns.
         .           fn place_contents_drop_state_cannot_differ<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               place: mir::Place<'tcx>,
         .           ) -> bool {
         .               let ty = place.ty(body, tcx).ty;
 6,770,282 ( 0.03%)      match ty.kind() {
         .                   ty::Array(..) => {
         .                       debug!(
         .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
         .                           place, ty
         .                       );
         .                       false
         .                   }
         .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
         .                       debug!(
         .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
         .                           place, ty
         .                       );
         .                       true
         .                   }
 3,864,672 ( 0.02%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
         .                       debug!(
         .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
         .                           place, ty
         .                       );
         .                       true
         .                   }
         .                   _ => false,
         .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               lookup_result: LookupResult,
         .               each_child: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
   199,932 ( 0.00%)      match lookup_result {
         .                   LookupResult::Parent(..) => {
         .                       // access to untracked value - do not touch children
         .                   }
         .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
         .               }
         .           }
         .           
         .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               move_path_index: MovePathIndex,
         .               mut each_child: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
10,261,008 ( 0.05%)      fn is_terminal_path<'tcx>(
         .                   tcx: TyCtxt<'tcx>,
         .                   body: &Body<'tcx>,
         .                   move_data: &MoveData<'tcx>,
         .                   path: MovePathIndex,
         .               ) -> bool {
 2,565,252 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
10,261,008 ( 0.05%)      }
         .           
11,993,579 ( 0.05%)      fn on_all_children_bits<'tcx, F>(
         .                   tcx: TyCtxt<'tcx>,
         .                   body: &Body<'tcx>,
         .                   move_data: &MoveData<'tcx>,
         .                   move_path_index: MovePathIndex,
         .                   each_child: &mut F,
         .               ) where
         .                   F: FnMut(MovePathIndex),
         .               {
   349,650 ( 0.00%)          each_child(move_path_index);
         .           
 8,996,596 ( 0.04%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
         .                       return;
         .                   }
         .           
   780,015 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
 2,091,571 ( 0.01%)          while let Some(child_index) = next_child_index {
   804,558 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
   134,093 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
         .                   }
 9,967,590 ( 0.04%)      }
 6,746,159 ( 0.03%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
         .           }
         .           
         .           pub fn on_all_drop_children_bits<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               ctxt: &MoveDataParamEnv<'tcx>,
         .               path: MovePathIndex,
         .               mut each_child: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
   291,357 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
   210,032 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
    52,508 ( 0.00%)          let ty = place.ty(body, tcx).ty;
         .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
         .           
    28,052 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
   324,115 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
    52,263 ( 0.00%)              each_child(child);
         .                   } else {
         .                       debug!("on_all_drop_children_bits - skipping")
         .                   }
         .               })
         .           }
         .           
   288,605 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               ctxt: &MoveDataParamEnv<'tcx>,
         .               mut callback: F,
         .           ) where
         .               F: FnMut(MovePathIndex, DropFlagState),
         .           {
         .               let move_data = &ctxt.move_data;
    25,834 ( 0.00%)      for arg in body.args_iter() {
    76,812 ( 0.00%)          let place = mir::Place::from(arg);
   115,218 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
         .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    39,598 ( 0.00%)              callback(mpi, DropFlagState::Present)
         .                   });
         .               }
   206,672 ( 0.00%)  }
         .           
13,236,258 ( 0.06%)  pub fn drop_flag_effects_for_location<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               ctxt: &MoveDataParamEnv<'tcx>,
         .               loc: Location,
         .               mut callback: F,
         .           ) where
         .               F: FnMut(MovePathIndex, DropFlagState),
         .           {
         .               let move_data = &ctxt.move_data;
         .               debug!("drop_flag_effects_for_location({:?})", loc);
         .           
         .               // first, move out of the RHS
   545,884 ( 0.00%)      for mi in &move_data.loc_map[loc] {
 2,599,157 ( 0.01%)          let path = mi.move_path_index(move_data);
         .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
         .           
   750,793 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
         .               }
         .           
         .               debug!("drop_flag_effects: assignment for location({:?})", loc);
         .           
   348,810 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
10,309,872 ( 0.05%)  }
         .           
         .           pub fn for_location_inits<'tcx, F>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               loc: Location,
         .               mut callback: F,
         .           ) where
         .               F: FnMut(MovePathIndex),
         .           {
   545,884 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 1,623,156 ( 0.01%)          let init = move_data.inits[*ii];
   950,916 ( 0.00%)          match init.kind {
         .                       InitKind::Deep => {
         .                           let path = init.path;
         .           
         .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
         .                       }
         .                       InitKind::Shallow => {
         .                           let mpi = init.path;
         .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
         .               }
         .           }
         .           
         .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
         .           /// `Downcast` to a variant besides the `active_variant`.
         .           ///
         .           /// NOTE: If there are no move paths corresponding to an inactive variant,
         .           /// `handle_inactive_variant` will not be called for that variant.
   183,120 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
         .               tcx: TyCtxt<'tcx>,
         .               body: &mir::Body<'tcx>,
         .               move_data: &MoveData<'tcx>,
         .               enum_place: mir::Place<'tcx>,
         .               active_variant: VariantIdx,
         .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
         .           ) {
    76,300 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
         .                   LookupResult::Exact(mpi) => mpi,
         .                   LookupResult::Parent(_) => return,
         .               };
         .           
         .               let enum_path = &move_data.move_paths[enum_mpi];
    61,840 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
         .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
         .                   // projection than `enum_place`. This additional projection must be a downcast since the
         .                   // base is an enum.
    11,455 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
    45,820 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
         .           
    34,365 ( 0.00%)          let variant_idx = match *downcast {
         .                       mir::ProjectionElem::Downcast(_, idx) => idx,
         .                       _ => unreachable!(),
         .                   };
         .           
    11,455 ( 0.00%)          if variant_idx != active_variant {
         .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
    11,234 ( 0.00%)                  handle_inactive_variant(mpi)
         .                       });
         .                   }
         .               }
   122,080 ( 0.00%)  }

 8,886,638 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           
         .           pub(super) trait DecodeMut<'a, 's, S>: Sized {
         .               fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;
         .           }
         .           
         .           macro_rules! rpc_encode_decode {
         .               (le $ty:ty) => {
         .                   impl<S> Encode<S> for $ty {
11,514,461 ( 0.05%)              fn encode(self, w: &mut Writer, _: &mut S) {
     1,638 ( 0.00%)                  w.extend_from_array(&self.to_le_bytes());
14,391,916 ( 0.06%)              }
         .                   }
         .           
         .                   impl<S> DecodeMut<'_, '_, S> for $ty {
     1,092 ( 0.00%)              fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
         .                           const N: usize = ::std::mem::size_of::<$ty>();
         .           
     1,365 ( 0.00%)                  let mut bytes = [0; N];
 1,832,000 ( 0.01%)                  bytes.copy_from_slice(&r[..N]);
 7,564,096 ( 0.03%)                  *r = &r[N..];
         .           
     1,365 ( 0.00%)                  Self::from_le_bytes(bytes)
       546 ( 0.00%)              }
         .                   }
         .               };
         .               (struct $name:ident { $($field:ident),* $(,)? }) => {
         .                   impl<S> Encode<S> for $name {
         .                       fn encode(self, w: &mut Writer, s: &mut S) {
         .                           $(self.$field.encode(w, s);)*
         .                       }
         .                   }
-- line 51 ----------------------------------------
-- line 55 ----------------------------------------
         .                           $name {
         .                               $($field: DecodeMut::decode(r, s)),*
         .                           }
         .                       }
         .                   }
         .               };
         .               (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {
         .                   impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {
32,035,969 ( 0.14%)              fn encode(self, w: &mut Writer, s: &mut S) {
         .                           // HACK(eddyb): `Tag` enum duplicated between the
         .                           // two impls as there's no other place to stash it.
         .                           #[allow(non_upper_case_globals)]
         .                           mod tag {
         .                               #[repr(u8)] enum Tag { $($variant),* }
         .           
         .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
         .                           }
         .           
17,533,266 ( 0.08%)                  match self {
 3,607,320 ( 0.02%)                      $($name::$variant $(($field))* => {
   249,166 ( 0.00%)                          tag::$variant.encode(w, s);
 4,242,778 ( 0.02%)                          $($field.encode(w, s);)*
       546 ( 0.00%)                      })*
         .                           }
25,258,919 ( 0.11%)              }
         .                   }
         .           
         .                   impl<'a, S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>
         .                       for $name $(<$($T),+>)?
         .                   {
 8,202,432 ( 0.04%)              fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
         .                           // HACK(eddyb): `Tag` enum duplicated between the
         .                           // two impls as there's no other place to stash it.
         .                           #[allow(non_upper_case_globals)]
         .                           mod tag {
         .                               #[repr(u8)] enum Tag { $($variant),* }
         .           
         .                               $(pub const $variant: u8 = Tag::$variant as u8;)*
         .                           }
         .           
 7,907,919 ( 0.04%)                  match u8::decode(r, s) {
         .                               $(tag::$variant => {
   181,854 ( 0.00%)                          $(let $field = DecodeMut::decode(r, s);)*
 5,663,360 ( 0.03%)                          $name::$variant $(($field))*
    90,492 ( 0.00%)                      })*
         .                               _ => unreachable!(),
         .                           }
14,262,929 ( 0.06%)              }
         .                   }
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for () {
         .               fn encode(self, _: &mut Writer, _: &mut S) {}
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for () {
         .               fn decode(_: &mut Reader<'_>, _: &mut S) -> Self {}
         .           }
         .           
         .           impl<S> Encode<S> for u8 {
 1,593,939 ( 0.01%)      fn encode(self, w: &mut Writer, _: &mut S) {
       546 ( 0.00%)          w.push(self);
 1,327,236 ( 0.01%)      }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for u8 {
         .               fn decode(r: &mut Reader<'_>, _: &mut S) -> Self {
31,987,555 ( 0.14%)          let x = r[0];
17,800,501 ( 0.08%)          *r = &r[1..];
         .                   x
         .               }
         .           }
         .           
         .           rpc_encode_decode!(le u32);
         .           rpc_encode_decode!(le usize);
         .           
         .           impl<S> Encode<S> for bool {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
   288,276 ( 0.00%)          (self as u8).encode(w, s);
         .               }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for bool {
         .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   192,292 ( 0.00%)          match u8::decode(r, s) {
         .                       0 => false,
         .                       1 => true,
         .                       _ => unreachable!(),
         .                   }
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for char {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
   285,576 ( 0.00%)          (self as u32).encode(w, s);
         .               }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for char {
         .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
         .                   char::from_u32(u32::decode(r, s)).unwrap()
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for NonZeroU32 {
     1,638 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
 8,244,305 ( 0.04%)          self.get().encode(w, s);
       546 ( 0.00%)      }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {
       819 ( 0.00%)      fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
     1,911 ( 0.00%)          Self::new(u32::decode(r, s)).unwrap()
       546 ( 0.00%)      }
         .           }
         .           
         .           impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
         .                   self.0.encode(w, s);
         .                   self.1.encode(w, s);
         .               }
         .           }
-- line 177 ----------------------------------------
-- line 204 ----------------------------------------
         .                   Ok(x),
         .                   Err(e),
         .               }
         .           );
         .           
         .           impl<S> Encode<S> for &[u8] {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
         .                   self.len().encode(w, s);
   241,164 ( 0.00%)          w.write_all(self).unwrap();
         .               }
         .           }
         .           
         .           impl<'a, S> DecodeMut<'a, '_, S> for &'a [u8] {
         .               fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
         .                   let len = usize::decode(r, s);
         .                   let xs = &r[..len];
   491,506 ( 0.00%)          *r = &r[len..];
         .                   xs
         .               }
         .           }
         .           
         .           impl<S> Encode<S> for &str {
   241,164 ( 0.00%)      fn encode(self, w: &mut Writer, s: &mut S) {
         .                   self.as_bytes().encode(w, s);
   301,455 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, S> DecodeMut<'a, '_, S> for &'a str {
   163,654 ( 0.00%)      fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {
   327,308 ( 0.00%)          str::from_utf8(<&[u8]>::decode(r, s)).unwrap()
   327,308 ( 0.00%)      }
         .           }
         .           
         .           impl<S> Encode<S> for String {
         .               fn encode(self, w: &mut Writer, s: &mut S) {
   241,164 ( 0.00%)          self[..].encode(w, s);
         .               }
         .           }
         .           
         .           impl<S> DecodeMut<'_, '_, S> for String {
         .               fn decode(r: &mut Reader<'_>, s: &mut S) -> Self {
   301,455 ( 0.00%)          <&str>::decode(r, s).to_string()
         .               }
         .           }
         .           
         .           /// Simplified version of panic payloads, ignoring
         .           /// types other than `&'static str` and `String`.
         .           pub enum PanicMessage {
         .               StaticStr(&'static str),
         .               String(String),
-- line 253 ----------------------------------------

29,838,654 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/rpc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
    4,055 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
   16,220 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
   40,550 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
   52,715 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
   56,770 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
   16,220 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
    4,055 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
   32,440 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
   89,210 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
   40,550 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
    8,110 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
    4,055 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
    8,110 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
   50,394 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
   26,377 ( 0.00%)              if let Some(local) = place.as_local() {
   39,333 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
   39,333 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
   16,220 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
    8,110 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
   16,220 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
      155 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
    8,110 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
   12,165 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
    4,055 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
   12,165 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
   28,385 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
   24,330 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
    3,760 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
   24,330 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
   32,440 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
    4,055 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
   48,660 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
   40,550 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
   20,275 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
   12,165 ( 0.00%)          regioncx,
   16,220 ( 0.00%)          opaque_type_values,
    8,110 ( 0.00%)          polonius_input,
   12,165 ( 0.00%)          polonius_output,
   16,220 ( 0.00%)          opt_closure_req,
   40,550 ( 0.00%)          nll_errors,
   72,990 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
   64,880 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
   12,165 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
    8,110 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
   64,880 ( 0.00%)      drop(flow_inits);
        .           
    4,055 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
   24,330 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
    4,055 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
   24,330 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
    4,055 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
   24,330 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
    4,055 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
   11,490 ( 0.00%)      let movable_generator = !matches!(
   27,710 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
    2,632 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
      752 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
  182,475 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
   16,220 ( 0.00%)          errors_buffer,
    4,055 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
    4,055 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
   24,330 ( 0.00%)          dominators,
   16,220 ( 0.00%)          upvars,
   16,220 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
   12,165 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
   24,330 ( 0.00%)          ever_inits: flow_ever_inits,
   32,440 ( 0.00%)          uninits: flow_uninits,
   44,605 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
   24,330 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
    4,055 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
    4,055 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
    4,055 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
    4,055 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
   16,220 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
   16,220 ( 0.00%)      let used_mut = mbcx.used_mut;
    4,055 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
    1,441 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
    8,646 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
    4,323 ( 0.00%)          match mbcx.local_names[local] {
      515 ( 0.00%)              Some(name) => {
    1,545 ( 0.00%)                  if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
    1,030 ( 0.00%)          let span = local_decl.source_info.span;
    1,030 ( 0.00%)          if span.desugaring_kind().is_some() {
        .                       // If the `mut` arises as part of a desugaring, we should ignore it.
        .                       continue;
        .                   }
        .           
    2,575 ( 0.00%)          tcx.struct_span_lint_hir(UNUSED_MUT, lint_root, span, |lint| {
        .                       let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);
        .                       lint.build("variable does not need to be mutable")
        .                           .span_suggestion_short(
        .                               mut_span,
        .                               "remove this `mut`",
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
   36,495 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
    4,055 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
   16,220 ( 0.00%)          concrete_opaque_types: opaque_type_values,
   20,275 ( 0.00%)          closure_requirements: opt_closure_req,
   24,330 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
    8,110 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
   56,770 ( 0.00%)      (result, body_with_facts)
   48,660 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
1,219,320 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  677,400 ( 0.00%)          match &stmt.kind {
   87,110 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
  174,220 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
    5,194 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
   20,776 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   46,746 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
  267,936 ( 0.00%)                  self.access_place(
        .                               location,
  491,216 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
1,083,840 ( 0.00%)      }
        .           
  356,000 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
  222,500 ( 0.00%)          match term.kind {
   18,188 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
   18,188 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
   21,956 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
   65,868 ( 0.00%)                  self.access_place(
        .                               loc,
   98,802 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
      524 ( 0.00%)                  place: drop_place,
      262 ( 0.00%)                  value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
    4,192 ( 0.00%)                  self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
   29,880 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   79,680 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
  118,830 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   39,805 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  119,100 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
    3,756 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
      626 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
    1,252 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
        .                               self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
-- line 748 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
  317,528 ( 0.00%)      }
        .           
  311,500 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   44,500 ( 0.00%)          let span = term.source_info.span;
        .           
  178,000 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
   14,802 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
  356,000 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   47,063 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
2,582,784 ( 0.01%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  645,696 ( 0.00%)          if let Activation(_, borrow_index) = rw {
    9,732 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
  161,424 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  968,544 ( 0.00%)          let mutability_error = self.check_access_permissions(
  645,696 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
1,775,664 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  484,272 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  484,272 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
1,291,392 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
  161,424 ( 0.00%)          let mut error_reported = false;
  484,272 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  322,848 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  322,848 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
2,098,512 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  968,544 ( 0.00%)              (sd, place_span.0),
        .                       &borrow_set,
  968,544 ( 0.00%)              borrows_in_scope,
1,838,922 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
    4,866 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  484,272 ( 0.00%)      }
        .           
  537,420 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  483,678 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   53,742 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
  213,212 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  486,612 ( 0.00%)          self.access_place(
        .                       location,
  162,204 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  429,936 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  261,330 ( 0.00%)          match *rvalue {
   61,920 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
  234,504 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
   13,176 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
  433,440 ( 0.00%)                  self.access_place(
        .                               location,
   82,560 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
  144,480 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
  144,480 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
   27,712 ( 0.00%)                  self.access_place(
        .                               location,
    6,928 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
   12,124 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   12,124 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
   13,800 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
    9,660 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
   14,544 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
    3,380 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        .                                       self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
-- line 1350 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  634,980 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  290,624 ( 0.00%)          match *operand {
   16,215 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
   32,430 ( 0.00%)                  self.access_place(
        .                               location,
   27,025 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
        .                           self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
        .                               (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   97,788 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
  251,500 ( 0.00%)                  self.access_place(
        .                               location,
  162,980 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   31,104 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   23,328 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  423,320 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  359,960 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  680,286 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
   24,330 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
   58,392 ( 0.00%)              self.access_place(
        .                           location,
   29,196 ( 0.00%)                  (borrow.borrowed_place, span),
   43,794 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
   79,146 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  858,078 ( 0.00%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   66,006 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  528,048 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  721,237 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  131,134 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  458,969 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
  100,328 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   65,567 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
  262,268 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
  172,024 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   86,012 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  524,536 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  858,078 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  593,007 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
      439 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
    3,208 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
    3,073 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
    2,634 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
      363 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
    1,089 ( 0.00%)                      match base_ty.kind() {
    2,178 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
    7,986 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
      363 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
        .                           if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
    1,089 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  322,848 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
2,510,010 ( 0.01%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
   65,728 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
   46,116 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  283,857 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
  176,460 ( 0.00%)                  if let (Err(_), true) = (
  617,610 ( 0.00%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
  273,220 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
  163,932 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   54,644 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
  247,573 ( 0.00%)          for &index in ii {
  167,282 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
  218,576 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
  188,556 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
      152 ( 0.00%)          match root_place {
  141,417 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   88,516 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
  124,359 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
-- line 2133 ----------------------------------------
-- line 2140 ----------------------------------------
        .                           if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        .                               self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
  180,720 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
1,607,397 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  459,897 ( 0.00%)          match place.last_projection() {
        .                       None => {
  135,369 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  406,107 ( 0.00%)                  match local.mutability {
   46,546 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
  139,638 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
  224,192 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
   32,274 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
   11,372 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
   34,116 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
   11,372 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
   11,372 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
      380 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
   34,116 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
   10,144 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
      770 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
        .                                               Mutability::Not,
        .                                               LocalMutationIsAllowed::No
        .                                               | LocalMutationIsAllowed::ExceptUpvars,
        .                                           ) => Err(place),
        .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
        .                                           | (Mutability::Mut, _) => {
        .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
        .                                               // fn main() {
        .                                               //     let var = Vec::new();
        .                                               //     foo(move || {
        .                                               //         var.push(1);
        .                                               //     });
        .                                               // }
        .                                               // ```
        .                                               let _ =
    1,386 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
        .                                               Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               })
        .                                           }
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
1,169,016 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
   96,822 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

5,188,379 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           use std::convert::TryInto;
        .           
        .           pub struct SimplifyCfg {
        .               label: String,
        .           }
        .           
        .           impl SimplifyCfg {
        .               pub fn new(label: &str) -> Self {
  206,774 ( 0.00%)          SimplifyCfg { label: format!("SimplifyCfg-{}", label) }
        .               }
        .           }
        .           
  247,860 ( 0.00%)  pub fn simplify_cfg<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
   99,144 ( 0.00%)      CfgSimplifier::new(body).simplify();
   74,358 ( 0.00%)      remove_dead_blocks(tcx, body);
        .           
        .               // FIXME: Should probably be moved into some kind of pass manager
        .               body.basic_blocks_mut().raw.shrink_to_fit();
   77,776 ( 0.00%)  }
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyCfg {
   17,338 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
   52,014 ( 0.00%)          Cow::Borrowed(&self.label)
   17,338 ( 0.00%)      }
        .           
   17,338 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   debug!("SimplifyCfg({:?}) - simplifying {:?}", self.label, body.source);
   49,572 ( 0.00%)          simplify_cfg(tcx, body);
        .               }
        .           }
        .           
        .           pub struct CfgSimplifier<'a, 'tcx> {
        .               basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,
        .               pred_count: IndexVec<BasicBlock, u32>,
        .           }
        .           
        .           impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {
  173,502 ( 0.00%)      pub fn new(body: &'a mut Body<'tcx>) -> Self {
   49,572 ( 0.00%)          let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());
        .           
        .                   // we can't use mir.predecessors() here because that counts
        .                   // dead blocks, which we don't want to.
   74,358 ( 0.00%)          pred_count[START_BLOCK] = 1;
        .           
1,376,696 ( 0.01%)          for (_, data) in traversal::preorder(body) {
  735,090 ( 0.00%)              if let Some(ref term) = data.terminator {
1,039,008 ( 0.00%)                  for &tgt in term.successors() {
1,519,590 ( 0.01%)                      pred_count[tgt] += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   let basic_blocks = body.basic_blocks_mut();
        .           
   99,144 ( 0.00%)          CfgSimplifier { basic_blocks, pred_count }
  198,288 ( 0.00%)      }
        .           
  198,288 ( 0.00%)      pub fn simplify(mut self) {
   24,786 ( 0.00%)          self.strip_nops();
        .           
        .                   // Vec of the blocks that should be merged. We store the indices here, instead of the
        .                   // statements itself to avoid moving the (relatively) large statements twice.
        .                   // We do not push the statements directly into the target block (`bb`) as that is slower
        .                   // due to additional reallocations
        .                   let mut merged_blocks = Vec::new();
        .                   loop {
        .                       let mut changed = false;
        .           
   56,382 ( 0.00%)              for bb in self.basic_blocks.indices() {
  696,822 ( 0.00%)                  if self.pred_count[bb] == 0 {
        .                               continue;
        .                           }
        .           
        .                           debug!("simplifying {:?}", bb);
        .           
        .                           let mut terminator =
        .                               self.basic_blocks[bb].terminator.take().expect("invalid terminator state");
        .           
  826,857 ( 0.00%)                  for successor in terminator.successors_mut() {
        .                               self.collapse_goto_chain(successor, &mut changed);
        .                           }
        .           
        .                           let mut inner_changed = true;
        .                           merged_blocks.clear();
  854,543 ( 0.00%)                  while inner_changed {
        .                               inner_changed = false;
        .                               inner_changed |= self.simplify_branch(&mut terminator);
  289,462 ( 0.00%)                      inner_changed |= self.merge_successor(&mut merged_blocks, &mut terminator);
  868,386 ( 0.00%)                      changed |= inner_changed;
        .                           }
        .           
        .                           let statements_to_merge =
  302,695 ( 0.00%)                      merged_blocks.iter().map(|&i| self.basic_blocks[i].statements.len()).sum();
        .           
   21,254 ( 0.00%)                  if statements_to_merge > 0 {
        .                               let mut statements = std::mem::take(&mut self.basic_blocks[bb].statements);
        .                               statements.reserve(statements_to_merge);
   10,587 ( 0.00%)                      for &from in &merged_blocks {
   21,174 ( 0.00%)                          statements.append(&mut self.basic_blocks[from].statements);
        .                               }
   69,084 ( 0.00%)                      self.basic_blocks[bb].statements = statements;
        .                           }
        .           
8,544,189 ( 0.04%)                  self.basic_blocks[bb].terminator = Some(terminator);
        .                       }
        .           
   56,382 ( 0.00%)              if !changed {
        .                           break;
        .                       }
        .                   }
  198,288 ( 0.00%)      }
        .           
        .               /// This function will return `None` if
        .               /// * the block has statements
        .               /// * the block has a terminator other than `goto`
        .               /// * the block has no terminator (meaning some other part of the current optimization stole it)
        .               fn take_terminator_if_simple_goto(&mut self, bb: BasicBlock) -> Option<Terminator<'tcx>> {
2,568,034 ( 0.01%)          match self.basic_blocks[bb] {
        .                       BasicBlockData {
        .                           ref statements,
        .                           terminator:
        .                               ref mut terminator @ Some(Terminator { kind: TerminatorKind::Goto { .. }, .. }),
        .                           ..
   85,023 ( 0.00%)              } if statements.is_empty() => terminator.take(),
        .                       // if `terminator` is None, this means we are in a loop. In that
        .                       // case, let all the loop collapse to its entry.
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Collapse a goto chain starting from `start`
        .               fn collapse_goto_chain(&mut self, start: &mut BasicBlock, changed: &mut bool) {
        .                   // Using `SmallVec` here, because in some logs on libcore oli-obk saw many single-element
        .                   // goto chains. We should probably benchmark different sizes.
        .                   let mut terminators: SmallVec<[_; 1]> = Default::default();
1,056,279 ( 0.00%)          let mut current = *start;
1,336,890 ( 0.01%)          while let Some(terminator) = self.take_terminator_if_simple_goto(current) {
   29,538 ( 0.00%)              let target = match terminator {
   14,769 ( 0.00%)                  Terminator { kind: TerminatorKind::Goto { target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
  280,611 ( 0.00%)              terminators.push((current, terminator));
        .                       current = target;
        .                   }
        .                   let last = current;
  352,093 ( 0.00%)          *start = last;
  221,535 ( 0.00%)          while let Some((current, mut terminator)) = terminators.pop() {
   29,538 ( 0.00%)              let target = match terminator {
        .                           Terminator { kind: TerminatorKind::Goto { ref mut target }, .. } => target,
        .                           _ => unreachable!(),
        .                       };
   29,538 ( 0.00%)              *changed |= *target != last;
   29,538 ( 0.00%)              *target = last;
        .                       debug!("collapsing goto chain from {:?} to {:?}", current, target);
        .           
   29,538 ( 0.00%)              if self.pred_count[current] == 1 {
        .                           // This is the last reference to current, so the pred-count to
        .                           // to target is moved into the current block.
        .                           self.pred_count[current] = 0;
        .                       } else {
    8,716 ( 0.00%)                  self.pred_count[*target] += 1;
    6,537 ( 0.00%)                  self.pred_count[current] -= 1;
        .                       }
  487,377 ( 0.00%)              self.basic_blocks[current].terminator = Some(terminator);
        .                   }
        .               }
        .           
        .               // merge a block with 1 `goto` predecessor to its parent
        .               fn merge_successor(
        .                   &mut self,
        .                   merged_blocks: &mut Vec<BasicBlock>,
        .                   terminator: &mut Terminator<'tcx>,
        .               ) -> bool {
  721,424 ( 0.00%)          let target = match terminator.kind {
  268,000 ( 0.00%)              TerminatorKind::Goto { target } if self.pred_count[target] == 1 => target,
        .                       _ => return false,
        .                   };
        .           
        .                   debug!("merging block {:?} into {:?}", target, terminator);
  311,374 ( 0.00%)          *terminator = match self.basic_blocks[target].terminator.take() {
        .                       Some(terminator) => terminator,
        .                       None => {
        .                           // unreachable loop - this should not be possible, as we
        .                           // don't strand blocks, but handle it correctly.
        .                           return false;
        .                       }
        .                   };
        .           
        .                   merged_blocks.push(target);
   40,614 ( 0.00%)          self.pred_count[target] = 0;
        .           
        .                   true
        .               }
        .           
        .               // turn a branch with all successors identical to a goto
        .               fn simplify_branch(&mut self, terminator: &mut Terminator<'tcx>) -> bool {
  868,386 ( 0.00%)          match terminator.kind {
        .                       TerminatorKind::SwitchInt { .. } => {}
        .                       _ => return false,
        .                   };
        .           
        .                   let first_succ = {
  236,592 ( 0.00%)              if let Some(&first_succ) = terminator.successors().next() {
  118,296 ( 0.00%)                  if terminator.successors().all(|s| *s == first_succ) {
    5,046 ( 0.00%)                      let count = terminator.successors().count();
   10,092 ( 0.00%)                      self.pred_count[first_succ] -= (count - 1) as u32;
        .                               first_succ
        .                           } else {
        .                               return false;
        .                           }
        .                       } else {
        .                           return false;
        .                       }
        .                   };
        .           
        .                   debug!("simplifying branch {:?}", terminator);
   10,092 ( 0.00%)          terminator.kind = TerminatorKind::Goto { target: first_succ };
        .                   true
        .               }
        .           
        .               fn strip_nops(&mut self) {
        .                   for blk in self.basic_blocks.iter_mut() {
1,249,191 ( 0.01%)              blk.statements.retain(|stmt| !matches!(stmt.kind, StatementKind::Nop))
        .                   }
        .               }
        .           }
        .           
  292,210 ( 0.00%)  pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
   29,221 ( 0.00%)      let reachable = traversal::reachable_as_bitset(body);
        .               let num_blocks = body.basic_blocks().len();
   58,442 ( 0.00%)      if num_blocks == reachable.count() {
        .                   return;
        .               }
        .           
        .               let basic_blocks = body.basic_blocks_mut();
        .               let mut replacements: Vec<_> = (0..num_blocks).map(BasicBlock::new).collect();
        .               let mut used_blocks = 0;
  148,763 ( 0.00%)      for alive_index in reachable.iter() {
        .                   let alive_index = alive_index.index();
  148,763 ( 0.00%)          replacements[alive_index] = BasicBlock::new(used_blocks);
  297,526 ( 0.00%)          if alive_index != used_blocks {
        .                       // Swap the next alive block data with the current available slot. Since
        .                       // alive_index is non-decreasing this is a valid operation.
        .                       basic_blocks.raw.swap(alive_index, used_blocks);
        .                   }
  148,763 ( 0.00%)          used_blocks += 1;
        .               }
        .           
   61,328 ( 0.00%)      if tcx.sess.instrument_coverage() {
        .                   save_unreachable_coverage(basic_blocks, used_blocks);
        .               }
        .           
        .               basic_blocks.raw.truncate(used_blocks);
        .           
        .               for block in basic_blocks {
  297,526 ( 0.00%)          for target in block.terminator_mut().successors_mut() {
  728,448 ( 0.00%)              *target = replacements[target.index()];
        .                   }
        .               }
  233,768 ( 0.00%)  }
        .           
        .           /// Some MIR transforms can determine at compile time that a sequences of
        .           /// statements will never be executed, so they can be dropped from the MIR.
        .           /// For example, an `if` or `else` block that is guaranteed to never be executed
        .           /// because its condition can be evaluated at compile time, such as by const
        .           /// evaluation: `if false { ... }`.
        .           ///
        .           /// Those statements are bypassed by redirecting paths in the CFG around the
-- line 305 ----------------------------------------
-- line 363 ----------------------------------------
        .                       })),
        .                   })
        .               }
        .           }
        .           
        .           pub struct SimplifyLocals;
        .           
        .           impl<'tcx> MirPass<'tcx> for SimplifyLocals {
    7,448 ( 0.00%)      fn is_enabled(&self, sess: &rustc_session::Session) -> bool {
   11,172 ( 0.00%)          sess.mir_opt_level() > 0
    7,448 ( 0.00%)      }
        .           
    3,724 ( 0.00%)      fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {
        .                   trace!("running SimplifyLocals on {:?}", body.source);
    3,724 ( 0.00%)          simplify_locals(body, tcx);
        .               }
        .           }
        .           
   26,068 ( 0.00%)  pub fn simplify_locals<'tcx>(body: &mut Body<'tcx>, tcx: TyCtxt<'tcx>) {
        .               // First, we're going to get a count of *actual* uses for every `Local`.
        .               let mut used_locals = UsedLocals::new(body);
        .           
        .               // Next, we're going to remove any `Local` with zero actual uses. When we remove those
        .               // `Locals`, we're also going to subtract any uses of other `Locals` from the `used_locals`
        .               // count. For example, if we removed `_2 = discriminant(_1)`, then we'll subtract one from
        .               // `use_counts[_1]`. That in turn might make `_1` unused, so we loop until we hit a
        .               // fixedpoint where there are no more unused locals.
-- line 389 ----------------------------------------
-- line 390 ----------------------------------------
        .               remove_unused_definitions(&mut used_locals, body);
        .           
        .               // Finally, we'll actually do the work of shrinking `body.local_decls` and remapping the `Local`s.
        .               let map = make_local_map(&mut body.local_decls, &used_locals);
        .           
        .               // Only bother running the `LocalUpdater` if we actually found locals to remove.
        .               if map.iter().any(Option::is_none) {
        .                   // Update references to all vars and tmps now
    3,816 ( 0.00%)          let mut updater = LocalUpdater { map, tcx };
        .                   updater.visit_body(body);
        .           
        .                   body.local_decls.shrink_to_fit();
        .               }
   29,792 ( 0.00%)  }
        .           
        .           /// Construct the mapping while swapping out unused stuff out from the `vec`.
        .           fn make_local_map<V>(
        .               local_decls: &mut IndexVec<Local, V>,
        .               used_locals: &UsedLocals,
        .           ) -> IndexVec<Local, Option<Local>> {
    7,448 ( 0.00%)      let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);
        .               let mut used = Local::new(0);
        .           
    3,724 ( 0.00%)      for alive_index in local_decls.indices() {
        .                   // `is_used` treats the `RETURN_PLACE` and arguments as used.
   50,364 ( 0.00%)          if !used_locals.is_used(alive_index) {
        .                       continue;
        .                   }
        .           
   53,388 ( 0.00%)          map[alive_index] = Some(used);
   53,388 ( 0.00%)          if alive_index != used {
        .                       local_decls.swap(alive_index, used);
        .                   }
        .                   used.increment_by(1);
        .               }
        .               local_decls.truncate(used.index());
        .               map
        .           }
        .           
-- line 428 ----------------------------------------
-- line 431 ----------------------------------------
        .               increment: bool,
        .               arg_count: u32,
        .               use_count: IndexVec<Local, u32>,
        .           }
        .           
        .           impl UsedLocals {
        .               /// Determines which locals are used & unused in the given body.
        .               fn new(body: &Body<'_>) -> Self {
   26,068 ( 0.00%)          let mut this = Self {
        .                       increment: true,
    3,724 ( 0.00%)              arg_count: body.arg_count.try_into().unwrap(),
   11,172 ( 0.00%)              use_count: IndexVec::from_elem(0, &body.local_decls),
        .                   };
        .                   this.visit_body(body);
        .                   this
        .               }
        .           
        .               /// Checks if local is used.
        .               ///
        .               /// Return place and arguments are always considered used.
        .               fn is_used(&self, local: Local) -> bool {
        .                   trace!("is_used({:?}): use_count: {:?}", local, self.use_count[local]);
  288,320 ( 0.00%)          local.as_u32() <= self.arg_count || self.use_count[local] != 0
        .               }
        .           
        .               /// Updates the use counts to reflect the removal of given statement.
        .               fn statement_removed(&mut self, statement: &Statement<'_>) {
    3,783 ( 0.00%)          self.increment = false;
        .           
        .                   // The location of the statement is irrelevant.
        .                   let location = Location { block: START_BLOCK, statement_index: 0 };
   18,915 ( 0.00%)          self.visit_statement(statement, location);
        .               }
        .           
        .               /// Visits a left-hand side of an assignment.
  255,975 ( 0.00%)      fn visit_lhs(&mut self, place: &Place<'_>, location: Location) {
  204,780 ( 0.00%)          if place.is_indirect() {
        .                       // A use, not a definition.
        .                       self.visit_place(place, PlaceContext::MutatingUse(MutatingUseContext::Store), location);
        .                   } else {
        .                       // A definition. The base local itself is not visited, so this occurrence is not counted
        .                       // toward its use count. There might be other locals still, used in an indexing
        .                       // projection.
        .                       self.super_projection(
        .                           place.as_ref(),
        .                           PlaceContext::MutatingUse(MutatingUseContext::Projection),
        .                           location,
        .                       );
        .                   }
  204,780 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for UsedLocals {
  255,975 ( 0.00%)      fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {
  255,975 ( 0.00%)          match statement.kind {
        .                       StatementKind::CopyNonOverlapping(..)
        .                       | StatementKind::Retag(..)
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::FakeRead(..)
        .                       | StatementKind::AscribeUserType(..) => {
        .                           self.super_statement(statement, location);
        .                       }
        .           
        .                       StatementKind::Nop => {}
        .           
        .                       StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}
        .           
   48,288 ( 0.00%)              StatementKind::Assign(box (ref place, ref rvalue)) => {
  144,864 ( 0.00%)                  self.visit_lhs(place, location);
        .                           self.visit_rvalue(rvalue, location);
        .                       }
        .           
        .                       StatementKind::SetDiscriminant { ref place, variant_index: _ } => {
   20,349 ( 0.00%)                  self.visit_lhs(place, location);
        .                       }
        .                   }
   90,415 ( 0.00%)      }
        .           
        .               fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {
  233,301 ( 0.00%)          if self.increment {
  274,449 ( 0.00%)              self.use_count[*local] += 1;
        .                   } else {
    5,526 ( 0.00%)              assert_ne!(self.use_count[*local], 0);
    1,842 ( 0.00%)              self.use_count[*local] -= 1;
        .                   }
        .               }
        .           }
        .           
        .           /// Removes unused definitions. Updates the used locals to reflect the changes made.
        .           fn remove_unused_definitions(used_locals: &mut UsedLocals, body: &mut Body<'_>) {
        .               // The use counts are updated as we remove the statements. A local might become unused
        .               // during the retain operation, leading to a temporary inconsistency (storage statements or
        .               // definitions referencing the local might remain). For correctness it is crucial that this
        .               // computation reaches a fixed point.
        .           
        .               let mut modified = true;
   57,180 ( 0.00%)      while modified {
    4,054 ( 0.00%)          modified = false;
        .           
        .                   for data in body.basic_blocks_mut() {
        .                       // Remove unnecessary StorageLive and StorageDead annotations.
  135,244 ( 0.00%)              data.statements.retain(|statement| {
  359,156 ( 0.00%)                  let keep = match &statement.kind {
        .                               StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {
        .                                   used_locals.is_used(*local)
        .                               }
  108,756 ( 0.00%)                      StatementKind::Assign(box (place, _)) => used_locals.is_used(place.local),
        .           
        .                               StatementKind::SetDiscriminant { ref place, .. } => {
    8,222 ( 0.00%)                          used_locals.is_used(place.local)
        .                               }
        .                               _ => true,
        .                           };
        .           
   49,505 ( 0.00%)                  if !keep {
        .                               trace!("removing statement {:?}", statement);
    3,783 ( 0.00%)                      modified = true;
        .                               used_locals.statement_removed(statement);
        .                           }
        .           
        .                           keep
        .                       });
        .                   }
        .               }
        .           }
-- line 555 ----------------------------------------
-- line 560 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   self.tcx
        .               }
        .           
        .               fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {
  148,125 ( 0.00%)          *l = self.map[*l].unwrap();
        .               }
        .           }

3,988,964 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_transform/src/simplify.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
29,045,602 ( 0.13%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
21,784,200 ( 0.10%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
 1,537,000 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 2,305,500 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 7,645,639 ( 0.03%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 3,125,728 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 6,251,456 ( 0.03%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 121 ----------------------------------------
        .           #[derive(Debug)]
        .           pub enum ProcessResult<O, E> {
        .               Unchanged,
        .               Changed(Vec<O>),
        .               Error(E),
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
  247,057 ( 0.00%)  struct ObligationTreeId(usize);
        .           
        .           type ObligationTreeIdGenerator =
        .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
        .           
        .           pub struct ObligationForest<O: ForestObligation> {
        .               /// The list of obligations. In between calls to `process_obligations`,
        .               /// this list only contains nodes in the `Pending` or `Waiting` state.
        .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
        .               has_parent: bool,
        .           
        .               /// Identifier of the obligation tree to which this node belongs.
        .               obligation_tree_id: ObligationTreeId,
        .           }
        .           
        .           impl<O> Node<O> {
        .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
2,696,688 ( 0.01%)          Node {
        .                       obligation,
        .                       state: Cell::new(NodeState::Pending),
  303,600 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
        .                       has_parent: parent.is_some(),
        .                       obligation_tree_id,
        .                   }
        .               }
        .           }
        .           
        .           /// The state of one node in some tree within the forest. This represents the
        .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
        .           ///  |     compress()
        .           ///  v
        .           /// (Removed)
        .           /// ```
        .           /// The `Error` state can be introduced in several places, via `error_at()`.
        .           ///
        .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
        .           /// `Waiting`.
2,788,564 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
        .           enum NodeState {
        .               /// This obligation has not yet been selected successfully. Cannot have
        .               /// subobligations.
        .               Pending,
        .           
        .               /// This obligation was selected successfully, but may or may not have
        .               /// subobligations.
        .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
        .               pub stalled: bool,
        .           }
        .           
        .           impl<O, E> OutcomeTrait for Outcome<O, E> {
        .               type Error = Error<O, E>;
        .               type Obligation = O;
        .           
        .               fn new() -> Self {
  492,304 ( 0.00%)          Self { stalled: true, errors: vec![] }
        .               }
        .           
        .               fn mark_not_stalled(&mut self) {
  166,826 ( 0.00%)          self.stalled = false;
        .               }
        .           
        .               fn is_stalled(&self) -> bool {
   96,808 ( 0.00%)          self.stalled
        .               }
        .           
        .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
        .                   // do nothing
        .               }
        .           
        .               fn record_error(&mut self, error: Self::Error) {
      144 ( 0.00%)          self.errors.push(error)
        .               }
        .           }
        .           
        .           #[derive(Debug, PartialEq, Eq)]
        .           pub struct Error<O, E> {
        .               pub error: E,
        .               pub backtrace: Vec<O>,
        .           }
        .           
        .           impl<O: ForestObligation> ObligationForest<O> {
   64,418 ( 0.00%)      pub fn new() -> ObligationForest<O> {
  773,016 ( 0.00%)          ObligationForest {
        .                       nodes: vec![],
        .                       done_cache: Default::default(),
        .                       active_cache: Default::default(),
        .                       reused_node_vec: vec![],
        .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
        .                       error_cache: Default::default(),
        .                   }
   64,418 ( 0.00%)      }
        .           
        .               /// Returns the total number of nodes in the forest that have not
        .               /// yet been fully resolved.
        .               pub fn len(&self) -> usize {
        .                   self.nodes.len()
        .               }
        .           
        .               /// Registers an obligation.
        .               pub fn register_obligation(&mut self, obligation: O) {
        .                   // Ignore errors here - there is no guarantee of success.
2,026,791 ( 0.01%)          let _ = self.register_obligation_at(obligation, None);
        .               }
        .           
        .               // Returns Err(()) if we already know this obligation failed.
2,648,118 ( 0.01%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
  481,476 ( 0.00%)          let cache_key = obligation.as_cache_key();
  481,476 ( 0.00%)          if self.done_cache.contains(&cache_key) {
        .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
        .                       return Ok(());
        .                   }
        .           
1,202,658 ( 0.01%)          match self.active_cache.entry(cache_key) {
        .                       Entry::Occupied(o) => {
   63,800 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
   63,800 ( 0.00%)                  if let Some(parent_index) = parent {
        .                               // If the node is already in `active_cache`, it has already
        .                               // had its chance to be marked with a parent. So if it's
        .                               // not already present, just dump `parent` into the
        .                               // dependents as a non-parent.
   64,914 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
        .                                   node.dependents.push(parent_index);
        .                               }
        .                           }
   95,700 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
        .                       }
  505,629 ( 0.00%)              Entry::Vacant(v) => {
1,011,258 ( 0.00%)                  let obligation_tree_id = match parent {
   90,038 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
        .                               None => self.obligation_tree_id_generator.next().unwrap(),
        .                           };
        .           
        .                           let already_failed = parent.is_some()
        .                               && self
        .                                   .error_cache
        .                                   .get(&obligation_tree_id)
        .                                   .map_or(false, |errors| errors.contains(v.key()));
        .           
        .                           if already_failed {
        .                               Err(())
        .                           } else {
  168,543 ( 0.00%)                      let new_index = self.nodes.len();
        .                               v.insert(new_index);
        .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
        .                               Ok(())
        .                           }
        .                       }
        .                   }
2,166,642 ( 0.01%)      }
        .           
        .               /// Converts all remaining obligations to the given error.
  787,311 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
        .                   let errors = self
        .                       .nodes
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
        .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
        .                       .collect();
        .           
  224,946 ( 0.00%)          self.compress(|_| assert!(false));
        .                   errors
  674,838 ( 0.00%)      }
        .           
        .               /// Returns the set of obligations that are in a pending state.
        .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
        .               where
        .                   F: Fn(&O) -> P,
        .               {
      134 ( 0.00%)          self.nodes
        .                       .iter()
        .                       .filter(|node| node.state.get() == NodeState::Pending)
        .                       .map(|node| f(&node.obligation))
        .                       .collect()
        .               }
        .           
      126 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
        .                   let node = &self.nodes[index];
       18 ( 0.00%)          self.error_cache
       54 ( 0.00%)              .entry(node.obligation_tree_id)
        .                       .or_default()
        .                       .insert(node.obligation.as_cache_key());
      144 ( 0.00%)      }
        .           
        .               /// Performs a pass through the obligation list. This must
        .               /// be called in a loop until `outcome.stalled` is false.
        .               ///
        .               /// This _cannot_ be unrolled (presently, at least).
        .               #[inline(never)]
2,215,368 ( 0.01%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
        .               {
        .                   let mut outcome = OUT::new();
        .           
        .                   // Note that the loop body can append new nodes, and those new nodes
        .                   // will then be processed by subsequent iterations of the loop.
        .                   //
        .                   // We can't use an iterator for the loop because `self.nodes` is
        .                   // appended to and the borrow checker would complain. We also can't use
        .                   // `for index in 0..self.nodes.len() { ... }` because the range would
        .                   // be computed with the initial length, and we would miss the appended
        .                   // nodes. Therefore we use a `while` loop.
        .                   let mut index = 0;
1,327,403 ( 0.01%)          while let Some(node) = self.nodes.get_mut(index) {
        .                       // `processor.process_obligation` can modify the predicate within
        .                       // `node.obligation`, and that predicate is the key used for
        .                       // `self.active_cache`. This means that `self.active_cache` can get
        .                       // out of sync with `nodes`. It's not very common, but it does
        .                       // happen, and code in `compress` has to allow for it.
2,162,502 ( 0.01%)              if node.state.get() != NodeState::Pending {
  176,958 ( 0.00%)                  index += 1;
        .                           continue;
        .                       }
        .           
  968,737 ( 0.00%)              match processor.process_obligation(&mut node.obligation) {
        .                           ProcessResult::Unchanged => {
        .                               // No change in state.
        .                           }
  667,268 ( 0.00%)                  ProcessResult::Changed(children) => {
        .                               // We are not (yet) stalled.
        .                               outcome.mark_not_stalled();
        .                               node.state.set(NodeState::Success);
        .           
  836,930 ( 0.00%)                      for child in children {
1,442,127 ( 0.01%)                          let st = self.register_obligation_at(child, Some(index));
  169,662 ( 0.00%)                          if let Err(()) = st {
        .                                       // Error already reported - propagate it
        .                                       // to our node.
        .                                       self.error_at(index);
        .                                   }
        .                               }
        .                           }
        .                           ProcessResult::Error(err) => {
        .                               outcome.mark_not_stalled();
      297 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
        .                           }
        .                       }
1,808,586 ( 0.01%)              index += 1;
        .                   }
        .           
        .                   // There's no need to perform marking, cycle processing and compression when nothing
        .                   // changed.
   96,808 ( 0.00%)          if !outcome.is_stalled() {
        .                       self.mark_successes();
        .                       self.process_cycles(processor);
   94,626 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
        .                   }
        .           
        .                   outcome
2,215,368 ( 0.01%)      }
        .           
        .               /// Returns a vector of obligations for `p` and all of its
        .               /// ancestors, putting them into the error state in the process.
       63 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
        .                   let mut error_stack: Vec<usize> = vec![];
        .                   let mut trace = vec![];
        .           
        .                   loop {
        .                       let node = &self.nodes[index];
       18 ( 0.00%)              node.state.set(NodeState::Error);
        .                       trace.push(node.obligation.clone());
       36 ( 0.00%)              if node.has_parent {
        .                           // The first dependent is the parent, which is treated
        .                           // specially.
        .                           error_stack.extend(node.dependents.iter().skip(1));
        9 ( 0.00%)                  index = node.dependents[0];
        .                       } else {
        .                           // No parent; treat all dependents non-specially.
        .                           error_stack.extend(node.dependents.iter());
        .                           break;
        .                       }
        .                   }
        .           
        .                   while let Some(index) = error_stack.pop() {
-- line 508 ----------------------------------------
-- line 509 ----------------------------------------
        .                       let node = &self.nodes[index];
        .                       if node.state.get() != NodeState::Error {
        .                           node.state.set(NodeState::Error);
        .                           error_stack.extend(node.dependents.iter());
        .                       }
        .                   }
        .           
        .                   trace
       72 ( 0.00%)      }
        .           
        .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
        .               /// pending node.
        .               fn mark_successes(&self) {
        .                   // Convert all `Waiting` nodes to `Success`.
        .                   for node in &self.nodes {
1,053,458 ( 0.00%)              if node.state.get() == NodeState::Waiting {
        .                           node.state.set(NodeState::Success);
        .                       }
        .                   }
        .           
        .                   // Convert `Success` nodes that depend on a pending node back to
        .                   // `Waiting`.
        .                   for node in &self.nodes {
  460,434 ( 0.00%)              if node.state.get() == NodeState::Pending {
        .                           // This call site is hot.
        .                           self.inlined_mark_dependents_as_waiting(node);
        .                       }
        .                   }
        .               }
        .           
        .               // This always-inlined function is for the hot call site.
        .               #[inline(always)]
        .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
   68,383 ( 0.00%)          for &index in node.dependents.iter() {
        .                       let node = &self.nodes[index];
   68,383 ( 0.00%)              let state = node.state.get();
   68,383 ( 0.00%)              if state == NodeState::Success {
        .                           // This call site is cold.
  173,988 ( 0.00%)                  self.uninlined_mark_dependents_as_waiting(node);
        .                       } else {
        .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
        .                       }
        .                   }
        .               }
        .           
        .               // This never-inlined function is for the cold call site.
        .               #[inline(never)]
  405,972 ( 0.00%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
        .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
        .                   node.state.set(NodeState::Waiting);
        .                   self.inlined_mark_dependents_as_waiting(node)
  463,968 ( 0.00%)      }
        .           
        .               /// Report cycles between all `Success` nodes, and convert all `Success`
        .               /// nodes to `Done`. This must be called after `mark_successes`.
        .               fn process_cycles<P>(&mut self, processor: &mut P)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
   47,313 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
        .                   for (index, node) in self.nodes.iter().enumerate() {
        .                       // For some benchmarks this state test is extremely hot. It's a win
        .                       // to handle the no-op cases immediately to avoid the cost of the
        .                       // function call.
  460,434 ( 0.00%)              if node.state.get() == NodeState::Success {
  792,745 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
        .                       }
        .                   }
        .           
        .                   debug_assert!(stack.is_empty());
  378,504 ( 0.00%)          self.reused_node_vec = stack;
        .               }
        .           
2,005,056 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
        .               where
        .                   P: ObligationProcessor<Obligation = O>,
        .               {
        .                   let node = &self.nodes[index];
  445,568 ( 0.00%)          if node.state.get() == NodeState::Success {
   16,518 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
        .                           None => {
        .                               stack.push(index);
   64,235 ( 0.00%)                      for &dep_index in node.dependents.iter() {
  256,940 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
        .                               }
        .                               stack.pop();
        .                               node.state.set(NodeState::Done);
        .                           }
        .                           Some(rpos) => {
        .                               // Cycle detected.
        .                               processor.process_backedge(
        .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
        .                                   PhantomData,
        .                               );
        .                           }
        .                       }
        .                   }
1,782,272 ( 0.01%)      }
        .           
        .               /// Compresses the vector, removing all popped nodes. This adjusts the
        .               /// indices and hence invalidates any outstanding indices. `process_cycles`
        .               /// must be run beforehand to remove any cycles on `Success` nodes.
        .               #[inline(never)]
1,165,815 ( 0.01%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
  159,786 ( 0.00%)          let orig_nodes_len = self.nodes.len();
        .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
        .                   debug_assert!(node_rewrites.is_empty());
        .                   node_rewrites.extend(0..orig_nodes_len);
        .                   let mut dead_nodes = 0;
        .           
        .                   // Move removable nodes to the end, preserving the order of the
        .                   // remaining nodes.
        .                   //
        .                   // LOOP INVARIANT:
        .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
        .                   //     self.nodes[index - dead_nodes..index] are all dead
        .                   //     self.nodes[index..] are unchanged
        .                   for index in 0..orig_nodes_len {
        .                       let node = &self.nodes[index];
2,491,422 ( 0.01%)              match node.state.get() {
        .                           NodeState::Pending | NodeState::Waiting => {
  587,216 ( 0.00%)                      if dead_nodes > 0 {
  254,541 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
  424,235 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
        .                               }
        .                           }
        .                           NodeState::Done => {
        .                               // This lookup can fail because the contents of
        .                               // `self.active_cache` are not guaranteed to match those of
        .                               // `self.nodes`. See the comment in `process_obligation`
        .                               // for more details.
  610,502 ( 0.00%)                      if let Some((predicate, _)) =
  500,424 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
        .                               {
        .                                   self.done_cache.insert(predicate);
        .                               } else {
        .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
        .                               }
        .                               // Extract the success stories.
        .                               outcome_cb(&node.obligation);
  333,616 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
  333,616 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Error => {
        .                               // We *intentionally* remove the node from the cache at this point. Otherwise
        .                               // tests must come up with a different type on every type error they
        .                               // check against.
       54 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
       36 ( 0.00%)                      self.insert_into_error_cache(index);
       36 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
       36 ( 0.00%)                      dead_nodes += 1;
        .                           }
        .                           NodeState::Success => unreachable!(),
        .                       }
        .                   }
        .           
        .                   if dead_nodes > 0 {
        .                       // Remove the dead nodes and rewrite indices.
   89,468 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
   44,734 ( 0.00%)              self.apply_rewrites(&node_rewrites);
        .                   }
        .           
        .                   node_rewrites.truncate(0);
  639,144 ( 0.00%)          self.reused_node_vec = node_rewrites;
1,278,288 ( 0.01%)      }
        .           
        .               #[inline(never)]
  402,606 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
        .                   let orig_nodes_len = node_rewrites.len();
        .           
        .                   for node in &mut self.nodes {
        .                       let mut i = 0;
  314,680 ( 0.00%)              while let Some(dependent) = node.dependents.get_mut(i) {
  230,812 ( 0.00%)                  let new_index = node_rewrites[*dependent];
  115,406 ( 0.00%)                  if new_index >= orig_nodes_len {
        .                               node.dependents.swap_remove(i);
        .                               if i == 0 && node.has_parent {
        .                                   // We just removed the parent.
        .                                   node.has_parent = false;
        .                               }
        .                           } else {
   57,703 ( 0.00%)                      *dependent = new_index;
  115,406 ( 0.00%)                      i += 1;
        .                           }
        .                       }
        .                   }
        .           
        .                   // This updating of `self.active_cache` is necessary because the
        .                   // removal of nodes within `compress` can fail. See above.
        .                   self.active_cache.retain(|_predicate, index| {
1,254,828 ( 0.01%)              let new_index = node_rewrites[*index];
  627,414 ( 0.00%)              if new_index >= orig_nodes_len {
        .                           false
        .                       } else {
  256,977 ( 0.00%)                  *index = new_index;
        .                           true
        .                       }
        .                   });
  357,872 ( 0.00%)      }
        .           }

5,417,039 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  117,891 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
  125,078 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
    3,902 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
    2,608 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
    2,009 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
    3,912 ( 0.00%)      pub prev_token: Token,
    2,714 ( 0.00%)      pub capture_cfg: bool,
    6,133 ( 0.00%)      restrictions: Restrictions,
    4,018 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
    4,018 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
    4,018 ( 0.00%)      unmatched_angle_bracket_count: u32,
    6,027 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
    2,009 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
    2,009 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
    8,625 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
    8,036 ( 0.00%)      capturing: Capturing,
    2,009 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
   17,113 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
  481,155 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
  112,925 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
   35,459 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
  217,698 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
   92,669 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
  185,338 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
   15,060 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   43,564 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
4,529,076 ( 0.02%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
2,146,595 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   37,540 ( 0.00%)                  self.frame.open_delim = true;
  187,700 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
4,430,458 ( 0.02%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
  151,228 ( 0.00%)              } else if !self.frame.close_delim {
   36,281 ( 0.00%)                  self.frame.close_delim = true;
  181,405 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   71,780 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  466,570 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
   61,974 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  829,926 ( 0.00%)              match tree {
        .                           TokenTree::Token(token) => {
3,019,384 ( 0.01%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
3,019,384 ( 0.01%)      }
        .           
  246,300 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
   73,890 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
  123,150 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
  221,670 ( 0.00%)      }
        .           }
        .           
  230,840 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
  184,672 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
    2,535 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
    4,382 ( 0.00%)      Some(match token.kind {
    9,840 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
    8,764 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
    8,764 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
   17,220 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
    4,920 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
    3,497 ( 0.00%)          Some(prefix) => format!("{} `{}`", prefix, token_str),
   15,337 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
   12,300 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
   42,168 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
    3,012 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
    6,024 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
   93,372 ( 0.00%)          let mut parser = Parser {
        .                       sess,
    3,012 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
    3,012 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
   18,072 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
    6,024 ( 0.00%)          parser.bump();
        .           
        .                   parser
   27,108 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
2,043,810 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
   97,708 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  948,624 ( 0.00%)                  self.token_cursor.next()
        .                       };
1,362,540 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  340,635 ( 0.00%)              self.token_cursor.break_last_token = false;
1,362,540 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
   12,112 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
1,123,255 ( 0.00%)              if matches!(
  681,270 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
1,362,468 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  329,517 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   36,613 ( 0.00%)          if self.expected_tokens.is_empty() {
   26,700 ( 0.00%)              if self.token == *t {
   22,250 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  385,956 ( 0.00%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  549,195 ( 0.00%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  504,048 ( 0.00%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   84,008 ( 0.00%)          if edible.contains(&self.token.kind) {
  105,303 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  630,060 ( 0.00%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
  374,416 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
  284,595 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  655,543 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   93,649 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  561,244 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
  374,596 ( 0.00%)          self.bump();
        .                   Ok(ident)
  936,490 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
7,127,792 ( 0.03%)      fn check(&mut self, tok: &TokenKind) -> bool {
3,116,160 ( 0.01%)          let is_present = self.token == *tok;
2,111,478 ( 0.01%)          if !is_present {
4,235,305 ( 0.02%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
7,127,792 ( 0.03%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
      480 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
1,470,237 ( 0.01%)          let is_present = self.check(tok);
  946,587 ( 0.00%)          if is_present {
  219,940 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
      600 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
  223,335 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
   51,644 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
1,561,402 ( 0.01%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
  516,885 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
  361,720 ( 0.00%)          if self.check_keyword(kw) {
   39,229 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
  516,885 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
   55,644 ( 0.00%)          if self.token.is_keyword(kw) {
   11,208 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
    5,915 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
    4,732 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
  321,312 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
  160,656 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
  361,476 ( 0.00%)      }
        .           
  404,886 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
  155,466 ( 0.00%)          if ok {
        .                       true
        .                   } else {
   77,364 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
  404,886 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
  102,035 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
  139,656 ( 0.00%)      fn check_path(&mut self) -> bool {
  333,223 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
  174,570 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
   29,018 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
   21,680 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
  104,985 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
   58,325 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
  104,985 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
   39,536 ( 0.00%)          self.check_or_expected(
   19,768 ( 0.00%)              self.token.is_like_plus(),
   19,768 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  611,808 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
  356,888 ( 0.00%)          if self.token.kind == expected {
   30,690 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
  178,195 ( 0.00%)          match self.token.kind.break_two_token_op() {
   14,183 ( 0.00%)              Some((first, second)) if first == expected => {
       44 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
       55 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
       99 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
       11 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
      154 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
  106,884 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  606,070 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
    3,316 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
   30,030 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
    5,070 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
   27,444 ( 0.00%)      fn eat_lt(&mut self) -> bool {
  125,019 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   82,174 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
   19,320 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
   21,254 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
   27,444 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
   27,990 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
   13,995 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
    9,330 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
   98,094 ( 0.00%)              TokenExpectType::Expect => self.check(k),
   12,675 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  125,086 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   87,902 ( 0.00%)              if let Some(ref t) = sep.sep {
   99,774 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
   60,150 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   44,090 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   33,180 ( 0.00%)              let t = f(self)?;
   17,202 ( 0.00%)              v.push(t);
        .                   }
        .           
   61,080 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   61,515 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
   93,400 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   38,404 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   19,296 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
  101,676 ( 0.00%)          Ok((val, trailing))
   74,720 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   35,809 ( 0.00%)          self.expect(bra)?;
   74,720 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
   14,347 ( 0.00%)              &token::OpenDelim(delim),
   19,410 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
4,428,164 ( 0.02%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
2,043,768 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
1,362,512 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  340,628 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  340,628 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
2,724,936 ( 0.01%)      pub fn bump(&mut self) {
1,362,468 ( 0.01%)          let next_token = self.next_tok(self.token.span);
2,043,702 ( 0.01%)          self.bump_with(next_token);
2,724,936 ( 0.01%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
      312 ( 0.00%)      pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
   36,800 ( 0.00%)          if dist == 0 {
   15,827 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
  170,575 ( 0.00%)          let frame = &self.token_cursor.frame;
  184,947 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  532,303 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  702,439 ( 0.00%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  862,876 ( 0.00%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  318,503 ( 0.00%)                      Some(tree) => match tree {
  157,490 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   27,102 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   98,391 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
   12,794 ( 0.00%)          let mut token = Token::dummy();
      506 ( 0.00%)          while i < dist {
   89,611 ( 0.00%)              token = cursor.next().0;
   40,880 ( 0.00%)              if matches!(
   25,554 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
      215 ( 0.00%)              i += 1;
        .                   }
    3,150 ( 0.00%)          return looker(&token);
      351 ( 0.00%)      }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
  144,783 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
   38,663 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
  144,783 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
    6,684 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
   26,736 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
   71,520 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
   19,935 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
    1,335 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
  125,160 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1108 ----------------------------------------
        .                       id: DUMMY_NODE_ID,
        .                       value: self.mk_expr(blk.span, ExprKind::Block(blk, None), AttrVec::new()),
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
    2,156 ( 0.00%)      fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
   13,244 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
    2,328 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        5 ( 0.00%)              self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        2 ( 0.00%)              self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
    3,483 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        3 ( 0.00%)      }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
    6,527 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
    6,261 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
   38,781 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
   34,472 ( 0.00%)          Ok(
   23,823 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
    1,737 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
    1,680 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
   15,316 ( 0.00%)                  match self.parse_token_tree() {
   19,145 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
    7,658 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
      960 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
      133 ( 0.00%)                      let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
      133 ( 0.00%)                      let expr = self.parse_expr_force_collect()?;
      133 ( 0.00%)                      let span = expr.span;
        .           
      665 ( 0.00%)                      let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
    1,197 ( 0.00%)                      MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
   30,163 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  115,525 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   66,346 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
   35,624 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
   14,655 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
  132,068 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
   82,246 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
    8,258 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
    8,258 ( 0.00%)                  let span = frame.span;
    4,129 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
    8,258 ( 0.00%)                  self.bump();
   20,645 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
      648 ( 0.00%)                  self.bump();
    1,620 ( 0.00%)                  TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
   31,171 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   41,969 ( 0.00%)          let old = self.restrictions;
   52,931 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   51,020 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
  121,448 ( 0.00%)      fn is_crate_vis(&self) -> bool {
   75,905 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
  136,629 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
   94,400 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
   18,886 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
    9,440 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
   37,760 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
    8,430 ( 0.00%)              return Ok(Visibility {
   25,290 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
    1,010 ( 0.00%)          let lo = self.prev_token.span;
        .           
    5,050 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
    3,030 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
   84,960 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
    2,225 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1395 ----------------------------------------
        .                                   .emit();
        .                               None
        .                           }
        .                       },
        .                       Err(None) => None,
        .                   }
        .               }
        .           
    7,010 ( 0.00%)      pub fn collect_tokens_no_attrs<R: AstLike>(
        .                   &mut self,
        .                   f: impl FnOnce(&mut Self) -> PResult<'a, R>,
        .               ) -> PResult<'a, R> {
        .                   // The only reason to call `collect_tokens_no_attrs` is if you want tokens, so use
        .                   // `ForceCollect::Yes`
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
      767 ( 0.00%)              |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
    7,010 ( 0.00%)      }
        .           
        .               /// `::{` or `::*`
  631,472 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
  315,736 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  510,719 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
  440,829 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
   48,736 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
   24,368 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
   24,368 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
   48,736 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

2,230,645 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs
--------------------------------------------------------------------------------
Ir                  

-- line 62 ----------------------------------------
         .               /// The arrays storing the actual data of the node. Only the first `len` elements of each
         .               /// array are initialized and valid.
         .               keys: [MaybeUninit<K>; CAPACITY],
         .               vals: [MaybeUninit<V>; CAPACITY],
         .           }
         .           
         .           impl<K, V> LeafNode<K, V> {
         .               /// Initializes a new `LeafNode` in-place.
        60 ( 0.00%)      unsafe fn init(this: *mut Self) {
         .                   // As a general policy, we leave fields uninitialized if they can be, as this should
         .                   // be both slightly faster and easier to track in Valgrind.
         .                   unsafe {
         .                       // parent_idx, keys, and vals are all MaybeUninit
        80 ( 0.00%)              ptr::addr_of_mut!((*this).parent).write(None);
        60 ( 0.00%)              ptr::addr_of_mut!((*this).len).write(0);
         .                   }
        40 ( 0.00%)      }
         .           
         .               /// Creates a new boxed `LeafNode`.
        20 ( 0.00%)      fn new() -> Box<Self> {
         .                   unsafe {
        80 ( 0.00%)              let mut leaf = Box::new_uninit();
       100 ( 0.00%)              LeafNode::init(leaf.as_mut_ptr());
       100 ( 0.00%)              leaf.assume_init()
        20 ( 0.00%)          }
        40 ( 0.00%)      }
         .           }
         .           
         .           /// The underlying representation of internal nodes. As with `LeafNode`s, these should be hidden
         .           /// behind `BoxedNode`s to prevent dropping uninitialized keys and values. Any pointer to an
         .           /// `InternalNode` can be directly cast to a pointer to the underlying `LeafNode` portion of the
         .           /// node, allowing code to act on leaf and internal nodes generically without having to even check
         .           /// which of the two a pointer is pointing at. This property is enabled by the use of `repr(C)`.
         .           #[repr(C)]
-- line 95 ----------------------------------------
-- line 208 ----------------------------------------
         .           
         .           unsafe impl<'a, K: Sync + 'a, V: Sync + 'a, Type> Send for NodeRef<marker::Immut<'a>, K, V, Type> {}
         .           unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send for NodeRef<marker::Mut<'a>, K, V, Type> {}
         .           unsafe impl<'a, K: Send + 'a, V: Send + 'a, Type> Send for NodeRef<marker::ValMut<'a>, K, V, Type> {}
         .           unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Owned, K, V, Type> {}
         .           unsafe impl<K: Send, V: Send, Type> Send for NodeRef<marker::Dying, K, V, Type> {}
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::Leaf> {
        20 ( 0.00%)      fn new_leaf() -> Self {
       100 ( 0.00%)          Self::from_new_leaf(LeafNode::new())
        40 ( 0.00%)      }
         .           
        40 ( 0.00%)      fn from_new_leaf(leaf: Box<LeafNode<K, V>>) -> Self {
       120 ( 0.00%)          NodeRef { height: 0, node: NonNull::from(Box::leak(leaf)), _marker: PhantomData }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::Internal> {
         .               fn new_internal(child: Root<K, V>) -> Self {
         .                   let mut new_node = unsafe { InternalNode::new() };
         .                   new_node.edges[0].write(child.node);
    96,688 ( 0.00%)          unsafe { NodeRef::from_new_internal(new_node, child.height + 1) }
         .               }
         .           
         .               /// # Safety
         .               /// `height` must not be zero.
         .               unsafe fn from_new_internal(internal: Box<InternalNode<K, V>>, height: usize) -> Self {
         .                   debug_assert!(height > 0);
         .                   let node = NonNull::from(Box::leak(internal)).cast();
         .                   let mut this = NodeRef { height, node, _marker: PhantomData };
-- line 237 ----------------------------------------
-- line 266 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
         .               /// Finds the length of the node. This is the number of keys or values.
         .               /// The number of edges is `len() + 1`.
         .               /// Note that, despite being safe, calling this function can have the side effect
         .               /// of invalidating mutable references that unsafe code has created.
       120 ( 0.00%)      pub fn len(&self) -> usize {
         .                   // Crucially, we only access the `len` field here. If BorrowType is marker::ValMut,
         .                   // there might be outstanding mutable references to values that we must not invalidate.
 1,083,022 ( 0.00%)          unsafe { usize::from((*Self::as_leaf_ptr(self)).len) }
       120 ( 0.00%)      }
         .           
         .               /// Returns the number of levels that the node and leaves are apart. Zero
         .               /// height means the node is a leaf itself. If you picture trees with the
         .               /// root on top, the number says at which elevation the node appears.
         .               /// If you picture trees with leaves on top, the number says how high
         .               /// the tree extends above the node.
         .               pub fn height(&self) -> usize {
         .                   self.height
         .               }
         .           
         .               /// Temporarily takes out another, immutable reference to the same node.
        40 ( 0.00%)      pub fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {
 2,745,295 ( 0.01%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        80 ( 0.00%)      }
         .           
         .               /// Exposes the leaf portion of any leaf or internal node.
         .               ///
         .               /// Returns a raw ptr to avoid invalidating other references to this node.
       400 ( 0.00%)      fn as_leaf_ptr(this: &Self) -> *mut LeafNode<K, V> {
         .                   // The node must be valid for at least the LeafNode portion.
         .                   // This is not a reference in the NodeRef type because we don't know if
         .                   // it should be unique or shared.
       600 ( 0.00%)          this.node.as_ptr()
       400 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {
         .               /// Finds the parent of the current node. Returns `Ok(handle)` if the current
         .               /// node actually has a parent, where `handle` points to the edge of the parent
         .               /// that points to the current node. Returns `Err(self)` if the current node has
         .               /// no parent, giving back the original `NodeRef`.
         .               ///
         .               /// The method name assumes you picture trees with the root node on top.
         .               ///
         .               /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should
         .               /// both, upon success, do nothing.
       100 ( 0.00%)      pub fn ascend(
         .                   self,
         .               ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {
        60 ( 0.00%)          assert!(BorrowType::PERMITS_TRAVERSAL);
         .                   // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,
         .                   // there might be outstanding mutable references to values that we must not invalidate.
       100 ( 0.00%)          let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);
   754,996 ( 0.00%)          unsafe { (*leaf_ptr).parent }
         .                       .as_ref()
        80 ( 0.00%)              .map(|parent| Handle {
   704,695 ( 0.00%)                  node: NodeRef::from_internal(*parent, self.height + 1),
   244,823 ( 0.00%)                  idx: unsafe { usize::from((*leaf_ptr).parent_idx.assume_init()) },
         .                           _marker: PhantomData,
         .                       })
        40 ( 0.00%)              .ok_or(self)
        40 ( 0.00%)      }
         .           
       100 ( 0.00%)      pub fn first_edge(self) -> Handle<Self, marker::Edge> {
        60 ( 0.00%)          unsafe { Handle::new_edge(self, 0) }
        40 ( 0.00%)      }
         .           
         .               pub fn last_edge(self) -> Handle<Self, marker::Edge> {
         .                   let len = self.len();
         .                   unsafe { Handle::new_edge(self, len) }
         .               }
         .           
         .               /// Note that `self` must be nonempty.
         .               pub fn first_kv(self) -> Handle<Self, marker::KV> {
-- line 342 ----------------------------------------
-- line 363 ----------------------------------------
         .                   } else {
         .                       false
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Immut<'a>, K, V, Type> {
         .               /// Exposes the leaf portion of any leaf or internal node in an immutable tree.
        60 ( 0.00%)      fn into_leaf(self) -> &'a LeafNode<K, V> {
        80 ( 0.00%)          let ptr = Self::as_leaf_ptr(&self);
         .                   // SAFETY: there can be no mutable references into this tree borrowed as `Immut`.
         .                   unsafe { &*ptr }
        40 ( 0.00%)      }
         .           
         .               /// Borrows a view into the keys stored in the node.
        60 ( 0.00%)      pub fn keys(&self) -> &[K] {
       100 ( 0.00%)          let leaf = self.into_leaf();
         .                   unsafe {
 5,804,278 ( 0.03%)              MaybeUninit::slice_assume_init_ref(leaf.keys.get_unchecked(..usize::from(leaf.len)))
         .                   }
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Dying, K, V, marker::LeafOrInternal> {
         .               /// Similar to `ascend`, gets a reference to a node's parent node, but also
         .               /// deallocates the current node in the process. This is unsafe because the
         .               /// current node will still be accessible despite being deallocated.
       140 ( 0.00%)      pub unsafe fn deallocate_and_ascend(
         .                   self,
         .               ) -> Option<Handle<NodeRef<marker::Dying, K, V, marker::Internal>, marker::Edge>> {
        20 ( 0.00%)          let height = self.height;
        20 ( 0.00%)          let node = self.node;
        80 ( 0.00%)          let ret = self.ascend().ok();
         .                   unsafe {
        80 ( 0.00%)              Global.deallocate(
        40 ( 0.00%)                  node.cast(),
   208,603 ( 0.00%)                  if height > 0 {
         .                               Layout::new::<InternalNode<K, V>>()
         .                           } else {
        80 ( 0.00%)                      Layout::new::<LeafNode<K, V>>()
         .                           },
         .                       );
         .                   }
         .                   ret
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
         .               /// Temporarily takes out another mutable reference to the same node. Beware, as
         .               /// this method is very dangerous, doubly so since it might not immediately appear
         .               /// dangerous.
         .               ///
         .               /// Because mutable pointers can roam anywhere around the tree, the returned
-- line 415 ----------------------------------------
-- line 418 ----------------------------------------
         .               // FIXME(@gereeter) consider adding yet another type parameter to `NodeRef`
         .               // that restricts the use of navigation methods on reborrowed pointers,
         .               // preventing this unsafety.
         .               unsafe fn reborrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           
         .               /// Borrows exclusive access to the leaf portion of a leaf or internal node.
       160 ( 0.00%)      fn as_leaf_mut(&mut self) -> &mut LeafNode<K, V> {
       240 ( 0.00%)          let ptr = Self::as_leaf_ptr(self);
         .                   // SAFETY: we have exclusive access to the entire node.
         .                   unsafe { &mut *ptr }
       160 ( 0.00%)      }
         .           
         .               /// Offers exclusive access to the leaf portion of a leaf or internal node.
         .               fn into_leaf_mut(mut self) -> &'a mut LeafNode<K, V> {
         .                   let ptr = Self::as_leaf_ptr(&mut self);
         .                   // SAFETY: we have exclusive access to the entire node.
         .                   unsafe { &mut *ptr }
         .               }
         .           }
         .           
         .           impl<K, V, Type> NodeRef<marker::Dying, K, V, Type> {
         .               /// Borrows exclusive access to the leaf portion of a dying leaf or internal node.
        40 ( 0.00%)      fn as_leaf_dying(&mut self) -> &mut LeafNode<K, V> {
        70 ( 0.00%)          let ptr = Self::as_leaf_ptr(self);
         .                   // SAFETY: we have exclusive access to the entire node.
         .                   unsafe { &mut *ptr }
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
         .               /// Borrows exclusive access to an element of the key storage area.
         .               ///
         .               /// # Safety
         .               /// `index` is in bounds of 0..CAPACITY
        80 ( 0.00%)      unsafe fn key_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
         .               where
         .                   I: SliceIndex<[MaybeUninit<K>], Output = Output>,
         .               {
         .                   // SAFETY: the caller will not be able to call further methods on self
         .                   // until the key slice reference is dropped, as we have unique access
         .                   // for the lifetime of the borrow.
       300 ( 0.00%)          unsafe { self.as_leaf_mut().keys.as_mut_slice().get_unchecked_mut(index) }
        40 ( 0.00%)      }
         .           
         .               /// Borrows exclusive access to an element or slice of the node's value storage area.
         .               ///
         .               /// # Safety
         .               /// `index` is in bounds of 0..CAPACITY
       160 ( 0.00%)      unsafe fn val_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
         .               where
         .                   I: SliceIndex<[MaybeUninit<V>], Output = Output>,
         .               {
         .                   // SAFETY: the caller will not be able to call further methods on self
         .                   // until the value slice reference is dropped, as we have unique access
         .                   // for the lifetime of the borrow.
   988,227 ( 0.00%)          unsafe { self.as_leaf_mut().vals.as_mut_slice().get_unchecked_mut(index) }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
         .               /// Borrows exclusive access to an element or slice of the node's storage area for edge contents.
         .               ///
         .               /// # Safety
         .               /// `index` is in bounds of 0..CAPACITY + 1
         .               unsafe fn edge_area_mut<I, Output: ?Sized>(&mut self, index: I) -> &mut Output
-- line 484 ----------------------------------------
-- line 508 ----------------------------------------
         .                   let key = unsafe { (&*keys.get_unchecked(idx)).assume_init_ref() };
         .                   let val = unsafe { (&mut *vals.get_unchecked_mut(idx)).assume_init_mut() };
         .                   (key, val)
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, Type> NodeRef<marker::Mut<'a>, K, V, Type> {
         .               /// Borrows exclusive access to the length of the node.
        40 ( 0.00%)      pub fn len_mut(&mut self) -> &mut u16 {
        60 ( 0.00%)          &mut self.as_leaf_mut().len
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
         .               /// # Safety
         .               /// Every item returned by `range` is a valid edge index for the node.
         .               unsafe fn correct_childrens_parent_links<R: Iterator<Item = usize>>(&mut self, range: R) {
         .                   for i in range {
         .                       debug_assert!(i <= self.len());
-- line 526 ----------------------------------------
-- line 534 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .               /// Sets the node's link to its parent edge,
         .               /// without invalidating other references to the node.
         .               fn set_parent_link(&mut self, parent: NonNull<InternalNode<K, V>>, parent_idx: usize) {
         .                   let leaf = Self::as_leaf_ptr(self);
   150,516 ( 0.00%)          unsafe { (*leaf).parent = Some(parent) };
         .                   unsafe { (*leaf).parent_idx.write(parent_idx as u16) };
         .               }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
         .               /// Clears the root's link to its parent edge.
         .               fn clear_parent_link(&mut self) {
         .                   let mut root_node = self.borrow_mut();
         .                   let leaf = root_node.as_leaf_mut();
    46,034 ( 0.00%)          leaf.parent = None;
         .               }
         .           }
         .           
         .           impl<K, V> NodeRef<marker::Owned, K, V, marker::LeafOrInternal> {
         .               /// Returns a new owned tree, with its own root node that is initially empty.
        20 ( 0.00%)      pub fn new() -> Self {
       120 ( 0.00%)          NodeRef::new_leaf().forget_type()
        40 ( 0.00%)      }
         .           
         .               /// Adds a new internal node with a single edge pointing to the previous root node,
         .               /// make that new node the root node, and return it. This increases the height by 1
         .               /// and is the opposite of `pop_internal_level`.
   290,064 ( 0.00%)      pub fn push_internal_level(&mut self) -> NodeRef<marker::Mut<'_>, K, V, marker::Internal> {
         .                   super::mem::take_mut(self, |old_root| NodeRef::new_internal(old_root).forget_type());
         .           
         .                   // `self.borrow_mut()`, except that we just forgot we're internal now:
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
   386,752 ( 0.00%)      }
         .           
         .               /// Removes the internal root node, using its first child as the new root node.
         .               /// As it is intended only to be called when the root node has only one child,
         .               /// no cleanup is done on any of the keys, values and other children.
         .               /// This decreases the height by 1 and is the opposite of `push_internal_level`.
         .               ///
         .               /// Requires exclusive access to the `NodeRef` object but not to the root node;
         .               /// it will not invalidate other handles or references to the root node.
         .               ///
         .               /// Panics if there is no internal level, i.e., if the root node is a leaf.
         .               pub fn pop_internal_level(&mut self) {
   136,490 ( 0.00%)          assert!(self.height > 0);
         .           
         .                   let top = self.node;
         .           
         .                   // SAFETY: we asserted to be internal.
         .                   let internal_self = unsafe { self.borrow_mut().cast_to_internal_unchecked() };
         .                   // SAFETY: we borrowed `self` exclusively and its borrow type is exclusive.
         .                   let internal_node = unsafe { &mut *NodeRef::as_internal_ptr(&internal_self) };
         .                   // SAFETY: the first edge is always initialized.
    46,034 ( 0.00%)          self.node = unsafe { internal_node.edges[0].assume_init_read() };
    92,068 ( 0.00%)          self.height -= 1;
         .                   self.clear_parent_link();
         .           
         .                   unsafe {
         .                       Global.deallocate(top.cast(), Layout::new::<InternalNode<K, V>>());
         .                   }
         .               }
         .           }
         .           
         .           impl<K, V, Type> NodeRef<marker::Owned, K, V, Type> {
         .               /// Mutably borrows the owned root node. Unlike `reborrow_mut`, this is safe
         .               /// because the return value cannot be used to destroy the root, and there
         .               /// cannot be other references to the tree.
        40 ( 0.00%)      pub fn borrow_mut(&mut self) -> NodeRef<marker::Mut<'_>, K, V, Type> {
 5,407,636 ( 0.02%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        80 ( 0.00%)      }
         .           
         .               /// Slightly mutably borrows the owned root node.
         .               pub fn borrow_valmut(&mut self) -> NodeRef<marker::ValMut<'_>, K, V, Type> {
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           
         .               /// Irreversibly transitions to a reference that permits traversal and offers
         .               /// destructive methods and little else.
        60 ( 0.00%)      pub fn into_dying(self) -> NodeRef<marker::Dying, K, V, Type> {
        40 ( 0.00%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {
         .               /// Adds a key-value pair to the end of the node.
         .               pub fn push(&mut self, key: K, val: V) {
         .                   let len = self.len_mut();
        58 ( 0.00%)          let idx = usize::from(*len);
        29 ( 0.00%)          assert!(idx < CAPACITY);
        82 ( 0.00%)          *len += 1;
         .                   unsafe {
         .                       self.key_area_mut(idx).write(key);
         .                       self.val_area_mut(idx).write(val);
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
         .               /// Adds a key-value pair, and an edge to go to the right of that pair,
         .               /// to the end of the node.
         .               pub fn push(&mut self, key: K, val: V, edge: Root<K, V>) {
   193,376 ( 0.00%)          assert!(edge.height == self.height - 1);
         .           
         .                   let len = self.len_mut();
    96,688 ( 0.00%)          let idx = usize::from(*len);
    48,344 ( 0.00%)          assert!(idx < CAPACITY);
    96,688 ( 0.00%)          *len += 1;
         .                   unsafe {
         .                       self.key_area_mut(idx).write(key);
         .                       self.val_area_mut(idx).write(val);
    48,344 ( 0.00%)              self.edge_area_mut(idx + 1).write(edge.node);
         .                       Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();
         .                   }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {
         .               /// Removes any static information asserting that this node is a `Leaf` node.
       240 ( 0.00%)      pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
       160 ( 0.00%)          NodeRef { height: self.height, node: self.node, _marker: PhantomData }
       320 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {
         .               /// Removes any static information asserting that this node is an `Internal` node.
         .               pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {
         .               /// Checks whether a node is an `Internal` node or a `Leaf` node.
       420 ( 0.00%)      pub fn force(
         .                   self,
         .               ) -> ForceResult<
         .                   NodeRef<BorrowType, K, V, marker::Leaf>,
         .                   NodeRef<BorrowType, K, V, marker::Internal>,
         .               > {
 5,409,176 ( 0.02%)          if self.height == 0 {
       420 ( 0.00%)              ForceResult::Leaf(NodeRef {
         .                           height: self.height,
         .                           node: self.node,
         .                           _marker: PhantomData,
         .                       })
         .                   } else {
         .                       ForceResult::Internal(NodeRef {
         .                           height: self.height,
         .                           node: self.node,
         .                           _marker: PhantomData,
         .                       })
         .                   }
       120 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .               /// Unsafely asserts to the compiler the static information that this node is a `Leaf`.
         .               unsafe fn cast_to_leaf_unchecked(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {
         .                   debug_assert!(self.height == 0);
         .                   NodeRef { height: self.height, node: self.node, _marker: PhantomData }
         .               }
-- line 697 ----------------------------------------
-- line 724 ----------------------------------------
         .               fn clone(&self) -> Self {
         .                   *self
         .               }
         .           }
         .           
         .           impl<Node, Type> Handle<Node, Type> {
         .               /// Retrieves the node that contains the edge or key-value pair this handle points to.
         .               pub fn into_node(self) -> Node {
        40 ( 0.00%)          self.node
        20 ( 0.00%)      }
         .           
         .               /// Returns the position of this handle in the node.
         .               pub fn idx(&self) -> usize {
         .                   self.idx
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV> {
         .               /// Creates a new handle to a key-value pair in `node`.
         .               /// Unsafe because the caller must ensure that `idx < node.len()`.
       300 ( 0.00%)      pub unsafe fn new_kv(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {
         .                   debug_assert!(idx < node.len());
         .           
       180 ( 0.00%)          Handle { node, idx, _marker: PhantomData }
       120 ( 0.00%)      }
         .           
         .               pub fn left_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
         .                   unsafe { Handle::new_edge(self.node, self.idx) }
         .               }
         .           
        60 ( 0.00%)      pub fn right_edge(self) -> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
   616,770 ( 0.00%)          unsafe { Handle::new_edge(self.node, self.idx + 1) }
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType, K, V, NodeType, HandleType> PartialEq
         .               for Handle<NodeRef<BorrowType, K, V, NodeType>, HandleType>
         .           {
         .               fn eq(&self, other: &Self) -> bool {
         .                   let Self { node, idx, _marker } = self;
         .                   node.eq(&other.node) && *idx == other.idx
-- line 764 ----------------------------------------
-- line 787 ----------------------------------------
         .                   // We can't use Handle::new_kv or Handle::new_edge because we don't know our type
         .                   Handle { node: unsafe { self.node.reborrow_mut() }, idx: self.idx, _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V, NodeType> Handle<NodeRef<BorrowType, K, V, NodeType>, marker::Edge> {
         .               /// Creates a new handle to an edge in `node`.
         .               /// Unsafe because the caller must ensure that `idx <= node.len()`.
       500 ( 0.00%)      pub unsafe fn new_edge(node: NodeRef<BorrowType, K, V, NodeType>, idx: usize) -> Self {
         .                   debug_assert!(idx <= node.len());
         .           
 1,128,654 ( 0.01%)          Handle { node, idx, _marker: PhantomData }
       200 ( 0.00%)      }
         .           
         .               pub fn left_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
    75,119 ( 0.00%)          if self.idx > 0 {
    73,111 ( 0.00%)              Ok(unsafe { Handle::new_kv(self.node, self.idx - 1) })
         .                   } else {
         .                       Err(self)
         .                   }
         .               }
         .           
       120 ( 0.00%)      pub fn right_kv(self) -> Result<Handle<NodeRef<BorrowType, K, V, NodeType>, marker::KV>, Self> {
   956,392 ( 0.00%)          if self.idx < self.node.len() {
       240 ( 0.00%)              Ok(unsafe { Handle::new_kv(self.node, self.idx) })
         .                   } else {
         .                       Err(self)
         .                   }
        40 ( 0.00%)      }
         .           }
         .           
         .           pub enum LeftOrRight<T> {
         .               Left(T),
         .               Right(T),
         .           }
         .           
         .           /// Given an edge index where we want to insert into a node filled to capacity,
         .           /// computes a sensible KV index of a split point and where to perform the insertion.
         .           /// The goal of the split point is for its key and value to end up in a parent node;
         .           /// the keys, values and edges to the left of the split point become the left child;
         .           /// the keys, values and edges to the right of the split point become the right child.
    87,808 ( 0.00%)  fn splitpoint(edge_idx: usize) -> (usize, LeftOrRight<usize>) {
         .               debug_assert!(edge_idx <= CAPACITY);
         .               // Rust issue #74834 tries to explain these symmetric rules.
   344,892 ( 0.00%)      match edge_idx {
   175,616 ( 0.00%)          0..EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER - 1, LeftOrRight::Left(edge_idx)),
         .                   EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Left(edge_idx)),
         .                   EDGE_IDX_RIGHT_OF_CENTER => (KV_IDX_CENTER, LeftOrRight::Right(0)),
   257,307 ( 0.00%)          _ => (KV_IDX_CENTER + 1, LeftOrRight::Right(edge_idx - (KV_IDX_CENTER + 1 + 1))),
         .               }
    87,808 ( 0.00%)  }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
         .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
         .               /// this edge. This method assumes that there is enough space in the node for the new
         .               /// pair to fit.
         .               ///
         .               /// The returned pointer points to the inserted value.
 7,673,699 ( 0.03%)      fn insert_fit(&mut self, key: K, val: V) -> *mut V {
        80 ( 0.00%)          debug_assert!(self.node.len() < CAPACITY);
       180 ( 0.00%)          let new_len = self.node.len() + 1;
         .           
         .                   unsafe {
   977,579 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
 1,104,818 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
   977,323 ( 0.00%)              *self.node.len_mut() = new_len as u16;
         .           
        80 ( 0.00%)              self.node.val_area_mut(self.idx).assume_init_mut()
         .                   }
 7,817,984 ( 0.03%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
         .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
         .               /// this edge. This method splits the node if there isn't enough room.
         .               ///
         .               /// The returned pointer points to the inserted value.
       140 ( 0.00%)      fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {
 2,931,889 ( 0.01%)          if self.node.len() < CAPACITY {
 4,961,374 ( 0.02%)              let val_ptr = self.insert_fit(key, val);
 1,780,596 ( 0.01%)              let kv = unsafe { Handle::new_kv(self.node, self.idx) };
       380 ( 0.00%)              (InsertResult::Fit(kv), val_ptr)
         .                   } else {
   696,040 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
   171,632 ( 0.00%)              let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
         .                       let mut result = middle.split();
   424,358 ( 0.00%)              let mut insertion_edge = match insertion {
         .                           LeftOrRight::Left(insert_idx) => unsafe {
         .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
         .                           },
         .                           LeftOrRight::Right(insert_idx) => unsafe {
         .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
         .                           },
         .                       };
   293,445 ( 0.00%)              let val_ptr = insertion_edge.insert_fit(key, val);
   216,990 ( 0.00%)              (InsertResult::Split(result), val_ptr)
         .                   }
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
         .               /// Fixes the parent pointer and index in the child node that this edge
         .               /// links to. This is useful when the ordering of edges has been changed,
         .               fn correct_parent_link(self) {
         .                   // Create backpointer without invalidating other references to the node.
         .                   let ptr = unsafe { NonNull::new_unchecked(NodeRef::as_internal_ptr(&self.node)) };
-- line 892 ----------------------------------------
-- line 895 ----------------------------------------
         .                   child.set_parent_link(ptr, idx);
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {
         .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
         .               /// between this edge and the key-value pair to the right of this edge. This method assumes
         .               /// that there is enough space in the node for the new pair to fit.
   313,417 ( 0.00%)      fn insert_fit(&mut self, key: K, val: V, edge: Root<K, V>) {
         .                   debug_assert!(self.node.len() < CAPACITY);
         .                   debug_assert!(edge.height == self.node.height - 1);
         .                   let new_len = self.node.len() + 1;
         .           
         .                   unsafe {
    39,464 ( 0.00%)              slice_insert(self.node.key_area_mut(..new_len), self.idx, key);
    35,864 ( 0.00%)              slice_insert(self.node.val_area_mut(..new_len), self.idx, val);
         .                       slice_insert(self.node.edge_area_mut(..new_len + 1), self.idx + 1, edge.node);
    39,464 ( 0.00%)              *self.node.len_mut() = new_len as u16;
         .           
         .                       self.node.correct_childrens_parent_links(self.idx + 1..new_len + 1);
         .                   }
   315,712 ( 0.00%)      }
         .           
         .               /// Inserts a new key-value pair and an edge that will go to the right of that new pair
         .               /// between this edge and the key-value pair to the right of this edge. This method splits
         .               /// the node if there isn't enough room.
         .               fn insert(
         .                   mut self,
         .                   key: K,
         .                   val: V,
         .                   edge: Root<K, V>,
         .               ) -> InsertResult<'a, K, V, marker::Internal> {
   118,392 ( 0.00%)          assert!(edge.height == self.node.height - 1);
         .           
    78,928 ( 0.00%)          if self.node.len() < CAPACITY {
   215,600 ( 0.00%)              self.insert_fit(key, val, edge);
         .                       let kv = unsafe { Handle::new_kv(self.node, self.idx) };
         .                       InsertResult::Fit(kv)
         .                   } else {
     6,113 ( 0.00%)              let (middle_kv_idx, insertion) = splitpoint(self.idx);
         .                       let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };
         .                       let mut result = middle.split();
     1,294 ( 0.00%)              let mut insertion_edge = match insertion {
         .                           LeftOrRight::Left(insert_idx) => unsafe {
         .                               Handle::new_edge(result.left.reborrow_mut(), insert_idx)
         .                           },
         .                           LeftOrRight::Right(insert_idx) => unsafe {
         .                               Handle::new_edge(result.right.borrow_mut(), insert_idx)
         .                           },
         .                       };
     7,197 ( 0.00%)              insertion_edge.insert_fit(key, val, edge);
     2,183 ( 0.00%)              InsertResult::Split(result)
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge> {
         .               /// Inserts a new key-value pair between the key-value pairs to the right and left of
         .               /// this edge. This method splits the node if there isn't enough room, and tries to
         .               /// insert the split off portion into the parent node recursively, until the root is reached.
         .               ///
         .               /// If the returned result is a `Fit`, its handle's node can be this edge's node or an ancestor.
         .               /// If the returned result is a `Split`, the `left` field will be the root node.
         .               /// The returned pointer points to the inserted value.
 9,680,625 ( 0.04%)      pub fn insert_recursing(
         .                   self,
         .                   key: K,
         .                   value: V,
         .               ) -> (InsertResult<'a, K, V, marker::LeafOrInternal>, *mut V) {
 5,628,346 ( 0.03%)          let (mut split, val_ptr) = match self.insert(key, value) {
       180 ( 0.00%)              (InsertResult::Fit(handle), ptr) => {
 4,451,650 ( 0.02%)                  return (InsertResult::Fit(handle.forget_node_type()), ptr);
         .                       }
         .                       (InsertResult::Split(split), val_ptr) => (split.forget_node_type(), val_ptr),
         .                   };
         .           
         .                   loop {
   253,356 ( 0.00%)              split = match split.left.ascend() {
   184,578 ( 0.00%)                  Ok(parent) => match parent.insert(split.kv.0, split.kv.1, split.right) {
         .                               InsertResult::Fit(handle) => {
   207,573 ( 0.00%)                          return (InsertResult::Fit(handle.forget_node_type()), val_ptr);
         .                               }
         4 ( 0.00%)                      InsertResult::Split(split) => split.forget_node_type(),
         .                           },
         .                           Err(root) => {
   416,166 ( 0.00%)                      return (InsertResult::Split(SplitResult { left: root, ..split }), val_ptr);
         .                           }
         .                       };
         .                   }
 8,795,227 ( 0.04%)      }
         .           }
         .           
         .           impl<BorrowType: marker::BorrowType, K, V>
         .               Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>
         .           {
         .               /// Finds the node pointed to by this edge.
         .               ///
         .               /// The method name assumes you picture trees with the root node on top.
-- line 992 ----------------------------------------
-- line 999 ----------------------------------------
         .                   // marker::ValMut, there might be outstanding mutable references to
         .                   // values that we must not invalidate. There's no worry accessing the
         .                   // height field because that value is copied. Beware that, once the
         .                   // node pointer is dereferenced, we access the edges array with a
         .                   // reference (Rust issue #73987) and invalidate any other references
         .                   // to or inside the array, should any be around.
         .                   let parent_ptr = NodeRef::as_internal_ptr(&self.node);
         .                   let node = unsafe { (*parent_ptr).edges.get_unchecked(self.idx).assume_init_read() };
   189,734 ( 0.00%)          NodeRef { node, height: self.node.height - 1, _marker: PhantomData }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Immut<'a>, K, V, NodeType>, marker::KV> {
         .               pub fn into_kv(self) -> (&'a K, &'a V) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   let leaf = self.node.into_leaf();
         .                   let k = unsafe { leaf.keys.get_unchecked(self.idx).assume_init_ref() };
         .                   let v = unsafe { leaf.vals.get_unchecked(self.idx).assume_init_ref() };
 1,247,878 ( 0.01%)          (k, v)
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
         .               pub fn key_mut(&mut self) -> &mut K {
         .                   unsafe { self.node.key_area_mut(self.idx).assume_init_mut() }
         .               }
         .           
-- line 1025 ----------------------------------------
-- line 1037 ----------------------------------------
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
         .               pub fn kv_mut(&mut self) -> (&mut K, &mut V) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   // We cannot call separate key and value methods, because calling the second one
         .                   // invalidates the reference returned by the first.
         .                   unsafe {
     1,594 ( 0.00%)              let leaf = self.node.as_leaf_mut();
     1,594 ( 0.00%)              let key = leaf.keys.get_unchecked_mut(self.idx).assume_init_mut();
         .                       let val = leaf.vals.get_unchecked_mut(self.idx).assume_init_mut();
     1,405 ( 0.00%)              (key, val)
         .                   }
         .               }
         .           
         .               /// Replaces the key and value that the KV handle refers to.
         .               pub fn replace_kv(&mut self, k: K, v: V) -> (K, V) {
         .                   let (key, val) = self.kv_mut();
         .                   (mem::replace(key, k), mem::replace(val, v))
         .               }
         .           }
         .           
         .           impl<K, V, NodeType> Handle<NodeRef<marker::Dying, K, V, NodeType>, marker::KV> {
         .               /// Extracts the key and value that the KV handle refers to.
         .               /// # Safety
         .               /// The node that the handle refers to must not yet have been deallocated.
       120 ( 0.00%)      pub unsafe fn into_key_val(mut self) -> (K, V) {
         .                   debug_assert!(self.idx < self.node.len());
        40 ( 0.00%)          let leaf = self.node.as_leaf_dying();
         .                   unsafe {
       100 ( 0.00%)              let key = leaf.keys.get_unchecked_mut(self.idx).assume_init_read();
       100 ( 0.00%)              let val = leaf.vals.get_unchecked_mut(self.idx).assume_init_read();
       240 ( 0.00%)              (key, val)
         .                   }
        40 ( 0.00%)      }
         .           
         .               /// Drops the key and value that the KV handle refers to.
         .               /// # Safety
         .               /// The node that the handle refers to must not yet have been deallocated.
         .               #[inline]
        60 ( 0.00%)      pub unsafe fn drop_key_val(mut self) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   let leaf = self.node.as_leaf_dying();
         .                   unsafe {
        10 ( 0.00%)              leaf.keys.get_unchecked_mut(self.idx).assume_init_drop();
    63,513 ( 0.00%)              leaf.vals.get_unchecked_mut(self.idx).assume_init_drop();
         .                   }
        70 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::KV> {
         .               /// Helps implementations of `split` for a particular `NodeType`,
         .               /// by taking care of leaf data.
         .               fn split_leaf_data(&mut self, new_node: &mut LeafNode<K, V>) -> (K, V) {
         .                   debug_assert!(self.idx < self.node.len());
         .                   let old_len = self.node.len();
   448,037 ( 0.00%)          let new_len = old_len - self.idx - 1;
    88,014 ( 0.00%)          new_node.len = new_len as u16;
         .                   unsafe {
    67,828 ( 0.00%)              let k = self.node.key_area_mut(self.idx).assume_init_read();
    64,742 ( 0.00%)              let v = self.node.val_area_mut(self.idx).assume_init_read();
         .           
         .                       move_to_slice(
   263,424 ( 0.00%)                  self.node.key_area_mut(self.idx + 1..old_len),
    87,808 ( 0.00%)                  &mut new_node.keys[..new_len],
         .                       );
         .                       move_to_slice(
         .                           self.node.val_area_mut(self.idx + 1..old_len),
    87,808 ( 0.00%)                  &mut new_node.vals[..new_len],
         .                       );
         .           
   152,552 ( 0.00%)              *self.node.len_mut() = self.idx as u16;
    99,248 ( 0.00%)              (k, v)
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::KV> {
         .               /// Splits the underlying node into three parts:
         .               ///
         .               /// - The node is truncated to only contain the key-value pairs to the left of
-- line 1117 ----------------------------------------
-- line 1120 ----------------------------------------
         .               /// - All the key-value pairs to the right of this handle are put into a newly
         .               ///   allocated node.
         .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Leaf> {
         .                   let mut new_node = LeafNode::new();
         .           
         .                   let kv = self.split_leaf_data(&mut new_node);
         .           
         .                   let right = NodeRef::from_new_leaf(new_node);
   778,976 ( 0.00%)          SplitResult { left: self.node, kv, right }
         .               }
         .           
         .               /// Removes the key-value pair pointed to by this handle and returns it, along with the edge
         .               /// that the key-value pair collapsed into.
         .               pub fn remove(
         .                   mut self,
         .               ) -> ((K, V), Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>) {
         .                   let old_len = self.node.len();
         .                   unsafe {
         .                       let k = slice_remove(self.node.key_area_mut(..old_len), self.idx);
   560,436 ( 0.00%)              let v = slice_remove(self.node.val_area_mut(..old_len), self.idx);
 2,877,717 ( 0.01%)              *self.node.len_mut() = (old_len - 1) as u16;
 2,663,451 ( 0.01%)              ((k, v), self.left_edge())
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV> {
         .               /// Splits the underlying node into three parts:
         .               ///
         .               /// - The node is truncated to only contain the edges and key-value pairs to the
-- line 1149 ----------------------------------------
-- line 1153 ----------------------------------------
         .               ///   a newly allocated node.
         .               pub fn split(mut self) -> SplitResult<'a, K, V, marker::Internal> {
         .                   let old_len = self.node.len();
         .                   unsafe {
         .                       let mut new_node = InternalNode::new();
         .                       let kv = self.split_leaf_data(&mut new_node.data);
         .                       let new_len = usize::from(new_node.data.len);
         .                       move_to_slice(
       803 ( 0.00%)                  self.node.edge_area_mut(self.idx + 1..old_len + 1),
     1,606 ( 0.00%)                  &mut new_node.edges[..new_len + 1],
         .                       );
         .           
         .                       let height = self.node.height;
         .                       let right = NodeRef::from_new_internal(new_node, height);
         .           
     4,370 ( 0.00%)              SplitResult { left: self.node, kv, right }
         .                   }
         .               }
         .           }
         .           
         .           /// Represents a session for evaluating and performing a balancing operation
         .           /// around an internal key-value pair.
         .           pub struct BalancingContext<'a, K, V> {
         .               parent: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::KV>,
-- line 1176 ----------------------------------------
-- line 1242 ----------------------------------------
         .           
         .               pub fn into_right_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .                   self.right_child
         .               }
         .           
         .               /// Returns whether merging is possible, i.e., whether there is enough room
         .               /// in a node to combine the central KV with both adjacent child nodes.
         .               pub fn can_merge(&self) -> bool {
   223,577 ( 0.00%)          self.left_child.len() + 1 + self.right_child.len() <= CAPACITY
         .               }
         .           }
         .           
         .           impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {
         .               /// Performs a merge and lets a closure decide what to return.
         .               fn do_merge<
         .                   F: FnOnce(
         .                       NodeRef<marker::Mut<'a>, K, V, marker::Internal>,
-- line 1258 ----------------------------------------
-- line 1264 ----------------------------------------
         .                   result: F,
         .               ) -> R {
         .                   let Handle { node: mut parent_node, idx: parent_idx, _marker } = self.parent;
         .                   let old_parent_len = parent_node.len();
         .                   let mut left_node = self.left_child;
         .                   let old_left_len = left_node.len();
         .                   let mut right_node = self.right_child;
         .                   let right_len = right_node.len();
   145,772 ( 0.00%)          let new_left_len = old_left_len + 1 + right_len;
         .           
   145,772 ( 0.00%)          assert!(new_left_len <= CAPACITY);
         .           
         .                   unsafe {
    72,886 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
         .           
         .                       let parent_key = slice_remove(parent_node.key_area_mut(..old_parent_len), parent_idx);
         .                       left_node.key_area_mut(old_left_len).write(parent_key);
         .                       move_to_slice(
         .                           right_node.key_area_mut(..right_len),
         .                           left_node.key_area_mut(old_left_len + 1..new_left_len),
         .                       );
         .           
         .                       let parent_val = slice_remove(parent_node.val_area_mut(..old_parent_len), parent_idx);
         .                       left_node.val_area_mut(old_left_len).write(parent_val);
         .                       move_to_slice(
         .                           right_node.val_area_mut(..right_len),
         .                           left_node.val_area_mut(old_left_len + 1..new_left_len),
         .                       );
         .           
    72,886 ( 0.00%)              slice_remove(&mut parent_node.edge_area_mut(..old_parent_len + 1), parent_idx + 1);
         .                       parent_node.correct_childrens_parent_links(parent_idx + 1..old_parent_len);
   437,410 ( 0.00%)              *parent_node.len_mut() -= 1;
         .           
   145,772 ( 0.00%)              if parent_node.height > 1 {
         .                           // SAFETY: the height of the nodes being merged is one below the height
         .                           // of the node of this edge, thus above zero, so they are internal.
         .                           let mut left_node = left_node.reborrow_mut().cast_to_internal_unchecked();
         .                           let mut right_node = right_node.cast_to_internal_unchecked();
         .                           move_to_slice(
         .                               right_node.edge_area_mut(..right_len + 1),
        96 ( 0.00%)                      left_node.edge_area_mut(old_left_len + 1..new_left_len + 1),
         .                           );
         .           
         .                           left_node.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
         .           
         .                           Global.deallocate(right_node.node.cast(), Layout::new::<InternalNode<K, V>>());
         .                       } else {
         .                           Global.deallocate(right_node.node.cast(), Layout::new::<LeafNode<K, V>>());
         .                       }
-- line 1312 ----------------------------------------
-- line 1313 ----------------------------------------
         .                   }
         .                   result(parent_node, left_node)
         .               }
         .           
         .               /// Merges the parent's key-value pair and both adjacent child nodes into
         .               /// the left child node and returns the shrunk parent node.
         .               ///
         .               /// Panics unless we `.can_merge()`.
       672 ( 0.00%)      pub fn merge_tracking_parent(self) -> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {
       192 ( 0.00%)          self.do_merge(|parent, _child| parent)
       959 ( 0.00%)      }
         .           
         .               /// Merges the parent's key-value pair and both adjacent child nodes into
         .               /// the left child node and returns that child node.
         .               ///
         .               /// Panics unless we `.can_merge()`.
         .               pub fn merge_tracking_child(self) -> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {
         .                   self.do_merge(|_parent, child| child)
         .               }
         .           
         .               /// Merges the parent's key-value pair and both adjacent child nodes into
         .               /// the left child node and returns the edge handle in that child node
         .               /// where the tracked child edge ended up,
         .               ///
         .               /// Panics unless we `.can_merge()`.
   509,530 ( 0.00%)      pub fn merge_tracking_child_edge(
         .                   self,
         .                   track_edge_idx: LeftOrRight<usize>,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
    72,790 ( 0.00%)          let old_left_len = self.left_child.len();
    72,790 ( 0.00%)          let right_len = self.right_child.len();
   218,370 ( 0.00%)          assert!(match track_edge_idx {
         .                       LeftOrRight::Left(idx) => idx <= old_left_len,
         .                       LeftOrRight::Right(idx) => idx <= right_len,
         .                   });
         .                   let child = self.merge_tracking_child();
    72,790 ( 0.00%)          let new_idx = match track_edge_idx {
         .                       LeftOrRight::Left(idx) => idx,
   216,066 ( 0.00%)              LeftOrRight::Right(idx) => old_left_len + 1 + idx,
         .                   };
         .                   unsafe { Handle::new_edge(child, new_idx) }
   582,320 ( 0.00%)      }
         .           
         .               /// Removes a key-value pair from the left child and places it in the key-value storage
         .               /// of the parent, while pushing the old parent key-value pair into the right child.
         .               /// Returns a handle to the edge in the right child corresponding to where the original
         .               /// edge specified by `track_right_edge_idx` ended up.
         .               pub fn steal_left(
         .                   mut self,
         .                   track_right_edge_idx: usize,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
     1,990 ( 0.00%)          self.bulk_steal_left(1);
         .                   unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }
         .               }
         .           
         .               /// Removes a key-value pair from the right child and places it in the key-value storage
         .               /// of the parent, while pushing the old parent key-value pair onto the left child.
         .               /// Returns a handle to the edge in the left child specified by `track_left_edge_idx`,
         .               /// which didn't move.
         .               pub fn steal_right(
         .                   mut self,
         .                   track_left_edge_idx: usize,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {
     1,196 ( 0.00%)          self.bulk_steal_right(1);
         .                   unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }
         .               }
         .           
         .               /// This does stealing similar to `steal_left` but steals multiple elements at once.
     6,965 ( 0.00%)      pub fn bulk_steal_left(&mut self, count: usize) {
     1,990 ( 0.00%)          assert!(count > 0);
         .                   unsafe {
         .                       let left_node = &mut self.left_child;
         .                       let old_left_len = left_node.len();
         .                       let right_node = &mut self.right_child;
       995 ( 0.00%)              let old_right_len = right_node.len();
         .           
         .                       // Make sure that we may steal safely.
     4,975 ( 0.00%)              assert!(old_right_len + count <= CAPACITY);
     2,923 ( 0.00%)              assert!(old_left_len >= count);
         .           
         .                       let new_left_len = old_left_len - count;
         .                       let new_right_len = old_right_len + count;
       995 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
     1,804 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
         .           
         .                       // Move leaf data.
         .                       {
         .                           // Make room for stolen elements in the right child.
         .                           slice_shr(right_node.key_area_mut(..new_right_len), count);
         .                           slice_shr(right_node.val_area_mut(..new_right_len), count);
         .           
         .                           // Move elements from the left child to the right one.
         .                           move_to_slice(
     1,990 ( 0.00%)                      left_node.key_area_mut(new_left_len + 1..old_left_len),
       995 ( 0.00%)                      right_node.key_area_mut(..count - 1),
         .                           );
         .                           move_to_slice(
         .                               left_node.val_area_mut(new_left_len + 1..old_left_len),
         .                               right_node.val_area_mut(..count - 1),
         .                           );
         .           
         .                           // Move the left-most stolen pair to the parent.
       933 ( 0.00%)                  let k = left_node.key_area_mut(new_left_len).assume_init_read();
         .                           let v = left_node.val_area_mut(new_left_len).assume_init_read();
     1,239 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
         .           
         .                           // Move parent's key-value pair to the right child.
         .                           right_node.key_area_mut(count - 1).write(k);
         .                           right_node.val_area_mut(count - 1).write(v);
         .                       }
         .           
     4,975 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
         .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
         .                               // Make room for stolen edges.
         .                               slice_shr(right.edge_area_mut(..new_right_len + 1), count);
         .           
         .                               // Steal edges.
         .                               move_to_slice(
         .                                   left.edge_area_mut(new_left_len + 1..old_left_len + 1),
         .                                   right.edge_area_mut(..count),
-- line 1432 ----------------------------------------
-- line 1433 ----------------------------------------
         .                               );
         .           
         .                               right.correct_childrens_parent_links(0..new_right_len + 1);
         .                           }
         .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
         .                           _ => unreachable!(),
         .                       }
         .                   }
     7,960 ( 0.00%)      }
         .           
         .               /// The symmetric clone of `bulk_steal_left`.
     4,193 ( 0.00%)      pub fn bulk_steal_right(&mut self, count: usize) {
     1,198 ( 0.00%)          assert!(count > 0);
         .                   unsafe {
         .                       let left_node = &mut self.left_child;
       599 ( 0.00%)              let old_left_len = left_node.len();
         .                       let right_node = &mut self.right_child;
         .                       let old_right_len = right_node.len();
         .           
         .                       // Make sure that we may steal safely.
     2,995 ( 0.00%)              assert!(old_left_len + count <= CAPACITY);
     1,294 ( 0.00%)              assert!(old_right_len >= count);
         .           
         .                       let new_left_len = old_left_len + count;
         .                       let new_right_len = old_right_len - count;
       599 ( 0.00%)              *left_node.len_mut() = new_left_len as u16;
       599 ( 0.00%)              *right_node.len_mut() = new_right_len as u16;
         .           
         .                       // Move leaf data.
         .                       {
         .                           // Move the right-most stolen pair to the parent.
       993 ( 0.00%)                  let k = right_node.key_area_mut(count - 1).assume_init_read();
         .                           let v = right_node.val_area_mut(count - 1).assume_init_read();
     1,576 ( 0.00%)                  let (k, v) = self.parent.replace_kv(k, v);
         .           
         .                           // Move parent's key-value pair to the left child.
         .                           left_node.key_area_mut(old_left_len).write(k);
         .                           left_node.val_area_mut(old_left_len).write(v);
         .           
         .                           // Move elements from the right child to the left one.
         .                           move_to_slice(
         .                               right_node.key_area_mut(..count - 1),
       599 ( 0.00%)                      left_node.key_area_mut(old_left_len + 1..new_left_len),
         .                           );
         .                           move_to_slice(
         .                               right_node.val_area_mut(..count - 1),
         .                               left_node.val_area_mut(old_left_len + 1..new_left_len),
         .                           );
         .           
         .                           // Fill gap where stolen elements used to be.
         .                           slice_shl(right_node.key_area_mut(..old_right_len), count);
         .                           slice_shl(right_node.val_area_mut(..old_right_len), count);
         .                       }
         .           
     2,995 ( 0.00%)              match (left_node.reborrow_mut().force(), right_node.reborrow_mut().force()) {
         .                           (ForceResult::Internal(mut left), ForceResult::Internal(mut right)) => {
         .                               // Steal edges.
         .                               move_to_slice(
         .                                   right.edge_area_mut(..count),
         1 ( 0.00%)                          left.edge_area_mut(old_left_len + 1..new_left_len + 1),
         .                               );
         .           
         .                               // Fill gap where stolen edges used to be.
         1 ( 0.00%)                      slice_shl(right.edge_area_mut(..old_right_len + 1), count);
         .           
         .                               left.correct_childrens_parent_links(old_left_len + 1..new_left_len + 1);
         2 ( 0.00%)                      right.correct_childrens_parent_links(0..new_right_len + 1);
         .                           }
         .                           (ForceResult::Leaf(_), ForceResult::Leaf(_)) => {}
         .                           _ => unreachable!(),
         .                       }
         .                   }
     4,792 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {
       160 ( 0.00%)      pub fn forget_node_type(
         .                   self,
         .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge> {
       280 ( 0.00%)          unsafe { Handle::new_edge(self.node.forget_type(), self.idx) }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge> {
         .               pub fn forget_node_type(
         .                   self,
         .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::Edge> {
         .                   unsafe { Handle::new_edge(self.node.forget_type(), self.idx) }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::KV> {
        80 ( 0.00%)      pub fn forget_node_type(
         .                   self,
         .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV> {
       140 ( 0.00%)          unsafe { Handle::new_kv(self.node.forget_type(), self.idx) }
        40 ( 0.00%)      }
         .           }
         .           
         .           impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::KV> {
         .               pub fn forget_node_type(
         .                   self,
         .               ) -> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, marker::KV> {
         .                   unsafe { Handle::new_kv(self.node.forget_type(), self.idx) }
         .               }
         .           }
         .           
         .           impl<BorrowType, K, V, Type> Handle<NodeRef<BorrowType, K, V, marker::LeafOrInternal>, Type> {
         .               /// Checks whether the underlying node is an `Internal` node or a `Leaf` node.
       200 ( 0.00%)      pub fn force(
         .                   self,
         .               ) -> ForceResult<
         .                   Handle<NodeRef<BorrowType, K, V, marker::Leaf>, Type>,
         .                   Handle<NodeRef<BorrowType, K, V, marker::Internal>, Type>,
         .               > {
       280 ( 0.00%)          match self.node.force() {
       160 ( 0.00%)              ForceResult::Leaf(node) => {
       440 ( 0.00%)                  ForceResult::Leaf(Handle { node, idx: self.idx, _marker: PhantomData })
        40 ( 0.00%)              }
         .                       ForceResult::Internal(node) => {
         .                           ForceResult::Internal(Handle { node, idx: self.idx, _marker: PhantomData })
         .                       }
         .                   }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V, Type> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, Type> {
         .               /// Unsafely asserts to the compiler the static information that the handle's node is a `Leaf`.
         .               pub unsafe fn cast_to_leaf_unchecked(
         .                   self,
         .               ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, Type> {
         .                   let node = unsafe { self.node.cast_to_leaf_unchecked() };
-- line 1564 ----------------------------------------
-- line 1676 ----------------------------------------
         .               pub enum KV {}
         .               pub enum Edge {}
         .           }
         .           
         .           /// Inserts a value into a slice of initialized elements followed by one uninitialized element.
         .           ///
         .           /// # Safety
         .           /// The slice has more than `idx` elements.
       300 ( 0.00%)  unsafe fn slice_insert<T>(slice: &mut [MaybeUninit<T>], idx: usize, val: T) {
         .               unsafe {
       220 ( 0.00%)          let len = slice.len();
         .                   debug_assert!(len > idx);
       160 ( 0.00%)          let slice_ptr = slice.as_mut_ptr();
 7,154,500 ( 0.03%)          if len > idx + 1 {
   809,115 ( 0.00%)              ptr::copy(slice_ptr.add(idx), slice_ptr.add(idx + 1), len - idx - 1);
         .                   }
       240 ( 0.00%)          (*slice_ptr.add(idx)).write(val);
         .               }
        80 ( 0.00%)  }
         .           
         .           /// Removes and returns a value from a slice of all initialized elements, leaving behind one
         .           /// trailing uninitialized element.
         .           ///
         .           /// # Safety
         .           /// The slice has more than `idx` elements.
         .           unsafe fn slice_remove<T>(slice: &mut [MaybeUninit<T>], idx: usize) -> T {
         .               unsafe {
         .                   let len = slice.len();
         .                   debug_assert!(idx < len);
         .                   let slice_ptr = slice.as_mut_ptr();
         .                   let ret = (*slice_ptr.add(idx)).assume_init_read();
 7,345,592 ( 0.03%)          ptr::copy(slice_ptr.add(idx + 1), slice_ptr.add(idx), len - idx - 1);
         .                   ret
         .               }
         .           }
         .           
         .           /// Shifts the elements in a slice `distance` positions to the left.
         .           ///
         .           /// # Safety
         .           /// The slice has at least `distance` elements.
         .           unsafe fn slice_shl<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
         .               unsafe {
         .                   let slice_ptr = slice.as_mut_ptr();
         2 ( 0.00%)          ptr::copy(slice_ptr.add(distance), slice_ptr, slice.len() - distance);
         .               }
         .           }
         .           
         .           /// Shifts the elements in a slice `distance` positions to the right.
         .           ///
         .           /// # Safety
         .           /// The slice has at least `distance` elements.
         .           unsafe fn slice_shr<T>(slice: &mut [MaybeUninit<T>], distance: usize) {
         .               unsafe {
         .                   let slice_ptr = slice.as_mut_ptr();
     2,176 ( 0.00%)          ptr::copy(slice_ptr, slice_ptr.add(distance), slice.len() - distance);
         .               }
         .           }
         .           
         .           /// Moves all values from a slice of initialized elements to a slice
         .           /// of uninitialized elements, leaving behind `src` as all uninitialized.
         .           /// Works like `dst.copy_from_slice(src)` but does not require `T` to be `Copy`.
         .           fn move_to_slice<T>(src: &mut [MaybeUninit<T>], dst: &mut [MaybeUninit<T>]) {
   326,954 ( 0.00%)      assert!(src.len() == dst.len());
         .               unsafe {
         .                   ptr::copy_nonoverlapping(src.as_ptr(), dst.as_mut_ptr(), src.len());
         .               }
         .           }
         .           
         .           #[cfg(test)]
         .           mod tests;

20,776,857 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/btree/node.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs
--------------------------------------------------------------------------------
Ir                  

-- line 13 ----------------------------------------
         .               reserve: extern "C" fn(Buffer<T>, usize) -> Buffer<T>,
         .               drop: extern "C" fn(Buffer<T>),
         .           }
         .           
         .           unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}
         .           unsafe impl<T: Copy + Send> Send for Buffer<T> {}
         .           
         .           impl<T: Copy> Default for Buffer<T> {
     4,914 ( 0.00%)      fn default() -> Self {
     6,552 ( 0.00%)          Self::from(vec![])
     3,276 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> Deref for Buffer<T> {
         .               type Target = [T];
       819 ( 0.00%)      fn deref(&self) -> &[T] {
 4,730,753 ( 0.02%)          unsafe { slice::from_raw_parts(self.data as *const T, self.len) }
       546 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> DerefMut for Buffer<T> {
         .               fn deref_mut(&mut self) -> &mut [T] {
         .                   unsafe { slice::from_raw_parts_mut(self.data, self.len) }
         .               }
         .           }
         .           
         .           impl<T: Copy> Buffer<T> {
         .               pub(super) fn new() -> Self {
         .                   Self::default()
         .               }
         .           
       546 ( 0.00%)      pub(super) fn clear(&mut self) {
 9,957,753 ( 0.04%)          self.len = 0;
       546 ( 0.00%)      }
         .           
     6,552 ( 0.00%)      pub(super) fn take(&mut self) -> Self {
     1,638 ( 0.00%)          mem::take(self)
     3,276 ( 0.00%)      }
         .           
         .               // We have the array method separate from extending from a slice. This is
         .               // because in the case of small arrays, codegen can be more efficient
         .               // (avoiding a memmove call). With extend_from_slice, LLVM at least
         .               // currently is not able to make that optimization.
     1,365 ( 0.00%)      pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[T; N]) {
21,757,683 ( 0.10%)          if xs.len() > (self.capacity - self.len) {
         .                       let b = self.take();
    12,180 ( 0.00%)              *self = (b.reserve)(b, xs.len());
         .                   }
         .                   unsafe {
 3,746,352 ( 0.02%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
11,333,034 ( 0.05%)              self.len += xs.len();
         .                   }
       546 ( 0.00%)      }
         .           
   621,810 ( 0.00%)      pub(super) fn extend_from_slice(&mut self, xs: &[T]) {
   983,556 ( 0.00%)          if xs.len() > (self.capacity - self.len) {
         .                       let b = self.take();
    11,718 ( 0.00%)              *self = (b.reserve)(b, xs.len());
         .                   }
         .                   unsafe {
       558 ( 0.00%)              xs.as_ptr().copy_to_nonoverlapping(self.data.add(self.len), xs.len());
   491,778 ( 0.00%)              self.len += xs.len();
         .                   }
   725,445 ( 0.00%)      }
         .           
     1,638 ( 0.00%)      pub(super) fn push(&mut self, v: T) {
         .                   // The code here is taken from Vec::push, and we know that reserve()
         .                   // will panic if we're exceeding isize::MAX bytes and so there's no need
         .                   // to check for overflow.
24,606,022 ( 0.11%)          if self.len == self.capacity {
         .                       let b = self.take();
         .                       *self = (b.reserve)(b, 1);
         .                   }
         .                   unsafe {
15,973,999 ( 0.07%)              *self.data.add(self.len) = v;
14,332,662 ( 0.06%)              self.len += 1;
         .                   }
       546 ( 0.00%)      }
         .           }
         .           
         .           impl Write for Buffer<u8> {
         .               fn write(&mut self, xs: &[u8]) -> io::Result<usize> {
         .                   self.extend_from_slice(xs);
         .                   Ok(xs.len())
         .               }
         .           
   361,746 ( 0.00%)      fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {
   310,905 ( 0.00%)          self.extend_from_slice(xs);
         .                   Ok(())
   542,619 ( 0.00%)      }
         .           
         .               fn flush(&mut self) -> io::Result<()> {
         .                   Ok(())
         .               }
         .           }
         .           
         .           impl<T: Copy> Drop for Buffer<T> {
     2,457 ( 0.00%)      fn drop(&mut self) {
     1,638 ( 0.00%)          let b = self.take();
25,053,273 ( 0.11%)          (b.drop)(b);
     1,638 ( 0.00%)      }
         .           }
         .           
         .           impl<T: Copy> From<Vec<T>> for Buffer<T> {
     9,828 ( 0.00%)      fn from(mut v: Vec<T>) -> Self {
    42,552 ( 0.00%)          let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());
    13,104 ( 0.00%)          mem::forget(v);
         .           
         .                   // This utility function is nested in here because it can *only*
         .                   // be safely called on `Buffer`s created by *this* `proc_macro`.
     2,457 ( 0.00%)          fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {
         .                       unsafe {
     7,371 ( 0.00%)                  let Buffer { data, len, capacity, .. } = b;
     4,095 ( 0.00%)                  mem::forget(b);
       819 ( 0.00%)                  Vec::from_raw_parts(data, len, capacity)
         .                       }
     1,638 ( 0.00%)          }
         .           
     4,552 ( 0.00%)          extern "C" fn reserve<T: Copy>(b: Buffer<T>, additional: usize) -> Buffer<T> {
     3,414 ( 0.00%)              let mut v = to_vec(b);
         .                       v.reserve(additional);
     3,414 ( 0.00%)              Buffer::from(v)
     4,552 ( 0.00%)          }
         .           
     1,638 ( 0.00%)          extern "C" fn drop<T: Copy>(b: Buffer<T>) {
 2,093,591 ( 0.01%)              mem::drop(to_vec(b));
 2,088,097 ( 0.01%)          }
         .           
    21,752 ( 0.00%)          Buffer { data, len, capacity, reserve, drop }
     3,276 ( 0.00%)      }
         .           }

 9,757,497 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/proc_macro/src/bridge/buffer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           pub struct Preorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               worklist: Vec<BasicBlock>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
  661,350 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
   66,135 ( 0.00%)          let worklist = vec![root];
        .           
  198,405 ( 0.00%)          Preorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
  264,540 ( 0.00%)              worklist,
        .                       root_is_start_block: root == START_BLOCK,
        .                   }
  595,215 ( 0.00%)      }
        .           }
        .           
   65,718 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
  265,374 ( 0.00%)      Preorder::new(body, START_BLOCK)
   98,577 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
7,302,471 ( 0.03%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  805,571 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
  805,571 ( 0.00%)              if !self.visited.insert(idx) {
        .                           continue;
        .                       }
        .           
  597,726 ( 0.00%)              let data = &self.body[idx];
        .           
2,988,630 ( 0.01%)              if let Some(ref term) = data.terminator {
        .                           self.worklist.extend(term.successors());
        .                       }
        .           
        .                       return Some((idx, data));
        .                   }
        .           
        .                   None
5,974,749 ( 0.03%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
        .                   let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
        .                   let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
        .           pub struct Postorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
  436,030 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
        .                   let mut po = Postorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
        .                       visit_stack: Vec::new(),
        .                       root_is_start_block: root == START_BLOCK,
        .                   };
        .           
        .                   let data = &po.body[root];
        .           
  436,030 ( 0.00%)          if let Some(ref term) = data.terminator {
        .                       po.visited.insert(root);
  249,160 ( 0.00%)              po.visit_stack.push((root, term.successors()));
  124,580 ( 0.00%)              po.traverse_successor();
        .                   }
        .           
        .                   po
  560,610 ( 0.00%)      }
        .           
4,385,654 ( 0.02%)      fn traverse_successor(&mut self) {
        .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
        .                   // and 2. what exactly is going on is not clear
        .                   //
        .                   // It does the actual traversal of the graph, while the `next` method on the iterator
        .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
        .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
        .                   // node from the top of the stack, then pushes that node and an iterator over the
        .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
        .                   //
        .                   // Now that the top of the stack has no successors we can traverse, each item will
        .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
        .                   //
        .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
        .                   // since we've already visited `E`, that child isn't added to the stack. The last
        .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
        .                   loop {
3,963,322 ( 0.02%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
2,208,336 ( 0.01%)                  if let Some(&bb) = iter.next() {
        .                               bb
        .                           } else {
        .                               break;
        .                           }
        .                       } else {
        .                           break;
        .                       };
        .           
  736,112 ( 0.00%)              if self.visited.insert(bb) {
3,513,594 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
2,007,768 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
        .                           }
        .                       }
        .                   }
5,012,176 ( 0.02%)      }
        .           }
        .           
   17,042 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
   17,042 ( 0.00%)      Postorder::new(body, START_BLOCK)
   25,563 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  258,603 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
        .                   let next = self.visit_stack.pop();
  564,232 ( 0.00%)          if next.is_some() {
1,074,695 ( 0.00%)              self.traverse_successor();
        .                   }
        .           
  564,232 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
  431,005 ( 0.00%)      }
        .           
   69,380 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
  219,578 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
  219,578 ( 0.00%)          let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
        .                   } else {
        .                       self.visit_stack.len()
        .                   };
        .           
   41,628 ( 0.00%)          (lower, Some(upper))
   97,132 ( 0.00%)      }
        .           }
        .           
        .           /// Reverse postorder traversal of a graph
        .           ///
        .           /// Reverse postorder is the reverse order of a postorder traversal.
        .           /// This is different to a preorder traversal and represents a natural
        .           /// linearization of control-flow.
        .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
        .           pub struct ReversePostorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               blocks: Vec<BasicBlock>,
        .               idx: usize,
        .           }
        .           
        .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
        .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
  107,538 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
        .           
   53,769 ( 0.00%)          let len = blocks.len();
        .           
  268,845 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
        .               }
        .           }
        .           
  322,614 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
        .               ReversePostorder::new(body, START_BLOCK)
  268,845 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  540,321 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
2,161,284 ( 0.01%)          if self.idx == 0 {
        .                       return None;
        .                   }
  973,104 ( 0.00%)          self.idx -= 1;
        .           
        .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
1,080,642 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.idx, Some(self.idx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
        .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
        .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
        .           pub fn reachable<'a, 'tcx>(
        .               body: &'a Body<'tcx>,
        .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
        .               preorder(body)
        .           }
        .           
        .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
  199,656 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
        .               let mut iter = preorder(body);
        .               (&mut iter).for_each(drop);
  133,104 ( 0.00%)      iter.visited
  199,656 ( 0.00%)  }

5,719,078 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               /// let a = [1, 2, 3];
         .               /// assert_eq!(a.len(), 3);
         .               /// ```
         .               #[lang = "slice_len_fn"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
         .               #[inline]
         .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
   266,007 ( 0.00%)      pub const fn len(&self) -> usize {
         .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
         .                   // As of this writing this causes a "Const-stable functions can only call other
         .                   // const-stable functions" error.
         .           
         .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
         .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
         .                   // guarantee.
   266,007 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
   177,338 ( 0.00%)      }
         .           
         .               /// Returns `true` if the slice has a length of 0.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
       138 ( 0.00%)      pub const fn is_empty(&self) -> bool {
 4,111,110 ( 0.02%)          self.len() == 0
       184 ( 0.00%)      }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&10), v.first());
-- line 158 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    73,684 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    22,080 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
     4,393 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   201,364 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 275 ----------------------------------------
         .               /// assert_eq!(Some(&30), v.last());
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
       150 ( 0.00%)      pub const fn last(&self) -> Option<&T> {
 2,527,760 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        90 ( 0.00%)      }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
         .               ///
-- line 293 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 5,537,753 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 317 ----------------------------------------
         .               /// let v = [10, 40, 30];
         .               /// assert_eq!(Some(&40), v.get(1));
         .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
         .               /// assert_eq!(None, v.get(3));
         .               /// assert_eq!(None, v.get(0..4));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   377,860 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
         .               where
         .                   I: SliceIndex<Self>,
         .               {
    94,500 ( 0.00%)          index.get(self)
    94,360 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice depending on the
         .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
         .               ///
         .               /// [`get`]: slice::get
         .               ///
         .               /// # Examples
         .               ///
-- line 338 ----------------------------------------
-- line 372 ----------------------------------------
         .               /// let x = &[1, 2, 4];
         .               ///
         .               /// unsafe {
         .               ///     assert_eq!(x.get_unchecked(1), &2);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     8,896 ( 0.00%)      pub unsafe fn get_unchecked<I>(&self, index: I) -> &I::Output
         .               where
         .                   I: SliceIndex<Self>,
         .               {
         .                   // SAFETY: the caller must uphold most of the safety requirements for `get_unchecked`;
         .                   // the slice is dereferenceable because `self` is a safe reference.
         .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
     2,264 ( 0.00%)          unsafe { &*index.get_unchecked(self) }
     2,224 ( 0.00%)      }
         .           
         .               /// Returns a mutable reference to an element or subslice, without doing
         .               /// bounds checking.
         .               ///
         .               /// For a safe alternative see [`get_mut`].
         .               ///
         .               /// # Safety
         .               ///
-- line 396 ----------------------------------------
-- line 408 ----------------------------------------
         .               /// unsafe {
         .               ///     let elem = x.get_unchecked_mut(1);
         .               ///     *elem = 13;
         .               /// }
         .               /// assert_eq!(x, &[1, 13, 4]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
       800 ( 0.00%)      pub unsafe fn get_unchecked_mut<I>(&mut self, index: I) -> &mut I::Output
         .               where
         .                   I: SliceIndex<Self>,
         .               {
         .                   // SAFETY: the caller must uphold the safety requirements for `get_unchecked_mut`;
         .                   // the slice is dereferenceable because `self` is a safe reference.
         .                   // The returned pointer is safe because impls of `SliceIndex` have to guarantee that it is.
       240 ( 0.00%)          unsafe { &mut *index.get_unchecked_mut(self) }
       200 ( 0.00%)      }
         .           
         .               /// Returns a raw pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// The caller must also ensure that the memory the pointer (non-transitively) points to
         .               /// is never written to (except inside an `UnsafeCell`) using this pointer or any pointer
-- line 432 ----------------------------------------
-- line 447 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
 2,309,480 ( 0.01%)      pub const fn as_ptr(&self) -> *const T {
 4,891,002 ( 0.02%)          self as *const [T] as *const T
 1,154,740 ( 0.01%)      }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
         .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
         .               ///         *x_ptr.add(i) += 2;
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
     4,740 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
        32 ( 0.00%)          self as *mut [T] as *mut T
     2,370 ( 0.00%)      }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
         .               ///
-- line 493 ----------------------------------------
-- line 556 ----------------------------------------
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "slice_ptr_range", since = "1.48.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr_range(&mut self) -> Range<*mut T> {
         .                   let start = self.as_mut_ptr();
         .                   // SAFETY: See as_ptr_range() above for why `add` here is safe.
         .                   let end = unsafe { start.add(self.len()) };
         1 ( 0.00%)          start..end
         .               }
         .           
         .               /// Swaps two elements in the slice.
         .               ///
         .               /// # Arguments
         .               ///
         .               /// * a - The index of the first element
         .               /// * b - The index of the second element
-- line 572 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   175,946 ( 0.00%)          let _ = &self[a];
   366,520 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 644 ----------------------------------------
         .               /// ```
         .               /// let mut v = [1, 2, 3];
         .               /// v.reverse();
         .               /// assert!(v == [3, 2, 1]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn reverse(&mut self) {
         2 ( 0.00%)          let half_len = self.len() / 2;
         .                   let Range { start, end } = self.as_mut_ptr_range();
         .           
         .                   // These slices will skip the middle item for an odd length,
         .                   // since that one doesn't need to move.
         .                   let (front_half, back_half) =
         .                       // SAFETY: Both are subparts of the original slice, so the memory
         .                       // range is valid, and they don't overlap because they're each only
         .                       // half (or less) of the original slice.
-- line 660 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
    30,925 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
         .               ///
         .               /// assert_eq!(iterator.next(), Some(&1));
         .               /// assert_eq!(iterator.next(), Some(&2));
         .               /// assert_eq!(iterator.next(), Some(&4));
         .               /// assert_eq!(iterator.next(), None);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
   735,720 ( 0.00%)      pub fn iter(&self) -> Iter<'_, T> {
   735,720 ( 0.00%)          Iter::new(self)
   490,480 ( 0.00%)      }
         .           
         .               /// Returns an iterator that allows modifying each value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [1, 2, 4];
         .               /// for elem in x.iter_mut() {
         .               ///     *elem += 2;
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
     2,610 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
     2,610 ( 0.00%)          IterMut::new(self)
     1,740 ( 0.00%)      }
         .           
         .               /// Returns an iterator over all contiguous windows of length
         .               /// `size`. The windows overlap. If the slice is shorter than
         .               /// `size`, the iterator returns no values.
         .               ///
         .               /// # Panics
         .               ///
         .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       312 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   393,718 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
    31,594 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2109 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = [String::from("hello"), String::from("world")]; // slice of `String`
         .               /// assert!(v.iter().any(|e| e == "hello")); // search with `&str`
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
       840 ( 0.00%)      pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     3,406 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
       420 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.starts_with(&[10]));
-- line 2130 ----------------------------------------
-- line 2137 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.starts_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
   668,059 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
   286,311 ( 0.00%)          let n = needle.len();
 1,579,303 ( 0.01%)          self.len() >= n && needle == &self[..n]
   477,185 ( 0.00%)      }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
         .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
         .               ///
         .               /// ```
         .               /// let v = &[10, 40, 30];
         .               /// assert!(v.ends_with(&[]));
         .               /// let v: &[u8] = &[];
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
    35,385 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
    45,495 ( 0.00%)          let (m, n) = (self.len(), needle.len());
   181,007 ( 0.00%)          m >= n && needle == &self[m - n..]
    25,275 ( 0.00%)      }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
         .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
16,524,829 ( 0.07%)          while left < right {
22,109,216 ( 0.10%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 2,554,021 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
 6,046,067 ( 0.03%)              if cmp == Less {
12,659,543 ( 0.06%)                  left = mid + 1;
 2,650,670 ( 0.01%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
17,435,060 ( 0.08%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 2452 ----------------------------------------
         .               ///
         .               /// v.sort_unstable();
         .               /// assert!(v == [-5, -3, 1, 2, 4]);
         .               /// ```
         .               ///
         .               /// [pdqsort]: https://github.com/orlp/pdqsort
         .               #[stable(feature = "sort_unstable", since = "1.20.0")]
         .               #[inline]
       570 ( 0.00%)      pub fn sort_unstable(&mut self)
         .               where
         .                   T: Ord,
         .               {
     7,902 ( 0.00%)          sort::quicksort(self, |a, b| a.lt(b));
       380 ( 0.00%)      }
         .           
         .               /// Sorts the slice with a comparator function, but might not preserve the order of equal
         .               /// elements.
         .               ///
         .               /// This sort is unstable (i.e., may reorder equal elements), in-place
         .               /// (i.e., does not allocate), and *O*(*n* \* log(*n*)) worst-case.
         .               ///
         .               /// The comparator function must define a total ordering for the elements in the slice. If
-- line 2473 ----------------------------------------
-- line 3187 ----------------------------------------
         .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
         .               /// ```
         .               ///
         .               /// [`clone_from_slice`]: slice::clone_from_slice
         .               /// [`split_at_mut`]: slice::split_at_mut
         .               #[doc(alias = "memcpy")]
         .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
         .               #[track_caller]
     2,730 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
         .               where
         .                   T: Copy,
         .               {
         .                   // The panic code path was put into a cold function to not bloat the
         .                   // call site.
         .                   #[inline(never)]
         .                   #[cold]
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
 1,125,966 ( 0.01%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
     1,638 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
         .                   }
       546 ( 0.00%)      }
         .           
         .               /// Copies elements from one part of the slice to another part of itself,
         .               /// using a memmove.
         .               ///
         .               /// `src` is the range within `self` to copy from. `dest` is the starting
         .               /// index of the range within `self` to copy to, which will have the same
         .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
         .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
         .                       }
         .                       a << k
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        12 ( 0.00%)          let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
   234,890 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   234,890 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   234,902 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
       469 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
       938 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

16,804,593 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   32,042 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
   27,605 ( 0.00%)              self.file = file;
   46,438 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
    8,433 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   66,228 ( 0.00%)          self.line_number = line_index + 1;
  101,340 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
1,034,306 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
   26,132 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
   13,066 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
   65,330 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
   91,462 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
   52,264 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
3,725,736 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
2,128,992 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  532,248 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  532,248 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
1,004,442 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
1,004,116 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
3,012,348 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
1,004,116 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  502,058 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  502,058 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  502,058 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
2,008,232 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   60,054 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
  241,064 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
  108,785 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
  130,542 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
   87,028 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   25,299 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   25,299 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
  150,950 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   87,303 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      326 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
      489 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
      926 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    1,852 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    3,704 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   60,380 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   30,190 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   60,380 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   30,190 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
  150,950 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   90,570 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   90,570 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   90,570 ( 0.00%)          Some((
   30,190 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   30,190 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
4,790,232 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
4,125,865 ( 0.02%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
  174,606 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
   21,039 ( 0.00%)              if idx != avoid_idx
   13,723 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
  108,785 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
   21,757 ( 0.00%)          if !self.source_map.files().is_empty() {
   43,514 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
  174,056 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
  108,785 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

6,101,701 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../elf/dl-tls.c
  ./elf/../sysdeps/x86_64/tls_get_addr.S
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
4,936,243,373 (21.94%)  events annotated

