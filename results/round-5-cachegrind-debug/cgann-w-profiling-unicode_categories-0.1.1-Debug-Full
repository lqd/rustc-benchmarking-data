--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name unicode_categories src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=dad5295dfe3f63fa -C extra-filename=-dad5295dfe3f63fa --out-dir /usr/home/liquid/tmp/.tmpWhI8xY/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpWhI8xY/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-unicode_categories-0.1.1-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
951,632,778 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
21,380,419 ( 2.25%)  ./malloc/malloc.c:_int_malloc
14,881,497 ( 1.56%)  ./malloc/malloc.c:_int_free
11,760,276 ( 1.24%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
10,390,794 ( 1.09%)  ./malloc/malloc.c:malloc
10,308,916 ( 1.08%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 7,984,608 ( 0.84%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::scan_escape
 7,107,505 ( 0.75%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 5,768,231 ( 0.61%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 5,750,225 ( 0.60%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 5,446,181 ( 0.57%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 5,409,699 ( 0.57%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_span::symbol::Symbol>::intern
 4,845,200 ( 0.51%)  ./elf/dl-lookup.c:do_lookup_x
 4,799,711 ( 0.50%)  ./malloc/malloc.c:malloc_consolidate
 4,603,016 ( 0.48%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 4,397,199 ( 0.46%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 4,300,749 ( 0.45%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::insert::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 4,279,101 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
 4,237,390 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 4,141,271 ( 0.44%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 4,057,780 ( 0.43%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(&str, rustc_span::symbol::Symbol)>>::reserve_rehash::<hashbrown::map::make_hasher<&str, &str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 4,004,025 ( 0.42%)  ./malloc/malloc.c:free
 3,848,544 ( 0.40%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 3,633,413 ( 0.38%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 3,356,096 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
 3,318,208 ( 0.35%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 3,293,539 ( 0.35%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<&str as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 3,256,560 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
 3,197,341 ( 0.34%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
 3,127,705 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
 3,052,172 ( 0.32%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::read_scalar::<rustc_middle::ty::context::TyCtxt>
 2,979,318 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs:rustc_const_eval::transform::check_consts::qualifs::in_operand::<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior, <rustc_const_eval::transform::promote_consts::Validator>::qualif_local<rustc_const_eval::transform::check_consts::qualifs::HasMutInterior>::{closure#0}>
 2,970,001 ( 0.31%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
 2,955,460 ( 0.31%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TypeckResults>::node_type_opt
 2,932,102 ( 0.31%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 2,798,896 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,785,952 ( 0.29%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs:<rustc_hash::FxHasher as core::hash::Hasher>::write
 2,774,663 ( 0.29%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
 2,704,328 ( 0.28%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 2,662,278 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
 2,581,632 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 2,573,768 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs:<rustc_middle::mir::Constant>::check_static_ptr
 2,527,986 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_assoc_expr_with
 2,520,445 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::get_global_alloc
 2,490,713 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 2,480,759 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,459,360 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_visit_primitive
 2,396,014 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::make_mirror_unadjusted
 2,378,681 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_operand.rs:<rustc_mir_build::build::Builder>::as_operand
 2,350,584 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs:<rustc_ast::tokenstream::Cursor>::next_with_spacing
 2,349,200 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::get_bytes_internal::<rustc_middle::ty::context::TyCtxt>
 2,338,528 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs:<rustc_typeck::check::regionck::RegionCtxt as rustc_hir::intravisit::Visitor>::visit_expr
 2,332,819 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 2,303,822 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 2,296,875 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs:md5::utils::compress
 2,278,376 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::aggregate_field_path_elem
 2,259,210 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
 2,230,827 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs:<rustc_lint::levels::LintLevelsBuilder>::push
 2,227,370 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::get
 2,220,796 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::read_scalar
 2,220,112 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs:rustc_query_system::query::plumbing::get_query::<rustc_query_impl::queries::lit_to_const, rustc_query_impl::plumbing::QueryCtxt>
 2,189,143 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenStreamBuilder>::push
 2,167,898 ( 0.23%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 2,139,033 ( 0.22%)  ./elf/do-rel.h:_dl_relocate_object
 2,138,942 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs:<rustc_typeck::check::writeback::WritebackCx>::visit_node_id
 2,125,464 ( 0.22%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 2,125,046 ( 0.22%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 2,123,836 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 2,090,104 ( 0.22%)  ???:SetImpliedBits(llvm::FeatureBitset&, llvm::FeatureBitset const&, llvm::ArrayRef<llvm::SubtargetFeatureKV>)
 2,051,090 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::get_relocations::<rustc_middle::ty::context::TyCtxt>
 2,034,490 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs:<rustc_ast::ast::LitKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 2,009,000 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:md5::utils::compress
 1,999,753 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::collect_tokens_for_expr::<<rustc_parse::parser::Parser>::parse_dot_or_call_expr::{closure#0}>::{closure#0}
 1,999,656 ( 0.21%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::symbol::Symbol, usize)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::symbol::Symbol, rustc_span::symbol::Symbol, usize, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,989,554 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:<rustc_lexer::cursor::Cursor>::single_quoted_string
 1,978,621 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs:<rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args
 1,967,652 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,965,698 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<rustc_span::symbol::Symbol>::intern
 1,964,606 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 1,932,603 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_target/src/abi/mod.rs:<rustc_middle::mir::interpret::allocation::Allocation>::read_scalar::<rustc_middle::ty::context::TyCtxt>
 1,930,808 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::const_val_to_op
 1,927,794 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<rustc_middle::mir::interpret::value::Scalar>::to_u32
 1,903,133 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_operand
 1,887,804 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_middle::hir::map::Map>::attrs
 1,855,473 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs:<rustc_borrowck::type_check::TypeVerifier as rustc_middle::mir::visit::Visitor>::visit_constant
 1,842,715 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs:<rustc_middle::ty::TyS>::is_trivially_unpin
 1,830,550 ( 0.19%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 1,827,830 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
 1,811,144 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::mir::interpret::LitToConstInput, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_middle::mir::interpret::LitToConstInput, rustc_middle::mir::interpret::LitToConstInput, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 1,794,924 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::mir::interpret::LitToConstInput, (core::result::Result<&rustc_middle::ty::consts::Const, rustc_middle::mir::interpret::LitToConstError>, rustc_query_system::dep_graph::graph::DepNodeIndex))>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::mir::interpret::LitToConstInput, rustc_middle::mir::interpret::LitToConstInput, (core::result::Result<&rustc_middle::ty::consts::Const, rustc_middle::mir::interpret::LitToConstError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,754,780 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs:<rustc_middle::ty::TyS>::is_freeze
 1,752,624 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs:<rustc_typeck::check::coercion::CoerceMany<rustc_hir::hir::Expr>>::coerce
 1,711,289 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_passes/src/region.rs:<rustc_passes::region::RegionResolutionVisitor as rustc_hir::intravisit::Visitor>::visit_expr
 1,684,834 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/flags.rs:<rustc_middle::ty::flags::FlagComputation>::add_const
 1,656,027 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/mem_categorization.rs:<rustc_typeck::mem_categorization::MemCategorizationContext>::cat_expr_unadjusted
 1,655,879 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<rustc_middle::mir::interpret::value::ConstValue as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,638,918 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
 1,635,846 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::place_field
 1,622,924 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::consts::Const>, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::consts::Const>, rustc_middle::ty::context::Interned<rustc_middle::ty::consts::Const>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,612,607 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::force_allocation_maybe_sized
 1,604,218 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs:<rustc_span::symbol::Symbol>::intern
 1,594,826 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/intravisit.rs:rustc_hir::intravisit::walk_expr::<rustc_privacy::EmbargoVisitor>
 1,584,090 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::copy_op_no_validate
 1,581,228 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/pointer.rs:<&mut <rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::mplace_array_fields::{closure#0} as core::ops::function::FnOnce<(u64,)>>::call_once
 1,576,209 ( 0.17%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<rustc_span::symbol::Symbol>::intern
 1,561,217 ( 0.16%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 1,554,973 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,538,969 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::TypePrivacyVisitor>::check_expr_pat_type
 1,538,167 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::single_quoted_string
 1,534,787 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 1,525,316 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/expand.rs:<rustc_expand::expand::InvocationCollector as rustc_ast::mut_visit::MutVisitor>::filter_map_expr
 1,524,521 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 1,522,367 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token>::ident
 1,519,477 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 1,510,450 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs:<rustc_middle::ty::ParamEnvAnd<rustc_middle::traits::query::type_op::Normalize<&rustc_middle::ty::TyS>> as rustc_trait_selection::traits::query::type_op::TypeOp>::fully_perform
 1,508,844 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
 1,507,225 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump_with
 1,505,072 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next
 1,494,632 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::write_immediate_to_mplace_no_validate
 1,475,739 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,459,872 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_ast::node_id::NodeId, alloc::vec::Vec<rustc_lint_defs::BufferedEarlyLint>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_ast::node_id::NodeId, rustc_ast::node_id::NodeId, alloc::vec::Vec<rustc_lint_defs::BufferedEarlyLint>>::{closure#0}>
 1,444,079 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/early.rs:<rustc_lint::early::EarlyContextAndPass<rustc_lint::BuiltinCombinedEarlyLintPass> as rustc_ast::visit::Visitor>::visit_expr
 1,434,084 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_passes/src/check_attr.rs:<rustc_passes::check_attr::CheckAttrVisitor>::check_attributes
 1,418,436 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TypeckResults>::node_type
 1,414,656 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/early.rs:<rustc_lint::early::EarlyContextAndPass<rustc_lint::BuiltinCombinedPreExpansionLintPass> as rustc_ast::visit::Visitor>::visit_expr
 1,406,304 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs:<hashbrown::map::HashMap<rustc_middle::mir::interpret::AllocId, (rustc_const_eval::interpret::memory::MemoryKind<rustc_const_eval::const_eval::machine::MemoryKind>, rustc_middle::mir::interpret::allocation::Allocation), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 1,406,107 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs:<rustc_mir_build::build::Builder>::as_operand
 1,402,608 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::read_scalar
 1,374,425 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::insert::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,359,642 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32))>>::insert::<hashbrown::map::make_hasher<rustc_middle::middle::region::Scope, rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,358,820 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::InitMask>::find_bit
 1,354,882 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_dot_or_call_expr_with_
 1,350,573 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::ty::context::Interned<rustc_middle::ty::consts::Const>, ())>>::insert_entry::<hashbrown::map::make_hasher<rustc_middle::ty::context::Interned<rustc_middle::ty::consts::Const>, rustc_middle::ty::context::Interned<rustc_middle::ty::consts::Const>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,347,814 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_constant.rs:<rustc_mir_build::build::Builder>::as_constant
 1,346,450 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_value
 1,343,772 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::visit_value
 1,343,618 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_value
 1,343,241 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::mir::interpret::LitToConstInput, (core::result::Result<&rustc_middle::ty::consts::Const, rustc_middle::mir::interpret::LitToConstError>, rustc_query_system::dep_graph::graph::DepNodeIndex))>>::insert::<hashbrown::map::make_hasher<rustc_middle::mir::interpret::LitToConstInput, rustc_middle::mir::interpret::LitToConstInput, (core::result::Result<&rustc_middle::ty::consts::Const, rustc_middle::mir::interpret::LitToConstError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,343,186 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::Token as core::clone::Clone>::clone
 1,336,839 ( 0.14%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_lint::levels::LintLevelsBuilder>::push
 1,335,670 ( 0.14%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)
 1,316,213 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs:<rustc_ast::ast::Lit>::from_lit_token
 1,298,327 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 1,292,011 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_parse::lexer::StringReader>::next_token
 1,278,875 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_lexer::cursor::Cursor>::single_quoted_string
 1,270,731 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs:<rustc_typeck::check::writeback::WritebackCx as rustc_hir::intravisit::Visitor>::visit_expr
 1,264,068 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_prefix_expr
 1,257,438 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_opt_lit
 1,244,418 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TyCtxt>::get_global_alloc
 1,240,681 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/late.rs:<rustc_resolve::late::LateResolutionVisitor>::resolve_expr
 1,238,888 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 1,237,451 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs:<rustc_typeck::check::fn_ctxt::FnCtxt>::check_expr_kind
 1,233,456 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ptr.rs:<rustc_ast::ptr::P<rustc_ast::ast::Expr>>::map::<<rustc_parse::parser::Parser>::parse_dot_or_call_expr_with::{closure#0}::{closure#0}>
 1,233,425 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/late.rs:rustc_hir::intravisit::walk_expr::<rustc_lint::late::LateContextAndPass<rustc_lint::BuiltinCombinedLateLintPass>>
 1,232,810 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs:<rustc_data_structures::sorted_map::SortedMap<rustc_target::abi::Size, rustc_middle::mir::interpret::AllocId>>::range_slice_indices::<core::ops::range::Range<rustc_target::abi::Size>>
 1,230,654 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<rustc_middle::mir::interpret::allocation::Allocation>::get_relocations::<rustc_middle::ty::context::TyCtxt>
 1,230,516 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::memory::Memory<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::get_mut
 1,227,240 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs:<rustc_parse::parser::Parser>::parse_lit_expr
 1,220,712 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs:<rustc_ast::ast::LitKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 1,214,400 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 1,206,256 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs:<rustc_middle::ty::walk::TypeWalker as core::iter::traits::iterator::Iterator>::next
 1,205,018 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs:<rustc_span::span_encoding::Span>::to
 1,204,906 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_parse::parser::Parser>::check
 1,198,600 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs:<rustc_span::hygiene::SyntaxContext as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
 1,181,253 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_lowering/src/expr.rs:rustc_data_structures::stack::ensure_sufficient_stack::<rustc_hir::hir::Expr, <rustc_ast_lowering::LoweringContext>::lower_expr_mut::{closure#0}>
 1,168,773 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<&str, rustc_span::symbol::Symbol, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,162,044 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:rustc_ast::util::unicode::contains_text_flow_control_chars
 1,154,612 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
 1,153,161 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/builtin.rs:<rustc_lint::builtin::BoxPointers>::check_heap_type
 1,147,492 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/types.rs:<rustc_lint::types::TypeLimits as rustc_lint::passes::LateLintPass>::check_expr
 1,144,104 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/canonical.rs:<rustc_borrowck::type_check::TypeChecker>::fully_perform_op::<&rustc_middle::ty::TyS, rustc_middle::ty::ParamEnvAnd<rustc_middle::traits::query::type_op::Normalize<&rustc_middle::ty::TyS>>>
 1,141,998 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<&mut <rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::mplace_array_fields::{closure#0} as core::ops::function::FnOnce<(u64,)>>::call_once
 1,128,804 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs:<core::str::iter::Chars as core::iter::traits::iterator::Iterator>::next
 1,122,578 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/types.rs:<rustc_lint::types::InvalidAtomicOrdering>::inherent_atomic_method_call
 1,114,502 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::get_bytes_mut::<rustc_middle::ty::context::TyCtxt>
 1,113,324 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_middle::mir::interpret::AllocId, (rustc_const_eval::interpret::memory::MemoryKind<rustc_const_eval::const_eval::machine::MemoryKind>, rustc_middle::mir::interpret::allocation::Allocation), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::rustc_entry
 1,109,942 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs:<rustc_middle::mir::interpret::value::Scalar>::to_char
 1,099,780 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs:stacker::remaining_stack
 1,089,501 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::expect
 1,085,656 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,085,356 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs:<rustc_middle::mir::interpret::allocation::Allocation>::write_scalar::<rustc_middle::ty::context::TyCtxt>
 1,080,844 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/constant.rs:rustc_mir_build::thir::constant::lit_to_const
 1,073,975 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}> as core::iter::traits::iterator::Iterator>::fold::<(), core::iter::traits::iterator::Iterator::for_each::call<rustc_metadata::rmeta::decoder::ImportedSourceFile, <alloc::vec::Vec<rustc_metadata::rmeta::decoder::ImportedSourceFile> as alloc::vec::spec_extend::SpecExtend<rustc_metadata::rmeta::decoder::ImportedSourceFile, core::iter::adapters::map::Map<core::iter::adapters::map::Map<core::ops::range::Range<usize>, <rustc_metadata::rmeta::Lazy<[rustc_span::SourceFile], usize>>::decode<rustc_metadata::creader::CrateMetadataRef>::{closure#0}>, <rustc_metadata::creader::CrateMetadataRef>::imported_source_files::{closure#3}::{closure#0}>>>::spec_extend::{closure#0}>::{closure#0}>
 1,071,416 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/attr.rs:<rustc_parse::parser::Parser>::parse_outer_attributes
 1,069,980 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,067,020 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::source_map::SourceMap>::new_imported_source_file
 1,063,801 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::TypePrivacyVisitor as rustc_hir::intravisit::Visitor>::visit_expr
 1,062,576 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs:<rustc_typeck::check::fn_ctxt::FnCtxt>::warn_if_unreachable
 1,062,388 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 1,053,288 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::const_to_op
 1,052,154 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_middle::hir::map::Map>::attrs
 1,044,995 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::HashMap<rustc_middle::mir::interpret::LitToConstInput, (core::result::Result<&rustc_middle::ty::consts::Const, rustc_middle::mir::interpret::LitToConstError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
 1,034,285 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/types.rs:<rustc_lint::types::InvalidAtomicOrdering as rustc_lint::passes::LateLintPass>::check_expr
 1,033,725 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/passes.rs:<rustc_lint::BuiltinCombinedLateLintPass as rustc_lint::passes::LateLintPass>::check_expr
 1,028,225 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs:<rustc_middle::mir::ConstantKind>::ty
 1,021,335 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs:<rustc_typeck::check::fn_ctxt::FnCtxt>::try_find_coercion_lub::<rustc_hir::hir::Expr>
 1,011,140 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs:<rustc_mir_build::build::Builder>::pop_scope
 1,007,718 ( 0.11%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 1,003,534 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32))>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_middle::middle::region::Scope, rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
 1,000,066 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:<&rustc_middle::ty::consts::Const as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_middle::ty::subst::SubstFolder>
   996,455 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
   996,228 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_hir::hir_id::ItemLocalId, ())>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_hir::hir_id::ItemLocalId, rustc_hir::hir_id::ItemLocalId, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
   995,018 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::lifetime_or_char
   994,262 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs:rustc_lexer::unescape::unescape_literal::<<rustc_parse::lexer::StringReader>::validate_literal_escape::{closure#0}>
   993,204 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::parse_array_or_repeat_expr
   993,160 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs:<rustc_const_eval::interpret::validity::ValidityVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter> as rustc_const_eval::interpret::visitor::ValueVisitor<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::walk_value
   988,462 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_resolve::Resolver as rustc_ast_lowering::ResolverAstLowering>::opt_local_def_id
   982,384 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs:<rustc_borrowck::type_check::TypeChecker>::check_rvalue
   974,450 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   969,983 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs:<&rustc_middle::ty::consts::Const as rustc_middle::ty::fold::TypeFoldable>::super_fold_with::<rustc_middle::ty::fold::RegionFolder>
   966,254 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs:<rustc_parse::lexer::StringReader>::next_token
   964,624 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<alloc::vec::Vec<rustc_parse::parser::TokenType>>::truncate
   954,305 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_lexer::cursor::Cursor>::advance_token

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_passes/src/region.rs
--------------------------------------------------------------------------------
Ir               

-- line 71 ----------------------------------------
      .           }
      .           
      .           /// Records the lifetime of a local variable as `cx.var_parent`
      .           fn record_var_lifetime(
      .               visitor: &mut RegionResolutionVisitor<'_>,
      .               var_id: hir::ItemLocalId,
      .               _sp: Span,
      .           ) {
    111 ( 0.00%)      match visitor.cx.var_parent {
      .                   None => {
      .                       // this can happen in extern fn declarations like
      .                       //
      .                       // extern fn isalnum(c: c_int) -> c_int
      .                   }
    148 ( 0.00%)          Some((parent_scope, _)) => visitor.scope_tree.record_var_scope(var_id, parent_scope),
      .               }
      .           }
      .           
      .           fn resolve_block<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx hir::Block<'tcx>) {
      .               debug!("resolve_block(blk.hir_id={:?})", blk.hir_id);
      .           
    216 ( 0.00%)      let prev_cx = visitor.cx;
      .           
      .               // We treat the tail expression in the block (if any) somewhat
      .               // differently from the statements. The issue has to do with
      .               // temporary lifetimes. Consider the following:
      .               //
      .               //    quux({
      .               //        let inner = ... (&bar()) ...;
      .               //
-- line 100 ----------------------------------------
-- line 111 ----------------------------------------
      .               // tail expression for the block are assigned lifetimes so that
      .               // they will be cleaned up as part of the terminating scope
      .               // *surrounding* the block expression. Here, the terminating
      .               // scope for the block expression is the `quux(..)` call; so
      .               // those temporaries will only be cleaned up *after* both
      .               // `other_argument()` has run and also the call to `quux(..)`
      .               // itself has returned.
      .           
    108 ( 0.00%)      visitor.enter_node_scope_with_dtor(blk.hir_id.local_id);
    180 ( 0.00%)      visitor.cx.var_parent = visitor.cx.parent;
      .           
      .               {
      .                   // This block should be kept approximately in sync with
      .                   // `intravisit::walk_block`. (We manually walk the block, rather
      .                   // than call `walk_block`, in order to maintain precise
      .                   // index information.)
      .           
     36 ( 0.00%)          for (i, statement) in blk.stmts.iter().enumerate() {
      .                       match statement.kind {
      .                           hir::StmtKind::Local(..) | hir::StmtKind::Item(..) => {
      .                               // Each declaration introduces a subscope for bindings
      .                               // introduced by the declaration; this subscope covers a
      .                               // suffix of the block. Each subscope in a block has the
      .                               // previous subscope in the block as a parent, except for
      .                               // the first such subscope, which has the block itself as a
      .                               // parent.
-- line 136 ----------------------------------------
-- line 139 ----------------------------------------
      .                                   data: ScopeData::Remainder(FirstStatementIndex::new(i)),
      .                               });
      .                               visitor.cx.var_parent = visitor.cx.parent;
      .                           }
      .                           hir::StmtKind::Expr(..) | hir::StmtKind::Semi(..) => {}
      .                       }
      .                       visitor.visit_stmt(statement)
      .                   }
    108 ( 0.00%)          walk_list!(visitor, visit_expr, &blk.expr);
      .               }
      .           
    180 ( 0.00%)      visitor.cx = prev_cx;
      .           }
      .           
      .           fn resolve_arm<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, arm: &'tcx hir::Arm<'tcx>) {
     52 ( 0.00%)      let prev_cx = visitor.cx;
      .           
     13 ( 0.00%)      visitor.enter_scope(Scope { id: arm.hir_id.local_id, data: ScopeData::Node });
     52 ( 0.00%)      visitor.cx.var_parent = visitor.cx.parent;
      .           
     26 ( 0.00%)      visitor.terminating_scopes.insert(arm.body.hir_id.local_id);
      .           
     39 ( 0.00%)      if let Some(hir::Guard::If(ref expr)) = arm.guard {
      .                   visitor.terminating_scopes.insert(expr.hir_id.local_id);
      .               }
      .           
      .               intravisit::walk_arm(visitor, arm);
      .           
     52 ( 0.00%)      visitor.cx = prev_cx;
      .           }
      .           
      .           fn resolve_pat<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, pat: &'tcx hir::Pat<'tcx>) {
     50 ( 0.00%)      visitor.record_child_scope(Scope { id: pat.hir_id.local_id, data: ScopeData::Node });
      .           
      .               // If this is a binding then record the lifetime of that binding.
    100 ( 0.00%)      if let PatKind::Binding(..) = pat.kind {
      .                   record_var_lifetime(visitor, pat.hir_id.local_id, pat.span);
      .               }
      .           
      .               debug!("resolve_pat - pre-increment {} pat = {:?}", visitor.expr_and_pat_count, pat);
      .           
    150 ( 0.00%)      intravisit::walk_pat(visitor, pat);
      .           
    200 ( 0.00%)      visitor.expr_and_pat_count += 1;
      .           
      .               debug!("resolve_pat - post-increment {} pat = {:?}", visitor.expr_and_pat_count, pat);
      .           }
      .           
      .           fn resolve_stmt<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, stmt: &'tcx hir::Stmt<'tcx>) {
      .               let stmt_id = stmt.hir_id.local_id;
      .               debug!("resolve_stmt(stmt.id={:?})", stmt_id);
      .           
-- line 190 ----------------------------------------
-- line 201 ----------------------------------------
      .               intravisit::walk_stmt(visitor, stmt);
      .           
      .               visitor.cx.parent = prev_parent;
      .           }
      .           
      .           fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx hir::Expr<'tcx>) {
      .               debug!("resolve_expr - pre-increment {} expr = {:?}", visitor.expr_and_pat_count, expr);
      .           
118,140 ( 0.01%)      let prev_cx = visitor.cx;
 59,070 ( 0.01%)      visitor.enter_node_scope_with_dtor(expr.hir_id.local_id);
      .           
      .               {
      .                   let terminating_scopes = &mut visitor.terminating_scopes;
      .                   let mut terminating = |id: hir::ItemLocalId| {
      .                       terminating_scopes.insert(id);
      .                   };
118,228 ( 0.01%)          match expr.kind {
      .                       // Conditional or repeating scopes are always terminating
      .                       // scopes, meaning that temporaries cannot outlive them.
      .                       // This ensures fixed size stacks.
      .                       hir::ExprKind::Binary(
      .                           source_map::Spanned { node: hir::BinOpKind::And, .. },
      .                           _,
      .                           ref r,
      .                       )
-- line 225 ----------------------------------------
-- line 328 ----------------------------------------
      .               // about what types could possibly live across yield points,
      .               // but we will never fail to detect that a type does actually
      .               // live across a yield point. The latter part is critical -
      .               // we're already overly conservative about what types will live
      .               // across yield points, as the generated MIR will determine
      .               // when things are actually live. However, for typecheck to work
      .               // properly, we can't miss any types.
      .           
177,210 ( 0.02%)      match expr.kind {
      .                   // Manually recurse over closures and inline consts, because they are the only
      .                   // case of nested bodies that share the parent environment.
      .                   hir::ExprKind::Closure(.., body, _, _)
      .                   | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {
      .                       let body = visitor.tcx.hir().body(body);
      .                       visitor.visit_body(body);
      .                   }
      .                   hir::ExprKind::AssignOp(_, ref left_expr, ref right_expr) => {
-- line 344 ----------------------------------------
-- line 406 ----------------------------------------
      .                       let expr_cx = visitor.cx;
      .                       visitor.enter_scope(Scope { id: then.hir_id.local_id, data: ScopeData::IfThen });
      .                       visitor.cx.var_parent = visitor.cx.parent;
      .                       visitor.visit_expr(cond);
      .                       visitor.visit_expr(then);
      .                       visitor.cx = expr_cx;
      .                   }
      .           
 88,605 ( 0.01%)          _ => intravisit::walk_expr(visitor, expr),
      .               }
      .           
118,140 ( 0.01%)      visitor.expr_and_pat_count += 1;
      .           
      .               debug!("resolve_expr post-increment {}, expr = {:?}", visitor.expr_and_pat_count, expr);
      .           
 59,070 ( 0.01%)      if let hir::ExprKind::Yield(_, source) = &expr.kind {
      .                   // Mark this expr's scope and all parent scopes as containing `yield`.
      .                   let mut scope = Scope { id: expr.hir_id.local_id, data: ScopeData::Node };
      .                   loop {
      .                       let span = match expr.kind {
      .                           hir::ExprKind::Yield(expr, hir::YieldSource::Await { .. }) => {
      .                               expr.span.shrink_to_hi().to(expr.span)
      .                           }
      .                           _ => expr.span,
-- line 429 ----------------------------------------
-- line 449 ----------------------------------------
      .                               ScopeData::CallSite => break,
      .                               _ => scope = superscope,
      .                           },
      .                           None => break,
      .                       }
      .                   }
      .               }
      .           
147,675 ( 0.02%)      visitor.cx = prev_cx;
      .           }
      .           
      .           fn resolve_local<'tcx>(
      .               visitor: &mut RegionResolutionVisitor<'tcx>,
      .               pat: Option<&'tcx hir::Pat<'tcx>>,
      .               init: Option<&'tcx hir::Expr<'tcx>>,
      .           ) {
      .               debug!("resolve_local(pat={:?}, init={:?})", pat, init);
      .           
     28 ( 0.00%)      let blk_scope = visitor.cx.var_parent.map(|(p, _)| p);
      .           
      .               // As an exception to the normal rules governing temporary
      .               // lifetimes, initializers in a let have a temporary lifetime
      .               // of the enclosing block. This means that e.g., a program
      .               // like the following is legal:
      .               //
      .               //     let ref x = HashMap::new();
      .               //
-- line 475 ----------------------------------------
-- line 518 ----------------------------------------
      .               //
      .               //     let ref x = [&a(), &b()];
      .               //
      .               // Here, the expression `[...]` has an extended lifetime due to rule
      .               // A, but the inner rvalues `a()` and `b()` have an extended lifetime
      .               // due to rule C.
      .           
      .               if let Some(expr) = init {
     84 ( 0.00%)          record_rvalue_scope_if_borrow_expr(visitor, &expr, blk_scope);
      .           
      .                   if let Some(pat) = pat {
      .                       if is_binding_pat(pat) {
      .                           record_rvalue_scope(visitor, &expr, blk_scope);
      .                       }
      .                   }
      .               }
      .           
      .               // Make sure we visit the initializer first, so expr_and_pat_count remains correct
      .               if let Some(expr) = init {
     84 ( 0.00%)          visitor.visit_expr(expr);
      .               }
      .               if let Some(pat) = pat {
      .                   visitor.visit_pat(pat);
      .               }
      .           
      .               /// Returns `true` if `pat` match the `P&` non-terminal.
      .               ///
      .               /// ```text
-- line 545 ----------------------------------------
-- line 614 ----------------------------------------
      .               ///        | StructName { ..., f: E&, ... }
      .               ///        | [ ..., E&, ... ]
      .               ///        | ( ..., E&, ... )
      .               ///        | {...; E&}
      .               ///        | box E&
      .               ///        | E& as ...
      .               ///        | ( E& )
      .               /// ```
351,180 ( 0.04%)      fn record_rvalue_scope_if_borrow_expr<'tcx>(
      .                   visitor: &mut RegionResolutionVisitor<'tcx>,
      .                   expr: &hir::Expr<'_>,
      .                   blk_id: Option<Scope>,
      .               ) {
117,060 ( 0.01%)          match expr.kind {
      .                       hir::ExprKind::AddrOf(_, _, ref subexpr) => {
    280 ( 0.00%)                  record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);
      .                           record_rvalue_scope(visitor, &subexpr, blk_id);
      .                       }
      .                       hir::ExprKind::Struct(_, fields, _) => {
      .                           for field in fields {
      .                               record_rvalue_scope_if_borrow_expr(visitor, &field.expr, blk_id);
      .                           }
      .                       }
      .                       hir::ExprKind::Array(subexprs) | hir::ExprKind::Tup(subexprs) => {
      .                           for subexpr in subexprs {
146,045 ( 0.02%)                      record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);
      .                           }
      .                       }
      .                       hir::ExprKind::Cast(ref subexpr, _) => {
      .                           record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id)
      .                       }
      .                       hir::ExprKind::Block(ref block, _) => {
      .                           if let Some(ref subexpr) = block.expr {
      .                               record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   }
234,120 ( 0.02%)      }
      .           
      .               /// Applied to an expression `expr` if `expr` -- or something owned or partially owned by
      .               /// `expr` -- is going to be indirectly referenced by a variable in a let statement. In that
      .               /// case, the "temporary lifetime" or `expr` is extended to be the block enclosing the `let`
      .               /// statement.
      .               ///
      .               /// More formally, if `expr` matches the grammar `ET`, record the rvalue scope of the matching
      .               /// `<rvalue>` as `blk_id`:
-- line 660 ----------------------------------------
-- line 675 ----------------------------------------
      .               ) {
      .                   let mut expr = expr;
      .                   loop {
      .                       // Note: give all the expressions matching `ET` with the
      .                       // extended temporary lifetime, not just the innermost rvalue,
      .                       // because in codegen if we must compile e.g., `*rvalue()`
      .                       // into a temporary, we request the temporary scope of the
      .                       // outer expression.
    140 ( 0.00%)              visitor.scope_tree.record_rvalue_scope(expr.hir_id.local_id, blk_scope);
      .           
    112 ( 0.00%)              match expr.kind {
      .                           hir::ExprKind::AddrOf(_, _, ref subexpr)
      .                           | hir::ExprKind::Unary(hir::UnOp::Deref, ref subexpr)
      .                           | hir::ExprKind::Field(ref subexpr, _)
      .                           | hir::ExprKind::Index(ref subexpr, _) => {
      .                               expr = &subexpr;
      .                           }
      .                           _ => {
      .                               return;
-- line 693 ----------------------------------------
-- line 696 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> RegionResolutionVisitor<'tcx> {
      .               /// Records the current parent (if any) as the parent of `child_scope`.
      .               /// Returns the depth of `child_scope`.
      .               fn record_child_scope(&mut self, child_scope: Scope) -> ScopeDepth {
 59,658 ( 0.01%)          let parent = self.cx.parent;
209,063 ( 0.02%)          self.scope_tree.record_scope_parent(child_scope, parent);
      .                   // If `child_scope` has no parent, it must be the root node, and so has
      .                   // a depth of 1. Otherwise, its depth is one more than its parent's.
 59,494 ( 0.01%)          parent.map_or(1, |(_p, d)| d + 1)
      .               }
      .           
      .               /// Records the current parent (if any) as the parent of `child_scope`,
      .               /// and sets `child_scope` as the new current parent.
      .               fn enter_scope(&mut self, child_scope: Scope) {
      .                   let child_depth = self.record_child_scope(child_scope);
 89,497 ( 0.01%)          self.cx.parent = Some((child_scope, child_depth));
      .               }
      .           
206,997 ( 0.02%)      fn enter_node_scope_with_dtor(&mut self, id: hir::ItemLocalId) {
      .                   // If node was previously marked as a terminating scope during the
      .                   // recursive visit of its parent node in the AST, then we need to
      .                   // account for the destruction scope representing the scope of
      .                   // the destructors that run immediately after it completes.
 59,142 ( 0.01%)          if self.terminating_scopes.contains(&id) {
     99 ( 0.00%)              self.enter_scope(Scope { id, data: ScopeData::Destruction });
      .                   }
 29,571 ( 0.00%)          self.enter_scope(Scope { id, data: ScopeData::Node });
177,426 ( 0.02%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {
    324 ( 0.00%)      fn visit_block(&mut self, b: &'tcx Block<'tcx>) {
      .                   resolve_block(self, b);
    288 ( 0.00%)      }
      .           
    576 ( 0.00%)      fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {
    192 ( 0.00%)          let body_id = body.id();
    512 ( 0.00%)          let owner_id = self.tcx.hir().body_owner(body_id);
      .           
      .                   debug!(
      .                       "visit_body(id={:?}, span={:?}, body.id={:?}, cx.parent={:?})",
      .                       owner_id,
      .                       self.tcx.sess.source_map().span_to_diagnostic_string(body.value.span),
      .                       body_id,
      .                       self.cx.parent
      .                   );
      .           
      .                   // Save all state that is specific to the outer function
      .                   // body. These will be restored once down below, once we've
      .                   // visited the body.
      .                   let outer_ec = mem::replace(&mut self.expr_and_pat_count, 0);
    256 ( 0.00%)          let outer_cx = self.cx;
     64 ( 0.00%)          let outer_ts = mem::take(&mut self.terminating_scopes);
      .                   // The 'pessimistic yield' flag is set to true when we are
      .                   // processing a `+=` statement and have to make pessimistic
      .                   // control flow assumptions. This doesn't apply to nested
      .                   // bodies within the `+=` statements. See #69307.
      .                   let outer_pessimistic_yield = mem::replace(&mut self.pessimistic_yield, false);
    128 ( 0.00%)          self.terminating_scopes.insert(body.value.hir_id.local_id);
      .           
     64 ( 0.00%)          self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::CallSite });
     64 ( 0.00%)          self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::Arguments });
      .           
      .                   // The arguments and `self` are parented to the fn.
    128 ( 0.00%)          self.cx.var_parent = self.cx.parent.take();
    448 ( 0.00%)          for param in body.params {
    185 ( 0.00%)              self.visit_pat(&param.pat);
      .                   }
      .           
      .                   // The body of the every fn is a root scope.
    256 ( 0.00%)          self.cx.parent = self.cx.var_parent;
    704 ( 0.00%)          if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {
    144 ( 0.00%)              self.visit_expr(&body.value)
      .                   } else {
      .                       // Only functions have an outer terminating (drop) scope, while
      .                       // temporaries in constant initializers may be 'static, but only
      .                       // according to rvalue lifetime semantics, using the same
      .                       // syntactical rules used for let initializers.
      .                       //
      .                       // e.g., in `let x = &f();`, the temporary holding the result from
      .                       // the `f()` call lives for the entirety of the surrounding block.
-- line 780 ----------------------------------------
-- line 784 ----------------------------------------
      .                       // ever get lifted) that the value *could* have a destructor, but
      .                       // it'd get leaked instead of the destructor running during the
      .                       // evaluation of `X` (if at all allowed by CTFE).
      .                       //
      .                       // However, `const Y: ... = g(&f());`, like `let y = g(&f());`,
      .                       // would *not* let the `f()` temporary escape into an outer scope
      .                       // (i.e., `'static`), which means that after `g` returns, it drops,
      .                       // and all the associated destruction scope rules apply.
     28 ( 0.00%)              self.cx.var_parent = None;
      .                       resolve_local(self, None, Some(&body.value));
      .                   }
      .           
     64 ( 0.00%)          if body.generator_kind.is_some() {
      .                       self.scope_tree.body_expr_count.insert(body_id, self.expr_and_pat_count);
      .                   }
      .           
      .                   // Restore context we had at the start.
     64 ( 0.00%)          self.expr_and_pat_count = outer_ec;
    256 ( 0.00%)          self.cx = outer_cx;
    320 ( 0.00%)          self.terminating_scopes = outer_ts;
     64 ( 0.00%)          self.pessimistic_yield = outer_pessimistic_yield;
    512 ( 0.00%)      }
      .           
    117 ( 0.00%)      fn visit_arm(&mut self, a: &'tcx Arm<'tcx>) {
      .                   resolve_arm(self, a);
    104 ( 0.00%)      }
    450 ( 0.00%)      fn visit_pat(&mut self, p: &'tcx Pat<'tcx>) {
      .                   resolve_pat(self, p);
    400 ( 0.00%)      }
      .               fn visit_stmt(&mut self, s: &'tcx Stmt<'tcx>) {
      .                   resolve_stmt(self, s);
      .               }
265,815 ( 0.03%)      fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {
      .                   resolve_expr(self, ex);
236,280 ( 0.02%)      }
      .               fn visit_local(&mut self, l: &'tcx Local<'tcx>) {
      .                   resolve_local(self, Some(&l.pat), l.init);
      .               }
      .           }
      .           
    940 ( 0.00%)  fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {
    282 ( 0.00%)      let typeck_root_def_id = tcx.typeck_root_def_id(def_id);
    282 ( 0.00%)      if typeck_root_def_id != def_id {
      .                   return tcx.region_scope_tree(typeck_root_def_id);
      .               }
      .           
      .               let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
    470 ( 0.00%)      let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {
  1,216 ( 0.00%)          let mut visitor = RegionResolutionVisitor {
      .                       tcx,
      .                       scope_tree: ScopeTree::default(),
      .                       expr_and_pat_count: 0,
      .                       cx: Context { parent: None, var_parent: None },
      .                       terminating_scopes: Default::default(),
      .                       pessimistic_yield: false,
      .                       fixup_scopes: vec![],
      .                   };
      .           
    256 ( 0.00%)          let body = tcx.hir().body(body_id);
    192 ( 0.00%)          visitor.scope_tree.root_body = Some(body.value.hir_id);
    128 ( 0.00%)          visitor.visit_body(body);
  1,920 ( 0.00%)          visitor.scope_tree
      .               } else {
      .                   ScopeTree::default()
      .               };
      .           
     94 ( 0.00%)      tcx.arena.alloc(scope_tree)
    846 ( 0.00%)  }
      .           
      .           pub fn provide(providers: &mut Providers) {
      2 ( 0.00%)      *providers = Providers { region_scope_tree, ..*providers };
      .           }

441,600 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_passes/src/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 187 ----------------------------------------
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
        .               fn clone(&self) -> Self {
        9 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
        2 ( 0.00%)              table: self.table.clone(),
        .                   }
        .               }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
-- line 205 ----------------------------------------
-- line 210 ----------------------------------------
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
   76,903 ( 0.01%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  641,629 ( 0.07%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
   31,448 ( 0.00%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
        .               hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub const fn with_hasher(hash_builder: S) -> Self {
  360,723 ( 0.04%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new(),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
       61 ( 0.00%)          Self {
        .                       hash_builder,
        .                       table: RawTable::new_in(alloc),
        .                   }
        .               }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
        .               /// map.insert("c", 3);
        .               ///
        .               /// for key in map.keys() {
        .               ///     println!("{}", key);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
        6 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// An iterator visiting all values in arbitrary order.
        .               /// The iterator element type is `&'a V`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn len(&self) -> usize {
      902 ( 0.00%)          self.table.len()
        .               }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn is_empty(&self) -> bool {
   91,795 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
        .                       Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
       10 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
       10 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  903,225 ( 0.09%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  946,938 ( 0.10%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   71,225 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   self.get_inner(k).is_some()
  134,508 ( 0.01%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        1 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
       15 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
        2 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        5 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        8 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,919,872 ( 0.20%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
      126 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        .                       Some(mem::replace(item, v))
        .                   } else {
  596,115 ( 0.06%)              self.table
  757,772 ( 0.08%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   39,051 ( 0.00%)              None
        .                   }
1,753,837 ( 0.18%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  119,118 ( 0.01%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  408,594 ( 0.04%)          match self.remove_entry(k) {
    2,125 ( 0.00%)              Some((_, v)) => Some(v),
   89,674 ( 0.01%)              None => None,
        .                   }
  297,524 ( 0.03%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  132,188 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  101,326 ( 0.01%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  383,415 ( 0.04%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
  360,438 ( 0.04%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
   11,648 ( 0.00%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
   63,457 ( 0.01%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  130,747 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  767,173 ( 0.08%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
  420,631 ( 0.04%)          self.from_hash(hash, equivalent(k))
1,111,326 ( 0.12%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
1,112,262 ( 0.12%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  197,566 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      194 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
    4,681 ( 0.00%)          IntoIter {
    2,766 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
      582 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   94,527 ( 0.01%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
       71 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
       63 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(K, V)> {
      225 ( 0.00%)          self.inner.next()
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
    3,232 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
    2,249 ( 0.00%)          let iter = iter.into_iter();
    1,600 ( 0.00%)          let reserve = if self.is_empty() {
        .                       iter.size_hint().0
        .                   } else {
        3 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
        .                   self.reserve(reserve);
        .                   iter.for_each(move |(k, v)| {
   16,269 ( 0.00%)              self.insert(k, v);
        .                   });
    2,128 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------
-- line 4604 ----------------------------------------
        .           impl<'a, K, V, S, A> Extend<(&'a K, &'a V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash + Copy,
        .               V: Copy,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
       77 ( 0.00%)      fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
        .                   self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));
       88 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (&'a K, &'a V)) {
        .                   self.insert(*k, *v);
        .               }
        .           
        .               #[inline]
-- line 4622 ----------------------------------------

  679,512 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/attr.rs
--------------------------------------------------------------------------------
Ir               

-- line 28 ----------------------------------------
      .           enum OuterAttributeType {
      .               DocComment,
      .               DocBlockComment,
      .               Attribute,
      .           }
      .           
      .           impl<'a> Parser<'a> {
      .               /// Parses attributes that appear before an item.
266,328 ( 0.03%)      pub(super) fn parse_outer_attributes(&mut self) -> PResult<'a, AttrWrapper> {
      .                   let mut attrs: Vec<ast::Attribute> = Vec::new();
      .                   let mut just_parsed_doc_comment = false;
147,960 ( 0.02%)          let start_pos = self.token_cursor.num_next_calls;
      .                   loop {
148,530 ( 0.02%)              let attr = if self.check(&token::Pound) {
    588 ( 0.00%)                  let inner_error_reason = if just_parsed_doc_comment {
      .                               "an inner attribute is not permitted following an outer doc comment"
      .                           } else if !attrs.is_empty() {
      .                               "an inner attribute is not permitted following an outer attribute"
      .                           } else {
      .                               DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG
      .                           };
      .                           let inner_parse_policy = InnerAttrPolicy::Forbidden {
      .                               reason: inner_error_reason,
      .                               saw_doc_comment: just_parsed_doc_comment,
     21 ( 0.00%)                      prev_attr_sp: attrs.last().map(|a| a.span),
      .                           };
      .                           just_parsed_doc_comment = false;
    336 ( 0.00%)                  Some(self.parse_attribute(inner_parse_policy)?)
 59,400 ( 0.01%)              } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {
     72 ( 0.00%)                  if attr_style != ast::AttrStyle::Outer {
      .                               let span = self.token.span;
      .                               let mut err = self.sess.span_diagnostic.struct_span_err_with_code(
      .                                   span,
      .                                   "expected outer doc comment",
      .                                   error_code!(E0753),
      .                               );
      .                               if let Some(replacement_span) = self.annotate_following_item_if_applicable(
      .                                   &mut err,
-- line 65 ----------------------------------------
-- line 77 ----------------------------------------
      .                                       replacement_span,
      .                                       "you might have meant to write a regular comment",
      .                                       String::new(),
      .                                       rustc_errors::Applicability::MachineApplicable,
      .                                   );
      .                               }
      .                               err.emit();
      .                           }
    144 ( 0.00%)                  self.bump();
      .                           just_parsed_doc_comment = true;
      .                           // Always make an outer attribute - this allows us to recover from a misplaced
      .                           // inner attribute.
  1,728 ( 0.00%)                  Some(attr::mk_doc_comment(
      .                               comment_kind,
      .                               ast::AttrStyle::Outer,
      .                               data,
     72 ( 0.00%)                      self.prev_token.span,
      .                           ))
      .                       } else {
      .                           None
      .                       };
      .           
    228 ( 0.00%)              if let Some(attr) = attr {
  2,052 ( 0.00%)                  attrs.push(attr);
      .                       } else {
      .                           break;
      .                       }
      .                   }
207,144 ( 0.02%)          Ok(AttrWrapper::new(attrs.into(), start_pos))
236,736 ( 0.02%)      }
      .           
      .               /// Matches `attribute = # ! [ meta_item ]`.
      .               /// `inner_parse_policy` prescribes how to handle inner attributes.
      .               // Public for rustfmt usage.
    420 ( 0.00%)      pub fn parse_attribute(
      .                   &mut self,
      .                   inner_parse_policy: InnerAttrPolicy<'_>,
      .               ) -> PResult<'a, ast::Attribute> {
      .                   debug!(
      .                       "parse_attribute: inner_parse_policy={:?} self.token={:?}",
      .                       inner_parse_policy, self.token
      .                   );
    210 ( 0.00%)          let lo = self.token.span;
      .                   // Attributes can't have attributes of their own [Editor's note: not with that attitude]
      .                   self.collect_tokens_no_attrs(|this| {
      .                       if this.eat(&token::Pound) {
      .                           let style = if this.eat(&token::Not) {
      .                               ast::AttrStyle::Inner
      .                           } else {
      .                               ast::AttrStyle::Outer
      .                           };
      .           
    126 ( 0.00%)                  this.expect(&token::OpenDelim(token::Bracket))?;
    168 ( 0.00%)                  let item = this.parse_attr_item(false)?;
    126 ( 0.00%)                  this.expect(&token::CloseDelim(token::Bracket))?;
    126 ( 0.00%)                  let attr_sp = lo.to(this.prev_token.span);
      .           
      .                           // Emit error if inner attribute is encountered and forbidden.
     84 ( 0.00%)                  if style == ast::AttrStyle::Inner {
      .                               this.error_on_forbidden_inner_attr(attr_sp, inner_parse_policy);
      .                           }
      .           
  1,386 ( 0.00%)                  Ok(attr::mk_attr_from_item(item, None, style, attr_sp))
      .                       } else {
      .                           let token_str = pprust::token_to_string(&this.token);
      .                           let msg = &format!("expected `#`, found `{}`", token_str);
      .                           Err(this.struct_span_err(this.token.span, msg))
      .                       }
      .                   })
    378 ( 0.00%)      }
      .           
      .               fn annotate_following_item_if_applicable(
      .                   &self,
      .                   err: &mut DiagnosticBuilder<'_>,
      .                   span: Span,
      .                   attr_type: OuterAttributeType,
      .               ) -> Option<Span> {
      .                   let mut snapshot = self.clone();
-- line 154 ----------------------------------------
-- line 248 ----------------------------------------
      .               /// The tokens must be either a delimited token stream, or empty token stream,
      .               /// or the "legacy" key-value form.
      .               ///     PATH `(` TOKEN_STREAM `)`
      .               ///     PATH `[` TOKEN_STREAM `]`
      .               ///     PATH `{` TOKEN_STREAM `}`
      .               ///     PATH
      .               ///     PATH `=` UNSUFFIXED_LIT
      .               /// The delimiters or `=` are still put into the resulting token stream.
    420 ( 0.00%)      pub fn parse_attr_item(&mut self, capture_tokens: bool) -> PResult<'a, ast::AttrItem> {
     84 ( 0.00%)          let item = match self.token.kind {
      .                       token::Interpolated(ref nt) => match **nt {
      .                           Nonterminal::NtMeta(ref item) => Some(item.clone().into_inner()),
      .                           _ => None,
      .                       },
      .                       _ => None,
      .                   };
    504 ( 0.00%)          Ok(if let Some(item) = item {
      .                       self.bump();
      .                       item
      .                   } else {
    252 ( 0.00%)              let do_parse = |this: &mut Self| {
     84 ( 0.00%)                  let path = this.parse_path(PathStyle::Mod)?;
      .                           let args = this.parse_attr_args()?;
    378 ( 0.00%)                  Ok(ast::AttrItem { path, args, tokens: None })
    168 ( 0.00%)              };
      .                       // Attr items don't have attributes
    168 ( 0.00%)              if capture_tokens { self.collect_tokens_no_attrs(do_parse) } else { do_parse(self) }?
      .                   })
    630 ( 0.00%)      }
      .           
      .               /// Parses attributes that appear after the opening of an item. These should
      .               /// be preceded by an exclamation mark, but we accept and warn about one
      .               /// terminated by a semicolon.
      .               ///
      .               /// Matches `inner_attrs*`.
    392 ( 0.00%)      crate fn parse_inner_attributes(&mut self) -> PResult<'a, Vec<ast::Attribute>> {
      .                   let mut attrs: Vec<ast::Attribute> = vec![];
      .                   loop {
     67 ( 0.00%)              let start_pos: u32 = self.token_cursor.num_next_calls.try_into().unwrap();
      .                       // Only try to parse if it is an inner attribute (has `!`).
    337 ( 0.00%)              let attr = if self.check(&token::Pound) && self.look_ahead(1, |t| t == &token::Not) {
      .                           Some(self.parse_attribute(InnerAttrPolicy::Permitted)?)
    134 ( 0.00%)              } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {
     19 ( 0.00%)                  if attr_style == ast::AttrStyle::Inner {
     36 ( 0.00%)                      self.bump();
    450 ( 0.00%)                      Some(attr::mk_doc_comment(comment_kind, attr_style, data, self.prev_token.span))
      .                           } else {
      .                               None
      .                           }
      .                       } else {
      .                           None
      .                       };
    378 ( 0.00%)              if let Some(attr) = attr {
     18 ( 0.00%)                  let end_pos: u32 = self.token_cursor.num_next_calls.try_into().unwrap();
      .                           // If we are currently capturing tokens, mark the location of this inner attribute.
      .                           // If capturing ends up creating a `LazyTokenStream`, we will include
      .                           // this replace range with it, removing the inner attribute from the final
      .                           // `AttrAnnotatedTokenStream`. Inner attributes are stored in the parsed AST note.
      .                           // During macro expansion, they are selectively inserted back into the
      .                           // token stream (the first inner attribute is remoevd each time we invoke the
      .                           // corresponding macro).
      .                           let range = start_pos..end_pos;
     54 ( 0.00%)                  if let Capturing::Yes = self.capture_state.capturing {
      .                               self.capture_state.inner_attr_ranges.insert(attr.id, (range, vec![]));
      .                           }
    288 ( 0.00%)                  attrs.push(attr);
      .                       } else {
      .                           break;
      .                       }
      .                   }
    294 ( 0.00%)          Ok(attrs)
    441 ( 0.00%)      }
      .           
      7 ( 0.00%)      crate fn parse_unsuffixed_lit(&mut self) -> PResult<'a, ast::Lit> {
      1 ( 0.00%)          let lit = self.parse_lit()?;
      .                   debug!("checking if {:?} is unusuffixed", lit);
      .           
      .                   if !lit.kind.is_unsuffixed() {
      .                       self.struct_span_err(lit.span, "suffixed literals are not allowed in attributes")
      .                           .help(
      .                               "instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), \
      .                               use an unsuffixed version (`1`, `1.0`, etc.)",
      .                           )
      .                           .emit();
      .                   }
      .           
      .                   Ok(lit)
      6 ( 0.00%)      }
      .           
      .               /// Parses `cfg_attr(pred, attr_item_list)` where `attr_item_list` is comma-delimited.
      .               pub fn parse_cfg_attr(&mut self) -> PResult<'a, (ast::MetaItem, Vec<(ast::AttrItem, Span)>)> {
      .                   let cfg_predicate = self.parse_meta_item()?;
      .                   self.expect(&token::Comma)?;
      .           
      .                   // Presumably, the majority of the time there will only be one attr.
      .                   let mut expanded_attrs = Vec::with_capacity(1);
-- line 343 ----------------------------------------
-- line 349 ----------------------------------------
      .                           break;
      .                       }
      .                   }
      .           
      .                   Ok((cfg_predicate, expanded_attrs))
      .               }
      .           
      .               /// Matches `COMMASEP(meta_item_inner)`.
      9 ( 0.00%)      crate fn parse_meta_seq_top(&mut self) -> PResult<'a, Vec<ast::NestedMetaItem>> {
      .                   // Presumably, the majority of the time there will only be one attr.
      .                   let mut nmis = Vec::with_capacity(1);
      5 ( 0.00%)          while self.token.kind != token::Eof {
      4 ( 0.00%)              nmis.push(self.parse_meta_item_inner()?);
      .                       if !self.eat(&token::Comma) {
      .                           break;
      .                       }
      .                   }
      8 ( 0.00%)          Ok(nmis)
      8 ( 0.00%)      }
      .           
      .               /// Matches the following grammar (per RFC 1559).
      .               ///
      .               ///     meta_item : PATH ( '=' UNSUFFIXED_LIT | '(' meta_item_inner? ')' )? ;
      .               ///     meta_item_inner : (meta_item | UNSUFFIXED_LIT) (',' meta_item_inner)? ;
      9 ( 0.00%)      pub fn parse_meta_item(&mut self) -> PResult<'a, ast::MetaItem> {
      2 ( 0.00%)          let nt_meta = match self.token.kind {
      .                       token::Interpolated(ref nt) => match **nt {
      .                           token::NtMeta(ref e) => Some(e.clone()),
      .                           _ => None,
      .                       },
      .                       _ => None,
      .                   };
      .           
      .                   if let Some(item) = nt_meta {
-- line 382 ----------------------------------------
-- line 384 ----------------------------------------
      .                           Some(meta) => {
      .                               self.bump();
      .                               Ok(meta)
      .                           }
      .                           None => self.unexpected(),
      .                       };
      .                   }
      .           
      2 ( 0.00%)          let lo = self.token.span;
      1 ( 0.00%)          let path = self.parse_path(PathStyle::Mod)?;
      2 ( 0.00%)          let kind = self.parse_meta_item_kind()?;
      2 ( 0.00%)          let span = lo.to(self.prev_token.span);
     28 ( 0.00%)          Ok(ast::MetaItem { path, kind, span })
      9 ( 0.00%)      }
      .           
      .               crate fn parse_meta_item_kind(&mut self) -> PResult<'a, ast::MetaItemKind> {
      6 ( 0.00%)          Ok(if self.eat(&token::Eq) {
      .                       ast::MetaItemKind::NameValue(self.parse_unsuffixed_lit()?)
      5 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Paren)) {
      .                       // Matches `meta_seq = ( COMMASEP(meta_item_inner) )`.
      .                       let (list, _) = self.parse_paren_comma_seq(|p| p.parse_meta_item_inner())?;
      .                       ast::MetaItemKind::List(list)
      .                   } else {
      .                       ast::MetaItemKind::Word
      .                   })
      .               }
      .           
      .               /// Matches `meta_item_inner : (meta_item | UNSUFFIXED_LIT) ;`.
      9 ( 0.00%)      fn parse_meta_item_inner(&mut self) -> PResult<'a, ast::NestedMetaItem> {
      3 ( 0.00%)          match self.parse_unsuffixed_lit() {
      .                       Ok(lit) => return Ok(ast::NestedMetaItem::Literal(lit)),
      4 ( 0.00%)              Err(ref mut err) => err.cancel(),
      2 ( 0.00%)          }
      .           
      4 ( 0.00%)          match self.parse_meta_item() {
     15 ( 0.00%)              Ok(mi) => return Ok(ast::NestedMetaItem::MetaItem(mi)),
      .                       Err(ref mut err) => err.cancel(),
      .                   }
      .           
      .                   let found = pprust::token_to_string(&self.token);
      .                   let msg = format!("expected unsuffixed literal or identifier, found `{}`", found);
      .                   Err(self.struct_span_err(self.token.span, &msg))
      7 ( 0.00%)      }
      .           }
      .           
      .           pub fn maybe_needs_tokens(attrs: &[ast::Attribute]) -> bool {
      .               // One of the attributes may either itself be a macro,
      .               // or expand to macro attributes (`cfg_attr`).
      .               attrs.iter().any(|attr| {
  1,682 ( 0.00%)          if attr.is_doc_comment() {
      .                       return false;
      .                   }
    168 ( 0.00%)          attr.ident().map_or(true, |ident| {
    168 ( 0.00%)              ident.name == sym::cfg_attr || !rustc_feature::is_builtin_attr_name(ident.name)
      .                   })
      .               })
      .           }

    302 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/attr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/late.rs
--------------------------------------------------------------------------------
Ir               

-- line 29 ----------------------------------------
      .           
      .           use std::any::Any;
      .           use std::cell::Cell;
      .           use std::slice;
      .           use tracing::debug;
      .           
      .           /// Extract the `LintStore` from the query context.
      .           /// This function exists because we've erased `LintStore` as `dyn Any` in the context.
      2 ( 0.00%)  crate fn unerased_lint_store(tcx: TyCtxt<'_>) -> &LintStore {
      7 ( 0.00%)      let store: &dyn Any = &*tcx.lint_store;
      .               store.downcast_ref().unwrap()
      6 ( 0.00%)  }
      .           
      .           macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({
      .               $cx.pass.$f(&$cx.context, $($args),*);
      .           }) }
      .           
      .           struct LateContextAndPass<'tcx, T: LateLintPass<'tcx>> {
      .               context: LateContext<'tcx>,
      .               pass: T,
-- line 48 ----------------------------------------
-- line 51 ----------------------------------------
      .           impl<'tcx, T: LateLintPass<'tcx>> LateContextAndPass<'tcx, T> {
      .               /// Merge the lints specified by any lint attributes into the
      .               /// current lint context, call the provided function, then reset the
      .               /// lints in effect to their previous state.
      .               fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)
      .               where
      .                   F: FnOnce(&mut Self),
      .               {
445,164 ( 0.05%)          let attrs = self.context.tcx.hir().attrs(id);
  2,739 ( 0.00%)          let prev = self.context.last_node_with_lint_attrs;
206,834 ( 0.02%)          self.context.last_node_with_lint_attrs = id;
      .                   self.enter_attrs(attrs);
      .                   f(self);
      .                   self.exit_attrs(attrs);
236,483 ( 0.02%)          self.context.last_node_with_lint_attrs = prev;
      .               }
      .           
      .               fn with_param_env<F>(&mut self, id: hir::HirId, f: F)
      .               where
      .                   F: FnOnce(&mut Self),
      .               {
    194 ( 0.00%)          let old_param_env = self.context.param_env;
    228 ( 0.00%)          self.context.param_env =
    679 ( 0.00%)              self.context.tcx.param_env(self.context.tcx.hir().local_def_id(id));
      .                   f(self);
    291 ( 0.00%)          self.context.param_env = old_param_env;
      .               }
      .           
      .               fn process_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {
     16 ( 0.00%)          lint_callback!(self, check_mod, m, s, n);
      .                   hir_visit::walk_mod(self, m, n);
     21 ( 0.00%)          lint_callback!(self, check_mod_post, m, s, n);
      .               }
      .           
      .               fn enter_attrs(&mut self, attrs: &'tcx [ast::Attribute]) {
      .                   debug!("late context: enter_attrs({:?})", attrs);
149,442 ( 0.02%)          lint_callback!(self, enter_lint_attrs, attrs);
      .               }
      .           
      .               fn exit_attrs(&mut self, attrs: &'tcx [ast::Attribute]) {
      .                   debug!("late context: exit_attrs({:?})", attrs);
208,074 ( 0.02%)          lint_callback!(self, exit_lint_attrs, attrs);
      .               }
      .           }
      .           
      .           impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPass<'tcx, T> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// Because lints are scoped lexically, we want to walk nested
      .               /// items in the context of the outer item, so enable
      .               /// deep-walking.
      .               fn nested_visit_map(&mut self) -> Self::Map {
      .                   self.context.tcx.hir()
      .               }
      .           
    864 ( 0.00%)      fn visit_nested_body(&mut self, body_id: hir::BodyId) {
      .                   let old_enclosing_body = self.context.enclosing_body.replace(body_id);
    128 ( 0.00%)          let old_cached_typeck_results = self.context.cached_typeck_results.get();
      .           
      .                   // HACK(eddyb) avoid trashing `cached_typeck_results` when we're
      .                   // nested in `visit_fn`, which may have already resulted in them
      .                   // being queried.
    300 ( 0.00%)          if old_enclosing_body != Some(body_id) {
      .                       self.context.cached_typeck_results.set(None);
      .                   }
      .           
    932 ( 0.00%)          let body = self.context.tcx.hir().body(body_id);
      .                   self.visit_body(body);
    292 ( 0.00%)          self.context.enclosing_body = old_enclosing_body;
      .           
      .                   // See HACK comment above.
    300 ( 0.00%)          if old_enclosing_body != Some(body_id) {
      .                       self.context.cached_typeck_results.set(old_cached_typeck_results);
      .                   }
    800 ( 0.00%)      }
      .           
    333 ( 0.00%)      fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {
    148 ( 0.00%)          self.with_lint_attrs(param.hir_id, |cx| {
    148 ( 0.00%)              lint_callback!(cx, check_param, param);
      .                       hir_visit::walk_param(cx, param);
      .                   });
    296 ( 0.00%)      }
      .           
      .               fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {
    320 ( 0.00%)          lint_callback!(self, check_body, body);
    276 ( 0.00%)          hir_visit::walk_body(self, body);
    320 ( 0.00%)          lint_callback!(self, check_body_post, body);
      .               }
      .           
      .               fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {
      .                   let generics = self.context.generics.take();
    204 ( 0.00%)          self.context.generics = it.kind.generics();
      .                   let old_cached_typeck_results = self.context.cached_typeck_results.take();
      .                   let old_enclosing_body = self.context.enclosing_body.take();
     68 ( 0.00%)          self.with_lint_attrs(it.hir_id(), |cx| {
    204 ( 0.00%)              cx.with_param_env(it.hir_id(), |cx| {
    272 ( 0.00%)                  lint_callback!(cx, check_item, it);
    238 ( 0.00%)                  hir_visit::walk_item(cx, it);
    136 ( 0.00%)                  lint_callback!(cx, check_item_post, it);
      .                       });
      .                   });
    170 ( 0.00%)          self.context.enclosing_body = old_enclosing_body;
      .                   self.context.cached_typeck_results.set(old_cached_typeck_results);
     68 ( 0.00%)          self.context.generics = generics;
      .               }
      .           
      .               fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {
      .                   self.with_lint_attrs(it.hir_id(), |cx| {
      .                       cx.with_param_env(it.hir_id(), |cx| {
      .                           lint_callback!(cx, check_foreign_item, it);
      .                           hir_visit::walk_foreign_item(cx, it);
      .                           lint_callback!(cx, check_foreign_item_post, it);
      .                       });
      .                   })
      .               }
      .           
      .               fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {
    263 ( 0.00%)          lint_callback!(self, check_pat, p);
    300 ( 0.00%)          hir_visit::walk_pat(self, p);
      .               }
      .           
      .               fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
117,972 ( 0.01%)          self.with_lint_attrs(e.hir_id, |cx| {
235,866 ( 0.02%)              lint_callback!(cx, check_expr, e);
177,131 ( 0.02%)              hir_visit::walk_expr(cx, e);
117,936 ( 0.01%)              lint_callback!(cx, check_expr_post, e);
      .                   })
      .               }
      .           
      .               fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {
      .                   // See `EarlyContextAndPass::visit_stmt` for an explanation
      .                   // of why we call `walk_stmt` outside of `with_lint_attrs`
      .                   self.with_lint_attrs(s.hir_id, |cx| {
      .                       lint_callback!(cx, check_stmt, s);
      .                   });
      .                   hir_visit::walk_stmt(self, s);
      .               }
      .           
    396 ( 0.00%)      fn visit_fn(
      .                   &mut self,
      .                   fk: hir_visit::FnKind<'tcx>,
      .                   decl: &'tcx hir::FnDecl<'tcx>,
      .                   body_id: hir::BodyId,
      .                   span: Span,
      .                   id: hir::HirId,
      .               ) {
      .                   // Wrap in typeck results here, not just in visit_nested_body,
      .                   // in order for `check_fn` to be able to use them.
      .                   let old_enclosing_body = self.context.enclosing_body.replace(body_id);
      .                   let old_cached_typeck_results = self.context.cached_typeck_results.take();
    540 ( 0.00%)          let body = self.context.tcx.hir().body(body_id);
    869 ( 0.00%)          lint_callback!(self, check_fn, fk, decl, body, span, id);
    580 ( 0.00%)          hir_visit::walk_fn(self, fk, decl, body_id, span, id);
    652 ( 0.00%)          lint_callback!(self, check_fn_post, fk, decl, body, span, id);
    144 ( 0.00%)          self.context.enclosing_body = old_enclosing_body;
      .                   self.context.cached_typeck_results.set(old_cached_typeck_results);
    288 ( 0.00%)      }
      .           
      .               fn visit_variant_data(
      .                   &mut self,
      .                   s: &'tcx hir::VariantData<'tcx>,
      .                   _: Symbol,
      .                   _: &'tcx hir::Generics<'tcx>,
      .                   _: hir::HirId,
      .                   _: Span,
-- line 215 ----------------------------------------
-- line 235 ----------------------------------------
      .                   self.with_lint_attrs(v.id, |cx| {
      .                       lint_callback!(cx, check_variant, v);
      .                       hir_visit::walk_variant(cx, v, g, item_id);
      .                       lint_callback!(cx, check_variant_post, v);
      .                   })
      .               }
      .           
      .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
    632 ( 0.00%)          lint_callback!(self, check_ty, t);
    865 ( 0.00%)          hir_visit::walk_ty(self, t);
      .               }
      .           
      .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
      .                   lint_callback!(self, check_infer, inf);
      .                   hir_visit::walk_inf(self, inf);
      .               }
      .           
      .               fn visit_name(&mut self, sp: Span, name: Symbol) {
  1,976 ( 0.00%)          lint_callback!(self, check_name, sp, name);
      .               }
      .           
      .               fn visit_mod(&mut self, m: &'tcx hir::Mod<'tcx>, s: Span, n: hir::HirId) {
      6 ( 0.00%)          if !self.context.only_module {
      .                       self.process_mod(m, s, n);
      .                   }
      .               }
      .           
      .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      .                   self.with_lint_attrs(l.hir_id, |cx| {
      .                       lint_callback!(cx, check_local, l);
      .                       hir_visit::walk_local(cx, l);
-- line 265 ----------------------------------------
-- line 268 ----------------------------------------
      .           
      .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
      .                   lint_callback!(self, check_block, b);
      .                   hir_visit::walk_block(self, b);
      .                   lint_callback!(self, check_block_post, b);
      .               }
      .           
      .               fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {
     52 ( 0.00%)          lint_callback!(self, check_arm, a);
    104 ( 0.00%)          hir_visit::walk_arm(self, a);
      .               }
      .           
      .               fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {
      .                   lint_callback!(self, check_generic_param, p);
      .                   hir_visit::walk_generic_param(self, p);
      .               }
      .           
      .               fn visit_generics(&mut self, g: &'tcx hir::Generics<'tcx>) {
    329 ( 0.00%)          lint_callback!(self, check_generics, g);
    126 ( 0.00%)          hir_visit::walk_generics(self, g);
      .               }
      .           
      .               fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate<'tcx>) {
      .                   lint_callback!(self, check_where_predicate, p);
      .                   hir_visit::walk_where_predicate(self, p);
      .               }
      .           
      .               fn visit_poly_trait_ref(
      .                   &mut self,
      .                   t: &'tcx hir::PolyTraitRef<'tcx>,
      .                   m: hir::TraitBoundModifier,
      .               ) {
     12 ( 0.00%)          lint_callback!(self, check_poly_trait_ref, t, m);
      .                   hir_visit::walk_poly_trait_ref(self, t, m);
      .               }
      .           
      .               fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {
      .                   let generics = self.context.generics.take();
     70 ( 0.00%)          self.context.generics = Some(&trait_item.generics);
     70 ( 0.00%)          self.with_lint_attrs(trait_item.hir_id(), |cx| {
    210 ( 0.00%)              cx.with_param_env(trait_item.hir_id(), |cx| {
    175 ( 0.00%)                  lint_callback!(cx, check_trait_item, trait_item);
    245 ( 0.00%)                  hir_visit::walk_trait_item(cx, trait_item);
    175 ( 0.00%)                  lint_callback!(cx, check_trait_item_post, trait_item);
      .                       });
      .                   });
     70 ( 0.00%)          self.context.generics = generics;
      .               }
      .           
      .               fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {
      .                   let generics = self.context.generics.take();
    112 ( 0.00%)          self.context.generics = Some(&impl_item.generics);
     56 ( 0.00%)          self.with_lint_attrs(impl_item.hir_id(), |cx| {
    168 ( 0.00%)              cx.with_param_env(impl_item.hir_id(), |cx| {
    140 ( 0.00%)                  lint_callback!(cx, check_impl_item, impl_item);
    196 ( 0.00%)                  hir_visit::walk_impl_item(cx, impl_item);
    140 ( 0.00%)                  lint_callback!(cx, check_impl_item_post, impl_item);
      .                       });
      .                   });
     56 ( 0.00%)          self.context.generics = generics;
      .               }
      .           
      .               fn visit_lifetime(&mut self, lt: &'tcx hir::Lifetime) {
     87 ( 0.00%)          lint_callback!(self, check_lifetime, lt);
      .                   hir_visit::walk_lifetime(self, lt);
      .               }
      .           
     36 ( 0.00%)      fn visit_path(&mut self, p: &'tcx hir::Path<'tcx>, id: hir::HirId) {
  1,943 ( 0.00%)          lint_callback!(self, check_path, p, id);
      .                   hir_visit::walk_path(self, p);
     32 ( 0.00%)      }
      .           
      .               fn visit_attribute(&mut self, hir_id: hir::HirId, attr: &'tcx ast::Attribute) {
      .                   self.with_lint_attrs(hir_id, |cx| {
    508 ( 0.00%)              lint_callback!(cx, check_attribute, attr);
      .                   })
      .               }
      .           }
      .           
      .           struct LateLintPassObjects<'a> {
      .               lints: &'a mut [LateLintPassObject],
      .           }
      .           
-- line 350 ----------------------------------------
-- line 389 ----------------------------------------
      .                   param_env: ty::ParamEnv::empty(),
      .                   access_levels,
      .                   lint_store: unerased_lint_store(tcx),
      .                   last_node_with_lint_attrs: tcx.hir().local_def_id_to_hir_id(module_def_id),
      .                   generics: None,
      .                   only_module: true,
      .               };
      .           
     36 ( 0.00%)      let mut cx = LateContextAndPass { context, pass };
      .           
     22 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
      .               cx.process_mod(module, span, hir_id);
      .           
      .               // Visit the crate attributes
      6 ( 0.00%)      if hir_id == hir::CRATE_HIR_ID {
      5 ( 0.00%)          for attr in tcx.hir().attrs(hir::CRATE_HIR_ID).iter() {
      .                       cx.visit_attribute(hir_id, attr)
      .                   }
      .               }
      .           }
      .           
     14 ( 0.00%)  pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx>>(
      .               tcx: TyCtxt<'tcx>,
      .               module_def_id: LocalDefId,
      .               builtin_lints: T,
      .           ) {
      6 ( 0.00%)      if tcx.sess.opts.debugging_opts.no_interleave_lints {
      .                   // These passes runs in late_lint_crate with -Z no_interleave_lints
      .                   return;
      .               }
      .           
      .               late_lint_mod_pass(tcx, module_def_id, builtin_lints);
      .           
      .               let mut passes: Vec<_> =
      .                   unerased_lint_store(tcx).late_module_passes.iter().map(|pass| (pass)()).collect();
      .           
      2 ( 0.00%)      if !passes.is_empty() {
      .                   late_lint_mod_pass(tcx, module_def_id, LateLintPassObjects { lints: &mut passes[..] });
      .               }
     16 ( 0.00%)  }
      .           
      .           fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {
      .               let access_levels = &tcx.privacy_access_levels(());
      .           
      .               let context = LateContext {
      .                   tcx,
      .                   enclosing_body: None,
      .                   cached_typeck_results: Cell::new(None),
      .                   param_env: ty::ParamEnv::empty(),
      .                   access_levels,
      2 ( 0.00%)          lint_store: unerased_lint_store(tcx),
      .                   last_node_with_lint_attrs: hir::CRATE_HIR_ID,
      .                   generics: None,
      .                   only_module: false,
      .               };
      .           
     16 ( 0.00%)      let mut cx = LateContextAndPass { context, pass };
      .           
      .               // Visit the whole crate.
      .               cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {
      .                   // since the root module isn't visited as an item (because it isn't an
      .                   // item), warn for it here.
      2 ( 0.00%)          lint_callback!(cx, check_crate,);
      1 ( 0.00%)          tcx.hir().walk_toplevel_module(cx);
      1 ( 0.00%)          tcx.hir().walk_attributes(cx);
      2 ( 0.00%)          lint_callback!(cx, check_crate_post,);
      .               })
      .           }
      .           
     10 ( 0.00%)  fn late_lint_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, builtin_lints: T) {
      1 ( 0.00%)      let mut passes = unerased_lint_store(tcx).late_passes.iter().map(|p| (p)()).collect::<Vec<_>>();
      .           
      6 ( 0.00%)      if !tcx.sess.opts.debugging_opts.no_interleave_lints {
      1 ( 0.00%)          if !passes.is_empty() {
      .                       late_lint_pass_crate(tcx, LateLintPassObjects { lints: &mut passes[..] });
      .                   }
      .           
      4 ( 0.00%)          late_lint_pass_crate(tcx, builtin_lints);
      .               } else {
      .                   for pass in &mut passes {
      .                       tcx.sess.prof.extra_verbose_generic_activity("run_late_lint", pass.name()).run(|| {
      .                           late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });
      .                       });
      .                   }
      .           
      .                   let mut passes: Vec<_> =
-- line 474 ----------------------------------------
-- line 477 ----------------------------------------
      .                   for pass in &mut passes {
      .                       tcx.sess.prof.extra_verbose_generic_activity("run_late_module_lint", pass.name()).run(
      .                           || {
      .                               late_lint_pass_crate(tcx, LateLintPassObjects { lints: slice::from_mut(pass) });
      .                           },
      .                       );
      .                   }
      .               }
      9 ( 0.00%)  }
      .           
      .           /// Performs lint checking on a crate.
      .           pub fn check_crate<'tcx, T: LateLintPass<'tcx>>(
      .               tcx: TyCtxt<'tcx>,
      .               builtin_lints: impl FnOnce() -> T + Send,
      .           ) {
      .               join(
      .                   || {
      5 ( 0.00%)              tcx.sess.time("crate_lints", || {
      .                           // Run whole crate non-incremental lints
      4 ( 0.00%)                  late_lint_crate(tcx, builtin_lints());
      .                       });
      .                   },
      .                   || {
      5 ( 0.00%)              tcx.sess.time("module_lints", || {
      .                           // Run per-module lints
      1 ( 0.00%)                  tcx.hir().par_for_each_module(|module| tcx.ensure().lint_mod(module));
      .                       });
      .                   },
      .               );
      .           }

    177 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/late.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs
--------------------------------------------------------------------------------
Ir                 

-- line 13 ----------------------------------------
        .           ///
        .           /// Purpose: avoid mixing indexes for different bitvector domains.
        .           pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {
        .               fn new(idx: usize) -> Self;
        .           
        .               fn index(self) -> usize;
        .           
        .               fn increment_by(&mut self, amount: usize) {
   30,197 ( 0.00%)          *self = self.plus(amount);
        .               }
        .           
        .               fn plus(self, amount: usize) -> Self {
   30,711 ( 0.00%)          Self::new(self.index() + amount)
        .               }
        .           }
        .           
        .           impl Idx for usize {
        .               #[inline]
        .               fn new(idx: usize) -> Self {
        .                   idx
        .               }
-- line 33 ----------------------------------------
-- line 35 ----------------------------------------
        .               fn index(self) -> usize {
        .                   self
        .               }
        .           }
        .           
        .           impl Idx for u32 {
        .               #[inline]
        .               fn new(idx: usize) -> Self {
      794 ( 0.00%)          assert!(idx <= u32::MAX as usize);
        .                   idx as u32
        .               }
        .               #[inline]
        .               fn index(self) -> usize {
      138 ( 0.00%)          self as usize
        .               }
        .           }
        .           
        .           /// Creates a struct type `S` that can be used as an index with
        .           /// `IndexVec` and so on.
        .           ///
        .           /// There are two ways of interacting with these indices:
        .           ///
-- line 56 ----------------------------------------
-- line 71 ----------------------------------------
        .           
        .               // Use default constants
        .               ($(#[$attrs:meta])* $v:vis struct $name:ident { .. }) => (
        .                   $crate::newtype_index!(
        .                       // Leave out derives marker so we can use its absence to ensure it comes first
        .                       @attrs        [$(#[$attrs])*]
        .                       @type         [$name]
        .                       // shave off 256 indices at the end to allow space for packing these indices into enums
   71,753 ( 0.01%)              @max          [0xFFFF_FF00]
        .                       @vis          [$v]
        .                       @debug_format ["{}"]);
        .               );
        .           
        .               // Define any constants
        .               ($(#[$attrs:meta])* $v:vis struct $name:ident { $($tokens:tt)+ }) => (
        .                   $crate::newtype_index!(
        .                       // Leave out derives marker so we can use its absence to ensure it comes first
        .                       @attrs        [$(#[$attrs])*]
        .                       @type         [$name]
        .                       // shave off 256 indices at the end to allow space for packing these indices into enums
   66,790 ( 0.01%)              @max          [0xFFFF_FF00]
        .                       @vis          [$v]
        .                       @debug_format ["{}"]
        .                                     $($tokens)+);
        .               );
        .           
        .               // ---- private rules ----
        .           
        .               // Base case, user-defined constants (if any) have already been defined
-- line 99 ----------------------------------------
-- line 102 ----------------------------------------
        .                @type         [$type:ident]
        .                @max          [$max:expr]
        .                @vis          [$v:vis]
        .                @debug_format [$debug_format:tt]) => (
        .                   $(#[$attrs])*
        .                   #[derive(Copy, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]
        .                   #[rustc_layout_scalar_valid_range_end($max)]
        .                   $v struct $type {
2,934,979 ( 0.31%)              private: u32
        .                   }
        .           
        .                   impl Clone for $type {
        .                       #[inline]
        .                       fn clone(&self) -> Self {
        .                           *self
        .                       }
        .                   }
-- line 118 ----------------------------------------
-- line 126 ----------------------------------------
        .           
        .                       /// Creates a new index from a given `usize`.
        .                       ///
        .                       /// # Panics
        .                       ///
        .                       /// Will panic if `value` exceeds `MAX`.
        .                       #[inline]
        .                       $v const fn from_usize(value: usize) -> Self {
  416,582 ( 0.04%)                  assert!(value <= ($max as usize));
        .                           // SAFETY: We just checked that `value <= max`.
        .                           unsafe {
      158 ( 0.00%)                      Self::from_u32_unchecked(value as u32)
        .                           }
        .                       }
        .           
        .                       /// Creates a new index from a given `u32`.
        .                       ///
        .                       /// # Panics
        .                       ///
        .                       /// Will panic if `value` exceeds `MAX`.
        .                       #[inline]
        .                       $v const fn from_u32(value: u32) -> Self {
  138,570 ( 0.01%)                  assert!(value <= $max);
        .                           // SAFETY: We just checked that `value <= max`.
        .                           unsafe {
        .                               Self::from_u32_unchecked(value)
        .                           }
        .                       }
        .           
        .                       /// Creates a new index from a given `u32`.
        .                       ///
-- line 156 ----------------------------------------
-- line 175 ----------------------------------------
        .                       #[inline]
        .                       $v const fn as_u32(self) -> u32 {
        .                           self.private
        .                       }
        .           
        .                       /// Extracts the value of this index as a `usize`.
        .                       #[inline]
        .                       $v const fn as_usize(self) -> usize {
  289,153 ( 0.03%)                  self.as_u32() as usize
        .                       }
        .                   }
        .           
        .                   impl std::ops::Add<usize> for $type {
        .                       type Output = Self;
        .           
        .                       fn add(self, other: usize) -> Self {
       32 ( 0.00%)                  Self::from_usize(self.index() + other)
        .                       }
        .                   }
        .           
        .                   impl $crate::vec::Idx for $type {
        .                       #[inline]
        .                       fn new(value: usize) -> Self {
        .                           Self::from_usize(value)
        .                       }
-- line 199 ----------------------------------------
-- line 269 ----------------------------------------
        .                @debug_format [custom]) => ();
        .           
        .               // base case for handle_debug, no debug overrides found, so use default
        .               (@handle_debug
        .                @derives      []
        .                @type         [$type:ident]
        .                @debug_format [$debug_format:tt]) => (
        .                   impl ::std::fmt::Debug for $type {
       84 ( 0.00%)              fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
      336 ( 0.00%)                  write!(fmt, $debug_format, self.as_u32())
       84 ( 0.00%)              }
        .                   }
        .               );
        .           
        .               // Debug is requested for derive, don't generate any Debug implementation.
        .               (@handle_debug
        .                @derives      [Debug, $($derives:ident,)*]
        .                @type         [$type:ident]
        .                @debug_format [$debug_format:tt]) => ();
-- line 287 ----------------------------------------
-- line 391 ----------------------------------------
        .                       @debug_format [$debug_format]
        .                                     $($tokens)*);
        .                   $crate::newtype_index!(@serializable $type);
        .               );
        .           
        .               (@serializable $type:ident) => (
        .                   impl<D: ::rustc_serialize::Decoder> ::rustc_serialize::Decodable<D> for $type {
        .                       fn decode(d: &mut D) -> Self {
    2,323 ( 0.00%)                  Self::from_u32(d.read_u32())
        .                       }
        .                   }
        .                   impl<E: ::rustc_serialize::Encoder> ::rustc_serialize::Encodable<E> for $type {
    2,275 ( 0.00%)              fn encode(&self, e: &mut E) -> Result<(), E::Error> {
        .                           e.emit_u32(self.private)
    2,730 ( 0.00%)              }
        .                   }
        .               );
        .           
        .               // Rewrite final without comma to one that includes comma
        .               (@derives      [$($derives:ident,)*]
        .                @attrs        [$(#[$attrs:meta])*]
        .                @type         [$type:ident]
        .                @max          [$max:expr]
-- line 413 ----------------------------------------
-- line 499 ----------------------------------------
        .                       @type         [$type]
        .                       @max          [$max]
        .                       @vis          [$v]
        .                       @debug_format [$debug_format]
        .                                     $($tokens)*);
        .               );
        .           }
        .           
    3,011 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Hash)]
        .           pub struct IndexVec<I: Idx, T> {
      924 ( 0.00%)      pub raw: Vec<T>,
        .               _marker: PhantomData<fn(&I)>,
        .           }
        .           
        .           // Whether `IndexVec` is `Send` depends only on the data,
        .           // not the phantom data.
        .           unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}
        .           
        .           impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {
-- line 517 ----------------------------------------
-- line 523 ----------------------------------------
        .           impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for &IndexVec<I, T> {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   Encodable::encode(&self.raw, s)
        .               }
        .           }
        .           
        .           impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {
        .               fn decode(d: &mut D) -> Self {
      446 ( 0.00%)          IndexVec { raw: Decodable::decode(d), _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   fmt::Debug::fmt(&self.raw, fmt)
        .               }
        .           }
        .           
        .           impl<I: Idx, T> IndexVec<I, T> {
        .               #[inline]
        .               pub fn new() -> Self {
    1,679 ( 0.00%)          IndexVec { raw: Vec::new(), _marker: PhantomData }
        .               }
        .           
        .               #[inline]
        .               pub fn from_raw(raw: Vec<T>) -> Self {
    3,084 ( 0.00%)          IndexVec { raw, _marker: PhantomData }
        .               }
        .           
        .               #[inline]
        .               pub fn with_capacity(capacity: usize) -> Self {
      949 ( 0.00%)          IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }
        .               }
        .           
        .               #[inline]
        .               pub fn from_elem<S>(elem: T, universe: &IndexVec<I, S>) -> Self
        .               where
        .                   T: Clone,
        .               {
    5,045 ( 0.00%)          IndexVec { raw: vec![elem; universe.len()], _marker: PhantomData }
        .               }
        .           
        .               #[inline]
        .               pub fn from_elem_n(elem: T, n: usize) -> Self
        .               where
        .                   T: Clone,
        .               {
    9,307 ( 0.00%)          IndexVec { raw: vec![elem; n], _marker: PhantomData }
        .               }
        .           
        .               /// Create an `IndexVec` with `n` elements, where the value of each
        .               /// element is the result of `func(i)`. (The underlying vector will
        .               /// be allocated only once, with a capacity of at least `n`.)
        .               #[inline]
        .               pub fn from_fn_n(func: impl FnMut(I) -> T, n: usize) -> Self {
        .                   let indices = (0..n).map(I::new);
        .                   Self::from_raw(indices.map(func).collect())
        .               }
        .           
        .               #[inline]
        .               pub fn push(&mut self, d: T) -> I {
        .                   let idx = I::new(self.len());
  906,080 ( 0.10%)          self.raw.push(d);
        .                   idx
        .               }
        .           
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<T> {
        .                   self.raw.pop()
        .               }
        .           
        .               #[inline]
        .               pub fn len(&self) -> usize {
  179,718 ( 0.02%)          self.raw.len()
        .               }
        .           
        .               /// Gives the next index that will be assigned when `push` is
        .               /// called.
        .               #[inline]
        .               pub fn next_index(&self) -> I {
        .                   I::new(self.len())
        .               }
-- line 604 ----------------------------------------
-- line 612 ----------------------------------------
        .               pub fn into_iter(self) -> vec::IntoIter<T> {
        .                   self.raw.into_iter()
        .               }
        .           
        .               #[inline]
        .               pub fn into_iter_enumerated(
        .                   self,
        .               ) -> impl DoubleEndedIterator<Item = (I, T)> + ExactSizeIterator {
   33,150 ( 0.00%)          self.raw.into_iter().enumerate().map(|(n, t)| (I::new(n), t))
        .               }
        .           
        .               #[inline]
        .               pub fn iter(&self) -> slice::Iter<'_, T> {
        .                   self.raw.iter()
        .               }
        .           
        .               #[inline]
-- line 628 ----------------------------------------
-- line 692 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn get_mut(&mut self, index: I) -> Option<&mut T> {
        .                   self.raw.get_mut(index.index())
        .               }
        .           
        .               /// Returns mutable references to two distinct elements, a and b. Panics if a == b.
        .               #[inline]
      351 ( 0.00%)      pub fn pick2_mut(&mut self, a: I, b: I) -> (&mut T, &mut T) {
        .                   let (ai, bi) = (a.index(), b.index());
      702 ( 0.00%)          assert!(ai != bi);
        .           
      351 ( 0.00%)          if ai < bi {
        .                       let (c1, c2) = self.raw.split_at_mut(bi);
    1,468 ( 0.00%)              (&mut c1[ai], &mut c2[0])
        .                   } else {
        .                       let (c2, c1) = self.pick2_mut(b, a);
        .                       (c1, c2)
        .                   }
    1,053 ( 0.00%)      }
        .           
        .               /// Returns mutable references to three distinct elements or panics otherwise.
        .               #[inline]
        .               pub fn pick3_mut(&mut self, a: I, b: I, c: I) -> (&mut T, &mut T, &mut T) {
        .                   let (ai, bi, ci) = (a.index(), b.index(), c.index());
        .                   assert!(ai != bi && bi != ci && ci != ai);
        .                   let len = self.raw.len();
        .                   assert!(ai < len && bi < len && ci < len);
-- line 719 ----------------------------------------
-- line 726 ----------------------------------------
        .               }
        .           
        .               /// Grows the index vector so that it contains an entry for
        .               /// `elem`; if that is already true, then has no
        .               /// effect. Otherwise, inserts new values as needed by invoking
        .               /// `fill_value`.
        .               #[inline]
        .               pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {
      433 ( 0.00%)          let min_new_len = elem.index() + 1;
  124,453 ( 0.01%)          if self.len() < min_new_len {
      752 ( 0.00%)              self.raw.resize_with(min_new_len, fill_value);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn resize_to_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {
        .                   let min_new_len = elem.index() + 1;
        .                   self.raw.resize_with(min_new_len, fill_value);
        .               }
-- line 744 ----------------------------------------
-- line 823 ----------------------------------------
        .           }
        .           
        .           impl<I: Idx, T> FromIterator<T> for IndexVec<I, T> {
        .               #[inline]
        .               fn from_iter<J>(iter: J) -> Self
        .               where
        .                   J: IntoIterator<Item = T>,
        .               {
    5,052 ( 0.00%)          IndexVec { raw: FromIterator::from_iter(iter), _marker: PhantomData }
        .               }
        .           }
        .           
        .           impl<I: Idx, T> IntoIterator for IndexVec<I, T> {
        .               type Item = T;
        .               type IntoIter = vec::IntoIter<T>;
        .           
        .               #[inline]
-- line 839 ----------------------------------------

  119,017 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/types.rs
--------------------------------------------------------------------------------
Ir               

-- line 448 ----------------------------------------
      .           }
      .           
      .           fn lint_literal<'tcx>(
      .               cx: &LateContext<'tcx>,
      .               type_limits: &TypeLimits,
      .               e: &'tcx hir::Expr<'tcx>,
      .               lit: &hir::Lit,
      .           ) {
350,904 ( 0.04%)      match *cx.typeck_results().node_type(e.hir_id).kind() {
      .                   ty::Int(t) => {
      .                       match lit.node {
      .                           ast::LitKind::Int(v, ast::LitIntType::Signed(_) | ast::LitIntType::Unsuffixed) => {
      .                               lint_int_literal(cx, type_limits, e, lit, t, v)
      .                           }
      .                           _ => bug!(),
      .                       };
      .                   }
-- line 464 ----------------------------------------
-- line 487 ----------------------------------------
      .                           });
      .                       }
      .                   }
      .                   _ => {}
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for TypeLimits {
265,815 ( 0.03%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx hir::Expr<'tcx>) {
206,657 ( 0.02%)          match e.kind {
      .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref expr) => {
      .                           // propagate negation, if the negation itself isn't negated
      .                           if self.negated_expr_id != Some(e.hir_id) {
      .                               self.negated_expr_id = Some(expr.hir_id);
      .                           }
      .                       }
     22 ( 0.00%)              hir::ExprKind::Binary(binop, ref l, ref r) => {
     22 ( 0.00%)                  if is_comparison(binop) && !check_limits(cx, binop, &l, &r) {
      .                               cx.struct_span_lint(UNUSED_COMPARISONS, e.span, |lint| {
      .                                   lint.build("comparison is useless due to type limits").emit()
      .                               });
      .                           }
      .                       }
 58,484 ( 0.01%)              hir::ExprKind::Lit(ref lit) => lint_literal(cx, self, e, lit),
      .                       _ => {}
      .                   };
      .           
      .                   fn is_valid<T: cmp::PartialOrd>(binop: hir::BinOp, v: T, min: T, max: T) -> bool {
      .                       match binop.node {
      .                           hir::BinOpKind::Lt => v > min && v <= max,
      .                           hir::BinOpKind::Le => v >= min && v < max,
      .                           hir::BinOpKind::Gt => v >= min && v < max,
-- line 518 ----------------------------------------
-- line 575 ----------------------------------------
      .                               };
      .                               is_valid(norm_binop, lit_val, min, max)
      .                           }
      .                           _ => true,
      .                       }
      .                   }
      .           
      .                   fn is_comparison(binop: hir::BinOp) -> bool {
     44 ( 0.00%)              matches!(
     22 ( 0.00%)                  binop.node,
      .                           hir::BinOpKind::Eq
      .                               | hir::BinOpKind::Lt
      .                               | hir::BinOpKind::Le
      .                               | hir::BinOpKind::Ne
      .                               | hir::BinOpKind::Ge
      .                               | hir::BinOpKind::Gt
      .                       )
      .                   }
236,280 ( 0.02%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `improper_ctypes` lint detects incorrect use of types in foreign
      .               /// modules.
      .               ///
      .               /// ### Example
      .               ///
-- line 601 ----------------------------------------
-- line 1268 ----------------------------------------
      .           
      .               fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {
      .                   let def_id = self.cx.tcx.hir().local_def_id(id);
      .                   let ty = self.cx.tcx.type_of(def_id);
      .                   self.check_type_for_ffi_and_report_errors(span, ty, true, false);
      .               }
      .           
      .               fn is_internal_abi(&self, abi: SpecAbi) -> bool {
     72 ( 0.00%)          matches!(
      .                       abi,
      .                       SpecAbi::Rust | SpecAbi::RustCall | SpecAbi::RustIntrinsic | SpecAbi::PlatformIntrinsic
      .                   )
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for ImproperCTypesDeclarations {
      .               fn check_foreign_item(&mut self, cx: &LateContext<'_>, it: &hir::ForeignItem<'_>) {
-- line 1284 ----------------------------------------
-- line 1306 ----------------------------------------
      .                   kind: hir::intravisit::FnKind<'tcx>,
      .                   decl: &'tcx hir::FnDecl<'_>,
      .                   _: &'tcx hir::Body<'_>,
      .                   _: Span,
      .                   hir_id: hir::HirId,
      .               ) {
      .                   use hir::intravisit::FnKind;
      .           
    178 ( 0.00%)          let abi = match kind {
      .                       FnKind::ItemFn(_, _, header, ..) => header.abi,
     35 ( 0.00%)              FnKind::Method(_, sig, ..) => sig.header.abi,
      .                       _ => return,
      .                   };
      .           
     72 ( 0.00%)          let mut vis = ImproperCTypesVisitor { cx, mode: CItemKind::Definition };
      .                   if !vis.is_internal_abi(abi) {
      .                       vis.check_foreign_fn(hir_id, decl);
      .                   }
      .               }
      .           }
      .           
      .           declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for VariantSizeDifferences {
    238 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
     68 ( 0.00%)          if let hir::ItemKind::Enum(ref enum_definition, _) = it.kind {
      .                       let t = cx.tcx.type_of(it.def_id);
      .                       let ty = cx.tcx.erase_regions(t);
      .                       let layout = match cx.layout_of(ty) {
      .                           Ok(layout) => layout,
      .                           Err(
      .                               ty::layout::LayoutError::Unknown(_)
      .                               | ty::layout::LayoutError::SizeOverflow(_)
      .                               | ty::layout::LayoutError::NormalizationFailure(_, _),
-- line 1339 ----------------------------------------
-- line 1385 ----------------------------------------
      .                                                     larger ({} bytes) than the next largest",
      .                                       largest
      .                                   ))
      .                                   .emit()
      .                               },
      .                           );
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `invalid_atomic_ordering` lint detects passing an `Ordering`
      .               /// to an atomic operation that does not support that ordering.
      .               ///
      .               /// ### Example
      .               ///
-- line 1401 ----------------------------------------
-- line 1437 ----------------------------------------
      .               INVALID_ATOMIC_ORDERING,
      .               Deny,
      .               "usage of invalid atomic ordering in atomic operations and memory fences"
      .           }
      .           
      .           declare_lint_pass!(InvalidAtomicOrdering => [INVALID_ATOMIC_ORDERING]);
      .           
      .           impl InvalidAtomicOrdering {
472,560 ( 0.05%)      fn inherent_atomic_method_call<'hir>(
      .                   cx: &LateContext<'_>,
      .                   expr: &Expr<'hir>,
      .                   recognized_names: &[Symbol], // used for fast path calculation
      .               ) -> Option<(Symbol, &'hir [Expr<'hir>])> {
      .                   const ATOMIC_TYPES: &[Symbol] = &[
      .                       sym::AtomicBool,
      .                       sym::AtomicPtr,
      .                       sym::AtomicUsize,
-- line 1453 ----------------------------------------
-- line 1459 ----------------------------------------
      .                       sym::AtomicIsize,
      .                       sym::AtomicI8,
      .                       sym::AtomicI16,
      .                       sym::AtomicI32,
      .                       sym::AtomicI64,
      .                       sym::AtomicI128,
      .                   ];
      .                   if_chain! {
118,140 ( 0.01%)              if let ExprKind::MethodCall(ref method_path, args, _) = &expr.kind;
    124 ( 0.00%)              if recognized_names.contains(&method_path.ident.name);
      .                       if let Some(m_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);
      .                       if let Some(impl_did) = cx.tcx.impl_of_method(m_def_id);
      .                       if let Some(adt) = cx.tcx.type_of(impl_did).ty_adt_def();
      .                       // skip extension traits, only lint functions from the standard library
      .                       if cx.tcx.trait_id_of_impl(impl_did).is_none();
      .           
      .                       if let Some(parent) = cx.tcx.parent(adt.did);
      .                       if cx.tcx.is_diagnostic_item(sym::atomic_mod, parent);
      .                       if ATOMIC_TYPES.contains(&cx.tcx.item_name(adt.did));
      .                       then {
      .                           return Some((method_path.ident.name, args));
      .                       }
      .                   }
 59,070 ( 0.01%)          None
472,560 ( 0.05%)      }
      .           
      .               fn matches_ordering(cx: &LateContext<'_>, did: DefId, orderings: &[Symbol]) -> bool {
      .                   let tcx = cx.tcx;
      .                   let atomic_ordering = tcx.get_diagnostic_item(sym::Ordering);
      .                   orderings.iter().any(|ordering| {
      .                       tcx.item_name(did) == *ordering && {
      .                           let parent = tcx.parent(did);
      .                           parent == atomic_ordering
-- line 1491 ----------------------------------------
-- line 1502 ----------------------------------------
      .                       None
      .                   }
      .               }
      .           
      .               fn check_atomic_load_store(cx: &LateContext<'_>, expr: &Expr<'_>) {
      .                   use rustc_hir::def::{DefKind, Res};
      .                   use rustc_hir::QPath;
      .                   if_chain! {
206,745 ( 0.02%)              if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::load, sym::store]);
      .                       if let Some((ordering_arg, invalid_ordering)) = match method {
      .                           sym::load => Some((&args[1], sym::Release)),
      .                           sym::store => Some((&args[2], sym::Acquire)),
      .                           _ => None,
      .                       };
      .           
      .                       if let ExprKind::Path(QPath::Resolved(_, path)) = ordering_arg.kind;
      .                       if let Res::Def(DefKind::Ctor(..), ctor_id) = path.res;
-- line 1518 ----------------------------------------
-- line 1531 ----------------------------------------
      .                               }
      .                           });
      .                       }
      .                   }
      .               }
      .           
      .               fn check_memory_fence(cx: &LateContext<'_>, expr: &Expr<'_>) {
      .                   if_chain! {
 59,070 ( 0.01%)              if let ExprKind::Call(ref func, ref args) = expr.kind;
    112 ( 0.00%)              if let ExprKind::Path(ref func_qpath) = func.kind;
    252 ( 0.00%)              if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();
    168 ( 0.00%)              if matches!(cx.tcx.get_diagnostic_name(def_id), Some(sym::fence | sym::compiler_fence));
      .                       if let ExprKind::Path(ref ordering_qpath) = &args[0].kind;
      .                       if let Some(ordering_def_id) = cx.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();
      .                       if Self::matches_ordering(cx, ordering_def_id, &[sym::Relaxed]);
      .                       then {
      .                           cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, |diag| {
      .                               diag.build("memory fences cannot have `Relaxed` ordering")
      .                                   .help("consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`")
      .                                   .emit();
      .                           });
      .                       }
      .                   }
      .               }
      .           
      .               fn check_atomic_compare_exchange(cx: &LateContext<'_>, expr: &Expr<'_>) {
      .                   if_chain! {
265,815 ( 0.03%)              if let Some((method, args)) = Self::inherent_atomic_method_call(cx, expr, &[sym::fetch_update, sym::compare_exchange, sym::compare_exchange_weak]);
      .                       if let Some((success_order_arg, failure_order_arg)) = match method {
      .                           sym::fetch_update => Some((&args[1], &args[2])),
      .                           sym::compare_exchange | sym::compare_exchange_weak => Some((&args[3], &args[4])),
      .                           _ => None,
      .                       };
      .           
      .                       if let Some(fail_ordering_def_id) = Self::opt_ordering_defid(cx, failure_order_arg);
      .                       then {
-- line 1566 ----------------------------------------
-- line 1613 ----------------------------------------
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for InvalidAtomicOrdering {
265,815 ( 0.03%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {
      .                   Self::check_atomic_load_store(cx, expr);
      .                   Self::check_memory_fence(cx, expr);
      .                   Self::check_atomic_compare_exchange(cx, expr);
236,280 ( 0.02%)      }
      .           }

 29,538 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/types.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs
--------------------------------------------------------------------------------
Ir                 

-- line 86 ----------------------------------------
        .           impl Qualif for HasMutInterior {
        .               const ANALYSIS_NAME: &'static str = "flow_has_mut_interior";
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
        .                   qualifs.has_mut_interior
        .               }
        .           
        .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
  526,098 ( 0.06%)          !ty.is_freeze(cx.tcx.at(DUMMY_SP), cx.param_env)
        .               }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   // Exactly one type, `UnsafeCell`, has the `HasMutInterior` qualif inherently.
-- line 102 ----------------------------------------
-- line 115 ----------------------------------------
        .           impl Qualif for NeedsDrop {
        .               const ANALYSIS_NAME: &'static str = "flow_needs_drop";
        .               const IS_CLEARED_ON_MOVE: bool = true;
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
        .                   qualifs.needs_drop
        .               }
        .           
  233,896 ( 0.02%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
   58,474 ( 0.01%)          ty.needs_drop(cx.tcx, cx.param_env)
  263,133 ( 0.03%)      }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   adt.has_dtor(cx.tcx)
        .               }
-- line 133 ----------------------------------------
-- line 141 ----------------------------------------
        .               const ANALYSIS_NAME: &'static str = "flow_needs_nonconst_drop";
        .               const IS_CLEARED_ON_MOVE: bool = true;
        .               const ALLOW_PROMOTED: bool = true;
        .           
        .               fn in_qualifs(qualifs: &ConstQualifs) -> bool {
        .                   qualifs.needs_non_const_drop
        .               }
        .           
      252 ( 0.00%)      fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
        .                   // Avoid selecting for simple cases, such as builtin types.
      112 ( 0.00%)          if ty::util::is_trivially_const_drop(ty) {
        .                       return false;
        .                   }
        .           
        .                   let Some(drop_trait) = cx.tcx.lang_items().drop_trait() else {
        .                       // there is no way to define a type that needs non-const drop
        .                       // without having the lang item present.
        .                       return false;
        .                   };
-- line 159 ----------------------------------------
-- line 196 ----------------------------------------
        .                       let mut fcx = FulfillmentContext::new();
        .                       for nested in impl_src.nested_obligations() {
        .                           fcx.register_predicate_obligation(&infcx, nested);
        .                       }
        .           
        .                       // If we had any errors, then it's bad
        .                       !fcx.select_all_or_error(&infcx).is_empty()
        .                   })
      252 ( 0.00%)      }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   _: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   adt.has_non_const_dtor(cx.tcx)
        .               }
-- line 212 ----------------------------------------
-- line 223 ----------------------------------------
        .               }
        .           
        .               fn in_any_value_of_ty<'tcx>(cx: &ConstCx<'_, 'tcx>, ty: Ty<'tcx>) -> bool {
        .                   // If *any* component of a composite data type does not implement `Structural{Partial,}Eq`,
        .                   // we know that at least some values of that type are not structural-match. I say "some"
        .                   // because that component may be part of an enum variant (e.g.,
        .                   // `Option::<NonStructuralMatchTy>::Some`), in which case some values of this type may be
        .                   // structural-match (`Option::None`).
       84 ( 0.00%)          traits::search_for_structural_match_violation(cx.body.span, cx.tcx, ty).is_some()
        .               }
        .           
        .               fn in_adt_inherently<'tcx>(
        .                   cx: &ConstCx<'_, 'tcx>,
        .                   adt: &'tcx AdtDef,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> bool {
        .                   let ty = cx.tcx.mk_ty(ty::Adt(adt, substs));
        .                   !ty.is_structural_eq_shallow(cx.tcx)
        .               }
        .           }
        .           
        .           // FIXME: Use `mir::visit::Visitor` for the `in_*` functions if/when it supports early return.
        .           
        .           /// Returns `true` if this `Rvalue` contains qualif `Q`.
    1,400 ( 0.00%)  pub fn in_rvalue<'tcx, Q, F>(
        .               cx: &ConstCx<'_, 'tcx>,
        .               in_local: &mut F,
        .               rvalue: &Rvalue<'tcx>,
        .           ) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
      700 ( 0.00%)      match rvalue {
        .                   Rvalue::ThreadLocalRef(_) | Rvalue::NullaryOp(..) => {
        .                       Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx))
        .                   }
        .           
        .                   Rvalue::Discriminant(place) | Rvalue::Len(place) => {
        .                       in_place::<Q, _>(cx, in_local, place.as_ref())
        .                   }
        .           
-- line 264 ----------------------------------------
-- line 267 ----------------------------------------
        .                   | Rvalue::UnaryOp(_, operand)
        .                   | Rvalue::Cast(_, operand, _)
        .                   | Rvalue::ShallowInitBox(operand, _) => in_operand::<Q, _>(cx, in_local, operand),
        .           
        .                   Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {
        .                       in_operand::<Q, _>(cx, in_local, lhs) || in_operand::<Q, _>(cx, in_local, rhs)
        .                   }
        .           
       56 ( 0.00%)          Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {
        .                       // Special-case reborrows to be more like a copy of the reference.
        .                       if let Some((place_base, ProjectionElem::Deref)) = place.as_ref().last_projection() {
        .                           let base_ty = place_base.ty(cx.body, cx.tcx).ty;
        .                           if let ty::Ref(..) = base_ty.kind() {
        .                               return in_place::<Q, _>(cx, in_local, place_base);
        .                           }
        .                       }
        .           
      168 ( 0.00%)              in_place::<Q, _>(cx, in_local, place.as_ref())
        .                   }
        .           
        .                   Rvalue::Aggregate(kind, operands) => {
        .                       // Return early if we know that the struct or enum being constructed is always
        .                       // qualified.
      336 ( 0.00%)              if let AggregateKind::Adt(adt_did, _, substs, ..) = **kind {
        .                           let def = cx.tcx.adt_def(adt_did);
        .                           if Q::in_adt_inherently(cx, def, substs) {
        .                               return true;
        .                           }
        .                           if def.is_union() && Q::in_any_value_of_ty(cx, rvalue.ty(cx.body, cx.tcx)) {
        .                               return true;
        .                           }
        .                       }
        .           
        .                       // Otherwise, proceed structurally...
  525,762 ( 0.06%)              operands.iter().any(|o| in_operand::<Q, _>(cx, in_local, o))
        .                   }
        .               }
    1,148 ( 0.00%)  }
        .           
        .           /// Returns `true` if this `Place` contains qualif `Q`.
      560 ( 0.00%)  pub fn in_place<'tcx, Q, F>(cx: &ConstCx<'_, 'tcx>, in_local: &mut F, place: PlaceRef<'tcx>) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
      252 ( 0.00%)      let mut place = place;
        .               while let Some((place_base, elem)) = place.last_projection() {
        .                   match elem {
        .                       ProjectionElem::Index(index) if in_local(index) => return true,
        .           
        .                       ProjectionElem::Deref
        .                       | ProjectionElem::Field(_, _)
        .                       | ProjectionElem::ConstantIndex { .. }
        .                       | ProjectionElem::Subslice { .. }
-- line 320 ----------------------------------------
-- line 327 ----------------------------------------
        .                   if !Q::in_any_value_of_ty(cx, proj_ty) {
        .                       return false;
        .                   }
        .           
        .                   place = place_base;
        .               }
        .           
        .               assert!(place.projection.is_empty());
      140 ( 0.00%)      in_local(place.local)
        .           }
        .           
        .           /// Returns `true` if this `Operand` contains qualif `Q`.
1,022,315 ( 0.11%)  pub fn in_operand<'tcx, Q, F>(
        .               cx: &ConstCx<'_, 'tcx>,
        .               in_local: &mut F,
        .               operand: &Operand<'tcx>,
        .           ) -> bool
        .           where
        .               Q: Qualif,
        .               F: FnMut(Local) -> bool,
        .           {
  233,672 ( 0.02%)      let constant = match operand {
        .                   Operand::Copy(place) | Operand::Move(place) => {
        .                       return in_place::<Q, _>(cx, in_local, place.as_ref());
        .                   }
        .           
        .                   Operand::Constant(c) => c,
        .               };
        .           
        .               // Check the qualifs of the value of `const` items.
  584,180 ( 0.06%)      if let Some(ct) = constant.literal.const_for_ty() {
  233,672 ( 0.02%)          if let ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs: _, promoted }) = ct.val {
        .                       // Use qualifs of the type for the promoted. Promoteds in MIR body should be possible
        .                       // only for `NeedsNonConstDrop` with precise drop checking. This is the only const
        .                       // check performed after the promotion. Verify that with an assertion.
        .                       assert!(promoted.is_none() || Q::ALLOW_PROMOTED);
        .                       // Don't peek inside trait associated constants.
        .                       if promoted.is_none() && cx.tcx.trait_of_item(def.did).is_none() {
        .                           let qualifs = if let Some((did, param_did)) = def.as_const_arg() {
        .                               cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))
-- line 366 ----------------------------------------
-- line 374 ----------------------------------------
        .           
        .                           // Just in case the type is more specific than
        .                           // the definition, e.g., impl associated const
        .                           // with type parameters, take it into account.
        .                       }
        .                   }
        .               }
        .               // Otherwise use the qualifs of the type.
  321,299 ( 0.03%)      Q::in_any_value_of_ty(cx, constant.literal.ty())
  934,688 ( 0.10%)  }

      196 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                 

-- line 491 ----------------------------------------
        .           
        .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
        .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
        .           use crate::{convert, fmt, hint};
        .           
        .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
        .           ///
        .           /// See the [module documentation](self) for details.
      120 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
        .           #[rustc_diagnostic_item = "Result"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Result<T, E> {
        .               /// Contains the success value
        .               #[lang = "Ok"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
-- line 507 ----------------------------------------
-- line 534 ----------------------------------------
        .               /// let x: Result<i32, &str> = Err("Some error message");
        .               /// assert_eq!(x.is_ok(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn is_ok(&self) -> bool {
      428 ( 0.00%)          matches!(*self, Ok(_))
        .               }
        .           
        .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
-- line 550 ----------------------------------------
-- line 628 ----------------------------------------
        .               /// assert_eq!(x.ok(), Some(2));
        .               ///
        .               /// let x: Result<u32, &str> = Err("Nothing here");
        .               /// assert_eq!(x.ok(), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ok(self) -> Option<T> {
    1,582 ( 0.00%)          match self {
      494 ( 0.00%)              Ok(x) => Some(x),
        .                       Err(_) => None,
        .                   }
        1 ( 0.00%)      }
        .           
        .               /// Converts from `Result<T, E>` to [`Option<E>`].
        .               ///
        .               /// Converts `self` into an [`Option<E>`], consuming `self`,
        .               /// and discarding the success value, if any.
        .               ///
        .               /// # Examples
        .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn err(self) -> Option<E> {
        .                   match self {
        .                       Ok(_) => None,
        .                       Err(x) => Some(x),
        .                   }
        4 ( 0.00%)      }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Adapter for working with references
        .               /////////////////////////////////////////////////////////////////////////
        .           
        .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
        .               ///
        .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
        .               ///
        .               /// let x: Result<u32, &str> = Err("Error");
        .               /// assert_eq!(x.as_ref(), Err(&"Error"));
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn as_ref(&self) -> Result<&T, &E> {
       62 ( 0.00%)          match *self {
        .                       Ok(ref x) => Ok(x),
        .                       Err(ref x) => Err(x),
        .                   }
        .               }
        .           
        .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
        .               ///
        .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
        .               /// let mut x: Result<i32, i32> = Err(13);
        .               /// mutate(&mut x);
        .               /// assert_eq!(x.unwrap_err(), 0);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
        .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
    2,435 ( 0.00%)          match *self {
        .                       Ok(ref mut x) => Ok(x),
        .                       Err(ref mut x) => Err(x),
        .                   }
        .               }
        .           
        .               /////////////////////////////////////////////////////////////////////////
        .               // Transforming contained values
        .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 747 ----------------------------------------
        .               ///         Ok(n) => println!("{}", n),
        .               ///         Err(..) => {}
        .               ///     }
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
  184,446 ( 0.02%)          match self {
   16,340 ( 0.00%)              Ok(t) => Ok(op(t)),
      962 ( 0.00%)              Err(e) => Err(e),
        .                   }
  233,672 ( 0.02%)      }
        .           
        .               /// Returns the provided default (if [`Err`]), or
        .               /// applies a function to the contained value (if [`Ok`]),
        .               ///
        .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`map_or_else`],
        .               /// which is lazily evaluated.
        .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
        .               ///
        .               /// let x: Result<&str, _> = Err("bar");
        .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "result_map_or", since = "1.41.0")]
        .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
        6 ( 0.00%)          match self {
        .                       Ok(t) => f(t),
        .                       Err(_) => default,
        .                   }
        .               }
        .           
        .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
        .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
        .               ///
-- line 790 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// let x: Result<u32, u32> = Ok(2);
        .               /// assert_eq!(x.map_err(stringify), Ok(2));
        .               ///
        .               /// let x: Result<u32, u32> = Err(13);
        .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       85 ( 0.00%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
  459,286 ( 0.05%)          match self {
1,178,299 ( 0.12%)              Ok(t) => Ok(t),
       48 ( 0.00%)              Err(e) => Err(op(e)),
        .                   }
      150 ( 0.00%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 852 ----------------------------------------
-- line 1012 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "result_expect", since = "1.4.0")]
        .               pub fn expect(self, msg: &str) -> T
        .               where
        .                   E: fmt::Debug,
        .               {
    3,478 ( 0.00%)          match self {
      809 ( 0.00%)              Ok(t) => t,
        .                       Err(e) => unwrap_failed(msg, &e),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`Err`]
-- line 1029 ----------------------------------------
-- line 1051 ----------------------------------------
        .               ///
        .               /// ```should_panic
        .               /// let x: Result<u32, &str> = Err("emergency failure");
        .               /// x.unwrap(); // panics with `emergency failure`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       70 ( 0.00%)      pub fn unwrap(self) -> T
        .               where
        .                   E: fmt::Debug,
        .               {
   64,429 ( 0.01%)          match self {
    2,203 ( 0.00%)              Ok(t) => t,
        .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
        .                   }
      105 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Ok`] value or a default
        .               ///
        .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
        .               /// value, otherwise if [`Err`], returns the default value for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
        .               /// [`parse`]: str::parse
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
        .               pub fn unwrap_or_default(self) -> T
        .               where
        .                   T: Default,
        .               {
      175 ( 0.00%)          match self {
      125 ( 0.00%)              Ok(x) => x,
        .                       Err(_) => Default::default(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Err`] value, consuming the `self` value.
        .               ///
        .               /// # Panics
        .               ///
-- line 1109 ----------------------------------------
-- line 1190 ----------------------------------------
        .               /// ```
        .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
        .               #[inline]
        .               pub fn into_ok(self) -> T
        .               where
        .                   E: Into<!>,
        .               {
        .                   match self {
  125,791 ( 0.01%)              Ok(x) => x,
        .                       Err(e) => e.into(),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Err`] value, but never panics.
        .               ///
        .               /// Unlike [`unwrap_err`], this method is known to never panic on the
        .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
        .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
        .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
        .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
        .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
  264,567 ( 0.03%)          match self {
  265,953 ( 0.03%)              Ok(t) => op(t),
      174 ( 0.00%)              Err(e) => Err(e),
        .                   }
        .               }
        .           
        .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
        .               ///
        .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
        .               /// result of a function call, it is recommended to use [`or_else`], which is
        .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
        .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
        .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
        .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
        .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
   59,724 ( 0.01%)          match self {
  266,405 ( 0.03%)              Ok(t) => Ok(t),
        .                       Err(e) => op(e),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
        .               /// assert_eq!(x.unwrap_or(default), 9);
        .               ///
        .               /// let x: Result<u32, &str> = Err("error");
        .               /// assert_eq!(x.unwrap_or(default), default);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn unwrap_or(self, default: T) -> T {
       32 ( 0.00%)          match self {
        6 ( 0.00%)              Ok(t) => t,
        .                       Err(_) => default,
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value or computes it from a closure.
        .               ///
        .               ///
        .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1406 ----------------------------------------
        .               /// fn count(x: &str) -> usize { x.len() }
        .               ///
        .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
        .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
  122,040 ( 0.01%)          match self {
    3,170 ( 0.00%)              Ok(t) => t,
        .                       Err(e) => op(e),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Ok`] value, consuming the `self` value,
        .               /// without checking that the value is not an [`Err`].
        .               ///
        .               /// # Safety
-- line 1423 ----------------------------------------
-- line 1751 ----------------------------------------
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
        .               #[inline]
      846 ( 0.00%)      fn clone(&self) -> Self {
  275,302 ( 0.03%)          match self {
    4,211 ( 0.00%)              Ok(x) => Ok(x.clone()),
    2,200 ( 0.00%)              Err(x) => Err(x.clone()),
        .                   }
  118,748 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Ok(to), Ok(from)) => to.clone_from(from),
        .                       (Err(to), Err(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
        .               ///
        .               /// Since the third element caused an underflow, no further elements were taken,
        .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
        .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
        .                   // performance bug is closed.
        .           
      204 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T, E> const ops::Try for Result<T, E> {
        .               type Output = T;
        .               type Residual = Result<convert::Infallible, E>;
-- line 2027 ----------------------------------------
-- line 2028 ----------------------------------------
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
        .                   Ok(output)
        .               }
        .           
        .               #[inline]
        .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
2,120,234 ( 0.22%)          match self {
4,385,495 ( 0.46%)              Ok(v) => ControlFlow::Continue(v),
      164 ( 0.00%)              Err(e) => ControlFlow::Break(Err(e)),
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
        .               for Result<T, F>
        .           {
        .               #[inline]
        .               #[track_caller]
        .               fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
        .                   match residual {
   30,970 ( 0.00%)              Err(e) => Err(From::from(e)),
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
        .               type TryType = Result<T, E>;
        .           }
-- line 2060 ----------------------------------------

1,729,315 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
   88,129 ( 0.01%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
       56 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
        2 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
        2 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
        1 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
        3 ( 0.00%)      pub prev_token: Token,
        1 ( 0.00%)      pub capture_cfg: bool,
        2 ( 0.00%)      restrictions: Restrictions,
        2 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
        2 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
        2 ( 0.00%)      unmatched_angle_bracket_count: u32,
        3 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
        1 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
        1 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
        4 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
        4 ( 0.00%)      capturing: Capturing,
        1 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
       17 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
    3,607 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
      810 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
      264 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
    1,720 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
      472 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
      944 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
       20 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
      313 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
  724,272 ( 0.08%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  303,911 ( 0.03%)              let (tree, spacing) = if !self.frame.open_delim {
      305 ( 0.00%)                  self.frame.open_delim = true;
    1,525 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
  723,610 ( 0.08%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
    1,228 ( 0.00%)              } else if !self.frame.close_delim {
      303 ( 0.00%)                  self.frame.close_delim = true;
    1,515 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
      606 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
    3,939 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
      144 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  121,322 ( 0.01%)              match tree {
        .                           TokenTree::Token(token) => {
  482,848 ( 0.05%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
  482,848 ( 0.05%)      }
        .           
      150 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
       45 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
       75 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
      135 ( 0.00%)      }
        .           }
        .           
      980 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
      784 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
        2 ( 0.00%)      Some(match token.kind {
        4 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
        4 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
        4 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
        7 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
        2 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
        7 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
        5 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
       56 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
        4 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
        8 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
      124 ( 0.00%)          let mut parser = Parser {
        .                       sess,
        4 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
        4 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
       24 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
        8 ( 0.00%)          parser.bump();
        .           
        .                   parser
       36 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  361,734 ( 0.04%)              let (mut next, spacing) = if self.desugar_doc_comments {
       60 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  180,822 ( 0.02%)                  self.token_cursor.next()
        .                       };
  241,156 ( 0.03%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
   60,289 ( 0.01%)              self.token_cursor.break_last_token = false;
  241,156 ( 0.03%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
       24 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  181,776 ( 0.02%)              if matches!(
  120,578 ( 0.01%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  241,156 ( 0.03%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  265,014 ( 0.03%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   29,446 ( 0.00%)          if self.expected_tokens.is_empty() {
        6 ( 0.00%)              if self.token == *t {
        5 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  353,340 ( 0.04%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  441,690 ( 0.05%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  353,892 ( 0.04%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   58,982 ( 0.01%)          if edible.contains(&self.token.kind) {
   88,368 ( 0.01%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  442,365 ( 0.05%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
    1,455 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
    1,122 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
    2,618 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
      374 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
    2,244 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
    1,496 ( 0.00%)          self.bump();
        .                   Ok(ident)
    3,740 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
1,061,179 ( 0.11%)      fn check(&mut self, tok: &TokenKind) -> bool {
  454,913 ( 0.05%)          let is_present = self.token == *tok;
  303,430 ( 0.03%)          if !is_present {
  753,288 ( 0.08%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
1,061,179 ( 0.11%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
        .               pub fn eat(&mut self, tok: &TokenKind) -> bool {
  183,450 ( 0.02%)          let is_present = self.check(tok);
  122,370 ( 0.01%)          if is_present {
    1,379 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
        .               }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
      855 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
      536 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
   10,158 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
    1,985 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
    2,388 ( 0.00%)          if self.check_keyword(kw) {
      291 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
    1,985 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
      384 ( 0.00%)          if self.token.is_keyword(kw) {
       96 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
       20 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
       16 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
    1,560 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
      780 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
    1,755 ( 0.00%)      }
        .           
    1,968 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
      752 ( 0.00%)          if ok {
        .                       true
        .                   } else {
      580 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
    1,968 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
      117 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
      780 ( 0.00%)      fn check_path(&mut self) -> bool {
    1,824 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
      975 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
        .                   self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
        .                   self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
      414 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
      230 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
      414 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
      384 ( 0.00%)          self.check_or_expected(
      192 ( 0.00%)              self.token.is_like_plus(),
      192 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
    3,720 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
    2,170 ( 0.00%)          if self.token.kind == expected {
      118 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
    1,255 ( 0.00%)          match self.token.kind.break_two_token_op() {
        .                       Some((first, second)) if first == expected => {
        .                           let first_span = self.sess.source_map().start_point(self.token.span);
        .                           let second_span = self.token.span.with_lo(first_span.hi());
        .                           self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
-- line 682 ----------------------------------------
-- line 684 ----------------------------------------
        .                           // and `next_tok` will set this field to `None`
        .                           self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
        .                           self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
      753 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
    3,794 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
        8 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
      348 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
        .                   if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
      192 ( 0.00%)      fn eat_lt(&mut self) -> bool {
      821 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
      500 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
        .                       self.unmatched_angle_bracket_count += 1;
        .                       self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
      192 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
-- line 733 ----------------------------------------
-- line 742 ----------------------------------------
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
  175,935 ( 0.02%)              TokenExpectType::Expect => self.check(k),
        .                       TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
-- line 758 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  146,572 ( 0.02%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
   58,902 ( 0.01%)              if let Some(ref t) = sep.sep {
   88,315 ( 0.01%)                  if first {
        .                               first = false;
        .                           } else {
  233,443 ( 0.02%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   58,606 ( 0.01%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   29,498 ( 0.00%)              let t = f(self)?;
      195 ( 0.00%)              v.push(t);
        .                   }
        .           
      620 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
      804 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
      590 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
      369 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
      251 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
      863 ( 0.00%)          Ok((val, trailing))
      472 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
      247 ( 0.00%)          self.expect(bra)?;
      472 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
      129 ( 0.00%)              &token::OpenDelim(delim),
      199 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
  783,757 ( 0.08%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  361,734 ( 0.04%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  241,156 ( 0.03%)          self.prev_token = mem::replace(&mut self.token, next_token);
   60,289 ( 0.01%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
   60,289 ( 0.01%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
  482,312 ( 0.05%)      pub fn bump(&mut self) {
  241,156 ( 0.03%)          let next_token = self.next_tok(self.token.span);
  361,734 ( 0.04%)          self.bump_with(next_token);
  482,312 ( 0.05%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
        .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
      224 ( 0.00%)          if dist == 0 {
      123 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   29,800 ( 0.00%)          let frame = &self.token_cursor.frame;
   29,883 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
   89,473 ( 0.01%)                  let token = frame.tree_cursor.look_ahead(i);
  119,198 ( 0.01%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  149,175 ( 0.02%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
   59,388 ( 0.01%)                      Some(tree) => match tree {
   29,641 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
      523 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
      947 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
       67 ( 0.00%)          let mut token = Token::dummy();
        .                   while i < dist {
      469 ( 0.00%)              token = cursor.next().0;
      205 ( 0.00%)              if matches!(
      134 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
        .                       i += 1;
        .                   }
        .                   return looker(&token);
        .               }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
      999 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
      228 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
      999 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      148 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
      592 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
      640 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
      168 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
        .                       Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
    1,120 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
      144 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
-- line 1126 ----------------------------------------
-- line 1135 ----------------------------------------
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
        .                       self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
       24 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
      126 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
      486 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
      432 ( 0.00%)          Ok(
      434 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
      123 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
      123 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
       52 ( 0.00%)                  match self.parse_token_tree() {
       65 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
       26 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
       82 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
      378 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
   88,092 ( 0.01%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
   58,720 ( 0.01%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
      120 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
       45 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
      326 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
      178 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
       30 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
       30 ( 0.00%)                  let span = frame.span;
       15 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
       30 ( 0.00%)                  self.bump();
       75 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
        .                           self.bump();
        .                           TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
      105 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   29,402 ( 0.00%)          let old = self.restrictions;
   29,460 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   29,408 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
    1,232 ( 0.00%)      fn is_crate_vis(&self) -> bool {
      770 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
    1,386 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
    1,080 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
      216 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
      108 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
      432 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
       79 ( 0.00%)              return Ok(Visibility {
      237 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
       29 ( 0.00%)          let lo = self.prev_token.span;
        .           
      145 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
       87 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
      972 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
       70 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
        .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
        .               }
        .           
        .               /// `::{` or `::*`
    2,408 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
    1,204 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
      464 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
    2,448 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
       40 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
       20 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
       20 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
       40 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  362,825 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs
--------------------------------------------------------------------------------
Ir                 

-- line 20 ----------------------------------------
        .               // the value lives here, at offset 0, and that allocation definitely is an `AllocKind::Memory`
        .               // (so you can use `AllocMap::unwrap_memory`).
        .               pub alloc_id: AllocId,
        .               pub ty: Ty<'tcx>,
        .           }
        .           
        .           /// Represents a constant value in Rust. `Scalar` and `Slice` are optimizations for
        .           /// array length computations, enum discriminants and the pattern matching logic.
2,294,556 ( 0.24%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, TyEncodable, TyDecodable, Hash)]
        .           #[derive(HashStable)]
        .           pub enum ConstValue<'tcx> {
        .               /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.
        .               ///
        .               /// Not using the enum `Value` to encode that this must not be `Uninit`.
        .               Scalar(Scalar),
        .           
        .               /// Used only for `&[u8]` and `&str`
-- line 36 ----------------------------------------
-- line 62 ----------------------------------------
        .                       }
        .                   })
        .               }
        .           }
        .           
        .           impl<'tcx> ConstValue<'tcx> {
        .               #[inline]
        .               pub fn try_to_scalar(&self) -> Option<Scalar<AllocId>> {
    1,348 ( 0.00%)          match *self {
        .                       ConstValue::ByRef { .. } | ConstValue::Slice { .. } => None,
      126 ( 0.00%)              ConstValue::Scalar(val) => Some(val),
        .                   }
        .               }
        .           
        .               pub fn try_to_scalar_int(&self) -> Option<ScalarInt> {
        .                   Some(self.try_to_scalar()?.assert_int())
        .               }
        .           
       86 ( 0.00%)      pub fn try_to_bits(&self, size: Size) -> Option<u128> {
      731 ( 0.00%)          self.try_to_scalar_int()?.to_bits(size).ok()
      129 ( 0.00%)      }
        .           
        .               pub fn try_to_bool(&self) -> Option<bool> {
        .                   self.try_to_scalar_int()?.try_into().ok()
        .               }
        .           
      166 ( 0.00%)      pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Option<u64> {
    1,245 ( 0.00%)          self.try_to_scalar_int()?.try_to_machine_usize(tcx).ok()
      249 ( 0.00%)      }
        .           
      430 ( 0.00%)      pub fn try_to_bits_for_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   param_env: ParamEnv<'tcx>,
        .                   ty: Ty<'tcx>,
        .               ) -> Option<u128> {
      129 ( 0.00%)          let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;
       86 ( 0.00%)          self.try_to_bits(size)
      344 ( 0.00%)      }
        .           
        .               pub fn from_bool(b: bool) -> Self {
        .                   ConstValue::Scalar(Scalar::from_bool(b))
        .               }
        .           
        .               pub fn from_u64(i: u64) -> Self {
        .                   ConstValue::Scalar(Scalar::from_u64(i))
        .               }
-- line 108 ----------------------------------------
-- line 114 ----------------------------------------
        .           
        .           /// A `Scalar` represents an immediate, primitive value existing outside of a
        .           /// `memory::Allocation`. It is in many ways like a small chunk of an `Allocation`, up to 16 bytes in
        .           /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes
        .           /// of a simple value or a pointer into another `Allocation`
        .           ///
        .           /// These variants would be private if there was a convenient way to achieve that in Rust.
        .           /// Do *not* match on a `Scalar`! Use the various `to_*` methods instead.
1,130,693 ( 0.12%)  #[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]
        .           #[derive(HashStable)]
        .           pub enum Scalar<Tag = AllocId> {
        .               /// The raw bytes of a simple value.
  185,743 ( 0.02%)      Int(ScalarInt),
        .           
        .               /// A pointer into an `Allocation`. An `Allocation` in the `memory` module has a list of
        .               /// relocations, but a `Scalar` is only large enough to contain one, so we just represent the
        .               /// relocation and its associated offset together as a `Pointer` here.
        .               ///
        .               /// We also store the size of the pointer, such that a `Scalar` always knows how big it is.
        .               /// The size is always the pointer size of the current target, but this is not information
        .               /// that we always have readily available.
      282 ( 0.00%)      Ptr(Pointer<Tag>, u8),
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           static_assert_size!(Scalar, 24);
        .           
        .           // We want the `Debug` output to be readable as it is used by `derive(Debug)` for
        .           // all the Miri types.
        .           impl<Tag: Provenance> fmt::Debug for Scalar<Tag> {
-- line 143 ----------------------------------------
-- line 179 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<Tag> Scalar<Tag> {
        .               pub const ZST: Self = Scalar::Int(ScalarInt::ZST);
        .           
        .               #[inline(always)]
        .               pub fn from_pointer(ptr: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {
      569 ( 0.00%)          Scalar::Ptr(ptr, u8::try_from(cx.pointer_size().bytes()).unwrap())
        .               }
        .           
        .               /// Create a Scalar from a pointer with an `Option<_>` tag (where `None` represents a plain integer).
      178 ( 0.00%)      pub fn from_maybe_pointer(ptr: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
      178 ( 0.00%)          match ptr.into_parts() {
        .                       (Some(tag), offset) => Scalar::from_pointer(Pointer::new(tag, offset), cx),
        .                       (None, offset) => {
        .                           Scalar::Int(ScalarInt::try_from_uint(offset.bytes(), cx.pointer_size()).unwrap())
        .                       }
        .                   }
      356 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn null_ptr(cx: &impl HasDataLayout) -> Self {
        .                   Scalar::Int(ScalarInt::null(cx.pointer_size()))
        .               }
        .           
        .               #[inline]
        .               pub fn from_bool(b: bool) -> Self {
-- line 206 ----------------------------------------
-- line 213 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_uint(i: impl Into<u128>, size: Size) -> Option<Self> {
        .                   ScalarInt::try_from_uint(i, size).map(Scalar::Int)
        .               }
        .           
        .               #[inline]
       84 ( 0.00%)      pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {
  117,572 ( 0.01%)          let i = i.into();
        .                   Self::try_from_uint(i, size)
        .                       .unwrap_or_else(|| bug!("Unsigned value {:#x} does not fit in {} bits", i, size.bits()))
      112 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn from_u8(i: u8) -> Self {
        .                   Scalar::Int(i.into())
        .               }
        .           
        .               #[inline]
        .               pub fn from_u16(i: u16) -> Self {
-- line 233 ----------------------------------------
-- line 241 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn from_u64(i: u64) -> Self {
        .                   Scalar::Int(i.into())
        .               }
        .           
        .               #[inline]
        .               pub fn from_machine_usize(i: u64, cx: &impl HasDataLayout) -> Self {
      143 ( 0.00%)          Self::from_uint(i, cx.data_layout().pointer_size)
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_int(i: impl Into<i128>, size: Size) -> Option<Self> {
        .                   ScalarInt::try_from_int(i, size).map(Scalar::Int)
        .               }
        .           
        .               #[inline]
-- line 257 ----------------------------------------
-- line 288 ----------------------------------------
        .           
        .               /// This is almost certainly not the method you want!  You should dispatch on the type
        .               /// and use `to_{u8,u16,...}`/`scalar_to_ptr` to perform ptr-to-int / int-to-ptr casts as needed.
        .               ///
        .               /// This method only exists for the benefit of low-level operations that truly need to treat the
        .               /// scalar in whatever form it is.
        .               #[inline]
        .               pub fn to_bits_or_ptr_internal(self, target_size: Size) -> Result<u128, Pointer<Tag>> {
   88,596 ( 0.01%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
   59,064 ( 0.01%)          match self {
  146,340 ( 0.02%)              Scalar::Int(int) => Ok(int.assert_bits(target_size)),
      792 ( 0.00%)              Scalar::Ptr(ptr, sz) => {
    1,056 ( 0.00%)                  assert_eq!(target_size.bytes(), u64::from(sz));
        .                           Err(ptr)
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> Scalar<Tag> {
        .               /// Fundamental scalar-to-int (cast) operation. Many convenience wrappers exist below, that you
        .               /// likely want to use instead.
        .               ///
        .               /// Will perform ptr-to-int casts if needed and possible.
        .               /// If that fails, we know the offset is relative, so we return an "erased" Scalar
        .               /// (which is useful for error messages but not much else).
        .               #[inline]
        .               pub fn try_to_int(self) -> Result<ScalarInt, Scalar<AllocId>> {
  118,052 ( 0.01%)          match self {
        4 ( 0.00%)              Scalar::Int(int) => Ok(int),
        .                       Scalar::Ptr(ptr, sz) => {
        .                           if Tag::OFFSET_IS_ADDR {
        .                               Ok(ScalarInt::try_from_uint(ptr.offset.bytes(), Size::from_bytes(sz)).unwrap())
        .                           } else {
        .                               // We know `offset` is relative, since `OFFSET_IS_ADDR == false`.
        .                               let (tag, offset) = ptr.into_parts();
        .                               Err(Scalar::Ptr(Pointer::new(tag.get_alloc_id(), offset), sz))
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               #[inline(always)]
        .               pub fn assert_int(self) -> ScalarInt {
      610 ( 0.00%)          self.try_to_int().unwrap()
        .               }
        .           
        .               /// This throws UB (instead of ICEing) on a size mismatch since size mismatches can arise in
        .               /// Miri when someone declares a function that we shim (such as `malloc`) with a wrong type.
        .               #[inline]
      364 ( 0.00%)      pub fn to_bits(self, target_size: Size) -> InterpResult<'tcx, u128> {
      273 ( 0.00%)          assert_ne!(target_size.bytes(), 0, "you should never look at the bits of a ZST");
  527,400 ( 0.06%)          self.try_to_int().map_err(|_| err_unsup!(ReadPointerAsBytes))?.to_bits(target_size).map_err(
        .                       |size| {
        .                           err_ub!(ScalarSizeMismatch {
        .                               target_size: target_size.bytes(),
        .                               data_size: size.bytes(),
        .                           })
        .                           .into()
        .                       },
        .                   )
      455 ( 0.00%)      }
        .           
        .               #[inline(always)]
        .               pub fn assert_bits(self, target_size: Size) -> u128 {
       28 ( 0.00%)          self.to_bits(target_size).unwrap()
        .               }
        .           
        .               pub fn to_bool(self) -> InterpResult<'tcx, bool> {
        .                   let val = self.to_u8()?;
        .                   match val {
        .                       0 => Ok(false),
        .                       1 => Ok(true),
        .                       _ => throw_ub!(InvalidBool(val)),
        .                   }
        .               }
        .           
   58,418 ( 0.01%)      pub fn to_char(self) -> InterpResult<'tcx, char> {
  642,598 ( 0.07%)          let val = self.to_u32()?;
  116,836 ( 0.01%)          match std::char::from_u32(val) {
        .                       Some(c) => Ok(c),
        .                       None => throw_ub!(InvalidChar(val)),
        .                   }
  292,090 ( 0.03%)      }
        .           
        .               #[inline]
        .               fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {
        .                   let sz = Size::from_bits(bits);
  292,090 ( 0.03%)          self.to_bits(sz)
        .               }
        .           
        .               /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.
        .               pub fn to_u8(self) -> InterpResult<'static, u8> {
        .                   self.to_unsigned_with_bit_width(8).map(|v| u8::try_from(v).unwrap())
        .               }
        .           
        .               /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.
        .               pub fn to_u16(self) -> InterpResult<'static, u16> {
        .                   self.to_unsigned_with_bit_width(16).map(|v| u16::try_from(v).unwrap())
        .               }
        .           
        .               /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.
  175,254 ( 0.02%)      pub fn to_u32(self) -> InterpResult<'static, u32> {
        .                   self.to_unsigned_with_bit_width(32).map(|v| u32::try_from(v).unwrap())
  233,672 ( 0.02%)      }
        .           
        .               /// Converts the scalar to produce a `u64`. Fails if the scalar is a pointer.
        .               pub fn to_u64(self) -> InterpResult<'static, u64> {
        .                   self.to_unsigned_with_bit_width(64).map(|v| u64::try_from(v).unwrap())
        .               }
        .           
        .               /// Converts the scalar to produce a `u128`. Fails if the scalar is a pointer.
        .               pub fn to_u128(self) -> InterpResult<'static, u128> {
        .                   self.to_unsigned_with_bit_width(128)
        .               }
        .           
        .               pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {
      811 ( 0.00%)          let b = self.to_bits(cx.data_layout().pointer_size)?;
        .                   Ok(u64::try_from(b).unwrap())
        .               }
        .           
        .               #[inline]
        .               fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {
        .                   let sz = Size::from_bits(bits);
        .                   let b = self.to_bits(sz)?;
        .                   Ok(sz.sign_extend(b) as i128)
-- line 413 ----------------------------------------
-- line 502 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn from_maybe_pointer(ptr: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   ScalarMaybeUninit::Scalar(Scalar::from_maybe_pointer(ptr, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn check_init(self) -> InterpResult<'static, Scalar<Tag>> {
  117,472 ( 0.01%)          match self {
      166 ( 0.00%)              ScalarMaybeUninit::Scalar(scalar) => Ok(scalar),
        .                       ScalarMaybeUninit::Uninit => throw_ub!(InvalidUninitBytes(None)),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> ScalarMaybeUninit<Tag> {
        .               #[inline(always)]
        .               pub fn to_bool(self) -> InterpResult<'tcx, bool> {
        .                   self.check_init()?.to_bool()
        .               }
        .           
        .               #[inline(always)]
        .               pub fn to_char(self) -> InterpResult<'tcx, char> {
  350,508 ( 0.04%)          self.check_init()?.to_char()
        .               }
        .           
        .               #[inline(always)]
        .               pub fn to_f32(self) -> InterpResult<'tcx, Single> {
        .                   self.check_init()?.to_f32()
        .               }
        .           
        .               #[inline(always)]
-- line 533 ----------------------------------------

  789,807 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/value.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir               

-- line 5 ----------------------------------------
      .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
      .           unsafe impl GlobalAlloc for System {
      .               #[inline]
      .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
      .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
      .                   // So only rely on MIN_ALIGN if size >= align.
      .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
      .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
556,826 ( 0.06%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
417,618 ( 0.04%)              libc::malloc(layout.size()) as *mut u8
      .                   } else {
      .                       #[cfg(target_os = "macos")]
      .                       {
      .                           if layout.align() > (1 << 31) {
      .                               return ptr::null_mut();
      .                           }
      .                       }
      .                       aligned_malloc(&layout)
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
      .                   // See the comment above in `alloc` for why this check looks the way it does.
 22,400 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 33,600 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
      .                   } else {
      .                       let ptr = self.alloc(layout);
      .                       if !ptr.is_null() {
      .                           ptr::write_bytes(ptr, 0, layout.size());
      .                       }
      .                       ptr
      .                   }
      .               }
      .           
      .               #[inline]
      .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
144,796 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
      .               }
      .           
      .               #[inline]
      .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 28,248 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 56,496 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
      .                   } else {
      .                       realloc_fallback(self, ptr, layout, new_size)
      .                   }
      .               }
      .           }
      .           
      .           cfg_if::cfg_if! {
      .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
      .               } else if #[cfg(target_os = "wasi")] {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
      .                   }
      .               } else {
      .                   #[inline]
      .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
      1 ( 0.00%)              let mut out = ptr::null_mut();
      .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
      .                       // Since these are all powers of 2, we can just use max.
      .                       let align = layout.align().max(crate::mem::size_of::<usize>());
      2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
      2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
      .                   }
      .               }
      .           }

      1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_constant.rs
--------------------------------------------------------------------------------
Ir               

-- line 3 ----------------------------------------
      .           use crate::build::Builder;
      .           use rustc_middle::mir::*;
      .           use rustc_middle::thir::*;
      .           use rustc_middle::ty::CanonicalUserTypeAnnotation;
      .           
      .           impl<'a, 'tcx> Builder<'a, 'tcx> {
      .               /// Compile `expr`, yielding a compile-time constant. Assumes that
      .               /// `expr` is a valid compile-time constant!
205,149 ( 0.02%)      crate fn as_constant(&mut self, expr: &Expr<'tcx>) -> Constant<'tcx> {
      .                   let this = self;
146,535 ( 0.02%)          let Expr { ty, temp_lifetime: _, span, ref kind } = *expr;
 87,921 ( 0.01%)          match *kind {
      .                       ExprKind::Scope { region_scope: _, lint_level: _, value } => {
      .                           this.as_constant(&this.thir[value])
      .                       }
 87,837 ( 0.01%)              ExprKind::Literal { literal, user_ty, const_id: _ } => {
204,953 ( 0.02%)                  let user_ty = user_ty.map(|user_ty| {
      .                               this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {
      .                                   span,
      .                                   user_ty,
      .                                   inferred_ty: ty,
      .                               })
      .                           });
 29,279 ( 0.00%)                  assert_eq!(literal.ty, ty);
146,395 ( 0.02%)                  Constant { span, user_ty, literal: literal.into() }
      .                       }
     28 ( 0.00%)              ExprKind::StaticRef { literal, .. } => {
      .                           Constant { span, user_ty: None, literal: literal.into() }
      .                       }
      .                       ExprKind::ConstBlock { value } => {
      .                           Constant { span: span, user_ty: None, literal: value.into() }
      .                       }
      .                       _ => span_bug!(span, "expression is not a valid constant {:?}", kind),
      .                   }
263,763 ( 0.03%)      }
      .           }

175,954 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_constant.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .               fn default() -> SortedMap<K, V> {
      .                   SortedMap { data: Vec::new() }
      .               }
      .           }
      .           
      .           impl<K, V> SortedMap<K, V> {
      .               #[inline]
      .               pub const fn new() -> SortedMap<K, V> {
      1 ( 0.00%)          SortedMap { data: Vec::new() }
      .               }
      .           }
      .           
      .           impl<K: Ord, V> SortedMap<K, V> {
      .               /// Construct a `SortedMap` from a presorted set of elements. This is faster
      .               /// than creating an empty map and then inserting the elements individually.
      .               ///
      .               /// It is up to the caller to make sure that the elements are sorted by key
-- line 43 ----------------------------------------
-- line 45 ----------------------------------------
      .               #[inline]
      .               pub fn from_presorted_elements(elements: Vec<(K, V)>) -> SortedMap<K, V> {
      .                   debug_assert!(elements.array_windows().all(|[fst, snd]| fst.0 < snd.0));
      .           
      .                   SortedMap { data: elements }
      .               }
      .           
      .               #[inline]
  1,336 ( 0.00%)      pub fn insert(&mut self, key: K, mut value: V) -> Option<V> {
      .                   match self.lookup_index_for(&key) {
      .                       Ok(index) => {
      .                           let slot = unsafe { self.data.get_unchecked_mut(index) };
      .                           mem::swap(&mut slot.1, &mut value);
      .                           Some(value)
      .                       }
      .                       Err(index) => {
      .                           self.data.insert(index, (key, value));
      .                           None
      .                       }
      .                   }
  1,016 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn remove(&mut self, key: &K) -> Option<V> {
      .                   match self.lookup_index_for(key) {
      .                       Ok(index) => Some(self.data.remove(index).1),
      .                       Err(_) => None,
      .                   }
      .               }
-- line 73 ----------------------------------------
-- line 116 ----------------------------------------
      .               /// Iterate over values, sorted by key
      .               #[inline]
      .               pub fn values(&self) -> impl Iterator<Item = &V> + ExactSizeIterator + DoubleEndedIterator {
      .                   self.data.iter().map(|&(_, ref v)| v)
      .               }
      .           
      .               #[inline]
      .               pub fn len(&self) -> usize {
     64 ( 0.00%)          self.data.len()
      .               }
      .           
      .               #[inline]
      .               pub fn is_empty(&self) -> bool {
      .                   self.len() == 0
      .               }
      .           
      .               #[inline]
      .               pub fn range<R>(&self, range: R) -> &[(K, V)]
      .               where
      .                   R: RangeBounds<K>,
      .               {
410,442 ( 0.04%)          let (start, end) = self.range_slice_indices(range);
      .                   &self.data[start..end]
      .               }
      .           
      .               #[inline]
      .               pub fn remove_range<R>(&mut self, range: R)
      .               where
      .                   R: RangeBounds<K>,
      .               {
-- line 145 ----------------------------------------
-- line 201 ----------------------------------------
      .           
      .               /// Looks up the key in `self.data` via `slice::binary_search()`.
      .               #[inline(always)]
      .               fn lookup_index_for<Q>(&self, key: &Q) -> Result<usize, usize>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Ord + ?Sized,
      .               {
 11,072 ( 0.00%)          self.data.binary_search_by(|&(ref x, _)| x.borrow().cmp(key))
      .               }
      .           
      .               #[inline]
205,221 ( 0.02%)      fn range_slice_indices<R>(&self, range: R) -> (usize, usize)
      .               where
      .                   R: RangeBounds<K>,
      .               {
      .                   let start = match range.start_bound() {
      .                       Bound::Included(ref k) => match self.lookup_index_for(k) {
      .                           Ok(index) | Err(index) => index,
      .                       },
      .                       Bound::Excluded(ref k) => match self.lookup_index_for(k) {
-- line 221 ----------------------------------------
-- line 228 ----------------------------------------
      .                   let end = match range.end_bound() {
      .                       Bound::Included(ref k) => match self.lookup_index_for(k) {
      .                           Ok(index) => index + 1,
      .                           Err(index) => index,
      .                       },
      .                       Bound::Excluded(ref k) => match self.lookup_index_for(k) {
      .                           Ok(index) | Err(index) => index,
      .                       },
    294 ( 0.00%)              Bound::Unbounded => self.data.len(),
      .                   };
      .           
      .                   (start, end)
615,663 ( 0.06%)      }
      .           
      .               #[inline]
      .               pub fn contains_key<Q>(&self, key: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Ord + ?Sized,
      .               {
      .                   self.get(key).is_some()
-- line 248 ----------------------------------------
-- line 276 ----------------------------------------
      .               Q: Ord + ?Sized,
      .           {
      .               fn index_mut(&mut self, key: &Q) -> &mut Self::Output {
      .                   self.get_mut(key).expect("no entry found for key")
      .               }
      .           }
      .           
      .           impl<K: Ord, V> FromIterator<(K, V)> for SortedMap<K, V> {
    686 ( 0.00%)      fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> Self {
      .                   let mut data: Vec<(K, V)> = iter.into_iter().collect();
      .           
      .                   data.sort_unstable_by(|&(ref k1, _), &(ref k2, _)| k1.cmp(k2));
      .                   data.dedup_by(|&mut (ref k1, _), &mut (ref k2, _)| k1.cmp(k2) == Ordering::Equal);
      .           
    392 ( 0.00%)          SortedMap { data }
    784 ( 0.00%)      }
      .           }
      .           
      .           impl<K: HashStable<CTX>, V: HashStable<CTX>, CTX> HashStable<CTX> for SortedMap<K, V> {
      .               #[inline]
      .               fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   self.data.hash_stable(ctx, hasher);
      .               }
      .           }
-- line 299 ----------------------------------------

409,666 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sorted_map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs
--------------------------------------------------------------------------------
Ir               

-- line 114 ----------------------------------------
      .           
      .               /// Lets us implement `HasDataLayout`, which is awfully convenient.
      .               pub tcx: TyCtxt<'tcx>,
      .           }
      .           
      .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for Memory<'mir, 'tcx, M> {
      .               #[inline]
      .               fn data_layout(&self) -> &TargetDataLayout {
    203 ( 0.00%)          &self.tcx.data_layout
      .               }
      .           }
      .           
      .           /// A reference to some allocation that was already bounds-checked for the given region
      .           /// and had the on-access machine hooks run.
      .           #[derive(Copy, Clone)]
      .           pub struct AllocRef<'a, 'tcx, Tag, Extra> {
      .               alloc: &'a Allocation<Tag, Extra>,
-- line 130 ----------------------------------------
-- line 138 ----------------------------------------
      .               alloc: &'a mut Allocation<Tag, Extra>,
      .               range: AllocRange,
      .               tcx: TyCtxt<'tcx>,
      .               alloc_id: AllocId,
      .           }
      .           
      .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
      .               pub fn new(tcx: TyCtxt<'tcx>, extra: M::MemoryExtra) -> Self {
  1,080 ( 0.00%)          Memory {
      .                       alloc_map: M::MemoryMap::default(),
      .                       extra_fn_ptr_map: FxHashMap::default(),
      .                       dead_alloc_map: FxHashMap::default(),
      .                       extra,
      .                       tcx,
      .                   }
      .               }
      .           
-- line 154 ----------------------------------------
-- line 157 ----------------------------------------
      .               /// for any other pointers, nor for TLS statics.
      .               ///
      .               /// Using the resulting pointer represents a *direct* access to that memory
      .               /// (e.g. by directly using a `static`),
      .               /// as opposed to access through a pointer that was created by the program.
      .               ///
      .               /// This function can fail only if `ptr` points to an `extern static`.
      .               #[inline]
  1,608 ( 0.00%)      pub fn global_base_pointer(
      .                   &self,
      .                   ptr: Pointer<AllocId>,
      .               ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {
      .                   // We know `offset` is relative to the allocation, so we can use `into_parts`.
      .                   let (alloc_id, offset) = ptr.into_parts();
      .                   // We need to handle `extern static`.
    536 ( 0.00%)          match self.tcx.get_global_alloc(alloc_id) {
    448 ( 0.00%)              Some(GlobalAlloc::Static(def_id)) if self.tcx.is_thread_local_static(def_id) => {
      .                           bug!("global memory cannot point to thread-local static")
      .                       }
     56 ( 0.00%)              Some(GlobalAlloc::Static(def_id)) if self.tcx.is_foreign_item(def_id) => {
      .                           return M::extern_static_base_pointer(self, def_id);
      .                       }
      .                       _ => {}
      .                   }
      .                   // And we need to get the tag.
    402 ( 0.00%)          Ok(M::tag_alloc_base_pointer(self, Pointer::new(alloc_id, offset)))
  1,072 ( 0.00%)      }
      .           
      .               pub fn create_fn_alloc(
      .                   &mut self,
      .                   fn_val: FnVal<'tcx, M::ExtraFnVal>,
      .               ) -> Pointer<M::PointerTag> {
      .                   let id = match fn_val {
      .                       FnVal::Instance(instance) => self.tcx.create_fn_alloc(instance),
      .                       FnVal::Other(extra) => {
-- line 191 ----------------------------------------
-- line 196 ----------------------------------------
      .                           id
      .                       }
      .                   };
      .                   // Functions are global allocations, so make sure we get the right base pointer.
      .                   // We know this is not an `extern static` so this cannot fail.
      .                   self.global_base_pointer(Pointer::from(id)).unwrap()
      .               }
      .           
  1,359 ( 0.00%)      pub fn allocate(
      .                   &mut self,
      .                   size: Size,
      .                   align: Align,
      .                   kind: MemoryKind<M::MemoryKind>,
      .               ) -> InterpResult<'static, Pointer<M::PointerTag>> {
    588 ( 0.00%)          let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;
  1,323 ( 0.00%)          Ok(self.allocate_with(alloc, kind))
  1,065 ( 0.00%)      }
      .           
     39 ( 0.00%)      pub fn allocate_bytes(
      .                   &mut self,
      .                   bytes: &[u8],
      .                   align: Align,
      .                   kind: MemoryKind<M::MemoryKind>,
      .                   mutability: Mutability,
      .               ) -> Pointer<M::PointerTag> {
      .                   let alloc = Allocation::from_bytes(bytes, align, mutability);
     24 ( 0.00%)          self.allocate_with(alloc, kind)
     30 ( 0.00%)      }
      .           
      .               pub fn allocate_with(
      .                   &mut self,
      .                   alloc: Allocation,
      .                   kind: MemoryKind<M::MemoryKind>,
      .               ) -> Pointer<M::PointerTag> {
    300 ( 0.00%)          let id = self.tcx.reserve_alloc_id();
      .                   debug_assert_ne!(
      .                       Some(kind),
      .                       M::GLOBAL_KIND.map(MemoryKind::Machine),
      .                       "dynamically allocating global memory"
      .                   );
      .                   let alloc = M::init_allocation_extra(self, id, Cow::Owned(alloc), Some(kind));
  2,739 ( 0.00%)          self.alloc_map.insert(id, (kind, alloc.into_owned()));
      .                   M::tag_alloc_base_pointer(self, Pointer::from(id))
      .               }
      .           
      .               pub fn reallocate(
      .                   &mut self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .                   old_size_and_align: Option<(Size, Align)>,
      .                   new_size: Size,
-- line 245 ----------------------------------------
-- line 361 ----------------------------------------
      .                   let align = M::enforce_alignment(&self.extra).then_some(align);
      .                   self.check_and_deref_ptr(
      .                       ptr,
      .                       size,
      .                       align,
      .                       CheckInAllocMsg::MemoryAccessTest,
      .                       |alloc_id, offset, ptr| {
      .                           let (size, align) =
117,192 ( 0.01%)                      self.get_size_and_align(alloc_id, AllocCheck::Dereferenceable)?;
      .                           Ok((size, align, (alloc_id, offset, ptr)))
      .                       },
      .                   )
      .               }
      .           
      .               /// Check if the given pointer points to live memory of given `size` and `align`
      .               /// (ignoring `M::enforce_alignment`). The caller can control the error message for the
      .               /// out-of-bounds case.
-- line 377 ----------------------------------------
-- line 378 ----------------------------------------
      .               #[inline(always)]
      .               pub fn check_ptr_access_align(
      .                   &self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .                   size: Size,
      .                   align: Align,
      .                   msg: CheckInAllocMsg,
      .               ) -> InterpResult<'tcx> {
  1,220 ( 0.00%)          self.check_and_deref_ptr(ptr, size, Some(align), msg, |alloc_id, _, _| {
    568 ( 0.00%)              let check = match msg {
      .                           CheckInAllocMsg::DerefTest | CheckInAllocMsg::MemoryAccessTest => {
      .                               AllocCheck::Dereferenceable
      .                           }
      .                           CheckInAllocMsg::PointerArithmeticTest | CheckInAllocMsg::InboundsTest => {
      .                               AllocCheck::Live
      .                           }
      .                       };
    284 ( 0.00%)              let (size, align) = self.get_size_and_align(alloc_id, check)?;
      .                       Ok((size, align, ()))
      .                   })?;
      .                   Ok(())
      .               }
      .           
      .               /// Low-level helper function to check if a ptr is in-bounds and potentially return a reference
      .               /// to the allocation it points to. Supports both shared and mutable references, as the actual
      .               /// checking is offloaded to a helper closure. `align` defines whether and which alignment check
      .               /// is done. Returns `None` for size 0, and otherwise `Some` of what `alloc_size` returned.
  2,016 ( 0.00%)      fn check_and_deref_ptr<T>(
      .                   &self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .                   size: Size,
      .                   align: Option<Align>,
      .                   msg: CheckInAllocMsg,
      .                   alloc_size: impl FnOnce(
      .                       AllocId,
      .                       Size,
      .                       Pointer<M::PointerTag>,
      .                   ) -> InterpResult<'tcx, (Size, Align, T)>,
      .               ) -> InterpResult<'tcx, Option<T>> {
    284 ( 0.00%)          fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {
    710 ( 0.00%)              if offset % align.bytes() == 0 {
      .                           Ok(())
      .                       } else {
      .                           // The biggest power of two through which `offset` is divisible.
      .                           let offset_pow2 = 1 << offset.trailing_zeros();
      .                           throw_ub!(AlignmentCheckFailed {
      .                               has: Align::from_bytes(offset_pow2).unwrap(),
      .                               required: align,
      .                           })
      .                       }
    426 ( 0.00%)          }
      .           
      .                   // Extract from the pointer an `Option<AllocId>` and an offset, which is relative to the
      .                   // allocation or (if that is `None`) an absolute address.
176,762 ( 0.02%)          let ptr_or_addr = if size.bytes() == 0 {
      .                       // Let's see what we can do, but don't throw errors if there's nothing there.
      .                       self.ptr_try_get_alloc(ptr)
      .                   } else {
      .                       // A "real" access, we insist on getting an `AllocId`.
      .                       Ok(self.ptr_get_alloc(ptr)?)
      .                   };
      .                   Ok(match ptr_or_addr {
      .                       Err(addr) => {
-- line 440 ----------------------------------------
-- line 446 ----------------------------------------
      .                           }
      .                           // Must be aligned.
      .                           if let Some(align) = align {
      .                               check_offset_align(addr, align)?;
      .                           }
      .                           None
      .                       }
      .                       Ok((alloc_id, offset, ptr)) => {
     56 ( 0.00%)                  let (alloc_size, alloc_align, ret_val) = alloc_size(alloc_id, offset, ptr)?;
      .                           // Test bounds. This also ensures non-null.
      .                           // It is sufficient to check this for the end pointer. Also check for overflow!
      .                           if offset.checked_add(size, &self.tcx).map_or(true, |end| end > alloc_size) {
      .                               throw_ub!(PointerOutOfBounds {
      .                                   alloc_id,
      .                                   alloc_size,
      .                                   ptr_offset: self.machine_usize_to_isize(offset.bytes()),
      .                                   ptr_size: size,
      .                                   msg,
      .                               })
      .                           }
      .                           // Test align. Check this last; if both bounds and alignment are violated
      .                           // we want the error to be about the bounds.
    284 ( 0.00%)                  if let Some(align) = align {
      .                               if M::force_int_for_alignment_check(&self.extra) {
      .                                   let addr = Scalar::from_pointer(ptr, &self.tcx)
      .                                       .to_machine_usize(&self.tcx)
      .                                       .expect("ptr-to-int cast for align check should never fail");
      .                                   check_offset_align(addr, align)?;
      .                               } else {
      .                                   // Check allocation alignment and offset alignment.
    284 ( 0.00%)                          if alloc_align.bytes() < align.bytes() {
      .                                       throw_ub!(AlignmentCheckFailed { has: alloc_align, required: align });
      .                                   }
    710 ( 0.00%)                          check_offset_align(offset.bytes(), align)?;
      .                               }
      .                           }
      .           
      .                           // We can still be zero-sized in this branch, in which case we have to
      .                           // return `None`.
     28 ( 0.00%)                  if size.bytes() == 0 { None } else { Some(ret_val) }
      .                       }
      .                   })
  2,130 ( 0.00%)      }
      .           
      .               /// Test if the pointer might be null.
      .               pub fn ptr_may_be_null(&self, ptr: Pointer<Option<M::PointerTag>>) -> bool {
      .                   match self.ptr_try_get_alloc(ptr) {
      .                       Ok((alloc_id, offset, _)) => {
      .                           let (size, _align) = self
      .                               .get_size_and_align(alloc_id, AllocCheck::MaybeDead)
      .                               .expect("alloc info with MaybeDead cannot fail");
-- line 496 ----------------------------------------
-- line 505 ----------------------------------------
      .           
      .           /// Allocation accessors
      .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
      .               /// Helper function to obtain a global (tcx) allocation.
      .               /// This attempts to return a reference to an existing allocation if
      .               /// one can be found in `tcx`. That, however, is only possible if `tcx` and
      .               /// this machine use the same pointer tag, so it is indirected through
      .               /// `M::tag_allocation`.
645,101 ( 0.07%)      fn get_global_alloc(
      .                   &self,
      .                   id: AllocId,
      .                   is_write: bool,
      .               ) -> InterpResult<'tcx, Cow<'tcx, Allocation<M::PointerTag, M::AllocExtra>>> {
527,759 ( 0.06%)          let (alloc, def_id) = match self.tcx.get_global_alloc(id) {
 58,615 ( 0.01%)              Some(GlobalAlloc::Memory(mem)) => {
      .                           // Memory of a constant or promoted or anonymous memory referenced by a static.
      .                           (mem, None)
      .                       }
      .                       Some(GlobalAlloc::Function(..)) => throw_ub!(DerefFunctionPointer(id)),
      .                       None => throw_ub!(PointerUseAfterFree(id)),
     56 ( 0.00%)              Some(GlobalAlloc::Static(def_id)) => {
    168 ( 0.00%)                  assert!(self.tcx.is_static(def_id));
    168 ( 0.00%)                  assert!(!self.tcx.is_thread_local_static(def_id));
      .                           // Notice that every static has two `AllocId` that will resolve to the same
      .                           // thing here: one maps to `GlobalAlloc::Static`, this is the "lazy" ID,
      .                           // and the other one is maps to `GlobalAlloc::Memory`, this is returned by
      .                           // `eval_static_initializer` and it is the "resolved" ID.
      .                           // The resolved ID is never used by the interpreted program, it is hidden.
      .                           // This is relied upon for soundness of const-patterns; a pointer to the resolved
      .                           // ID would "sidestep" the checks that make sure consts do not point to statics!
      .                           // The `GlobalAlloc::Memory` branch here is still reachable though; when a static
      .                           // contains a reference to memory that was created during its evaluation (i.e., not
      .                           // to another static), those inner references only exist in "resolved" form.
     28 ( 0.00%)                  if self.tcx.is_foreign_item(def_id) {
      .                               throw_unsup!(ReadExternStatic(def_id));
      .                           }
      .           
    112 ( 0.00%)                  (self.tcx.eval_static_initializer(def_id)?, Some(def_id))
      .                       }
      .                   };
468,920 ( 0.05%)          M::before_access_global(&self.extra, id, alloc, def_id, is_write)?;
      .                   let alloc = Cow::Borrowed(alloc);
      .                   // We got tcx memory. Let the machine initialize its "extra" stuff.
      .                   let alloc = M::init_allocation_extra(
      .                       self,
      .                       id, // always use the ID we got as input, not the "hidden" one.
      .                       alloc,
      .                       M::GLOBAL_KIND.map(MemoryKind::Machine),
      .                   );
234,572 ( 0.02%)          Ok(alloc)
469,144 ( 0.05%)      }
      .           
      .               /// Gives raw access to the `Allocation`, without bounds or alignment checks.
      .               /// The caller is responsible for calling the access hooks!
234,544 ( 0.02%)      fn get_raw(
      .                   &self,
      .                   id: AllocId,
      .               ) -> InterpResult<'tcx, &Allocation<M::PointerTag, M::AllocExtra>> {
      .                   // The error type of the inner closure here is somewhat funny.  We have two
      .                   // ways of "erroring": An actual error, or because we got a reference from
      .                   // `get_global_alloc` that we can actually use directly without inserting anything anywhere.
      .                   // So the error type is `InterpResult<'tcx, &Allocation<M::PointerTag>>`.
      .                   let a = self.alloc_map.get_or(id, || {
234,600 ( 0.02%)              let alloc = self.get_global_alloc(id, /*is_write*/ false).map_err(Err)?;
117,286 ( 0.01%)              match alloc {
      .                           Cow::Borrowed(alloc) => {
      .                               // We got a ref, cheaply return that as an "error" so that the
      .                               // map does not get mutated.
      .                               Err(Ok(alloc))
      .                           }
      .                           Cow::Owned(alloc) => {
      .                               // Need to put it into the map and return a ref to that
      .                               let kind = M::GLOBAL_KIND.expect(
-- line 577 ----------------------------------------
-- line 582 ----------------------------------------
      .                           }
      .                       }
      .                   });
      .                   // Now unpack that funny error type
      .                   match a {
      .                       Ok(a) => Ok(&a.1),
      .                       Err(a) => a,
      .                   }
175,929 ( 0.02%)      }
      .           
      .               /// "Safe" (bounds and align-checked) allocation access.
703,716 ( 0.07%)      pub fn get<'a>(
      .                   &'a self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .                   size: Size,
      .                   align: Align,
      .               ) -> InterpResult<'tcx, Option<AllocRef<'a, 'tcx, M::PointerTag, M::AllocExtra>>> {
      .                   let align = M::enforce_alignment(&self.extra).then_some(align);
      .                   let ptr_and_alloc = self.check_and_deref_ptr(
      .                       ptr,
      .                       size,
      .                       align,
      .                       CheckInAllocMsg::MemoryAccessTest,
      .                       |alloc_id, offset, ptr| {
234,572 ( 0.02%)                  let alloc = self.get_raw(alloc_id)?;
      .                           Ok((alloc.size(), alloc.align, (alloc_id, offset, ptr, alloc)))
      .                       },
      .                   )?;
117,230 ( 0.01%)          if let Some((alloc_id, offset, ptr, alloc)) = ptr_and_alloc {
      .                       let range = alloc_range(offset, size);
      .                       M::memory_read(&self.extra, &alloc.extra, ptr.provenance, range)?;
410,501 ( 0.04%)              Ok(Some(AllocRef { alloc, range, tcx: self.tcx, alloc_id }))
      .                   } else {
      .                       // Even in this branch we have to be sure that we actually access the allocation, in
      .                       // order to ensure that `static FOO: Type = FOO;` causes a cycle error instead of
      .                       // magically pulling *any* ZST value from the ether. However, the `get_raw` above is
      .                       // always called when `ptr` has an `AllocId`.
      .                       Ok(None)
      .                   }
527,787 ( 0.06%)      }
      .           
      .               /// Return the `extra` field of the given allocation.
      .               pub fn get_alloc_extra<'a>(&'a self, id: AllocId) -> InterpResult<'tcx, &'a M::AllocExtra> {
      .                   Ok(&self.get_raw(id)?.extra)
      .               }
      .           
      .               /// Gives raw mutable access to the `Allocation`, without bounds or alignment checks.
      .               /// The caller is responsible for calling the access hooks!
      .               ///
      .               /// Also returns a ptr to `self.extra` so that the caller can use it in parallel with the
      .               /// allocation.
234,384 ( 0.02%)      fn get_raw_mut(
      .                   &mut self,
      .                   id: AllocId,
      .               ) -> InterpResult<'tcx, (&mut Allocation<M::PointerTag, M::AllocExtra>, &mut M::MemoryExtra)>
      .               {
      .                   // We have "NLL problem case #3" here, which cannot be worked around without loss of
      .                   // efficiency even for the common case where the key is in the map.
      .                   // <https://rust-lang.github.io/rfcs/2094-nll.html#problem-case-3-conditional-control-flow-across-functions>
      .                   // (Cannot use `get_mut_or` since `get_global_alloc` needs `&self`.)
 29,298 ( 0.00%)          if self.alloc_map.get_mut(id).is_none() {
      .                       // Slow path.
      .                       // Allocation not found locally, go look global.
      .                       let alloc = self.get_global_alloc(id, /*is_write*/ true)?;
      .                       let kind = M::GLOBAL_KIND.expect(
      .                           "I got a global allocation that I have to copy but the machine does \
      .                               not expect that to happen",
      .                       );
      .                       self.alloc_map.insert(id, (MemoryKind::Machine(kind), alloc.into_owned()));
      .                   }
      .           
 29,298 ( 0.00%)          let (_kind, alloc) = self.alloc_map.get_mut(id).unwrap();
 29,298 ( 0.00%)          if alloc.mutability == Mutability::Not {
      .                       throw_ub!(WriteToReadOnly(id))
      .                   }
117,192 ( 0.01%)          Ok((alloc, &mut self.extra))
146,490 ( 0.02%)      }
      .           
      .               /// "Safe" (bounds and align-checked) allocation access.
351,576 ( 0.04%)      pub fn get_mut<'a>(
      .                   &'a mut self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .                   size: Size,
      .                   align: Align,
      .               ) -> InterpResult<'tcx, Option<AllocRefMut<'a, 'tcx, M::PointerTag, M::AllocExtra>>> {
      .                   let parts = self.get_ptr_access(ptr, size, align)?;
 58,596 ( 0.01%)          if let Some((alloc_id, offset, ptr)) = parts {
      .                       let tcx = self.tcx;
      .                       // FIXME: can we somehow avoid looking up the allocation twice here?
      .                       // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.
 87,894 ( 0.01%)              let (alloc, extra) = self.get_raw_mut(alloc_id)?;
      .                       let range = alloc_range(offset, size);
      .                       M::memory_written(extra, &mut alloc.extra, ptr.provenance, range)?;
175,788 ( 0.02%)              Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id }))
      .                   } else {
      .                       Ok(None)
      .                   }
263,682 ( 0.03%)      }
      .           
      .               /// Return the `extra` field of the given allocation.
      .               pub fn get_alloc_extra_mut<'a>(
      .                   &'a mut self,
      .                   id: AllocId,
      .               ) -> InterpResult<'tcx, (&'a mut M::AllocExtra, &'a mut M::MemoryExtra)> {
      .                   let (alloc, memory_extra) = self.get_raw_mut(id)?;
      .                   Ok((&mut alloc.extra, memory_extra))
      .               }
      .           
      .               /// Obtain the size and alignment of an allocation, even if that allocation has
      .               /// been deallocated.
      .               ///
      .               /// If `liveness` is `AllocCheck::MaybeDead`, this function always returns `Ok`.
323,840 ( 0.03%)      pub fn get_size_and_align(
      .                   &self,
      .                   id: AllocId,
      .                   liveness: AllocCheck,
      .               ) -> InterpResult<'static, (Size, Align)> {
      .                   // # Regular allocations
      .                   // Don't use `self.get_raw` here as that will
      .                   // a) cause cycles in case `id` refers to a static
      .                   // b) duplicate a global's allocation in miri
147,200 ( 0.02%)          if let Some((_, alloc)) = self.alloc_map.get(id) {
 29,298 ( 0.00%)              return Ok((alloc.size(), alloc.align));
      .                   }
      .           
      .                   // # Function pointers
      .                   // (both global from `alloc_map` and local from `extra_fn_ptr_map`)
    568 ( 0.00%)          if self.get_fn_alloc(id).is_some() {
      .                       return if let AllocCheck::Dereferenceable = liveness {
      .                           // The caller requested no function pointers.
      .                           throw_ub!(DerefFunctionPointer(id))
      .                       } else {
      .                           Ok((Size::ZERO, Align::ONE))
      .                       };
      .                   }
      .           
      .                   // # Statics
      .                   // Can't do this in the match argument, we may get cycle errors since the lock would
      .                   // be held throughout the match.
  1,506 ( 0.00%)          match self.tcx.get_global_alloc(id) {
     56 ( 0.00%)              Some(GlobalAlloc::Static(did)) => {
    168 ( 0.00%)                  assert!(!self.tcx.is_thread_local_static(did));
      .                           // Use size and align of the type.
     28 ( 0.00%)                  let ty = self.tcx.type_of(did);
     28 ( 0.00%)                  let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();
     56 ( 0.00%)                  Ok((layout.size, layout.align.abi))
      .                       }
    114 ( 0.00%)              Some(GlobalAlloc::Memory(alloc)) => {
      .                           // Need to duplicate the logic here, because the global allocations have
      .                           // different associated types than the interpreter-local ones.
    228 ( 0.00%)                  Ok((alloc.size(), alloc.align))
      .                       }
      .                       Some(GlobalAlloc::Function(_)) => bug!("We already checked function pointers above"),
      .                       // The rest must be dead.
      .                       None => {
      .                           if let AllocCheck::MaybeDead = liveness {
      .                               // Deallocated pointers are allowed, we should be able to find
      .                               // them in the map.
      .                               Ok(*self
-- line 740 ----------------------------------------
-- line 741 ----------------------------------------
      .                                   .dead_alloc_map
      .                                   .get(&id)
      .                                   .expect("deallocated pointers should all be recorded in `dead_alloc_map`"))
      .                           } else {
      .                               throw_ub!(PointerUseAfterFree(id))
      .                           }
      .                       }
      .                   }
235,520 ( 0.02%)      }
      .           
    568 ( 0.00%)      fn get_fn_alloc(&self, id: AllocId) -> Option<FnVal<'tcx, M::ExtraFnVal>> {
      .                   if let Some(extra) = self.extra_fn_ptr_map.get(&id) {
      .                       Some(FnVal::Other(*extra))
      .                   } else {
    710 ( 0.00%)              match self.tcx.get_global_alloc(id) {
      .                           Some(GlobalAlloc::Function(instance)) => Some(FnVal::Instance(instance)),
    142 ( 0.00%)                  _ => None,
      .                       }
      .                   }
    568 ( 0.00%)      }
      .           
      .               pub fn get_fn(
      .                   &self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .               ) -> InterpResult<'tcx, FnVal<'tcx, M::ExtraFnVal>> {
      .                   trace!("get_fn({:?})", ptr);
      .                   let (alloc_id, offset, _ptr) = self.ptr_get_alloc(ptr)?;
      .                   if offset.bytes() != 0 {
-- line 768 ----------------------------------------
-- line 903 ----------------------------------------
      .                       writeln!(fmt)?;
      .                   }
      .                   Ok(())
      .               }
      .           }
      .           
      .           /// Reading and writing.
      .           impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {
263,961 ( 0.03%)      pub fn write_scalar(
      .                   &mut self,
      .                   range: AllocRange,
      .                   val: ScalarMaybeUninit<Tag>,
      .               ) -> InterpResult<'tcx> {
146,645 ( 0.02%)          Ok(self
      .                       .alloc
322,619 ( 0.03%)              .write_scalar(&self.tcx, self.range.subrange(range), val)
      .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
175,974 ( 0.02%)      }
      .           
      .               pub fn write_ptr_sized(
      .                   &mut self,
      .                   offset: Size,
      .                   val: ScalarMaybeUninit<Tag>,
      .               ) -> InterpResult<'tcx> {
      .                   self.write_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size), val)
      .               }
      .           }
      .           
      .           impl<'tcx, 'a, Tag: Provenance, Extra> AllocRef<'a, 'tcx, Tag, Extra> {
    696 ( 0.00%)      pub fn read_scalar(&self, range: AllocRange) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {
645,769 ( 0.07%)          Ok(self
      .                       .alloc
352,467 ( 0.04%)              .read_scalar(&self.tcx, self.range.subrange(range))
      .                       .map_err(|e| e.to_interp_error(self.alloc_id))?)
    696 ( 0.00%)      }
      .           
      .               pub fn read_ptr_sized(&self, offset: Size) -> InterpResult<'tcx, ScalarMaybeUninit<Tag>> {
      .                   self.read_scalar(alloc_range(offset, self.tcx.data_layout().pointer_size))
      .               }
      .           
      .               pub fn check_bytes(&self, range: AllocRange, allow_uninit_and_ptr: bool) -> InterpResult<'tcx> {
      .                   Ok(self
      .                       .alloc
-- line 945 ----------------------------------------
-- line 1136 ----------------------------------------
      .                   dest_alloc.mark_relocation_range(relocations);
      .           
      .                   Ok(())
      .               }
      .           }
      .           
      .           /// Machine pointer introspection.
      .           impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {
    203 ( 0.00%)      pub fn scalar_to_ptr(&self, scalar: Scalar<M::PointerTag>) -> Pointer<Option<M::PointerTag>> {
      .                   // We use `to_bits_or_ptr_internal` since we are just implementing the method people need to
      .                   // call to force getting out a pointer.
  1,015 ( 0.00%)          match scalar.to_bits_or_ptr_internal(self.pointer_size()) {
      .                       Err(ptr) => ptr.into(),
      .                       Ok(bits) => {
      .                           let addr = u64::try_from(bits).unwrap();
      .                           let ptr = M::ptr_from_addr(&self, addr);
      .                           if addr == 0 {
      .                               assert!(ptr.provenance.is_none(), "null pointer can never have an AllocId");
      .                           }
      .                           ptr
      .                       }
      .                   }
    406 ( 0.00%)      }
      .           
      .               /// Turning a "maybe pointer" into a proper pointer (and some information
      .               /// about where it points), or an absolute address.
      .               pub fn ptr_try_get_alloc(
      .                   &self,
      .                   ptr: Pointer<Option<M::PointerTag>>,
      .               ) -> Result<(AllocId, Size, Pointer<M::PointerTag>), u64> {
      .                   match ptr.into_pointer_or_addr() {
-- line 1166 ----------------------------------------

558,544 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/memory.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 42 ----------------------------------------
      .           /// `stack_size` bytes.
      .           ///
      .           /// The closure `f` is guaranteed to run on a stack with at least `red_zone` bytes, and it will be
      .           /// run on the current stack if there's space available.
      .           #[inline(always)]
      .           pub fn maybe_grow<R, F: FnOnce() -> R>(red_zone: usize, stack_size: usize, callback: F) -> R {
      .               // if we can't guess the remaining stack (unsupported on some platforms) we immediately grow
      .               // the stack and then cache the new stack size (which we do know now because we allocated it.
203,728 ( 0.02%)      let enough_space = match remaining_stack() {
      .                   Some(remaining) => remaining >= red_zone,
      .                   None => false,
      .               };
299,940 ( 0.03%)      if enough_space {
  2,252 ( 0.00%)          callback()
      .               } else {
      .                   grow(stack_size, callback)
      .               }
      .           }
      .           
      .           /// Always creates a new stack for the passed closure to run on.
      .           /// The closure will still be on the same thread as the caller of `grow`.
      .           /// This will allocate a new stack with at least `stack_size` bytes.
-- line 63 ----------------------------------------
-- line 82 ----------------------------------------
      .               _grow(stack_size, dyn_callback);
      .               ret.unwrap()
      .           }
      .           
      .           /// Queries the amount of remaining stack as interpreted by this library.
      .           ///
      .           /// This function will return the amount of stack space left which will be used
      .           /// to determine whether a stack switch should be made or not.
199,960 ( 0.02%)  pub fn remaining_stack() -> Option<usize> {
      .               let current_ptr = current_stack_ptr();
199,960 ( 0.02%)      get_stack_limit().map(|limit| current_ptr - limit)
399,920 ( 0.04%)  }
      .           
      .           psm_stack_information! (
      .               yes {
      .                   fn current_stack_ptr() -> usize {
199,960 ( 0.02%)              psm::stack_pointer() as usize
      .                   }
      .               }
      .               no {
      .                   #[inline(always)]
      .                   fn current_stack_ptr() -> usize {
      .                       unsafe {
      .                           let mut x = std::mem::MaybeUninit::<u8>::uninit();
      .                           // Unlikely to be ever exercised. As a fallback we execute a volatile read to a
-- line 106 ----------------------------------------
-- line 111 ----------------------------------------
      .                           x.as_ptr() as usize
      .                       }
      .                   }
      .               }
      .           );
      .           
      .           thread_local! {
      .               static STACK_LIMIT: Cell<Option<usize>> = Cell::new(unsafe {
      1 ( 0.00%)          guess_os_stack_limit()
      .               })
      .           }
      .           
      .           #[inline(always)]
      .           fn get_stack_limit() -> Option<usize> {
      .               STACK_LIMIT.with(|s| s.get())
      .           }
      .           
-- line 127 ----------------------------------------
-- line 403 ----------------------------------------
      .                       VirtualQuery(
      .                           psm::stack_pointer() as *const _,
      .                           mi.as_mut_ptr(),
      .                           std::mem::size_of::<QueryT>() as SIZE_T,
      .                       );
      .                       Some(mi.assume_init().AllocationBase as usize + get_thread_stack_guarantee() + 0x1000)
      .                   }
      .               } else if #[cfg(any(target_os = "linux", target_os="solaris", target_os = "netbsd"))] {
      2 ( 0.00%)          unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      7 ( 0.00%)              assert_eq!(libc::pthread_getattr_np(libc::pthread_self(),
      .                                                           attr.as_mut_ptr()), 0);
      1 ( 0.00%)              let mut stackaddr = std::ptr::null_mut();
      4 ( 0.00%)              let mut stacksize = 0;
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_getstack(
      .                           attr.as_ptr(), &mut stackaddr, &mut stacksize
      .                       ), 0);
      4 ( 0.00%)              assert_eq!(libc::pthread_attr_destroy(attr.as_mut_ptr()), 0);
      1 ( 0.00%)              Some(stackaddr as usize)
      3 ( 0.00%)          }
      .               } else if #[cfg(any(target_os = "freebsd", target_os = "dragonfly"))] {
      .                   unsafe fn guess_os_stack_limit() -> Option<usize> {
      .                       let mut attr = std::mem::MaybeUninit::<libc::pthread_attr_t>::uninit();
      .                       assert_eq!(libc::pthread_attr_init(attr.as_mut_ptr()), 0);
      .                       assert_eq!(libc::pthread_attr_get_np(libc::pthread_self(), attr.as_mut_ptr()), 0);
      .                       let mut stackaddr = std::ptr::null_mut();
      .                       let mut stacksize = 0;
      .                       assert_eq!(libc::pthread_attr_getstack(
-- line 431 ----------------------------------------

189,780 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.14/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/md-5-0.9.1/src/utils.rs
--------------------------------------------------------------------------------
Ir               

      .           #![allow(clippy::many_single_char_names)]
      .           use crate::consts::RC;
      .           use core::convert::TryInto;
      .           
      .           #[inline(always)]
      .           fn op_f(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
655,375 ( 0.07%)      ((x & y) | (!x & z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           #[inline(always)]
      .           fn op_g(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
624,750 ( 0.07%)      ((x & z) | (y & !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_h(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
306,250 ( 0.03%)      (x ^ y ^ z)
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline(always)]
      .           fn op_i(w: u32, x: u32, y: u32, z: u32, m: u32, c: u32, s: u32) -> u32 {
392,000 ( 0.04%)      (y ^ (x | !z))
      .                   .wrapping_add(w)
      .                   .wrapping_add(m)
      .                   .wrapping_add(c)
      .                   .rotate_left(s)
      .                   .wrapping_add(x)
      .           }
      .           
      .           #[inline]
 55,125 ( 0.01%)  pub fn compress(state: &mut [u32; 4], input: &[u8; 64]) {
 12,250 ( 0.00%)      let mut a = state[0];
  6,125 ( 0.00%)      let mut b = state[1];
  6,125 ( 0.00%)      let mut c = state[2];
  6,125 ( 0.00%)      let mut d = state[3];
      .           
      .               let mut data = [0u32; 16];
      .               for (o, chunk) in data.iter_mut().zip(input.chunks_exact(4)) {
153,125 ( 0.02%)          *o = u32::from_le_bytes(chunk.try_into().unwrap());
      .               }
      .           
      .               // round 1
      .               a = op_f(a, b, c, d, data[0], RC[0], 7);
      .               d = op_f(d, a, b, c, data[1], RC[1], 12);
      .               c = op_f(c, d, a, b, data[2], RC[2], 17);
      .               b = op_f(b, c, d, a, data[3], RC[3], 22);
      .           
-- line 61 ----------------------------------------
-- line 132 ----------------------------------------
      .               c = op_i(c, d, a, b, data[6], RC[58], 15);
      .               b = op_i(b, c, d, a, data[13], RC[59], 21);
      .           
      .               a = op_i(a, b, c, d, data[4], RC[60], 6);
      .               d = op_i(d, a, b, c, data[11], RC[61], 10);
      .               c = op_i(c, d, a, b, data[2], RC[62], 15);
      .               b = op_i(b, c, d, a, data[9], RC[63], 21);
      .           
 12,250 ( 0.00%)      state[0] = state[0].wrapping_add(a);
  6,125 ( 0.00%)      state[1] = state[1].wrapping_add(b);
  6,125 ( 0.00%)      state[2] = state[2].wrapping_add(c);
  6,125 ( 0.00%)      state[3] = state[3].wrapping_add(d);
 49,000 ( 0.01%)  }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs
--------------------------------------------------------------------------------
Ir               

-- line 132 ----------------------------------------
      .           /// State for tracking recursive validation of references
      .           pub struct RefTracking<T, PATH = ()> {
      .               pub seen: FxHashSet<T>,
      .               pub todo: Vec<(T, PATH)>,
      .           }
      .           
      .           impl<T: Copy + Eq + Hash + std::fmt::Debug, PATH: Default> RefTracking<T, PATH> {
      .               pub fn empty() -> Self {
    324 ( 0.00%)          RefTracking { seen: FxHashSet::default(), todo: vec![] }
      .               }
    390 ( 0.00%)      pub fn new(op: T) -> Self {
      .                   let mut ref_tracking_for_consts =
  1,248 ( 0.00%)              RefTracking { seen: FxHashSet::default(), todo: vec![(op, PATH::default())] };
      .                   ref_tracking_for_consts.seen.insert(op);
      .                   ref_tracking_for_consts
    390 ( 0.00%)      }
      .           
      .               pub fn track(&mut self, op: T, path: impl FnOnce() -> PATH) {
    344 ( 0.00%)          if self.seen.insert(op) {
      .                       trace!("Recursing below ptr {:#?}", op);
      .                       let path = path();
      .                       // Remember to come back to this later.
    638 ( 0.00%)              self.todo.push((op, path));
      .                   }
      .               }
      .           }
      .           
      .           /// Format a path
      .           fn write_path(out: &mut String, path: &[PathElem]) {
      .               use self::PathElem::*;
      .           
-- line 162 ----------------------------------------
-- line 208 ----------------------------------------
      .               path: Vec<PathElem>,
      .               ref_tracking: Option<&'rt mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>>,
      .               /// `None` indicates this is not validating for CTFE (but for runtime).
      .               ctfe_mode: Option<CtfeValidationMode>,
      .               ecx: &'rt InterpCx<'mir, 'tcx, M>,
      .           }
      .           
      .           impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M> {
701,040 ( 0.07%)      fn aggregate_field_path_elem(&mut self, layout: TyAndLayout<'tcx>, field: usize) -> PathElem {
      .                   // First, check if we are projecting to a variant.
175,260 ( 0.02%)          match layout.variants {
      .                       Variants::Multiple { tag_field, .. } => {
      4 ( 0.00%)                  if tag_field == field {
      6 ( 0.00%)                      return match layout.ty.kind() {
      4 ( 0.00%)                          ty::Adt(def, ..) if def.is_enum() => PathElem::EnumTag,
      .                                   ty::Generator(..) => PathElem::GeneratorTag,
      .                                   _ => bug!("non-variant type {:?}", layout.ty),
      .                               };
      .                           }
      .                       }
      .                       Variants::Single { .. } => {}
      .                   }
      .           
      .                   // Now we know we are projecting to a field, so figure out which one.
233,672 ( 0.02%)          match layout.ty.kind() {
      .                       // generators and closures.
      .                       ty::Closure(def_id, _) | ty::Generator(def_id, _, _) => {
      .                           let mut name = None;
      .                           // FIXME this should be more descriptive i.e. CapturePlace instead of CapturedVar
      .                           // https://github.com/rust-lang/project-rfc-2229/issues/46
      .                           if let Some(local_def_id) = def_id.as_local() {
      .                               let tables = self.ecx.tcx.typeck(local_def_id);
      .                               if let Some(captured_place) =
-- line 240 ----------------------------------------
-- line 280 ----------------------------------------
      .                       ty::Array(..) | ty::Slice(..) => PathElem::ArrayElem(field),
      .           
      .                       // dyn traits
      .                       ty::Dynamic(..) => PathElem::DynDowncast,
      .           
      .                       // nothing else has an aggregate layout
      .                       _ => bug!("aggregate_field_path_elem: got non-aggregate type {:?}", layout.ty),
      .                   }
759,460 ( 0.08%)      }
      .           
      .               fn with_elem<R>(
      .                   &mut self,
      .                   elem: PathElem,
      .                   f: impl FnOnce(&mut Self) -> InterpResult<'tcx, R>,
      .               ) -> InterpResult<'tcx, R> {
      .                   // Remember the old state
116,848 ( 0.01%)          let path_len = self.path.len();
      .                   // Record new element
      .                   self.path.push(elem);
      .                   // Perform operation
116,848 ( 0.01%)          let r = f(self)?;
      .                   // Undo changes
      .                   self.path.truncate(path_len);
      .                   // Done
      .                   Ok(r)
      .               }
      .           
    252 ( 0.00%)      fn check_wide_ptr_meta(
      .                   &mut self,
      .                   meta: MemPlaceMeta<M::PointerTag>,
      .                   pointee: TyAndLayout<'tcx>,
      .               ) -> InterpResult<'tcx> {
    196 ( 0.00%)          let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(pointee.ty, self.ecx.param_env);
    112 ( 0.00%)          match tail.kind() {
      .                       ty::Dynamic(..) => {
      .                           let vtable = self.ecx.scalar_to_ptr(meta.unwrap_meta());
      .                           // Direct call to `check_ptr_access_align` checks alignment even on CTFE machines.
      .                           try_validation!(
      .                               self.ecx.memory.check_ptr_access_align(
      .                                   vtable,
      .                                   3 * self.ecx.tcx.data_layout.pointer_size, // drop, size, align
      .                                   self.ecx.tcx.data_layout.pointer_align.abi,
-- line 321 ----------------------------------------
-- line 347 ----------------------------------------
      .                               err_ub!(InvalidVtableAlignment(msg)) =>
      .                                   { "invalid vtable: alignment {}", msg },
      .                               err_unsup!(ReadPointerAsBytes) => { "invalid size or align in vtable" },
      .                           );
      .                           // FIXME: More checks for the vtable.
      .                       }
      .                       ty::Slice(..) | ty::Str => {
      .                           let _len = try_validation!(
     28 ( 0.00%)                      meta.unwrap_meta().to_machine_usize(self.ecx),
      .                               self.path,
      .                               err_unsup!(ReadPointerAsBytes) => { "non-integer slice length in wide pointer" },
      .                           );
      .                           // We do not check that `len * elem_size <= isize::MAX`:
      .                           // that is only required for references, and there it falls out of the
      .                           // "dereferenceable" check performed by Stacked Borrows.
      .                       }
      .                       ty::Foreign(..) => {
      .                           // Unsized, but not wide.
      .                       }
      .                       _ => bug!("Unexpected unsized type tail: {:?}", tail),
      .                   }
      .           
      .                   Ok(())
    252 ( 0.00%)      }
      .           
      .               /// Check a reference or `Box`.
    638 ( 0.00%)      fn check_safe_pointer(
      .                   &mut self,
      .                   value: &OpTy<'tcx, M::PointerTag>,
      .                   kind: &str,
      .               ) -> InterpResult<'tcx> {
    174 ( 0.00%)          let value = try_validation!(
    116 ( 0.00%)              self.ecx.read_immediate(value),
      .                       self.path,
      .                       err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
      .                   );
      .                   // Handle wide pointers.
      .                   // Check metadata early, for better diagnostics
    580 ( 0.00%)          let place = try_validation!(
    174 ( 0.00%)              self.ecx.ref_to_mplace(&value),
      .                       self.path,
      .                       err_ub!(InvalidUninitBytes(None)) => { "uninitialized {}", kind },
      .                   );
    170 ( 0.00%)          if place.layout.is_unsized() {
    308 ( 0.00%)              self.check_wide_ptr_meta(place.meta, place.layout)?;
      .                   }
      .                   // Make sure this is dereferenceable and all.
    116 ( 0.00%)          let size_and_align = try_validation!(
     58 ( 0.00%)              self.ecx.size_and_align_of_mplace(&place),
      .                       self.path,
      .                       err_ub!(InvalidMeta(msg)) => { "invalid {} metadata: {}", kind, msg },
      .                   );
      .                   let (size, align) = size_and_align
      .                       // for the purpose of validity, consider foreign types to have
      .                       // alignment and size determined by the layout (size will be 0,
      .                       // alignment should take attributes into account).
      .                       .unwrap_or_else(|| (place.layout.size, place.layout.align.abi));
      .                   // Direct call to `check_ptr_access_align` checks alignment even on CTFE machines.
      .                   try_validation!(
    116 ( 0.00%)              self.ecx.memory.check_ptr_access_align(
    174 ( 0.00%)                  place.ptr,
      .                           size,
      .                           align,
      .                           CheckInAllocMsg::InboundsTest, // will anyway be replaced by validity message
      .                       ),
      .                       self.path,
      .                       err_ub!(AlignmentCheckFailed { required, has }) =>
      .                           {
      .                               "an unaligned {} (required {} byte alignment but found {})",
-- line 415 ----------------------------------------
-- line 424 ----------------------------------------
      .                       err_ub!(PointerOutOfBounds { .. }) =>
      .                           { "a dangling {} (going beyond the bounds of its allocation)", kind },
      .                       // This cannot happen during const-eval (because interning already detects
      .                       // dangling pointers), but it can happen in Miri.
      .                       err_ub!(PointerUseAfterFree(..)) =>
      .                           { "a dangling {} (use-after-free)", kind },
      .                   );
      .                   // Recursive checking
    174 ( 0.00%)          if let Some(ref mut ref_tracking) = self.ref_tracking {
      .                       // Proceed recursively even for ZST, no reason to skip them!
      .                       // `!` is a ZST and we want to validate it.
      .                       // Skip validation entirely for some external statics
    116 ( 0.00%)              if let Ok((alloc_id, _offset, _ptr)) = self.ecx.memory.ptr_try_get_alloc(place.ptr) {
      .                           // not a ZST
    174 ( 0.00%)                  let alloc_kind = self.ecx.tcx.get_global_alloc(alloc_id);
    116 ( 0.00%)                  if let Some(GlobalAlloc::Static(did)) = alloc_kind {
      .                               assert!(!self.ecx.tcx.is_thread_local_static(did));
      .                               assert!(self.ecx.tcx.is_static(did));
      .                               if matches!(
      .                                   self.ctfe_mode,
      .                                   Some(CtfeValidationMode::Const { allow_static_ptrs: false, .. })
      .                               ) {
      .                                   // See const_eval::machine::MemoryExtra::can_access_statics for why
      .                                   // this check is so important.
-- line 447 ----------------------------------------
-- line 460 ----------------------------------------
      .                               // and that static refers back to us.
      .                               // We might miss const-invalid data,
      .                               // but things are still sound otherwise (in particular re: consts
      .                               // referring to statics).
      .                               return Ok(());
      .                           }
      .                       }
      .                       let path = &self.path;
    522 ( 0.00%)              ref_tracking.track(place, || {
      .                           // We need to clone the path anyway, make sure it gets created
      .                           // with enough space for the additional `Deref`.
    232 ( 0.00%)                  let mut new_path = Vec::with_capacity(path.len() + 1);
      .                           new_path.clone_from(path);
      .                           new_path.push(PathElem::Deref);
      .                           new_path
      .                       });
      .                   }
      .                   Ok(())
    522 ( 0.00%)      }
      .           
409,094 ( 0.04%)      fn read_scalar(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
467,536 ( 0.05%)          Ok(try_validation!(
175,326 ( 0.02%)              self.ecx.read_scalar(op),
      .                       self.path,
      .                       err_unsup!(ReadPointerAsBytes) => { "(potentially part of) a pointer" } expected { "plain (non-pointer) bytes" },
      .                   ))
350,652 ( 0.04%)      }
      .           
      .               /// Check if this is a value of primitive type, and if yes check the validity of the value
      .               /// at that type.  Return `true` if the type is indeed primitive.
527,022 ( 0.06%)      fn try_visit_primitive(
      .                   &mut self,
      .                   value: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, bool> {
      .                   // Go over all the primitive types
175,674 ( 0.02%)          let ty = value.layout.ty;
351,348 ( 0.04%)          match ty.kind() {
      .                       ty::Bool => {
      .                           let value = self.read_scalar(value)?;
      .                           try_validation!(
      .                               value.to_bool(),
      .                               self.path,
      .                               err_ub!(InvalidBool(..)) | err_ub!(InvalidUninitBytes(None)) =>
      .                                   { "{}", value } expected { "a boolean" },
      .                           );
      .                           Ok(true)
      .                       }
      .                       ty::Char => {
233,672 ( 0.02%)                  let value = self.read_scalar(value)?;
116,836 ( 0.01%)                  try_validation!(
      .                               value.to_char(),
      .                               self.path,
      .                               err_ub!(InvalidChar(..)) | err_ub!(InvalidUninitBytes(None)) =>
      .                                   { "{}", value } expected { "a valid unicode scalar value (in `0..=0x10FFFF` but not in `0xD800..=0xDFFF`)" },
      .                           );
      .                           Ok(true)
      .                       }
      .                       ty::Float(_) | ty::Int(_) | ty::Uint(_) => {
     88 ( 0.00%)                  let value = self.read_scalar(value)?;
      .                           // NOTE: Keep this in sync with the array optimization for int/float
      .                           // types below!
      .                           if M::enforce_number_validity(self.ecx) {
      .                               // Integers/floats in CTFE: Must be scalar bits, pointers are dangerous
      .                               let is_bits = value.check_init().map_or(false, |v| v.try_to_int().is_ok());
      .                               if !is_bits {
      .                                   throw_validation_failure!(self.path,
      .                                       { "{}", value } expected { "initialized plain (non-pointer) bytes" }
-- line 529 ----------------------------------------
-- line 543 ----------------------------------------
      .                               err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
      .                           );
      .                           if place.layout.is_unsized() {
      .                               self.check_wide_ptr_meta(place.meta, place.layout)?;
      .                           }
      .                           Ok(true)
      .                       }
      .                       ty::Ref(_, ty, mutbl) => {
    146 ( 0.00%)                  if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. }))
      .                               && *mutbl == hir::Mutability::Mut
      .                           {
      .                               // A mutable reference inside a const? That does not seem right (except if it is
      .                               // a ZST).
      .                               let layout = self.ecx.layout_of(ty)?;
      .                               if !layout.is_zst() {
      .                                   throw_validation_failure!(self.path, { "mutable reference in a `const`" });
      .                               }
      .                           }
    174 ( 0.00%)                  self.check_safe_pointer(value, "reference")?;
      .                           Ok(true)
      .                       }
      8 ( 0.00%)              ty::Adt(def, ..) if def.is_box() => {
      .                           self.check_safe_pointer(value, "box")?;
      .                           Ok(true)
      .                       }
      .                       ty::FnPtr(_sig) => {
      .                           let value = try_validation!(
      .                               self.ecx.read_immediate(value),
      .                               self.path,
      .                               err_unsup!(ReadPointerAsBytes) => { "part of a pointer" } expected { "a proper pointer or integer value" },
-- line 572 ----------------------------------------
-- line 606 ----------------------------------------
      .                       | ty::Infer(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Param(..)
      .                       | ty::Opaque(..)
      .                       | ty::Projection(..)
      .                       | ty::GeneratorWitness(..) => bug!("Encountered invalid type {:?}", ty),
      .                   }
878,370 ( 0.09%)      }
      .           
     16 ( 0.00%)      fn visit_scalar(
      .                   &mut self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   scalar_layout: ScalarAbi,
      .               ) -> InterpResult<'tcx> {
      6 ( 0.00%)          if scalar_layout.valid_range.is_full_for(op.layout.size) {
      .                       // Nothing to check
      .                       return Ok(());
      .                   }
      .                   // At least one value is excluded.
      .                   let valid_range = scalar_layout.valid_range;
      .                   let WrappingRange { start, end } = valid_range;
      .                   let max_value = op.layout.size.unsigned_int_max();
      8 ( 0.00%)          assert!(end <= max_value);
      .                   // Determine the allowed range
      6 ( 0.00%)          let value = self.read_scalar(op)?;
      .                   let value = try_validation!(
      .                       value.check_init(),
      .                       self.path,
      .                       err_ub!(InvalidUninitBytes(None)) => { "{}", value }
      .                           expected { "something {}", wrapping_range_format(valid_range, max_value) },
      .                   );
      4 ( 0.00%)          let bits = match value.try_to_int() {
      .                       Err(_) => {
      .                           // So this is a pointer then, and casting to an int failed.
      .                           // Can only happen during CTFE.
      .                           let ptr = self.ecx.scalar_to_ptr(value);
      .                           if start == 1 && end == max_value {
      .                               // Only null is the niche.  So make sure the ptr is NOT null.
      .                               if self.ecx.memory.ptr_may_be_null(ptr) {
      .                                   throw_validation_failure!(self.path,
-- line 646 ----------------------------------------
-- line 659 ----------------------------------------
      .                                   { "a pointer" }
      .                                   expected {
      .                                       "something that cannot possibly fail to be {}",
      .                                       wrapping_range_format(valid_range, max_value)
      .                                   }
      .                               )
      .                           }
      .                       }
     32 ( 0.00%)              Ok(int) => int.assert_bits(op.layout.size),
      .                   };
      .                   // Now compare. This is slightly subtle because this is a special "wrap-around" range.
      7 ( 0.00%)          if valid_range.contains(bits) {
      .                       Ok(())
      .                   } else {
      .                       throw_validation_failure!(self.path,
      .                           { "{}", bits }
      .                           expected { "something {}", wrapping_range_format(valid_range, max_value) }
      .                       )
      .                   }
     18 ( 0.00%)      }
      .           }
      .           
      .           impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>
      .               for ValidityVisitor<'rt, 'mir, 'tcx, M>
      .           {
      .               type V = OpTy<'tcx, M::PointerTag>;
      .           
      .               #[inline(always)]
-- line 686 ----------------------------------------
-- line 688 ----------------------------------------
      .                   &self.ecx
      .               }
      .           
      .               fn read_discriminant(
      .                   &mut self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, VariantIdx> {
      .                   self.with_elem(PathElem::EnumTag, move |this| {
      6 ( 0.00%)              Ok(try_validation!(
      8 ( 0.00%)                  this.ecx.read_discriminant(op),
      .                           this.path,
      .                           err_ub!(InvalidTag(val)) =>
      .                               { "{}", val } expected { "a valid enum tag" },
      .                           err_ub!(InvalidUninitBytes(None)) =>
      .                               { "uninitialized bytes" } expected { "a valid enum tag" },
      .                           err_unsup!(ReadPointerAsBytes) =>
      .                               { "a pointer" } expected { "a valid enum tag" },
      .                       )
-- line 705 ----------------------------------------
-- line 709 ----------------------------------------
      .           
      .               #[inline]
      .               fn visit_field(
      .                   &mut self,
      .                   old_op: &OpTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .                   new_op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
408,934 ( 0.04%)          let elem = self.aggregate_field_path_elem(old_op.layout, field);
175,260 ( 0.02%)          self.with_elem(elem, move |this| this.visit_value(new_op))
      .               }
      .           
      .               #[inline]
      .               fn visit_variant(
      .                   &mut self,
      .                   old_op: &OpTy<'tcx, M::PointerTag>,
      .                   variant_id: VariantIdx,
      .                   new_op: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      8 ( 0.00%)          let name = match old_op.layout.ty.kind() {
      8 ( 0.00%)              ty::Adt(adt, _) => PathElem::Variant(adt.variants[variant_id].name),
      .                       // Generators also have variants
      .                       ty::Generator(..) => PathElem::GeneratorState(variant_id),
      .                       _ => bug!("Unexpected type with variant: {:?}", old_op.layout.ty),
      .                   };
     14 ( 0.00%)          self.with_elem(name, move |this| this.visit_value(new_op))
      .               }
      .           
      .               #[inline(always)]
      .               fn visit_union(
      .                   &mut self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   _fields: NonZeroUsize,
      .               ) -> InterpResult<'tcx> {
-- line 742 ----------------------------------------
-- line 745 ----------------------------------------
      .                       if !op.layout.ty.is_freeze(self.ecx.tcx.at(DUMMY_SP), self.ecx.param_env) {
      .                           throw_validation_failure!(self.path, { "`UnsafeCell` in a `const`" });
      .                       }
      .                   }
      .                   Ok(())
      .               }
      .           
      .               #[inline]
525,798 ( 0.06%)      fn visit_value(&mut self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {
      .                   trace!("visit_value: {:?}, {:?}", *op, op.layout);
      .           
      .                   // Check primitive types -- the leafs of our recursive descend.
234,096 ( 0.02%)          if self.try_visit_primitive(op)? {
      .                       return Ok(());
      .                   }
      .                   // Sanity check: `builtin_deref` does not know any pointers that are not primitive.
    240 ( 0.00%)          assert!(op.layout.ty.builtin_deref(true).is_none());
      .           
      .                   // Special check preventing `UnsafeCell` in the inner part of constants
    128 ( 0.00%)          if let Some(def) = op.layout.ty.ty_adt_def() {
     20 ( 0.00%)              if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. }))
     28 ( 0.00%)                  && Some(def.did) == self.ecx.tcx.lang_items().unsafe_cell_type()
      .                       {
      .                           throw_validation_failure!(self.path, { "`UnsafeCell` in a `const`" });
      .                       }
      .                   }
      .           
      .                   // Recursively walk the value at its type.
    300 ( 0.00%)          self.walk_value(op)?;
      .           
      .                   // *After* all of this, check the ABI.  We need to check the ABI to handle
      .                   // types like `NonNull` where the `Scalar` info is more restrictive than what
      .                   // the fields say (`rustc_layout_scalar_valid_range_start`).
      .                   // But in most cases, this will just propagate what the fields say,
      .                   // and then we want the error to point at the field -- so, first recurse,
      .                   // then check ABI.
      .                   //
      .                   // FIXME: We could avoid some redundant checks here. For newtypes wrapping
      .                   // scalars, we do the same check on every "level" (e.g., first we check
      .                   // MyNewtype and then the scalar in there).
    304 ( 0.00%)          match op.layout.abi {
      .                       Abi::Uninhabited => {
      .                           throw_validation_failure!(self.path,
      .                               { "a value of uninhabited type {:?}", op.layout.ty }
      .                           );
      .                       }
      .                       Abi::Scalar(scalar_layout) => {
     28 ( 0.00%)                  self.visit_scalar(op, scalar_layout)?;
      .                       }
      .                       Abi::ScalarPair { .. } | Abi::Vector { .. } => {
      .                           // These have fields that we already visited above, so we already checked
      .                           // all their scalar-level restrictions.
      .                           // There is also no equivalent to `rustc_layout_scalar_valid_range_start`
      .                           // that would make skipping them here an issue.
      .                       }
      .                       Abi::Aggregate { .. } => {
      .                           // Nothing to do.
      .                       }
      .                   }
      .           
      .                   Ok(())
467,376 ( 0.05%)      }
      .           
      .               fn visit_aggregate(
      .                   &mut self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   fields: impl Iterator<Item = InterpResult<'tcx, Self::V>>,
      .               ) -> InterpResult<'tcx> {
    540 ( 0.00%)          match op.layout.ty.kind() {
      .                       ty::Str => {
      .                           let mplace = op.assert_mem_place(); // strings are never immediate
      .                           let len = mplace.len(self.ecx)?;
      .                           try_validation!(
      .                               self.ecx.memory.read_bytes(mplace.ptr, Size::from_bytes(len)),
      .                               self.path,
      .                               err_ub!(InvalidUninitBytes(..)) => { "uninitialized data in `str`" },
      .                               err_unsup!(ReadPointerAsBytes) => { "a pointer in `str`" },
-- line 821 ----------------------------------------
-- line 822 ----------------------------------------
      .                           );
      .                       }
      .                       ty::Array(tys, ..) | ty::Slice(tys)
      .                           // This optimization applies for types that can hold arbitrary bytes (such as
      .                           // integer and floating point types) or for structs or tuples with no fields.
      .                           // FIXME(wesleywiser) This logic could be extended further to arbitrary structs
      .                           // or tuples made up of integer/floating point types or inhabited ZSTs with no
      .                           // padding.
    280 ( 0.00%)                  if matches!(tys.kind(), ty::Int(..) | ty::Uint(..) | ty::Float(..))
      .                           =>
      .                       {
      .                           // Optimized handling for arrays of integer/float type.
      .           
      .                           // Arrays cannot be immediate, slices are never immediate.
      .                           let mplace = op.assert_mem_place();
      .                           // This is the length of the array/slice.
      .                           let len = mplace.len(self.ecx)?;
-- line 838 ----------------------------------------
-- line 891 ----------------------------------------
      .                                       _ => return Err(err),
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       // Fast path for arrays and slices of ZSTs. We only need to check a single ZST element
      .                       // of an array and not all of them, because there's only a single value of a specific
      .                       // ZST type, so either validation fails for all elements or none.
    504 ( 0.00%)              ty::Array(tys, ..) | ty::Slice(tys) if self.ecx.layout_of(tys)?.is_zst() => {
      .                           // Validate just the first element (if any).
      .                           self.walk_aggregate(op, fields.take(1))?
      .                       }
      .                       _ => {
      .                           self.walk_aggregate(op, fields)? // default handler
      .                       }
      .                   }
      .                   Ok(())
      .               }
      .           }
      .           
      .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
    816 ( 0.00%)      fn validate_operand_internal(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   path: Vec<PathElem>,
      .                   ref_tracking: Option<&mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>>,
      .                   ctfe_mode: Option<CtfeValidationMode>,
      .               ) -> InterpResult<'tcx> {
      .                   trace!("validate_operand_internal: {:?}, {:?}", *op, op.layout.ty);
      .           
      .                   // Construct a visitor
  1,224 ( 0.00%)          let mut visitor = ValidityVisitor { path, ref_tracking, ctfe_mode, ecx: self };
      .           
      .                   // Run it.
    408 ( 0.00%)          match visitor.visit_value(&op) {
      .                       Ok(()) => Ok(()),
      .                       // Pass through validation failures.
      .                       Err(err) if matches!(err.kind(), err_ub!(ValidationFailure { .. })) => Err(err),
      .                       // Also pass through InvalidProgram, those just indicate that we could not
      .                       // validate and each caller will know best what to do with them.
      .                       Err(err) if matches!(err.kind(), InterpError::InvalidProgram(_)) => Err(err),
      .                       // Avoid other errors as those do not show *where* in the value the issue lies.
      .                       Err(err) => {
      .                           err.print_backtrace();
      .                           bug!("Unexpected error during validation: {}", err);
      .                       }
      .                   }
    952 ( 0.00%)      }
      .           
      .               /// This function checks the data at `op` to be const-valid.
      .               /// `op` is assumed to cover valid memory if it is an indirect operand.
      .               /// It will error if the bits at the destination do not match the ones described by the layout.
      .               ///
      .               /// `ref_tracking` is used to record references that we encounter so that they
      .               /// can be checked recursively by an outside driving loop.
      .               ///
-- line 946 ----------------------------------------
-- line 950 ----------------------------------------
      .               #[inline(always)]
      .               pub fn const_validate_operand(
      .                   &self,
      .                   op: &OpTy<'tcx, M::PointerTag>,
      .                   path: Vec<PathElem>,
      .                   ref_tracking: &mut RefTracking<MPlaceTy<'tcx, M::PointerTag>, Vec<PathElem>>,
      .                   ctfe_mode: CtfeValidationMode,
      .               ) -> InterpResult<'tcx> {
  1,360 ( 0.00%)          self.validate_operand_internal(op, path, Some(ref_tracking), Some(ctfe_mode))
      .               }
      .           
      .               /// This function checks the data at `op` to be runtime-valid.
      .               /// `op` is assumed to cover valid memory if it is an indirect operand.
      .               /// It will error if the bits at the destination do not match the ones described by the layout.
      .               #[inline(always)]
      .               pub fn validate_operand(&self, op: &OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx> {
      .                   self.validate_operand_internal(op, vec![], None, None)
-- line 966 ----------------------------------------

702,427 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/validity.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir               

-- line 83 ----------------------------------------
      .                   if $self.is_proc_macro {
      .                       return Lazy::empty();
      .                   }
      .               };
      .           }
      .           
      .           macro_rules! encoder_methods {
      .               ($($name:ident($ty:ty);)*) => {
  1,560 ( 0.00%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
      .                       self.opaque.$name(value)
  1,872 ( 0.00%)          })*
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
      .               type Error = <opaque::Encoder as Encoder>::Error;
      .           
      .               #[inline]
      .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
      .                   emit_raw_bytes(&[u8]);
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<T>
      .           {
      .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    457 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<[T]>
      .           {
     10 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   e.emit_usize(self.meta)?;
    160 ( 0.00%)          if self.meta == 0 {
      .                       return Ok(());
      .                   }
    303 ( 0.00%)          e.emit_lazy_distance(*self)
      6 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
      .               for Lazy<Table<I, T>>
      .           where
      .               Option<T>: FixedSizeEncoding,
      .           {
      .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   e.emit_usize(self.meta)?;
    144 ( 0.00%)          e.emit_lazy_distance(*self)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
    728 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  1,130 ( 0.00%)          if *self != LOCAL_CRATE && s.is_proc_macro {
      .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
      .                   }
      .                   s.emit_u32(self.as_u32())
    624 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
    485 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   s.emit_u32(self.as_u32())
    582 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   s.emit_u32(self.as_u32())
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
157,225 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
 94,335 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
188,670 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    101 ( 0.00%)          if self.krate == LOCAL_CRATE {
      .                       // We will only write details for local expansions.  Non-local expansions will fetch
      .                       // data from the corresponding crate's metadata.
      .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
      .                       // metadata from proc-macro crates.
    310 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
      .                   }
    208 ( 0.00%)          self.krate.encode(s)?;
      .                   self.local_id.encode(s)
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
251,512 ( 0.03%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
188,634 ( 0.02%)          let span = self.data();
      .           
      .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
      .                   // since we don't load proc-macro dependencies during serialization.
      .                   // This means that any hygiene information from macros used *within*
      .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
      .                   // definition) will be lost.
      .                   //
      .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
      .                   // None of these user-visible effects should result in any
      .                   // cross-crate inconsistencies (getting one behavior in the same
      .                   // crate, and a different behavior in another crate) due to the
      .                   // limited surface that proc-macros can expose.
      .                   //
      .                   // IMPORTANT: If this is ever changed, be sure to update
      .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
      .                   // encoding `ExpnData` for proc-macro crates.
 62,878 ( 0.01%)          if s.is_proc_macro {
      .                       SyntaxContext::root().encode(s)?;
      .                   } else {
 31,439 ( 0.00%)              span.ctxt.encode(s)?;
      .                   }
      .           
 31,439 ( 0.00%)          if self.is_dummy() {
      .                       return TAG_PARTIAL_SPAN.encode(s);
      .                   }
      .           
      .                   // The Span infrastructure should make sure that this invariant holds:
      .                   debug_assert!(span.lo <= span.hi);
      .           
157,114 ( 0.02%)          if !s.source_file_cache.0.contains(span.lo) {
     12 ( 0.00%)              let source_map = s.tcx.sess.source_map();
     24 ( 0.00%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
     12 ( 0.00%)              s.source_file_cache =
     24 ( 0.00%)                  (source_map.files()[source_file_index].clone(), source_file_index);
      .                   }
      .           
 94,296 ( 0.01%)          if !s.source_file_cache.0.contains(span.hi) {
      .                       // Unfortunately, macro expansion still sometimes generates Spans
      .                       // that malformed in this way.
      .                       return TAG_PARTIAL_SPAN.encode(s);
      .                   }
      .           
      .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
      .                   // Record the fact that we need to encode the data for this `SourceFile`
 31,424 ( 0.00%)          source_files.insert(s.source_file_cache.1);
      .           
      .                   // There are two possible cases here:
      .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
      .                   // crate we are writing metadata for. When the metadata for *this* crate gets
      .                   // deserialized, the deserializer will need to know which crate it originally came
      .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
      .                   // be deserialized after the rest of the span data, which tells the deserializer
      .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
      .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
      .                   // our own source map information.
      .                   //
      .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
      .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
      .                   // if we're a proc-macro crate.
      .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
      .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
188,544 ( 0.02%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
      .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
      .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
      .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
      .                       // we write into the metadata. This allows `imported_source_files` to binary
      .                       // search through the 'foreign' crate's source map information, using the
      .                       // deserialized 'lo' and 'hi' values directly.
      .                       //
      .                       // All of this logic ensures that the final result of deserialization is a 'normal'
-- line 290 ----------------------------------------
-- line 296 ----------------------------------------
      .                               src => panic!("Unexpected external source {:?}", src),
      .                           }
      .                       };
      .                       let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
      .                       let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
      .           
      .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
      .                   } else {
 94,272 ( 0.01%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
      .                   };
      .           
      .                   tag.encode(s)?;
      .                   lo.encode(s)?;
      .           
      .                   // Encode length which is usually less than span.hi and profits more
      .                   // from the variable-length integer encoding that we use.
      .                   let len = hi - lo;
      .                   len.encode(s)?;
      .           
 62,848 ( 0.01%)          if tag == TAG_VALID_SPAN_FOREIGN {
      .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
      .                       // while calling `cnum.encode(s)`
      .                       let cnum = s.source_file_cache.0.cnum;
      .                       cnum.encode(s)?;
      .                   }
      .           
      .                   Ok(())
251,512 ( 0.03%)      }
      .           }
      .           
      .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
      .               const CLEAR_CROSS_CRATE: bool = true;
      .           
      .               fn position(&self) -> usize {
      .                   self.opaque.position()
      .               }
-- line 331 ----------------------------------------
-- line 333 ----------------------------------------
      .               fn type_shorthands(&mut self) -> &mut FxHashMap<Ty<'tcx>, usize> {
      .                   &mut self.type_shorthands
      .               }
      .           
      .               fn predicate_shorthands(&mut self) -> &mut FxHashMap<ty::PredicateKind<'tcx>, usize> {
      .                   &mut self.predicate_shorthands
      .               }
      .           
    140 ( 0.00%)      fn encode_alloc_id(
      .                   &mut self,
      .                   alloc_id: &rustc_middle::mir::interpret::AllocId,
      .               ) -> Result<(), Self::Error> {
     84 ( 0.00%)          let (index, _) = self.interpret_allocs.insert_full(*alloc_id);
      .           
      .                   index.encode(self)
    140 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
      .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      .                   (**self).encode(s)
      .               }
      .           }
      .           
-- line 356 ----------------------------------------
-- line 361 ----------------------------------------
      .           }
      .           
      .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
      .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
      .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
    848 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    483 ( 0.00%)          self.encode(ecx).unwrap()
      .               }
      .           }
      .           
      .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
  2,441 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
  1,253 ( 0.00%)          self.encode(ecx).unwrap()
  1,416 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
      .           where
      .               I: IntoIterator,
      .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
      .           {
     21 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
    842 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
     27 ( 0.00%)      }
      .           }
      .           
      .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
      .           // normally need extra variables to avoid errors about multiple mutable borrows.
      .           macro_rules! record {
      .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
      .                   {
      .                       let value = $value;
      .                       let lazy = $self.lazy(value);
      .                       $self.$tables.$table.set($def_id.index, lazy);
      .                   }
      .               }};
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
    865 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
      .                   &mut self,
      .                   lazy: Lazy<T>,
      .               ) -> Result<(), <Self as Encoder>::Error> {
      .                   let pos = lazy.position.get();
    599 ( 0.00%)          let distance = match self.lazy_state {
      .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
    133 ( 0.00%)              LazyState::NodeStart(start) => {
      .                           let start = start.get();
    266 ( 0.00%)                  assert!(pos <= start);
      .                           start - pos
      .                       }
     40 ( 0.00%)              LazyState::Previous(last_pos) => {
     40 ( 0.00%)                  assert!(
      .                               last_pos <= lazy.position,
      .                               "make sure that the calls to `lazy*` \
      .                                are in the same order as the metadata fields",
      .                           );
    120 ( 0.00%)                  lazy.position.get() - last_pos.get()
      .                       }
      .                   };
    346 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
      .                   self.emit_usize(distance)
    865 ( 0.00%)      }
      .           
  1,069 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
      .                   &mut self,
      .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
      .               ) -> Lazy<T> {
      .                   let pos = NonZeroUsize::new(self.position()).unwrap();
      .           
  1,411 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
  4,133 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
  2,988 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
  1,819 ( 0.00%)          self.lazy_state = LazyState::NoNode;
      .           
  3,217 ( 0.00%)          assert!(pos.get() <= self.position());
      .           
      .                   Lazy::from_position_and_meta(pos, meta)
  1,556 ( 0.00%)      }
      .           
      .               fn encode_info_for_items(&mut self) {
      9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
      .           
      .                   // Proc-macro crates only export proc-macro items, which are looked
      .                   // up using `proc_macro_data`
      2 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      .           
      6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
      .               }
      .           
      .               fn encode_def_path_table(&mut self) {
      4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
      2 ( 0.00%)          if self.is_proc_macro {
      .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
      .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
      .                       {
      .                           let def_key = self.lazy(table.def_key(def_index));
      .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
      .                           self.tables.def_keys.set(def_index, def_key);
      .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
      .                       }
      .                   } else {
      5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
      .                           let def_key = self.lazy(def_key);
      .                           let def_path_hash = self.lazy(def_path_hash);
    392 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
    392 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
      .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
      2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
      .                   ))
      .               }
      .           
      .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
      2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
      3 ( 0.00%)          let all_source_files = source_map.files();
      .           
      .                   // By replacing the `Option` with `None`, we ensure that we can't
      .                   // accidentally serialize any more `Span`s after the source map encoding
      .                   // is done.
      .                   let required_source_files = self.required_source_files.take().unwrap();
      .           
      .                   let adapted = all_source_files
      .                       .iter()
      .                       .enumerate()
      .                       .filter(|(idx, source_file)| {
      .                           // Only serialize `SourceFile`s that were used
      .                           // during the encoding of a `Span`
  1,055 ( 0.00%)                  required_source_files.contains(*idx) &&
      .                           // Don't serialize imported `SourceFile`s, unless
      .                           // we're in a proc-macro crate.
      9 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
      .                       })
      .                       .map(|(_, source_file)| {
      6 ( 0.00%)                  let mut adapted = match source_file.name {
      .                               FileName::Real(ref realname) => {
      4 ( 0.00%)                          let mut adapted = (**source_file).clone();
     32 ( 0.00%)                          adapted.name = FileName::Real(match realname {
      .                                       RealFileName::LocalPath(path_to_file) => {
      .                                           // Prepend path of working directory onto potentially
      .                                           // relative paths, because they could become relative
      .                                           // to a wrong directory.
      .                                           // We include `working_dir` as part of the crate hash,
      .                                           // so it's okay for us to use it as part of the encoded
      .                                           // metadata.
      4 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
      4 ( 0.00%)                                  match working_dir {
      .                                               RealFileName::LocalPath(absolute) => {
      .                                                   // Although neither working_dir or the file name were subject
      .                                                   // to path remapping, the concatenation between the two may
      .                                                   // be. Hence we need to do a remapping here.
      .                                                   let joined = Path::new(absolute).join(path_to_file);
     14 ( 0.00%)                                          let (joined, remapped) =
     22 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
      4 ( 0.00%)                                          if remapped {
      .                                                       RealFileName::Remapped {
      .                                                           local_path: None,
      .                                                           virtual_name: joined,
      .                                                       }
      .                                                   } else {
      .                                                       RealFileName::LocalPath(joined)
      .                                                   }
      .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
      .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
      .                                           RealFileName::Remapped {
      .                                               // We do not want any local path to be exported into metadata
      .                                               local_path: None,
      .                                               virtual_name: virtual_name.clone(),
      .                                           }
      .                                       }
      .                                   });
      4 ( 0.00%)                          adapted.name_hash = {
      .                                       let mut hasher: StableHasher = StableHasher::new();
      2 ( 0.00%)                              adapted.name.hash(&mut hasher);
      .                                       hasher.finish::<u128>()
      .                                   };
      2 ( 0.00%)                          Lrc::new(adapted)
      .                               }
      .           
      .                               // expanded code, not from a file
      .                               _ => source_file.clone(),
      .                           };
      .           
      .                           // We're serializing this `SourceFile` into our crate metadata,
      .                           // so mark it as coming from this crate.
      .                           // This also ensures that we don't try to deserialize the
      .                           // `CrateNum` for a proc-macro dependency - since proc macro
      .                           // dependencies aren't loaded when we deserialize a proc-macro,
      .                           // trying to remap the `CrateNum` would fail.
      4 ( 0.00%)                  if self.is_proc_macro {
      .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
      .                           }
      .                           adapted
      .                       })
      .                       .collect::<Vec<_>>();
      .           
      .                   self.lazy(adapted.iter().map(|rc| &**rc))
      .               }
      .           
      8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
      .                   let mut i = self.position();
      .           
      .                   // Encode the crate deps
      .                   let crate_deps = self.encode_crate_deps();
      .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
      5 ( 0.00%)          let dep_bytes = self.position() - i;
      .           
      .                   // Encode the lib features.
      .                   i = self.position();
      .                   let lib_features = self.encode_lib_features();
      7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
      .           
      .                   // Encode the language items.
      .                   i = self.position();
      .                   let lang_items = self.encode_lang_items();
      .                   let lang_items_missing = self.encode_lang_items_missing();
      5 ( 0.00%)          let lang_item_bytes = self.position() - i;
      .           
      .                   // Encode the diagnostic items.
      .                   i = self.position();
      .                   let diagnostic_items = self.encode_diagnostic_items();
      5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
      .           
      .                   // Encode the native libraries used
      .                   i = self.position();
      .                   let native_libraries = self.encode_native_libraries();
      4 ( 0.00%)          let native_lib_bytes = self.position() - i;
      .           
      .                   let foreign_modules = self.encode_foreign_modules();
      .           
      .                   // Encode DefPathTable
      .                   i = self.position();
      .                   self.encode_def_path_table();
      5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
      .           
      .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
      .                   i = self.position();
      .                   let traits = self.encode_traits();
      5 ( 0.00%)          let traits_bytes = self.position() - i;
      .           
      .                   // Encode the def IDs of impls, for coherence checking.
      .                   i = self.position();
      .                   let impls = self.encode_impls();
      5 ( 0.00%)          let impls_bytes = self.position() - i;
      .           
      3 ( 0.00%)          let tcx = self.tcx;
      .           
      .                   // Encode MIR.
      .                   i = self.position();
      .                   self.encode_mir();
      5 ( 0.00%)          let mir_bytes = self.position() - i;
      .           
      .                   // Encode the items.
      .                   i = self.position();
      .                   self.encode_def_ids();
      .                   self.encode_info_for_items();
      4 ( 0.00%)          let item_bytes = self.position() - i;
      .           
      .                   // Encode the allocation index
      .                   let interpret_alloc_index = {
      .                       let mut interpret_alloc_index = Vec::new();
      .                       let mut n = 0;
      .                       trace!("beginning to encode alloc ids");
      .                       loop {
      .                           let new_n = self.interpret_allocs.len();
      .                           // if we have found new ids, serialize those, too
      4 ( 0.00%)                  if n == new_n {
      .                               // otherwise, abort
      .                               break;
      .                           }
      .                           trace!("encoding {} further alloc ids", new_n - n);
      .                           for idx in n..new_n {
     28 ( 0.00%)                      let id = self.interpret_allocs[idx];
      .                               let pos = self.position() as u32;
      .                               interpret_alloc_index.push(pos);
     84 ( 0.00%)                      interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
      .                           }
      .                           n = new_n;
      .                       }
      6 ( 0.00%)              self.lazy(interpret_alloc_index)
      .                   };
      .           
      .                   // Encode the proc macro data. This affects 'tables',
      .                   // so we need to do this before we encode the tables
      .                   i = self.position();
      .                   let proc_macro_data = self.encode_proc_macros();
      4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
      .           
      .                   i = self.position();
      4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
      4 ( 0.00%)          let tables_bytes = self.position() - i;
      .           
      .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
      .                   // this as late as possible to give the prefetching as much time as possible to complete.
      .                   i = self.position();
      .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
      .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
      4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
      .           
      .                   // Encode the hygiene data,
      .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
      .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
      .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
      .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
      .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
      .                   // any `SyntaxContext`s that might be used.
      .                   i = self.position();
      .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
      5 ( 0.00%)          let hygiene_bytes = self.position() - i;
      .           
      .                   i = self.position();
      .                   let def_path_hash_map = self.encode_def_path_hash_map();
      1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
      .           
      .                   // Encode source_map. This needs to be done last,
      .                   // since encoding `Span`s tells us which `SourceFiles` we actually
      .                   // need to encode.
      .                   i = self.position();
      .                   let source_map = self.encode_source_map();
      4 ( 0.00%)          let source_map_bytes = self.position() - i;
      .           
      3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
      7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
      .           
    118 ( 0.00%)          let root = self.lazy(CrateRoot {
      .                       name: tcx.crate_name(LOCAL_CRATE),
      3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
      1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
      .                       hash: tcx.crate_hash(LOCAL_CRATE),
      .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
      3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
      3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
      2 ( 0.00%)              edition: tcx.sess.edition(),
      .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
      .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
      .                       has_default_lib_allocator,
      .                       proc_macro_data,
      6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
      6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
      6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
      6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
      5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
      5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
      2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
      .           
      .                       crate_deps,
      .                       dylib_dependency_formats,
      .                       lib_features,
      .                       lang_items,
      .                       diagnostic_items,
      .                       lang_items_missing,
      .                       native_libraries,
      .                       foreign_modules,
      .                       source_map,
      .                       traits,
      .                       impls,
      .                       exported_symbols,
      .                       interpret_alloc_index,
      2 ( 0.00%)              tables,
      .                       syntax_contexts,
      .                       expn_data,
      .                       expn_hashes,
      .                       def_path_hash_map,
      .                   });
      .           
      1 ( 0.00%)          let total_bytes = self.position();
      .           
      4 ( 0.00%)          if tcx.sess.meta_stats() {
      .                       let mut zero_bytes = 0;
      .                       for e in self.opaque.data.iter() {
      .                           if *e == 0 {
      .                               zero_bytes += 1;
      .                           }
      .                       }
      .           
      .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
      .                       eprintln!("            item bytes: {}", item_bytes);
      .                       eprintln!("           table bytes: {}", tables_bytes);
      .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
      .                       eprintln!("            zero bytes: {}", zero_bytes);
      .                       eprintln!("           total bytes: {}", total_bytes);
      .                   }
      .           
      .                   root
      9 ( 0.00%)      }
      .           }
      .           
      .           fn should_encode_visibility(def_kind: DefKind) -> bool {
      .               match def_kind {
      .                   DefKind::Mod
      .                   | DefKind::Struct
      .                   | DefKind::Union
      .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
      .           /// Whether we should encode MIR.
      .           ///
      .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
      .           /// We want to avoid this work when not required. Therefore:
      .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
      .           /// - we skip `optimized_mir` for check runs.
      .           ///
      .           /// Return a pair, resp. for CTFE and for LLVM.
    576 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
    320 ( 0.00%)      match tcx.def_kind(def_id) {
      .                   // Constructors
      .                   DefKind::Ctor(_, _) => {
      .                       let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
      .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
      .                       (true, mir_opt_base)
      .                   }
      .                   // Constants
      .                   DefKind::AnonConst
      .                   | DefKind::InlineConst
      .                   | DefKind::AssocConst
      .                   | DefKind::Static
      .                   | DefKind::Const => (true, false),
      .                   // Full-fledged functions
      .                   DefKind::AssocFn | DefKind::Fn => {
      .                       let generics = tcx.generics_of(def_id);
    202 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
     58 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
    105 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
      .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
     36 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
    180 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
      .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
     72 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
      .                   }
      .                   // Closures can't be const fn.
      .                   DefKind::Closure => {
      .                       let generics = tcx.generics_of(def_id);
      .                       let needs_inline = (generics.requires_monomorphization(tcx)
      .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
      .                           && tcx.sess.opts.output_types.should_codegen();
      .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
      .                       (false, needs_inline || always_encode_mir)
      .                   }
      .                   // Generators require optimized MIR to compute layout.
      .                   DefKind::Generator => (false, true),
      .                   // The others don't have MIR.
      .                   _ => (false, false),
      .               }
    576 ( 0.00%)  }
      .           
      .           fn should_encode_variances(def_kind: DefKind) -> bool {
      .               match def_kind {
      .                   DefKind::Struct
      .                   | DefKind::Union
      .                   | DefKind::Enum
      .                   | DefKind::Variant
      .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
      .                   | DefKind::LifetimeParam
      .                   | DefKind::GlobalAsm
      .                   | DefKind::ExternCrate => false,
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
      .               fn encode_def_ids(&mut self) {
      2 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      1 ( 0.00%)          let tcx = self.tcx;
      3 ( 0.00%)          let hir = tcx.hir();
     45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
      .                       let def_id = local_id.to_def_id();
      .                       let def_kind = tcx.opt_def_kind(local_id);
    588 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
  1,568 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
      .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
      .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
      .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
      .                           def_kind => def_kind,
      .                       });
    294 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
  1,176 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
    784 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
      .                       if should_encode_visibility(def_kind) {
    582 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
      .                       }
      .                       if should_encode_stability(def_kind) {
      .                           self.encode_stability(def_id);
      .                           self.encode_const_stability(def_id);
    576 ( 0.00%)                  self.encode_deprecation(def_id);
      .                       }
      .                       if should_encode_variances(def_kind) {
    128 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
    448 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
      .                       }
      .                       if should_encode_generics(def_kind) {
      .                           let g = tcx.generics_of(def_id);
    376 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
  1,128 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
     94 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
     94 ( 0.00%)                  if !inferred_outlives.is_empty() {
      .                               record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
      .                           }
      .                       }
    686 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
     14 ( 0.00%)                  record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
      .                       }
      .                   }
      .                   let inherent_impls = tcx.crate_inherent_impls(());
      .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
      .                       if implementations.is_empty() {
      .                           continue;
      .                       }
      .                       record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
      .                           assert!(def_id.is_local());
      .                           def_id.index
      .                       }));
      .                   }
      .               }
      .           
    651 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
    558 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
    744 ( 0.00%)      }
      .           
      .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
      .                   let tcx = self.tcx;
      .                   let variant = &def.variants[index];
      .                   let def_id = variant.def_id;
      .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
      .           
      .                   let data = VariantData {
-- line 1043 ----------------------------------------
-- line 1078 ----------------------------------------
      .           
      .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
      .                   self.encode_item_type(def_id);
      .                   if variant.ctor_kind == CtorKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
     20 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
      4 ( 0.00%)          let tcx = self.tcx;
      .                   let def_id = local_def_id.to_def_id();
      .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
      .           
      .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
      .                   // only ever get called for the crate root. We still want to encode
      .                   // the crate root for consistency with other crates (some of the resolver
      .                   // code uses it). However, we skip encoding anything relating to child
      .                   // items - we encode information about proc-macros later on.
      6 ( 0.00%)          let reexports = if !self.is_proc_macro {
      4 ( 0.00%)              match tcx.module_reexports(local_def_id) {
      .                           Some(exports) => self.lazy(exports),
      .                           _ => Lazy::empty(),
      .                       }
      .                   } else {
      .                       Lazy::empty()
      .                   };
      .           
      8 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
      4 ( 0.00%)          if self.is_proc_macro {
      .                       // Encode this here because we don't do it in encode_def_ids.
      .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
      .                   } else {
      .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
      .                       // Foreign items are planted into their parent modules from name resolution point of view.
      4 ( 0.00%)              let tcx = self.tcx;
      .                       let foreign_item_children = md
      .                           .item_ids
      .                           .iter()
    170 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
      .                               hir::ItemKind::ForeignMod { items, .. } => {
      .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
      .                               }
      .                               _ => None,
      .                           })
      .                           .flatten();
      .           
     14 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
      .                   }
     16 ( 0.00%)      }
      .           
      .               fn encode_field(
      .                   &mut self,
      .                   adt_def: &ty::AdtDef,
      .                   variant_index: VariantIdx,
      .                   field_index: usize,
      .               ) {
      .                   let variant = &adt_def.variants[variant_index];
-- line 1134 ----------------------------------------
-- line 1166 ----------------------------------------
      .                   let bounds = self.tcx.explicit_item_bounds(def_id);
      .                   if !bounds.is_empty() {
      .                       record!(self.tables.explicit_item_bounds[def_id] <- bounds);
      .                   }
      .               }
      .           
      .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
     35 ( 0.00%)          let tcx = self.tcx;
      .           
    245 ( 0.00%)          let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
      .                   let trait_item = tcx.associated_item(def_id);
      .           
    175 ( 0.00%)          let container = match trait_item.defaultness {
      .                       hir::Defaultness::Default { has_value: true } => AssocContainer::TraitWithDefault,
      .                       hir::Defaultness::Default { has_value: false } => AssocContainer::TraitRequired,
      .                       hir::Defaultness::Final => span_bug!(ast_item.span, "traits cannot have final items"),
      .                   };
      .           
    210 ( 0.00%)          match trait_item.kind {
      .                       ty::AssocKind::Const => {
      .                           let rendered = rustc_hir_pretty::to_string(
      .                               &(&self.tcx.hir() as &dyn intravisit::Map<'_>),
      .                               |s| s.print_trait_item(ast_item),
      .                           );
      .                           let rendered_const = self.lazy(RenderedConst(rendered));
      .           
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
      .                               container,
      .                               Default::default(),
      .                               rendered_const,
      .                           ));
      .                       }
      .                       ty::AssocKind::Fn => {
     70 ( 0.00%)                  let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {
     70 ( 0.00%)                      let param_names = match *m {
      .                                   hir::TraitFn::Required(ref names) => self.encode_fn_param_names(names),
     14 ( 0.00%)                          hir::TraitFn::Provided(body) => self.encode_fn_param_names_for_body(body),
      .                               };
      .                               FnData {
      .                                   asyncness: m_sig.header.asyncness,
      .                                   constness: hir::Constness::NotConst,
      .                                   param_names,
      .                               }
      .                           } else {
      .                               bug!()
-- line 1211 ----------------------------------------
-- line 1217 ----------------------------------------
      .                           })));
      .                       }
      .                       ty::AssocKind::Type => {
      .                           self.encode_explicit_item_bounds(def_id);
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
      .                       }
      .                   }
      .                   self.encode_ident_span(def_id, ast_item.ident);
    105 ( 0.00%)          match trait_item.kind {
      .                       ty::AssocKind::Const | ty::AssocKind::Fn => {
      .                           self.encode_item_type(def_id);
      .                       }
      .                       ty::AssocKind::Type => {
      .                           if trait_item.defaultness.has_value() {
      .                               self.encode_item_type(def_id);
      .                           }
      .                       }
      .                   }
     35 ( 0.00%)          if trait_item.kind == ty::AssocKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
      .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
     56 ( 0.00%)          let tcx = self.tcx;
      .           
    168 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
     28 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
      .           
    112 ( 0.00%)          let container = match impl_item.defaultness {
      .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
      .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
      .                       hir::Defaultness::Default { has_value: false } => {
      .                           span_bug!(ast_item.span, "impl items always have values (currently)")
      .                       }
      .                   };
      .           
    168 ( 0.00%)          match impl_item.kind {
      .                       ty::AssocKind::Const => {
      .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
      .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
      .           
      .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
      .                                   container,
      .                                   qualifs,
      .                                   self.encode_rendered_const_for_body(body_id))
      .                               );
      .                           } else {
      .                               bug!()
      .                           }
      .                       }
      .                       ty::AssocKind::Fn => {
     56 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
      .                               FnData {
      .                                   asyncness: sig.header.asyncness,
      .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
     28 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
      .                                       hir::Constness::Const
      .                                   } else {
      .                                       hir::Constness::NotConst
      .                                   },
      .                                   param_names: self.encode_fn_param_names_for_body(body),
      .                               }
      .                           } else {
      .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
      .                               container,
      .                               has_self: impl_item.fn_has_self_parameter,
      .                           })));
      .                       }
      .                       ty::AssocKind::Type => {
      .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
      .                       }
      .                   }
     84 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
    140 ( 0.00%)          self.encode_item_type(def_id);
    112 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
      .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
      .                   }
     28 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
      .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
      .               }
      .           
      8 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
    236 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
      8 ( 0.00%)      }
      .           
      .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
      .                   self.lazy(param_names.iter())
      .               }
      .           
      .               fn encode_mir(&mut self) {
      3 ( 0.00%)          if self.is_proc_macro {
      .                       return;
      .                   }
      .           
      .                   let keys_and_jobs = self
      .                       .tcx
      .                       .mir_keys(())
      .                       .iter()
      .                       .filter_map(|&def_id| {
    320 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
    381 ( 0.00%)                  if encode_const || encode_opt {
    126 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
      .                           } else {
      .                               None
      .                           }
    128 ( 0.00%)              })
      .                       .collect::<Vec<_>>();
    320 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
      .                       debug_assert!(encode_const || encode_opt);
      .           
      .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
     63 ( 0.00%)              if encode_opt {
    140 ( 0.00%)                  record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
      .                       }
     63 ( 0.00%)              if encode_const {
    112 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
      .           
      .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
     28 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
    112 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
      .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
      .                           }
      .                       }
    252 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
      .           
      .                       let instance =
      .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
     63 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
     63 ( 0.00%)              if !unused.is_empty() {
      .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_stability(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_stability({:?})", def_id);
      .           
      .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
      .                   // the stability attributes are even enabled before using their queries.
    768 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
      .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
      .                           record!(self.tables.stability[def_id] <- stab)
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_const_stability(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
      .           
      .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
      .                   // the stability attributes are even enabled before using their queries.
    672 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
      .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
      .                           record!(self.tables.const_stability[def_id] <- stab)
      .                       }
      .                   }
      .               }
      .           
    576 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
      .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
    480 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
      .                       record!(self.tables.deprecation[def_id] <- depr);
      .                   }
    480 ( 0.00%)      }
      .           
      .               fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
      .                   let hir = self.tcx.hir();
      .                   let body = hir.body(body_id);
      .                   let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
      .                       s.print_expr(&body.value)
      .                   });
      .                   let rendered_const = &RenderedConst(rendered);
      .                   self.lazy(rendered_const)
      .               }
      .           
    288 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
      .                   let tcx = self.tcx;
      .           
      .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
      .           
      .                   self.encode_ident_span(def_id, item.ident);
      .           
    248 ( 0.00%)          let entry_kind = match item.kind {
      .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
      .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
      .                       hir::ItemKind::Const(_, body_id) => {
      .                           let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
      .                           EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
      .                       }
      2 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
      .                           let data = FnData {
      1 ( 0.00%)                      asyncness: sig.header.asyncness,
      1 ( 0.00%)                      constness: sig.header.constness,
      2 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
      .                           };
      .           
      .                           EntryKind::Fn(self.lazy(data))
      .                       }
      .                       hir::ItemKind::Macro(ref macro_def) => {
      .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
      .                       }
      .                       hir::ItemKind::Mod(ref m) => {
     12 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
      .                       }
      .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
      .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
      .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
      .                       hir::ItemKind::OpaqueTy(..) => {
      .                           self.encode_explicit_item_bounds(def_id);
      .                           EntryKind::OpaqueTy
      .                       }
-- line 1433 ----------------------------------------
-- line 1462 ----------------------------------------
      .                                   ctor_kind: variant.ctor_kind,
      .                                   discr: variant.discr,
      .                                   ctor: None,
      .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
      .                               }),
      .                               adt_def.repr,
      .                           )
      .                       }
      4 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
      4 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
      2 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
      2 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
      1 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
      6 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
      6 ( 0.00%)                          an.nth(1).and_then(|node| match node {
      .                                       specialization_graph::Node::Impl(parent) => Some(parent),
      .                                       _ => None,
      .                                   })
      .                               })
      .                           } else {
      .                               None
      .                           };
      .           
      .                           // if this is an impl of `CoerceUnsized`, create its
      .                           // "unsized info", else just store None
      .                           let coerce_unsized_info = trait_ref.and_then(|t| {
      6 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
      .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
      .                               } else {
      .                                   None
      .                               }
      .                           });
      .           
      .                           let data = ImplData {
      .                               polarity,
-- line 1496 ----------------------------------------
-- line 1498 ----------------------------------------
      .                               constness,
      .                               parent_impl: parent,
      .                               coerce_unsized_info,
      .                           };
      .           
      .                           EntryKind::Impl(self.lazy(data))
      .                       }
      .                       hir::ItemKind::Trait(..) => {
      2 ( 0.00%)                  let trait_def = self.tcx.trait_def(def_id);
      .                           let data = TraitData {
      1 ( 0.00%)                      unsafety: trait_def.unsafety,
      2 ( 0.00%)                      paren_sugar: trait_def.paren_sugar,
      5 ( 0.00%)                      has_auto_impl: self.tcx.trait_is_auto(def_id),
      1 ( 0.00%)                      is_marker: trait_def.is_marker,
      1 ( 0.00%)                      skip_array_during_method_dispatch: trait_def.skip_array_during_method_dispatch,
      1 ( 0.00%)                      specialization_kind: trait_def.specialization_kind,
      .                               must_implement_one_of: trait_def.must_implement_one_of.clone(),
      .                           };
      .           
      .                           EntryKind::Trait(self.lazy(data))
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
      .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
      .                           bug!("cannot encode info for item {:?}", item)
      .                       }
      .                   };
      .                   record!(self.tables.kind[def_id] <- entry_kind);
      .                   // FIXME(eddyb) there should be a nicer way to do this.
    155 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
      .                           self.tcx.adt_def(def_id).variants.iter().map(|v| {
      .                               assert!(v.def_id.is_local());
      .                               v.def_id.index
      .                           })
      .                       ),
      .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
      .                           record!(self.tables.children[def_id] <-
      .                               self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
      .                                   assert!(f.did.is_local());
      .                                   f.did.index
      .                               })
      .                           )
      .                       }
      .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
      4 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
      .                           record!(self.tables.children[def_id] <-
      .                               associated_item_def_ids.iter().map(|&def_id| {
     63 ( 0.00%)                          assert!(def_id.is_local());
      .                                   def_id.index
      .                               })
      .                           );
      .                       }
      .                       _ => {}
      .                   }
     64 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::OpaqueTy(..)
      .                       | hir::ItemKind::Enum(..)
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..)
    120 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
      .                       _ => {}
      .                   }
     92 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
      4 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
      .                   }
     63 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
      5 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
      5 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
      .                       }
      .                   }
    248 ( 0.00%)      }
      .           
      .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
      .                   record!(self.tables.kind[def_id] <- kind);
      .                   if encode_type {
      .                       self.encode_item_type(def_id);
      .                   }
      .               }
      .           
-- line 1580 ----------------------------------------
-- line 1611 ----------------------------------------
      .                   let const_data = self.encode_rendered_const_for_body(body_id);
      .                   let qualifs = self.tcx.mir_const_qualif(def_id);
      .           
      .                   record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
      .                   self.encode_item_type(def_id.to_def_id());
      .               }
      .           
      .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
      .                   self.lazy(used_libraries.iter())
      .               }
      .           
      .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
      5 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
      .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
      .               }
      .           
      .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
      .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
      .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
      .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
      .           
      2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
      8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
      .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
      .                           syntax_contexts.set(index, this.lazy(ctxt_data));
      .                           Ok(())
      .                       },
      .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
      .                           if let Some(index) = index.as_local() {
      4 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
      4 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
      .                           }
      .                           Ok(())
      .                       },
      .                   );
      .           
      .                   (
      .                       syntax_contexts.encode(&mut self.opaque),
      .                       expn_data_table.encode(&mut self.opaque),
      .                       expn_hash_table.encode(&mut self.opaque),
      .                   )
      .               }
      .           
      .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
      6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
      .                   if is_proc_macro {
      .                       let tcx = self.tcx;
      .                       let hir = tcx.hir();
      .           
      .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
      .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
      .                       let macros =
      .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
      .           
      .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
      .                   } else {
      .                       None
      .                   }
      .               }
      .           
      .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
      7 ( 0.00%)          empty_proc_macro!(self);
      .           
      1 ( 0.00%)          let deps = self
      .                       .tcx
      .                       .crates(())
      .                       .iter()
      .                       .map(|&cnum| {
      .                           let dep = CrateDep {
     19 ( 0.00%)                      name: self.tcx.crate_name(cnum),
     19 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
     19 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
     19 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
     19 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
      .                           };
     95 ( 0.00%)                  (cnum, dep)
      .                       })
      .                       .collect::<Vec<_>>();
      .           
      .                   {
      .                       // Sanity-check the crate numbers
      .                       let mut expected_cnum = 1;
     38 ( 0.00%)              for &(n, _) in &deps {
     48 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
      .                           expected_cnum += 1;
      .                       }
      .                   }
      .           
      .                   // We're just going to write a list of crate 'name-hash-version's, with
      .                   // the assumption that they are numbered 1 to n.
      .                   // FIXME (#2166): This is not nearly enough to support correct versioning
      .                   // but is enough to get transitive crate dependencies working.
      .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
      .               }
      .           
      .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      .                   let lib_features = tcx.lib_features(());
      2 ( 0.00%)          self.lazy(lib_features.to_vec())
      .               }
      .           
      .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
      3 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
      .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
      .               }
      .           
      .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
      4 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      1 ( 0.00%)          let lang_items = tcx.lang_items();
      2 ( 0.00%)          let lang_items = lang_items.items().iter();
      .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
    568 ( 0.00%)              if let Some(def_id) = opt_def_id {
      .                           if def_id.is_local() {
      .                               return Some((def_id.index, i));
      .                           }
      .                       }
      .                       None
      .                   }))
      .               }
      .           
      .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          let tcx = self.tcx;
      1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
      .               }
      .           
      .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
      3 ( 0.00%)          empty_proc_macro!(self);
      1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
      .               }
      .           
      .               /// Encodes an index, mapping each trait to its (local) implementations.
      .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
      .                   debug!("EncodeContext::encode_traits_and_impls()");
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let tcx = self.tcx;
      5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
      4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
      .           
      .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
      .           
      .                   // Bring everything into deterministic order for hashing
      .                   all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
      .           
      .                   let all_impls: Vec<_> = all_impls
      .                       .into_iter()
     15 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
      .                           // Bring everything into deterministic order for hashing
      .                           impls.sort_by_cached_key(|&(index, _)| {
      .                               tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
      .                           });
      .           
      4 ( 0.00%)                  TraitImpls {
      .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
      3 ( 0.00%)                      impls: self.lazy(&impls),
      .                           }
      8 ( 0.00%)              })
      .                       .collect();
      .           
      .                   self.lazy(&all_impls)
      .               }
      .           
      .               // Encodes all symbols exported from this crate into the metadata.
      .               //
      .               // This pass is seeded off the reachability list calculated in the
      .               // middle::reachable module but filters out items that either don't have a
      .               // symbol associated with them (they weren't translated) or if they're an FFI
      .               // definition (as that's not defined in this crate).
      .               fn encode_exported_symbols(
      .                   &mut self,
      .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
      .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      .                   // The metadata symbol name is special. It should not show up in
      .                   // downstream crates.
      9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
      .           
      .                   self.lazy(
      .                       exported_symbols
      .                           .iter()
     74 ( 0.00%)                  .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
      .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
      .                               _ => true,
      .                           })
      .                           .cloned(),
      .                   )
      .               }
      .           
      .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
      2 ( 0.00%)          empty_proc_macro!(self);
      2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
      4 ( 0.00%)          for (ty, arr) in formats.iter() {
      2 ( 0.00%)              if *ty != CrateType::Dylib {
      .                           continue;
      .                       }
      .                       return self.lazy(arr.iter().map(|slot| match *slot {
      .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
      .           
      .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
      .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
      .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
      .               }
      .           }
      .           
      .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
      .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
     64 ( 0.00%)          self.tcx.hir()
      .               }
265,815 ( 0.03%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
 29,535 ( 0.00%)          intravisit::walk_expr(self, ex);
      .                   self.encode_info_for_expr(ex);
236,280 ( 0.02%)      }
      .               fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
      .                   intravisit::walk_anon_const(self, c);
      .                   self.encode_info_for_anon_const(c.hir_id);
      .               }
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    102 ( 0.00%)          intravisit::walk_item(self, item);
     68 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
    128 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
      .                   }
    136 ( 0.00%)          self.encode_addl_info_for_item(item);
      .               }
      .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
      .                   intravisit::walk_foreign_item(self, ni);
      .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
      .               }
    594 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
      .                   intravisit::walk_generics(self, generics);
      .                   self.encode_info_for_generics(generics);
    528 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
      .               fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
      .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
      .                       for (field_index, _field) in variant.fields.iter().enumerate() {
      .                           self.encode_field(adt_def, variant_index, field_index);
      .                       }
-- line 1955 ----------------------------------------
-- line 1975 ----------------------------------------
      .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
      .                               }
      .                           }
      .                       }
      .                   }
      .               }
      .           
      .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
 59,070 ( 0.01%)          if let hir::ExprKind::Closure(..) = expr.kind {
      .                       self.encode_info_for_closure(expr.hir_id);
      .                   }
      .               }
      .           
      .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
      .                   record!(self.tables.ident_span[def_id] <- ident.span);
      .               }
      .           
      .               /// In some cases, along with the item itself, we also
      .               /// encode some sub-items. Usually we want some info from the item
      .               /// so it's easier to do that here then to wait until we would encounter
      .               /// normally in the visitor walk.
    306 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
    170 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::Macro(..)
      .                       | hir::ItemKind::Mod(..)
      .                       | hir::ItemKind::ForeignMod { .. }
      .                       | hir::ItemKind::GlobalAsm(..)
      .                       | hir::ItemKind::ExternCrate(..)
-- line 2005 ----------------------------------------
-- line 2031 ----------------------------------------
      .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
      .                           }
      .                       }
      .                       hir::ItemKind::Union(..) => {
      .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
      .                           self.encode_fields(def);
      .                       }
      .                       hir::ItemKind::Impl { .. } => {
    112 ( 0.00%)                  for &trait_item_def_id in
      1 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
      .                           {
      .                               self.encode_info_for_impl_item(trait_item_def_id);
      .                           }
      .                       }
      .                       hir::ItemKind::Trait(..) => {
    106 ( 0.00%)                  for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
      .                           {
      .                               self.encode_info_for_trait_item(item_def_id);
      .                           }
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           struct ImplsVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
      .           }
      .           
      .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
    238 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
     68 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Impl(..) => {
      4 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
      6 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
      .                                   self.tcx,
      .                                   trait_ref.self_ty(),
      .                                   SimplifyParams::No,
      .                                   StripReferences::No,
      .                               );
      .           
      .                               self.impls
      .                                   .entry(trait_ref.def_id)
      .                                   .or_default()
      .                                   .push((item.def_id.local_def_index, simplified_self_ty));
      .                           }
      .                       }
      .                       _ => {}
      .                   }
    272 ( 0.00%)      }
      .           
      .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
      .           
      .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
      .                   // handled in `visit_item` above
      .               }
      .           
      .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn raw_data(&self) -> &[u8] {
      .                   &self.raw_data
      .               }
      .           }
      .           
     10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
      5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
      .           
      .               // Since encoding metadata is not in a query, and nothing is cached,
      .               // there's no need to do dep-graph tracking for any of it.
      .               tcx.dep_graph.assert_ignored();
      .           
      7 ( 0.00%)      join(
      3 ( 0.00%)          || encode_metadata_impl(tcx),
      .                   || {
      5 ( 0.00%)              if tcx.sess.threads() == 1 {
      .                           return;
      .                       }
      .                       // Prefetch some queries used by metadata encoding.
      .                       // This is not necessary for correctness, but is only done for performance reasons.
      .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
      .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
      .                   },
      .               )
      .               .0
      9 ( 0.00%)  }
      .           
      9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
      1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
      .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
      .           
      .               // Will be filled with the root position after encoding everything.
      .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
      .           
      2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
      3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
      2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
      .               drop(source_map_files);
      .           
      .               let hygiene_ctxt = HygieneEncodeContext::default();
      .           
     35 ( 0.00%)      let mut ecx = EncodeContext {
      4 ( 0.00%)          opaque: encoder,
      .                   tcx,
      2 ( 0.00%)          feat: tcx.features(),
      .                   tables: Default::default(),
      .                   lazy_state: LazyState::NoNode,
      .                   type_shorthands: Default::default(),
      .                   predicate_shorthands: Default::default(),
      4 ( 0.00%)          source_file_cache,
      .                   interpret_allocs: Default::default(),
      4 ( 0.00%)          required_source_files,
      2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
      .                   hygiene_ctxt: &hygiene_ctxt,
      .               };
      .           
      .               // Encode the rustc version string in a predictable location.
      .               rustc_version().encode(&mut ecx).unwrap();
      .           
      .               // Encode all the entries and extra information in the crate,
      .               // culminating in the `CrateRoot` which points to all of it.
      1 ( 0.00%)      let root = ecx.encode_crate_root();
      .           
      7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
      .           
      .               // Encode the root position.
      .               let header = METADATA_HEADER.len();
      .               let pos = root.position.get();
      3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
      3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
      1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
      5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
      .           
      .               // Record metadata size for self-profiling
      .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
      .           
      5 ( 0.00%)      EncodedMetadata { raw_data: result }
     12 ( 0.00%)  }
      .           
      .           pub fn provide(providers: &mut Providers) {
      2 ( 0.00%)      *providers = Providers {
      .                   traits_in_crate: |tcx, cnum| {
      1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
      .           
      1 ( 0.00%)              #[derive(Default)]
      .                       struct TraitsVisitor {
      .                           traits: Vec<DefId>,
      .                       }
      .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
      .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
    136 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
      1 ( 0.00%)                          self.traits.push(item.def_id.to_def_id());
      .                               }
      .                           }
      .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
      .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
      .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
      .                       }
      .           
      .                       let mut visitor = TraitsVisitor::default();
      4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
      .                       // Bring everything into deterministic order.
      .                       visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
      .                       tcx.arena.alloc_slice(&visitor.traits)
      .                   },
      .           
      .                   ..*providers
      .               };
      .           }
-- line 2257 ----------------------------------------

 69,118 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs
--------------------------------------------------------------------------------
Ir               

-- line 43 ----------------------------------------
      .               pub(super) key_hash: u64,
      .               shard: usize,
      .           }
      .           
      .           // We compute the key's hash once and then use it for both the
      .           // shard lookup and the hashmap lookup. This relies on the fact
      .           // that both of them use `FxHasher`.
      .           fn hash_for_shard<K: Hash>(key: &K) -> u64 {
 88,959 ( 0.01%)      let mut hasher = FxHasher::default();
    289 ( 0.00%)      key.hash(&mut hasher);
     34 ( 0.00%)      hasher.finish()
      .           }
      .           
      .           impl<C: QueryCache> QueryCacheStore<C> {
    126 ( 0.00%)      pub(super) fn get_lookup<'tcx>(
      .                   &'tcx self,
      .                   key: &C::Key,
      .               ) -> (QueryLookup, LockGuard<'tcx, C::Sharded>) {
      .                   let key_hash = hash_for_shard(key);
      .                   let shard = get_shard_index_by_hash(key_hash);
      .                   let lock = self.shards.get_shard_by_index(shard).lock();
    468 ( 0.00%)          (QueryLookup { key_hash, shard }, lock)
    355 ( 0.00%)      }
      .           
      .               pub fn iter_results(&self, f: &mut dyn FnMut(&C::Key, &C::Value, DepNodeIndex)) {
      .                   self.cache.iter(&self.shards, f)
      .               }
      .           }
      .           
      .           struct QueryStateShard<D, K> {
      .               active: FxHashMap<K, QueryResult<D>>,
-- line 73 ----------------------------------------
-- line 190 ----------------------------------------
      .               ) -> TryGetJob<'b, CTX::DepKind, K>
      .               where
      .                   CTX: QueryContext,
      .               {
      .                   let shard = lookup.shard;
      .                   let mut state_lock = state.shards.get_shard_by_index(shard).lock();
      .                   let lock = &mut *state_lock;
      .           
 76,578 ( 0.01%)          match lock.active.entry(key) {
      .                       Entry::Vacant(entry) => {
      .                           // Generate an id unique within this shard.
 37,536 ( 0.00%)                  let id = lock.jobs.checked_add(1).unwrap();
 37,536 ( 0.00%)                  lock.jobs = id;
      .                           let id = QueryShardJobId(NonZeroU32::new(id).unwrap());
      .           
      .                           let job = tcx.current_query_job();
      .                           let job = QueryJob::new(id, span, job);
      .           
      .                           let key = entry.key().clone();
      .                           entry.insert(QueryResult::Started(job));
      .           
      .                           let global_id = QueryJobId::new(id, shard, dep_kind);
      .                           let owner = JobOwner { state, id: global_id, key };
 89,398 ( 0.01%)                  return TryGetJob::NotYetStarted(owner);
      .                       }
      .                       Entry::Occupied(mut entry) => {
      .                           match entry.get_mut() {
      .                               #[cfg(not(parallel_compiler))]
      .                               QueryResult::Started(job) => {
      .                                   let id = QueryJobId::new(job.id, shard, dep_kind);
      .           
      .                                   drop(state_lock);
-- line 221 ----------------------------------------
-- line 262 ----------------------------------------
      .                   cache: &QueryCacheStore<C>,
      .                   result: C::Value,
      .                   dep_node_index: DepNodeIndex,
      .               ) -> C::Stored
      .               where
      .                   C: QueryCache<Key = K>,
      .               {
      .                   // We can move out of `self` here because we `mem::forget` it below
  9,524 ( 0.00%)          let key = unsafe { ptr::read(&self.key) };
      .                   let state = self.state;
      .           
      .                   // Forget ourself so our destructor won't poison the query
      .                   mem::forget(self);
      .           
    451 ( 0.00%)          let (job, result) = {
      .                       let key_hash = hash_for_shard(&key);
      .                       let shard = get_shard_index_by_hash(key_hash);
      .                       let job = {
      .                           let mut lock = state.shards.get_shard_by_index(shard).lock();
      3 ( 0.00%)                  match lock.active.remove(&key).unwrap() {
      .                               QueryResult::Started(job) => job,
      .                               QueryResult::Poisoned => panic!(),
      .                           }
      .                       };
      .                       let result = {
      .                           let mut lock = cache.shards.get_shard_by_index(shard).lock();
 15,685 ( 0.00%)                  cache.cache.complete(&mut lock, key, result, dep_node_index)
      .                       };
    258 ( 0.00%)              (job, result)
      .                   };
      .           
      .                   job.signal_complete();
      .                   result
      .               }
      .           }
      .           
      .           impl<'tcx, D, K> Drop for JobOwner<'tcx, D, K>
-- line 298 ----------------------------------------
-- line 347 ----------------------------------------
      .               Cycle(CycleError),
      .           }
      .           
      .           /// Checks if the query is already computed and in the cache.
      .           /// It returns the shard index and a lock guard to the shard,
      .           /// which will be used if the query is not in the cache and we need
      .           /// to compute it.
      .           #[inline]
 43,839 ( 0.00%)  pub fn try_get_cached<'a, CTX, C, R, OnHit>(
      .               tcx: CTX,
      .               cache: &'a QueryCacheStore<C>,
      .               key: &C::Key,
      .               // `on_hit` can be called while holding a lock to the query cache
      .               on_hit: OnHit,
      .           ) -> Result<R, QueryLookup>
      .           where
      .               C: QueryCache,
      .               CTX: DepContext,
      .               OnHit: FnOnce(&C::Stored) -> R,
      .           {
      .               cache.cache.lookup(cache, &key, |value, index| {
433,615 ( 0.05%)          if unlikely!(tcx.profiler().enabled()) {
      .                       tcx.profiler().query_cache_hit(index.into());
      .                   }
      .                   tcx.dep_graph().read_index(index);
344,494 ( 0.04%)          on_hit(value)
      .               })
 49,096 ( 0.01%)  }
      .           
 68,853 ( 0.01%)  fn try_execute_query<CTX, C>(
      .               tcx: CTX,
      .               state: &QueryState<CTX::DepKind, C::Key>,
      .               cache: &QueryCacheStore<C>,
      .               span: Span,
      .               key: C::Key,
      .               lookup: QueryLookup,
      .               dep_node: Option<DepNode<CTX::DepKind>>,
      .               query: &QueryVtable<CTX, C::Key, C::Value>,
-- line 384 ----------------------------------------
-- line 391 ----------------------------------------
      .               match JobOwner::<'_, CTX::DepKind, C::Key>::try_start(
      .                   &tcx,
      .                   state,
      .                   span,
      .                   key.clone(),
      .                   lookup,
      .                   query.dep_kind,
      .               ) {
182,506 ( 0.02%)          TryGetJob::NotYetStarted(job) => {
420,563 ( 0.04%)              let (result, dep_node_index) = execute_job(tcx, key, dep_node, query, job.id);
  7,403 ( 0.00%)              let result = job.complete(cache, result, dep_node_index);
 99,815 ( 0.01%)              (result, Some(dep_node_index))
      .                   }
      .                   TryGetJob::Cycle(error) => {
      .                       let result = mk_cycle(tcx, error, query.handle_cycle_error, &cache.cache);
      .                       (result, None)
      .                   }
      .                   #[cfg(parallel_compiler)]
      .                   TryGetJob::JobCompleted(query_blocked_prof_timer) => {
      .                       let (v, index) = cache
-- line 410 ----------------------------------------
-- line 415 ----------------------------------------
      .                       if unlikely!(tcx.dep_context().profiler().enabled()) {
      .                           tcx.dep_context().profiler().query_cache_hit(index.into());
      .                       }
      .                       query_blocked_prof_timer.finish_with_query_invocation_id(index.into());
      .           
      .                       (v, Some(index))
      .                   }
      .               }
 72,075 ( 0.01%)  }
      .           
      .           fn execute_job<CTX, K, V>(
      .               tcx: CTX,
      .               key: K,
      .               mut dep_node_opt: Option<DepNode<CTX::DepKind>>,
      .               query: &QueryVtable<CTX, K, V>,
      .               job_id: QueryJobId<CTX::DepKind>,
      .           ) -> (V, DepNodeIndex)
-- line 431 ----------------------------------------
-- line 432 ----------------------------------------
      .           where
      .               K: Clone + DepNodeParams<CTX::DepContext>,
      .               V: Debug,
      .               CTX: QueryContext,
      .           {
      .               let dep_graph = tcx.dep_context().dep_graph();
      .           
      .               // Fast path for when incr. comp. is off.
 37,536 ( 0.00%)      if !dep_graph.is_fully_enabled() {
      .                   let prof_timer = tcx.dep_context().profiler().query_provider();
 39,150 ( 0.00%)          let result = tcx.start_query(job_id, None, || query.compute(*tcx.dep_context(), key));
      .                   let dep_node_index = dep_graph.next_virtual_depnode_index();
      .                   prof_timer.finish_with_query_invocation_id(dep_node_index.into());
 15,793 ( 0.00%)          return (result, dep_node_index);
      .               }
      .           
      .               if !query.anon && !query.eval_always {
      .                   // `to_dep_node` is expensive for some `DepKind`s.
      .                   let dep_node =
      .                       dep_node_opt.get_or_insert_with(|| query.to_dep_node(*tcx.dep_context(), &key));
      .           
      .                   // The diagnostics for this query will be promoted to the current session during
-- line 453 ----------------------------------------
-- line 691 ----------------------------------------
      .           /// Executing `query::ensure(D)` is considered a read of the dep-node `D`.
      .           /// Returns true if the query should still run.
      .           ///
      .           /// This function is particularly useful when executing passes for their
      .           /// side-effects -- e.g., in order to report errors for erroneous programs.
      .           ///
      .           /// Note: The optimization is only available during incr. comp.
      .           #[inline(never)]
  7,128 ( 0.00%)  fn ensure_must_run<CTX, K, V>(
      .               tcx: CTX,
      .               key: &K,
      .               query: &QueryVtable<CTX, K, V>,
      .           ) -> (bool, Option<DepNode<CTX::DepKind>>)
      .           where
      .               K: crate::dep_graph::DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
  1,782 ( 0.00%)      if query.eval_always {
      4 ( 0.00%)          return (true, None);
      .               }
      .           
      .               // Ensuring an anonymous query makes no sense
  1,778 ( 0.00%)      assert!(!query.anon);
      .           
      .               let dep_node = query.to_dep_node(*tcx.dep_context(), key);
      .           
      .               let dep_graph = tcx.dep_context().dep_graph();
  4,975 ( 0.00%)      match dep_graph.try_mark_green(tcx, &dep_node) {
      .                   None => {
      .                       // A None return from `try_mark_green` means that this is either
      .                       // a new dep node or that the dep node has already been marked red.
      .                       // Either way, we can't call `dep_graph.read()` as we don't have the
      .                       // DepNodeIndex. We must invoke the query itself. The performance cost
      .                       // this introduces should be negligible as we'll immediately hit the
      .                       // in-memory cache, or another query down the line will.
  5,334 ( 0.00%)              (true, Some(dep_node))
      .                   }
      .                   Some((_, dep_node_index)) => {
      .                       dep_graph.read_index(dep_node_index);
      .                       tcx.dep_context().profiler().query_cache_hit(dep_node_index.into());
      .                       (false, None)
      .                   }
      .               }
  7,128 ( 0.00%)  }
      .           
      .           pub enum QueryMode {
      .               Get,
      .               Ensure,
      .           }
      .           
444,253 ( 0.05%)  pub fn get_query<Q, CTX>(
      .               tcx: CTX,
      .               span: Span,
      .               key: Q::Key,
      .               lookup: QueryLookup,
      .               mode: QueryMode,
      .           ) -> Option<Q::Stored>
      .           where
      .               Q: QueryDescription<CTX>,
      .               Q::Key: DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
      .               let query = Q::make_vtable(tcx, &key);
104,711 ( 0.01%)      let dep_node = if let QueryMode::Ensure = mode {
  8,325 ( 0.00%)          let (must_run, dep_node) = ensure_must_run(tcx, &key, &query);
    891 ( 0.00%)          if !must_run {
      .                       return None;
      .                   }
  1,846 ( 0.00%)          dep_node
      .               } else {
      .                   None
      .               };
      .           
      .               debug!("ty::query::get_query<{}>(key={:?}, span={:?})", Q::NAME, key, span);
104,145 ( 0.01%)      let (result, dep_node_index) = try_execute_query(
      .                   tcx,
      .                   Q::query_state(tcx),
      .                   Q::query_cache(tcx),
      .                   span,
119,421 ( 0.01%)          key,
      .                   lookup,
 30,826 ( 0.00%)          dep_node,
      .                   &query,
      .               );
 75,072 ( 0.01%)      if let Some(dep_node_index) = dep_node_index {
      .                   tcx.dep_context().dep_graph().read_index(dep_node_index)
      .               }
  8,734 ( 0.00%)      Some(result)
455,492 ( 0.05%)  }
      .           
      .           pub fn force_query<Q, CTX>(tcx: CTX, key: Q::Key, dep_node: DepNode<CTX::DepKind>)
      .           where
      .               Q: QueryDescription<CTX>,
      .               Q::Key: DepNodeParams<CTX::DepContext>,
      .               CTX: QueryContext,
      .           {
      .               // We may be concurrently trying both execute and force a query.
-- line 787 ----------------------------------------

454,824 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_query_system/src/query/plumbing.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs
--------------------------------------------------------------------------------
Ir                 

-- line 4 ----------------------------------------
        .           
        .           use super::Utf8Error;
        .           
        .           /// Returns the initial codepoint accumulator for the first byte.
        .           /// The first byte is special, only want bottom 5 bits for width 2, 4 bits
        .           /// for width 3, and 3 bits for width 4.
        .           #[inline]
        .           const fn utf8_first_byte(byte: u8, width: u32) -> u32 {
       18 ( 0.00%)      (byte & (0x7F >> width)) as u32
        .           }
        .           
        .           /// Returns the value of `ch` updated with continuation byte `byte`.
        .           #[inline]
        .           const fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
       30 ( 0.00%)      (ch << 6) | (byte & CONT_MASK) as u32
        .           }
        .           
        .           /// Checks whether the byte is a UTF-8 continuation byte (i.e., starts with the
        .           /// bits `10`).
        .           #[inline]
        .           pub(super) const fn utf8_is_cont_byte(byte: u8) -> bool {
      438 ( 0.00%)      (byte as i8) < -64
        .           }
        .           
        .           /// Reads the next code point out of a byte iterator (assuming a
        .           /// UTF-8-like encoding).
        .           ///
        .           /// # Safety
        .           ///
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[inline]
        .           pub unsafe fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
        .               // Decode UTF-8
1,597,260 ( 0.17%)      let x = *bytes.next()?;
2,816,532 ( 0.30%)      if x < 128 {
   58,526 ( 0.01%)          return Some(x as u32);
        .               }
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [[[x y] z] w]
        .               // NOTE: Performance is sensitive to the exact formulation here
        .               let init = utf8_first_byte(x, 2);
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
        .               let y = unsafe { *bytes.next().unwrap_unchecked() };
        .               let mut ch = utf8_acc_cont_byte(init, y);
       36 ( 0.00%)      if x >= 0xE0 {
        .                   // [[x y z] w] case
        .                   // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        .                   // SAFETY: `bytes` produces an UTF-8-like string,
        .                   // so the iterator must produce a value here.
        .                   let z = unsafe { *bytes.next().unwrap_unchecked() };
        .                   let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
        .                   ch = init << 12 | y_z;
       16 ( 0.00%)          if x >= 0xF0 {
        .                       // [x y z w] case
        .                       // use only the lower 3 bits of `init`
        .                       // SAFETY: `bytes` produces an UTF-8-like string,
        .                       // so the iterator must produce a value here.
        .                       let w = unsafe { *bytes.next().unwrap_unchecked() };
        .                       ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
        .                   }
        .               }
-- line 67 ----------------------------------------
-- line 77 ----------------------------------------
        .           /// `bytes` must produce a valid UTF-8-like (UTF-8 or WTF-8) string
        .           #[inline]
        .           pub(super) unsafe fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>
        .           where
        .               I: DoubleEndedIterator<Item = &'a u8>,
        .           {
        .               // Decode UTF-8
        .               let w = match *bytes.next_back()? {
      645 ( 0.00%)          next_byte if next_byte < 128 => return Some(next_byte as u32),
        .                   back_byte => back_byte,
        .               };
        .           
        .               // Multibyte case follows
        .               // Decode from a byte combination out of: [x [y [z w]]]
        .               let mut ch;
        .               // SAFETY: `bytes` produces an UTF-8-like string,
        .               // so the iterator must produce a value here.
-- line 93 ----------------------------------------
-- line 113 ----------------------------------------
        .           }
        .           
        .           // use truncation to fit u64 into usize
        .           const NONASCII_MASK: usize = 0x80808080_80808080u64 as usize;
        .           
        .           /// Returns `true` if any byte in the word `x` is nonascii (>= 128).
        .           #[inline]
        .           const fn contains_nonascii(x: usize) -> bool {
   25,413 ( 0.00%)      (x & NONASCII_MASK) != 0
        .           }
        .           
        .           /// Walks through `v` checking that it's a valid UTF-8 sequence,
        .           /// returning `Ok(())` in that case, or, if it is invalid, `Err(err)`.
        .           #[inline(always)]
        .           #[rustc_const_unstable(feature = "str_internals", issue = "none")]
        .           pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {
        .               let mut index = 0;
        .               let len = v.len();
        .           
        .               let usize_bytes = mem::size_of::<usize>();
        .               let ascii_block_size = 2 * usize_bytes;
      711 ( 0.00%)      let blocks_end = if len >= ascii_block_size { len - ascii_block_size + 1 } else { 0 };
        .               let align = v.as_ptr().align_offset(usize_bytes);
        .           
      926 ( 0.00%)      while index < len {
        .                   let old_offset = index;
        .                   macro_rules! err {
        .                       ($error_len: expr) => {
        .                           return Err(Utf8Error { valid_up_to: old_offset, error_len: $error_len })
        .                       };
        .                   }
        .           
        .                   macro_rules! next {
-- line 145 ----------------------------------------
-- line 148 ----------------------------------------
        .                           // we needed data, but there was none: error!
        .                           if index >= len {
        .                               err!(None)
        .                           }
        .                           v[index]
        .                       }};
        .                   }
        .           
      423 ( 0.00%)          let first = v[index];
      846 ( 0.00%)          if first >= 128 {
        .                       let w = utf8_char_width(first);
        .                       // 2-byte encoding is for codepoints  \u{0080} to  \u{07ff}
        .                       //        first  C2 80        last DF BF
        .                       // 3-byte encoding is for codepoints  \u{0800} to  \u{ffff}
        .                       //        first  E0 A0 80     last EF BF BF
        .                       //   excluding surrogates codepoints  \u{d800} to  \u{dfff}
        .                       //               ED A0 80 to       ED BF BF
        .                       // 4-byte encoding is for codepoints \u{1000}0 to \u{10ff}ff
-- line 165 ----------------------------------------
-- line 169 ----------------------------------------
        .                       //
        .                       // https://tools.ietf.org/html/rfc3629
        .                       // UTF8-1      = %x00-7F
        .                       // UTF8-2      = %xC2-DF UTF8-tail
        .                       // UTF8-3      = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) /
        .                       //               %xED %x80-9F UTF8-tail / %xEE-EF 2( UTF8-tail )
        .                       // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /
        .                       //               %xF4 %x80-8F 2( UTF8-tail )
       16 ( 0.00%)              match w {
        .                           2 => {
       10 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(1))
        .                               }
        .                           }
        .                           3 => {
        8 ( 0.00%)                      match (first, next!()) {
        .                                   (0xE0, 0xA0..=0xBF)
        7 ( 0.00%)                          | (0xE1..=0xEC, 0x80..=0xBF)
        .                                   | (0xED, 0x80..=0x9F)
        .                                   | (0xEE..=0xEF, 0x80..=0xBF) => {}
        .                                   _ => err!(Some(1)),
        .                               }
        5 ( 0.00%)                      if next!() as i8 >= -64 {
        .                                   err!(Some(2))
        .                               }
        .                           }
        .                           4 => {
        .                               match (first, next!()) {
        .                                   (0xF0, 0x90..=0xBF) | (0xF1..=0xF3, 0x80..=0xBF) | (0xF4, 0x80..=0x8F) => {}
        .                                   _ => err!(Some(1)),
        .                               }
-- line 199 ----------------------------------------
-- line 201 ----------------------------------------
        .                                   err!(Some(2))
        .                               }
        .                               if next!() as i8 >= -64 {
        .                                   err!(Some(3))
        .                               }
        .                           }
        .                           _ => err!(Some(1)),
        .                       }
        9 ( 0.00%)              index += 1;
        .                   } else {
        .                       // Ascii case, try to skip forward quickly.
        .                       // When the pointer is aligned, read 2 words of data per iteration
        .                       // until we find a word containing a non-ascii byte.
    1,472 ( 0.00%)              if align != usize::MAX && align.wrapping_sub(index) % usize_bytes == 0 {
        .                           let ptr = v.as_ptr();
   51,244 ( 0.01%)                  while index < blocks_end {
        .                               // SAFETY: since `align - index` and `ascii_block_size` are
        .                               // multiples of `usize_bytes`, `block = ptr.add(index)` is
        .                               // always aligned with a `usize` so it's safe to dereference
        .                               // both `block` and `block.offset(1)`.
        .                               unsafe {
        .                                   let block = ptr.add(index) as *const usize;
        .                                   // break if there is a nonascii byte
   25,413 ( 0.00%)                          let zu = contains_nonascii(*block);
        .                                   let zv = contains_nonascii(*block.offset(1));
   50,826 ( 0.01%)                          if zu || zv {
        .                                       break;
        .                                   }
        .                               }
   50,820 ( 0.01%)                      index += ascii_block_size;
        .                           }
        .                           // step from the point where the wordwise loop stopped
    7,991 ( 0.00%)                  while index < len && v[index] < 128 {
    1,741 ( 0.00%)                      index += 1;
        .                           }
        .                       } else {
      208 ( 0.00%)                  index += 1;
        .                       }
        .                   }
        .               }
        .           
        .               Ok(())
        .           }
        .           
        .           // https://tools.ietf.org/html/rfc3629
-- line 245 ----------------------------------------
-- line 263 ----------------------------------------
        .               4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F
        .           ];
        .           
        .           /// Given a first byte, determines how many bytes are in this UTF-8 character.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[must_use]
        .           #[inline]
        .           pub const fn utf8_char_width(b: u8) -> usize {
        6 ( 0.00%)      UTF8_CHAR_WIDTH[b as usize] as usize
        .           }
        .           
        .           /// Mask of the value bits of a continuation byte.
        .           const CONT_MASK: u8 = 0b0011_1111;
        .           
        .           // truncate `&str` to length at most equal to `max`
        .           // return `true` if it were truncated, and the new str.
        .           pub(super) fn truncate_to_char_boundary(s: &str, mut max: usize) -> (bool, &str) {
-- line 279 ----------------------------------------

  106,092 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/validations.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
  814,959 ( 0.09%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
    6,570 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
       14 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
-- line 208 ----------------------------------------
-- line 213 ----------------------------------------
        .                       )
        .                   });
        .                   if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
       16 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
  271,653 ( 0.03%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
   90,551 ( 0.01%)      Cursor::new(input).advance_token()
  362,204 ( 0.04%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        .                   if cursor.is_eof() {
        .                       None
        .                   } else {
-- line 235 ----------------------------------------
-- line 243 ----------------------------------------
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  153,680 ( 0.02%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
  117,012 ( 0.01%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
        .           }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
        .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
        .           }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
  724,408 ( 0.08%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
  361,603 ( 0.04%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
      408 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        .                           _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
-- line 313 ----------------------------------------
-- line 322 ----------------------------------------
        .                               }
        .                               let kind = RawStr { n_hashes, err };
        .                               Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
      585 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
        .                               let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
        .                               if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
-- line 338 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  179,013 ( 0.02%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
        .                           TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
      138 ( 0.00%)              ';' => Semi,
   58,442 ( 0.01%)              ',' => Comma,
      152 ( 0.00%)              '.' => Dot,
      308 ( 0.00%)              '(' => OpenParen,
      308 ( 0.00%)              ')' => CloseParen,
       94 ( 0.00%)              '{' => OpenBrace,
       94 ( 0.00%)              '}' => CloseBrace,
      198 ( 0.00%)              '[' => OpenBracket,
      198 ( 0.00%)              ']' => CloseBracket,
        .                       '@' => At,
       84 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
        .                       '?' => Question,
      178 ( 0.00%)              ':' => Colon,
        .                       '$' => Dollar,
       82 ( 0.00%)              '=' => Eq,
       34 ( 0.00%)              '!' => Bang,
        .                       '<' => Lt,
      154 ( 0.00%)              '>' => Gt,
      128 ( 0.00%)              '-' => Minus,
      116 ( 0.00%)              '&' => And,
       88 ( 0.00%)              '|' => Or,
        2 ( 0.00%)              '+' => Plus,
        .                       '*' => Star,
        .                       '^' => Caret,
        .                       '%' => Percent,
        .           
        .                       // Lifetime or character literal.
   87,816 ( 0.01%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
        .                           let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
        .                           if terminated {
        .                               self.eat_literal_suffix();
        .                           }
-- line 413 ----------------------------------------
-- line 416 ----------------------------------------
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
  814,959 ( 0.09%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
      264 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
      216 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
    3,991 ( 0.00%)          self.eat_while(|c| c != '\n');
      306 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
        .                   let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
        .                   }
        .           
        .                   BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
   30,121 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
    3,285 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
    1,314 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
    1,314 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
      657 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
      657 ( 0.00%)              _ => Ident,
        .                   }
    2,628 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
  204,904 ( 0.02%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
   58,544 ( 0.01%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
        .           
   29,234 ( 0.00%)          if !can_be_a_lifetime {
   87,729 ( 0.01%)              let terminated = self.single_quoted_string();
        .                       let suffix_start = self.len_consumed();
   58,486 ( 0.01%)              if terminated {
        .                           self.eat_literal_suffix();
        .                       }
        .                       let kind = Char { terminated };
  116,972 ( 0.01%)              return Literal { kind, suffix_start };
        .                   }
        .           
        .                   // Either a lifetime or a character literal with
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
       58 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
       58 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
       58 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
  175,632 ( 0.02%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
   58,504 ( 0.01%)          if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
        .                   }
        .           
        .                   // Literal has more than one symbol.
        .           
        .                   // Parse until either quotes are terminated or error is detected.
        .                   loop {
1,450,414 ( 0.15%)              match self.first() {
        .                           // Quotes are terminated, finish parsing.
        .                           '\'' => {
        .                               self.bump();
        .                               return true;
        .                           }
        .                           // Probably beginning of the comment, which we don't want to include
        .                           // to the error report.
        .                           '/' => break,
-- line 660 ----------------------------------------
-- line 670 ----------------------------------------
        .                           // Skip the character.
        .                           _ => {
        .                               self.bump();
        .                           }
        .                       }
        .                   }
        .                   // String was not terminated.
        .                   false
   29,243 ( 0.00%)      }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
        .                       match c {
        .                           '"' => {
-- line 686 ----------------------------------------
-- line 816 ----------------------------------------
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
   58,486 ( 0.01%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
   87,729 ( 0.01%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        .                   self.eat_while(is_id_continue);
  116,972 ( 0.01%)      }
        .           }

1,194,511 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .           /// - `promoted` -- map of promoted constants within `body`
      .           /// - `universal_regions` -- the universal regions from `body`s function signature
      .           /// - `location_table` -- MIR location map of `body`
      .           /// - `borrow_set` -- information about borrows occurring in `body`
      .           /// - `all_facts` -- when using Polonius, this is the generated set of Polonius facts
      .           /// - `flow_inits` -- results of a maybe-init dataflow analysis
      .           /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis
      .           /// - `elements` -- MIR region map
    768 ( 0.00%)  pub(crate) fn type_check<'mir, 'tcx>(
      .               infcx: &InferCtxt<'_, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
      .               body: &Body<'tcx>,
      .               promoted: &IndexVec<Promoted, Body<'tcx>>,
      .               universal_regions: &Rc<UniversalRegions<'tcx>>,
      .               location_table: &LocationTable,
      .               borrow_set: &BorrowSet<'tcx>,
      .               all_facts: &mut Option<AllFacts>,
      .               flow_inits: &mut ResultsCursor<'mir, 'tcx, MaybeInitializedPlaces<'mir, 'tcx>>,
      .               move_data: &MoveData<'tcx>,
      .               elements: &Rc<RegionValueElements>,
      .               upvars: &[Upvar<'tcx>],
      .           ) -> MirTypeckResults<'tcx> {
    576 ( 0.00%)      let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));
      .               let mut universe_causes = FxHashMap::default();
      .               universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());
  1,408 ( 0.00%)      let mut constraints = MirTypeckRegionConstraints {
      .                   placeholder_indices: PlaceholderIndices::default(),
      .                   placeholder_index_to_region: IndexVec::default(),
     64 ( 0.00%)          liveness_constraints: LivenessValues::new(elements.clone()),
      .                   outlives_constraints: OutlivesConstraintSet::default(),
      .                   member_constraints: MemberConstraintSet::default(),
      .                   closure_bounds_mapping: Default::default(),
      .                   type_tests: Vec::default(),
    256 ( 0.00%)          universe_causes,
      .               };
      .           
      .               let CreateResult {
    128 ( 0.00%)          universal_region_relations,
    256 ( 0.00%)          region_bound_pairs,
    256 ( 0.00%)          normalized_inputs_and_output,
    320 ( 0.00%)      } = free_region_relations::create(
      .                   infcx,
      .                   param_env,
      .                   Some(implicit_region_bound),
      .                   universal_regions,
      .                   &mut constraints,
      .               );
      .           
    128 ( 0.00%)      for u in ty::UniverseIndex::ROOT..infcx.universe() {
      .                   let info = UniverseInfo::other();
      .                   constraints.universe_causes.insert(u, info);
      .               }
      .           
    576 ( 0.00%)      let mut borrowck_context = BorrowCheckContext {
     64 ( 0.00%)          universal_regions,
      .                   location_table,
      .                   borrow_set,
      .                   all_facts,
      .                   constraints: &mut constraints,
      .                   upvars,
      .               };
      .           
      .               let opaque_type_values = type_check_internal(
-- line 180 ----------------------------------------
-- line 243 ----------------------------------------
      .                               } else {
      .                                   Some((opaque_type_key, decl))
      .                               }
      .                           })
      .                           .collect()
      .                   },
      .               );
      .           
    768 ( 0.00%)      MirTypeckResults { constraints, universal_region_relations, opaque_type_values }
    512 ( 0.00%)  }
      .           
      .           #[instrument(
      .               skip(infcx, body, promoted, region_bound_pairs, borrowck_context, extra),
      .               level = "debug"
      .           )]
      .           fn type_check_internal<'a, 'tcx, R>(
      .               infcx: &'a InferCtxt<'a, 'tcx>,
      .               param_env: ty::ParamEnv<'tcx>,
-- line 260 ----------------------------------------
-- line 270 ----------------------------------------
      .                   body,
      .                   param_env,
      .                   region_bound_pairs,
      .                   implicit_region_bound,
      .                   borrowck_context,
      .               );
      .               let errors_reported = {
      .                   let mut verifier = TypeVerifier::new(&mut checker, body, promoted);
     64 ( 0.00%)          verifier.visit_body(&body);
     64 ( 0.00%)          verifier.errors_reported
      .               };
      .           
     64 ( 0.00%)      if !errors_reported {
      .                   // if verifier failed, don't do further checks to avoid ICEs
     64 ( 0.00%)          checker.typeck_mir(body);
      .               }
      .           
    832 ( 0.00%)      extra(checker)
      .           }
      .           
      .           fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {
      .               let cx = &mut typeck.borrowck_context;
    256 ( 0.00%)      if let Some(facts) = cx.all_facts {
      .                   let _prof_timer = typeck.infcx.tcx.prof.generic_activity("polonius_fact_generation");
      .                   let location_table = cx.location_table;
      .                   facts.subset_base.extend(cx.constraints.outlives_constraints.outlives().iter().flat_map(
      .                       |constraint: &OutlivesConstraint<'_>| {
      .                           if let Some(from_location) = constraint.locations.from_location() {
      .                               Either::Left(iter::once((
      .                                   constraint.sup,
      .                                   constraint.sub,
-- line 300 ----------------------------------------
-- line 334 ----------------------------------------
      .               body: &'b Body<'tcx>,
      .               promoted: &'b IndexVec<Promoted, Body<'tcx>>,
      .               last_span: Span,
      .               errors_reported: bool,
      .           }
      .           
      .           impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {
      .               fn visit_span(&mut self, span: &Span) {
124,608 ( 0.01%)          if !span.is_dummy() {
 31,152 ( 0.00%)              self.last_span = *span;
      .                   }
      .               }
      .           
  9,207 ( 0.00%)      fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {
      .                   self.sanitize_place(place, location, context);
  6,696 ( 0.00%)      }
      .           
352,548 ( 0.04%)      fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {
      .                   self.super_constant(constant, location);
235,032 ( 0.02%)          let ty = self.sanitize_type(constant, constant.literal.ty());
      .           
264,411 ( 0.03%)          self.cx.infcx.tcx.for_each_free_region(&ty, |live_region| {
      .                       let live_region_vid =
      .                           self.cx.borrowck_context.universal_regions.to_region_vid(live_region);
    168 ( 0.00%)              self.cx
      .                           .borrowck_context
      .                           .constraints
      .                           .liveness_constraints
    168 ( 0.00%)                  .add_element(live_region_vid, location);
      .                   });
      .           
117,516 ( 0.01%)          if let Some(annotation_index) = constant.user_ty {
      .                       if let Err(terr) = self.cx.relate_type_and_user_type(
      .                           constant.literal.ty(),
      .                           ty::Variance::Invariant,
      .                           &UserTypeProjection { base: annotation_index, projs: vec![] },
      .                           location.to_locations(),
      .                           ConstraintCategory::Boring,
      .                       ) {
      .                           let annotation = &self.cx.user_type_annotations[annotation_index];
-- line 373 ----------------------------------------
-- line 377 ----------------------------------------
      .                               "bad constant user type {:?} vs {:?}: {:?}",
      .                               annotation,
      .                               constant.literal.ty(),
      .                               terr,
      .                           );
      .                       }
      .                   } else {
      .                       let tcx = self.tcx();
 88,137 ( 0.01%)              let maybe_uneval = match constant.literal {
 88,137 ( 0.01%)                  ConstantKind::Ty(ct) => match ct.val {
     28 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
      .                               _ => None,
      .                           },
      .                           _ => None,
      .                       };
     56 ( 0.00%)              if let Some(uv) = maybe_uneval {
     56 ( 0.00%)                  if let Some(promoted) = uv.promoted {
      .                               let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,
      .                                                promoted: &Body<'tcx>,
      .                                                ty,
      .                                                san_ty| {
     84 ( 0.00%)                          if let Err(terr) = verifier.cx.eq_types(
      .                                       ty,
      .                                       san_ty,
     56 ( 0.00%)                              location.to_locations(),
      .                                       ConstraintCategory::Boring,
      .                                   ) {
      .                                       span_mirbug!(
      .                                           verifier,
      .                                           promoted,
      .                                           "bad promoted type ({:?}: {:?}): {:?}",
      .                                           ty,
      .                                           san_ty,
      .                                           terr
      .                                       );
      .                                   };
      .                               };
      .           
     56 ( 0.00%)                      if !self.errors_reported {
     28 ( 0.00%)                          let promoted_body = &self.promoted[promoted];
    112 ( 0.00%)                          self.sanitize_promoted(promoted_body, location);
      .           
      .                                   let promoted_ty = promoted_body.return_ty();
      .                                   check_err(self, promoted_body, ty, promoted_ty);
      .                               }
      .                           } else {
      .                               if let Err(terr) = self.cx.fully_perform_op(
      .                                   location.to_locations(),
      .                                   ConstraintCategory::Boring,
-- line 425 ----------------------------------------
-- line 433 ----------------------------------------
      .                                       self,
      .                                       constant,
      .                                       "bad constant type {:?} ({:?})",
      .                                       constant,
      .                                       terr
      .                                   );
      .                               }
      .                           }
117,404 ( 0.01%)              } else if let Some(static_def_id) = constant.check_static_ptr(tcx) {
      .                           let unnormalized_ty = tcx.type_of(static_def_id);
     56 ( 0.00%)                  let locations = location.to_locations();
    196 ( 0.00%)                  let normalized_ty = self.cx.normalize(unnormalized_ty, locations);
    140 ( 0.00%)                  let literal_ty = constant.literal.ty().builtin_deref(true).unwrap().ty;
      .           
     84 ( 0.00%)                  if let Err(terr) = self.cx.eq_types(
      .                               literal_ty,
      .                               normalized_ty,
      .                               locations,
      .                               ConstraintCategory::Boring,
      .                           ) {
      .                               span_mirbug!(self, constant, "bad static type {:?} ({:?})", constant, terr);
      .                           }
      .                       }
      .           
117,693 ( 0.01%)              if let ty::FnDef(def_id, substs) = *constant.literal.ty().kind() {
    118 ( 0.00%)                  let instantiated_predicates = tcx.predicates_of(def_id).instantiate(tcx, substs);
    118 ( 0.00%)                  self.cx.normalize_and_prove_instantiated_predicates(
      .                               def_id,
    354 ( 0.00%)                      instantiated_predicates,
    118 ( 0.00%)                      location.to_locations(),
      .                           );
      .                       }
      .                   }
235,032 ( 0.02%)      }
      .           
  3,982 ( 0.00%)      fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {
      .                   self.super_rvalue(rvalue, location);
  1,086 ( 0.00%)          let rval_ty = rvalue.ty(self.body, self.tcx());
  4,344 ( 0.00%)          self.sanitize_type(rvalue, rval_ty);
      .               }
      .           
  4,530 ( 0.00%)      fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {
      .                   self.super_local_decl(local, local_decl);
  2,265 ( 0.00%)          self.sanitize_type(local_decl, local_decl.ty);
      .           
  1,359 ( 0.00%)          if let Some(user_ty) = &local_decl.user_ty {
      .                       for (user_ty, span) in user_ty.projections_and_spans() {
      .                           let ty = if !local_decl.is_nonref_binding() {
      .                               // If we have a binding of the form `let ref x: T = ..`
      .                               // then remove the outermost reference so we can check the
      .                               // type annotation for the remaining type.
      .                               if let ty::Ref(_, rty, _) = local_decl.ty.kind() {
      .                                   rty
      .                               } else {
-- line 486 ----------------------------------------
-- line 504 ----------------------------------------
      .                                   local,
      .                                   local_decl.ty,
      .                                   local_decl.user_ty,
      .                                   terr,
      .                               );
      .                           }
      .                       }
      .                   }
  3,624 ( 0.00%)      }
      .           
    644 ( 0.00%)      fn visit_body(&mut self, body: &Body<'tcx>) {
    276 ( 0.00%)          self.sanitize_type(&"return type", body.return_ty());
      .                   for local_decl in &body.local_decls {
  2,265 ( 0.00%)              self.sanitize_type(local_decl, local_decl.ty);
      .                   }
    184 ( 0.00%)          if self.errors_reported {
      .                       return;
      .                   }
      .                   self.super_body(body);
    736 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {
      .               fn new(
      .                   cx: &'a mut TypeChecker<'b, 'tcx>,
      .                   body: &'b Body<'tcx>,
      .                   promoted: &'b IndexVec<Promoted, Body<'tcx>>,
      .               ) -> Self {
    576 ( 0.00%)          TypeVerifier { body, promoted, cx, last_span: body.span, errors_reported: false }
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 89,888 ( 0.01%)          self.cx.infcx.tcx
      .               }
      .           
307,390 ( 0.03%)      fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {
 61,478 ( 0.01%)          if ty.has_escaping_bound_vars() || ty.references_error() {
      .                       span_mirbug_and_err!(self, parent, "bad type {:?}", ty)
      .                   } else {
      .                       ty
      .                   }
215,173 ( 0.02%)      }
      .           
      .               /// Checks that the types internal to the `place` match up with
      .               /// what would be expected.
      .               fn sanitize_place(
      .                   &mut self,
      .                   place: &Place<'tcx>,
      .                   location: Location,
      .                   context: PlaceContext,
      .               ) -> PlaceTy<'tcx> {
      .                   debug!("sanitize_place: {:?}", place);
      .           
  3,348 ( 0.00%)          let mut place_ty = PlaceTy::from_ty(self.body.local_decls[place.local].ty);
      .           
  1,009 ( 0.00%)          for elem in place.projection.iter() {
     86 ( 0.00%)              if place_ty.variant_index.is_none() {
     86 ( 0.00%)                  if place_ty.ty.references_error() {
      .                               assert!(self.errors_reported);
      .                               return PlaceTy::from_ty(self.tcx().ty_error());
      .                           }
      .                       }
      .                       place_ty = self.sanitize_projection(place_ty, elem, place, location);
      .                   }
      .           
  2,432 ( 0.00%)          if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {
      .                       let tcx = self.tcx();
      .                       let trait_ref = ty::TraitRef {
  1,070 ( 0.00%)                  def_id: tcx.require_lang_item(LangItem::Copy, Some(self.last_span)),
    535 ( 0.00%)                  substs: tcx.mk_substs_trait(place_ty.ty, &[]),
      .                       };
      .           
      .                       // To have a `Copy` operand, the type `T` of the
      .                       // value must be `Copy`. Note that we prove that `T: Copy`,
      .                       // rather than using the `is_copy_modulo_regions`
      .                       // test. This is important because
      .                       // `is_copy_modulo_regions` ignores the resulting region
      .                       // obligations and assumes they pass. This can result in
      .                       // bounds from `Copy` impls being unsoundly ignored (e.g.,
      .                       // #29149). Note that we decide to use `Copy` before knowing
      .                       // whether the bounds fully apply: in effect, the rule is
      .                       // that if a value of some type could implement `Copy`, then
      .                       // it must.
    321 ( 0.00%)              self.cx.prove_trait_ref(
      .                           trait_ref,
      .                           location.to_locations(),
      .                           ConstraintCategory::CopyBound,
      .                       );
      .                   }
      .           
      .                   place_ty
      .               }
-- line 595 ----------------------------------------
-- line 598 ----------------------------------------
      .                   // Determine the constraints from the promoted MIR by running the type
      .                   // checker on the promoted MIR, then transfer the constraints back to
      .                   // the main MIR, changing the locations to the provided location.
      .           
      .                   let parent_body = mem::replace(&mut self.body, promoted_body);
      .           
      .                   // Use new sets of constraints and closure bounds so that we can
      .                   // modify their locations.
     28 ( 0.00%)          let all_facts = &mut None;
      .                   let mut constraints = Default::default();
      .                   let mut closure_bounds = Default::default();
      .                   let mut liveness_constraints =
     56 ( 0.00%)              LivenessValues::new(Rc::new(RegionValueElements::new(&promoted_body)));
      .                   // Don't try to add borrow_region facts for the promoted MIR
      .           
      .                   let mut swap_constraints = |this: &mut Self| {
    112 ( 0.00%)              mem::swap(this.cx.borrowck_context.all_facts, all_facts);
      .                       mem::swap(
    112 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.outlives_constraints,
      .                           &mut constraints,
      .                       );
      .                       mem::swap(
    112 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.closure_bounds_mapping,
      .                           &mut closure_bounds,
      .                       );
      .                       mem::swap(
    112 ( 0.00%)                  &mut this.cx.borrowck_context.constraints.liveness_constraints,
      .                           &mut liveness_constraints,
      .                       );
      .                   };
      .           
     28 ( 0.00%)          swap_constraints(self);
      .           
     84 ( 0.00%)          self.visit_body(&promoted_body);
      .           
     56 ( 0.00%)          if !self.errors_reported {
      .                       // if verifier failed, don't do further checks to avoid ICEs
     84 ( 0.00%)              self.cx.typeck_mir(promoted_body);
      .                   }
      .           
     28 ( 0.00%)          self.body = parent_body;
      .                   // Merge the outlives constraints back in, at the given location.
     28 ( 0.00%)          swap_constraints(self);
      .           
      .                   let locations = location.to_locations();
      .                   for constraint in constraints.outlives().iter() {
      .                       let mut constraint = constraint.clone();
      .                       constraint.locations = locations;
    224 ( 0.00%)              if let ConstraintCategory::Return(_)
      .                       | ConstraintCategory::UseAsConst
      .                       | ConstraintCategory::UseAsStatic = constraint.category
      .                       {
      .                           // "Returning" from a promoted is an assignment to a
      .                           // temporary from the user's point of view.
      .                           constraint.category = ConstraintCategory::Boring;
      .                       }
      .                       self.cx.borrowck_context.constraints.outlives_constraints.push(constraint)
-- line 654 ----------------------------------------
-- line 661 ----------------------------------------
      .                           self.cx
      .                               .borrowck_context
      .                               .constraints
      .                               .liveness_constraints
      .                               .add_element(region, location);
      .                       }
      .                   }
      .           
     28 ( 0.00%)          if !closure_bounds.is_empty() {
      .                       let combined_bounds_mapping =
      .                           closure_bounds.into_iter().flat_map(|(_, value)| value).collect();
      .                       let existing = self
      .                           .cx
      .                           .borrowck_context
      .                           .constraints
      .                           .closure_bounds_mapping
      .                           .insert(location, combined_bounds_mapping);
      .                       assert!(existing.is_none(), "Multiple promoteds/closures at the same location.");
      .                   }
    112 ( 0.00%)      }
      .           
      .               fn sanitize_projection(
      .                   &mut self,
      .                   base: PlaceTy<'tcx>,
      .                   pi: PlaceElem<'tcx>,
      .                   place: &Place<'tcx>,
      .                   location: Location,
      .               ) -> PlaceTy<'tcx> {
      .                   debug!("sanitize_projection: {:?} {:?} {:?}", base, pi, place);
      .                   let tcx = self.tcx();
     86 ( 0.00%)          let base_ty = base.ty;
    430 ( 0.00%)          match pi {
      .                       ProjectionElem::Deref => {
    258 ( 0.00%)                  let deref_ty = base_ty.builtin_deref(true);
      .                           PlaceTy::from_ty(deref_ty.map(|t| t.ty).unwrap_or_else(|| {
      .                               span_mirbug_and_err!(self, place, "deref of non-pointer {:?}", base_ty)
      .                           }))
      .                       }
      .                       ProjectionElem::Index(i) => {
      .                           let index_ty = Place::from(i).ty(self.body, tcx).ty;
      .                           if index_ty != tcx.types.usize {
      .                               PlaceTy::from_ty(span_mirbug_and_err!(self, i, "index by non-usize {:?}", i))
-- line 702 ----------------------------------------
-- line 965 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           /// The `Locations` type summarizes *where* region constraints are
      .           /// required to hold. Normally, this is at a particular point which
      .           /// created the obligation, but for constraints that the user gave, we
      .           /// want the constraint to hold at all points.
  1,414 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
      .           pub enum Locations {
      .               /// Indicates that a type constraint should always be true. This
      .               /// is particularly important in the new borrowck analysis for
      .               /// things like the type of the return slot. Consider this
      .               /// example:
      .               ///
      .               /// ```
      .               /// fn foo<'a>(x: &'a u32) -> &'a u32 {
-- line 981 ----------------------------------------
-- line 1036 ----------------------------------------
      .               fn new(
      .                   infcx: &'a InferCtxt<'a, 'tcx>,
      .                   body: &'a Body<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   region_bound_pairs: &'a RegionBoundPairs<'tcx>,
      .                   implicit_region_bound: ty::Region<'tcx>,
      .                   borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,
      .               ) -> Self {
    832 ( 0.00%)          let mut checker = Self {
      .                       infcx,
      .                       last_span: DUMMY_SP,
      .                       body,
     64 ( 0.00%)              user_type_annotations: &body.user_type_annotations,
      .                       param_env,
      .                       region_bound_pairs,
      .                       implicit_region_bound,
      .                       borrowck_context,
      .                       reported_errors: Default::default(),
      .                   };
      .                   checker.check_user_type_annotations();
      .                   checker
      .               }
      .           
      .               fn unsized_feature_enabled(&self) -> bool {
    745 ( 0.00%)          let features = self.tcx().features();
  1,490 ( 0.00%)          features.unsized_locals || features.unsized_fn_params
      .               }
      .           
      .               /// Equate the inferred type and the annotated type for user type annotations
      .               fn check_user_type_annotations(&mut self) {
      .                   debug!(
      .                       "check_user_type_annotations: user_type_annotations={:?}",
      .                       self.user_type_annotations
      .                   );
-- line 1069 ----------------------------------------
-- line 1128 ----------------------------------------
      .               fn push_region_constraints(
      .                   &mut self,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .                   data: &QueryRegionConstraints<'tcx>,
      .               ) {
      .                   debug!("constraints generated: {:#?}", data);
      .           
     59 ( 0.00%)          constraint_conversion::ConstraintConversion::new(
      .                       self.infcx,
    118 ( 0.00%)              self.borrowck_context.universal_regions,
     59 ( 0.00%)              self.region_bound_pairs,
      .                       Some(self.implicit_region_bound),
      .                       self.param_env,
      .                       locations,
      .                       category,
     59 ( 0.00%)              &mut self.borrowck_context.constraints,
      .                   )
      .                   .convert_all(data);
      .               }
      .           
      .               /// Try to relate `sub <: sup`
      .               fn sub_types(
      .                   &mut self,
      .                   sub: Ty<'tcx>,
      .                   sup: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
      .                   // Use this order of parameters because the sup type is usually the
      .                   // "expected" type in diagnostics.
299,088 ( 0.03%)          self.relate_types(sup, ty::Variance::Contravariant, sub, locations, category)
      .               }
      .           
      .               #[instrument(skip(self, category), level = "debug")]
      .               fn eq_types(
      .                   &mut self,
      .                   expected: Ty<'tcx>,
      .                   found: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
  1,680 ( 0.00%)          self.relate_types(expected, ty::Variance::Invariant, found, locations, category)
      .               }
      .           
      .               #[instrument(skip(self), level = "debug")]
      .               fn relate_type_and_user_type(
      .                   &mut self,
      .                   a: Ty<'tcx>,
      .                   v: ty::Variance,
      .                   user_ty: &UserTypeProjection,
-- line 1178 ----------------------------------------
-- line 1231 ----------------------------------------
      .               ///
      .               /// In terms of our function parameters:
      .               ///
      .               /// * `anon_ty` would be `Box<Foo<T>>` where `Foo<T>` is an opaque type
      .               ///   scoped to this function (note that it is parameterized by the
      .               ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,
      .               ///   but the entire return type (which may contain opaque types within it).
      .               /// * `revealed_ty` would be `Box<(T, u32)>`
  1,216 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               fn eq_opaque_type_and_type(
      .                   &mut self,
      .                   revealed_ty: Ty<'tcx>,
      .                   anon_ty: Ty<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) -> Fallible<()> {
      .                   // Fast path for the common case.
     64 ( 0.00%)          if !anon_ty.has_opaque_types() {
    128 ( 0.00%)              if let Err(terr) = self.eq_types(anon_ty, revealed_ty, locations, category) {
      .                           span_mirbug!(
      .                               self,
      .                               locations,
      .                               "eq_opaque_type_and_type: `{:?}=={:?}` failed with `{:?}`",
      .                               revealed_ty,
      .                               anon_ty,
      .                               terr
      .                           );
-- line 1257 ----------------------------------------
-- line 1328 ----------------------------------------
      .                               || "opaque_type_map".to_string(),
      .                           ),
      .                       )?;
      .                   }
      .                   Ok(())
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  6,290 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               #[instrument(skip(self, body, location), level = "debug")]
      .               fn check_stmt(&mut self, body: &Body<'tcx>, stmt: &Statement<'tcx>, location: Location) {
      .                   let tcx = self.tcx();
  3,200 ( 0.00%)          match stmt.kind {
    362 ( 0.00%)              StatementKind::Assign(box (ref place, ref rv)) => {
      .                           // Assignments to temporaries are not "interesting";
      .                           // they are not caused by the user, but rather artifacts
      .                           // of lowering. Assignments to other sorts of places *are* interesting
      .                           // though.
  1,448 ( 0.00%)                  let category = match place.as_local() {
      .                               Some(RETURN_PLACE) => {
    162 ( 0.00%)                          let defining_ty = &self.borrowck_context.universal_regions.defining_ty;
     81 ( 0.00%)                          if defining_ty.is_const() {
    224 ( 0.00%)                              if tcx.is_static(defining_ty.def_id()) {
      .                                           ConstraintCategory::UseAsStatic
      .                                       } else {
      .                                           ConstraintCategory::UseAsConst
      .                                       }
      .                                   } else {
      .                                       ConstraintCategory::Return(ReturnConstraint::Normal)
      .                                   }
      .                               }
      .                               Some(l)
    393 ( 0.00%)                          if matches!(
    590 ( 0.00%)                              body.local_decls[l].local_info,
      .                                       Some(box LocalInfo::AggregateTemp)
      .                                   ) =>
      .                               {
      .                                   ConstraintCategory::Usage
      .                               }
      .                               Some(l) if !body.local_decls[l].is_user_variable() => {
      .                                   ConstraintCategory::Boring
      .                               }
-- line 1371 ----------------------------------------
-- line 1373 ----------------------------------------
      .                           };
      .                           debug!(
      .                               "assignment category: {:?} {:?}",
      .                               category,
      .                               place.as_local().map(|l| &body.local_decls[l])
      .                           );
      .           
      .                           let place_ty = place.ty(body, tcx).ty;
  4,344 ( 0.00%)                  let place_ty = self.normalize(place_ty, location);
    362 ( 0.00%)                  let rv_ty = rv.ty(body, tcx);
  2,172 ( 0.00%)                  let rv_ty = self.normalize(rv_ty, location);
    724 ( 0.00%)                  if let Err(terr) =
      .                               self.sub_types(rv_ty, place_ty, location.to_locations(), category)
      .                           {
      .                               span_mirbug!(
      .                                   self,
      .                                   stmt,
      .                                   "bad assignment ({:?} = {:?}): {:?}",
      .                                   place_ty,
      .                                   rv_ty,
-- line 1392 ----------------------------------------
-- line 1409 ----------------------------------------
      .                                       "bad user type on rvalue ({:?} = {:?}): {:?}",
      .                                       annotation,
      .                                       rv_ty,
      .                                       terr
      .                                   );
      .                               }
      .                           }
      .           
  2,534 ( 0.00%)                  self.check_rvalue(body, rv, location);
    362 ( 0.00%)                  if !self.unsized_feature_enabled() {
      .                               let trait_ref = ty::TraitRef {
  3,982 ( 0.00%)                          def_id: tcx.require_lang_item(LangItem::Sized, Some(self.last_span)),
  1,810 ( 0.00%)                          substs: tcx.mk_substs_trait(place_ty, &[]),
      .                               };
  1,086 ( 0.00%)                      self.prove_trait_ref(
      .                                   trait_ref,
      .                                   location.to_locations(),
      .                                   ConstraintCategory::SizedBound,
      .                               );
      .                           }
      .                       }
      .                       StatementKind::SetDiscriminant { ref place, variant_index } => {
      .                           let place_type = place.ty(body, tcx).ty;
-- line 1431 ----------------------------------------
-- line 1488 ----------------------------------------
      .               #[instrument(skip(self, body, term_location), level = "debug")]
      .               fn check_terminator(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   term_location: Location,
      .               ) {
      .                   let tcx = self.tcx();
  1,495 ( 0.00%)          match term.kind {
      .                       TerminatorKind::Goto { .. }
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Abort
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::GeneratorDrop
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::Drop { .. }
      .                       | TerminatorKind::FalseEdge { .. }
-- line 1504 ----------------------------------------
-- line 1520 ----------------------------------------
      .                                   term,
      .                                   "bad DropAndReplace ({:?} = {:?}): {:?}",
      .                                   place_ty,
      .                                   rv_ty,
      .                                   terr
      .                               );
      .                           }
      .                       }
    176 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty, .. } => {
    132 ( 0.00%)                  self.check_operand(discr, term_location);
      .           
     44 ( 0.00%)                  let discr_ty = discr.ty(body, tcx);
     88 ( 0.00%)                  if let Err(terr) = self.sub_types(
      .                               discr_ty,
      .                               switch_ty,
      .                               term_location.to_locations(),
      .                               ConstraintCategory::Assignment,
      .                           ) {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "bad SwitchInt ({:?} on {:?}): {:?}",
      .                                   switch_ty,
      .                                   discr_ty,
      .                                   terr
      .                               );
      .                           }
     88 ( 0.00%)                  if !switch_ty.is_integral() && !switch_ty.is_char() && !switch_ty.is_bool() {
      .                               span_mirbug!(self, term, "bad SwitchInt discr ty {:?}", switch_ty);
      .                           }
      .                           // FIXME: check the values
      .                       }
    354 ( 0.00%)              TerminatorKind::Call { ref func, ref args, ref destination, from_hir_call, .. } => {
    295 ( 0.00%)                  self.check_operand(func, term_location);
      .                           for arg in args {
    440 ( 0.00%)                      self.check_operand(arg, term_location);
      .                           }
      .           
     59 ( 0.00%)                  let func_ty = func.ty(body, tcx);
      .                           debug!("check_terminator: call, func_ty={:?}", func_ty);
    236 ( 0.00%)                  let sig = match func_ty.kind() {
    236 ( 0.00%)                      ty::FnDef(..) | ty::FnPtr(_) => func_ty.fn_sig(tcx),
      .                               _ => {
      .                                   span_mirbug!(self, term, "call to non-function {:?}", func_ty);
      .                                   return;
      .                               }
      .                           };
    590 ( 0.00%)                  let (sig, map) = self.infcx.replace_bound_vars_with_fresh_vars(
    177 ( 0.00%)                      term.source_info.span,
      .                               LateBoundRegionConversionTime::FnCall,
      .                               sig,
      .                           );
    118 ( 0.00%)                  let sig = self.normalize(sig, term_location);
    236 ( 0.00%)                  self.check_call_dest(body, term, &sig, destination, term_location);
      .           
      .                           self.prove_predicates(
     59 ( 0.00%)                      sig.inputs_and_output
      .                                   .iter()
    294 ( 0.00%)                          .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),
      .                               term_location.to_locations(),
      .                               ConstraintCategory::Boring,
      .                           );
      .           
      .                           // The ordinary liveness rules will ensure that all
      .                           // regions in the type of the callee are live here. We
      .                           // then further constrain the late-bound regions that
      .                           // were instantiated at the call site to be live as
      .                           // well. The resulting is that all the input (and
      .                           // output) types in the signature must be live, since
      .                           // all the inputs that fed into it were live.
    360 ( 0.00%)                  for &late_bound_region in map.values() {
      .                               let region_vid =
      6 ( 0.00%)                          self.borrowck_context.universal_regions.to_region_vid(late_bound_region);
      6 ( 0.00%)                      self.borrowck_context
      .                                   .constraints
      .                                   .liveness_constraints
      .                                   .add_element(region_vid, term_location);
      .                           }
      .           
    118 ( 0.00%)                  self.check_call_inputs(body, term, &sig, args, term_location, from_hir_call);
      .                       }
      .                       TerminatorKind::Assert { ref cond, ref msg, .. } => {
      .                           self.check_operand(cond, term_location);
      .           
      .                           let cond_ty = cond.ty(body, tcx);
      .                           if cond_ty != tcx.types.bool {
      .                               span_mirbug!(self, term, "bad Assert ({:?}, not bool", cond_ty);
      .                           }
-- line 1607 ----------------------------------------
-- line 1647 ----------------------------------------
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   sig: &ty::FnSig<'tcx>,
      .                   destination: &Option<(Place<'tcx>, BasicBlock)>,
      .                   term_location: Location,
      .               ) {
      .                   let tcx = self.tcx();
    236 ( 0.00%)          match *destination {
      .                       Some((ref dest, _target_block)) => {
      .                           let dest_ty = dest.ty(body, tcx).ty;
    354 ( 0.00%)                  let dest_ty = self.normalize(dest_ty, term_location);
    295 ( 0.00%)                  let category = match dest.as_local() {
      .                               Some(RETURN_PLACE) => {
    203 ( 0.00%)                          if let BorrowCheckContext {
      .                                       universal_regions:
      .                                           UniversalRegions {
      .                                               defining_ty:
      .                                                   DefiningTy::Const(def_id, _)
      .                                                   | DefiningTy::InlineConst(def_id, _),
      .                                               ..
      .                                           },
      .                                       ..
-- line 1669 ----------------------------------------
-- line 1681 ----------------------------------------
      .                               Some(l) if !body.local_decls[l].is_user_variable() => {
      .                                   ConstraintCategory::Boring
      .                               }
      .                               _ => ConstraintCategory::Assignment,
      .                           };
      .           
      .                           let locations = term_location.to_locations();
      .           
    413 ( 0.00%)                  if let Err(terr) = self.sub_types(sig.output(), dest_ty, locations, category) {
      .                               span_mirbug!(
      .                                   self,
      .                                   term,
      .                                   "call dest mismatch ({:?} <- {:?}): {:?}",
      .                                   dest_ty,
      .                                   sig.output(),
      .                                   terr
      .                               );
      .                           }
      .           
      .                           // When `unsized_fn_params` and `unsized_locals` are both not enabled,
      .                           // this check is done at `check_local`.
     59 ( 0.00%)                  if self.unsized_feature_enabled() {
      .                               let span = term.source_info.span;
      .                               self.ensure_place_sized(dest_ty, span);
      .                           }
      .                       }
      .                       None => {
      .                           if !self
      .                               .tcx()
      .                               .conservative_is_privately_uninhabited(self.param_env.and(sig.output()))
-- line 1710 ----------------------------------------
-- line 1720 ----------------------------------------
      .                   body: &Body<'tcx>,
      .                   term: &Terminator<'tcx>,
      .                   sig: &ty::FnSig<'tcx>,
      .                   args: &[Operand<'tcx>],
      .                   term_location: Location,
      .                   from_hir_call: bool,
      .               ) {
      .                   debug!("check_call_inputs({:?}, {:?})", sig, args);
    413 ( 0.00%)          if args.len() < sig.inputs().len() || (args.len() > sig.inputs().len() && !sig.c_variadic) {
      .                       span_mirbug!(self, term, "call to {:?} with wrong # of args", sig);
      .                   }
    294 ( 0.00%)          for (n, (fn_arg, op_arg)) in iter::zip(sig.inputs(), args).enumerate() {
      .                       let op_arg_ty = op_arg.ty(body, self.tcx());
    352 ( 0.00%)              let op_arg_ty = self.normalize(op_arg_ty, term_location);
      .                       let category = if from_hir_call {
      .                           ConstraintCategory::CallArgument
      .                       } else {
      .                           ConstraintCategory::Boring
      .                       };
    176 ( 0.00%)              if let Err(terr) =
    176 ( 0.00%)                  self.sub_types(op_arg_ty, fn_arg, term_location.to_locations(), category)
      .                       {
      .                           span_mirbug!(
      .                               self,
      .                               term,
      .                               "bad arg #{:?} ({:?} <- {:?}): {:?}",
      .                               n,
      .                               fn_arg,
      .                               op_arg_ty,
      .                               terr
      .                           );
      .                       }
      .                   }
      .               }
      .           
      .               fn check_iscleanup(&mut self, body: &Body<'tcx>, block_data: &BasicBlockData<'tcx>) {
    187 ( 0.00%)          let is_cleanup = block_data.is_cleanup;
    897 ( 0.00%)          self.last_span = block_data.terminator().source_info.span;
  1,794 ( 0.00%)          match block_data.terminator().kind {
     57 ( 0.00%)              TerminatorKind::Goto { target } => {
    228 ( 0.00%)                  self.assert_iscleanup(body, block_data, target, is_cleanup)
      .                       }
     44 ( 0.00%)              TerminatorKind::SwitchInt { ref targets, .. } => {
     44 ( 0.00%)                  for target in targets.all_targets() {
    528 ( 0.00%)                      self.assert_iscleanup(body, block_data, *target, is_cleanup);
      .                           }
      .                       }
      .                       TerminatorKind::Resume => {
     36 ( 0.00%)                  if !is_cleanup {
      .                               span_mirbug!(self, block_data, "resume on non-cleanup block!")
      .                           }
      .                       }
      .                       TerminatorKind::Abort => {
      .                           if !is_cleanup {
      .                               span_mirbug!(self, block_data, "abort on non-cleanup block!")
      .                           }
      .                       }
      .                       TerminatorKind::Return => {
     92 ( 0.00%)                  if is_cleanup {
      .                               span_mirbug!(self, block_data, "return on cleanup block")
      .                           }
      .                       }
      .                       TerminatorKind::GeneratorDrop { .. } => {
      .                           if is_cleanup {
      .                               span_mirbug!(self, block_data, "generator_drop in cleanup block")
      .                           }
      .                       }
-- line 1786 ----------------------------------------
-- line 1800 ----------------------------------------
      .                           self.assert_iscleanup(body, block_data, target, is_cleanup);
      .                           if let Some(unwind) = unwind {
      .                               if is_cleanup {
      .                                   span_mirbug!(self, block_data, "unwind on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, unwind, true);
      .                           }
      .                       }
     59 ( 0.00%)              TerminatorKind::Call { ref destination, cleanup, .. } => {
    295 ( 0.00%)                  if let &Some((_, target)) = destination {
    118 ( 0.00%)                      self.assert_iscleanup(body, block_data, target, is_cleanup);
      .                           }
    177 ( 0.00%)                  if let Some(cleanup) = cleanup {
     59 ( 0.00%)                      if is_cleanup {
      .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, cleanup, true);
      .                           }
      .                       }
     22 ( 0.00%)              TerminatorKind::FalseEdge { real_target, imaginary_target } => {
     66 ( 0.00%)                  self.assert_iscleanup(body, block_data, real_target, is_cleanup);
     55 ( 0.00%)                  self.assert_iscleanup(body, block_data, imaginary_target, is_cleanup);
      .                       }
      .                       TerminatorKind::FalseUnwind { real_target, unwind } => {
      .                           self.assert_iscleanup(body, block_data, real_target, is_cleanup);
      .                           if let Some(unwind) = unwind {
      .                               if is_cleanup {
      .                                   span_mirbug!(self, block_data, "cleanup in cleanup block via false unwind");
      .                               }
      .                               self.assert_iscleanup(body, block_data, unwind, true);
-- line 1829 ----------------------------------------
-- line 1838 ----------------------------------------
      .                                   span_mirbug!(self, block_data, "cleanup on cleanup block")
      .                               }
      .                               self.assert_iscleanup(body, block_data, cleanup, true);
      .                           }
      .                       }
      .                   }
      .               }
      .           
  2,565 ( 0.00%)      fn assert_iscleanup(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   ctxt: &dyn fmt::Debug,
      .                   bb: BasicBlock,
      .                   iscleanuppad: bool,
      .               ) {
  1,710 ( 0.00%)          if body[bb].is_cleanup != iscleanuppad {
      .                       span_mirbug!(self, ctxt, "cleanuppad mismatch: {:?} should be {:?}", bb, iscleanuppad);
      .                   }
  1,425 ( 0.00%)      }
      .           
      .               fn check_local(&mut self, body: &Body<'tcx>, local: Local, local_decl: &LocalDecl<'tcx>) {
      .                   match body.local_kind(local) {
      .                       LocalKind::ReturnPointer | LocalKind::Arg => {
      .                           // return values of normal functions are required to be
      .                           // sized by typeck, but return values of ADT constructors are
      .                           // not because we don't include a `Self: Sized` bounds on them.
      .                           //
-- line 1864 ----------------------------------------
-- line 1866 ----------------------------------------
      .                           // - maybe we should make that a warning.
      .                           return;
      .                       }
      .                       LocalKind::Var | LocalKind::Temp => {}
      .                   }
      .           
      .                   // When `unsized_fn_params` or `unsized_locals` is enabled, only function calls
      .                   // and nullary ops are checked in `check_call_dest`.
    324 ( 0.00%)          if !self.unsized_feature_enabled() {
    648 ( 0.00%)              let span = local_decl.source_info.span;
    324 ( 0.00%)              let ty = local_decl.ty;
    648 ( 0.00%)              self.ensure_place_sized(ty, span);
      .                   }
      .               }
      .           
  2,916 ( 0.00%)      fn ensure_place_sized(&mut self, ty: Ty<'tcx>, span: Span) {
      .                   let tcx = self.tcx();
      .           
      .                   // Erase the regions from `ty` to get a global type.  The
      .                   // `Sized` bound in no way depends on precise regions, so this
      .                   // shouldn't affect `is_sized`.
      .                   let erased_ty = tcx.erase_regions(ty);
  1,944 ( 0.00%)          if !erased_ty.is_sized(tcx.at(span), self.param_env) {
      .                       // in current MIR construction, all non-control-flow rvalue
      .                       // expressions evaluate through `as_temp` or `into` a return
      .                       // slot or local, so to find all unsized rvalues it is enough
      .                       // to check all temps, return slots and locals.
      .                       if self.reported_errors.replace((ty, span)).is_none() {
      .                           let mut diag = struct_span_err!(
      .                               self.tcx().sess,
      .                               span,
-- line 1896 ----------------------------------------
-- line 1901 ----------------------------------------
      .                           );
      .           
      .                           // While this is located in `nll::typeck` this error is not
      .                           // an NLL error, it's a required check to prevent creation
      .                           // of unsized rvalues in a call expression.
      .                           diag.emit();
      .                       }
      .                   }
  1,944 ( 0.00%)      }
      .           
      .               fn aggregate_field_ty(
      .                   &mut self,
      .                   ak: &AggregateKind<'tcx>,
      .                   field_index: usize,
      .                   location: Location,
      .               ) -> Result<Ty<'tcx>, FieldAccessError> {
      .                   let tcx = self.tcx();
      .           
146,045 ( 0.02%)          match *ak {
      .                       AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {
      .                           let def = tcx.adt_def(adt_did);
      .                           let variant = &def.variants[variant_index];
      .                           let adj_field_index = active_field_index.unwrap_or(field_index);
      .                           if let Some(field) = variant.fields.get(adj_field_index) {
      .                               Ok(self.normalize(field.ty(tcx, substs), location))
      .                           } else {
      .                               Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })
-- line 1927 ----------------------------------------
-- line 1941 ----------------------------------------
      .                           // aggregate rvalues.
      .                           match substs.as_generator().prefix_tys().nth(field_index) {
      .                               Some(ty) => Ok(ty),
      .                               None => Err(FieldAccessError::OutOfRange {
      .                                   field_count: substs.as_generator().prefix_tys().count(),
      .                               }),
      .                           }
      .                       }
 29,209 ( 0.00%)              AggregateKind::Array(ty) => Ok(ty),
      .                       AggregateKind::Tuple => {
      .                           unreachable!("This should have been covered in check_rvalues");
      .                       }
      .                   }
      .               }
      .           
207,676 ( 0.02%)      fn check_operand(&mut self, op: &Operand<'tcx>, location: Location) {
 59,336 ( 0.01%)          if let Operand::Constant(constant) = op {
 88,137 ( 0.01%)              let maybe_uneval = match constant.literal {
 88,137 ( 0.01%)                  ConstantKind::Ty(ct) => match ct.val {
     28 ( 0.00%)                      ty::ConstKind::Unevaluated(uv) => Some(uv),
      .                               _ => None,
      .                           },
      .                           _ => None,
      .                       };
     56 ( 0.00%)              if let Some(uv) = maybe_uneval {
     28 ( 0.00%)                  if uv.promoted.is_none() {
      .                               let tcx = self.tcx();
      .                               let def_id = uv.def.def_id_for_type_of();
      .                               if tcx.def_kind(def_id) == DefKind::InlineConst {
      .                                   let predicates = self.prove_closure_bounds(
      .                                       tcx,
      .                                       def_id.expect_local(),
      .                                       uv.substs,
      .                                       location,
-- line 1974 ----------------------------------------
-- line 1977 ----------------------------------------
      .                                       def_id,
      .                                       predicates,
      .                                       location.to_locations(),
      .                                   );
      .                               }
      .                           }
      .                       }
      .                   }
237,344 ( 0.02%)      }
      .           
  4,706 ( 0.00%)      fn check_rvalue(&mut self, body: &Body<'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {
      .                   let tcx = self.tcx();
      .           
  1,898 ( 0.00%)          match rvalue {
      .                       Rvalue::Aggregate(ak, ops) => {
      .                           for op in ops {
146,045 ( 0.02%)                      self.check_operand(op, location);
      .                           }
     56 ( 0.00%)                  self.check_aggregate_rvalue(&body, rvalue, ak, ops, location)
      .                       }
      .           
      .                       Rvalue::Repeat(operand, len) => {
      .                           self.check_operand(operand, location);
      .           
      .                           // If the length cannot be evaluated we must assume that the length can be larger
      .                           // than 1.
      .                           // If the length is larger than 1, the repeat expression will need to copy the
-- line 2003 ----------------------------------------
-- line 2071 ----------------------------------------
      .           
      .                           self.prove_trait_ref(
      .                               trait_ref,
      .                               location.to_locations(),
      .                               ConstraintCategory::SizedBound,
      .                           );
      .                       }
      .           
    112 ( 0.00%)              Rvalue::Cast(cast_kind, op, ty) => {
    112 ( 0.00%)                  self.check_operand(op, location);
      .           
    364 ( 0.00%)                  match cast_kind {
      .                               CastKind::Pointer(PointerCast::ReifyFnPointer) => {
      .                                   let fn_sig = op.ty(body, tcx).fn_sig(tcx);
      .           
      .                                   // The type that we see in the fcx is like
      .                                   // `foo::<'a, 'b>`, where `foo` is the path to a
      .                                   // function definition. When we extract the
      .                                   // signature, it comes from the `fn_sig` query,
      .                                   // and hence may contain unnormalized results.
-- line 2090 ----------------------------------------
-- line 2158 ----------------------------------------
      .                                           ty_fn_ptr_from,
      .                                           ty,
      .                                           terr
      .                                       );
      .                                   }
      .                               }
      .           
      .                               CastKind::Pointer(PointerCast::Unsize) => {
     84 ( 0.00%)                          let &ty = ty;
      .                                   let trait_ref = ty::TraitRef {
    308 ( 0.00%)                              def_id: tcx
     28 ( 0.00%)                                  .require_lang_item(LangItem::CoerceUnsized, Some(self.last_span)),
    336 ( 0.00%)                              substs: tcx.mk_substs_trait(op.ty(body, tcx), &[ty.into()]),
      .                                   };
      .           
    252 ( 0.00%)                          self.prove_trait_ref(
      .                                       trait_ref,
      .                                       location.to_locations(),
      .                                       ConstraintCategory::Cast,
      .                                   );
      .                               }
      .           
      .                               CastKind::Pointer(PointerCast::MutToConstPointer) => {
      .                                   let ty_from = match op.ty(body, tcx).kind() {
-- line 2181 ----------------------------------------
-- line 2312 ----------------------------------------
      .                                       | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))
      .                                       | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))
      .                                       | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
     88 ( 0.00%)              Rvalue::Ref(region, _borrow_kind, borrowed_place) => {
    528 ( 0.00%)                  self.add_reborrow_constraint(&body, location, region, borrowed_place);
      .                       }
      .           
      .                       Rvalue::BinaryOp(
      .                           BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge,
     66 ( 0.00%)                  box (left, right),
      .                       ) => {
    110 ( 0.00%)                  self.check_operand(left, location);
    110 ( 0.00%)                  self.check_operand(right, location);
      .           
     22 ( 0.00%)                  let ty_left = left.ty(body, tcx);
     66 ( 0.00%)                  match ty_left.kind() {
      .                               // Types with regions are comparable if they have a common super-type.
      .                               ty::RawPtr(_) | ty::FnPtr(_) => {
      .                                   let ty_right = right.ty(body, tcx);
      .                                   let common_ty = self.infcx.next_ty_var(TypeVariableOrigin {
      .                                       kind: TypeVariableOriginKind::MiscVariable,
      .                                       span: body.source_info(location).span,
      .                                   });
      .                                   self.sub_types(
-- line 2340 ----------------------------------------
-- line 2360 ----------------------------------------
      .                                           ty_right,
      .                                           terr
      .                                       )
      .                                   }
      .                               }
      .                               // For types with no regions we can just check that the
      .                               // both operands have the same type.
      .                               ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_)
    110 ( 0.00%)                          if ty_left == right.ty(body, tcx) => {}
      .                               // Other types are compared by trait methods, not by
      .                               // `Rvalue::BinaryOp`.
      .                               _ => span_mirbug!(
      .                                   self,
      .                                   rvalue,
      .                                   "unexpected comparison types {:?} and {:?}",
      .                                   ty_left,
      .                                   right.ty(body, tcx)
      .                               ),
      .                           }
      .                       }
      .           
      .                       Rvalue::Use(operand) | Rvalue::UnaryOp(_, operand) => {
    392 ( 0.00%)                  self.check_operand(operand, location);
      .                       }
      .           
      .                       Rvalue::BinaryOp(_, box (left, right))
      .                       | Rvalue::CheckedBinaryOp(_, box (left, right)) => {
      .                           self.check_operand(left, location);
      .                           self.check_operand(right, location);
      .                       }
      .           
      .                       Rvalue::AddressOf(..)
      .                       | Rvalue::ThreadLocalRef(..)
      .                       | Rvalue::Len(..)
      .                       | Rvalue::Discriminant(..) => {}
      .                   }
  1,328 ( 0.00%)      }
      .           
      .               /// If this rvalue supports a user-given type annotation, then
      .               /// extract and return it. This represents the final type of the
      .               /// rvalue and will be unified with the inferred type.
      .               fn rvalue_user_ty(&self, rvalue: &Rvalue<'tcx>) -> Option<UserTypeAnnotationIndex> {
  1,448 ( 0.00%)          match rvalue {
      .                       Rvalue::Use(_)
      .                       | Rvalue::ThreadLocalRef(_)
      .                       | Rvalue::Repeat(..)
      .                       | Rvalue::Ref(..)
      .                       | Rvalue::AddressOf(..)
      .                       | Rvalue::Len(..)
      .                       | Rvalue::Cast(..)
      .                       | Rvalue::ShallowInitBox(..)
      .                       | Rvalue::BinaryOp(..)
      .                       | Rvalue::CheckedBinaryOp(..)
      .                       | Rvalue::NullaryOp(..)
      .                       | Rvalue::UnaryOp(..)
      .                       | Rvalue::Discriminant(..) => None,
      .           
     84 ( 0.00%)              Rvalue::Aggregate(aggregate, _) => match **aggregate {
      .                           AggregateKind::Adt(_, _, _, user_ty, _) => user_ty,
      .                           AggregateKind::Array(_) => None,
      .                           AggregateKind::Tuple => None,
      .                           AggregateKind::Closure(_, _) => None,
      .                           AggregateKind::Generator(_, _, _) => None,
      .                       },
      .                   }
      .               }
-- line 2425 ----------------------------------------
-- line 2431 ----------------------------------------
      .                   aggregate_kind: &AggregateKind<'tcx>,
      .                   operands: &[Operand<'tcx>],
      .                   location: Location,
      .               ) {
      .                   let tcx = self.tcx();
      .           
      .                   self.prove_aggregate_predicates(aggregate_kind, location);
      .           
     28 ( 0.00%)          if *aggregate_kind == AggregateKind::Tuple {
      .                       // tuple rvalue field type is always the type of the op. Nothing to check here.
      .                       return;
      .                   }
      .           
 29,209 ( 0.00%)          for (i, operand) in operands.iter().enumerate() {
      .                       let field_ty = match self.aggregate_field_ty(aggregate_kind, i, location) {
 58,418 ( 0.01%)                  Ok(field_ty) => field_ty,
      .                           Err(FieldAccessError::OutOfRange { field_count }) => {
      .                               span_mirbug!(
      .                                   self,
      .                                   rvalue,
      .                                   "accessed field #{} but variant only has {}",
      .                                   i,
      .                                   field_count
      .                               );
      .                               continue;
      .                           }
      .                       };
      .                       let operand_ty = operand.ty(body, tcx);
175,254 ( 0.02%)              let operand_ty = self.normalize(operand_ty, location);
      .           
 58,418 ( 0.01%)              if let Err(terr) = self.sub_types(
      .                           operand_ty,
 29,209 ( 0.00%)                  field_ty,
      .                           location.to_locations(),
      .                           ConstraintCategory::Boring,
      .                       ) {
      .                           span_mirbug!(
      .                               self,
      .                               rvalue,
      .                               "{:?} is not a subtype of {:?}: {:?}",
      .                               operand_ty,
-- line 2471 ----------------------------------------
-- line 2486 ----------------------------------------
      .               fn add_reborrow_constraint(
      .                   &mut self,
      .                   body: &Body<'tcx>,
      .                   location: Location,
      .                   borrow_region: ty::Region<'tcx>,
      .                   borrowed_place: &Place<'tcx>,
      .               ) {
      .                   // These constraints are only meaningful during borrowck:
     88 ( 0.00%)          let BorrowCheckContext { borrow_set, location_table, all_facts, constraints, .. } =
      .                       self.borrowck_context;
      .           
      .                   // In Polonius mode, we also push a `loan_issued_at` fact
      .                   // linking the loan to the region (in some cases, though,
      .                   // there is no loan associated with this borrow expression --
      .                   // that occurs when we are borrowing an unsafe place, for
      .                   // example).
    528 ( 0.00%)          if let Some(all_facts) = all_facts {
      .                       let _prof_timer = self.infcx.tcx.prof.generic_activity("polonius_fact_generation");
      .                       if let Some(borrow_index) = borrow_set.get_index_of(&location) {
      .                           let region_vid = borrow_region.to_region_vid();
      .                           all_facts.loan_issued_at.push((
      .                               region_vid,
      .                               borrow_index,
      .                               location_table.mid_index(location),
      .                           ));
-- line 2510 ----------------------------------------
-- line 2516 ----------------------------------------
      .                   // *p`, where the `p` has type `&'b mut Foo`, for example, we
      .                   // need to ensure that `'b: 'a`.
      .           
      .                   debug!(
      .                       "add_reborrow_constraint({:?}, {:?}, {:?})",
      .                       location, borrow_region, borrowed_place
      .                   );
      .           
     88 ( 0.00%)          let mut cursor = borrowed_place.projection.as_ref();
     88 ( 0.00%)          let tcx = self.infcx.tcx;
    176 ( 0.00%)          let field = path_utils::is_upvar_field_projection(
      .                       tcx,
    176 ( 0.00%)              &self.borrowck_context.upvars,
      .                       borrowed_place.as_ref(),
      .                       body,
      .                   );
    176 ( 0.00%)          let category = if let Some(field) = field {
      .                       let var_hir_id = self.borrowck_context.upvars[field.index()].place.get_root_variable();
      .                       // FIXME(project-rfc-2229#8): Use Place for better diagnostics
      .                       ConstraintCategory::ClosureUpvar(var_hir_id)
      .                   } else {
      .                       ConstraintCategory::Boring
      .                   };
      .           
    380 ( 0.00%)          while let [proj_base @ .., elem] = cursor {
      .                       cursor = proj_base;
      .           
      .                       debug!("add_reborrow_constraint - iteration {:?}", elem);
      .           
    406 ( 0.00%)              match elem {
      .                           ProjectionElem::Deref => {
    116 ( 0.00%)                      let base_ty = Place::ty_from(borrowed_place.local, proj_base, body, tcx).ty;
      .           
      .                               debug!("add_reborrow_constraint - base_ty = {:?}", base_ty);
    290 ( 0.00%)                      match base_ty.kind() {
      .                                   ty::Ref(ref_region, _, mutbl) => {
     58 ( 0.00%)                              constraints.outlives_constraints.push(OutlivesConstraint {
    116 ( 0.00%)                                  sup: ref_region.to_region_vid(),
      .                                           sub: borrow_region.to_region_vid(),
      .                                           locations: location.to_locations(),
      .                                           category,
      .                                           variance_info: ty::VarianceDiagInfo::default(),
      .                                       });
      .           
    174 ( 0.00%)                              match mutbl {
      .                                           hir::Mutability::Not => {
      .                                               // Immutable reference. We don't need the base
      .                                               // to be valid for the entire lifetime of
      .                                               // the borrow.
      .                                               break;
      .                                           }
      .                                           hir::Mutability::Mut => {
      .                                               // Mutable reference. We *do* need the base
-- line 2568 ----------------------------------------
-- line 2617 ----------------------------------------
      .               ) {
      .                   let tcx = self.tcx();
      .           
      .                   debug!(
      .                       "prove_aggregate_predicates(aggregate_kind={:?}, location={:?})",
      .                       aggregate_kind, location
      .                   );
      .           
    308 ( 0.00%)          let (def_id, instantiated_predicates) = match aggregate_kind {
      .                       AggregateKind::Adt(adt_did, _, substs, _, _) => {
      .                           (*adt_did, tcx.predicates_of(*adt_did).instantiate(tcx, substs))
      .                       }
      .           
      .                       // For closures, we have some **extra requirements** we
      .                       //
      .                       // have to check. In particular, in their upvars and
      .                       // signatures, closures often reference various regions
-- line 2633 ----------------------------------------
-- line 2648 ----------------------------------------
      .                       // these extra requirements are basically like where
      .                       // clauses on the struct.
      .                       AggregateKind::Closure(def_id, substs)
      .                       | AggregateKind::Generator(def_id, substs, _) => {
      .                           (*def_id, self.prove_closure_bounds(tcx, def_id.expect_local(), substs, location))
      .                       }
      .           
      .                       AggregateKind::Array(_) | AggregateKind::Tuple => {
     56 ( 0.00%)                  (CRATE_DEF_ID.to_def_id(), ty::InstantiatedPredicates::empty())
      .                       }
      .                   };
      .           
     28 ( 0.00%)          self.normalize_and_prove_instantiated_predicates(
      .                       def_id,
     84 ( 0.00%)              instantiated_predicates,
      .                       location.to_locations(),
      .                   );
      .               }
      .           
      .               fn prove_closure_bounds(
      .                   &mut self,
      .                   tcx: TyCtxt<'tcx>,
      .                   def_id: LocalDefId,
-- line 2670 ----------------------------------------
-- line 2728 ----------------------------------------
      .                           ConstraintCategory::ClosureBounds,
      .                           &closure_constraints,
      .                       );
      .                   }
      .           
      .                   tcx.predicates_of(def_id).instantiate(tcx, substs)
      .               }
      .           
  1,380 ( 0.00%)      #[instrument(skip(self, body), level = "debug")]
      .               fn typeck_mir(&mut self, body: &Body<'tcx>) {
    368 ( 0.00%)          self.last_span = body.span;
      .                   debug!(?body.span);
      .           
      .                   for (local, local_decl) in body.local_decls.iter_enumerated() {
      .                       self.check_local(&body, local, local_decl);
      .                   }
      .           
      .                   for (block, block_data) in body.basic_blocks().iter_enumerated() {
      .                       let mut location = Location { block, statement_index: 0 };
      .                       for stmt in &block_data.statements {
  3,200 ( 0.00%)                  if !stmt.source_info.span.is_dummy() {
  3,200 ( 0.00%)                      self.last_span = stmt.source_info.span;
      .                           }
      .                           self.check_stmt(body, stmt, location);
    500 ( 0.00%)                  location.statement_index += 1;
      .                       }
      .           
      .                       self.check_terminator(&body, block_data.terminator(), location);
      .                       self.check_iscleanup(&body, block_data);
      .                   }
      .               }
      .           }
      .           
-- line 2760 ----------------------------------------
-- line 2765 ----------------------------------------
      .           impl NormalizeLocation for Locations {
      .               fn to_locations(self) -> Locations {
      .                   self
      .               }
      .           }
      .           
      .           impl NormalizeLocation for Location {
      .               fn to_locations(self) -> Locations {
 90,787 ( 0.01%)          Locations::Single(self)
      .               }
      .           }
      .           
      .           #[derive(Debug, Default)]
      .           struct ObligationAccumulator<'tcx> {
      .               obligations: PredicateObligations<'tcx>,
      .           }
      .           
-- line 2781 ----------------------------------------

 68,550 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs
--------------------------------------------------------------------------------
Ir               

-- line 73 ----------------------------------------
      .               /// See #47489 and #48598
      .               /// See docs on the "AllowTwoPhase" type for a more detailed discussion
      .               allow_two_phase: AllowTwoPhase,
      .           }
      .           
      .           impl<'a, 'tcx> Deref for Coerce<'a, 'tcx> {
      .               type Target = FnCtxt<'a, 'tcx>;
      .               fn deref(&self) -> &Self::Target {
  2,688 ( 0.00%)          &self.fcx
      .               }
      .           }
      .           
      .           type CoerceResult<'tcx> = InferResult<'tcx, (Vec<Adjustment<'tcx>>, Ty<'tcx>)>;
      .           
      .           /// Coercing a mutable reference to an immutable works, while
      .           /// coercing `&T` to `&mut T` should be forbidden.
      .           fn coerce_mutbls<'tcx>(
      .               from_mutbl: hir::Mutability,
      .               to_mutbl: hir::Mutability,
      .           ) -> RelateResult<'tcx, ()> {
    258 ( 0.00%)      match (from_mutbl, to_mutbl) {
      .                   (hir::Mutability::Mut, hir::Mutability::Mut | hir::Mutability::Not)
      .                   | (hir::Mutability::Not, hir::Mutability::Not) => Ok(()),
      .                   (hir::Mutability::Not, hir::Mutability::Mut) => Err(TypeError::Mutability),
      .               }
      .           }
      .           
      .           /// Do not require any adjustments, i.e. coerce `x -> x`.
      .           fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {
-- line 101 ----------------------------------------
-- line 107 ----------------------------------------
      .           }
      .           
      .           /// This always returns `Ok(...)`.
      .           fn success<'tcx>(
      .               adj: Vec<Adjustment<'tcx>>,
      .               target: Ty<'tcx>,
      .               obligations: traits::PredicateObligations<'tcx>,
      .           ) -> CoerceResult<'tcx> {
    637 ( 0.00%)      Ok(InferOk { value: (adj, target), obligations })
      .           }
      .           
      .           impl<'f, 'tcx> Coerce<'f, 'tcx> {
      .               fn new(
      .                   fcx: &'f FnCtxt<'f, 'tcx>,
      .                   cause: ObligationCause<'tcx>,
      .                   allow_two_phase: AllowTwoPhase,
      .               ) -> Self {
  1,848 ( 0.00%)          Coerce { fcx, cause, allow_two_phase, use_lub: false }
      .               }
      .           
  4,774 ( 0.00%)      fn unify(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> InferResult<'tcx, Ty<'tcx>> {
      .                   debug!("unify(a: {:?}, b: {:?}, use_lub: {})", a, b, self.use_lub);
      .                   self.commit_if_ok(|_| {
    868 ( 0.00%)              if self.use_lub {
      .                           self.at(&self.cause, self.fcx.param_env).lub(b, a)
      .                       } else {
    868 ( 0.00%)                  self.at(&self.cause, self.fcx.param_env)
      .                               .sup(b, a)
      .                               .map(|InferOk { value: (), obligations }| InferOk { value: a, obligations })
      .                       }
      .                   })
  3,472 ( 0.00%)      }
      .           
      .               /// Unify two types (using sub or lub) and produce a specific coercion.
    696 ( 0.00%)      fn unify_and<F>(&self, a: Ty<'tcx>, b: Ty<'tcx>, f: F) -> CoerceResult<'tcx>
      .               where
      .                   F: FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>>,
      .               {
  1,098 ( 0.00%)          self.unify(&a, &b)
    924 ( 0.00%)              .and_then(|InferOk { value: ty, obligations }| success(f(ty), ty, obligations))
    522 ( 0.00%)      }
      .           
  4,851 ( 0.00%)      #[instrument(skip(self))]
      .               fn coerce(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> CoerceResult<'tcx> {
      .                   // First, remove any resolved type variables (at the top level, at least):
    231 ( 0.00%)          let a = self.shallow_resolve(a);
    231 ( 0.00%)          let b = self.shallow_resolve(b);
      .                   debug!("Coerce.tys({:?} => {:?})", a, b);
      .           
      .                   // Just ignore error types.
    462 ( 0.00%)          if a.references_error() || b.references_error() {
      .                       return success(vec![], self.fcx.tcx.ty_error(), vec![]);
      .                   }
      .           
      .                   // Coercing from `!` to any type is allowed:
    231 ( 0.00%)          if a.is_never() {
      .                       return success(simple(Adjust::NeverToAny)(b), b, vec![]);
      .                   }
      .           
      .                   // Coercing *from* an unresolved inference variable means that
      .                   // we have no information about the source type. This will always
      .                   // ultimately fall back to some form of subtyping.
    231 ( 0.00%)          if a.is_ty_var() {
      .                       return self.coerce_from_inference_variable(a, b, identity);
      .                   }
      .           
      .                   // Consider coercing the subtype to a DST
      .                   //
      .                   // NOTE: this is wrapped in a `commit_if_ok` because it creates
      .                   // a "spurious" type variable, and we don't want to have that
      .                   // type variable in memory if the coercion fails.
      .                   let unsize = self.commit_if_ok(|_| self.coerce_unsized(a, b));
    868 ( 0.00%)          match unsize {
      .                       Ok(_) => {
      .                           debug!("coerce: unsize successful");
    420 ( 0.00%)                  return unsize;
      .                       }
      .                       Err(TypeError::ObjectUnsafeCoercion(did)) => {
      .                           debug!("coerce: unsize not object safe");
      .                           return Err(TypeError::ObjectUnsafeCoercion(did));
      .                       }
      .                       Err(error) => {
      .                           debug!(?error, "coerce: unsize failed");
      .                       }
      .                   }
      .           
      .                   // Examine the supertype and consider auto-borrowing.
    957 ( 0.00%)          match *b.kind() {
      .                       ty::RawPtr(mt_b) => {
      .                           return self.coerce_unsafe_ptr(a, b, mt_b.mutbl);
      .                       }
     58 ( 0.00%)              ty::Ref(r_b, _, mutbl_b) => {
    174 ( 0.00%)                  return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);
      .                       }
      .                       _ => {}
      .                   }
      .           
  1,218 ( 0.00%)          match *a.kind() {
      .                       ty::FnDef(..) => {
      .                           // Function items are coercible to any closure
      .                           // type; function pointers are not (that would
      .                           // require double indirection).
      .                           // Additionally, we permit coercion of function
      .                           // items to drop the unsafe qualifier.
      .                           self.coerce_from_fn_item(a, b)
      .                       }
-- line 212 ----------------------------------------
-- line 218 ----------------------------------------
      .                       ty::Closure(closure_def_id_a, substs_a) => {
      .                           // Non-capturing closures are coercible to
      .                           // function pointers or unsafe function pointers.
      .                           // It cannot convert closures that require unsafe.
      .                           self.coerce_closure_to_fn(a, closure_def_id_a, substs_a, b)
      .                       }
      .                       _ => {
      .                           // Otherwise, just use unification rules.
    870 ( 0.00%)                  self.unify_and(a, b, identity)
      .                       }
      .                   }
    462 ( 0.00%)      }
      .           
      .               /// Coercing *from* an inference variable. In this case, we have no information
      .               /// about the source type, so we can't really do a true coercion and we always
      .               /// fall back to subtyping (`unify_and`).
      .               fn coerce_from_inference_variable(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
-- line 237 ----------------------------------------
-- line 278 ----------------------------------------
      .                       // to do something useful.
      .                       self.unify_and(a, b, make_adjustments)
      .                   }
      .               }
      .           
      .               /// Reborrows `&mut A` to `&mut B` and `&(mut) A` to `&B`.
      .               /// To match `A` with `B`, autoderef will be performed,
      .               /// calling `deref`/`deref_mut` where necessary.
    290 ( 0.00%)      fn coerce_borrowed_pointer(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .                   r_b: ty::Region<'tcx>,
      .                   mutbl_b: hir::Mutability,
      .               ) -> CoerceResult<'tcx> {
      .                   debug!("coerce_borrowed_pointer(a={:?}, b={:?})", a, b);
      .           
      .                   // If we have a parameter of type `&M T_a` and the value
      .                   // provided is `expr`, we will be adding an implicit borrow,
      .                   // meaning that we convert `f(expr)` to `f(&M *expr)`.  Therefore,
      .                   // to type check, we will construct the type that `&M*expr` would
      .                   // yield.
      .           
     58 ( 0.00%)          let (r_a, mt_a) = match *a.kind() {
     87 ( 0.00%)              ty::Ref(r_a, ty, mutbl) => {
      .                           let mt_a = ty::TypeAndMut { ty, mutbl };
      .                           coerce_mutbls(mt_a.mutbl, mutbl_b)?;
      .                           (r_a, mt_a)
      .                       }
      .                       _ => return self.unify_and(a, b, identity),
      .                   };
      .           
     58 ( 0.00%)          let span = self.cause.span;
      .           
      .                   let mut first_error = None;
      .                   let mut r_borrow_var = None;
      .                   let mut autoderef = self.autoderef(span, a);
      .                   let mut found = None;
      .           
    116 ( 0.00%)          for (referent_ty, autoderefs) in autoderef.by_ref() {
    116 ( 0.00%)              if autoderefs == 0 {
      .                           // Don't let this pass, otherwise it would cause
      .                           // &T to autoref to &&T.
      .                           continue;
      .                       }
      .           
      .                       // At this point, we have deref'd `a` to `referent_ty`.  So
      .                       // imagine we are coercing from `&'a mut Vec<T>` to `&'b mut [T]`.
      .                       // In the autoderef loop for `&'a mut Vec<T>`, we would get
-- line 326 ----------------------------------------
-- line 386 ----------------------------------------
      .                       //     this extra edge causes the region `'a` to be inferred to something
      .                       //     too big, which then results in borrowck errors.)
      .                       //   - We could track the innermost shared reference, but there is already
      .                       //     code in regionck that has the job of creating links between
      .                       //     the region of a borrow and the regions in the thing being
      .                       //     borrowed (here, `'a` and `'x`), and it knows how to handle
      .                       //     all the various cases. So instead we just make a region variable
      .                       //     and let regionck figure it out.
     58 ( 0.00%)              let r = if !self.use_lub {
      .                           r_b // [2] above
      .                       } else if autoderefs == 1 {
      .                           r_a // [3] above
      .                       } else {
      .                           if r_borrow_var.is_none() {
      .                               // create var lazily, at most once
      .                               let coercion = Coercion(span);
      .                               let r = self.next_region_var(coercion);
      .                               r_borrow_var = Some(r); // [4] above
      .                           }
      .                           r_borrow_var.unwrap()
      .                       };
     29 ( 0.00%)              let derefd_ty_a = self.tcx.mk_ref(
      .                           r,
      .                           TypeAndMut {
      .                               ty: referent_ty,
      .                               mutbl: mutbl_b, // [1] above
      .                           },
      .                       );
    203 ( 0.00%)              match self.unify(derefd_ty_a, b) {
      .                           Ok(ok) => {
    116 ( 0.00%)                      found = Some(ok);
      .                               break;
      .                           }
      .                           Err(err) => {
      .                               if first_error.is_none() {
      .                                   first_error = Some(err);
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   // Extract type or return an error. We return the first error
      .                   // we got, which should be from relating the "base" type
      .                   // (e.g., in example above, the failure from relating `Vec<T>`
      .                   // to the target type), since that should be the least
      .                   // confusing.
    232 ( 0.00%)          let InferOk { value: ty, mut obligations } = match found {
      .                       Some(d) => d,
      .                       None => {
      .                           let err = first_error.expect("coerce_borrowed_pointer had no error");
      .                           debug!("coerce_borrowed_pointer: failed with err = {:?}", err);
      .                           return Err(err);
      .                       }
      .                   };
      .           
    169 ( 0.00%)          if ty == a && mt_a.mutbl == hir::Mutability::Not && autoderef.step_count() == 1 {
      .                       // As a special case, if we would produce `&'a *x`, that's
      .                       // a total no-op. We end up with the type `&'a T` just as
      .                       // we started with.  In that case, just skip it
      .                       // altogether. This is just an optimization.
      .                       //
      .                       // Note that for `&mut`, we DO want to reborrow --
      .                       // otherwise, this would be a move, which might be an
      .                       // error. For example `foo(self.x)` where `self` and
      .                       // `self.x` both have `&mut `type would be a move of
      .                       // `self.x`, but we auto-coerce it to `foo(&mut *self.x)`,
      .                       // which is a borrow.
     56 ( 0.00%)              assert_eq!(mutbl_b, hir::Mutability::Not); // can only coerce &T -> &U
    112 ( 0.00%)              return success(vec![], ty, obligations);
      .                   }
      .           
      7 ( 0.00%)          let InferOk { value: mut adjustments, obligations: o } =
      1 ( 0.00%)              self.adjust_steps_as_infer_ok(&autoderef);
      .                   obligations.extend(o);
     19 ( 0.00%)          obligations.extend(autoderef.into_obligations());
      .           
      .                   // Now apply the autoref. We have to extract the region out of
      .                   // the final ref type we got.
      2 ( 0.00%)          let r_borrow = match ty.kind() {
      .                       ty::Ref(r_borrow, _, _) => r_borrow,
      .                       _ => span_bug!(span, "expected a ref type, got {:?}", ty),
      .                   };
      4 ( 0.00%)          let mutbl = match mutbl_b {
      .                       hir::Mutability::Not => AutoBorrowMutability::Not,
      .                       hir::Mutability::Mut => {
      .                           AutoBorrowMutability::Mut { allow_two_phase_borrow: self.allow_two_phase }
      .                       }
      .                   };
      .                   adjustments.push(Adjustment {
      1 ( 0.00%)              kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
      .                       target: ty,
      .                   });
      .           
      .                   debug!("coerce_borrowed_pointer: succeeded ty={:?} adjustments={:?}", ty, adjustments);
      .           
      8 ( 0.00%)          success(adjustments, ty, obligations)
    232 ( 0.00%)      }
      .           
      .               // &[T; n] or &mut [T; n] -> &[T]
      .               // or &mut [T; n] -> &mut [T]
      .               // or &Concrete -> &Trait, etc.
      .               #[instrument(skip(self), level = "debug")]
      .               fn coerce_unsized(&self, mut source: Ty<'tcx>, mut target: Ty<'tcx>) -> CoerceResult<'tcx> {
      .                   source = self.shallow_resolve(source);
      .                   target = self.shallow_resolve(target);
-- line 490 ----------------------------------------
-- line 506 ----------------------------------------
      .                   // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)
      .                   // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for
      .                   // SomeType`).
      .                   //
      .                   // However, these are exactly the kinds of impls which are forbidden by
      .                   // the compiler! Therefore, we can be sure that coercion will always fail
      .                   // when either the source or target type is a type variable. This allows us
      .                   // to skip performing any trait selection, and immediately bail out.
    231 ( 0.00%)          if source.is_ty_var() {
      .                       debug!("coerce_unsized: source is a TyVar, bailing out");
      .                       return Err(TypeError::Mismatch);
      .                   }
    231 ( 0.00%)          if target.is_ty_var() {
      .                       debug!("coerce_unsized: target is a TyVar, bailing out");
      .                       return Err(TypeError::Mismatch);
      .                   }
      .           
      .                   let traits =
  2,772 ( 0.00%)              (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());
    924 ( 0.00%)          let (Some(unsize_did), Some(coerce_unsized_did)) = traits else {
      .                       debug!("missing Unsize or CoerceUnsized traits");
      .                       return Err(TypeError::Mismatch);
      .                   };
      .           
      .                   // Note, we want to avoid unnecessary unsizing. We don't want to coerce to
      .                   // a DST unless we have to. This currently comes out in the wash since
      .                   // we can't unify [T] with U. But to properly support DST, we need to allow
      .                   // that, at which point we will need extra checks on the target here.
      .           
      .                   // Handle reborrows before selecting `Source: CoerceUnsized<Target>`.
    633 ( 0.00%)          let reborrow = match (source.kind(), target.kind()) {
    171 ( 0.00%)              (&ty::Ref(_, ty_a, mutbl_a), &ty::Ref(_, _, mutbl_b)) => {
      .                           coerce_mutbls(mutbl_a, mutbl_b)?;
      .           
     57 ( 0.00%)                  let coercion = Coercion(self.cause.span);
    285 ( 0.00%)                  let r_borrow = self.next_region_var(coercion);
      .                           let mutbl = match mutbl_b {
      .                               hir::Mutability::Not => AutoBorrowMutability::Not,
      .                               hir::Mutability::Mut => AutoBorrowMutability::Mut {
      .                                   // We don't allow two-phase borrows here, at least for initial
      .                                   // implementation. If it happens that this coercion is a function argument,
      .                                   // the reborrow in coerce_borrowed_ptr will pick it up.
      .                                   allow_two_phase_borrow: AllowTwoPhase::No,
      .                               },
      .                           };
      .                           Some((
      .                               Adjustment { kind: Adjust::Deref(None), target: ty_a },
      .                               Adjustment {
      .                                   kind: Adjust::Borrow(AutoBorrow::Ref(r_borrow, mutbl)),
     57 ( 0.00%)                          target: self
      .                                       .tcx
      .                                       .mk_ref(r_borrow, ty::TypeAndMut { mutbl: mutbl_b, ty: ty_a }),
      .                               },
      .                           ))
      .                       }
      .                       (&ty::Ref(_, ty_a, mt_a), &ty::RawPtr(ty::TypeAndMut { mutbl: mt_b, .. })) => {
      .                           coerce_mutbls(mt_a, mt_b)?;
      .           
-- line 563 ----------------------------------------
-- line 574 ----------------------------------------
      .                   let coerce_source = reborrow.as_ref().map_or(source, |&(_, ref r)| r.target);
      .           
      .                   // Setup either a subtyping or a LUB relationship between
      .                   // the `CoerceUnsized` target type and the expected type.
      .                   // We only have the latter, so we use an inference variable
      .                   // for the former and let type inference do the rest.
      .                   let origin = TypeVariableOrigin {
      .                       kind: TypeVariableOriginKind::MiscVariable,
    231 ( 0.00%)              span: self.cause.span,
      .                   };
  1,155 ( 0.00%)          let coerce_target = self.next_ty_var(origin);
    924 ( 0.00%)          let mut coercion = self.unify_and(coerce_target, target, |target| {
      .                       let unsize = Adjustment { kind: Adjust::Pointer(PointerCast::Unsize), target };
    462 ( 0.00%)              match reborrow {
    870 ( 0.00%)                  None => vec![unsize],
    798 ( 0.00%)                  Some((ref deref, ref autoref)) => vec![deref.clone(), autoref.clone(), unsize],
      .                       }
      .                   })?;
      .           
    231 ( 0.00%)          let mut selcx = traits::SelectionContext::new(self);
      .           
      .                   // Create an obligation for `Source: CoerceUnsized<Target>`.
      .                   let cause = ObligationCause::new(
    462 ( 0.00%)              self.cause.span,
    462 ( 0.00%)              self.body_id,
      .                       ObligationCauseCode::Coercion { source, target },
      .                   );
      .           
      .                   // Use a FIFO queue for this custom fulfillment procedure.
      .                   //
      .                   // A Vec (or SmallVec) is not a natural choice for a queue. However,
      .                   // this code path is hot, and this queue usually has a max length of 1
      .                   // and almost never more than 3. By using a SmallVec we avoid an
      .                   // allocation, at the (very small) cost of (occasionally) having to
      .                   // shift subsequent elements down when removing the front element.
  3,234 ( 0.00%)          let mut queue: SmallVec<[_; 4]> = smallvec![traits::predicate_for_trait_def(
    462 ( 0.00%)              self.tcx,
    231 ( 0.00%)              self.fcx.param_env,
  1,155 ( 0.00%)              cause,
      .                       coerce_unsized_did,
      .                       0,
      .                       coerce_source,
  1,155 ( 0.00%)              &[coerce_target.into()]
      .                   )];
      .           
      .                   let mut has_unsized_tuple_coercion = false;
      .                   let mut has_trait_upcasting_coercion = false;
      .           
      .                   // Keep resolving `CoerceUnsized` and `Unsize` predicates to avoid
      .                   // emitting a coercion in cases like `Foo<$1>` -> `Foo<$2>`, where
      .                   // inference might unify those two inner type variables later.
      .                   let traits = [coerce_unsized_did, unsize_did];
    746 ( 0.00%)          while !queue.is_empty() {
      .                       let obligation = queue.remove(0);
      .                       debug!("coerce_unsized resolve step: {:?}", obligation);
    345 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
  1,725 ( 0.00%)              let trait_pred = match bound_predicate.skip_binder() {
  1,728 ( 0.00%)                  ty::PredicateKind::Trait(trait_pred) if traits.contains(&trait_pred.def_id()) => {
  2,592 ( 0.00%)                      if unsize_did == trait_pred.def_id() {
    342 ( 0.00%)                          let self_ty = trait_pred.self_ty();
    228 ( 0.00%)                          let unsize_ty = trait_pred.trait_ref.substs[1].expect_ty();
    285 ( 0.00%)                          if let (ty::Dynamic(ref data_a, ..), ty::Dynamic(ref data_b, ..)) =
      .                                       (self_ty.kind(), unsize_ty.kind())
      .                                   {
      .                                       if data_a.principal_def_id() != data_b.principal_def_id() {
      .                                           debug!("coerce_unsized: found trait upcasting coercion");
      .                                           has_trait_upcasting_coercion = true;
      .                                       }
      .                                   }
    342 ( 0.00%)                          if let ty::Tuple(..) = unsize_ty.kind() {
      .                                       debug!("coerce_unsized: found unsized tuple coercion");
      .                                       has_unsized_tuple_coercion = true;
      .                                   }
      .                               }
    576 ( 0.00%)                      bound_predicate.rebind(trait_pred)
      .                           }
      .                           _ => {
    342 ( 0.00%)                      coercion.obligations.push(obligation);
      .                               continue;
      .                           }
      .                       };
  3,168 ( 0.00%)              match selcx.select(&obligation.with(trait_pred)) {
      .                           // Uncertain or unimplemented.
      .                           Ok(None) => {
      .                               if trait_pred.def_id() == unsize_did {
      .                                   let trait_pred = self.resolve_vars_if_possible(trait_pred);
      .                                   let self_ty = trait_pred.skip_binder().self_ty();
      .                                   let unsize_ty = trait_pred.skip_binder().trait_ref.substs[1].expect_ty();
      .                                   debug!("coerce_unsized: ambiguous unsize case for {:?}", trait_pred);
      .                                   match (&self_ty.kind(), &unsize_ty.kind()) {
-- line 663 ----------------------------------------
-- line 679 ----------------------------------------
      .                                   }
      .                               } else {
      .                                   debug!("coerce_unsized: early return - ambiguous");
      .                                   return Err(TypeError::Mismatch);
      .                               }
      .                           }
      .                           Err(traits::Unimplemented) => {
      .                               debug!("coerce_unsized: early return - can't prove obligation");
  1,218 ( 0.00%)                      return Err(TypeError::Mismatch);
      .                           }
      .           
      .                           // Object safety violations or miscellaneous.
      .                           Err(err) => {
      .                               self.report_selection_error(obligation.clone(), &obligation, &err, false);
      .                               // Treat this like an obligation and follow through
      .                               // with the unsizing - the lack of a coercion should
      .                               // be silent, as it causes a type mismatch later.
      .                           }
      .           
  1,615 ( 0.00%)                  Ok(Some(impl_source)) => queue.extend(impl_source.nested_obligations()),
      .                       }
    406 ( 0.00%)          }
      .           
     56 ( 0.00%)          if has_unsized_tuple_coercion && !self.tcx.features().unsized_tuple_coercion {
      .                       feature_err(
      .                           &self.tcx.sess.parse_sess,
      .                           sym::unsized_tuple_coercion,
      .                           self.cause.span,
      .                           "unsized tuple coercion is not stable enough for use and is subject to change",
      .                       )
      .                       .emit();
      .                   }
      .           
     56 ( 0.00%)          if has_trait_upcasting_coercion && !self.tcx().features().trait_upcasting {
      .                       feature_err(
      .                           &self.tcx.sess.parse_sess,
      .                           sym::trait_upcasting,
      .                           self.cause.span,
      .                           "trait upcasting coercion is experimental",
      .                       )
      .                       .emit();
      .                   }
      .           
    308 ( 0.00%)          Ok(coercion)
      .               }
      .           
      .               fn coerce_from_safe_fn<F, G>(
      .                   &self,
      .                   a: Ty<'tcx>,
      .                   fn_ty_a: ty::PolyFnSig<'tcx>,
      .                   b: Ty<'tcx>,
      .                   to_unsafe: F,
-- line 730 ----------------------------------------
-- line 906 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
      .               /// Attempt to coerce an expression to a type, and return the
      .               /// adjusted type of the expression, if successful.
      .               /// Adjustments are only recorded if the coercion succeeded.
      .               /// The expressions *must not* have any pre-existing adjustments.
  3,234 ( 0.00%)      pub fn try_coerce(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   expr_ty: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   allow_two_phase: AllowTwoPhase,
      .                   cause: Option<ObligationCause<'tcx>>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
    693 ( 0.00%)          let source = self.resolve_vars_with_obligations(expr_ty);
      .                   debug!("coercion::try({:?}: {:?} -> {:?})", expr, source, target);
      .           
      .                   let cause =
    231 ( 0.00%)              cause.unwrap_or_else(|| self.cause(expr.span, ObligationCauseCode::ExprAssignable));
      .                   let coerce = Coerce::new(self, cause, allow_two_phase);
  2,772 ( 0.00%)          let ok = self.commit_if_ok(|_| coerce.coerce(source, target))?;
      .           
    924 ( 0.00%)          let (adjustments, _) = self.register_infer_ok_obligations(ok);
  2,310 ( 0.00%)          self.apply_adjustments(expr, adjustments);
    693 ( 0.00%)          Ok(if expr_ty.references_error() { self.tcx.ty_error() } else { target })
  2,079 ( 0.00%)      }
      .           
      .               /// Same as `try_coerce()`, but without side-effects.
      .               ///
      .               /// Returns false if the coercion creates any obligations that result in
      .               /// errors.
      .               pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {
      .                   let source = self.resolve_vars_with_obligations(expr_ty);
      .                   debug!("coercion::can_with_predicates({:?} -> {:?})", source, target);
-- line 941 ----------------------------------------
-- line 967 ----------------------------------------
      .               }
      .           
      .               /// Given some expressions, their known unified type and another expression,
      .               /// tries to unify the types, potentially inserting coercions on any of the
      .               /// provided expressions and returns their LUB (aka "common supertype").
      .               ///
      .               /// This is really an internal helper. From outside the coercion
      .               /// module, you should instantiate a `CoerceMany` instance.
379,496 ( 0.04%)      fn try_find_coercion_lub<E>(
      .                   &self,
      .                   cause: &ObligationCause<'tcx>,
      .                   exprs: &[E],
      .                   prev_ty: Ty<'tcx>,
      .                   new: &hir::Expr<'_>,
      .                   new_ty: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   E: AsCoercionSite,
      .               {
175,152 ( 0.02%)          let prev_ty = self.resolve_vars_with_obligations(prev_ty);
 87,576 ( 0.01%)          let new_ty = self.resolve_vars_with_obligations(new_ty);
      .                   debug!(
      .                       "coercion::try_find_coercion_lub({:?}, {:?}, exprs={:?} exprs)",
      .                       prev_ty,
      .                       new_ty,
      .                       exprs.len()
      .                   );
      .           
      .                   // The following check fixes #88097, where the compiler erroneously
      .                   // attempted to coerce a closure type to itself via a function pointer.
 29,192 ( 0.00%)          if prev_ty == new_ty {
 29,192 ( 0.00%)              return Ok(prev_ty);
      .                   }
      .           
      .                   // Special-case that coercion alone cannot handle:
      .                   // Function items or non-capturing closures of differing IDs or InternalSubsts.
      .                   let (a_sig, b_sig) = {
      .                       let is_capturing_closure = |ty| {
      .                           if let &ty::Closure(closure_def_id, _substs) = ty {
      .                               self.tcx.upvars_mentioned(closure_def_id.expect_local()).is_some()
-- line 1006 ----------------------------------------
-- line 1100 ----------------------------------------
      .                   // at that time.
      .                   let mut coerce = Coerce::new(self, cause.clone(), AllowTwoPhase::No);
      .                   coerce.use_lub = true;
      .           
      .                   // First try to coerce the new expression to the type of the previous ones,
      .                   // but only if the new expression has no coercion already applied to it.
      .                   let mut first_error = None;
      .                   if !self.typeck_results.borrow().adjustments().contains_key(new.hir_id) {
    231 ( 0.00%)              let result = self.commit_if_ok(|_| coerce.coerce(new_ty, prev_ty));
      .                       match result {
      .                           Ok(ok) => {
      .                               let (adjustments, target) = self.register_infer_ok_obligations(ok);
      .                               self.apply_adjustments(new, adjustments);
      .                               debug!(
      .                                   "coercion::try_find_coercion_lub: was able to coerce from previous type {:?} to new type {:?}",
      .                                   prev_ty, new_ty,
      .                               );
-- line 1116 ----------------------------------------
-- line 1175 ----------------------------------------
      .                           let (adjustments, target) = self.register_infer_ok_obligations(ok);
      .                           for expr in exprs {
      .                               let expr = expr.as_coercion_site();
      .                               self.apply_adjustments(expr, adjustments.clone());
      .                           }
      .                           Ok(target)
      .                       }
      .                   }
262,728 ( 0.03%)      }
      .           }
      .           
      .           /// CoerceMany encapsulates the pattern you should use when you have
      .           /// many expressions that are all getting coerced to a common
      .           /// type. This arises, for example, when you have a match (the result
      .           /// of each arm is coerced to a common type). It also arises in less
      .           /// obvious places, such as when you have many `break foo` expressions
      .           /// that target the same loop, or the various `return` expressions in
-- line 1191 ----------------------------------------
-- line 1253 ----------------------------------------
      .               /// expected to pass each element in the slice to `coerce(...)` in
      .               /// order. This is used with arrays in particular to avoid
      .               /// needlessly cloning the slice.
      .               pub fn with_coercion_sites(expected_ty: Ty<'tcx>, coercion_sites: &'exprs [E]) -> Self {
      .                   Self::make(expected_ty, Expressions::UpFront(coercion_sites))
      .               }
      .           
      .               fn make(expected_ty: Ty<'tcx>, expressions: Expressions<'tcx, 'exprs, E>) -> Self {
    184 ( 0.00%)          CoerceMany { expected_ty, final_ty: None, expressions, pushed: 0 }
      .               }
      .           
      .               /// Returns the "expected type" with which this coercion was
      .               /// constructed. This represents the "downward propagated" type
      .               /// that was given to us at the start of typing whatever construct
      .               /// we are typing (e.g., the match expression).
      .               ///
      .               /// Typically, this is used as the expected type when
-- line 1269 ----------------------------------------
-- line 1281 ----------------------------------------
      .                   self.final_ty.unwrap_or(self.expected_ty)
      .               }
      .           
      .               /// Indicates that the value generated by `expression`, which is
      .               /// of type `expression_ty`, is one of the possibilities that we
      .               /// could coerce from. This will record `expression`, and later
      .               /// calls to `coerce` may come back and add adjustments and things
      .               /// if necessary.
350,508 ( 0.04%)      pub fn coerce<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   expression: &'tcx hir::Expr<'tcx>,
      .                   expression_ty: Ty<'tcx>,
      .               ) {
    504 ( 0.00%)          self.coerce_inner(fcx, cause, Some(expression), expression_ty, None, false)
233,672 ( 0.02%)      }
      .           
      .               /// Indicates that one of the inputs is a "forced unit". This
      .               /// occurs in a case like `if foo { ... };`, where the missing else
      .               /// generates a "forced unit". Another example is a `loop { break;
      .               /// }`, where the `break` has no argument expression. We treat
      .               /// these cases slightly differently for error-reporting
      .               /// purposes. Note that these tend to correspond to cases where
      .               /// the `()` expression is implicit in the source, and hence we do
-- line 1305 ----------------------------------------
-- line 1323 ----------------------------------------
      .                       Some(augment_error),
      .                       label_unit_as_expected,
      .                   )
      .               }
      .           
      .               /// The inner coercion "engine". If `expression` is `None`, this
      .               /// is a forced-unit case, and hence `expression_ty` must be
      .               /// `Nil`.
  1,785 ( 0.00%)      #[instrument(skip(self, fcx, augment_error, label_expression_as_expected), level = "debug")]
      .               crate fn coerce_inner<'a>(
      .                   &mut self,
      .                   fcx: &FnCtxt<'a, 'tcx>,
      .                   cause: &ObligationCause<'tcx>,
      .                   expression: Option<&'tcx hir::Expr<'tcx>>,
      .                   mut expression_ty: Ty<'tcx>,
      .                   augment_error: Option<&mut dyn FnMut(&mut DiagnosticBuilder<'_>)>,
      .                   label_expression_as_expected: bool,
      .               ) {
      .                   // Incorporate whatever type inference information we have
      .                   // until now; in principle we might also want to process
      .                   // pending obligations, but doing so should only improve
      .                   // compatibility (hopefully that is true) by helping us
      .                   // uncover never types better.
 29,294 ( 0.00%)          if expression_ty.is_ty_var() {
      .                       expression_ty = fcx.infcx.shallow_resolve(expression_ty);
      .                   }
      .           
      .                   // If we see any error types, just propagate that error
      .                   // upwards.
117,176 ( 0.01%)          if expression_ty.references_error() || self.merged_ty().references_error() {
      .                       self.final_ty = Some(fcx.tcx.ty_error());
      .                       return;
      .                   }
      .           
      .                   // Handle the actual type unification etc.
    255 ( 0.00%)          let result = if let Some(expression) = expression {
 87,882 ( 0.01%)              if self.pushed == 0 {
      .                           // Special-case the first expression we are coercing.
      .                           // To be honest, I'm not entirely sure why we do this.
      .                           // We don't allow two-phase borrows, see comment in try_find_coercion_lub for why
    918 ( 0.00%)                  fcx.try_coerce(
      .                               expression,
      .                               expression_ty,
      .                               self.expected_ty,
      .                               AllowTwoPhase::No,
    408 ( 0.00%)                      Some(cause.clone()),
      .                           )
      .                       } else {
 58,384 ( 0.01%)                  match self.expressions {
      .                               Expressions::Dynamic(ref exprs) => fcx.try_find_coercion_lub(
      .                                   cause,
      .                                   exprs,
      .                                   self.merged_ty(),
      .                                   expression,
      .                                   expression_ty,
      .                               ),
175,163 ( 0.02%)                      Expressions::UpFront(ref coercion_sites) => fcx.try_find_coercion_lub(
      .                                   cause,
 87,576 ( 0.01%)                          &coercion_sites[0..self.pushed],
      .                                   self.merged_ty(),
      .                                   expression,
      .                                   expression_ty,
      .                               ),
      .                           }
      .                       }
      .                   } else {
      .                       // this is a hack for cases where we default to `()` because
-- line 1389 ----------------------------------------
-- line 1403 ----------------------------------------
      .                       fcx.at(cause, fcx.param_env)
      .                           .eq_exp(label_expression_as_expected, expression_ty, self.merged_ty())
      .                           .map(|infer_ok| {
      .                               fcx.register_infer_ok_obligations(infer_ok);
      .                               expression_ty
      .                           })
      .                   };
      .           
 58,599 ( 0.01%)          match result {
 29,294 ( 0.00%)              Ok(v) => {
 29,294 ( 0.00%)                  self.final_ty = Some(v);
      .                           if let Some(e) = expression {
 58,588 ( 0.01%)                      match self.expressions {
      .                                   Expressions::Dynamic(ref mut buffer) => buffer.push(e),
 58,516 ( 0.01%)                          Expressions::UpFront(coercion_sites) => {
      .                                       // if the user gave us an array to validate, check that we got
      .                                       // the next expression in the list, as expected
116,983 ( 0.01%)                              assert_eq!(
 87,774 ( 0.01%)                                  coercion_sites[self.pushed].as_coercion_site().hir_id,
      .                                           e.hir_id
      .                                       );
      .                                   }
      .                               }
117,212 ( 0.01%)                      self.pushed += 1;
      .                           }
      .                       }
      .                       Err(coercion_error) => {
      .                           let (expected, found) = if label_expression_as_expected {
      .                               // In the case where this is a "forced unit", like
      .                               // `break`, we want to call the `()` "expected"
      .                               // since it is implied by the syntax.
      .                               // (Note: not all force-units work this way.)"
-- line 1434 ----------------------------------------
-- line 1707 ----------------------------------------
      .                           if let ty::Dynamic(..) = ty.kind() {
      .                               return true;
      .                           }
      .                       }
      .                   }
      .                   false
      .               }
      .           
    120 ( 0.00%)      pub fn complete<'a>(self, fcx: &FnCtxt<'a, 'tcx>) -> Ty<'tcx> {
    306 ( 0.00%)          if let Some(final_ty) = self.final_ty {
      .                       final_ty
      .                   } else {
      .                       // If we only had inputs that were of type `!` (or no
      .                       // inputs at all), then the final type is `!`.
      .                       assert_eq!(self.pushed, 0);
      .                       fcx.tcx.types.never
      .                   }
    150 ( 0.00%)      }
      .           }
      .           
      .           /// Something that can be converted into an expression to which we can
      .           /// apply a coercion.
      .           pub trait AsCoercionSite {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_>;
      .           }
      .           
-- line 1732 ----------------------------------------
-- line 1736 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'a, T> AsCoercionSite for &'a T
      .           where
      .               T: AsCoercionSite,
      .           {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
     36 ( 0.00%)          (**self).as_coercion_site()
      .               }
      .           }
      .           
      .           impl AsCoercionSite for ! {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
      .                   unreachable!()
      .               }
      .           }
      .           
      .           impl AsCoercionSite for hir::Arm<'_> {
      .               fn as_coercion_site(&self) -> &hir::Expr<'_> {
     26 ( 0.00%)          &self.body
      .               }
      .           }

124,965 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/coercion.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/expand.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .                               AstFragmentKind::OptExpr =>
      .                                   result.make_expr().map(Some).map(AstFragment::OptExpr),
      .                               $(AstFragmentKind::$Kind => result.$make_ast().map(AstFragment::$Kind),)*
      .                           }
      .                       }
      .                   }
      .           
      .                   impl AstFragment {
      1 ( 0.00%)              pub fn add_placeholders(&mut self, placeholders: &[NodeId]) {
      1 ( 0.00%)                  if placeholders.is_empty() {
      .                               return;
      .                           }
      .                           match self {
      .                               $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {
      .                                   // We are repeating through arguments with `many`, to do that we have to
      .                                   // mention some macro variable from those arguments even if it's not used.
      .                                   macro _repeating($flat_map_ast_elt) {}
      .                                   placeholder(AstFragmentKind::$Kind, *id, None).$make_ast()
      .                               })),)?)*
      .                               _ => panic!("unexpected AST fragment kind")
      .                           }
      2 ( 0.00%)              }
      .           
      .                       pub fn make_opt_expr(self) -> Option<P<ast::Expr>> {
      .                           match self {
      .                               AstFragment::OptExpr(expr) => expr,
      .                               _ => panic!("AstFragment::make_* called on the wrong kind of fragment"),
      .                           }
      .                       }
      .           
      .                       $(pub fn $make_ast(self) -> $AstTy {
      2 ( 0.00%)                  match self {
      9 ( 0.00%)                      AstFragment::$Kind(ast) => ast,
      .                               _ => panic!("AstFragment::make_* called on the wrong kind of fragment"),
      .                           }
      .                       })*
      .           
      .                       fn make_ast<T: InvocationCollectorNode>(self) -> T::OutputTy {
      .                           T::fragment_to_output(self)
      .                       }
      .           
      2 ( 0.00%)              pub fn mut_visit_with<F: MutVisitor>(&mut self, vis: &mut F) {
     11 ( 0.00%)                  match self {
      .                               AstFragment::OptExpr(opt_expr) => {
      .                                   visit_clobber(opt_expr, |opt_expr| {
      .                                       if let Some(expr) = opt_expr {
      .                                           vis.filter_map_expr(expr)
      .                                       } else {
      .                                           None
      .                                       }
      .                                   });
      .                               }
      9 ( 0.00%)                      $($(AstFragment::$Kind(ast) => vis.$mut_visit_ast(ast),)?)*
      .                               $($(AstFragment::$Kind(ast) =>
      .                                   ast.flat_map_in_place(|ast| vis.$flat_map_ast_elt(ast)),)?)*
      .                           }
      .                       }
      .           
     18 ( 0.00%)              pub fn visit_with<'a, V: Visitor<'a>>(&'a self, visitor: &mut V) {
     10 ( 0.00%)                  match *self {
      .                               AstFragment::OptExpr(Some(ref expr)) => visitor.visit_expr(expr),
      .                               AstFragment::OptExpr(None) => {}
     11 ( 0.00%)                      $($(AstFragment::$Kind(ref ast) => visitor.$visit_ast(ast),)?)*
      .                               $($(AstFragment::$Kind(ref ast) => for ast_elt in &ast[..] {
      .                                   visitor.$visit_ast_elt(ast_elt, $($args)*);
      .                               })?)*
      .                           }
      .                       }
      .                   }
      .           
      .                   impl<'a> MacResult for crate::mbe::macro_rules::ParserAnyMacro<'a> {
-- line 142 ----------------------------------------
-- line 358 ----------------------------------------
      .               monotonic: bool, // cf. `cx.monotonic_expander()`
      .           }
      .           
      .           impl<'a, 'b> MacroExpander<'a, 'b> {
      .               pub fn new(cx: &'a mut ExtCtxt<'b>, monotonic: bool) -> Self {
      .                   MacroExpander { cx, monotonic }
      .               }
      .           
     10 ( 0.00%)      pub fn expand_crate(&mut self, krate: ast::Crate) -> ast::Crate {
      6 ( 0.00%)          let file_path = match self.cx.source_map().span_to_filename(krate.span) {
     11 ( 0.00%)              FileName::Real(name) => name
      .                           .into_local_path()
      .                           .expect("attempting to resolve a file path in an external file"),
      .                       other => PathBuf::from(other.prefer_local().to_string()),
      .                   };
      4 ( 0.00%)          let dir_path = file_path.parent().unwrap_or(&file_path).to_owned();
      3 ( 0.00%)          self.cx.root_path = dir_path.clone();
      1 ( 0.00%)          self.cx.current_expansion.module = Rc::new(ModuleData {
      3 ( 0.00%)              mod_path: vec![Ident::from_str(&self.cx.ecfg.crate_name)],
      4 ( 0.00%)              file_path_stack: vec![file_path],
      .                       dir_path,
      .                   });
     13 ( 0.00%)          let krate = self.fully_expand_fragment(AstFragment::Crate(krate)).make_crate();
      1 ( 0.00%)          assert_eq!(krate.id, ast::CRATE_NODE_ID);
      2 ( 0.00%)          self.cx.trace_macros_diag();
      .                   krate
      9 ( 0.00%)      }
      .           
      .               // Recursively expand all macro invocations in this AST fragment.
      9 ( 0.00%)      pub fn fully_expand_fragment(&mut self, input_fragment: AstFragment) -> AstFragment {
      1 ( 0.00%)          let orig_expansion_data = self.cx.current_expansion.clone();
      3 ( 0.00%)          let orig_force_mode = self.cx.force_mode;
      .           
      .                   // Collect all macro invocations and replace them with placeholders.
      8 ( 0.00%)          let (mut fragment_with_placeholders, mut invocations) =
     10 ( 0.00%)              self.collect_invocations(input_fragment, &[]);
      .           
      .                   // Optimization: if we resolve all imports now,
      .                   // we'll be able to immediately resolve most of imported macros.
      .                   self.resolve_imports();
      .           
      .                   // Resolve paths in all invocations and produce output expanded fragments for them, but
      .                   // do not insert them into our input AST fragment yet, only store in `expanded_fragments`.
      .                   // The output fragments also go through expansion recursively until no invocations are left.
      .                   // Unresolved macros produce dummy outputs as a recovery measure.
      .                   invocations.reverse();
      .                   let mut expanded_fragments = Vec::new();
      .                   let mut undetermined_invocations = Vec::new();
      6 ( 0.00%)          let (mut progress, mut force) = (false, !self.monotonic);
      .                   loop {
      .                       let Some((invoc, ext)) = invocations.pop() else {
      .                           self.resolve_imports();
      1 ( 0.00%)                  if undetermined_invocations.is_empty() {
      .                               break;
      .                           }
      .                           invocations = mem::take(&mut undetermined_invocations);
      .                           force = !mem::replace(&mut progress, false);
      .                           if force && self.monotonic {
      .                               self.cx.sess.delay_span_bug(
      .                                   invocations.last().unwrap().0.span(),
      .                                   "expansion entered force mode without producing any errors",
-- line 418 ----------------------------------------
-- line 506 ----------------------------------------
      .                       progress = true;
      .                       if expanded_fragments.len() < depth {
      .                           expanded_fragments.push(Vec::new());
      .                       }
      .                       expanded_fragments[depth - 1].push((expn_id, expanded_fragment));
      .                       invocations.extend(new_invocations.into_iter().rev());
      .                   }
      .           
     23 ( 0.00%)          self.cx.current_expansion = orig_expansion_data;
      1 ( 0.00%)          self.cx.force_mode = orig_force_mode;
      .           
      .                   // Finally incorporate all the expanded macros into the input AST fragment.
      .                   let mut placeholder_expander = PlaceholderExpander::default();
      .                   while let Some(expanded_fragments) = expanded_fragments.pop() {
      .                       for (expn_id, expanded_fragment) in expanded_fragments.into_iter().rev() {
      .                           placeholder_expander
      .                               .add(NodeId::placeholder_from_expn_id(expn_id), expanded_fragment);
      .                       }
      .                   }
      1 ( 0.00%)          fragment_with_placeholders.mut_visit_with(&mut placeholder_expander);
      .                   fragment_with_placeholders
      8 ( 0.00%)      }
      .           
      .               fn resolve_imports(&mut self) {
      7 ( 0.00%)          if self.monotonic {
      8 ( 0.00%)              self.cx.resolver.resolve_imports();
      .                   }
      .               }
      .           
      .               /// Collects all macro invocations reachable at this time in this AST fragment, and replace
      .               /// them with "placeholders" - dummy macro invocations with specially crafted `NodeId`s.
      .               /// Then call into resolver that builds a skeleton ("reduced graph") of the fragment and
      .               /// prepares data for resolving paths of macro invocations.
     12 ( 0.00%)      fn collect_invocations(
      .                   &mut self,
      .                   mut fragment: AstFragment,
      .                   extra_placeholders: &[NodeId],
      .               ) -> (AstFragment, Vec<(Invocation, Option<Lrc<SyntaxExtension>>)>) {
      .                   // Resolve `$crate`s in the fragment for pretty-printing.
      4 ( 0.00%)          self.cx.resolver.resolve_dollar_crates();
      .           
      .                   let mut invocations = {
      6 ( 0.00%)              let mut collector = InvocationCollector {
      .                           // Non-derive macro invocations cannot see the results of cfg expansion - they
      .                           // will either be removed along with the item, or invoked before the cfg/cfg_attr
      .                           // attribute is expanded. Therefore, we don't need to configure the tokens
      .                           // Derive macros *can* see the results of cfg-expansion - they are handled
      .                           // specially in `fully_expand_fragment`
      .                           cfg: StripUnconfigured {
      1 ( 0.00%)                      sess: &self.cx.sess,
      1 ( 0.00%)                      features: self.cx.ecfg.features,
      .                               config_tokens: false,
      .                           },
      .                           cx: self.cx,
      .                           invocations: Vec::new(),
      1 ( 0.00%)                  monotonic: self.monotonic,
      .                       };
      .                       fragment.mut_visit_with(&mut collector);
      4 ( 0.00%)              fragment.add_placeholders(extra_placeholders);
      4 ( 0.00%)              collector.invocations
      .                   };
      .           
      2 ( 0.00%)          if self.monotonic {
      3 ( 0.00%)              self.cx
      .                           .resolver
      2 ( 0.00%)                  .visit_ast_fragment_with_placeholders(self.cx.current_expansion.id, &fragment);
      .           
      3 ( 0.00%)              if self.cx.sess.opts.debugging_opts.incremental_relative_spans {
      .                           for (invoc, _) in invocations.iter_mut() {
      .                               let expn_id = invoc.expansion_data.id;
      .                               let parent_def = self.cx.resolver.invocation_parent(expn_id);
      .                               let span = match &mut invoc.kind {
      .                                   InvocationKind::Bang { ref mut span, .. } => span,
      .                                   InvocationKind::Attr { attr, .. } => &mut attr.span,
      .                                   InvocationKind::Derive { path, .. } => &mut path.span,
      .                               };
      .                               *span = span.with_parent(Some(parent_def));
      .                           }
      .                       }
      .                   }
      .           
      9 ( 0.00%)          (fragment, invocations)
      8 ( 0.00%)      }
      .           
      .               fn error_recursion_limit_reached(&mut self) {
      .                   let expn_data = self.cx.current_expansion.id.expn_data();
      .                   let suggested_limit = match self.cx.ecfg.recursion_limit {
      .                       Limit(0) => Limit(2),
      .                       limit => limit * 2,
      .                   };
      .                   self.cx
-- line 596 ----------------------------------------
-- line 1031 ----------------------------------------
      .               fn pre_flat_map_node_collect_attr(_cfg: &StripUnconfigured<'_>, _attr: &ast::Attribute) {}
      .               fn post_flat_map_node_collect_bang(_output: &mut Self::OutputTy, _add_semicolon: AddSemicolon) {
      .               }
      .               fn wrap_flat_map_node_noop_flat_map(
      .                   node: Self,
      .                   collector: &mut InvocationCollector<'_, '_>,
      .                   noop_flat_map: impl FnOnce(Self, &mut InvocationCollector<'_, '_>) -> Self::OutputTy,
      .               ) -> Result<Self::OutputTy, Self> {
    876 ( 0.00%)          Ok(noop_flat_map(node, collector))
      .               }
      .           }
      .           
      .           impl InvocationCollectorNode for P<ast::Item> {
      .               const KIND: AstFragmentKind = AstFragmentKind::Items;
      .               fn to_annotatable(self) -> Annotatable {
      .                   Annotatable::Item(self)
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_items()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn noop_flat_map<V: MutVisitor>(self, visitor: &mut V) -> Self::OutputTy {
    102 ( 0.00%)          noop_flat_map_item(self, visitor)
      .               }
      .               fn is_mac_call(&self) -> bool {
     34 ( 0.00%)          matches!(self.kind, ItemKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let node = self.into_inner();
      .                   match node.kind {
      .                       ItemKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
    374 ( 0.00%)      fn wrap_flat_map_node_noop_flat_map(
      .                   mut node: Self,
      .                   collector: &mut InvocationCollector<'_, '_>,
      .                   noop_flat_map: impl FnOnce(Self, &mut InvocationCollector<'_, '_>) -> Self::OutputTy,
      .               ) -> Result<Self::OutputTy, Self> {
     68 ( 0.00%)          if !matches!(node.kind, ItemKind::Mod(..)) {
    198 ( 0.00%)              return Ok(noop_flat_map(node, collector));
      .                   }
      .           
      .                   // Work around borrow checker not seeing through `P`'s deref.
     11 ( 0.00%)          let (ident, span, mut attrs) = (node.ident, node.span, mem::take(&mut node.attrs));
      .                   let ItemKind::Mod(_, mod_kind) = &mut node.kind else {
      .                       unreachable!()
      .                   };
      .           
      .                   let ecx = &mut collector.cx;
      2 ( 0.00%)          let (file_path, dir_path, dir_ownership) = match mod_kind {
      .                       ModKind::Loaded(_, inline, _) => {
      .                           // Inline `mod foo { ... }`, but we still need to push directories.
      .                           let (dir_path, dir_ownership) = mod_dir_path(
      .                               &ecx.sess,
      .                               ident,
      .                               &attrs,
      .                               &ecx.current_expansion.module,
      .                               ecx.current_expansion.dir_ownership,
      .                               *inline,
      .                           );
      .                           node.attrs = attrs;
      .                           (None, dir_path, dir_ownership)
      .                       }
      .                       ModKind::Unloaded => {
      .                           // We have an outline `mod foo;` so we need to parse the file.
      2 ( 0.00%)                  let old_attrs_len = attrs.len();
     19 ( 0.00%)                  let ParsedExternalMod { items, inner_span, file_path, dir_path, dir_ownership } =
      8 ( 0.00%)                      parse_external_mod(
      2 ( 0.00%)                          &ecx.sess,
      2 ( 0.00%)                          ident,
      .                                   span,
      1 ( 0.00%)                          &ecx.current_expansion.module,
      1 ( 0.00%)                          ecx.current_expansion.dir_ownership,
      .                                   &mut attrs,
      .                               );
      .           
      5 ( 0.00%)                  if let Some(lint_store) = ecx.lint_store {
     13 ( 0.00%)                      lint_store.pre_expansion_lint(
      2 ( 0.00%)                          ecx.sess,
      4 ( 0.00%)                          ecx.resolver.registered_tools(),
      2 ( 0.00%)                          ecx.current_expansion.lint_node_id,
      .                                   &attrs,
      .                                   &items,
      1 ( 0.00%)                          ident.name.as_str(),
      .                               );
      .                           }
      .           
     12 ( 0.00%)                  *mod_kind = ModKind::Loaded(items, Inline::No, inner_span);
      9 ( 0.00%)                  node.attrs = attrs;
      2 ( 0.00%)                  if node.attrs.len() > old_attrs_len {
      .                               // If we loaded an out-of-line module and added some inner attributes,
      .                               // then we need to re-configure it and re-collect attributes for
      .                               // resolution and expansion.
      .                               return Err(node);
      .                           }
      .                           (Some(file_path), dir_path, dir_ownership)
      .                       }
      .                   };
      .           
      .                   // Set the module info before we flat map.
      7 ( 0.00%)          let mut module = ecx.current_expansion.module.with_dir_path(dir_path);
      2 ( 0.00%)          module.mod_path.push(ident);
      2 ( 0.00%)          if let Some(file_path) = file_path {
      .                       module.file_path_stack.push(file_path);
      .                   }
      .           
      2 ( 0.00%)          let orig_module = mem::replace(&mut ecx.current_expansion.module, Rc::new(module));
      .                   let orig_dir_ownership =
      1 ( 0.00%)              mem::replace(&mut ecx.current_expansion.dir_ownership, dir_ownership);
      .           
      5 ( 0.00%)          let res = Ok(noop_flat_map(node, collector));
      .           
      3 ( 0.00%)          collector.cx.current_expansion.dir_ownership = orig_dir_ownership;
      4 ( 0.00%)          collector.cx.current_expansion.module = orig_module;
      4 ( 0.00%)          res
    306 ( 0.00%)      }
      .           }
      .           
      .           struct TraitItemTag;
      .           impl InvocationCollectorNode for AstLikeWrapper<P<ast::AssocItem>, TraitItemTag> {
      .               type OutputTy = SmallVec<[P<ast::AssocItem>; 1]>;
      .               const KIND: AstFragmentKind = AstFragmentKind::TraitItems;
      .               fn to_annotatable(self) -> Annotatable {
      .                   Annotatable::TraitItem(self.wrapped)
-- line 1157 ----------------------------------------
-- line 1158 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_trait_items()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.wrapped.id
      .               }
      .               fn noop_flat_map<V: MutVisitor>(self, visitor: &mut V) -> Self::OutputTy {
     70 ( 0.00%)          noop_flat_map_assoc_item(self.wrapped, visitor)
      .               }
      .               fn is_mac_call(&self) -> bool {
     35 ( 0.00%)          matches!(self.wrapped.kind, AssocItemKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let item = self.wrapped.into_inner();
      .                   match item.kind {
      .                       AssocItemKind::MacCall(mac) => (mac, item.attrs, AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
-- line 1177 ----------------------------------------
-- line 1186 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_impl_items()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.wrapped.id
      .               }
      .               fn noop_flat_map<V: MutVisitor>(self, visitor: &mut V) -> Self::OutputTy {
     56 ( 0.00%)          noop_flat_map_assoc_item(self.wrapped, visitor)
      .               }
      .               fn is_mac_call(&self) -> bool {
     28 ( 0.00%)          matches!(self.wrapped.kind, AssocItemKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let item = self.wrapped.into_inner();
      .                   match item.kind {
      .                       AssocItemKind::MacCall(mac) => (mac, item.attrs, AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
-- line 1205 ----------------------------------------
-- line 1302 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_params()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn noop_flat_map<V: MutVisitor>(self, visitor: &mut V) -> Self::OutputTy {
    975 ( 0.00%)          noop_flat_map_param(self, visitor)
      .               }
      .           }
      .           
      .           impl InvocationCollectorNode for ast::GenericParam {
      .               const KIND: AstFragmentKind = AstFragmentKind::GenericParams;
      .               fn to_annotatable(self) -> Annotatable {
      .                   Annotatable::GenericParam(self)
      .               }
-- line 1318 ----------------------------------------
-- line 1334 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_arms()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn noop_flat_map<V: MutVisitor>(self, visitor: &mut V) -> Self::OutputTy {
    195 ( 0.00%)          noop_flat_map_arm(self, visitor)
      .               }
      .           }
      .           
      .           impl InvocationCollectorNode for ast::Stmt {
      .               type AttrsTy = ast::AttrVec;
      .               const KIND: AstFragmentKind = AstFragmentKind::Stmts;
      .               fn to_annotatable(self) -> Annotatable {
      .                   Annotatable::Stmt(P(self))
-- line 1350 ----------------------------------------
-- line 1410 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_crate()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {
      3 ( 0.00%)          noop_visit_crate(self, visitor)
      .               }
      .           }
      .           
      .           impl InvocationCollectorNode for P<ast::Ty> {
      .               type OutputTy = P<ast::Ty>;
      .               const KIND: AstFragmentKind = AstFragmentKind::Ty;
      .               fn to_annotatable(self) -> Annotatable {
      .                   unreachable!()
-- line 1426 ----------------------------------------
-- line 1427 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_ty()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {
    432 ( 0.00%)          noop_visit_ty(self, visitor)
      .               }
      .               fn is_mac_call(&self) -> bool {
    216 ( 0.00%)          matches!(self.kind, ast::TyKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let node = self.into_inner();
      .                   match node.kind {
      .                       TyKind::MacCall(mac) => (mac, Vec::new(), AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
-- line 1446 ----------------------------------------
-- line 1454 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_pat()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {
    156 ( 0.00%)          noop_visit_pat(self, visitor)
      .               }
      .               fn is_mac_call(&self) -> bool {
     78 ( 0.00%)          matches!(self.kind, PatKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let node = self.into_inner();
      .                   match node.kind {
      .                       PatKind::MacCall(mac) => (mac, Vec::new(), AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
-- line 1473 ----------------------------------------
-- line 1485 ----------------------------------------
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.id
      .               }
      .               fn descr() -> &'static str {
      .                   "an expression"
      .               }
      .               fn noop_visit<V: MutVisitor>(&mut self, visitor: &mut V) {
    498 ( 0.00%)          noop_visit_expr(self, visitor)
      .               }
      .               fn is_mac_call(&self) -> bool {
    166 ( 0.00%)          matches!(self.kind, ExprKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let node = self.into_inner();
      .                   match node.kind {
      .                       ExprKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
-- line 1504 ----------------------------------------
-- line 1514 ----------------------------------------
      .               }
      .               fn fragment_to_output(fragment: AstFragment) -> Self::OutputTy {
      .                   fragment.make_opt_expr()
      .               }
      .               fn id(&mut self) -> &mut NodeId {
      .                   &mut self.wrapped.id
      .               }
      .               fn noop_flat_map<V: MutVisitor>(mut self, visitor: &mut V) -> Self::OutputTy {
 58,666 ( 0.01%)          noop_visit_expr(&mut self.wrapped, visitor);
      .                   Some(self.wrapped)
      .               }
      .               fn is_mac_call(&self) -> bool {
 58,666 ( 0.01%)          matches!(self.wrapped.kind, ast::ExprKind::MacCall(..))
      .               }
      .               fn take_mac_call(self) -> (ast::MacCall, Self::AttrsTy, AddSemicolon) {
      .                   let node = self.wrapped.into_inner();
      .                   match node.kind {
      .                       ExprKind::MacCall(mac) => (mac, node.attrs, AddSemicolon::No),
      .                       _ => unreachable!(),
      .                   }
      .               }
-- line 1534 ----------------------------------------
-- line 1581 ----------------------------------------
      .           
      .               /// If `item` is an attribute invocation, remove the attribute and return it together with
      .               /// its position and derives following it. We have to collect the derives in order to resolve
      .               /// legacy derive helpers (helpers written before derives that introduce them).
      .               fn take_first_attr(
      .                   &self,
      .                   item: &mut impl AstLike,
      .               ) -> Option<(ast::Attribute, usize, Vec<ast::Path>)> {
 29,676 ( 0.00%)          let mut attr = None;
      .           
 29,676 ( 0.00%)          let mut cfg_pos = None;
 59,273 ( 0.01%)          let mut attr_pos = None;
    158 ( 0.00%)          for (pos, attr) in item.attrs().iter().enumerate() {
    702 ( 0.00%)              if !attr.is_doc_comment() && !self.cx.expanded_inert_attrs.is_marked(attr) {
     76 ( 0.00%)                  let name = attr.ident().map(|ident| ident.name);
    152 ( 0.00%)                  if name == Some(sym::cfg) || name == Some(sym::cfg_attr) {
      2 ( 0.00%)                      cfg_pos = Some(pos); // a cfg attr found, no need to search anymore
      .                               break;
    111 ( 0.00%)                  } else if attr_pos.is_none()
      .                               && !name.map_or(false, rustc_feature::is_builtin_attr_name)
      .                           {
      .                               attr_pos = Some(pos); // a non-cfg attr found, still may find a cfg attr
      .                           }
      .                       }
      .                   }
      .           
      .                   item.visit_attrs(|attrs| {
118,743 ( 0.01%)              attr = Some(match (cfg_pos, attr_pos) {
     17 ( 0.00%)                  (Some(pos), _) => (attrs.remove(pos), pos, Vec::new()),
      .                           (_, Some(pos)) => {
      .                               let attr = attrs.remove(pos);
      .                               let following_derives = attrs[pos..]
      .                                   .iter()
      .                                   .filter(|a| a.has_name(sym::derive))
      .                                   .flat_map(|a| a.meta_item_list().unwrap_or_default())
      .                                   .filter_map(|nested_meta| match nested_meta {
      .                                       NestedMetaItem::MetaItem(ast::MetaItem {
-- line 1617 ----------------------------------------
-- line 1679 ----------------------------------------
      .               }
      .           
      .               fn expand_cfg_true(
      .                   &mut self,
      .                   node: &mut impl AstLike,
      .                   attr: ast::Attribute,
      .                   pos: usize,
      .               ) -> bool {
      2 ( 0.00%)          let res = self.cfg.cfg_true(&attr);
      2 ( 0.00%)          if res {
      .                       // FIXME: `cfg(TRUE)` attributes do not currently remove themselves during expansion,
      .                       // and some tools like rustdoc and clippy rely on that. Find a way to remove them
      .                       // while keeping the tools working.
      .                       self.cx.expanded_inert_attrs.mark(&attr);
      .                       node.visit_attrs(|attrs| attrs.insert(pos, attr));
      .                   }
      .                   res
      .               }
-- line 1696 ----------------------------------------
-- line 1701 ----------------------------------------
      .                   });
      .               }
      .           
      .               fn flat_map_node<Node: InvocationCollectorNode<OutputTy: Default>>(
      .                   &mut self,
      .                   mut node: Node,
      .               ) -> Node::OutputTy {
      .                   loop {
 88,605 ( 0.01%)              return match self.take_first_attr(&mut node) {
     28 ( 0.00%)                  Some((attr, pos, derives)) => match attr.name_or_empty() {
      .                               sym::cfg => {
     17 ( 0.00%)                          if self.expand_cfg_true(&mut node, attr, pos) {
      .                                       continue;
      .                                   }
      .                                   Default::default()
      .                               }
      .                               sym::cfg_attr => {
      .                                   self.expand_cfg_attr(&mut node, attr, pos);
      .                                   continue;
      .                               }
      .                               _ => {
      .                                   Node::pre_flat_map_node_collect_attr(&self.cfg, &attr);
      .                                   self.collect_attr((attr, pos, derives), node.to_annotatable(), Node::KIND)
      .                                       .make_ast::<Node>()
      .                               }
      .                           },
 29,430 ( 0.00%)                  None if node.is_mac_call() => {
      .                               let (mac, attrs, add_semicolon) = node.take_mac_call();
      .                               self.check_attributes(&attrs, &mac);
      .                               let mut res = self.collect_bang(mac, Node::KIND).make_ast::<Node>();
      .                               Node::post_flat_map_node_collect_bang(&mut res, add_semicolon);
      .                               res
      .                           }
      .                           None => {
    204 ( 0.00%)                      match Node::wrap_flat_map_node_noop_flat_map(node, self, |mut node, this| {
383,332 ( 0.04%)                          assign_id!(this, node.id(), || node.noop_flat_map(this))
      .                               }) {
    634 ( 0.00%)                          Ok(output) => output,
      .                                   Err(returned_node) => {
     69 ( 0.00%)                              node = returned_node;
      .                                       continue;
      .                                   }
      .                               }
      .                           }
      .                       };
      .                   }
      1 ( 0.00%)      }
      .           
      .               fn visit_node<Node: InvocationCollectorNode<OutputTy = Node> + DummyAstNode>(
      .                   &mut self,
      .                   node: &mut Node,
      .               ) {
      .                   loop {
    667 ( 0.00%)              return match self.take_first_attr(node) {
      .                           Some((attr, pos, derives)) => match attr.name_or_empty() {
      .                               sym::cfg => {
      .                                   let span = attr.span;
      .                                   if self.expand_cfg_true(node, attr, pos) {
      .                                       continue;
      .                                   }
      .                                   let msg =
      .                                       format!("removing {} is not supported in this position", Node::descr());
-- line 1762 ----------------------------------------
-- line 1767 ----------------------------------------
      .                                   self.expand_cfg_attr(node, attr, pos);
      .                                   continue;
      .                               }
      .                               _ => visit_clobber(node, |node| {
      .                                   self.collect_attr((attr, pos, derives), node.to_annotatable(), Node::KIND)
      .                                       .make_ast::<Node>()
      .                               }),
      .                           },
    460 ( 0.00%)                  None if node.is_mac_call() => {
      .                               visit_clobber(node, |node| {
      .                                   // Do not clobber unless it's actually a macro (uncommon case).
      .                                   let (mac, attrs, _) = node.take_mac_call();
      .                                   self.check_attributes(&attrs, &mac);
      .                                   self.collect_bang(mac, Node::KIND).make_ast::<Node>()
      .                               })
      .                           }
      .                           None => {
  5,699 ( 0.00%)                      assign_id!(self, node.id(), || node.noop_visit(self))
      .                           }
      .                       };
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {
    490 ( 0.00%)      fn flat_map_item(&mut self, node: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {
      .                   self.flat_map_node(node)
    315 ( 0.00%)      }
      .           
    560 ( 0.00%)      fn flat_map_trait_item(&mut self, node: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {
      .                   self.flat_map_node(AstLikeWrapper::new(node, TraitItemTag))
    315 ( 0.00%)      }
      .           
    448 ( 0.00%)      fn flat_map_impl_item(&mut self, node: P<ast::AssocItem>) -> SmallVec<[P<ast::AssocItem>; 1]> {
      .                   self.flat_map_node(AstLikeWrapper::new(node, ImplItemTag))
    252 ( 0.00%)      }
      .           
      .               fn flat_map_foreign_item(
      .                   &mut self,
      .                   node: P<ast::ForeignItem>,
      .               ) -> SmallVec<[P<ast::ForeignItem>; 1]> {
      .                   self.flat_map_node(node)
      .               }
      .           
-- line 1810 ----------------------------------------
-- line 1819 ----------------------------------------
      .               fn flat_map_pat_field(&mut self, node: ast::PatField) -> SmallVec<[ast::PatField; 1]> {
      .                   self.flat_map_node(node)
      .               }
      .           
      .               fn flat_map_expr_field(&mut self, node: ast::ExprField) -> SmallVec<[ast::ExprField; 1]> {
      .                   self.flat_map_node(node)
      .               }
      .           
    520 ( 0.00%)      fn flat_map_param(&mut self, node: ast::Param) -> SmallVec<[ast::Param; 1]> {
    780 ( 0.00%)          self.flat_map_node(node)
    585 ( 0.00%)      }
      .           
      .               fn flat_map_generic_param(
      .                   &mut self,
      .                   node: ast::GenericParam,
      .               ) -> SmallVec<[ast::GenericParam; 1]> {
      .                   self.flat_map_node(node)
      .               }
      .           
    104 ( 0.00%)      fn flat_map_arm(&mut self, node: ast::Arm) -> SmallVec<[ast::Arm; 1]> {
    156 ( 0.00%)          self.flat_map_node(node)
    117 ( 0.00%)      }
      .           
    360 ( 0.00%)      fn flat_map_stmt(&mut self, mut node: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {
      .                   // FIXME: invocations in semicolon-less expressions positions are expanded as expressions,
      .                   // changing that requires some compatibility measures.
    144 ( 0.00%)          if node.is_expr() {
      .                       // The only way that we can end up with a `MacCall` expression statement,
      .                       // (as opposed to a `StmtKind::MacCall`) is if we have a macro as the
      .                       // traiing expression in a block (e.g. `fn foo() { my_macro!() }`).
      .                       // Record this information, so that we can report a more specific
      .                       // `SEMICOLON_IN_EXPRESSIONS_FROM_MACROS` lint if needed.
      .                       // See #78991 for an investigation of treating macros in this position
      .                       // as statements, rather than expressions, during parsing.
     72 ( 0.00%)              return match &node.kind {
      .                           StmtKind::Expr(expr)
     72 ( 0.00%)                      if matches!(**expr, ast::Expr { kind: ExprKind::MacCall(..), .. }) =>
      .                           {
      .                               self.cx.current_expansion.is_trailing_mac = true;
      .                               // Don't use `assign_id` for this statement - it may get removed
      .                               // entirely due to a `#[cfg]` on the contained expression
      .                               let res = noop_flat_map_stmt(node, self);
      .                               self.cx.current_expansion.is_trailing_mac = false;
      .                               res
      .                           }
    864 ( 0.00%)                  _ => assign_id!(self, &mut node.id, || noop_flat_map_stmt(node, self)),
      .                       };
      .                   }
      .           
      .                   self.flat_map_node(node)
    288 ( 0.00%)      }
      .           
     13 ( 0.00%)      fn visit_crate(&mut self, node: &mut ast::Crate) {
      .                   self.visit_node(node)
      8 ( 0.00%)      }
      .           
  1,728 ( 0.00%)      fn visit_ty(&mut self, node: &mut P<ast::Ty>) {
      .                   self.visit_node(node)
  1,728 ( 0.00%)      }
      .           
    624 ( 0.00%)      fn visit_pat(&mut self, node: &mut P<ast::Pat>) {
      .                   self.visit_node(node)
    624 ( 0.00%)      }
      .           
  1,494 ( 0.00%)      fn visit_expr(&mut self, node: &mut P<ast::Expr>) {
      .                   // FIXME: Feature gating is performed inconsistently between `Expr` and `OptExpr`.
      .                   if let Some(attr) = node.attrs.first() {
      .                       self.cfg.maybe_emit_expr_attr_err(attr);
      .                   }
      .                   self.visit_node(node)
  1,328 ( 0.00%)      }
      .           
498,661 ( 0.05%)      fn filter_map_expr(&mut self, node: P<ast::Expr>) -> Option<P<ast::Expr>> {
      .                   self.flat_map_node(AstLikeWrapper::new(node, OptExprTag))
234,664 ( 0.02%)      }
      .           
      .               fn visit_block(&mut self, node: &mut P<ast::Block>) {
      .                   let orig_dir_ownership = mem::replace(
     36 ( 0.00%)              &mut self.cx.current_expansion.dir_ownership,
      .                       DirOwnership::UnownedViaBlock,
      .                   );
      .                   noop_visit_block(node, self);
    144 ( 0.00%)          self.cx.current_expansion.dir_ownership = orig_dir_ownership;
      .               }
      .           
      .               fn visit_id(&mut self, id: &mut NodeId) {
      .                   // We may have already assigned a `NodeId`
      .                   // by calling `assign_id`
122,518 ( 0.01%)          if self.monotonic && *id == ast::DUMMY_NODE_ID {
  1,879 ( 0.00%)              *id = self.cx.resolver.next_node_id();
      .                   }
      .               }
      .           }
      .           
      .           pub struct ExpansionConfig<'feat> {
      .               pub crate_name: String,
      .               pub features: Option<&'feat Features>,
      .               pub recursion_limit: Limit,
      .               pub trace_mac: bool,
      .               pub should_test: bool,          // If false, strip `#[test]` nodes
      .               pub span_debug: bool,           // If true, use verbose debugging for `proc_macro::Span`
      .               pub proc_macro_backtrace: bool, // If true, show backtraces for proc-macro panics
      .           }
      .           
      .           impl<'feat> ExpansionConfig<'feat> {
     12 ( 0.00%)      pub fn default(crate_name: String) -> ExpansionConfig<'static> {
     18 ( 0.00%)          ExpansionConfig {
      9 ( 0.00%)              crate_name,
      .                       features: None,
      6 ( 0.00%)              recursion_limit: Limit::new(1024),
      .                       trace_mac: false,
      .                       should_test: false,
      .                       span_debug: false,
      .                       proc_macro_backtrace: false,
      .                   }
     15 ( 0.00%)      }
      .           
      .               fn proc_macro_hygiene(&self) -> bool {
      .                   self.features.map_or(false, |features| features.proc_macro_hygiene)
      .               }
      .           }

 61,857 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_expand/src/expand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs
--------------------------------------------------------------------------------
Ir               

-- line 14 ----------------------------------------
      .           use rustc_target::abi::{HasDataLayout, Size, VariantIdx, Variants};
      .           
      .           use super::{
      .               alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,
      .               ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,
      .               Operand, Pointer, PointerArithmetic, Provenance, Scalar, ScalarMaybeUninit,
      .           };
      .           
  1,812 ( 0.00%)  #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
      .           /// Information required for the sound usage of a `MemPlace`.
      .           pub enum MemPlaceMeta<Tag: Provenance = AllocId> {
      .               /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).
      .               Meta(Scalar<Tag>),
      .               /// `Sized` types or unsized `extern type`
      .               None,
      .               /// The address of this place may not be taken. This protects the `MemPlace` from coming from
      .               /// a ZST Operand without a backing allocation and being converted to an integer address. This
-- line 30 ----------------------------------------
-- line 33 ----------------------------------------
      .               Poison,
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);
      .           
      .           impl<Tag: Provenance> MemPlaceMeta<Tag> {
      .               pub fn unwrap_meta(self) -> Scalar<Tag> {
    174 ( 0.00%)          match self {
      .                       Self::Meta(s) => s,
      .                       Self::None | Self::Poison => {
      .                           bug!("expected wide pointer extra data (e.g. slice length or trait object vtable)")
      .                       }
      .                   }
      .               }
      .               fn has_meta(self) -> bool {
 87,945 ( 0.01%)          match self {
      .                       Self::Meta(_) => true,
      .                       Self::None | Self::Poison => false,
      .                   }
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
      .           pub struct MemPlace<Tag: Provenance = AllocId> {
      .               /// The pointer can be a pure integer, with the `None` tag.
      2 ( 0.00%)      pub ptr: Pointer<Option<Tag>>,
      4 ( 0.00%)      pub align: Align,
      .               /// Metadata for unsized places. Interpretation is up to the type.
      .               /// Must not be present for sized types, but can be missing for unsized types
      .               /// (e.g., `extern type`).
      .               pub meta: MemPlaceMeta<Tag>,
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(MemPlace, 48);
-- line 68 ----------------------------------------
-- line 93 ----------------------------------------
      .               type Target = Place<Tag>;
      .               #[inline(always)]
      .               fn deref(&self) -> &Place<Tag> {
      .                   &self.place
      .               }
      .           }
      .           
      .           /// A MemPlace with its layout. Constructing it is only possible in this module.
     14 ( 0.00%)  #[derive(Copy, Clone, Hash, Eq, PartialEq, Debug)]
      .           pub struct MPlaceTy<'tcx, Tag: Provenance = AllocId> {
      .               mplace: MemPlace<Tag>,
      .               pub layout: TyAndLayout<'tcx>,
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);
      .           
-- line 109 ----------------------------------------
-- line 113 ----------------------------------------
      .               fn deref(&self) -> &MemPlace<Tag> {
      .                   &self.mplace
      .               }
      .           }
      .           
      .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {
      .               #[inline(always)]
      .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
  3,270 ( 0.00%)          PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }
      .               }
      .           }
      .           
      .           impl<Tag: Provenance> MemPlace<Tag> {
      .               #[inline(always)]
      .               pub fn from_ptr(ptr: Pointer<Option<Tag>>, align: Align) -> Self {
      .                   MemPlace { ptr, align, meta: MemPlaceMeta::None }
      .               }
-- line 129 ----------------------------------------
-- line 132 ----------------------------------------
      .               pub fn map_provenance(self, f: impl FnOnce(Option<Tag>) -> Option<Tag>) -> Self {
      .                   MemPlace { ptr: self.ptr.map_provenance(f), ..self }
      .               }
      .           
      .               /// Turn a mplace into a (thin or wide) pointer, as a reference, pointing to the same space.
      .               /// This is the inverse of `ref_to_mplace`.
      .               #[inline(always)]
      .               pub fn to_ref(self, cx: &impl HasDataLayout) -> Immediate<Tag> {
    887 ( 0.00%)          match self.meta {
    602 ( 0.00%)              MemPlaceMeta::None => Immediate::from(Scalar::from_maybe_pointer(self.ptr, cx)),
      .                       MemPlaceMeta::Meta(meta) => {
     21 ( 0.00%)                  Immediate::ScalarPair(Scalar::from_maybe_pointer(self.ptr, cx).into(), meta.into())
      .                       }
      .                       MemPlaceMeta::Poison => bug!(
      .                           "MPlaceTy::dangling may never be used to produce a \
      .                           place that will have the address of its pointee taken"
      .                       ),
      .                   }
      .               }
      .           
-- line 151 ----------------------------------------
-- line 177 ----------------------------------------
      .               #[inline]
      .               pub fn offset(
      .                   &self,
      .                   offset: Size,
      .                   meta: MemPlaceMeta<Tag>,
      .                   layout: TyAndLayout<'tcx>,
      .                   cx: &impl HasDataLayout,
      .               ) -> InterpResult<'tcx, Self> {
731,881 ( 0.08%)          Ok(MPlaceTy { mplace: self.mplace.offset(offset, meta, cx)?, layout })
      .               }
      .           
      .               #[inline]
      .               pub fn from_aligned_ptr(ptr: Pointer<Option<Tag>>, layout: TyAndLayout<'tcx>) -> Self {
    100 ( 0.00%)          MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }
      .               }
      .           
      .               #[inline]
     87 ( 0.00%)      pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {
    348 ( 0.00%)          if self.layout.is_unsized() {
      .                       // We need to consult `meta` metadata
    186 ( 0.00%)              match self.layout.ty.kind() {
     31 ( 0.00%)                  ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),
      .                           _ => bug!("len not supported on unsized type {:?}", self.layout.ty),
      .                       }
      .                   } else {
      .                       // Go through the layout.  There are lots of types that support a length,
      .                       // e.g., SIMD types. (But not all repr(simd) types even have FieldsShape::Array!)
    112 ( 0.00%)              match self.layout.fields {
    112 ( 0.00%)                  FieldsShape::Array { count, .. } => Ok(count),
      .                           _ => bug!("len not supported on sized type {:?}", self.layout.ty),
      .                       }
      .                   }
    174 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(super) fn vtable(&self) -> Scalar<Tag> {
      .                   match self.layout.ty.kind() {
      .                       ty::Dynamic(..) => self.mplace.meta.unwrap_meta(),
      .                       _ => bug!("vtable not supported on type {:?}", self.layout.ty),
      .                   }
      .               }
-- line 217 ----------------------------------------
-- line 218 ----------------------------------------
      .           }
      .           
      .           // These are defined here because they produce a place.
      .           impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {
      .               #[inline(always)]
      .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
      .               /// read from the resulting mplace, not to get its address back.
      .               pub fn try_as_mplace(&self) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {
176,674 ( 0.02%)          match **self {
821,772 ( 0.09%)              Operand::Indirect(mplace) => Ok(MPlaceTy { mplace, layout: self.layout }),
      .                       Operand::Immediate(_) if self.layout.is_zst() => Ok(MPlaceTy::dangling(self.layout)),
207,410 ( 0.02%)              Operand::Immediate(imm) => Err(ImmTy::from_immediate(imm, self.layout)),
      .                   }
      .               }
      .           
      .               #[inline(always)]
      .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
      .               /// read from the resulting mplace, not to get its address back.
      .               pub fn assert_mem_place(&self) -> MPlaceTy<'tcx, Tag> {
      .                   self.try_as_mplace().unwrap()
-- line 237 ----------------------------------------
-- line 263 ----------------------------------------
      .               M: Machine<'mir, 'tcx, PointerTag = Tag>,
      .           {
      .               /// Take a value, which represents a (thin or wide) reference, and make it a place.
      .               /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.
      .               ///
      .               /// Only call this if you are sure the place is "valid" (aligned and inbounds), or do not
      .               /// want to ever use the place for memory access!
      .               /// Generally prefer `deref_operand`.
  2,030 ( 0.00%)      pub fn ref_to_mplace(
      .                   &self,
      .                   val: &ImmTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   let pointee_type =
    609 ( 0.00%)              val.layout.ty.builtin_deref(true).expect("`ref_to_mplace` called on non-ptr type").ty;
    609 ( 0.00%)          let layout = self.layout_of(pointee_type)?;
  1,015 ( 0.00%)          let (ptr, meta) = match **val {
    288 ( 0.00%)              Immediate::Scalar(ptr) => (ptr, MemPlaceMeta::None),
    413 ( 0.00%)              Immediate::ScalarPair(ptr, meta) => (ptr, MemPlaceMeta::Meta(meta.check_init()?)),
      .                   };
      .           
      .                   let mplace = MemPlace {
      .                       ptr: self.scalar_to_ptr(ptr.check_init()?),
      .                       // We could use the run-time alignment here. For now, we do not, because
      .                       // the point of tracking the alignment here is to make sure that the *static*
      .                       // alignment information emitted with the loads is correct. The run-time
      .                       // alignment can only be more restrictive.
    203 ( 0.00%)              align: layout.align.abi,
      .                       meta,
      .                   };
  3,451 ( 0.00%)          Ok(MPlaceTy { mplace, layout })
  1,827 ( 0.00%)      }
      .           
      .               /// Take an operand, representing a pointer, and dereference it to a place -- that
      .               /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.
    924 ( 0.00%)      pub fn deref_operand(
      .                   &self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
    252 ( 0.00%)          let val = self.read_immediate(src)?;
      .                   trace!("deref to {} on {:?}", val.layout.ty, *val);
    168 ( 0.00%)          let mplace = self.ref_to_mplace(&val)?;
    420 ( 0.00%)          self.check_mplace_access(mplace, CheckInAllocMsg::DerefTest)?;
    924 ( 0.00%)          Ok(mplace)
    728 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub(super) fn get_alloc(
      .                   &self,
      .                   place: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
      .                   assert!(!place.layout.is_unsized());
 58,643 ( 0.01%)          assert!(!place.meta.has_meta());
 58,643 ( 0.01%)          let size = place.layout.size;
527,787 ( 0.06%)          self.memory.get(place.ptr, size, place.align)
      .               }
      .           
      .               #[inline]
      .               pub(super) fn get_alloc_mut(
      .                   &mut self,
      .                   place: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
 29,298 ( 0.00%)          assert!(!place.layout.is_unsized());
 29,298 ( 0.00%)          assert!(!place.meta.has_meta());
 29,298 ( 0.00%)          let size = place.layout.size;
175,788 ( 0.02%)          self.memory.get_mut(place.ptr, size, place.align)
      .               }
      .           
      .               /// Check if this mplace is dereferenceable and sufficiently aligned.
      .               fn check_mplace_access(
      .                   &self,
      .                   mplace: MPlaceTy<'tcx, M::PointerTag>,
      .                   msg: CheckInAllocMsg,
      .               ) -> InterpResult<'tcx> {
      .                   let (size, align) = self
      .                       .size_and_align_of_mplace(&mplace)?
     84 ( 0.00%)              .unwrap_or((mplace.layout.size, mplace.layout.align.abi));
     84 ( 0.00%)          assert!(mplace.mplace.align <= align, "dynamic alignment less strict than static one?");
     84 ( 0.00%)          let align = M::enforce_alignment(&self.memory.extra).then_some(align);
    252 ( 0.00%)          self.memory.check_ptr_access_align(mplace.ptr, size, align.unwrap_or(Align::ONE), msg)?;
      .                   Ok(())
      .               }
      .           
      .               /// Offset a pointer to project to a field of a struct/union. Unlike `place_field`, this is
      .               /// always possible without allocating, so it can take `&self`. Also return the field's layout.
      .               /// This supports both struct and array fields.
      .               ///
      .               /// This also works for arrays, but then the `usize` index type is restricting.
      .               /// For indexing into arrays, use `mplace_index`.
      .               #[inline(always)]
      .               pub fn mplace_field(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
116,929 ( 0.01%)          let offset = base.layout.fields.offset(field);
 87,696 ( 0.01%)          let field_layout = base.layout.field(self, field);
      .           
      .                   // Offset may need adjustment for unsized fields.
146,185 ( 0.02%)          let (meta, offset) = if field_layout.is_unsized() {
      .                       // Re-use parent metadata to determine dynamic field layout.
      .                       // With custom DSTS, this *will* execute user-defined code, but the same
      .                       // happens at run-time so that's okay.
      .                       match self.size_and_align_of(&base.meta, &field_layout)? {
      .                           Some((_, align)) => (base.meta, offset.align_to(align)),
      .                           None => {
      .                               // For unsized types with an extern type tail we perform no adjustments.
      .                               // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.
-- line 369 ----------------------------------------
-- line 374 ----------------------------------------
      .                   } else {
      .                       // base.meta could be present; we might be accessing a sized field of an unsized
      .                       // struct.
      .                       (MemPlaceMeta::None, offset)
      .                   };
      .           
      .                   // We do not look at `base.layout.align` nor `field_layout.align`, unlike
      .                   // codegen -- mostly to see if we can get away with that
     44 ( 0.00%)          base.offset(offset, meta, field_layout, self)
      .               }
      .           
      .               /// Index into an array.
      .               #[inline(always)]
      .               pub fn mplace_index(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   index: u64,
-- line 390 ----------------------------------------
-- line 409 ----------------------------------------
      .                           "`mplace_index` called on non-array type {:?}",
      .                           base.layout.ty
      .                       ),
      .                   }
      .               }
      .           
      .               // Iterates over all fields of an array. Much more efficient than doing the
      .               // same by repeatedly calling `mplace_array`.
    870 ( 0.00%)      pub(super) fn mplace_array_fields<'a>(
      .                   &self,
      .                   base: &'a MPlaceTy<'tcx, Tag>,
      .               ) -> InterpResult<'tcx, impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>> + 'a>
      .               {
    348 ( 0.00%)          let len = base.len(self)?; // also asserts that we have a type where this makes sense
    261 ( 0.00%)          let stride = match base.layout.fields {
     87 ( 0.00%)              FieldsShape::Array { stride, .. } => stride,
      .                       _ => span_bug!(self.cur_span(), "mplace_array_fields: expected an array layout"),
      .                   };
    174 ( 0.00%)          let layout = base.layout.field(self, 0);
     87 ( 0.00%)          let dl = &self.tcx.data_layout;
      .                   // `Size` multiplication
527,685 ( 0.06%)          Ok((0..len).map(move |i| base.offset(stride * i, MemPlaceMeta::None, layout, dl)))
    783 ( 0.00%)      }
      .           
      .               fn mplace_subslice(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   from: u64,
      .                   to: u64,
      .                   from_end: bool,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 439 ----------------------------------------
-- line 476 ----------------------------------------
      .               }
      .           
      .               pub(crate) fn mplace_downcast(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   variant: VariantIdx,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // Downcasts only change the layout
      4 ( 0.00%)          assert!(!base.meta.has_meta());
     18 ( 0.00%)          Ok(MPlaceTy { layout: base.layout.for_variant(self, variant), ..*base })
      .               }
      .           
      .               /// Project into an mplace
      .               pub(super) fn mplace_projection(
      .                   &self,
      .                   base: &MPlaceTy<'tcx, M::PointerTag>,
      .                   proj_elem: mir::PlaceElem<'tcx>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 493 ----------------------------------------
-- line 542 ----------------------------------------
      .                   assert_eq!(layout.size, base.layout.size);
      .                   Ok((MPlaceTy { layout, ..*base }, len))
      .               }
      .           
      .               /// Gets the place of a field inside the place, and also the field's type.
      .               /// Just a convenience function, but used quite a bit.
      .               /// This is the only projection that might have a side-effect: We cannot project
      .               /// into the field of a local `ScalarPair`, we have to first allocate it.
292,110 ( 0.03%)      pub fn place_field(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   field: usize,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   // FIXME: We could try to be smarter and avoid allocation for fields that span the
      .                   // entire place.
 29,211 ( 0.00%)          let mplace = self.force_allocation(base)?;
350,532 ( 0.04%)          Ok(self.mplace_field(&mplace, field)?.into())
233,688 ( 0.02%)      }
      .           
      .               pub fn place_index(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   index: u64,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   let mplace = self.force_allocation(base)?;
      .                   Ok(self.mplace_index(&mplace, index)?.into())
-- line 567 ----------------------------------------
-- line 586 ----------------------------------------
      .           
      .               /// Projects into a place.
      .               pub fn place_projection(
      .                   &mut self,
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .                   &proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
      .                   use rustc_middle::mir::ProjectionElem::*;
    840 ( 0.00%)          Ok(match proj_elem {
      .                       Field(field, _) => self.place_field(base, field.index())?,
      .                       Downcast(_, variant) => self.place_downcast(base, variant)?,
    448 ( 0.00%)              Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),
      .                       // For the other variants, we have to force an allocation.
      .                       // This matches `operand_projection`.
      .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
      .                           let mplace = self.force_allocation(base)?;
      .                           self.mplace_projection(&mplace, proj_elem)?.into()
      .                       }
      .                   })
      .               }
-- line 605 ----------------------------------------
-- line 611 ----------------------------------------
      .                   base: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
      .                   let mplace = self.force_allocation(base)?;
      .                   self.mplace_to_simd(&mplace)
      .               }
      .           
      .               /// Computes a place. You should only use this if you intend to write into this
      .               /// place; for reading, a more efficient alternative is `eval_place_for_read`.
  3,760 ( 0.00%)      pub fn eval_place(
      .                   &mut self,
      .                   place: mir::Place<'tcx>,
      .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
  2,205 ( 0.00%)          let mut place_ty = PlaceTy {
      .                       // This works even for dead/uninitialized locals; we check further when writing
      .                       place: Place::Local { frame: self.frame_idx(), local: place.local },
      .                       layout: self.layout_of_local(self.frame(), place.local, None)?,
      .                   };
      .           
    112 ( 0.00%)          for elem in place.projection.iter() {
     56 ( 0.00%)              place_ty = self.place_projection(&place_ty, &elem)?
      .                   }
      .           
      .                   trace!("{:?}", self.dump_place(place_ty.place));
      .                   // Sanity-check the type we ended up with.
      .                   debug_assert!(mir_assign_valid_types(
      .                       *self.tcx,
      .                       self.param_env,
      .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
      .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
      .                       )?)?,
      .                       place_ty.layout,
      .                   ));
  7,938 ( 0.00%)          Ok(place_ty)
  3,760 ( 0.00%)      }
      .           
      .               /// Write an immediate to a place
      .               #[inline(always)]
      .               pub fn write_immediate(
      .                   &mut self,
      .                   src: Immediate<M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
  1,379 ( 0.00%)          self.write_immediate_no_validate(src, dest)?;
      .           
      .                   if M::enforce_validity(self) {
      .                       // Data got changed, better make sure it matches the type!
      .                       self.validate_operand(&self.place_to_op(dest)?)?;
      .                   }
      .           
      .                   Ok(())
      .               }
-- line 661 ----------------------------------------
-- line 678 ----------------------------------------
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   self.write_scalar(Scalar::from_maybe_pointer(ptr.into(), self), dest)
      .               }
      .           
      .               /// Write an immediate to a place.
      .               /// If you use this you are responsible for validating that things got copied at the
      .               /// right type.
 29,460 ( 0.00%)      fn write_immediate_no_validate(
      .                   &mut self,
      .                   src: Immediate<M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   if cfg!(debug_assertions) {
      .                       // This is a very common path, avoid some checks in release mode
      .                       assert!(!dest.layout.is_unsized(), "Cannot write unsized data");
      .                       match src {
-- line 694 ----------------------------------------
-- line 705 ----------------------------------------
      .                               // FIXME: Can we check anything here?
      .                           }
      .                       }
      .                   }
      .                   trace!("write_immediate: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
      .           
      .                   // See if we can avoid an allocation. This is the counterpart to `try_read_immediate`,
      .                   // but not factored as a separate function.
 59,098 ( 0.01%)          let mplace = match dest.place {
    591 ( 0.00%)              Place::Local { frame, local } => {
    356 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
      .                               Ok(local) => {
      .                                   // Local can be updated in-place.
  2,421 ( 0.00%)                          *local = LocalValue::Live(Operand::Immediate(src));
      .                                   return Ok(());
      .                               }
      .                               Err(mplace) => {
      .                                   // The local is in memory, go on below.
      .                                   mplace
      .                               }
      .                           }
      .                       }
175,788 ( 0.02%)              Place::Ptr(mplace) => mplace, // already referring to memory
      .                   };
263,682 ( 0.03%)          let dest = MPlaceTy { mplace, layout: dest.layout };
      .           
      .                   // This is already in memory, write there.
322,278 ( 0.03%)          self.write_immediate_to_mplace_no_validate(src, &dest)
 58,920 ( 0.01%)      }
      .           
      .               /// Write an immediate to memory.
      .               /// If you use this you are responsible for validating that things got copied at the
      .               /// right type.
292,980 ( 0.03%)      fn write_immediate_to_mplace_no_validate(
      .                   &mut self,
      .                   value: Immediate<M::PointerTag>,
      .                   dest: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // Note that it is really important that the type here is the right one, and matches the
      .                   // type things are read at. In case `src_val` is a `ScalarPair`, we don't do any magic here
      .                   // to handle padding properly, which is only correct if we never look at this data with the
      .                   // wrong type.
      .           
      .                   // Invalid places are a thing: the return place of a diverging function
 29,298 ( 0.00%)          let tcx = *self.tcx;
 58,596 ( 0.01%)          let mut alloc = match self.get_alloc_mut(dest)? {
146,490 ( 0.02%)              Some(a) => a,
      .                       None => return Ok(()), // zero-sized access
      .                   };
      .           
      .                   // FIXME: We should check that there are dest.layout.size many bytes available in
      .                   // memory.  The code below is not sufficient, with enough padding it might not
      .                   // cover all the bytes!
 58,596 ( 0.01%)          match value {
      .                       Immediate::Scalar(scalar) => {
 58,534 ( 0.01%)                  match dest.layout.abi {
      .                               Abi::Scalar(_) => {} // fine
      .                               _ => span_bug!(
      .                                   self.cur_span(),
      .                                   "write_immediate_to_mplace: invalid Scalar layout: {:#?}",
      .                                   dest.layout
      .                               ),
      .                           }
263,403 ( 0.03%)                  alloc.write_scalar(alloc_range(Size::ZERO, dest.layout.size), scalar)
      .                       }
      .                       Immediate::ScalarPair(a_val, b_val) => {
      .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
      .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
      .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
     62 ( 0.00%)                  let (a, b) = match dest.layout.abi {
     93 ( 0.00%)                      Abi::ScalarPair(a, b) => (a.value, b.value),
      .                               _ => span_bug!(
      .                                   self.cur_span(),
      .                                   "write_immediate_to_mplace: invalid ScalarPair layout: {:#?}",
      .                                   dest.layout
      .                               ),
      .                           };
      .                           let (a_size, b_size) = (a.size(&tcx), b.size(&tcx));
      .                           let b_offset = a_size.align_to(b.align(&tcx).abi);
      .           
      .                           // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,
      .                           // but that does not work: We could be a newtype around a pair, then the
      .                           // fields do not match the `ScalarPair` components.
      .           
    310 ( 0.00%)                  alloc.write_scalar(alloc_range(Size::ZERO, a_size), a_val)?;
    248 ( 0.00%)                  alloc.write_scalar(alloc_range(b_offset, b_size), b_val)
      .                       }
      .                   }
234,384 ( 0.02%)      }
      .           
      .               /// Copies the data from an operand to a place. This does not support transmuting!
      .               /// Use `copy_op_transmute` if the layouts could disagree.
      .               #[inline(always)]
      .               pub fn copy_op(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
176,196 ( 0.02%)          self.copy_op_no_validate(src, dest)?;
      .           
      .                   if M::enforce_validity(self) {
      .                       // Data got changed, better make sure it matches the type!
      .                       self.validate_operand(&self.place_to_op(dest)?)?;
      .                   }
      .           
      .                   Ok(())
      .               }
      .           
      .               /// Copies the data from an operand to a place. This does not support transmuting!
      .               /// Use `copy_op_transmute` if the layouts could disagree.
      .               /// Also, if you use this you are responsible for validating that things get copied at the
      .               /// right type.
234,680 ( 0.02%)      fn copy_op_no_validate(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // We do NOT compare the types for equality, because well-typed code can
      .                   // actually "transmute" `&mut T` to `&T` in an assignment without a cast.
529,098 ( 0.06%)          if !mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
      .                       span_bug!(
      .                           self.cur_span(),
      .                           "type mismatch when copying!\nsrc: {:?},\ndest: {:?}",
      .                           src.layout.ty,
      .                           dest.layout.ty,
      .                       );
      .                   }
      .           
      .                   // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.
147,031 ( 0.02%)          let src = match self.try_read_immediate(src)? {
      .                       Ok(src_val) => {
 29,424 ( 0.00%)                  assert!(!src.layout.is_unsized(), "cannot have unsized immediates");
      .                           // Yay, we got a value that we can write directly.
      .                           // FIXME: Add a check to make sure that if `src` is indirect,
      .                           // it does not overlap with `dest`.
381,355 ( 0.04%)                  return self.write_immediate_no_validate(*src_val, dest);
      .                       }
      .                       Err(mplace) => mplace,
      .                   };
      .                   // Slow path, this does not fit into an immediate. Just memcpy.
      .                   trace!("copy_op: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
      .           
      .                   // This interprets `src.meta` with the `dest` local's layout, if an unsized local
      .                   // is being initialized!
-- line 848 ----------------------------------------
-- line 853 ----------------------------------------
      .                           "Cannot copy into already initialized unsized place"
      .                       );
      .                       dest.layout.size
      .                   });
      .                   assert_eq!(src.meta, dest.meta, "Can only copy between equally-sized instances");
      .           
      .                   self.memory
      .                       .copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ true)
234,680 ( 0.02%)      }
      .           
      .               /// Copies the data from an operand to a place. The layouts may disagree, but they must
      .               /// have the same size.
    624 ( 0.00%)      pub fn copy_op_transmute(
      .                   &mut self,
      .                   src: &OpTy<'tcx, M::PointerTag>,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
  1,404 ( 0.00%)          if mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
      .                       // Fast path: Just use normal `copy_op`
      .                       return self.copy_op(src, dest);
      .                   }
      .                   // We still require the sizes to match.
      .                   if src.layout.size != dest.layout.size {
      .                       // FIXME: This should be an assert instead of an error, but if we transmute within an
      .                       // array length computation, `typeck` may not have yet been run and errored out. In fact
      .                       // most likey we *are* running `typeck` right now. Investigate whether we can bail out
-- line 878 ----------------------------------------
-- line 916 ----------------------------------------
      .               /// Ensures that a place is in memory, and returns where it is.
      .               /// If the place currently refers to a local that doesn't yet have a matching allocation,
      .               /// create such an allocation.
      .               /// This is essentially `force_to_memplace`.
      .               ///
      .               /// This supports unsized types and returns the computed size to avoid some
      .               /// redundant computation when copying; use `force_allocation` for a simpler, sized-only
      .               /// version.
263,673 ( 0.03%)      pub fn force_allocation_maybe_sized(
      .                   &mut self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
      .                   meta: MemPlaceMeta<M::PointerTag>,
      .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, Option<Size>)> {
292,970 ( 0.03%)          let (mplace, size) = match place.place {
 29,241 ( 0.00%)              Place::Local { frame, local } => {
 58,482 ( 0.01%)                  match M::access_local_mut(self, frame, local)? {
    270 ( 0.00%)                      Ok(&mut local_val) => {
      .                                   // We need to make an allocation.
      .           
      .                                   // We need the layout of the local.  We can NOT use the layout we got,
      .                                   // that might e.g., be an inner field of a struct with `Scalar` layout,
      .                                   // that has different alignment than the outer field.
      .                                   let local_layout =
    150 ( 0.00%)                              self.layout_of_local(&self.stack()[frame], local, None)?;
      .                                   // We also need to support unsized types, and hence cannot use `allocate`.
    120 ( 0.00%)                          let (size, align) = self
      .                                       .size_and_align_of(&meta, &local_layout)?
      .                                       .expect("Cannot allocate for non-dyn-sized type");
    210 ( 0.00%)                          let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;
      .                                   let mplace = MemPlace { ptr: ptr.into(), align, meta };
    150 ( 0.00%)                          if let LocalValue::Live(Operand::Immediate(value)) = local_val {
      .                                       // Preserve old value.
      .                                       // We don't have to validate as we can assume the local
      .                                       // was already valid for its type.
      .                                       let mplace = MPlaceTy { mplace, layout: local_layout };
      .                                       self.write_immediate_to_mplace_no_validate(value, &mplace)?;
      .                                   }
      .                                   // Now we can call `access_mut` again, asserting it goes well,
      .                                   // and actually overwrite things.
    570 ( 0.00%)                          *M::access_local_mut(self, frame, local).unwrap().unwrap() =
      .                                       LocalValue::Live(Operand::Indirect(mplace));
    210 ( 0.00%)                          (mplace, Some(size))
      .                               }
292,110 ( 0.03%)                      Err(mplace) => (mplace, None), // this already was an indirect local
      .                           }
      .                       }
    728 ( 0.00%)              Place::Ptr(mplace) => (mplace, None),
      .                   };
      .                   // Return with the original layout, so that the caller can go on
351,564 ( 0.04%)          Ok((MPlaceTy { mplace, layout: place.layout }, size))
234,376 ( 0.02%)      }
      .           
      .               #[inline(always)]
      .               pub fn force_allocation(
      .                   &mut self,
      .                   place: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
263,415 ( 0.03%)          Ok(self.force_allocation_maybe_sized(place, MemPlaceMeta::None)?.0)
      .               }
      .           
    288 ( 0.00%)      pub fn allocate(
      .                   &mut self,
      .                   layout: TyAndLayout<'tcx>,
      .                   kind: MemoryKind<M::MemoryKind>,
      .               ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {
    786 ( 0.00%)          let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;
    216 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
    252 ( 0.00%)      }
      .           
      .               /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation.
     30 ( 0.00%)      pub fn allocate_str(
      .                   &mut self,
      .                   str: &str,
      .                   kind: MemoryKind<M::MemoryKind>,
      .                   mutbl: Mutability,
      .               ) -> MPlaceTy<'tcx, M::PointerTag> {
     27 ( 0.00%)          let ptr = self.memory.allocate_bytes(str.as_bytes(), Align::ONE, kind, mutbl);
      .                   let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);
      .                   let mplace =
      .                       MemPlace { ptr: ptr.into(), align: Align::ONE, meta: MemPlaceMeta::Meta(meta) };
      .           
      .                   let ty = self.tcx.mk_ref(
      3 ( 0.00%)              self.tcx.lifetimes.re_static,
      3 ( 0.00%)              ty::TypeAndMut { ty: self.tcx.types.str_, mutbl },
      .                   );
      9 ( 0.00%)          let layout = self.layout_of(ty).unwrap();
     30 ( 0.00%)          MPlaceTy { mplace, layout }
     24 ( 0.00%)      }
      .           
      .               /// Writes the discriminant of the given variant.
     22 ( 0.00%)      pub fn write_discriminant(
      .                   &mut self,
      .                   variant_index: VariantIdx,
      .                   dest: &PlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx> {
      .                   // This must be an enum or generator.
      8 ( 0.00%)          match dest.layout.ty.kind() {
      4 ( 0.00%)              ty::Adt(adt, _) => assert!(adt.is_enum()),
      .                       ty::Generator(..) => {}
      .                       _ => span_bug!(
      .                           self.cur_span(),
      .                           "write_discriminant called on non-variant-type (neither enum nor generator)"
      .                       ),
      .                   }
      .                   // Layout computation excludes uninhabited variants from consideration
      .                   // therefore there's no way to represent those variants in the given layout.
      .                   // Essentially, uninhabited variants do not have a tag that corresponds to their
      .                   // discriminant, so we cannot do anything here.
      .                   // When evaluating we will always error before even getting here, but ConstProp 'executes'
      .                   // dead code, so we cannot ICE here.
      4 ( 0.00%)          if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {
      .                       throw_ub!(UninhabitedEnumVariantWritten)
      .                   }
      .           
     10 ( 0.00%)          match dest.layout.variants {
      .                       Variants::Single { index } => {
      .                           assert_eq!(index, variant_index);
      .                       }
      .                       Variants::Multiple {
      .                           tag_encoding: TagEncoding::Direct,
      6 ( 0.00%)                  tag: tag_layout,
      4 ( 0.00%)                  tag_field,
      .                           ..
      .                       } => {
      .                           // No need to validate that the discriminant here because the
      .                           // `TyAndLayout::for_variant()` call earlier already checks the variant is valid.
      .           
      .                           let discr_val =
      8 ( 0.00%)                      dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;
      .           
      .                           // raw discriminants for enums are isize or bigger during
      .                           // their computation, but the in-memory tag is the smallest possible
      .                           // representation
      .                           let size = tag_layout.value.size(self);
      .                           let tag_val = size.truncate(discr_val);
      .           
     10 ( 0.00%)                  let tag_dest = self.place_field(dest, tag_field)?;
      .                           self.write_scalar(Scalar::from_uint(tag_val, size), &tag_dest)?;
      .                       }
      .                       Variants::Multiple {
      .                           tag_encoding:
      .                               TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },
      .                           tag: tag_layout,
      .                           tag_field,
      .                           ..
-- line 1060 ----------------------------------------
-- line 1082 ----------------------------------------
      .                               // Write result.
      .                               let niche_dest = self.place_field(dest, tag_field)?;
      .                               self.write_immediate(*tag_val, &niche_dest)?;
      .                           }
      .                       }
      .                   }
      .           
      .                   Ok(())
     16 ( 0.00%)      }
      .           
    450 ( 0.00%)      pub fn raw_const_to_mplace(
      .                   &self,
      .                   raw: ConstAlloc<'tcx>,
      .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
      .                   // This must be an allocation in `tcx`
    150 ( 0.00%)          let _ = self.tcx.global_alloc(raw.alloc_id);
      .                   let ptr = self.global_base_pointer(Pointer::from(raw.alloc_id))?;
    150 ( 0.00%)          let layout = self.layout_of(raw.ty)?;
    300 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
    350 ( 0.00%)      }
      .           
      .               /// Turn a place with a `dyn Trait` type into a place with the actual dynamic type.
      .               /// Also return some more information so drop doesn't have to run the same code twice.
      .               pub(super) fn unpack_dyn_trait(
      .                   &self,
      .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
      .               ) -> InterpResult<'tcx, (ty::Instance<'tcx>, MPlaceTy<'tcx, M::PointerTag>)> {
      .                   let vtable = self.scalar_to_ptr(mplace.vtable()); // also sanity checks the type
-- line 1109 ----------------------------------------

354,536 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/late.rs
--------------------------------------------------------------------------------
Ir               

-- line 141 ----------------------------------------
      .               /// parameters.
      .               ConstParamTyRibKind,
      .           }
      .           
      .           impl RibKind<'_> {
      .               /// Whether this rib kind contains generic parameters, as opposed to local
      .               /// variables.
      .               crate fn contains_params(&self) -> bool {
 13,882 ( 0.00%)          match self {
      .                       NormalRibKind
      .                       | ClosureOrAsyncRibKind
      .                       | FnItemRibKind
      .                       | ConstantItemRibKind(..)
      .                       | ModuleRibKind(_)
      .                       | MacroDefinition(_)
      .                       | ConstParamTyRibKind => false,
      .                       AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,
-- line 157 ----------------------------------------
-- line 174 ----------------------------------------
      .           #[derive(Debug)]
      .           crate struct Rib<'a, R = Res> {
      .               pub bindings: IdentMap<R>,
      .               pub kind: RibKind<'a>,
      .           }
      .           
      .           impl<'a, R> Rib<'a, R> {
      .               fn new(kind: RibKind<'a>) -> Rib<'a, R> {
    511 ( 0.00%)          Rib { bindings: Default::default(), kind }
      .               }
      .           }
      .           
      .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
      .           crate enum AliasPossibility {
      .               No,
      .               Maybe,
      .           }
-- line 190 ----------------------------------------
-- line 212 ----------------------------------------
      .                   match self {
      .                       PathSource::Type | PathSource::Trait(_) | PathSource::Struct => TypeNS,
      .                       PathSource::Expr(..) | PathSource::Pat | PathSource::TupleStruct(..) => ValueNS,
      .                       PathSource::TraitItem(ns) => ns,
      .                   }
      .               }
      .           
      .               fn defer_to_typeck(self) -> bool {
    642 ( 0.00%)          match self {
      .                       PathSource::Type
      .                       | PathSource::Expr(..)
      .                       | PathSource::Pat
      .                       | PathSource::Struct
      .                       | PathSource::TupleStruct(..) => true,
      .                       PathSource::Trait(_) | PathSource::TraitItem(..) => false,
      .                   }
      .               }
-- line 228 ----------------------------------------
-- line 268 ----------------------------------------
      .                   }
      .               }
      .           
      .               fn is_call(self) -> bool {
      .                   matches!(self, PathSource::Expr(Some(&Expr { kind: ExprKind::Call(..), .. })))
      .               }
      .           
      .               crate fn is_expected(self, res: Res) -> bool {
  2,026 ( 0.00%)          match self {
  1,322 ( 0.00%)              PathSource::Type => matches!(
    378 ( 0.00%)                  res,
      .                           Res::Def(
      .                               DefKind::Struct
      .                                   | DefKind::Union
      .                                   | DefKind::Enum
      .                                   | DefKind::Trait
      .                                   | DefKind::TraitAlias
      .                                   | DefKind::TyAlias
      .                                   | DefKind::AssocTy
      .                                   | DefKind::TyParam
      .                                   | DefKind::OpaqueTy
      .                                   | DefKind::ForeignTy,
      .                               _,
      .                           ) | Res::PrimTy(..)
      .                               | Res::SelfTy(..)
      .                       ),
      3 ( 0.00%)              PathSource::Trait(AliasPossibility::No) => matches!(res, Res::Def(DefKind::Trait, _)),
      .                       PathSource::Trait(AliasPossibility::Maybe) => {
     14 ( 0.00%)                  matches!(res, Res::Def(DefKind::Trait | DefKind::TraitAlias, _))
      .                       }
    519 ( 0.00%)              PathSource::Expr(..) => matches!(
    285 ( 0.00%)                  res,
      .                           Res::Def(
      .                               DefKind::Ctor(_, CtorKind::Const | CtorKind::Fn)
      .                                   | DefKind::Const
      .                                   | DefKind::Static
      .                                   | DefKind::Fn
      .                                   | DefKind::AssocFn
      .                                   | DefKind::AssocConst
      .                                   | DefKind::ConstParam,
-- line 307 ----------------------------------------
-- line 329 ----------------------------------------
      .                           ) | Res::SelfTy(..)
      .                       ),
      .                       PathSource::TraitItem(ns) => match res {
      .                           Res::Def(DefKind::AssocConst | DefKind::AssocFn, _) if ns == ValueNS => true,
      .                           Res::Def(DefKind::AssocTy, _) if ns == TypeNS => true,
      .                           _ => false,
      .                       },
      .                   }
    404 ( 0.00%)      }
      .           
      .               fn error_code(self, has_unexpected_resolution: bool) -> DiagnosticId {
      .                   use rustc_errors::error_code;
      .                   match (self, has_unexpected_resolution) {
      .                       (PathSource::Trait(_), true) => error_code!(E0404),
      .                       (PathSource::Trait(_), false) => error_code!(E0405),
      .                       (PathSource::Type, true) => error_code!(E0573),
      .                       (PathSource::Type, false) => error_code!(E0412),
-- line 345 ----------------------------------------
-- line 350 ----------------------------------------
      .                       (PathSource::Pat | PathSource::TupleStruct(..), true) => error_code!(E0532),
      .                       (PathSource::Pat | PathSource::TupleStruct(..), false) => error_code!(E0531),
      .                       (PathSource::TraitItem(..), true) => error_code!(E0575),
      .                       (PathSource::TraitItem(..), false) => error_code!(E0576),
      .                   }
      .               }
      .           }
      .           
      2 ( 0.00%)  #[derive(Default)]
      .           struct DiagnosticMetadata<'ast> {
      .               /// The current trait's associated items' ident, used for diagnostic suggestions.
      .               current_trait_assoc_items: Option<&'ast [P<AssocItem>]>,
      .           
      .               /// The current self type if inside an impl (used for better errors).
      .               current_self_type: Option<Ty>,
      .           
      .               /// The current self item if inside an ADT (used for better errors).
-- line 366 ----------------------------------------
-- line 434 ----------------------------------------
      .               fn visit_attribute(&mut self, _: &'ast Attribute) {
      .                   // We do not want to resolve expressions that appear in attributes,
      .                   // as they do not correspond to actual code.
      .               }
      .               fn visit_item(&mut self, item: &'ast Item) {
      .                   let prev = replace(&mut self.diagnostic_metadata.current_item, Some(item));
      .                   // Always report errors in items we just entered.
      .                   let old_ignore = replace(&mut self.in_func_body, false);
     68 ( 0.00%)          self.resolve_item(item);
     34 ( 0.00%)          self.in_func_body = old_ignore;
     34 ( 0.00%)          self.diagnostic_metadata.current_item = prev;
      .               }
     91 ( 0.00%)      fn visit_arm(&mut self, arm: &'ast Arm) {
      .                   self.resolve_arm(arm);
     78 ( 0.00%)      }
    324 ( 0.00%)      fn visit_block(&mut self, block: &'ast Block) {
      .                   self.resolve_block(block);
    288 ( 0.00%)      }
      .               fn visit_anon_const(&mut self, constant: &'ast AnonConst) {
      .                   // We deal with repeat expressions explicitly in `resolve_expr`.
      .                   self.resolve_anon_const(constant, IsRepeatExpr::No);
      .               }
      .               fn visit_expr(&mut self, expr: &'ast Expr) {
 88,077 ( 0.01%)          self.resolve_expr(expr, None);
      .               }
      .               fn visit_local(&mut self, local: &'ast Local) {
      .                   let local_spans = match local.pat.kind {
      .                       // We check for this to avoid tuple struct fields.
      .                       PatKind::Wild => None,
      .                       _ => Some((
      .                           local.pat.span,
      .                           local.ty.as_ref().map(|ty| ty.span),
      .                           local.kind.init().map(|init| init.span),
      .                       )),
      .                   };
      .                   let original = replace(&mut self.diagnostic_metadata.current_let_binding, local_spans);
      .                   self.resolve_local(local);
      .                   self.diagnostic_metadata.current_let_binding = original;
      .               }
  1,728 ( 0.00%)      fn visit_ty(&mut self, ty: &'ast Ty) {
    432 ( 0.00%)          let prev = self.diagnostic_metadata.current_trait_object;
  1,132 ( 0.00%)          match ty.kind {
    190 ( 0.00%)              TyKind::Path(ref qself, ref path) => {
    570 ( 0.00%)                  self.smart_resolve_path(ty.id, qself.as_ref(), path, PathSource::Type);
      .                       }
      .                       TyKind::ImplicitSelf => {
      .                           let self_ty = Ident::with_dummy_span(kw::SelfUpper);
      .                           let res = self
     63 ( 0.00%)                      .resolve_ident_in_lexical_scope(self_ty, TypeNS, Some(ty.id), ty.span)
    378 ( 0.00%)                      .map_or(Res::Err, |d| d.res());
    693 ( 0.00%)                  self.r.record_partial_res(ty.id, PartialRes::new(res));
      .                       }
      .                       TyKind::TraitObject(ref bounds, ..) => {
      .                           self.diagnostic_metadata.current_trait_object = Some(&bounds[..]);
      .                       }
      .                       _ => (),
      .                   }
    648 ( 0.00%)          visit::walk_ty(self, ty);
    432 ( 0.00%)          self.diagnostic_metadata.current_trait_object = prev;
  1,512 ( 0.00%)      }
      .               fn visit_poly_trait_ref(&mut self, tref: &'ast PolyTraitRef, m: &'ast TraitBoundModifier) {
      6 ( 0.00%)          self.smart_resolve_path(
      2 ( 0.00%)              tref.trait_ref.ref_id,
      .                       None,
      2 ( 0.00%)              &tref.trait_ref.path,
      4 ( 0.00%)              PathSource::Trait(AliasPossibility::Maybe),
      .                   );
      .                   visit::walk_poly_trait_ref(self, tref, m);
      .               }
      .               fn visit_foreign_item(&mut self, foreign_item: &'ast ForeignItem) {
      .                   match foreign_item.kind {
      .                       ForeignItemKind::Fn(box Fn { ref generics, .. })
      .                       | ForeignItemKind::TyAlias(box TyAlias { ref generics, .. }) => {
      .                           self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {
-- line 507 ----------------------------------------
-- line 513 ----------------------------------------
      .                               visit::walk_foreign_item(this, foreign_item);
      .                           });
      .                       }
      .                       ForeignItemKind::MacCall(..) => {
      .                           visit::walk_foreign_item(self, foreign_item);
      .                       }
      .                   }
      .               }
    576 ( 0.00%)      fn visit_fn(&mut self, fn_kind: FnKind<'ast>, sp: Span, _: NodeId) {
  1,040 ( 0.00%)          let rib_kind = match fn_kind {
      .                       // Bail if the function is foreign, and thus cannot validly have
      .                       // a body, or if there's no body for some other reason.
      .                       FnKind::Fn(FnCtxt::Foreign, _, sig, ..) | FnKind::Fn(_, _, sig, .., None) => {
      .                           // We don't need to deal with patterns in parameters, because
      .                           // they are not possible for foreign or bodiless functions.
      .                           self.visit_fn_header(&sig.header);
      .                           visit::walk_fn_decl(self, &sig.decl);
      .                           return;
      .                       }
      .                       FnKind::Fn(FnCtxt::Free, ..) => FnItemRibKind,
      .                       FnKind::Fn(FnCtxt::Assoc(_), ..) => NormalRibKind,
      .                       FnKind::Closure(..) => ClosureOrAsyncRibKind,
      .                   };
    252 ( 0.00%)          let previous_value = self.diagnostic_metadata.current_function;
     72 ( 0.00%)          if matches!(fn_kind, FnKind::Fn(..)) {
    252 ( 0.00%)              self.diagnostic_metadata.current_function = Some((fn_kind, sp));
      .                   }
      .                   debug!("(resolving function) entering function");
    108 ( 0.00%)          let declaration = fn_kind.decl();
      .           
      .                   // Create a value rib for the function.
      .                   self.with_rib(ValueNS, rib_kind, |this| {
      .                       // Create a label rib for the function.
      .                       this.with_label_rib(rib_kind, |this| {
      .                           // Add each argument to the rib.
     72 ( 0.00%)                  this.resolve_params(&declaration.inputs);
      .           
      .                           visit::walk_fn_ret_ty(this, &declaration.output);
      .           
      .                           // Ignore errors in function bodies if this is rustdoc
      .                           // Be sure not to set this until the function signature has been resolved.
      .                           let previous_state = replace(&mut this.in_func_body, true);
      .                           // Resolve the function body, potentially inside the body of an async closure
     72 ( 0.00%)                  match fn_kind {
    180 ( 0.00%)                      FnKind::Fn(.., body) => walk_list!(this, visit_block, body),
      .                               FnKind::Closure(_, body) => this.visit_expr(body),
      .                           };
      .           
      .                           debug!("(resolving function) leaving function");
     36 ( 0.00%)                  this.in_func_body = previous_state;
      .                       })
      .                   });
    216 ( 0.00%)          self.diagnostic_metadata.current_function = previous_value;
    288 ( 0.00%)      }
      .           
    528 ( 0.00%)      fn visit_generics(&mut self, generics: &'ast Generics) {
      .                   // For type parameter defaults, we have to ban access
      .                   // to following type parameters, as the InternalSubsts can only
      .                   // provide previous type parameters as they're built. We
      .                   // put all the parameters on the ban list and then remove
      .                   // them one by one as they are processed and become available.
      .                   let mut forward_ty_ban_rib = Rib::new(ForwardGenericParamBanRibKind);
      .                   let mut forward_const_ban_rib = Rib::new(ForwardGenericParamBanRibKind);
      .                   for param in generics.params.iter() {
-- line 576 ----------------------------------------
-- line 593 ----------------------------------------
      .                   // another type parameter. For ADTs, we consider it
      .                   // well-defined only after all of the ADT type parameters have
      .                   // been provided. Therefore, we do not allow use of `Self`
      .                   // anywhere in ADT type parameter defaults.
      .                   //
      .                   // (We however cannot ban `Self` for defaults on *all* generic
      .                   // lists; e.g. trait generics can usefully refer to `Self`,
      .                   // such as in the case of `trait Add<Rhs = Self>`.)
     66 ( 0.00%)          if self.diagnostic_metadata.current_self_item.is_some() {
      .                       // (`Some` if + only if we are in ADT's generics.)
      .                       forward_ty_ban_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), Res::Err);
      .                   }
      .           
      .                   for param in &generics.params {
      .                       match param.kind {
      .                           GenericParamKind::Lifetime => self.visit_generic_param(param),
      .                           GenericParamKind::Type { ref default } => {
-- line 609 ----------------------------------------
-- line 645 ----------------------------------------
      .                                   .bindings
      .                                   .remove(&Ident::with_dummy_span(param.ident.name));
      .                           }
      .                       }
      .                   }
      .                   for p in &generics.where_clause.predicates {
      .                       self.visit_where_predicate(p);
      .                   }
    528 ( 0.00%)      }
      .           
      .               fn visit_generic_arg(&mut self, arg: &'ast GenericArg) {
      .                   debug!("visit_generic_arg({:?})", arg);
      .                   let prev = replace(&mut self.diagnostic_metadata.currently_processing_generics, true);
      .                   match arg {
      .                       GenericArg::Type(ref ty) => {
      .                           // We parse const arguments as path types as we cannot distinguish them during
      .                           // parsing. We try to resolve that ambiguity by attempting resolution the type
-- line 661 ----------------------------------------
-- line 715 ----------------------------------------
      .                   let previous_value =
      .                       replace(&mut self.diagnostic_metadata.current_where_predicate, Some(p));
      .                   visit::walk_where_predicate(self, p);
      .                   self.diagnostic_metadata.current_where_predicate = previous_value;
      .               }
      .           }
      .           
      .           impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {
      9 ( 0.00%)      fn new(resolver: &'b mut Resolver<'a>) -> LateResolutionVisitor<'a, 'b, 'ast> {
      .                   // During late resolution we only track the module component of the parent scope,
      .                   // although it may be useful to track other components as well for diagnostics.
      1 ( 0.00%)          let graph_root = resolver.graph_root;
      .                   let parent_scope = ParentScope::module(graph_root, resolver);
      .                   let start_rib_kind = ModuleRibKind(graph_root);
     30 ( 0.00%)          LateResolutionVisitor {
      .                       r: resolver,
      .                       parent_scope,
      .                       ribs: PerNS {
      2 ( 0.00%)                  value_ns: vec![Rib::new(start_rib_kind)],
      2 ( 0.00%)                  type_ns: vec![Rib::new(start_rib_kind)],
      2 ( 0.00%)                  macro_ns: vec![Rib::new(start_rib_kind)],
      .                       },
      .                       label_ribs: Vec::new(),
      .                       current_trait_ref: None,
      .                       diagnostic_metadata: DiagnosticMetadata::default(),
      .                       // errors at module scope should always be reported
      .                       in_func_body: false,
      .                   }
      9 ( 0.00%)      }
      .           
      .               fn resolve_ident_in_lexical_scope(
      .                   &mut self,
      .                   ident: Ident,
      .                   ns: Namespace,
      .                   record_used_id: Option<NodeId>,
      .                   path_span: Span,
      .               ) -> Option<LexicalScopeBinding<'a>> {
  1,063 ( 0.00%)          self.r.resolve_ident_in_lexical_scope(
      .                       ident,
      .                       ns,
    100 ( 0.00%)              &self.parent_scope,
      .                       record_used_id,
      .                       path_span,
      .                       &self.ribs[ns],
      .                   )
      .               }
      .           
      .               fn resolve_path(
      .                   &mut self,
      .                   path: &[Segment],
      .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
      .                   record_used: bool,
      .                   path_span: Span,
      .                   crate_lint: CrateLint,
      .               ) -> PathResult<'a> {
  3,686 ( 0.00%)          self.r.resolve_path_with_ribs(
      .                       path,
      .                       opt_ns,
      1 ( 0.00%)              &self.parent_scope,
      .                       record_used,
      .                       path_span,
      .                       crate_lint,
      1 ( 0.00%)              Some(&self.ribs),
      .                   )
      .               }
      .           
      .               // AST resolution
      .               //
      .               // We maintain a list of value ribs and type ribs.
      .               //
      .               // Simultaneously, we keep track of the current position in the module
-- line 785 ----------------------------------------
-- line 798 ----------------------------------------
      .           
      .               /// Do some `work` within a new innermost rib of the given `kind` in the given namespace (`ns`).
      .               fn with_rib<T>(
      .                   &mut self,
      .                   ns: Namespace,
      .                   kind: RibKind<'a>,
      .                   work: impl FnOnce(&mut Self) -> T,
      .               ) -> T {
    292 ( 0.00%)          self.ribs[ns].push(Rib::new(kind));
      .                   let ret = work(self);
      .                   self.ribs[ns].pop();
      .                   ret
      .               }
      .           
      .               fn with_scope<T>(&mut self, id: NodeId, f: impl FnOnce(&mut Self) -> T) -> T {
      8 ( 0.00%)          if let Some(module) = self.r.get_module(self.r.local_def_id(id).to_def_id()) {
      .                       // Move down in the graph.
      .                       let orig_module = replace(&mut self.parent_scope.module, module);
      .                       self.with_rib(ValueNS, ModuleRibKind(module), |this| {
      .                           this.with_rib(TypeNS, ModuleRibKind(module), |this| {
      .                               let ret = f(this);
      1 ( 0.00%)                      this.parent_scope.module = orig_module;
      .                               ret
      .                           })
      .                       })
      .                   } else {
      .                       f(self)
      .                   }
      .               }
      .           
-- line 827 ----------------------------------------
-- line 908 ----------------------------------------
      .                           let item_def_id = this.r.local_def_id(item.id).to_def_id();
      .                           this.with_self_rib(Res::SelfTy(None, Some((item_def_id, false))), |this| {
      .                               visit::walk_item(this, item);
      .                           });
      .                       });
      .                   });
      .               }
      .           
      9 ( 0.00%)      fn future_proof_import(&mut self, use_tree: &UseTree) {
      .                   let segments = &use_tree.prefix.segments;
      1 ( 0.00%)          if !segments.is_empty() {
      2 ( 0.00%)              let ident = segments[0].ident;
     10 ( 0.00%)              if ident.is_path_segment_keyword() || ident.span.rust_2015() {
      .                           return;
      .                       }
      .           
      .                       let nss = match use_tree.kind {
      .                           UseTreeKind::Simple(..) if segments.len() == 1 => &[TypeNS, ValueNS][..],
      .                           _ => &[TypeNS],
      .                       };
      .                       let report_error = |this: &Self, ns| {
-- line 928 ----------------------------------------
-- line 952 ----------------------------------------
      .                               None => {}
      .                           }
      .                       }
      .                   } else if let UseTreeKind::Nested(use_trees) = &use_tree.kind {
      .                       for (use_tree, _) in use_trees {
      .                           self.future_proof_import(use_tree);
      .                       }
      .                   }
      8 ( 0.00%)      }
      .           
    272 ( 0.00%)      fn resolve_item(&mut self, item: &'ast Item) {
      .                   let name = item.ident.name;
      .                   debug!("(resolving item) resolving {} ({:?})", name, item.kind);
      .           
    204 ( 0.00%)          match item.kind {
      .                       ItemKind::TyAlias(box TyAlias { ref generics, .. })
      .                       | ItemKind::Fn(box Fn { ref generics, .. }) => {
      4 ( 0.00%)                  self.compute_num_lifetime_params(item.id, generics);
      .                           self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {
      3 ( 0.00%)                      visit::walk_item(this, item)
      .                           });
      .                       }
      .           
      .                       ItemKind::Enum(_, ref generics)
      .                       | ItemKind::Struct(_, ref generics)
      .                       | ItemKind::Union(_, ref generics) => {
      .                           self.compute_num_lifetime_params(item.id, generics);
      .                           self.resolve_adt(item, generics);
      .                       }
      .           
      .                       ItemKind::Impl(box Impl {
      1 ( 0.00%)                  ref generics,
      .                           ref of_trait,
      .                           ref self_ty,
      .                           items: ref impl_items,
      .                           ..
      .                       }) => {
      4 ( 0.00%)                  self.compute_num_lifetime_params(item.id, generics);
      1 ( 0.00%)                  self.resolve_implementation(generics, of_trait, &self_ty, item.id, impl_items);
      .                       }
      .           
      1 ( 0.00%)              ItemKind::Trait(box Trait { ref generics, ref bounds, ref items, .. }) => {
      4 ( 0.00%)                  self.compute_num_lifetime_params(item.id, generics);
      .                           // Create a new rib for the trait-wide type parameters.
      .                           self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {
      2 ( 0.00%)                      let local_def_id = this.r.local_def_id(item.id).to_def_id();
      .                               this.with_self_rib(Res::SelfTy(Some(local_def_id), None), |this| {
      2 ( 0.00%)                          this.visit_generics(generics);
      .                                   walk_list!(this, visit_param_bound, bounds);
      .           
    315 ( 0.00%)                          let walk_assoc_item = |this: &mut Self, generics, item| {
      .                                       this.with_generic_param_rib(generics, AssocItemRibKind, |this| {
    140 ( 0.00%)                                  visit::walk_assoc_item(this, item, AssocCtxt::Trait)
      .                                       });
    280 ( 0.00%)                          };
      .           
      .                                   this.with_trait_items(items, |this| {
      .                                       for item in items {
    144 ( 0.00%)                                  match &item.kind {
      .                                               AssocItemKind::Const(_, ty, default) => {
      .                                                   this.visit_ty(ty);
      .                                                   // Only impose the restrictions of `ConstRibKind` for an
      .                                                   // actual constant expression in a provided default.
      .                                                   if let Some(expr) = default {
      .                                                       // We allow arbitrary const expressions inside of associated consts,
      .                                                       // even if they are potentially not const evaluatable.
      .                                                       //
-- line 1018 ----------------------------------------
-- line 1021 ----------------------------------------
      .                                                       this.with_constant_rib(
      .                                                           IsRepeatExpr::No,
      .                                                           true,
      .                                                           None,
      .                                                           |this| this.visit_expr(expr),
      .                                                       );
      .                                                   }
      .                                               }
     70 ( 0.00%)                                      AssocItemKind::Fn(box Fn { generics, .. }) => {
    105 ( 0.00%)                                          walk_assoc_item(this, generics, item);
      .                                               }
      .                                               AssocItemKind::TyAlias(box TyAlias { generics, .. }) => {
      .                                                   walk_assoc_item(this, generics, item);
      .                                               }
      .                                               AssocItemKind::MacCall(_) => {
      .                                                   panic!("unexpanded macro in resolve!")
      .                                               }
      .                                           };
-- line 1038 ----------------------------------------
-- line 1050 ----------------------------------------
      .                               this.with_self_rib(Res::SelfTy(Some(local_def_id), None), |this| {
      .                                   this.visit_generics(generics);
      .                                   walk_list!(this, visit_param_bound, bounds);
      .                               });
      .                           });
      .                       }
      .           
      .                       ItemKind::Mod(..) | ItemKind::ForeignMod(_) => {
      1 ( 0.00%)                  self.with_scope(item.id, |this| {
      3 ( 0.00%)                      visit::walk_item(this, item);
      .                           });
      .                       }
      .           
     84 ( 0.00%)              ItemKind::Static(ref ty, _, ref expr) | ItemKind::Const(_, ref ty, ref expr) => {
      .                           self.with_item_rib(HasGenericParams::No, |this| {
     28 ( 0.00%)                      this.visit_ty(ty);
     56 ( 0.00%)                      if let Some(expr) = expr {
    112 ( 0.00%)                          let constant_item_kind = match item.kind {
      .                                       ItemKind::Const(..) => ConstantItemKind::Const,
      .                                       ItemKind::Static(..) => ConstantItemKind::Static,
      .                                       _ => unreachable!(),
      .                                   };
      .                                   // We already forbid generic params because of the above item rib,
      .                                   // so it doesn't matter whether this is a trivial constant.
      .                                   this.with_constant_rib(
      .                                       IsRepeatExpr::No,
      .                                       true,
    140 ( 0.00%)                              Some((item.ident, constant_item_kind)),
      .                                       |this| this.visit_expr(expr),
      .                                   );
      .                               }
      .                           });
      .                       }
      .           
      1 ( 0.00%)              ItemKind::Use(ref use_tree) => {
      9 ( 0.00%)                  self.future_proof_import(use_tree);
      .                       }
      .           
      .                       ItemKind::ExternCrate(..) | ItemKind::MacroDef(..) => {
      .                           // do nothing, these are just around to be encoded
      .                       }
      .           
      .                       ItemKind::GlobalAsm(_) => {
      .                           visit::walk_item(self, item);
      .                       }
      .           
      .                       ItemKind::MacCall(_) => panic!("unexpanded macro in resolve!"),
      .                   }
    264 ( 0.00%)      }
      .           
      .               fn with_generic_param_rib<'c, F>(&'c mut self, generics: &'c Generics, kind: RibKind<'a>, f: F)
      .               where
      .                   F: FnOnce(&mut Self),
      .               {
      .                   debug!("with_generic_param_rib");
     66 ( 0.00%)          let mut function_type_rib = Rib::new(kind);
      .                   let mut function_value_rib = Rib::new(kind);
      .                   let mut seen_bindings = FxHashMap::default();
      .           
      .                   // We also can't shadow bindings from the parent item
      .                   if let AssocItemRibKind = kind {
     35 ( 0.00%)              let mut add_bindings_for_ns = |ns| {
      .                           let parent_rib = self.ribs[ns]
      .                               .iter()
    245 ( 0.00%)                      .rfind(|r| matches!(r.kind, ItemRibKind(_)))
      .                               .expect("associated item outside of an item");
      .                           seen_bindings
      .                               .extend(parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)));
      .                       };
      .                       add_bindings_for_ns(ValueNS);
      .                       add_bindings_for_ns(TypeNS);
      .                   }
      .           
-- line 1122 ----------------------------------------
-- line 1145 ----------------------------------------
      .                           GenericParamKind::Const { .. } => (&mut function_value_rib, DefKind::ConstParam),
      .                           _ => unreachable!(),
      .                       };
      .                       let res = Res::Def(def_kind, self.r.local_def_id(param.id).to_def_id());
      .                       self.r.record_partial_res(param.id, PartialRes::new(res));
      .                       rib.bindings.insert(ident, res);
      .                   }
      .           
    618 ( 0.00%)          self.ribs[ValueNS].push(function_value_rib);
    528 ( 0.00%)          self.ribs[TypeNS].push(function_type_rib);
      .           
      .                   f(self);
      .           
      .                   self.ribs[TypeNS].pop();
      .                   self.ribs[ValueNS].pop();
      .               }
      .           
      .               fn with_label_rib(&mut self, kind: RibKind<'a>, f: impl FnOnce(&mut Self)) {
    120 ( 0.00%)          self.label_ribs.push(Rib::new(kind));
      .                   f(self);
      .                   self.label_ribs.pop();
      .               }
      .           
      .               fn with_item_rib(&mut self, has_generic_params: HasGenericParams, f: impl FnOnce(&mut Self)) {
      .                   let kind = ItemRibKind(has_generic_params);
      .                   self.with_rib(ValueNS, kind, |this| this.with_rib(TypeNS, kind, f))
      .               }
-- line 1171 ----------------------------------------
-- line 1195 ----------------------------------------
      .                           },
      .                       )
      .                   });
      .               }
      .           
      .               fn with_current_self_type<T>(&mut self, self_type: &Ty, f: impl FnOnce(&mut Self) -> T) -> T {
      .                   // Handle nested impls (inside fn bodies)
      .                   let previous_value =
      1 ( 0.00%)              replace(&mut self.diagnostic_metadata.current_self_type, Some(self_type.clone()));
      .                   let result = f(self);
     27 ( 0.00%)          self.diagnostic_metadata.current_self_type = previous_value;
      .                   result
      .               }
      .           
      .               fn with_current_self_item<T>(&mut self, self_item: &Item, f: impl FnOnce(&mut Self) -> T) -> T {
      .                   let previous_value =
      .                       replace(&mut self.diagnostic_metadata.current_self_item, Some(self_item.id));
      .                   let result = f(self);
      .                   self.diagnostic_metadata.current_self_item = previous_value;
-- line 1213 ----------------------------------------
-- line 1218 ----------------------------------------
      .               fn with_trait_items<T>(
      .                   &mut self,
      .                   trait_items: &'ast [P<AssocItem>],
      .                   f: impl FnOnce(&mut Self) -> T,
      .               ) -> T {
      .                   let trait_assoc_items =
      .                       replace(&mut self.diagnostic_metadata.current_trait_assoc_items, Some(&trait_items));
      .                   let result = f(self);
      3 ( 0.00%)          self.diagnostic_metadata.current_trait_assoc_items = trait_assoc_items;
      .                   result
      .               }
      .           
      .               /// This is called to resolve a trait reference from an `impl` (i.e., `impl Trait for Foo`).
      9 ( 0.00%)      fn with_optional_trait_ref<T>(
      .                   &mut self,
      .                   opt_trait_ref: Option<&TraitRef>,
      .                   f: impl FnOnce(&mut Self, Option<DefId>) -> T,
      .               ) -> T {
      1 ( 0.00%)          let mut new_val = None;
      .                   let mut new_id = None;
      2 ( 0.00%)          if let Some(trait_ref) = opt_trait_ref {
      .                       let path: Vec<_> = Segment::from_path(&trait_ref.path);
     15 ( 0.00%)              let res = self.smart_resolve_path_fragment(
      1 ( 0.00%)                  trait_ref.ref_id,
      .                           None,
      .                           &path,
      1 ( 0.00%)                  trait_ref.path.span,
      1 ( 0.00%)                  PathSource::Trait(AliasPossibility::No),
      .                           CrateLint::SimplePath(trait_ref.ref_id),
      .                       );
      .                       let res = res.base_res();
      1 ( 0.00%)              if res != Res::Err {
     13 ( 0.00%)                  if let PathResult::Module(ModuleOrUniformRoot::Module(module)) = self.resolve_path(
      .                               &path,
      .                               Some(TypeNS),
      .                               true,
      .                               trait_ref.path.span,
      1 ( 0.00%)                      CrateLint::SimplePath(trait_ref.ref_id),
      .                           ) {
      .                               new_id = Some(res.def_id());
     10 ( 0.00%)                      new_val = Some((module, trait_ref.clone()));
      .                           }
      .                       }
      .                   }
      .                   let original_trait_ref = replace(&mut self.current_trait_ref, new_val);
      7 ( 0.00%)          let result = f(self, new_id);
     18 ( 0.00%)          self.current_trait_ref = original_trait_ref;
      .                   result
      8 ( 0.00%)      }
      .           
      .               fn with_self_rib_ns(&mut self, ns: Namespace, self_res: Res, f: impl FnOnce(&mut Self)) {
      .                   let mut self_type_rib = Rib::new(NormalRibKind);
      .           
      .                   // Plain insert (no renaming, since types are not currently hygienic)
      .                   self_type_rib.bindings.insert(Ident::with_dummy_span(kw::SelfUpper), self_res);
     33 ( 0.00%)          self.ribs[ns].push(self_type_rib);
      .                   f(self);
      .                   self.ribs[ns].pop();
      .               }
      .           
      .               fn with_self_rib(&mut self, self_res: Res, f: impl FnOnce(&mut Self)) {
      .                   self.with_self_rib_ns(TypeNS, self_res, f)
      .               }
      .           
-- line 1281 ----------------------------------------
-- line 1288 ----------------------------------------
      .                   impl_items: &'ast [P<AssocItem>],
      .               ) {
      .                   debug!("resolve_implementation");
      .                   // If applicable, create a rib for the type parameters.
      .                   self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {
      .                       // Dummy self type for better errors if `Self` is used in the trait path.
      .                       this.with_self_rib(Res::SelfTy(None, None), |this| {
      .                           // Resolve the trait reference, if necessary.
     10 ( 0.00%)                  this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {
      2 ( 0.00%)                      let item_def_id = this.r.local_def_id(item_id);
      .           
      .                               // Register the trait definitions from here.
      2 ( 0.00%)                      if let Some(trait_id) = trait_id {
      4 ( 0.00%)                          this.r.trait_impls.entry(trait_id).or_default().push(item_def_id);
      .                               }
      .           
      .                               let item_def_id = item_def_id.to_def_id();
      1 ( 0.00%)                      this.with_self_rib(Res::SelfTy(trait_id, Some((item_def_id, false))), |this| {
      1 ( 0.00%)                          if let Some(trait_ref) = opt_trait_reference.as_ref() {
      .                                       // Resolve type arguments in the trait path.
      .                                       visit::walk_trait_ref(this, trait_ref);
      .                                   }
      .                                   // Resolve the self type.
      3 ( 0.00%)                          this.visit_ty(self_type);
      .                                   // Resolve the generic parameters.
      1 ( 0.00%)                          this.visit_generics(generics);
      .                                   // Resolve the items within the impl.
      .                                   this.with_current_self_type(self_type, |this| {
      .                                       this.with_self_rib_ns(ValueNS, Res::SelfCtor(item_def_id), |this| {
      .                                           debug!("resolve_implementation with_self_rib_ns(ValueNS, ...)");
      1 ( 0.00%)                                  for item in impl_items {
      .                                               use crate::ResolutionError::*;
    168 ( 0.00%)                                      match &item.kind {
      .                                                   AssocItemKind::Const(_default, _ty, _expr) => {
      .                                                       debug!("resolve_implementation AssocItemKind::Const");
      .                                                       // If this is a trait impl, ensure the const
      .                                                       // exists in trait
      .                                                       this.check_trait_item(
      .                                                           item.id,
      .                                                           item.ident,
      .                                                           &item.kind,
-- line 1328 ----------------------------------------
-- line 1344 ----------------------------------------
      .                                                               visit::walk_assoc_item(
      .                                                                   this,
      .                                                                   item,
      .                                                                   AssocCtxt::Impl,
      .                                                               )
      .                                                           },
      .                                                       );
      .                                                   }
     28 ( 0.00%)                                          AssocItemKind::Fn(box Fn { generics, .. }) => {
      .                                                       debug!("resolve_implementation AssocItemKind::Fn");
      .                                                       // We also need a new scope for the impl item type parameters.
      .                                                       this.with_generic_param_rib(
      .                                                           generics,
      .                                                           AssocItemRibKind,
      .                                                           |this| {
      .                                                               // If this is a trait impl, ensure the method
      .                                                               // exists in trait
      .                                                               this.check_trait_item(
     28 ( 0.00%)                                                          item.id,
     56 ( 0.00%)                                                          item.ident,
      .                                                                   &item.kind,
      .                                                                   ValueNS,
     84 ( 0.00%)                                                          item.span,
      .                                                                   |i, s, c| MethodNotMemberOfTrait(i, s, c),
      .                                                               );
      .           
     56 ( 0.00%)                                                      visit::walk_assoc_item(
      .                                                                   this,
      .                                                                   item,
      .                                                                   AssocCtxt::Impl,
      .                                                               )
      .                                                           },
      .                                                       );
      .                                                   }
      .                                                   AssocItemKind::TyAlias(box TyAlias {
-- line 1378 ----------------------------------------
-- line 1423 ----------------------------------------
      .                   kind: &AssocItemKind,
      .                   ns: Namespace,
      .                   span: Span,
      .                   err: F,
      .               ) where
      .                   F: FnOnce(Ident, &str, Option<Symbol>) -> ResolutionError<'_>,
      .               {
      .                   // If there is a TraitRef in scope for an impl, then the method must be in the trait.
     56 ( 0.00%)          let Some((module, _)) = &self.current_trait_ref else { return; };
    168 ( 0.00%)          ident.span.normalize_to_macros_2_0_and_adjust(module.expansion);
    140 ( 0.00%)          let key = self.r.new_key(ident, ns);
    280 ( 0.00%)          let mut binding = self.r.resolution(module, key).try_borrow().ok().and_then(|r| r.binding);
      .                   debug!(?binding);
     28 ( 0.00%)          if binding.is_none() {
      .                       // We could not find the trait item in the correct namespace.
      .                       // Check the other namespace to report an error.
      .                       let ns = match ns {
      .                           ValueNS => TypeNS,
      .                           TypeNS => ValueNS,
      .                           _ => ns,
      .                       };
      .                       let key = self.r.new_key(ident, ns);
-- line 1444 ----------------------------------------
-- line 1449 ----------------------------------------
      .                       // We could not find the method: report an error.
      .                       let candidate = self.find_similarly_named_assoc_item(ident.name, kind);
      .                       let path = &self.current_trait_ref.as_ref().unwrap().1.path;
      .                       self.report_error(span, err(ident, &path_names_to_string(path), candidate));
      .                       return;
      .                   };
      .           
      .                   let res = binding.res();
     56 ( 0.00%)          let Res::Def(def_kind, _) = res else { bug!() };
    196 ( 0.00%)          match (def_kind, kind) {
      .                       (DefKind::AssocTy, AssocItemKind::TyAlias(..))
      .                       | (DefKind::AssocFn, AssocItemKind::Fn(..))
      .                       | (DefKind::AssocConst, AssocItemKind::Const(..)) => {
    392 ( 0.00%)                  self.r.record_partial_res(id, PartialRes::new(res));
      .                           return;
      .                       }
      .                       _ => {}
      .                   }
      .           
      .                   // The method kind does not correspond to what appeared in the trait, report.
      .                   let path = &self.current_trait_ref.as_ref().unwrap().1.path;
      .                   let (code, kind) = match kind {
-- line 1470 ----------------------------------------
-- line 1480 ----------------------------------------
      .                           kind,
      .                           code,
      .                           trait_path: path_names_to_string(path),
      .                           trait_item_span: binding.span,
      .                       },
      .                   );
      .               }
      .           
    324 ( 0.00%)      fn resolve_params(&mut self, params: &'ast [Param]) {
    180 ( 0.00%)          let mut bindings = smallvec![(PatBoundCtx::Product, Default::default())];
    216 ( 0.00%)          for Param { pat, ty, .. } in params {
      .                       self.resolve_pattern(pat, PatternSource::FnParam, &mut bindings);
    148 ( 0.00%)              self.visit_ty(ty);
      .                       debug!("(resolving function / closure) recorded parameter");
      .                   }
    288 ( 0.00%)      }
      .           
      .               fn resolve_local(&mut self, local: &'ast Local) {
      .                   debug!("resolving local ({:?})", local);
      .                   // Resolve the type.
      .                   walk_list!(self, visit_ty, &local.ty);
      .           
      .                   // Resolve the initializer.
      .                   if let Some((init, els)) = local.kind.init_else_opt() {
-- line 1503 ----------------------------------------
-- line 1615 ----------------------------------------
      .                   }
      .           
      .                   // 5) Finally bubble up all the binding maps.
      .                   maps
      .               }
      .           
      .               /// Check the consistency of the outermost or-patterns.
      .               fn check_consistent_bindings_top(&mut self, pat: &'ast Pat) {
    350 ( 0.00%)          pat.walk(&mut |pat| match pat.kind {
      .                       PatKind::Or(ref ps) => {
      .                           self.check_consistent_bindings(ps);
      .                           false
      .                       }
      .                       _ => true,
      .                   })
      .               }
      .           
      .               fn resolve_arm(&mut self, arm: &'ast Arm) {
      .                   self.with_rib(ValueNS, NormalRibKind, |this| {
      .                       this.resolve_pattern_top(&arm.pat, PatternSource::Match);
     13 ( 0.00%)              walk_list!(this, visit_expr, &arm.guard);
      .                       this.visit_expr(&arm.body);
      .                   });
      .               }
      .           
      .               /// Arising from `source`, resolve a top level pattern.
      .               fn resolve_pattern_top(&mut self, pat: &'ast Pat, pat_src: PatternSource) {
     52 ( 0.00%)          let mut bindings = smallvec![(PatBoundCtx::Product, Default::default())];
      .                   self.resolve_pattern(pat, pat_src, &mut bindings);
      .               }
      .           
      .               fn resolve_pattern(
      .                   &mut self,
      .                   pat: &'ast Pat,
      .                   pat_src: PatternSource,
      .                   bindings: &mut SmallVec<[(PatBoundCtx, FxHashSet<Ident>); 1]>,
      .               ) {
      .                   // We walk the pattern before declaring the pattern's inner bindings,
      .                   // so that we avoid resolving a literal expression to a binding defined
      .                   // by the pattern.
    150 ( 0.00%)          visit::walk_pat(self, pat);
      .                   self.resolve_pattern_inner(pat, pat_src, bindings);
      .                   // This has to happen *after* we determine which pat_idents are variants:
      .                   self.check_consistent_bindings_top(pat);
      .               }
      .           
      .               /// Resolve bindings in a pattern. This is a helper to `resolve_pattern`.
      .               ///
      .               /// ### `bindings`
-- line 1663 ----------------------------------------
-- line 1679 ----------------------------------------
      .               /// See the implementation and `fresh_binding` for more details.
      .               fn resolve_pattern_inner(
      .                   &mut self,
      .                   pat: &Pat,
      .                   pat_src: PatternSource,
      .                   bindings: &mut SmallVec<[(PatBoundCtx, FxHashSet<Ident>); 1]>,
      .               ) {
      .                   // Visit all direct subpatterns of this pattern.
    400 ( 0.00%)          pat.walk(&mut |pat| {
      .                       debug!("resolve_pattern pat={:?} node={:?}", pat, pat.kind);
    237 ( 0.00%)              match pat.kind {
    148 ( 0.00%)                  PatKind::Ident(bmode, ident, ref sub) => {
      .                               // First try to resolve the identifier as some existing entity,
      .                               // then fall back to a fresh binding.
      .                               let has_sub = sub.is_some();
    407 ( 0.00%)                      let res = self
      .                                   .try_resolve_as_non_binding(pat_src, pat, bmode, ident, has_sub)
    407 ( 0.00%)                          .unwrap_or_else(|| self.fresh_binding(ident, pat.id, pat_src, bindings));
    259 ( 0.00%)                      self.r.record_partial_res(pat.id, PartialRes::new(res));
    111 ( 0.00%)                      self.r.record_pat_span(pat.id, pat.span);
      .                           }
      .                           PatKind::TupleStruct(ref qself, ref path, ref sub_patterns) => {
      .                               self.smart_resolve_path(
      .                                   pat.id,
      .                                   qself.as_ref(),
      .                                   path,
      .                                   PathSource::TupleStruct(
      .                                       pat.span,
-- line 1706 ----------------------------------------
-- line 1740 ----------------------------------------
      .                               return false;
      .                           }
      .                           _ => {}
      .                       }
      .                       true
      .                   });
      .               }
      .           
    444 ( 0.00%)      fn fresh_binding(
      .                   &mut self,
      .                   ident: Ident,
      .                   pat_id: NodeId,
      .                   pat_src: PatternSource,
      .                   bindings: &mut SmallVec<[(PatBoundCtx, FxHashSet<Ident>); 1]>,
      .               ) -> Res {
      .                   // Add the binding to the local ribs, if it doesn't already exist in the bindings map.
      .                   // (We must not add it if it's in the bindings map because that breaks the assumptions
      .                   // later passes make about or-patterns.)
    185 ( 0.00%)          let ident = ident.normalize_to_macro_rules();
      .           
      .                   let mut bound_iter = bindings.iter().filter(|(_, set)| set.contains(&ident));
      .                   // Already bound in a product pattern? e.g. `(a, a)` which is not allowed.
      .                   let already_bound_and = bound_iter.clone().any(|(ctx, _)| *ctx == PatBoundCtx::Product);
      .                   // Already bound in an or-pattern? e.g. `V1(a) | V2(a)`.
      .                   // This is *required* for consistency which is checked later.
      .                   let already_bound_or = bound_iter.any(|(ctx, _)| *ctx == PatBoundCtx::Or);
      .           
     37 ( 0.00%)          if already_bound_and {
      .                       // Overlap in a product pattern somewhere; report an error.
      .                       use ResolutionError::*;
      .                       let error = match pat_src {
      .                           // `fn f(a: u8, a: u8)`:
      .                           PatternSource::FnParam => IdentifierBoundMoreThanOnceInParameterList,
      .                           // `Variant(a, a)`:
      .                           _ => IdentifierBoundMoreThanOnceInSamePattern,
      .                       };
      .                       self.report_error(ident.span, error(ident.name));
      .                   }
      .           
      .                   // Record as bound if it's valid:
      .                   let ident_valid = ident.name != kw::Empty;
     37 ( 0.00%)          if ident_valid {
     74 ( 0.00%)              bindings.last_mut().unwrap().1.insert(ident);
      .                   }
      .           
     37 ( 0.00%)          if already_bound_or {
      .                       // `Variant1(a) | Variant2(a)`, ok
      .                       // Reuse definition from the first `a`.
      .                       self.innermost_rib_bindings(ValueNS)[&ident]
      .                   } else {
      .                       let res = Res::Local(pat_id);
      .                       if ident_valid {
      .                           // A completely fresh binding add to the set if it's valid.
     74 ( 0.00%)                  self.innermost_rib_bindings(ValueNS).insert(ident, res);
      .                       }
    296 ( 0.00%)              res
      .                   }
    333 ( 0.00%)      }
      .           
      .               fn innermost_rib_bindings(&mut self, ns: Namespace) -> &mut IdentMap<Res> {
      .                   &mut self.ribs[ns].last_mut().unwrap().bindings
      .               }
      .           
    481 ( 0.00%)      fn try_resolve_as_non_binding(
      .                   &mut self,
      .                   pat_src: PatternSource,
      .                   pat: &Pat,
      .                   bm: BindingMode,
      .                   ident: Ident,
      .                   has_sub: bool,
      .               ) -> Option<Res> {
      .                   // An immutable (no `mut`) by-value (no `ref`) binding pattern without
      .                   // a sub pattern (no `@ $pat`) is syntactically ambiguous as it could
      .                   // also be interpreted as a path to e.g. a constant, variant, etc.
     74 ( 0.00%)          let is_syntactic_ambiguity = !has_sub && bm == BindingMode::ByValue(Mutability::Not);
      .           
      .                   let ls_binding = self.resolve_ident_in_lexical_scope(ident, ValueNS, None, pat.span)?;
      .                   let (res, binding) = match ls_binding {
      .                       LexicalScopeBinding::Item(binding)
      .                           if is_syntactic_ambiguity && binding.is_ambiguity() =>
      .                       {
      .                           // For ambiguous bindings we don't know all their definitions and cannot check
      .                           // whether they can be shadowed by fresh bindings or not, so force an error.
-- line 1822 ----------------------------------------
-- line 1882 ----------------------------------------
      .                           None
      .                       }
      .                       _ => span_bug!(
      .                           ident.span,
      .                           "unexpected resolution for an identifier in pattern: {:?}",
      .                           res,
      .                       ),
      .                   }
    333 ( 0.00%)      }
      .           
      .               // High-level and context dependent path resolution routine.
      .               // Resolves the path and records the resolution into definition map.
      .               // If resolution fails tries several techniques to find likely
      .               // resolution candidates, suggest imports or other help, and report
      .               // errors in user friendly way.
  2,568 ( 0.00%)      fn smart_resolve_path(
      .                   &mut self,
      .                   id: NodeId,
      .                   qself: Option<&QSelf>,
      .                   path: &Path,
      .                   source: PathSource<'ast>,
      .               ) {
  3,210 ( 0.00%)          self.smart_resolve_path_fragment(
      .                       id,
      .                       qself,
      .                       &Segment::from_path(path),
    214 ( 0.00%)              path.span,
    856 ( 0.00%)              source,
      .                       CrateLint::SimplePath(id),
      .                   );
      .               }
      .           
  3,010 ( 0.00%)      fn smart_resolve_path_fragment(
      .                   &mut self,
      .                   id: NodeId,
      .                   qself: Option<&QSelf>,
      .                   path: &[Segment],
      .                   span: Span,
      .                   source: PathSource<'ast>,
      .                   crate_lint: CrateLint,
      .               ) -> PartialRes {
      .                   tracing::debug!(
      .                       "smart_resolve_path_fragment(id={:?}, qself={:?}, path={:?})",
      .                       id,
      .                       qself,
      .                       path
      .                   );
  1,720 ( 0.00%)          let ns = source.namespace();
      .           
  1,290 ( 0.00%)          let report_errors = |this: &mut Self, res: Option<Res>| {
      .                       if this.should_report_errs() {
      .                           let (err, candidates) = this.smart_resolve_report_errors(path, span, source, res);
      .           
      .                           let def_id = this.parent_scope.module.nearest_parent_mod();
      .                           let instead = res.is_some();
      .                           let suggestion =
      .                               if res.is_none() { this.report_missing_type_error(path) } else { None };
      .                           // get_from_node_id
-- line 1939 ----------------------------------------
-- line 2014 ----------------------------------------
      .                           err.cancel();
      .                       }
      .           
      .                       // We don't return `Some(parent_err)` here, because the error will
      .                       // be already printed as part of the `use` injections
      .                       None
      .                   };
      .           
  4,730 ( 0.00%)          let partial_res = match self.resolve_qpath_anywhere(
      .                       id,
      .                       qself,
      .                       path,
      .                       ns,
      .                       span,
      .                       source.defer_to_typeck(),
      .                       crate_lint,
      .                   ) {
  1,290 ( 0.00%)              Ok(Some(partial_res)) if partial_res.unresolved_segments() == 0 => {
  1,505 ( 0.00%)                  if source.is_expected(partial_res.base_res()) || partial_res.base_res() == Res::Err
      .                           {
  1,290 ( 0.00%)                      partial_res
      .                           } else {
      .                               report_errors(self, Some(partial_res.base_res()))
      .                           }
      .                       }
      .           
      .                       Ok(Some(partial_res)) if source.defer_to_typeck() => {
      .                           // Not fully resolved associated item `T::A::B` or `<T as Tr>::A::B`
      .                           // or `<T>::A::B`. If `B` should be resolved in value namespace then
-- line 2042 ----------------------------------------
-- line 2073 ----------------------------------------
      .                           }
      .           
      .                           PartialRes::new(Res::Err)
      .                       }
      .           
      .                       _ => report_errors(self, None),
      .                   };
      .           
    430 ( 0.00%)          if !matches!(source, PathSource::TraitItem(..)) {
      .                       // Avoid recording definition of `A::B` in `<T as A>::B::C`.
    860 ( 0.00%)              self.r.record_partial_res(id, partial_res);
      .                   }
      .           
      .                   partial_res
  1,720 ( 0.00%)      }
      .           
      .               fn self_type_is_available(&mut self, span: Span) -> bool {
      .                   let binding = self.resolve_ident_in_lexical_scope(
      .                       Ident::with_dummy_span(kw::SelfUpper),
      .                       TypeNS,
      .                       None,
      .                       span,
      .                   );
-- line 2095 ----------------------------------------
-- line 2113 ----------------------------------------
      .           
      .               #[inline]
      .               /// If we're actually rustdoc then avoid giving a name resolution error for `cfg()` items.
      .               fn should_report_errs(&self) -> bool {
      .                   !(self.r.session.opts.actually_rustdoc && self.in_func_body)
      .               }
      .           
      .               // Resolve in alternative namespaces if resolution in the primary namespace fails.
  2,795 ( 0.00%)      fn resolve_qpath_anywhere(
      .                   &mut self,
      .                   id: NodeId,
      .                   qself: Option<&QSelf>,
      .                   path: &[Segment],
      .                   primary_ns: Namespace,
      .                   span: Span,
      .                   defer_to_typeck: bool,
      .                   crate_lint: CrateLint,
      .               ) -> Result<Option<PartialRes>, Spanned<ResolutionError<'a>>> {
      .                   let mut fin_res = None;
      .           
  1,505 ( 0.00%)          for (i, &ns) in [primary_ns, TypeNS, ValueNS].iter().enumerate() {
    430 ( 0.00%)              if i == 0 || ns != primary_ns {
    860 ( 0.00%)                  match self.resolve_qpath(id, qself, path, ns, span, crate_lint)? {
      .                               Some(partial_res)
  1,290 ( 0.00%)                          if partial_res.unresolved_segments() == 0 || defer_to_typeck =>
      .                               {
  2,580 ( 0.00%)                          return Ok(Some(partial_res));
      .                               }
      .                               partial_res => {
      .                                   if fin_res.is_none() {
      .                                       fin_res = partial_res;
      .                                   }
      .                               }
      .                           }
      .                       }
-- line 2147 ----------------------------------------
-- line 2155 ----------------------------------------
      .                       if let Ok((_, res)) =
      .                           self.r.resolve_macro_path(&path, None, &self.parent_scope, false, false)
      .                       {
      .                           return Ok(Some(PartialRes::new(res)));
      .                       }
      .                   }
      .           
      .                   Ok(fin_res)
  1,720 ( 0.00%)      }
      .           
      .               /// Handles paths that may refer to associated items.
      .               fn resolve_qpath(
      .                   &mut self,
      .                   id: NodeId,
      .                   qself: Option<&QSelf>,
      .                   path: &[Segment],
      .                   ns: Namespace,
-- line 2171 ----------------------------------------
-- line 2172 ----------------------------------------
      .                   span: Span,
      .                   crate_lint: CrateLint,
      .               ) -> Result<Option<PartialRes>, Spanned<ResolutionError<'a>>> {
      .                   debug!(
      .                       "resolve_qpath(id={:?}, qself={:?}, path={:?}, ns={:?}, span={:?})",
      .                       id, qself, path, ns, span,
      .                   );
      .           
    215 ( 0.00%)          if let Some(qself) = qself {
      .                       if qself.position == 0 {
      .                           // This is a case like `<T>::B`, where there is no
      .                           // trait to resolve.  In that case, we leave the `B`
      .                           // segment to be resolved by type-check.
      .                           return Ok(Some(PartialRes::with_unresolved_segments(
      .                               Res::Def(DefKind::Mod, DefId::local(CRATE_DEF_INDEX)),
      .                               path.len(),
      .                           )));
-- line 2188 ----------------------------------------
-- line 2216 ----------------------------------------
      .                       // have to be resolved by type-check, since that requires doing
      .                       // trait resolution.
      .                       return Ok(Some(PartialRes::with_unresolved_segments(
      .                           partial_res.base_res(),
      .                           partial_res.unresolved_segments() + path.len() - qself.position - 1,
      .                       )));
      .                   }
      .           
  1,296 ( 0.00%)          let result = match self.resolve_path(&path, Some(ns), true, span, crate_lint) {
  2,756 ( 0.00%)              PathResult::NonModule(path_res) => path_res,
     12 ( 0.00%)              PathResult::Module(ModuleOrUniformRoot::Module(module)) if !module.is_normal() => {
      .                           PartialRes::new(module.res().unwrap())
      .                       }
      .                       // In `a(::assoc_item)*` `a` cannot be a module. If `a` does resolve to a module we
      .                       // don't report an error right away, but try to fallback to a primitive type.
      .                       // So, we are still able to successfully resolve something like
      .                       //
      .                       // use std::u8; // bring module u8 in scope
      .                       // fn f() -> u8 { // OK, resolves to primitive u8, not to std::u8
-- line 2234 ----------------------------------------
-- line 2248 ----------------------------------------
      .                       PathResult::Module(ModuleOrUniformRoot::Module(module)) => {
      .                           PartialRes::new(module.res().unwrap())
      .                       }
      .                       PathResult::Failed { is_error_from_last_segment: false, span, label, suggestion } => {
      .                           return Err(respan(span, ResolutionError::FailedToResolve { label, suggestion }));
      .                       }
      .                       PathResult::Module(..) | PathResult::Failed { .. } => return Ok(None),
      .                       PathResult::Indeterminate => bug!("indeterminate path result in resolve_qpath"),
  1,075 ( 0.00%)          };
      .           
    355 ( 0.00%)          if path.len() > 1
      .                       && result.base_res() != Res::Err
     28 ( 0.00%)              && path[0].ident.name != kw::PathRoot
      .                       && path[0].ident.name != kw::DollarCrate
      .                   {
      .                       let unqualified_result = {
    140 ( 0.00%)                  match self.resolve_path(
    140 ( 0.00%)                      &[*path.last().unwrap()],
      .                               Some(ns),
      .                               false,
      .                               span,
      .                               CrateLint::No,
      .                           ) {
      .                               PathResult::NonModule(path_res) => path_res.base_res(),
      .                               PathResult::Module(ModuleOrUniformRoot::Module(module)) => {
      .                                   module.res().unwrap()
      .                               }
    112 ( 0.00%)                      _ => return Ok(Some(result)),
      .                           }
      .                       };
      .                       if result.base_res() == unqualified_result {
      .                           let lint = lint::builtin::UNUSED_QUALIFICATIONS;
      .                           self.r.lint_buffer.buffer_lint(lint, id, span, "unnecessary qualification")
      .                       }
      .                   }
      .           
    748 ( 0.00%)          Ok(Some(result))
      .               }
      .           
      .               fn with_resolved_label(&mut self, label: Option<Label>, id: NodeId, f: impl FnOnce(&mut Self)) {
      .                   if let Some(label) = label {
      .                       if label.ident.as_str().as_bytes()[1] != b'_' {
      .                           self.diagnostic_metadata.unused_labels.insert(id, label.ident.span);
      .                       }
      .                       self.with_label_rib(NormalRibKind, |this| {
-- line 2292 ----------------------------------------
-- line 2301 ----------------------------------------
      .           
      .               fn resolve_labeled_block(&mut self, label: Option<Label>, id: NodeId, block: &'ast Block) {
      .                   self.with_resolved_label(label, id, |this| this.visit_block(block));
      .               }
      .           
      .               fn resolve_block(&mut self, block: &'ast Block) {
      .                   debug!("(resolving block) entering block");
      .                   // Move down in the graph, if there's an anonymous module rooted here.
     36 ( 0.00%)          let orig_module = self.parent_scope.module;
     36 ( 0.00%)          let anonymous_module = self.r.block_map.get(&block.id).cloned(); // clones a reference
      .           
      .                   let mut num_macro_definition_ribs = 0;
      .                   if let Some(anonymous_module) = anonymous_module {
      .                       debug!("(resolving block) found anonymous module, moving down");
      .                       self.ribs[ValueNS].push(Rib::new(ModuleRibKind(anonymous_module)));
      .                       self.ribs[TypeNS].push(Rib::new(ModuleRibKind(anonymous_module)));
      .                       self.parent_scope.module = anonymous_module;
      .                   } else {
      .                       self.ribs[ValueNS].push(Rib::new(NormalRibKind));
      .                   }
      .           
      .                   let prev = self.diagnostic_metadata.current_block_could_be_bare_struct_literal.take();
    108 ( 0.00%)          if let (true, [Stmt { kind: StmtKind::Expr(expr), .. }]) =
     36 ( 0.00%)              (block.could_be_bare_literal, &block.stmts[..])
      .                   {
      .                       if let ExprKind::Type(..) = expr.kind {
      .                           self.diagnostic_metadata.current_block_could_be_bare_struct_literal =
      .                               Some(block.span);
      .                       }
      .                   }
      .                   // Descend into the block.
      .                   for stmt in &block.stmts {
    180 ( 0.00%)              if let StmtKind::Item(ref item) = stmt.kind {
      .                           if let ItemKind::MacroDef(..) = item.kind {
      .                               num_macro_definition_ribs += 1;
      .                               let res = self.r.local_def_id(item.id).to_def_id();
      .                               self.ribs[ValueNS].push(Rib::new(MacroDefinition(res)));
      .                               self.label_ribs.push(Rib::new(MacroDefinition(res)));
      .                           }
      .                       }
      .           
      .                       self.visit_stmt(stmt);
      .                   }
    144 ( 0.00%)          self.diagnostic_metadata.current_block_could_be_bare_struct_literal = prev;
      .           
      .                   // Move back up.
     36 ( 0.00%)          self.parent_scope.module = orig_module;
      .                   for _ in 0..num_macro_definition_ribs {
      .                       self.ribs[ValueNS].pop();
      .                       self.label_ribs.pop();
      .                   }
      .                   self.ribs[ValueNS].pop();
     72 ( 0.00%)          if anonymous_module.is_some() {
      .                       self.ribs[TypeNS].pop();
      .                   }
      .                   debug!("(resolving block) leaving block");
      .               }
      .           
      .               fn resolve_anon_const(&mut self, constant: &'ast AnonConst, is_repeat: IsRepeatExpr) {
      .                   debug!("resolve_anon_const {:?} is_repeat: {:?}", constant, is_repeat);
      .                   self.with_constant_rib(
-- line 2361 ----------------------------------------
-- line 2363 ----------------------------------------
      .                       constant.value.is_potential_trivial_const_param(),
      .                       None,
      .                       |this| {
      .                           visit::walk_anon_const(this, constant);
      .                       },
      .                   );
      .               }
      .           
560,481 ( 0.06%)      fn resolve_expr(&mut self, expr: &'ast Expr, parent: Option<&'ast Expr>) {
      .                   // First, record candidate traits for this expression if it could
      .                   // result in the invocation of a method call.
      .           
      .                   self.record_candidate_traits_for_expr_if_necessary(expr);
      .           
      .                   // Next, resolve the node.
117,996 ( 0.01%)          match expr.kind {
    234 ( 0.00%)              ExprKind::Path(ref qself, ref path) => {
    468 ( 0.00%)                  self.smart_resolve_path(expr.id, qself.as_ref(), path, PathSource::Expr(parent));
      .                           visit::walk_expr(self, expr);
      .                       }
      .           
      .                       ExprKind::Struct(ref se) => {
      .                           self.smart_resolve_path(expr.id, se.qself.as_ref(), &se.path, PathSource::Struct);
      .                           visit::walk_expr(self, expr);
      .                       }
      .           
-- line 2388 ----------------------------------------
-- line 2444 ----------------------------------------
      .                       ExprKind::Block(ref block, label) => self.resolve_labeled_block(label, block.id, block),
      .           
      .                       // Equivalent to `visit::walk_expr` + passing some context to children.
      .                       ExprKind::Field(ref subexpression, _) => {
      .                           self.resolve_expr(subexpression, Some(expr));
      .                       }
      .                       ExprKind::MethodCall(ref segment, ref arguments, _) => {
      .                           let mut arguments = arguments.iter();
     93 ( 0.00%)                  self.resolve_expr(arguments.next().unwrap(), Some(expr));
      .                           for argument in arguments {
      3 ( 0.00%)                      self.resolve_expr(argument, None);
      .                           }
      .                           self.visit_path_segment(expr.span, segment);
      .                       }
      .           
      .                       ExprKind::Call(ref callee, ref arguments) => {
     84 ( 0.00%)                  self.resolve_expr(callee, Some(expr));
     56 ( 0.00%)                  let const_args = self.r.legacy_const_generic_args(callee).unwrap_or_default();
      .                           for (idx, argument) in arguments.iter().enumerate() {
      .                               // Constant arguments need to be treated as AnonConst since
      .                               // that is how they will be later lowered to HIR.
      .                               if const_args.contains(&idx) {
      .                                   self.with_constant_rib(
      .                                       IsRepeatExpr::No,
      .                                       argument.is_potential_trivial_const_param(),
      .                                       None,
      .                                       |this| {
      .                                           this.resolve_expr(argument, None);
      .                                       },
      .                                   );
      .                               } else {
    168 ( 0.00%)                          self.resolve_expr(argument, None);
      .                               }
      .                           }
      .                       }
      .                       ExprKind::Type(ref type_expr, ref ty) => {
      .                           // `ParseSess::type_ascription_path_suggestions` keeps spans of colon tokens in
      .                           // type ascription. Here we are trying to retrieve the span of the colon token as
      .                           // well, but only if it's written without spaces `expr:Ty` and therefore confusable
      .                           // with `expr::Ty`, only in this case it will match the span from
-- line 2483 ----------------------------------------
-- line 2520 ----------------------------------------
      .                       ExprKind::Index(ref elem, ref idx) => {
      .                           self.resolve_expr(elem, Some(expr));
      .                           self.visit_expr(idx);
      .                       }
      .                       _ => {
      .                           visit::walk_expr(self, expr);
      .                       }
      .                   }
    472 ( 0.00%)      }
      .           
      .               fn record_candidate_traits_for_expr_if_necessary(&mut self, expr: &'ast Expr) {
147,495 ( 0.02%)          match expr.kind {
      .                       ExprKind::Field(_, ident) => {
      .                           // FIXME(#6890): Even though you can't treat a method like a
      .                           // field, we need to add any trait methods we find that match
      .                           // the field name so that we can do some nice error reporting
      .                           // later on in typeck.
      .                           let traits = self.traits_in_scope(ident, ValueNS);
      .                           self.r.trait_map.insert(expr.id, traits);
      .                       }
      .                       ExprKind::MethodCall(ref segment, ..) => {
      .                           debug!("(recording candidate traits for expr) recording traits for {}", expr.id);
    124 ( 0.00%)                  let traits = self.traits_in_scope(segment.ident, ValueNS);
     93 ( 0.00%)                  self.r.trait_map.insert(expr.id, traits);
      .                       }
      .                       _ => {
      .                           // Nothing to do.
      .                       }
      .                   }
      .               }
      .           
      .               fn traits_in_scope(&mut self, ident: Ident, ns: Namespace) -> Vec<TraitCandidate> {
    248 ( 0.00%)          self.r.traits_in_scope(
      .                       self.current_trait_ref.as_ref().map(|(module, _)| *module),
      .                       &self.parent_scope,
      .                       ident.span.ctxt(),
      .                       Some((ident.name, ns)),
      .                   )
      .               }
      .           
      .               fn compute_num_lifetime_params(&mut self, id: NodeId, generics: &Generics) {
-- line 2560 ----------------------------------------
-- line 2564 ----------------------------------------
      .                       .iter()
      .                       .filter(|param| matches!(param.kind, ast::GenericParamKind::Lifetime { .. }))
      .                       .count();
      .                   self.r.item_generics_num_lifetimes.insert(def_id, count);
      .               }
      .           }
      .           
      .           impl<'a> Resolver<'a> {
     11 ( 0.00%)      pub(crate) fn late_resolve_crate(&mut self, krate: &Crate) {
      1 ( 0.00%)          let mut late_resolution_visitor = LateResolutionVisitor::new(self);
      .                   visit::walk_crate(&mut late_resolution_visitor, krate);
      .                   for (id, span) in late_resolution_visitor.diagnostic_metadata.unused_labels.iter() {
      .                       self.lint_buffer.buffer_lint(lint::builtin::UNUSED_LABELS, *id, *span, "unused label");
      .                   }
      9 ( 0.00%)      }
      .           }

424,277 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/late.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir               

-- line 118 ----------------------------------------
      .               stability: InternedSet<'tcx, attr::Stability>,
      .           
      .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
      .               const_stability: InternedSet<'tcx, attr::ConstStability>,
      .           }
      .           
      .           impl<'tcx> CtxtInterners<'tcx> {
      .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
     17 ( 0.00%)          CtxtInterners {
      .                       arena,
      .                       type_: Default::default(),
      .                       type_list: Default::default(),
      .                       substs: Default::default(),
      .                       region: Default::default(),
      .                       poly_existential_predicates: Default::default(),
      .                       canonical_var_infos: Default::default(),
      .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
      .                       stability: Default::default(),
      .                       const_stability: Default::default(),
      .                   }
      .               }
      .           
      .               /// Interns a type.
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline(never)]
 45,040 ( 0.00%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
      .                   self.type_
 28,150 ( 0.00%)              .intern(kind, |kind| {
  2,808 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
      .           
      .                           let ty_struct = TyS {
  5,616 ( 0.00%)                      kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(ty_struct))
      .                       })
      .                       .0
 50,670 ( 0.01%)      }
      .           
      .               #[inline(never)]
 18,352 ( 0.00%)      fn intern_predicate(
      .                   &self,
      .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> &'tcx PredicateInner<'tcx> {
      .                   self.predicate
 16,058 ( 0.00%)              .intern(kind, |kind| {
  2,412 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
      .           
      .                           let predicate_struct = PredicateInner {
      .                               kind,
      .                               flags: flags.flags,
      .                               outer_exclusive_binder: flags.outer_exclusive_binder,
      .                           };
      .           
      .                           Interned(self.arena.alloc(predicate_struct))
      .                       })
      .                       .0
 20,646 ( 0.00%)      }
      .           }
      .           
      .           pub struct CommonTypes<'tcx> {
      .               pub unit: Ty<'tcx>,
      .               pub bool: Ty<'tcx>,
      .               pub char: Ty<'tcx>,
      .               pub isize: Ty<'tcx>,
      .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
      .           /// safely used as a key in the maps of a TypeckResults. For that to be
      .           /// the case, the HirId must have the same `owner` as all the other IDs in
      .           /// this table (signified by `hir_owner`). Otherwise the HirId
      .           /// would be in a different frame of reference and using its `local_id`
      .           /// would result in lookup errors, or worse, in silently wrong data being
      .           /// stored/returned.
      .           #[inline]
      .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
445,706 ( 0.05%)      if hir_id.owner != hir_owner {
      .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
      .               }
      .           }
      .           
      .           #[cold]
      .           #[inline(never)]
      .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
      .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
      .           }
      .           
      .           impl<'a, V> LocalTableInContext<'a, V> {
      .               pub fn contains_key(&self, id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.data.contains_key(&id.local_id)
      .               }
      .           
297,640 ( 0.03%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
 59,564 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
 59,564 ( 0.01%)          self.data.get(&id.local_id)
238,112 ( 0.03%)      }
      .           
      .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
      .                   self.data.iter()
      .               }
      .           }
      .           
      .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
      .               type Output = V;
      .           
    216 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
      .                   self.get(key).expect("LocalTableInContext: key not found")
    144 ( 0.00%)      }
      .           }
      .           
      .           pub struct LocalTableInContextMut<'a, V> {
      .               hir_owner: LocalDefId,
      .               data: &'a mut ItemLocalMap<V>,
      .           }
      .           
      .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
      .               pub treat_byte_string_as_slice: ItemLocalSet,
      .           
      .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
      .               /// on closure size.
      .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
      .           }
      .           
      .           impl<'tcx> TypeckResults<'tcx> {
  1,332 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
 15,762 ( 0.00%)          TypeckResults {
      .                       hir_owner,
      .                       type_dependent_defs: Default::default(),
      .                       field_indices: Default::default(),
      .                       user_provided_types: Default::default(),
      .                       user_provided_sigs: Default::default(),
      .                       node_types: Default::default(),
      .                       node_substs: Default::default(),
      .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
      .                       tainted_by_errors: None,
      .                       concrete_opaque_types: Default::default(),
      .                       closure_min_captures: Default::default(),
      .                       closure_fake_reads: Default::default(),
      .                       generator_interior_types: ty::Binder::dummy(Default::default()),
      .                       treat_byte_string_as_slice: Default::default(),
      .                       closure_size_eval: Default::default(),
      .                   }
  1,332 ( 0.00%)      }
      .           
      .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  1,407 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
    938 ( 0.00%)          match *qpath {
  2,814 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .type_dependent_def(id)
      .                           .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                   }
  2,345 ( 0.00%)      }
      .           
      .               pub fn type_dependent_defs(
      .                   &self,
      .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
     50 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      .               }
      .           
     91 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    184 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    182 ( 0.00%)      }
      .           
    372 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
      .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    372 ( 0.00%)      }
      .           
 29,770 ( 0.00%)      pub fn type_dependent_defs_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
 29,770 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
 29,770 ( 0.00%)      }
      .           
      .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      .                   LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      .               }
      .           
      .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      .               }
      .           
      .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    246 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    123 ( 0.00%)      }
      .           
      .               pub fn user_provided_types_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      .               }
      .           
      .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
 59,592 ( 0.01%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
 29,796 ( 0.00%)      }
      .           
      .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
118,866 ( 0.01%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
 59,433 ( 0.01%)      }
      .           
709,218 ( 0.07%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
118,203 ( 0.01%)          self.node_type_opt(id).unwrap_or_else(|| {
      .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
      .                   })
591,015 ( 0.06%)      }
      .           
147,773 ( 0.02%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
147,773 ( 0.02%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_types.get(&id.local_id).cloned()
295,546 ( 0.03%)      }
      .           
      .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    168 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
     84 ( 0.00%)      }
      .           
 29,852 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
 29,852 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
 59,704 ( 0.01%)      }
      .           
 29,686 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
 29,686 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
      .                   self.node_substs.get(&id.local_id).cloned()
 59,372 ( 0.01%)      }
      .           
      .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
      .               // doesn't provide type parameter substitutions.
      .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    148 ( 0.00%)          self.node_type(pat.hir_id)
      .               }
      .           
      .               // Returns the type of an expression as a monotype.
      .               //
      .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
      .               // some cases, we insert `Adjustment` annotations such as auto-deref or
      .               // auto-ref.  The type returned by this function does not consider such
      .               // adjustments.  See `expr_ty_adjusted()` instead.
      .               //
      .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
      .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
      .               // instead of "fn(ty) -> T with T = isize".
      .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
118,478 ( 0.01%)          self.node_type(expr.hir_id)
      .               }
      .           
      .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
118,264 ( 0.01%)          self.node_type_opt(expr.hir_id)
      .               }
      .           
      .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
 59,174 ( 0.01%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
 29,587 ( 0.00%)      }
      .           
      .               pub fn adjustments_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
 59,496 ( 0.01%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
 29,748 ( 0.00%)      }
      .           
 59,081 ( 0.01%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
118,162 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
      .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
118,162 ( 0.01%)      }
      .           
      .               /// Returns the type of `expr`, considering any `Adjustment`
      .               /// entry recorded for that expression.
     10 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      2 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      .               }
      .           
      .               pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      .                   self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      .               }
      .           
     50 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
      .                   // Only paths and method calls/overloaded operators have
      .                   // entries in type_dependent_defs, ignore the former here.
    100 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
      .                       return false;
      .                   }
      .           
    100 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    100 ( 0.00%)      }
      .           
    333 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
      .                   self.pat_binding_modes().get(id).copied().or_else(|| {
      .                       s.delay_span_bug(sp, "missing binding mode");
      .                       None
      .                   })
    444 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    259 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
     74 ( 0.00%)      }
      .           
      .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    148 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
     74 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    300 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    150 ( 0.00%)      }
      .           
      .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    100 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
     50 ( 0.00%)      }
      .           
      .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
      .               /// by the closure.
    256 ( 0.00%)      pub fn closure_min_captures_flattened(
      .                   &self,
      .                   closure_def_id: DefId,
      .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
      .                   self.closure_min_captures
      .                       .get(&closure_def_id)
      .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
      .                       .into_iter()
      .                       .flatten()
    320 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
    128 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     64 ( 0.00%)      }
      .           
      .               pub fn closure_kind_origins_mut(
      .                   &mut self,
      .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
      .               }
      .           
      .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    272 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
    136 ( 0.00%)      }
      .           
      .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    144 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     72 ( 0.00%)      }
      .           
      .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    128 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     64 ( 0.00%)      }
      .           
      .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
      .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
      .               }
      .           
      .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
      .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
      .                   self.coercion_casts.contains(&hir_id.local_id)
      .               }
      .           
      .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
      .                   self.coercion_casts.insert(id);
      .               }
      .           
      .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     64 ( 0.00%)          &self.coercion_casts
     64 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
      .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
      .                   let ty::TypeckResults {
      .                       hir_owner,
      .                       ref type_dependent_defs,
      .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 890 ----------------------------------------
      .           
      .               /// The canonical type is the result of `type_of(def_id)` with the
      .               /// given substitutions applied.
      .               TypeOf(DefId, UserSubsts<'tcx>),
      .           }
      .           
      .           impl<'tcx> CommonTypes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
    111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
      .           
      .                   CommonTypes {
      .                       unit: mk(Tuple(List::empty())),
      .                       bool: mk(Bool),
      .                       char: mk(Char),
      .                       never: mk(Never),
      .                       isize: mk(Int(ty::IntTy::Isize)),
      .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
      .           
      .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonLifetimes<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
     67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
      .           
      .                   CommonLifetimes {
      5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
      5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
      5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> CommonConsts<'tcx> {
      .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
      6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
      .           
      .                   CommonConsts {
      .                       unit: mk_const(ty::Const {
      .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
      .                           ty: types.unit,
      .                       }),
      .                   }
      .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
      .           
      .               /// Stores memory for globals (statics/consts).
      .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
      .           
      .               output_filenames: Arc<OutputFilenames>,
      .           }
      .           
      .           impl<'tcx> TyCtxt<'tcx> {
  3,680 ( 0.00%)      pub fn typeck_opt_const_arg(
      .                   self,
      .                   def: ty::WithOptConstParam<LocalDefId>,
      .               ) -> &'tcx TypeckResults<'tcx> {
  1,472 ( 0.00%)          if let Some(param_did) = def.const_param_did {
      .                       self.typeck_const_arg((def.did, param_did))
      .                   } else {
      .                       self.typeck(def.did)
      .                   }
  2,944 ( 0.00%)      }
      .           
    192 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     64 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    256 ( 0.00%)      }
      .           
  1,280 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    256 ( 0.00%)          self.arena.alloc(Steal::new(mir))
  1,792 ( 0.00%)      }
      .           
    256 ( 0.00%)      pub fn alloc_steal_promoted(
      .                   self,
      .                   promoted: IndexVec<Promoted, Body<'tcx>>,
      .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     64 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    320 ( 0.00%)      }
      .           
     54 ( 0.00%)      pub fn alloc_adt_def(
      .                   self,
      .                   did: DefId,
      .                   kind: AdtKind,
      .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
      .                   repr: ReprOptions,
      .               ) -> &'tcx ty::AdtDef {
     96 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     24 ( 0.00%)      }
      .           
      .               /// Allocates a read-only byte or string literal for `mir::interpret`.
      .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
      .                   // Create an allocation that just contains these bytes.
      .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
      .                   let alloc = self.intern_const_alloc(alloc);
      .                   self.create_memory_alloc(alloc)
      .               }
      .           
      .               /// Returns a range of the start/end indices specified with the
      .               /// `rustc_layout_scalar_valid_range` attribute.
      .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
     24 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
     12 ( 0.00%)          let attrs = self.get_attrs(def_id);
     51 ( 0.00%)          let get = |name| {
     12 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
      .                           Some(attr) => attr,
      .                           None => return Bound::Unbounded,
      .                       };
      .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      .                       if let Some(
      .                           &[
      .                               ast::NestedMetaItem::Literal(ast::Lit {
      .                                   kind: ast::LitKind::Int(a, _), ..
-- line 1111 ----------------------------------------
-- line 1114 ----------------------------------------
      .                       ) = attr.meta_item_list().as_deref()
      .                       {
      .                           Bound::Included(a)
      .                       } else {
      .                           self.sess
      .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
      .                           Bound::Unbounded
      .                       }
     60 ( 0.00%)          };
     18 ( 0.00%)          (
     18 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
      9 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
      .                   )
     24 ( 0.00%)      }
      .           
      .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
      .                   value.lift_to_tcx(self)
      .               }
      .           
      .               /// Creates a type context and call the closure with a `TyCtxt` reference
      .               /// to the context. The closure enforces that the type context and any interned
      .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
      .               /// reference to the context, to allow formatting values that need it.
     23 ( 0.00%)      pub fn create_global_ctxt(
      .                   s: &'tcx Session,
      .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
      .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
      .                   resolutions: ty::ResolverOutputs,
      .                   krate: &'tcx hir::Crate<'tcx>,
      .                   dep_graph: DepGraph,
      .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
      .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
      .                   query_kinds: &'tcx [DepKindStruct],
      .                   crate_name: &str,
      .                   output_filenames: OutputFilenames,
      .               ) -> GlobalCtxt<'tcx> {
      1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
      .                       s.fatal(&err);
      .                   });
      .                   let interners = CtxtInterners::new(arena);
      .                   let common_types = CommonTypes::new(&interners);
      .                   let common_lifetimes = CommonLifetimes::new(&interners);
      .                   let common_consts = CommonConsts::new(&interners, &common_types);
      .           
    127 ( 0.00%)          GlobalCtxt {
      .                       sess: s,
      6 ( 0.00%)              lint_store,
      .                       arena,
      2 ( 0.00%)              interners,
      5 ( 0.00%)              dep_graph,
      4 ( 0.00%)              untracked_resolutions: resolutions,
      2 ( 0.00%)              prof: s.prof.clone(),
      .                       types: common_types,
      .                       lifetimes: common_lifetimes,
      .                       consts: common_consts,
      .                       untracked_crate: krate,
      .                       on_disk_cache,
      .                       queries,
      .                       query_caches: query::QueryCaches::default(),
      .                       query_kinds,
      .                       ty_rcache: Default::default(),
      .                       pred_rcache: Default::default(),
      .                       selection_cache: Default::default(),
      .                       evaluation_cache: Default::default(),
      1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
      .                       data_layout,
      .                       alloc_map: Lock::new(interpret::AllocMap::new()),
      .                       output_filenames: Arc::new(output_filenames),
      .                   }
      9 ( 0.00%)      }
      .           
      .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
      .                   &self.query_kinds[k as usize]
      .               }
      .           
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
      .                   ty: Ty<'tcx>,
      .                   span: S,
      .                   msg: &str,
      .               ) -> &'tcx Const<'tcx> {
      .                   self.sess.delay_span_bug(span, msg);
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
      .               }
      .           
    637 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
     91 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    639 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    728 ( 0.00%)      }
      .           
      .               /// Obtain all lang items of this crate and all dependencies (recursively)
 23,793 ( 0.00%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
      .                   self.get_lang_items(())
 30,591 ( 0.00%)      }
      .           
      .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
      .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
      .               pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
      .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
      .               }
      .           
      .               /// Obtain the diagnostic item's name
    791 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
      .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
    904 ( 0.00%)      }
      .           
      .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
  1,491 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
      .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
  1,704 ( 0.00%)      }
      .           
    686 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
      .                   self.stability_index(())
    882 ( 0.00%)      }
      .           
 12,985 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
      .                   self.features_query(())
 14,840 ( 0.00%)      }
      .           
    308 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
      .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  2,715 ( 0.00%)          if let Some(id) = id.as_local() {
      .                       self.untracked_resolutions.definitions.def_key(id)
      .                   } else {
  1,708 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
      .                   }
    246 ( 0.00%)      }
      .           
      .               /// Converts a `DefId` into its fully expanded `DefPath` (every
      .               /// `DefId` is really just an interned `DefPath`).
      .               ///
      .               /// Note that if `id` is not local to this crate, the result will
      .               ///  be a non-local `DefPath`.
     16 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
      .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
     24 ( 0.00%)          if let Some(id) = id.as_local() {
      6 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
      .                   } else {
     30 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
      .                   }
     24 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
      .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    556 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
      .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
      .                   } else {
    155 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
      .                   if crate_num == LOCAL_CRATE {
      .                       self.sess.local_stable_crate_id()
      .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
      .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
      .                       self.def_path(def_id).to_string_no_crate_verbose()
      .                   )
      .               }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
  6,212 ( 0.00%)          &*self.untracked_resolutions.cstore
  3,106 ( 0.00%)      }
      .           
      .               /// Note that this is *untracked* and should only be used within the query
      .               /// system if the result is otherwise tracked through queries
      .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
      .                   &self.untracked_resolutions.definitions
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    119 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    504 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
      .               }
      .           
      .               #[inline(always)]
      .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
      .                   let resolutions = &self.gcx.untracked_resolutions;
      .                   StableHashingContext::ignore_spans(
      .                       self.sess,
      .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
      .               /// If `true`, we should use the MIR-based borrowck, but also
      .               /// fall back on the AST borrowck if the MIR-based one errors.
      .               pub fn migrate_borrowck(self) -> bool {
      .                   self.borrowck_mode().migrate()
      .               }
      .           
      .               /// What mode(s) of borrowck should we run? AST? MIR? both?
      .               /// (Also considers the `#![feature(nll)]` setting.)
    128 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
      .                   // Here are the main constraints we need to deal with:
      .                   //
      .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
      .                   //    synonymous with no `-Z borrowck=...` flag at all.
      .                   //
      .                   // 2. We want to allow developers on the Nightly channel
      .                   //    to opt back into the "hard error" mode for NLL,
      .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
      .                   //   errors. (To simplify the code here, it now even overrides
      .                   //   a user's attempt to specify `-Z borrowck=compare`, which
      .                   //   we arguably do not need anymore and should remove.)
      .                   //
      .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
      .                   //
      .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
      .           
    192 ( 0.00%)          if self.features().nll {
      .                       return BorrowckMode::Mir;
      .                   }
      .           
     64 ( 0.00%)          self.sess.opts.borrowck_mode
    256 ( 0.00%)      }
      .           
      .               /// If `true`, we should use lazy normalization for constants, otherwise
      .               /// we still evaluate them eagerly.
      .               #[inline]
      .               pub fn lazy_normalization(self) -> bool {
      .                   let features = self.features();
      .                   // Note: We only use lazy normalization for generic const expressions.
      .                   features.generic_const_exprs
      .               }
      .           
      .               #[inline]
      .               pub fn local_crate_exports_generics(self) -> bool {
      .                   debug_assert!(self.sess.opts.share_generics());
      .           
     14 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
     28 ( 0.00%)              match crate_type {
      .                           CrateType::Executable
      .                           | CrateType::Staticlib
      .                           | CrateType::ProcMacro
      .                           | CrateType::Cdylib => false,
      .           
      .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
      .                           // We want to block export of generics from dylibs,
      .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
      .                       // FIXME(#42706) -- in some cases, we could do better here.
      .                       return true;
      .                   }
      .                   false
      .               }
      .           
      .               /// Determines whether identifiers in the assembly have strict naming rules.
      .               /// Currently, only NVPTX* targets need it.
     18 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
     18 ( 0.00%)          self.sess.target.arch.contains("nvptx")
     36 ( 0.00%)      }
      .           
      .               /// Returns `&'static core::panic::Location<'static>`.
     24 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
      .                   self.mk_imm_ref(
      4 ( 0.00%)              self.lifetimes.re_static,
      .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      8 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
      .                   )
     24 ( 0.00%)      }
      .           
      .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    726 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    528 ( 0.00%)          match self.def_kind(def_id) {
      .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
      .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
      .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
      .                       },
  1,188 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
      .                   }
    594 ( 0.00%)      }
      .           
    182 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
      .                   self.limits(()).type_length_limit
    208 ( 0.00%)      }
      .           
  8,204 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
      .                   self.limits(()).recursion_limit
  9,376 ( 0.00%)      }
      .           
    980 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
      .                   self.limits(()).move_size_limit
  1,120 ( 0.00%)      }
      .           
    917 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
      .                   self.limits(()).const_eval_limit
  1,048 ( 0.00%)      }
      .           
      .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
      .                   iter::once(LOCAL_CRATE)
      .                       .chain(self.crates(()).iter().copied())
      .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
      .               }
      .           }
      .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
      .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
      .           }
      .           
      .           macro_rules! nop_lift {
      .               ($set:ident; $ty:ty => $lifted:ty) => {
      .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
      .                       type Lifted = $lifted;
      .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
     28 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
      .                               Some(unsafe { mem::transmute(self) })
      .                           } else {
      .                               None
      .                           }
      .                       }
      .                   }
      .               };
      .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
      .               /// This is the implicit state of rustc. It contains the current
      .               /// `TyCtxt` and query. It is updated when creating a local interner or
      .               /// executing a new query. Whenever there's a `TyCtxt` value available
      .               /// you should also have access to an `ImplicitCtxt` through the functions
      .               /// in this module.
      .               #[derive(Clone)]
      .               pub struct ImplicitCtxt<'a, 'tcx> {
      .                   /// The current `TyCtxt`.
      2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
      .           
      .                   /// The current query job, if any. This is updated by `JobOwner::start` in
      .                   /// `ty::query::plumbing` when executing a query.
      .                   pub query: Option<query::QueryJobId<DepKind>>,
      .           
      .                   /// Where to store diagnostics for the current query job, if any.
      .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
      .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
      .                   pub layout_depth: usize,
      .           
      .                   /// The current dep graph task. This is used to add dependencies to queries
      .                   /// when executing them.
      .                   pub task_deps: TaskDepsRef<'a>,
      .               }
      .           
      .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
      5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
      .                       let tcx = TyCtxt { gcx };
     25 ( 0.00%)              ImplicitCtxt {
      .                           tcx,
      .                           query: None,
      .                           diagnostics: None,
      .                           layout_depth: 0,
      .                           task_deps: TaskDepsRef::Ignore,
      .                       }
      5 ( 0.00%)          }
      .               }
      .           
      .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
      .               /// to `value` during the call to `f`. It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(parallel_compiler)]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
      .           
      .               /// Sets TLV to `value` during the call to `f`.
      .               /// It is restored to its previous value after.
      .               /// This is used to set the pointer to the new `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
      .                   let old = get_tlv();
  8,083 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
      .                   TLV.with(|tlv| tlv.set(value));
      .                   f()
      .               }
      .           
      .               /// Gets the pointer to the current `ImplicitCtxt`.
      .               #[cfg(not(parallel_compiler))]
      .               #[inline]
      .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
      .               }
      .           
      .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
      .               #[inline]
      .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
      1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
      .               #[inline]
      .               pub fn with_context_opt<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
      .               {
      .                   let context = get_tlv();
151,117 ( 0.02%)          if context == 0 {
      .                       f(None)
      .                   } else {
      .                       // We could get an `ImplicitCtxt` pointer from another thread.
      .                       // Ensure that `ImplicitCtxt` is `Sync`.
      .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
      .           
      .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
      .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
      .           
      .               /// Allows access to the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with_context<F, R>(f: F) -> R
      .               where
      .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
      .               {
     18 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
      .               }
      .           
      .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
      .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
      .               /// as the `TyCtxt` passed in.
      .               /// This will panic if you pass it a `TyCtxt` which is different from the current
      .               /// `ImplicitCtxt`'s `tcx` field.
      .               #[inline]
      .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
      .               where
      .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
      .               {
      .                   with_context(|context| unsafe {
 75,201 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
      .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
 75,072 ( 0.01%)              f(context)
      .                   })
      .               }
      .           
      .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
      .               /// Panics if there is no `ImplicitCtxt` available.
      .               #[inline]
      .               pub fn with<F, R>(f: F) -> R
      .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
      .               fn into_pointer(&self) -> *const () {
      .                   self.0 as *const _ as *const ()
      .               }
      .           }
      .           
      .           #[allow(rustc::usage_of_ty_tykind)]
      .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  4,389 ( 0.00%)          &self.0.kind()
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  5,392 ( 0.00%)          self.0.kind().hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  1,931 ( 0.00%)          &self.0.kind
      .               }
      .           }
      .           
      .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
      .           
      .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
    444 ( 0.00%)          self.0.kind.hash(s)
      .               }
      .           }
      .           
      .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
      .               fn borrow<'a>(&'a self) -> &'a [T] {
  3,697 ( 0.00%)          &self.0[..]
      .               }
      .           }
      .           
      .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
      .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
      .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
      .                   // `x == y`.
      .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
      .           
      .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
      .               fn hash<H: Hasher>(&self, s: &mut H) {
      .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  1,916 ( 0.00%)          self.0[..].hash(s)
      .               }
      .           }
      .           
      .           macro_rules! direct_interners {
      .               ($($name:ident: $method:ident($ty:ty),)+) => {
      .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
      .                       fn borrow<'a>(&'a self) -> &'a $ty {
  4,811 ( 0.00%)                  &self.0
      .                       }
      .                   }
      .           
      .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
      .                       fn eq(&self, other: &Self) -> bool {
      .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
      .                           // equals `x == y`.
      .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
      .                   }
      .           
      .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
      .           
      .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
      .                       fn hash<H: Hasher>(&self, s: &mut H) {
      .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
      .                           // x.hash(s)`.
173,166 ( 0.02%)                  self.0.hash(s)
      .                       }
      .                   }
      .           
      .                   impl<'tcx> TyCtxt<'tcx> {
259,652 ( 0.03%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
189,742 ( 0.02%)                  self.interners.$name.intern(v, |v| {
 29,819 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
      .                           }).0
291,933 ( 0.03%)              }
      .                   })+
      .               }
      .           }
      .           
      .           direct_interners! {
      .               region: mk_region(RegionKind),
      .               const_: mk_const(Const<'tcx>),
      .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
      .               adt_def: intern_adt_def(AdtDef),
      .               stability: intern_stability(attr::Stability),
      .               const_stability: intern_const_stability(attr::ConstStability),
      .           }
      .           
      .           macro_rules! slice_interners {
      .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
      .                   impl<'tcx> TyCtxt<'tcx> {
 51,725 ( 0.01%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
      .                           self.interners.$field.intern_ref(v, || {
      .                               Interned(List::from_arena(&*self.arena, v))
      .                           }).0
 46,341 ( 0.00%)              })+
      .                   }
      .               );
      .           }
      .           
      .           slice_interners!(
      .               type_list: _intern_type_list(Ty<'tcx>),
      .               substs: _intern_substs(GenericArg<'tcx>),
      .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
      .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
      .                   })
      .               }
      .           
      .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
      .               /// `*r == kind`.
      .               #[inline]
      .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
  3,044 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               #[inline]
      .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
 39,582 ( 0.00%)          self.interners.intern_ty(st)
      .               }
      .           
      .               #[inline]
      .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 25,304 ( 0.00%)          let inner = self.interners.intern_predicate(binder);
      .                   Predicate { inner }
      .               }
      .           
      .               #[inline]
 14,040 ( 0.00%)      pub fn reuse_or_mk_predicate(
      .                   self,
      .                   pred: Predicate<'tcx>,
      .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
      .               ) -> Predicate<'tcx> {
  1,301 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 14,040 ( 0.00%)      }
      .           
      .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      .                   match tm {
      .                       IntTy::Isize => self.types.isize,
      .                       IntTy::I8 => self.types.i8,
      .                       IntTy::I16 => self.types.i16,
      .                       IntTy::I32 => self.types.i32,
      .                       IntTy::I64 => self.types.i64,
-- line 2226 ----------------------------------------
-- line 2329 ----------------------------------------
      .               }
      .           
      .               #[inline]
      .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
      .               }
      .           
      .               #[inline]
    644 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
      .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    672 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Slice(ty))
      .               }
      .           
      .               #[inline]
      .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     16 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
     16 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .               }
      .           
      .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
      .                   iter.intern_with(|ts| {
      .                       let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      .                       self.mk_ty(Tuple(self.intern_substs(&kinds)))
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn mk_unit(self) -> Ty<'tcx> {
     28 ( 0.00%)          self.types.unit
      .               }
      .           
      .               #[inline]
      .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
      .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
      .               }
      .           
      .               #[inline]
-- line 2369 ----------------------------------------
-- line 2445 ----------------------------------------
      .                   self.mk_ty(Param(ParamTy { index, name }))
      .               }
      .           
      .               #[inline]
      .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
      .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
      .               }
      .           
    686 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    490 ( 0.00%)          match param.kind {
      .                       GenericParamDefKind::Lifetime => {
      .                           self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
      .                       }
    196 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
      .                       GenericParamDefKind::Const { .. } => {
      .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
      .                       }
      .                   }
    686 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
      .                   self.mk_ty(Opaque(def_id, substs))
      .               }
      .           
      .               pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      .                   self.mk_place_elem(place, PlaceElem::Field(f, ty))
-- line 2471 ----------------------------------------
-- line 2521 ----------------------------------------
      .                   );
      .                   self._intern_poly_existential_predicates(eps)
      .               }
      .           
      .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
      .                   // FIXME consider asking the input slice to be sorted to avoid
      .                   // re-interning permutations, in which case that would be asserted
      .                   // here.
    646 ( 0.00%)          if preds.is_empty() {
      .                       // The macro-generated method below asserts we don't intern an empty slice.
      .                       List::empty()
      .                   } else {
    186 ( 0.00%)              self._intern_predicates(preds)
      .                   }
    920 ( 0.00%)      }
      .           
      .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
    893 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
     42 ( 0.00%)      }
      .           
      .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  8,949 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
    860 ( 0.00%)      }
      .           
      .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
      .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
      .               }
      .           
      .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
    584 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    728 ( 0.00%)      }
      .           
      .               pub fn intern_canonical_var_infos(
      .                   self,
      .                   ts: &[CanonicalVarInfo<'tcx>],
      .               ) -> CanonicalVarInfos<'tcx> {
    391 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    282 ( 0.00%)      }
      .           
      .               pub fn intern_bound_variable_kinds(
      .                   self,
      .                   ts: &[ty::BoundVariableKind],
      .               ) -> &'tcx List<ty::BoundVariableKind> {
    982 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
  1,768 ( 0.00%)      }
      .           
      .               pub fn mk_fn_sig<I>(
      .                   self,
      .                   inputs: I,
      .                   output: I::Item,
      .                   c_variadic: bool,
      .                   unsafety: hir::Unsafety,
      .                   abi: abi::Abi,
      .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
      .               where
      .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
      .               {
      .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    460 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     66 ( 0.00%)              c_variadic,
    129 ( 0.00%)              unsafety,
      6 ( 0.00%)              abi,
      .                   })
      .               }
      .           
      .               pub fn mk_poly_existential_predicates<
      .                   I: InternAs<
      .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
      .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
      .                   >,
-- line 2590 ----------------------------------------
-- line 2594 ----------------------------------------
      .               ) -> I::Output {
      .                   iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
      .               }
      .           
      .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
      2 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
      .               }
      .           
      .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
    674 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
      .               }
      .           
      9 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
 20,836 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
     12 ( 0.00%)      }
      .           
      .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  4,627 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
      .               }
      .           
  1,050 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
      .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  2,100 ( 0.00%)      }
      .           
      .               pub fn mk_bound_variable_kinds<
      .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
      .               >(
      .                   self,
      .                   iter: I,
      .               ) -> I::Output {
  5,968 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
      .               }
      .           
      .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
      .               /// It stops at `bound` and just returns it if reached.
413,882 ( 0.04%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
413,882 ( 0.04%)          let hir = self.hir();
      .                   loop {
443,847 ( 0.05%)              if id == bound {
      .                           return bound;
      .                       }
      .           
444,115 ( 0.05%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
      .                           return id;
      .                       }
      .                       let next = hir.get_parent_node(id);
266,469 ( 0.03%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
591,260 ( 0.06%)      }
      .           
    560 ( 0.00%)      pub fn lint_level_at_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   mut id: hir::HirId,
      .               ) -> (Level, LintLevelSource) {
      .                   let sets = self.lint_levels(());
      .                   loop {
  2,177 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
      .                           return pair;
      .                       }
    133 ( 0.00%)              let next = self.hir().get_parent_node(id);
    399 ( 0.00%)              if next == id {
      .                           bug!("lint traversal reached the root of the crate");
      .                       }
      .                       id = next;
      .                   }
    560 ( 0.00%)      }
      .           
      .               pub fn struct_span_lint_hir(
      .                   self,
      .                   lint: &'static Lint,
      .                   hir_id: HirId,
      .                   span: impl Into<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
    232 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     58 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      .               }
      .           
      .               pub fn struct_lint_node(
      .                   self,
      .                   lint: &'static Lint,
      .                   id: HirId,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
      .                   let (level, src) = self.lint_level_at_node(lint, id);
      .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
      .               }
      .           
    217 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
     62 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
      .                   let candidates = map.get(&id.local_id)?;
     62 ( 0.00%)          Some(&*candidates)
    248 ( 0.00%)      }
      .           
    413 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
      .                   debug!(?id, "named_region");
      .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    531 ( 0.00%)      }
      .           
      .               pub fn is_late_bound(self, id: HirId) -> bool {
      .                   self.is_late_bound_map(id.owner)
      .                       .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      .               }
      .           
    679 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
      .                   self.object_lifetime_defaults_map(id.owner)
    873 ( 0.00%)      }
      .           
    621 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
      .                   self.mk_bound_variable_kinds(
      .                       self.late_bound_vars_map(id.owner)
      .                           .and_then(|map| map.get(&id.local_id).cloned())
      .                           .unwrap_or_else(|| {
      .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
      .                           })
      .                           .iter(),
      .                   )
    621 ( 0.00%)      }
      .           
      .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
      .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
      .               }
      .           
      .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
      .               /// feature gates
     10 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
      1 ( 0.00%)          if self.is_const_fn_raw(def_id) {
      .                       match self.lookup_const_stability(def_id) {
      .                           Some(stability) if stability.level.is_unstable() => {
      .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
      .                               // corresponding feature gate.
      .                               self.features()
      .                                   .declared_lib_features
      .                                   .iter()
      .                                   .any(|&(sym, _)| sym == stability.feature)
-- line 2741 ----------------------------------------
-- line 2743 ----------------------------------------
      .                           // functions without const stability are either stable user written
      .                           // const fn or the user is using feature gates and we thus don't
      .                           // care what they do
      .                           _ => true,
      .                       }
      .                   } else {
      .                       false
      .                   }
      9 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TyCtxtAt<'tcx> {
      .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
      .               #[track_caller]
      .               pub fn ty_error(self) -> Ty<'tcx> {
      .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
      .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
      .           }
      .           
      .           impl<I, T, R, E> InternAs<[T], R> for I
      .           where
      .               E: InternIteratorElement<T, R>,
      .               I: Iterator<Item = E>,
      .           {
      .               type Output = E::Output;
 14,904 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
      .               where
      .                   F: FnOnce(&[T]) -> R,
      .               {
 31,174 ( 0.00%)          E::intern_with(self, f)
 11,817 ( 0.00%)      }
      .           }
      .           
      .           pub trait InternIteratorElement<T, R>: Sized {
      .               type Output;
      .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
      .           }
      .           
      .           impl<T, R> InternIteratorElement<T, R> for T {
      .               type Output = R;
 13,244 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`.
 17,027 ( 0.00%)          match iter.size_hint() {
      .                       (0, Some(0)) => {
      3 ( 0.00%)                  assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap();
      .                           assert!(iter.next().is_none());
  1,478 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap();
      .                           let t1 = iter.next().unwrap();
     63 ( 0.00%)                  assert!(iter.next().is_none());
  2,881 ( 0.00%)                  f(&[t0, t1])
      .                       }
     12 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
      .                   }
  9,155 ( 0.00%)      }
      .           }
      .           
      .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
      .           where
      .               T: Clone + 'a,
      .           {
      .               type Output = R;
    375 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
      .                   // This code isn't hot.
      .                   f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    300 ( 0.00%)      }
      .           }
      .           
      .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
      .               type Output = Result<R, E>;
  2,632 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
      .                   mut iter: I,
      .                   f: F,
      .               ) -> Self::Output {
      .                   // This code is hot enough that it's worth specializing for the most
      .                   // common length lists, to avoid the overhead of `SmallVec` creation.
      .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
      .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
      .                   // `assert`, unless a failure happens first, in which case the result
      .                   // will be an error anyway.
  2,218 ( 0.00%)          Ok(match iter.size_hint() {
      .                       (0, Some(0)) => {
      .                           assert!(iter.next().is_none());
      .                           f(&[])
      .                       }
      .                       (1, Some(1)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
    205 ( 0.00%)                  f(&[t0])
      .                       }
      .                       (2, Some(2)) => {
      .                           let t0 = iter.next().unwrap()?;
      .                           let t1 = iter.next().unwrap()?;
      .                           assert!(iter.next().is_none());
    246 ( 0.00%)                  f(&[t0, t1])
      .                       }
      .                       _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
      .                   })
  2,961 ( 0.00%)      }
      .           }
      .           
      .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
      .           // won't work for us.
      .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
 75,201 ( 0.01%)      t as *const () == u as *const ()
      .           }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      providers.in_scope_traits_map =
      .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
      3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
      2 ( 0.00%)      providers.module_reexports =
      .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
      2 ( 0.00%)      providers.crate_name = |tcx, id| {
      1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
      1 ( 0.00%)          tcx.crate_name
      .               };
      2 ( 0.00%)      providers.maybe_unused_trait_import =
      .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
      2 ( 0.00%)      providers.maybe_unused_extern_crates =
      .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
      2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
      .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
      .               };
      .           
     11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_const_stability =
      .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
      2 ( 0.00%)      providers.lookup_deprecation_entry =
    768 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
      2 ( 0.00%)      providers.extern_mod_stmt_cnum =
      .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
      3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
      3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
      2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
      .               };
      2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
      .               };
      2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
      1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
      .                   // We want to check if the panic handler was defined in this crate
      3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
      .               };
      .           }

542,884 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_operand.rs
--------------------------------------------------------------------------------
Ir               

-- line 15 ----------------------------------------
      .               /// please do *not* return it from functions to avoid bad
      .               /// miscompiles.
      .               crate fn as_local_operand(
      .                   &mut self,
      .                   block: BasicBlock,
      .                   expr: &Expr<'tcx>,
      .               ) -> BlockAnd<Operand<'tcx>> {
      .                   let local_scope = self.local_scope();
    824 ( 0.00%)          self.as_operand(block, Some(local_scope), expr, None)
      .               }
      .           
      .               /// Returns an operand suitable for use until the end of the current scope expression and
      .               /// suitable also to be passed as function arguments.
      .               ///
      .               /// The operand returned from this function will *not be valid* after an ExprKind::Scope is
      .               /// passed, so please do *not* return it from functions to avoid bad miscompiles.  Returns an
      .               /// operand suitable for use as a call argument. This is almost always equivalent to
-- line 31 ----------------------------------------
-- line 72 ----------------------------------------
      .               ///
      .               /// See #68034 for more details.
      .               crate fn as_local_call_operand(
      .                   &mut self,
      .                   block: BasicBlock,
      .                   expr: &Expr<'tcx>,
      .               ) -> BlockAnd<Operand<'tcx>> {
      .                   let local_scope = self.local_scope();
    440 ( 0.00%)          self.as_call_operand(block, Some(local_scope), expr)
      .               }
      .           
      .               /// Compile `expr` into a value that can be used as an operand.
      .               /// If `expr` is a place like `x`, this will introduce a
      .               /// temporary `tmp = x`, so that we capture the value of `x` at
      .               /// this time.
      .               ///
      .               /// If we end up needing to create a temporary, then we will use
-- line 88 ----------------------------------------
-- line 89 ----------------------------------------
      .               /// `local_info` as its `LocalInfo`, unless `as_temporary`
      .               /// has already assigned it a non-`None` `LocalInfo`.
      .               /// Normally, you should use `None` for `local_info`
      .               ///
      .               /// The operand is known to be live until the end of `scope`.
      .               ///
      .               /// Like `as_local_call_operand`, except that the argument will
      .               /// not be valid once `scope` ends.
587,700 ( 0.06%)      crate fn as_operand(
      .                   &mut self,
      .                   mut block: BasicBlock,
      .                   scope: Option<region::Scope>,
      .                   expr: &Expr<'tcx>,
      .                   local_info: Option<Box<LocalInfo<'tcx>>>,
      .               ) -> BlockAnd<Operand<'tcx>> {
      .                   debug!("as_operand(block={:?}, expr={:?} local_info={:?})", block, expr, local_info);
      .                   let this = self;
      .           
381,431 ( 0.04%)          if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {
 58,606 ( 0.01%)              let source_info = this.source_info(expr.span);
      .                       let region_scope = (region_scope, source_info);
      .                       return this.in_scope(region_scope, lint_level, |this| {
380,939 ( 0.04%)                  this.as_operand(block, scope, &this.thir[value], local_info)
      .                       });
      .                   }
      .           
      .                   let category = Category::of(&expr.kind).unwrap();
      .                   debug!("as_operand: category={:?} for={:?}", category, expr.kind);
      .                   match category {
      .                       Category::Constant => {
 87,921 ( 0.01%)                  let constant = this.as_constant(expr);
      .                           block.and(Operand::Constant(Box::new(constant)))
      .                       }
      .                       Category::Place | Category::Rvalue(..) => {
      .                           let operand = unpack!(block = this.as_temp(block, scope, expr, Mutability::Mut));
    320 ( 0.00%)                  if this.local_decls[operand].local_info.is_none() {
    320 ( 0.00%)                      this.local_decls[operand].local_info = local_info;
      .                           }
    160 ( 0.00%)                  block.and(Operand::Move(Place::from(operand)))
      .                       }
      .                   }
529,090 ( 0.06%)      }
      .           
  2,288 ( 0.00%)      crate fn as_call_operand(
      .                   &mut self,
      .                   mut block: BasicBlock,
      .                   scope: Option<region::Scope>,
      .                   expr: &Expr<'tcx>,
      .               ) -> BlockAnd<Operand<'tcx>> {
      .                   debug!("as_call_operand(block={:?}, expr={:?})", block, expr);
      .                   let this = self;
      .           
  1,144 ( 0.00%)          if let ExprKind::Scope { region_scope, lint_level, value } = expr.kind {
    176 ( 0.00%)              let source_info = this.source_info(expr.span);
      .                       let region_scope = (region_scope, source_info);
      .                       return this.in_scope(region_scope, lint_level, |this| {
    968 ( 0.00%)                  this.as_call_operand(block, scope, &this.thir[value])
      .                       });
      .                   }
      .           
     88 ( 0.00%)          let tcx = this.tcx;
      .           
    352 ( 0.00%)          if tcx.features().unsized_fn_params {
      .                       let ty = expr.ty;
      .                       let span = expr.span;
      .                       let param_env = this.param_env;
      .           
      .                       if !ty.is_sized(tcx.at(span), param_env) {
      .                           // !sized means !copy, so this is an unsized move
      .                           assert!(!ty.is_copy_modulo_regions(tcx.at(span), param_env));
      .           
-- line 159 ----------------------------------------
-- line 171 ----------------------------------------
      .                                   projection: tcx.intern_place_elems(&[PlaceElem::Deref]),
      .                               };
      .           
      .                               return block.and(Operand::Move(place));
      .                           }
      .                       }
      .                   }
      .           
    792 ( 0.00%)          this.as_operand(block, scope, expr, None)
  1,408 ( 0.00%)      }
      .           }

352,810 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/expr/as_operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 55 ----------------------------------------
        .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
        .               }
        .           
        .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
        .               }
        .           
        .               pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
       56 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
        .               }
        .           
        .               pub fn new_dyn_trait(
        .                   val: Scalar<Tag>,
        .                   vtable: Pointer<Option<Tag>>,
        .                   cx: &impl HasDataLayout,
        .               ) -> Self {
        .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
  116,948 ( 0.01%)          match self {
  233,768 ( 0.02%)              Immediate::Scalar(val) => val,
        .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
        .                   self.to_scalar_or_uninit().check_init()
        .               }
-- line 85 ----------------------------------------
-- line 159 ----------------------------------------
        .               fn deref(&self) -> &Immediate<Tag> {
        .                   &self.imm
        .               }
        .           }
        .           
        .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
        .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
        .           /// memory and to avoid having to store arbitrary-sized data here.
       94 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
        .           pub enum Operand<Tag: Provenance = AllocId> {
        .               Immediate(Immediate<Tag>),
        .               Indirect(MemPlace<Tag>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
        .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
        .               fn deref(&self) -> &Operand<Tag> {
        .                   &self.op
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
      963 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
        .               }
-- line 201 ----------------------------------------
-- line 248 ----------------------------------------
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
        .               /// Returns `None` if the layout does not permit loading this as a value.
        .               fn try_read_immediate_from_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
   58,643 ( 0.01%)          if mplace.layout.is_unsized() {
        .                       // Don't touch unsized
        .                       return Ok(None);
        .                   }
        .           
  175,929 ( 0.02%)          let alloc = match self.get_alloc(mplace)? {
  293,215 ( 0.03%)              Some(ptr) => ptr,
        .                       None => {
        .                           return Ok(Some(ImmTy {
        .                               // zero-sized type
        .                               imm: Scalar::ZST.into(),
        .                               layout: mplace.layout,
        .                           }));
        .                       }
        .                   };
        .           
  468,970 ( 0.05%)          match mplace.layout.abi {
        .                       Abi::Scalar(..) => {
   58,556 ( 0.01%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
        .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
        .                       }
      261 ( 0.00%)              Abi::ScalarPair(a, b) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
        .                           let (a, b) = (a.value, b.value);
        .                           let (a_size, b_size) = (a.size(self), b.size(self));
        .                           let b_offset = a_size.align_to(b.align(self).abi);
      174 ( 0.00%)                  assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields
        .                           let a_val = alloc.read_scalar(alloc_range(Size::ZERO, a_size))?;
      261 ( 0.00%)                  let b_val = alloc.read_scalar(alloc_range(b_offset, b_size))?;
      435 ( 0.00%)                  Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))
        .                       }
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Try returning an immediate for the operand.
        .               /// If the layout does not permit loading this as an immediate, return where in memory
        .               /// we can find the data.
        .               /// Note that for a given layout, this operation will either always fail or always
        .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
        .               /// in an `Immediate`, not on which data is stored there currently.
  794,457 ( 0.08%)      pub fn try_read_immediate(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
1,588,914 ( 0.17%)          Ok(match src.try_as_mplace() {
        .                       Ok(ref mplace) => {
  117,286 ( 0.01%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
        .                               Ok(val)
        .                           } else {
        .                               Err(*mplace)
        .                           }
        .                       }
  296,300 ( 0.03%)              Err(val) => Ok(val),
        .                   })
  794,457 ( 0.08%)      }
        .           
        .               /// Read an immediate from a place, asserting that that is possible with the given layout.
        .               #[inline(always)]
        .               pub fn read_immediate(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
  176,708 ( 0.02%)          if let Ok(imm) = self.try_read_immediate(op)? {
  469,880 ( 0.05%)              Ok(imm)
        .                   } else {
        .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
        .                   }
        .               }
        .           
        .               /// Read a scalar from a place
  642,862 ( 0.07%)      pub fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
   58,442 ( 0.01%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
  525,978 ( 0.06%)      }
        .           
        .               /// Read a pointer from a place.
        .               pub fn read_pointer(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
        .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
        .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
        .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
        .                   let len = mplace.len(self)?;
        .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
        .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
        .                   Ok(str)
        .               }
        .           
        .               /// Projection functions
       60 ( 0.00%)      pub fn operand_field(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let base = match op.try_as_mplace() {
        .                       Ok(ref mplace) => {
        .                           // We can reuse the mplace field computation logic for indirect operands.
        .                           let field = self.mplace_field(mplace, field)?;
       66 ( 0.00%)                  return Ok(field.into());
        .                       }
        .                       Err(value) => value,
        .                   };
        .           
        .                   let field_layout = op.layout.field(self, field);
        .                   if field_layout.is_zst() {
        .                       let immediate = Scalar::ZST.into();
        .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
-- line 370 ----------------------------------------
-- line 381 ----------------------------------------
        .                       Immediate::Scalar(val) => span_bug!(
        .                           self.cur_span(),
        .                           "field access on non aggregate {:#?}, {:#?}",
        .                           val,
        .                           op.layout
        .                       ),
        .                   };
        .                   Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
       54 ( 0.00%)      }
        .           
        .               pub fn operand_index(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   if let Ok(index) = usize::try_from(index) {
        .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 398 ----------------------------------------
        .                       self.operand_field(op, index)
        .                   } else {
        .                       // Indexing into a big array. This must be an mplace.
        .                       let mplace = op.assert_mem_place();
        .                       Ok(self.mplace_index(&mplace, index)?.into())
        .                   }
        .               }
        .           
       22 ( 0.00%)      pub fn operand_downcast(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Downcasts only change the layout
       34 ( 0.00%)          Ok(match op.try_as_mplace() {
       20 ( 0.00%)              Ok(ref mplace) => self.mplace_downcast(mplace, variant)?.into(),
        .                       Err(..) => {
        .                           let layout = op.layout.for_variant(self, variant);
        .                           OpTy { layout, ..*op }
        .                       }
        .                   })
       18 ( 0.00%)      }
        .           
      112 ( 0.00%)      pub fn operand_projection(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
      448 ( 0.00%)          Ok(match proj_elem {
        .                       Field(field, _) => self.operand_field(base, field.index())?,
        .                       Downcast(_, variant) => self.operand_downcast(base, variant)?,
       28 ( 0.00%)              Deref => self.deref_operand(base)?.into(),
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           // The rest should only occur as mplace, we do not use Immediates for types
        .                           // allowing such operations.  This matches place_projection forcing an allocation.
        .                           let mplace = base.assert_mem_place();
        .                           self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
        .                   })
      112 ( 0.00%)      }
        .           
        .               /// Converts a repr(simd) operand into an operand where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn operand_to_simd(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 446 ----------------------------------------
-- line 449 ----------------------------------------
        .                   self.mplace_to_simd(&base.assert_mem_place())
        .               }
        .           
        .               /// Read from a local. Will not actually access the local if reading from a ZST.
        .               /// Will not access memory, instead an indirect `Operand` is returned.
        .               ///
        .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
        .               /// OpTy from a local
    4,542 ( 0.00%)      pub fn access_local(
        .                   &self,
        .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let layout = self.layout_of_local(frame, local, layout)?;
        .                   let op = if layout.is_zst() {
        .                       // Do not read from ZST, they might not be initialized
        .                       Operand::Immediate(Scalar::ZST.into())
        .                   } else {
      771 ( 0.00%)              M::access_local(&self, frame, local)?
        .                   };
    3,627 ( 0.00%)          Ok(OpTy { op, layout })
    3,609 ( 0.00%)      }
        .           
        .               /// Every place can be read from, so we can turn them into an operand.
        .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
        .               /// will never actually read from memory.
        .               #[inline(always)]
        .               pub fn place_to_op(
        .                   &self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      112 ( 0.00%)          let op = match **place {
        .                       Place::Ptr(mplace) => Operand::Indirect(mplace),
        .                       Place::Local { frame, local } => {
      504 ( 0.00%)                  *self.access_local(&self.stack()[frame], local, None)?
        .                       }
        .                   };
      392 ( 0.00%)          Ok(OpTy { op, layout: place.layout })
        .               }
        .           
        .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
        .               // avoid allocations.
    2,280 ( 0.00%)      pub fn eval_place_to_op(
        .                   &self,
        .                   place: mir::Place<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Do not use the layout passed in as argument if the base we are looking at
        .                   // here is not the entire place.
      285 ( 0.00%)          let layout = if place.projection.is_empty() { layout } else { None };
        .           
      855 ( 0.00%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
        .           
        .                   let op = place
        .                       .projection
        .                       .iter()
      252 ( 0.00%)              .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
        .           
        .                   trace!("eval_place_to_op: got {:?}", *op);
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       op.layout,
        .                   ));
      435 ( 0.00%)          Ok(op)
    2,565 ( 0.00%)      }
        .           
        .               /// Evaluate the operand, returning a place where you can then find the data.
        .               /// If you already know the layout, you can save two table lookups
        .               /// by passing it in here.
        .               #[inline]
  263,675 ( 0.03%)      pub fn eval_operand(
        .                   &self,
        .                   mir_op: &mir::Operand<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::Operand::*;
   59,072 ( 0.01%)          let op = match *mir_op {
        .                       // FIXME: do some more logic on `move` to invalidate the old location
      727 ( 0.00%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
        .           
        .                       Constant(ref constant) => {
        .                           let val =
  440,464 ( 0.05%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
        .                           // This can still fail:
        .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
        .                           //   checked yet.
        .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
        .           
      354 ( 0.00%)                  self.mir_const_to_op(&val, layout)?
        .                       }
        .                   };
        .                   trace!("{:?}: {:?}", mir_op, *op);
  381,925 ( 0.04%)          Ok(op)
  175,787 ( 0.02%)      }
        .           
        .               /// Evaluate a bunch of operands at once
        .               pub(super) fn eval_operands(
        .                   &self,
        .                   ops: &[mir::Operand<'tcx>],
        .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
        .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
        .               }
        .           
        .               // Used when the miri-engine runs into a constant and for extracting information from constants
        .               // in patterns via the `const_eval` module
        .               /// The `val` and `layout` are assumed to already be in our interpreter
        .               /// "universe" (param_env).
  351,096 ( 0.04%)      pub fn const_to_op(
        .                   &self,
        .                   val: &ty::Const<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  147,325 ( 0.02%)          match val.val {
        .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
        .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
        .                       ty::ConstKind::Unevaluated(uv) => {
        .                           let instance = self.resolve(uv.def, uv.substs)?;
        .                           Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
        .                       }
        .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
        .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
        .                       }
  293,822 ( 0.03%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
        .                   }
  263,322 ( 0.03%)      }
        .           
    2,277 ( 0.00%)      pub fn mir_const_to_op(
        .                   &self,
        .                   val: &mir::ConstantKind<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
   58,930 ( 0.01%)          match val {
  117,446 ( 0.01%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
        .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
        .                   }
    1,863 ( 0.00%)      }
        .           
  294,650 ( 0.03%)      crate fn const_val_to_op(
        .                   &self,
        .                   val_val: ConstValue<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Other cases need layout.
        .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
  176,790 ( 0.02%)              Ok(match scalar {
        .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
   88,143 ( 0.01%)                  Scalar::Int(int) => Scalar::Int(int),
        .                       })
        .                   };
   88,068 ( 0.01%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
   88,395 ( 0.01%)          let op = match val_val {
        .                       ConstValue::ByRef { alloc, offset } => {
        .                           let id = self.tcx.create_memory_alloc(alloc);
        .                           // We rely on mutability being set correctly in that allocation to prevent writes
        .                           // where none should happen.
        .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
        .                           Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
        .                       }
  265,392 ( 0.03%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
        .                       ConstValue::Slice { data, start, end } => {
        .                           // We rely on mutability being set correctly in `data` to prevent writes
        .                           // where none should happen.
        .                           let ptr = Pointer::new(
        .                               self.tcx.create_memory_alloc(data),
        .                               Size::from_bytes(start), // offset: `start`
        .                           );
        .                           Operand::Immediate(Immediate::new_slice(
        .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
        .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
        .                               self,
        .                           ))
        .                       }
        .                   };
  618,765 ( 0.07%)          Ok(OpTy { op, layout })
  235,720 ( 0.02%)      }
        .           
        .               /// Read discriminant, return the runtime value as well as the variant index.
        .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
       40 ( 0.00%)      pub fn read_discriminant(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
        .                   trace!("read_discriminant_value {:#?}", op.layout);
        .                   // Get type and layout of the discriminant.
       48 ( 0.00%)          let discr_layout = self.layout_of(op.layout.ty.discriminant_ty(*self.tcx))?;
        .                   trace!("discriminant type: {:?}", discr_layout.ty);
        .           
        .                   // We use "discriminant" to refer to the value associated with a particular enum variant.
        .                   // This is not to be confused with its "variant index", which is just determining its position in the
        .                   // declared list of variants -- they can differ with explicitly assigned discriminants.
        .                   // We use "tag" to refer to how the discriminant is encoded in memory, which can be either
        .                   // straight-forward (`TagEncoding::Direct`) or with a niche (`TagEncoding::Niche`).
       12 ( 0.00%)          let (tag_scalar_layout, tag_encoding, tag_field) = match op.layout.variants {
        .                       Variants::Single { index } => {
        .                           let discr = match op.layout.ty.discriminant_for_variant(*self.tcx, index) {
        .                               Some(discr) => {
        .                                   // This type actually has discriminants.
        .                                   assert_eq!(discr.ty, discr_layout.ty);
        .                                   Scalar::from_uint(discr.val, discr_layout.size)
        .                               }
        .                               None => {
        .                                   // On a type without actual discriminants, variant is 0.
        .                                   assert_eq!(index.as_u32(), 0);
        .                                   Scalar::from_uint(index.as_u32(), discr_layout.size)
        .                               }
        .                           };
        .                           return Ok((discr, index));
        .                       }
        8 ( 0.00%)              Variants::Multiple { tag, ref tag_encoding, tag_field, .. } => {
        .                           (tag, tag_encoding, tag_field)
        .                       }
        .                   };
        .           
        .                   // There are *three* layouts that come into play here:
        .                   // - The discriminant has a type for typechecking. This is `discr_layout`, and is used for
        .                   //   the `Scalar` we return.
        .                   // - The tag (encoded discriminant) has layout `tag_layout`. This is always an integer type,
        .                   //   and used to interpret the value we read from the tag field.
        .                   //   For the return value, a cast to `discr_layout` is performed.
        .                   // - The field storing the tag has a layout, which is very similar to `tag_layout` but
        .                   //   may be a pointer. This is `tag_val.layout`; we just use it for sanity checks.
        .           
        .                   // Get layout for tag.
       24 ( 0.00%)          let tag_layout = self.layout_of(tag_scalar_layout.value.to_int_ty(*self.tcx))?;
        .           
        .                   // Read tag and sanity-check `tag_layout`.
       28 ( 0.00%)          let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;
        8 ( 0.00%)          assert_eq!(tag_layout.size, tag_val.layout.size);
       32 ( 0.00%)          assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());
        .                   let tag_val = tag_val.to_scalar()?;
        .                   trace!("tag value: {:?}", tag_val);
        .           
        .                   // Figure out which discriminant and variant this corresponds to.
       36 ( 0.00%)          Ok(match *tag_encoding {
        .                       TagEncoding::Direct => {
       80 ( 0.00%)                  let tag_bits = tag_val
        .                               .try_to_int()
        .                               .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?
        .                               .assert_bits(tag_layout.size);
        .                           // Cast bits from tag layout to discriminant layout.
       32 ( 0.00%)                  let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);
        8 ( 0.00%)                  let discr_bits = discr_val.assert_bits(discr_layout.size);
        .                           // Convert discriminant to variant index, and catch invalid discriminants.
       20 ( 0.00%)                  let index = match *op.layout.ty.kind() {
        4 ( 0.00%)                      ty::Adt(adt, _) => {
       56 ( 0.00%)                          adt.discriminants(*self.tcx).find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               ty::Generator(def_id, substs, _) => {
        .                                   let substs = substs.as_generator();
        .                                   substs
        .                                       .discriminants(def_id, *self.tcx)
        .                                       .find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               _ => span_bug!(self.cur_span(), "tagged layout for non-adt non-generator"),
        .                           }
        .                           .ok_or_else(|| err_ub!(InvalidTag(Scalar::from_uint(tag_bits, tag_layout.size))))?;
        .                           // Return the cast value, and the index.
       16 ( 0.00%)                  (discr_val, index.0)
        .                       }
        .                       TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {
        .                           // Compute the variant this niche value/"tag" corresponds to. With niche layout,
        .                           // discriminant (encoded in niche/tag) and variant index are the same.
        .                           let variants_start = niche_variants.start().as_u32();
        .                           let variants_end = niche_variants.end().as_u32();
        .                           let variant = match tag_val.try_to_int() {
        .                               Err(dbg_val) => {
-- line 721 ----------------------------------------
-- line 766 ----------------------------------------
        .                               }
        .                           };
        .                           // Compute the size of the scalar we need to return.
        .                           // No need to cast, because the variant index directly serves as discriminant and is
        .                           // encoded in the tag.
        .                           (Scalar::from_uint(variant.as_u32(), discr_layout.size), variant)
        .                       }
        .                   })
       36 ( 0.00%)      }
        .           }

1,617,918 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_data_structures::sync::Lrc;
        .           use rustc_macros::HashStable_Generic;
        .           use rustc_span::symbol::{kw, sym};
        .           use rustc_span::symbol::{Ident, Symbol};
        .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
        .           use std::borrow::Cow;
        .           use std::{fmt, mem};
        .           
    1,108 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CommentKind {
        .               Line,
        .               Block,
        .           }
        .           
       88 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum BinOpToken {
        .               Plus,
        .               Minus,
        .               Star,
        .               Slash,
        .               Percent,
        .               Caret,
        .               And,
        .               Or,
        .               Shl,
        .               Shr,
        .           }
        .           
        .           /// A delimiter token.
   30,387 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
        .           #[derive(HashStable_Generic)]
        .           pub enum DelimToken {
        .               /// A round parenthesis (i.e., `(` or `)`).
        .               Paren,
        .               /// A square bracket (i.e., `[` or `]`).
        .               Bracket,
        .               /// A curly brace (i.e., `{` or `}`).
        .               Brace,
        .               /// An empty delimiter.
        .               NoDelim,
        .           }
        .           
      144 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum LitKind {
        .               Bool, // AST only, must never appear in a `Token`
        .               Byte,
        .               Char,
        .               Integer,
        .               Float,
        .               Str,
        .               StrRaw(u16), // raw string delimited by `n` hash symbols
        .               ByteStr,
        .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
        .               Err,
        .           }
        .           
        .           /// A literal token.
   59,062 ( 0.01%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               pub kind: LitKind,
        .               pub symbol: Symbol,
        .               pub suffix: Option<Symbol>,
        .           }
        .           
        .           impl fmt::Display for Lit {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 78 ----------------------------------------
-- line 130 ----------------------------------------
        .               crate fn may_have_suffix(self) -> bool {
        .                   matches!(self, Integer | Float | Err)
        .               }
        .           }
        .           
        .           impl Lit {
        .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
        .                   Lit { kind, symbol, suffix }
       33 ( 0.00%)      }
        .           }
        .           
        .           pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
        .               let ident_token = Token::new(Ident(name, is_raw), span);
        .           
        .               !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [
-- line 146 ----------------------------------------
-- line 172 ----------------------------------------
        .               let ident_token = Token::new(Ident(name, is_raw), span);
        .           
        .               !ident_token.is_reserved_ident()
        .                   || ident_token.is_path_segment_keyword()
        .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
        .                       .contains(&name)
        .           }
        .           
5,510,076 ( 0.58%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum TokenKind {
        .               /* Expression-operator symbols. */
        .               Eq,
        .               Lt,
        .               Le,
        .               EqEq,
        .               Ne,
        .               Ge,
        .               Gt,
        .               AndAnd,
        .               OrOr,
        .               Not,
        .               Tilde,
    1,509 ( 0.00%)      BinOp(BinOpToken),
        .               BinOpEq(BinOpToken),
        .           
        .               /* Structural symbols */
        .               At,
        .               Dot,
        .               DotDot,
        .               DotDotDot,
        .               DotDotEq,
-- line 202 ----------------------------------------
-- line 208 ----------------------------------------
        .               LArrow,
        .               FatArrow,
        .               Pound,
        .               Dollar,
        .               Question,
        .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
        .               SingleQuote,
        .               /// An opening delimiter (e.g., `{`).
    3,069 ( 0.00%)      OpenDelim(DelimToken),
        .               /// A closing delimiter (e.g., `}`).
  176,238 ( 0.02%)      CloseDelim(DelimToken),
        .           
        .               /* Literals */
   87,999 ( 0.01%)      Literal(Lit),
        .           
        .               /// Identifier token.
        .               /// Do not forget about `NtIdent` when you want to match on identifiers.
        .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated identifiers in the same way.
      870 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
        .               /// Lifetime identifier token.
        .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
        .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
        .               /// treat regular and interpolated lifetime identifiers in the same way.
      171 ( 0.00%)      Lifetime(Symbol),
        .           
        .               Interpolated(Lrc<Nonterminal>),
        .           
        .               /// A doc comment token.
        .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
        .               /// similarly to symbols in string literal tokens.
      270 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
        .           
        .               Eof,
        .           }
        .           
        .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(TokenKind, 16);
        .           
  242,749 ( 0.03%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Token {
      672 ( 0.00%)      pub kind: TokenKind,
        .               pub span: Span,
        .           }
        .           
        .           impl TokenKind {
        .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
        .                   Literal(Lit::new(kind, symbol, suffix))
        .               }
        .           
        .               // An approximation to proc-macro-style single-character operators used by rustc parser.
        .               // If the operator token can be broken into two tokens, the first of which is single-character,
        .               // then this function performs that operation, otherwise it returns `None`.
      251 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    1,004 ( 0.00%)          Some(match *self {
        .                       Le => (Lt, Eq),
        .                       EqEq => (Eq, Eq),
        .                       Ne => (Not, Eq),
        .                       Ge => (Gt, Eq),
        .                       AndAnd => (BinOp(And), BinOp(And)),
        .                       OrOr => (BinOp(Or), BinOp(Or)),
        .                       BinOp(Shl) => (Lt, Lt),
        .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
        .                       BinOpEq(Shl) => (Lt, Le),
        .                       BinOpEq(Shr) => (Gt, Ge),
        .                       DotDot => (Dot, Dot),
        .                       DotDotDot => (Dot, DotDot),
        .                       ModSep => (Colon, Colon),
        .                       RArrow => (BinOp(Minus), Gt),
        .                       LArrow => (Lt, BinOp(Minus)),
        .                       FatArrow => (Eq, Gt),
      251 ( 0.00%)              _ => return None,
        .                   })
      251 ( 0.00%)      }
        .           
        .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
        .               /// Enables better error recovery when the wrong token is found.
        .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
        .                   match *self {
        .                       Comma => Some(vec![Dot, Lt, Semi]),
        .                       Semi => Some(vec![Colon, Comma]),
        .                       FatArrow => Some(vec![Eq, RArrow]),
-- line 298 ----------------------------------------
-- line 301 ----------------------------------------
        .               }
        .           
        .               pub fn should_end_const_arg(&self) -> bool {
        .                   matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        .               }
        .           }
        .           
        .           impl Token {
   60,619 ( 0.01%)      pub fn new(kind: TokenKind, span: Span) -> Self {
  182,088 ( 0.02%)          Token { kind, span }
   60,619 ( 0.01%)      }
        .           
        .               /// Some token that will be thrown away later.
       77 ( 0.00%)      pub fn dummy() -> Self {
        .                   Token::new(TokenKind::Question, DUMMY_SP)
       77 ( 0.00%)      }
        .           
        .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
        .               pub fn from_ast_ident(ident: Ident) -> Self {
        .                   Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
        .               }
        .           
        .               /// Return this token by value and leave a dummy token in its place.
   59,818 ( 0.01%)      pub fn take(&mut self) -> Self {
        .                   mem::replace(self, Token::dummy())
   59,818 ( 0.01%)      }
        .           
        .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
        .               /// token refers. For all other tokens this is just a regular span.
        .               /// It is particularly important to use this for identifiers and lifetimes
        .               /// for which spans affect name resolution and edition checks.
        .               /// Note that keywords are also identifiers, so they should use this
        .               /// if they keep spans or perform edition checks.
        .               pub fn uninterpolated_span(&self) -> Span {
       84 ( 0.00%)          match &self.kind {
        .                       Interpolated(nt) => nt.span(),
       42 ( 0.00%)              _ => self.span,
        .                   }
       42 ( 0.00%)      }
        .           
        .               pub fn is_op(&self) -> bool {
  179,454 ( 0.02%)          !matches!(
   59,818 ( 0.01%)              self.kind,
        .                       OpenDelim(..)
        .                           | CloseDelim(..)
        .                           | Literal(..)
        .                           | DocComment(..)
        .                           | Ident(..)
        .                           | Lifetime(..)
        .                           | Interpolated(..)
        .                           | Eof
        .                   )
   59,818 ( 0.01%)      }
        .           
        .               pub fn is_like_plus(&self) -> bool {
    1,105 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
      221 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token can appear at the start of an expression.
        .               pub fn can_begin_expr(&self) -> bool {
        .                   match self.uninterpolate().kind {
        .                       Ident(name, is_raw)              =>
        .                           ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
        .                       OpenDelim(..)                     | // tuple, array or block
        .                       Literal(..)                       | // literal
-- line 365 ----------------------------------------
-- line 427 ----------------------------------------
        .               }
        .           
        .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
        .               /// for example a '-42', or one of the boolean idents).
        .               ///
        .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
        .               ///
        .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
       11 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
       55 ( 0.00%)          match self.uninterpolate().kind {
        .                       Literal(..) | BinOp(Minus) => true,
        .                       Ident(name, false) if name.is_bool_lit() => true,
        .                       Interpolated(ref nt) => match &**nt {
        .                           NtLiteral(_) => true,
        .                           NtExpr(e) => match &e.kind {
        .                               ast::ExprKind::Lit(_) => true,
        .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
        .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
        .                               }
        .                               _ => false,
        .                           },
        .                           _ => false,
        .                       },
        .                       _ => false,
        .                   }
       22 ( 0.00%)      }
        .           
        .               // A convenience function for matching on identifiers during parsing.
        .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
        .               // into the regular identifier or lifetime token it refers to,
        .               // otherwise returns the original token.
   29,473 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
  308,234 ( 0.03%)          match &self.kind {
        .                       Interpolated(nt) => match **nt {
        .                           NtIdent(ident, is_raw) => {
        .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
        .                           }
        .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
        .                           _ => Cow::Borrowed(self),
        .                       },
        .                       _ => Cow::Borrowed(self),
        .                   }
   29,473 ( 0.00%)      }
        .           
        .               /// Returns an identifier if this token is an identifier.
   88,907 ( 0.01%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
        .                   let token = self.uninterpolate();
  186,527 ( 0.02%)          match token.kind {
   52,041 ( 0.01%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
        .                       _ => None,
        .                   }
  535,592 ( 0.06%)      }
        .           
        .               /// Returns a lifetime identifier if this token is a lifetime.
       50 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
        .                   let token = self.uninterpolate();
      278 ( 0.00%)          match token.kind {
      406 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
        .                       _ => None,
        .                   }
      350 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier.
        .               pub fn is_ident(&self) -> bool {
        .                   self.ident().is_some()
       97 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a lifetime.
       89 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
        .                   self.lifetime().is_some()
      178 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an identifier whose name is the given
        .               /// string slice.
       96 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
        .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
      192 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is an interpolated path.
        .               fn is_path(&self) -> bool {
    1,112 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
        .                       if let NtPath(..) = **nt {
        .                           return true;
        .                       }
        .                   }
        .                   false
        .               }
        .           
        .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 535 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// Returns `true` if the token is either the `mut` or `const` keyword.
        .               pub fn is_mutability(&self) -> bool {
        .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
        .               }
        .           
       92 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
      648 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
        .               }
        .           
    1,112 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    1,596 ( 0.00%)          self == &ModSep
        .                       || self.is_qpath_start()
        .                       || self.is_path()
        .                       || self.is_path_segment_keyword()
      219 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    1,390 ( 0.00%)      }
        .           
        .               /// Returns `true` if the token is a given keyword, `kw`.
    3,568 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
        .                   self.is_non_raw_ident_where(|id| id.name == kw)
    7,136 ( 0.00%)      }
        .           
        2 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
        .               }
        .           
        .               // Returns true for reserved identifiers used internally for elided lifetimes,
        .               // unnamed method parameters, crate root module, error recovery etc.
        1 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_special)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword used in the language.
        1 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is a keyword reserved for possible future use.
        1 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
        .               }
        .           
        .               /// Returns `true` if the token is either a special identifier or a keyword.
        .               pub fn is_reserved_ident(&self) -> bool {
        .                   self.is_non_raw_ident_where(Ident::is_reserved)
        .               }
        .           
        .               /// Returns `true` if the token is the identifier `true` or `false`.
        2 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
        4 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
        .               }
        .           
        .               pub fn is_numeric_lit(&self) -> bool {
        .                   matches!(
        .                       self.kind,
        .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
        .                   )
        .               }
        .           
        .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        .               pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
  433,163 ( 0.05%)          match self.ident() {
      183 ( 0.00%)              Some((id, false)) => pred(id),
        .                       _ => false,
        .                   }
        .               }
        .           
  294,970 ( 0.03%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
  147,485 ( 0.02%)          let kind = match self.kind {
       65 ( 0.00%)              Eq => match joint.kind {
        .                           Eq => EqEq,
        .                           Gt => FatArrow,
        .                           _ => return None,
        .                       },
        .                       Lt => match joint.kind {
        .                           Eq => Le,
        .                           Lt => BinOp(Shl),
        .                           Le => BinOpEq(Shl),
-- line 615 ----------------------------------------
-- line 621 ----------------------------------------
        .                           Gt => BinOp(Shr),
        .                           Ge => BinOpEq(Shr),
        .                           _ => return None,
        .                       },
        .                       Not => match joint.kind {
        .                           Eq => Ne,
        .                           _ => return None,
        .                       },
      626 ( 0.00%)              BinOp(op) => match joint.kind {
        .                           Eq => BinOpEq(op),
        .                           BinOp(And) if op == And => AndAnd,
       22 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
       64 ( 0.00%)                  Gt if op == Minus => RArrow,
        .                           _ => return None,
        .                       },
       33 ( 0.00%)              Dot => match joint.kind {
        .                           Dot => DotDot,
        .                           DotDot => DotDotDot,
        .                           _ => return None,
        .                       },
       55 ( 0.00%)              DotDot => match joint.kind {
        .                           Dot => DotDotDot,
        .                           Eq => DotDotEq,
        .                           _ => return None,
        .                       },
       58 ( 0.00%)              Colon => match joint.kind {
        .                           Colon => ModSep,
        .                           _ => return None,
        .                       },
        .                       SingleQuote => match joint.kind {
        .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
        .                           _ => return None,
        .                       },
        .           
        .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
        .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
        .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
        .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
        .                   };
        .           
    1,950 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
  265,473 ( 0.03%)      }
        .           }
        .           
        .           impl PartialEq<TokenKind> for Token {
        .               fn eq(&self, rhs: &TokenKind) -> bool {
  243,783 ( 0.03%)          self.kind == *rhs
        .               }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable)]
        .           /// For interpolation during macro expansion.
        .           pub enum Nonterminal {
        .               NtItem(P<ast::Item>),
        .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
        .               Path,
        .               Vis,
        .               TT,
        .           }
        .           
        .           impl NonterminalKind {
        .               /// The `edition` closure is used to get the edition for the given symbol. Doing
        .               /// `span.edition()` is expensive, so we do it lazily.
        4 ( 0.00%)      pub fn from_symbol(
        .                   symbol: Symbol,
        .                   edition: impl FnOnce() -> Edition,
        .               ) -> Option<NonterminalKind> {
       10 ( 0.00%)          Some(match symbol {
        .                       sym::item => NonterminalKind::Item,
        .                       sym::block => NonterminalKind::Block,
        .                       sym::stmt => NonterminalKind::Stmt,
        .                       sym::pat => match edition() {
        .                           Edition::Edition2015 | Edition::Edition2018 => {
        .                               NonterminalKind::PatParam { inferred: true }
        .                           }
        .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
        .                       sym::lifetime => NonterminalKind::Lifetime,
        .                       sym::literal => NonterminalKind::Literal,
        .                       sym::meta => NonterminalKind::Meta,
        .                       sym::path => NonterminalKind::Path,
        .                       sym::vis => NonterminalKind::Vis,
        .                       sym::tt => NonterminalKind::TT,
        .                       _ => return None,
        .                   })
        4 ( 0.00%)      }
        .               fn symbol(self) -> Symbol {
        .                   match self {
        .                       NonterminalKind::Item => sym::item,
        .                       NonterminalKind::Block => sym::block,
        .                       NonterminalKind::Stmt => sym::stmt,
        .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
        .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
        .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

1,665,909 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
   77,824 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      125 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,048 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
       22 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,664 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
    2,364 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
       35 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
       78 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
      194 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
      117 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,553 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,349 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
       18 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
      452 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
      678 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
      678 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
      565 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
       12 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
        9 ( 0.00%)          match self.inner {
        3 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
       12 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    1,212 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
       81 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
      162 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        5 ( 0.00%)      pub lo: BytePos,
        5 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       12 ( 0.00%)      pub ctxt: SyntaxContext,
        4 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  217,480 ( 0.02%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
        .                   self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
-- line 501 ----------------------------------------
-- line 502 ----------------------------------------
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
    5,112 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
    3,834 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
    5,112 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
        .           ///
        .           /// Spans have two orthogonal attributes:
        .           ///
        .           /// - They can be *primary spans*. In this case they are the locus of
        .           ///   the error, and would be rendered with `^^^`.
        .           /// - They can have a *label*. In this case, the label is written next
        .           ///   to the mark in the snippet when we render.
      424 ( 0.00%)  #[derive(Clone, Debug, Hash, PartialEq, Eq, Encodable, Decodable)]
        .           pub struct MultiSpan {
        .               primary_spans: Vec<Span>,
      116 ( 0.00%)      span_labels: Vec<(Span, String)>,
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
    1,980 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
    1,320 ( 0.00%)      }
        .               #[inline]
       20 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
       20 ( 0.00%)      }
        .               #[inline]
      432 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
      288 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
       30 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
       18 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
        .               pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
        .               }
-- line 566 ----------------------------------------
-- line 671 ----------------------------------------
        .               pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
        .                   while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
        .               }
        .           
        .               /// Edition of the crate from which this span came.
      741 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
      494 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
      159 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
       86 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
       93 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
        5 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
        1 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
        4 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
      392 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
      336 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
      280 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
        .               pub fn desugaring_kind(self) -> Option<DesugaringKind> {
        .                   match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
-- line 736 ----------------------------------------
-- line 738 ----------------------------------------
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
       44 ( 0.00%)      pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
       88 ( 0.00%)                  let expn_data = self.ctxt().outer_expn_data();
       55 ( 0.00%)                  if expn_data.is_root() {
       11 ( 0.00%)                      return None;
        .                           }
        .           
        .                           let is_recursive = expn_data.call_site.source_equal(prev_span);
        .           
        .                           prev_span = self;
        .                           self = expn_data.call_site;
        .           
        .                           // Don't print recursive invocations.
        .                           if !is_recursive {
        .                               return Some(expn_data);
        .                           }
        .                       }
        .                   })
       88 ( 0.00%)      }
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  339,878 ( 0.04%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   61,792 ( 0.01%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  216,286 ( 0.02%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  278,082 ( 0.03%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
       11 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
        7 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
        8 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
       22 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
        4 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
       14 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
       18 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        2 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
       24 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
       14 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    1,107 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      738 ( 0.00%)          let mut span = self.data();
      559 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
    1,107 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
    1,174 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
    2,248 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
    1,967 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1044 ----------------------------------------
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   (*SPAN_DEBUG)(Span::new(self.lo, self.hi, self.ctxt, self.parent), f)
        .               }
        .           }
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
       46 ( 0.00%)          MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      205 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
        .                   MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
       66 ( 0.00%)      pub fn push_span_label(&mut self, span: Span, label: String) {
       22 ( 0.00%)          self.span_labels.push((span, label));
       55 ( 0.00%)      }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       47 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
      151 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
      210 ( 0.00%)      pub fn has_primary_spans(&self) -> bool {
       33 ( 0.00%)          self.primary_spans.iter().any(|sp| !sp.is_dummy())
      245 ( 0.00%)      }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
        .                   let mut is_dummy = true;
        .                   for span in &self.primary_spans {
        .                       if !span.is_dummy() {
        .                           is_dummy = false;
        .                       }
-- line 1089 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   replacements_occurred
        .               }
        .           
        .               /// Returns the strings to highlight. We always ensure that there
        .               /// is an entry for each of the primary spans -- for each primary
        .               /// span `P`, if there is at least one label with span `P`, we return
        .               /// those labels (marked as primary). But otherwise we return
        .               /// `SpanLabel` instances with empty labels.
      980 ( 0.00%)      pub fn span_labels(&self) -> Vec<SpanLabel> {
      173 ( 0.00%)          let is_primary = |span| self.primary_spans.contains(&span);
        .           
        .                   let mut span_labels = self
        .                       .span_labels
        .                       .iter()
       99 ( 0.00%)              .map(|&(span, ref label)| SpanLabel {
        .                           span,
        .                           is_primary: is_primary(span),
       66 ( 0.00%)                  label: Some(label.clone()),
        .                       })
        .                       .collect::<Vec<_>>();
        .           
       44 ( 0.00%)          for &span in &self.primary_spans {
        .                       if !span_labels.iter().any(|sl| sl.span == span) {
        .                           span_labels.push(SpanLabel { span, is_primary: true, label: None });
        .                       }
        .                   }
        .           
        .                   span_labels
      980 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the span labels is displayable.
      144 ( 0.00%)      pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
      168 ( 0.00%)      }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      205 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      205 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
        .               fn from(spans: Vec<Span>) -> MultiSpan {
        .                   MultiSpan::from_spans(spans)
        .               }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
       33 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      328 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
        .           
        .           impl NonNarrowChar {
        .               fn new(pos: BytePos, width: usize) -> Self {
        6 ( 0.00%)          match width {
        .                       0 => NonNarrowChar::ZeroWidth(pos),
        .                       2 => NonNarrowChar::Wide(pos),
        .                       4 => NonNarrowChar::Tab(pos),
        .                       _ => panic!("width {} given for non-narrow character", width),
        .                   }
        .               }
        .           
        .               /// Returns the absolute offset of the character in the `SourceMap`.
-- line 1188 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,062 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,124 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        6 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
        9 ( 0.00%)          let len = self.hash_len();
        9 ( 0.00%)          &self.value[..len]
        9 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
       24 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        4 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,779 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      531 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  867,212 ( 0.09%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,062 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,841 ( 0.00%)              SourceFile {
    4,248 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,124 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,124 ( 0.00%)                  lines,
    2,124 ( 0.00%)                  multibyte_chars,
    2,124 ( 0.00%)                  non_narrow_chars,
    2,124 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,779 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       22 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        6 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        4 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        4 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        6 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       24 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        4 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       34 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       22 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        8 ( 0.00%)              lines,
        8 ( 0.00%)              multibyte_chars,
        8 ( 0.00%)              non_narrow_chars,
        8 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
      844 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
      422 ( 0.00%)          self.lines[line_index]
      844 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      637 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
       91 ( 0.00%)          if matches!(
      182 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
       91 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      819 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
      385 ( 0.00%)      pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
      385 ( 0.00%)          fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
        .                       let slice = &src[begin..];
        .                       match slice.find('\n') {
        .                           Some(e) => &slice[..e],
        .                           None => slice,
        .                       }
      440 ( 0.00%)          }
        .           
        .                   let begin = {
       55 ( 0.00%)              let line = self.lines.get(line_number)?;
       55 ( 0.00%)              let begin: BytePos = *line - self.start_pos;
        .                       begin.to_usize()
        .                   };
        .           
      165 ( 0.00%)          if let Some(ref src) = self.src {
      275 ( 0.00%)              Some(Cow::from(get_until_newline(src, begin)))
        .                   } else if let Some(src) = self.external_src.borrow().get_source() {
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
      440 ( 0.00%)      }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
      606 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   32,026 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
    5,415 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   12,551 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    8,507 ( 0.00%)          assert!(line_index < self.lines.len());
   12,531 ( 0.00%)          if line_index == (self.lines.len() - 1) {
        3 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    8,352 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1678 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
        .                   self.start_pos == self.end_pos
        .               }
        .           
        .               /// Calculates the original byte position relative to the start of the file
        .               /// based on the given byte position.
       44 ( 0.00%)      pub fn original_relative_byte_pos(&self, pos: BytePos) -> BytePos {
        .                   // Diff before any records is 0. Otherwise use the previously recorded
        .                   // diff as that applies to the following characters until a new diff
        .                   // is recorded.
        .                   let diff = match self.normalized_pos.binary_search_by(|np| np.pos.cmp(&pos)) {
        .                       Ok(i) => self.normalized_pos[i].diff,
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
      176 ( 0.00%)          BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
      132 ( 0.00%)      }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      294 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
      882 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
      588 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
        .                           total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
        .                           assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    1,764 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    1,470 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
      588 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    1,029 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      294 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      146 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      147 ( 0.00%)                  let linebpos = self.lines[a];
      294 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      147 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    1,176 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    1,176 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
      441 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      294 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      147 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
      432 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
      735 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    1,029 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       20 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       18 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   65,431 ( 0.01%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
    4,005 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  214,737 ( 0.02%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
1,783,456 ( 0.19%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,926,779 ( 0.20%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1939 ----------------------------------------
        .               /// Because of multibyte UTF-8 characters, a byte offset
        .               /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]
        .               /// values to `CharPos` values as necessary.
        .               #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
        .               pub struct CharPos(pub usize);
        .           }
        .           
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
       10 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
       12 ( 0.00%)      }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
   21,766 ( 0.00%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
       44 ( 0.00%)  #[derive(Debug, Clone)]
        .           pub struct Loc {
        .               /// Information about the original source.
        .               pub file: Lrc<SourceFile>,
        .               /// The (1-based) line number.
       11 ( 0.00%)      pub line: usize,
        .               /// The (0-based) column offset.
        .               pub col: CharPos,
        .               /// The (0-based) column offset when displayed.
       11 ( 0.00%)      pub col_display: usize,
        .           }
        .           
        .           // Used to be structural records.
        .           #[derive(Debug)]
        .           pub struct SourceFileAndLine {
        .               pub sf: Lrc<SourceFile>,
        .               /// Index of line, starting from 0.
        .               pub line: usize,
-- line 1980 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  430,794 ( 0.05%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   62,738 ( 0.01%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  368,056 ( 0.04%)          let span = self.data_untracked();
  181,050 ( 0.02%)          span.ctxt.hash_stable(ctx, hasher);
  184,626 ( 0.02%)          span.parent.hash_stable(ctx, hasher);
        .           
  123,232 ( 0.01%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  122,788 ( 0.01%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  245,576 ( 0.03%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  122,788 ( 0.01%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   61,394 ( 0.01%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   61,394 ( 0.01%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  492,336 ( 0.05%)      }
        .           }

2,097,418 ( 0.22%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs
--------------------------------------------------------------------------------
Ir                  

-- line 17 ----------------------------------------
         .           pub struct BitMask(pub BitMaskWord);
         .           
         .           #[allow(clippy::use_self)]
         .           impl BitMask {
         .               /// Returns a new `BitMask` with all bits inverted.
         .               #[inline]
         .               #[must_use]
         .               pub fn invert(self) -> Self {
    98,378 ( 0.01%)          BitMask(self.0 ^ BITMASK_MASK)
         .               }
         .           
         .               /// Flip the bit in the mask for the entry at the given index.
         .               ///
         .               /// Returns the bit's previous state.
         .               #[inline]
         .               #[allow(clippy::cast_ptr_alignment)]
         .               #[cfg(feature = "raw")]
-- line 33 ----------------------------------------
-- line 38 ----------------------------------------
         .                   // The bit was set if the bit is now 0.
         .                   self.0 & mask == 0
         .               }
         .           
         .               /// Returns a new `BitMask` with the lowest bit removed.
         .               #[inline]
         .               #[must_use]
         .               pub fn remove_lowest_bit(self) -> Self {
    63,508 ( 0.01%)          BitMask(self.0 & (self.0 - 1))
         .               }
         .               /// Returns whether the `BitMask` has at least one set bit.
         .               #[inline]
         .               pub fn any_bit_set(self) -> bool {
 1,884,150 ( 0.20%)          self.0 != 0
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one.
         .               #[inline]
         .               pub fn lowest_set_bit(self) -> Option<usize> {
10,157,227 ( 1.07%)          if self.0 == 0 {
         .                       None
         .                   } else {
         .                       Some(unsafe { self.lowest_set_bit_nonzero() })
         .                   }
         .               }
         .           
         .               /// Returns the first set bit in the `BitMask`, if there is one. The
         .               /// bitmask must not be empty.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
     2,507 ( 0.00%)          intrinsics::cttz_nonzero(self.0) as usize / BITMASK_STRIDE
         .               }
         .               #[inline]
         .               #[cfg(not(feature = "nightly"))]
         .               pub unsafe fn lowest_set_bit_nonzero(self) -> usize {
         .                   self.trailing_zeros()
         .               }
         .           
         .               /// Returns the number of trailing zeroes in the `BitMask`.
-- line 77 ----------------------------------------
-- line 110 ----------------------------------------
         .           /// bits.
         .           pub struct BitMaskIter(BitMask);
         .           
         .           impl Iterator for BitMaskIter {
         .               type Item = usize;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<usize> {
 1,134,222 ( 0.12%)          let bit = self.0.lowest_set_bit()?;
         .                   self.0 = self.0.remove_lowest_bit();
         .                   Some(bit)
         .               }
         .           }

    60,381 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/bitmask.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/flags.rs
--------------------------------------------------------------------------------
Ir               

-- line 11 ----------------------------------------
      .           }
      .           
      .           impl FlagComputation {
      .               fn new() -> FlagComputation {
      .                   FlagComputation { flags: TypeFlags::empty(), outer_exclusive_binder: ty::INNERMOST }
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
  9,828 ( 0.00%)      pub fn for_kind(kind: &ty::TyKind<'_>) -> FlagComputation {
  1,404 ( 0.00%)          let mut result = FlagComputation::new();
      .                   result.add_kind(kind);
      .                   result
 14,040 ( 0.00%)      }
      .           
  2,010 ( 0.00%)      pub fn for_predicate<'tcx>(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {
      .                   let mut result = FlagComputation::new();
      .                   result.add_predicate(binder);
      .                   result
  2,814 ( 0.00%)      }
      .           
118,364 ( 0.01%)      pub fn for_const(c: &ty::Const<'_>) -> TypeFlags {
148,019 ( 0.02%)          let mut result = FlagComputation::new();
147,103 ( 0.02%)          result.add_const(c);
 59,382 ( 0.01%)          result.flags
118,364 ( 0.01%)      }
      .           
     99 ( 0.00%)      pub fn for_unevaluated_const(uv: ty::Unevaluated<'_>) -> TypeFlags {
     99 ( 0.00%)          let mut result = FlagComputation::new();
     99 ( 0.00%)          result.add_unevaluated_const(uv);
      .                   result.flags
    198 ( 0.00%)      }
      .           
      .               fn add_flags(&mut self, flags: TypeFlags) {
179,860 ( 0.02%)          self.flags = self.flags | flags;
      .               }
      .           
      .               /// indicates that `self` refers to something at binding level `binder`
      .               fn add_bound_var(&mut self, binder: ty::DebruijnIndex) {
     94 ( 0.00%)          let exclusive_binder = binder.shifted_in(1);
      .                   self.add_exclusive_binder(exclusive_binder);
      .               }
      .           
      .               /// indicates that `self` refers to something *inside* binding
      .               /// level `binder` -- not bound by `binder`, but bound by the next
      .               /// binder internal to it
      .               fn add_exclusive_binder(&mut self, exclusive_binder: ty::DebruijnIndex) {
181,586 ( 0.02%)          self.outer_exclusive_binder = self.outer_exclusive_binder.max(exclusive_binder);
      .               }
      .           
      .               /// Adds the flags/depth from a set of types that appear within the current type, but within a
      .               /// region binder.
      .               fn bound_computation<T, F>(&mut self, value: ty::Binder<'_, T>, f: F)
      .               where
      .                   F: FnOnce(&mut Self, T),
      .               {
    402 ( 0.00%)          let mut computation = FlagComputation::new();
      .           
    402 ( 0.00%)          if !value.bound_vars().is_empty() {
      .                       computation.flags = computation.flags | TypeFlags::HAS_RE_LATE_BOUND;
      .                   }
      .           
      .                   f(&mut computation, value.skip_binder());
      .           
    401 ( 0.00%)          self.add_flags(computation.flags);
      .           
      .                   // The types that contributed to `computation` occurred within
      .                   // a region binder, so subtract one from the region depth
      .                   // within when adding the depth to `self`.
    401 ( 0.00%)          let outer_exclusive_binder = computation.outer_exclusive_binder;
    402 ( 0.00%)          if outer_exclusive_binder > ty::INNERMOST {
    120 ( 0.00%)              self.add_exclusive_binder(outer_exclusive_binder.shifted_out(1));
      .                   } // otherwise, this binder captures nothing
      .               }
      .           
      .               #[allow(rustc::usage_of_ty_tykind)]
      .               fn add_kind(&mut self, kind: &ty::TyKind<'_>) {
  7,020 ( 0.00%)          match kind {
      .                       &ty::Bool
      .                       | &ty::Char
      .                       | &ty::Int(_)
      .                       | &ty::Float(_)
      .                       | &ty::Uint(_)
      .                       | &ty::Never
      .                       | &ty::Str
      .                       | &ty::Foreign(..) => {}
-- line 95 ----------------------------------------
-- line 116 ----------------------------------------
      .                           self.add_ty(substs.yield_ty());
      .                           self.add_ty(substs.tupled_upvars_ty());
      .                       }
      .           
      .                       &ty::GeneratorWitness(ts) => {
      .                           self.bound_computation(ts, |flags, ts| flags.add_tys(ts));
      .                       }
      .           
      2 ( 0.00%)              &ty::Closure(_, substs) => {
      .                           let substs = substs.as_closure();
      .                           let should_remove_further_specializable =
      .                               !self.flags.contains(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
      2 ( 0.00%)                  self.add_substs(substs.parent_substs());
      .                           if should_remove_further_specializable {
      .                               self.flags -= TypeFlags::STILL_FURTHER_SPECIALIZABLE;
      .                           }
      .           
      2 ( 0.00%)                  self.add_ty(substs.sig_as_fn_ptr_ty());
      2 ( 0.00%)                  self.add_ty(substs.kind_ty());
      2 ( 0.00%)                  self.add_ty(substs.tupled_upvars_ty());
      .                       }
      .           
      .                       &ty::Bound(debruijn, _) => {
      .                           self.add_bound_var(debruijn);
      .                       }
      .           
      .                       &ty::Placeholder(..) => {
      .                           self.add_flags(TypeFlags::HAS_TY_PLACEHOLDER);
      .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
      .                       }
      .           
      .                       &ty::Infer(infer) => {
      .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
     14 ( 0.00%)                  match infer {
      .                               ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {
      .                                   self.add_flags(TypeFlags::HAS_TY_FRESH)
      .                               }
      .           
      .                               ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => {
      .                                   self.add_flags(TypeFlags::HAS_TY_INFER)
      .                               }
      .                           }
      .                       }
      .           
      .                       &ty::Adt(_, substs) => {
      .                           self.add_substs(substs);
      .                       }
      .           
      8 ( 0.00%)              &ty::Projection(data) => {
      .                           self.add_flags(TypeFlags::HAS_TY_PROJECTION);
      .                           self.add_projection_ty(data);
      .                       }
      .           
      .                       &ty::Opaque(_, substs) => {
      .                           self.add_flags(TypeFlags::HAS_TY_OPAQUE);
      .                           self.add_substs(substs);
      .                       }
-- line 172 ----------------------------------------
-- line 180 ----------------------------------------
      .                                   }
      .                                   ty::ExistentialPredicate::AutoTrait(_) => {}
      .                               });
      .                           }
      .           
      .                           self.add_region(r);
      .                       }
      .           
     68 ( 0.00%)              &ty::Array(tt, len) => {
     34 ( 0.00%)                  self.add_ty(tt);
     68 ( 0.00%)                  self.add_const(len);
      .                       }
      .           
      .                       &ty::Slice(tt) => self.add_ty(tt),
      .           
      .                       &ty::RawPtr(ref m) => {
      .                           self.add_ty(m.ty);
      .                       }
      .           
    968 ( 0.00%)              &ty::Ref(r, ty, _) => {
      .                           self.add_region(r);
    484 ( 0.00%)                  self.add_ty(ty);
      .                       }
      .           
      .                       &ty::Tuple(ref substs) => {
     38 ( 0.00%)                  self.add_substs(substs);
      .                       }
      .           
      .                       &ty::FnDef(_, substs) => {
      .                           self.add_substs(substs);
      .                       }
      .           
    166 ( 0.00%)              &ty::FnPtr(fn_sig) => self.bound_computation(fn_sig, |computation, fn_sig| {
      .                           computation.add_tys(fn_sig.inputs());
     83 ( 0.00%)                  computation.add_ty(fn_sig.output());
      .                       }),
      .                   }
      .               }
      .           
      .               fn add_predicate(&mut self, binder: ty::Binder<'_, ty::PredicateKind<'_>>) {
  2,412 ( 0.00%)          self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));
      .               }
      .           
      .               fn add_predicate_atom(&mut self, atom: ty::PredicateKind<'_>) {
  2,010 ( 0.00%)          match atom {
      .                       ty::PredicateKind::Trait(trait_pred) => {
    734 ( 0.00%)                  self.add_substs(trait_pred.trait_ref.substs);
      .                       }
      .                       ty::PredicateKind::RegionOutlives(ty::OutlivesPredicate(a, b)) => {
      .                           self.add_region(a);
      .                           self.add_region(b);
      .                       }
      .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, region)) => {
      7 ( 0.00%)                  self.add_ty(ty);
      .                           self.add_region(region);
      .                       }
      .                       ty::PredicateKind::Subtype(ty::SubtypePredicate { a_is_expected: _, a, b }) => {
      .                           self.add_ty(a);
      .                           self.add_ty(b);
      .                       }
      .                       ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {
      .                           self.add_ty(a);
      .                           self.add_ty(b);
      .                       }
      .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
      .                           self.add_projection_ty(projection_ty);
      2 ( 0.00%)                  match term {
      1 ( 0.00%)                      Term::Ty(ty) => self.add_ty(ty),
      .                               Term::Const(c) => self.add_const(c),
      .                           }
      .                       }
     66 ( 0.00%)              ty::PredicateKind::WellFormed(arg) => {
     66 ( 0.00%)                  self.add_substs(slice::from_ref(&arg));
      .                       }
      .                       ty::PredicateKind::ObjectSafe(_def_id) => {}
      .                       ty::PredicateKind::ClosureKind(_def_id, substs, _kind) => {
      3 ( 0.00%)                  self.add_substs(substs);
      .                       }
      .                       ty::PredicateKind::ConstEvaluatable(uv) => {
      .                           self.add_unevaluated_const(uv);
      .                       }
      .                       ty::PredicateKind::ConstEquate(expected, found) => {
      .                           self.add_const(expected);
      .                           self.add_const(found);
      .                       }
-- line 264 ----------------------------------------
-- line 269 ----------------------------------------
      .               }
      .           
      .               fn add_ty(&mut self, ty: Ty<'_>) {
      .                   self.add_flags(ty.flags());
      .                   self.add_exclusive_binder(ty.outer_exclusive_binder);
      .               }
      .           
      .               fn add_tys(&mut self, tys: &[Ty<'_>]) {
    477 ( 0.00%)          for &ty in tys {
    477 ( 0.00%)              self.add_ty(ty);
      .                   }
      .               }
      .           
      .               fn add_region(&mut self, r: ty::Region<'_>) {
      .                   self.add_flags(r.type_flags());
    676 ( 0.00%)          if let ty::ReLateBound(debruijn, _) = *r {
      .                       self.add_bound_var(debruijn);
      .                   }
      .               }
      .           
354,612 ( 0.04%)      fn add_const(&mut self, c: &ty::Const<'_>) {
177,306 ( 0.02%)          self.add_ty(c.ty);
443,265 ( 0.05%)          match c.val {
    104 ( 0.00%)              ty::ConstKind::Unevaluated(unevaluated) => self.add_unevaluated_const(unevaluated),
      .                       ty::ConstKind::Infer(infer) => {
      .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
      .                           match infer {
      .                               InferConst::Fresh(_) => self.add_flags(TypeFlags::HAS_CT_FRESH),
      .                               InferConst::Var(_) => self.add_flags(TypeFlags::HAS_CT_INFER),
      .                           }
      .                       }
      .                       ty::ConstKind::Bound(debruijn, _) => {
-- line 300 ----------------------------------------
-- line 306 ----------------------------------------
      .                       }
      .                       ty::ConstKind::Placeholder(_) => {
      .                           self.add_flags(TypeFlags::HAS_CT_PLACEHOLDER);
      .                           self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);
      .                       }
      .                       ty::ConstKind::Value(_) => {}
      .                       ty::ConstKind::Error(_) => self.add_flags(TypeFlags::HAS_ERROR),
      .                   }
354,612 ( 0.04%)      }
      .           
      .               fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {
    406 ( 0.00%)          self.add_substs(ct.substs);
      .                   self.add_flags(TypeFlags::HAS_CT_PROJECTION);
      .               }
      .           
      .               fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {
      .                   self.add_substs(projection.substs);
      .                   match projection.term {
      .                       ty::Term::Ty(ty) => self.add_ty(ty),
      .                       ty::Term::Const(ct) => self.add_const(ct),
      .                   }
      .               }
      .           
      .               fn add_projection_ty(&mut self, projection_ty: ty::ProjectionTy<'_>) {
      1 ( 0.00%)          self.add_substs(projection_ty.substs);
      .               }
      .           
  8,890 ( 0.00%)      fn add_substs(&mut self, substs: &[GenericArg<'_>]) {
      .                   for kind in substs {
  1,229 ( 0.00%)              match kind.unpack() {
  2,166 ( 0.00%)                  GenericArgKind::Type(ty) => self.add_ty(ty),
      .                           GenericArgKind::Lifetime(lt) => self.add_region(lt),
     10 ( 0.00%)                  GenericArgKind::Const(ct) => self.add_const(ct),
      .                       }
      .                   }
 10,160 ( 0.00%)      }
      .           }

  4,931 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/flags.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
   23,190 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  155,522 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  633,140 ( 0.07%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
5,553,540 ( 0.58%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
        2 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
        .                       if unlikely!(b) {None} else {Some(a)}
        .                   }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
  478,670 ( 0.05%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
    2,617 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
      152 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  239,921 ( 0.03%)              intrinsics::saturating_add(self, rhs)
        .                   }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
  410,845 ( 0.04%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
3,802,848 ( 0.40%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
1,187,774 ( 0.12%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
3,515,479 ( 0.37%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1492 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
1,827,856 ( 0.19%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
-- line 1508 ----------------------------------------
-- line 1588 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   69,644 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1674 ----------------------------------------
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
  356,903 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        .                   }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      138 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
      388 ( 0.00%)              if self <= 1 { return 0; }
        .           
    2,329 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
    6,962 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
    2,322 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
    4,254 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------

    8,810 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs
--------------------------------------------------------------------------------
Ir                 

-- line 267 ----------------------------------------
        .           macro_rules! bitor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitOr for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
       35 ( 0.00%)              fn bitor(self, rhs: $t) -> $t { self | rhs }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitOr, bitor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 283 ----------------------------------------
-- line 368 ----------------------------------------
        .           macro_rules! bitxor_impl {
        .               ($($t:ty)*) => ($(
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_unstable(feature = "const_ops", issue = "90080")]
        .                   impl const BitXor for $t {
        .                       type Output = $t;
        .           
        .                       #[inline]
2,031,978 ( 0.21%)              fn bitxor(self, other: $t) -> $t { self ^ other }
        .                   }
        .           
        .                   forward_ref_binop! { impl const BitXor, bitxor for $t, $t }
        .               )*)
        .           }
        .           
        .           bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }
        .           
-- line 384 ----------------------------------------

1,646,224 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ops/bit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .           }
      .           
      .           impl From<Option<AttrWrapper>> for LhsExpr {
      .               /// Converts `Some(attrs)` into `LhsExpr::AttributesParsed(attrs)`
      .               /// and `None` into `LhsExpr::NotYetParsed`.
      .               ///
      .               /// This conversion does not allocate.
      .               fn from(o: Option<AttrWrapper>) -> Self {
 29,506 ( 0.00%)          if let Some(attrs) = o { LhsExpr::AttributesParsed(attrs) } else { LhsExpr::NotYetParsed }
      .               }
      .           }
      .           
      .           impl From<P<Expr>> for LhsExpr {
      .               /// Converts the `expr: P<Expr>` into `LhsExpr::AlreadyParsed(expr)`.
      .               ///
      .               /// This conversion does not allocate.
      .               fn from(expr: P<Expr>) -> Self {
-- line 88 ----------------------------------------
-- line 103 ----------------------------------------
      .               pub fn parse_expr_force_collect(&mut self) -> PResult<'a, P<Expr>> {
      .                   self.collect_tokens_no_attrs(|this| this.parse_expr())
      .               }
      .           
      .               pub fn parse_anon_const_expr(&mut self) -> PResult<'a, AnonConst> {
      .                   self.parse_expr().map(|value| AnonConst { id: DUMMY_NODE_ID, value })
      .               }
      .           
    456 ( 0.00%)      fn parse_expr_catch_underscore(&mut self) -> PResult<'a, P<Expr>> {
    114 ( 0.00%)          match self.parse_expr() {
      .                       Ok(expr) => Ok(expr),
      .                       Err(mut err) => match self.token.ident() {
      .                           Some((Ident { name: kw::Underscore, .. }, false))
      .                               if self.look_ahead(1, |t| t == &token::Comma) =>
      .                           {
      .                               // Special-case handling of `foo(_, _, _)`
      .                               err.emit();
      .                               self.bump();
      .                               Ok(self.mk_expr(self.prev_token.span, ExprKind::Err, AttrVec::new()))
      .                           }
      .                           _ => Err(err),
      .                       },
      .                   }
    570 ( 0.00%)      }
      .           
      .               /// Parses a sequence of expressions delimited by parentheses.
      .               fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {
    350 ( 0.00%)          self.parse_paren_comma_seq(|p| p.parse_expr_catch_underscore()).map(|(r, _)| r)
      .               }
      .           
      .               /// Parses an expression, subject to the given restrictions.
      .               #[inline]
      .               pub(super) fn parse_expr_res(
      .                   &mut self,
      .                   r: Restrictions,
      .                   already_parsed_attrs: Option<AttrWrapper>,
-- line 138 ----------------------------------------
-- line 144 ----------------------------------------
      .               ///
      .               /// This parses an expression accounting for associativity and precedence of the operators in
      .               /// the expression.
      .               #[inline]
      .               fn parse_assoc_expr(
      .                   &mut self,
      .                   already_parsed_attrs: Option<AttrWrapper>,
      .               ) -> PResult<'a, P<Expr>> {
117,140 ( 0.01%)          self.parse_assoc_expr_with(0, already_parsed_attrs.into())
      .               }
      .           
      .               /// Parses an associative expression with operators of at least `min_prec` precedence.
264,321 ( 0.03%)      pub(super) fn parse_assoc_expr_with(
      .                   &mut self,
      .                   min_prec: usize,
      .                   lhs: LhsExpr,
      .               ) -> PResult<'a, P<Expr>> {
146,879 ( 0.02%)          let mut lhs = if let LhsExpr::AlreadyParsed(expr) = lhs {
    144 ( 0.00%)              expr
      .                   } else {
 58,666 ( 0.01%)              let attrs = match lhs {
 58,676 ( 0.01%)                  LhsExpr::AttributesParsed(attrs) => Some(attrs),
      .                           _ => None,
      .                       };
 29,333 ( 0.00%)              if [token::DotDot, token::DotDotDot, token::DotDotEq].contains(&self.token.kind) {
      .                           return self.parse_prefix_range_expr(attrs);
      .                       } else {
351,996 ( 0.04%)                  self.parse_prefix_expr(attrs)?
      .                       }
      .                   };
 58,738 ( 0.01%)          let last_type_ascription_set = self.last_type_ascription.is_some();
      .           
      .                   if !self.should_continue_as_assoc_expr(&lhs) {
      6 ( 0.00%)              self.last_type_ascription = None;
      .                       return Ok(lhs);
      .                   }
      .           
      .                   self.expected_tokens.push(TokenType::Operator);
    148 ( 0.00%)          while let Some(op) = self.check_assoc_op() {
      .                       // Adjust the span for interpolated LHS to point to the `$lhs` token
      .                       // and not to what it refers to.
    222 ( 0.00%)              let lhs_span = match self.prev_token.kind {
      .                           TokenKind::Interpolated(..) => self.prev_token.span,
      .                           _ => lhs.span,
      .                       };
      .           
     74 ( 0.00%)              let cur_op_span = self.token.span;
    296 ( 0.00%)              let restrictions = if op.node.is_assign_like() {
      .                           self.restrictions & Restrictions::NO_STRUCT_LITERAL
      .                       } else {
      .                           self.restrictions
      .                       };
    111 ( 0.00%)              let prec = op.node.precedence();
     74 ( 0.00%)              if prec < min_prec {
      .                           break;
      .                       }
      .                       // Check for deprecated `...` syntax
     88 ( 0.00%)              if self.token == token::DotDotDot && op.node == AssocOp::DotDotEq {
      .                           self.err_dotdotdot_syntax(self.token.span);
      .                       }
      .           
     88 ( 0.00%)              if self.token == token::LArrow {
      .                           self.err_larrow_operator(self.token.span);
      .                       }
      .           
     22 ( 0.00%)              self.bump();
     88 ( 0.00%)              if op.node.is_comparison() {
      .                           if let Some(expr) = self.check_no_chained_comparison(&lhs, &op)? {
      .                               return Ok(expr);
      .                           }
      .                       }
      .           
      .                       // Look for JS' `===` and `!==` and recover
     22 ( 0.00%)              if (op.node == AssocOp::Equal || op.node == AssocOp::NotEqual)
      .                           && self.token.kind == token::Eq
      .                           && self.prev_token.span.hi() == self.token.span.lo()
      .                       {
      .                           let sp = op.span.to(self.token.span);
      .                           let sugg = match op.node {
      .                               AssocOp::Equal => "==",
      .                               AssocOp::NotEqual => "!=",
      .                               _ => unreachable!(),
-- line 225 ----------------------------------------
-- line 262 ----------------------------------------
      .                               .span_label(
      .                                   sp,
      .                                   "`<=>` is not a valid comparison operator, use `std::cmp::Ordering`",
      .                               )
      .                               .emit();
      .                           self.bump();
      .                       }
      .           
     44 ( 0.00%)              let op = op.node;
      .                       // Special cases:
      .                       if op == AssocOp::As {
      .                           lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;
      .                           continue;
      .                       } else if op == AssocOp::Colon {
      .                           lhs = self.parse_assoc_op_ascribe(lhs, lhs_span)?;
      .                           continue;
      .                       } else if op == AssocOp::DotDot || op == AssocOp::DotDotEq {
      .                           // If we didn’t have to handle `x..`/`x..=`, it would be pretty easy to
      .                           // generalise it to the Fixity::None code.
      .                           lhs = self.parse_range_expr(prec, lhs, op, cur_op_span)?;
      .                           break;
      .                       }
      .           
     22 ( 0.00%)              let fixity = op.fixity();
     66 ( 0.00%)              let prec_adjustment = match fixity {
      .                           Fixity::Right => 0,
      .                           Fixity::Left => 1,
      .                           // We currently have no non-associative operators that are not handled above by
      .                           // the special cases. The code is here only for future convenience.
      .                           Fixity::None => 1,
      .                       };
     44 ( 0.00%)              let rhs = self.with_res(restrictions - Restrictions::STMT_EXPR, |this| {
    110 ( 0.00%)                  this.parse_assoc_expr_with(prec + prec_adjustment, LhsExpr::NotYetParsed)
      .                       })?;
      .           
      .                       let span = self.mk_expr_sp(&lhs, lhs_span, rhs.span);
    198 ( 0.00%)              lhs = match op {
      .                           AssocOp::Add
      .                           | AssocOp::Subtract
      .                           | AssocOp::Multiply
      .                           | AssocOp::Divide
      .                           | AssocOp::Modulus
      .                           | AssocOp::LAnd
      .                           | AssocOp::LOr
      .                           | AssocOp::BitXor
-- line 306 ----------------------------------------
-- line 309 ----------------------------------------
      .                           | AssocOp::ShiftLeft
      .                           | AssocOp::ShiftRight
      .                           | AssocOp::Equal
      .                           | AssocOp::Less
      .                           | AssocOp::LessEqual
      .                           | AssocOp::NotEqual
      .                           | AssocOp::Greater
      .                           | AssocOp::GreaterEqual => {
     44 ( 0.00%)                      let ast_op = op.to_ast_binop().unwrap();
      .                               let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);
      .                               self.mk_expr(span, binary, AttrVec::new())
      .                           }
      .                           AssocOp::Assign => {
      .                               self.mk_expr(span, ExprKind::Assign(lhs, rhs, cur_op_span), AttrVec::new())
      .                           }
      .                           AssocOp::AssignOp(k) => {
      .                               let aop = match k {
-- line 325 ----------------------------------------
-- line 337 ----------------------------------------
      .                               let aopexpr = self.mk_assign_op(source_map::respan(cur_op_span, aop), lhs, rhs);
      .                               self.mk_expr(span, aopexpr, AttrVec::new())
      .                           }
      .                           AssocOp::As | AssocOp::Colon | AssocOp::DotDot | AssocOp::DotDotEq => {
      .                               self.span_bug(span, "AssocOp should have been handled by special case")
      .                           }
      .                       };
      .           
     44 ( 0.00%)              if let Fixity::None = fixity {
      .                           break;
      .                       }
      .                   }
 29,367 ( 0.00%)          if last_type_ascription_set {
      .                       self.last_type_ascription = None;
      .                   }
 58,734 ( 0.01%)          Ok(lhs)
499,269 ( 0.05%)      }
      .           
      .               fn should_continue_as_assoc_expr(&mut self, lhs: &Expr) -> bool {
205,587 ( 0.02%)          match (self.expr_is_complete(lhs), AssocOp::from_token(&self.token)) {
      .                       // Semi-statement forms are odd:
      .                       // See https://github.com/rust-lang/rust/issues/29071
      .                       (true, None) => false,
      .                       (false, _) => true, // Continue parsing the expression.
      .                       // An exhaustive check is done in the following block, but these are checked first
      .                       // because they *are* ambiguous but also reasonable looking incorrect syntax, so we
      .                       // want to keep their span info to improve diagnostics in these cases in a later stage.
      .                       (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`
-- line 364 ----------------------------------------
-- line 401 ----------------------------------------
      .                   err.emit();
      .               }
      .           
      .               /// Possibly translate the current token to an associative operator.
      .               /// The method does not advance the current token.
      .               ///
      .               /// Also performs recovery for `and` / `or` which are mistaken for `&&` and `||` respectively.
      .               fn check_assoc_op(&self) -> Option<Spanned<AssocOp>> {
323,316 ( 0.03%)          let (op, span) = match (AssocOp::from_token(&self.token), self.token.ident()) {
      .                       // When parsing const expressions, stop parsing when encountering `>`.
      .                       (
      .                           Some(
      .                               AssocOp::ShiftRight
      .                               | AssocOp::Greater
      .                               | AssocOp::GreaterEqual
      .                               | AssocOp::AssignOp(token::BinOpToken::Shr),
      .                           ),
      .                           _,
      .                       ) if self.restrictions.contains(Restrictions::CONST_EXPR) => {
      .                           return None;
      .                       }
     74 ( 0.00%)              (Some(op), _) => (op, self.token.span),
      .                       (None, Some((Ident { name: sym::and, span }, false))) => {
      .                           self.error_bad_logical_op("and", "&&", "conjunction");
      .                           (AssocOp::LAnd, span)
      .                       }
      .                       (None, Some((Ident { name: sym::or, span }, false))) => {
      .                           self.error_bad_logical_op("or", "||", "disjunction");
      .                           (AssocOp::LOr, span)
      .                       }
-- line 430 ----------------------------------------
-- line 443 ----------------------------------------
      .                           Applicability::MachineApplicable,
      .                       )
      .                       .note("unlike in e.g., python and PHP, `&&` and `||` are used for logical operators")
      .                       .emit();
      .               }
      .           
      .               /// Checks if this expression is a successfully parsed statement.
      .               fn expr_is_complete(&self, e: &Expr) -> bool {
 58,765 ( 0.01%)          self.restrictions.contains(Restrictions::STMT_EXPR)
    304 ( 0.00%)              && !classify::expr_requires_semi_to_be_stmt(e)
      .               }
      .           
      .               /// Parses `x..y`, `x..=y`, and `x..`/`x..=`.
      .               /// The other two variants are handled in `parse_prefix_range_expr` below.
      .               fn parse_range_expr(
      .                   &mut self,
      .                   prec: usize,
      .                   lhs: P<Expr>,
-- line 460 ----------------------------------------
-- line 520 ----------------------------------------
      .                           (lo, None)
      .                       };
      .                       let range = this.mk_range(None, opt_end, limits);
      .                       Ok(this.mk_expr(span, range, attrs.into()))
      .                   })
      .               }
      .           
      .               /// Parses a prefix-unary-operator expr.
205,534 ( 0.02%)      fn parse_prefix_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
234,896 ( 0.02%)          let attrs = self.parse_or_use_outer_attributes(attrs)?;
146,810 ( 0.02%)          let lo = self.token.span;
      .           
      .                   macro_rules! make_it {
      .                       ($this:ident, $attrs:expr, |this, _| $body:expr) => {
    261 ( 0.00%)                  $this.collect_tokens_for_expr($attrs, |$this, attrs| {
    493 ( 0.00%)                      let (hi, ex) = $body?;
    464 ( 0.00%)                      Ok($this.mk_expr(lo.to(hi), ex, attrs.into()))
    290 ( 0.00%)                  })
      .                       };
      .                   }
      .           
      .                   let this = self;
      .           
      .                   // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()
176,288 ( 0.02%)          match this.token.uninterpolate().kind {
      .                       token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)), // `!expr`
      .                       token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)), // `~expr`
      .                       token::BinOp(token::Minus) => {
      .                           make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Neg))
      .                       } // `-expr`
      .                       token::BinOp(token::Star) => {
      .                           make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Deref))
      .                       } // `*expr`
      .                       token::BinOp(token::And) | token::AndAnd => {
     58 ( 0.00%)                  make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))
      .                       }
      .                       token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {
      .                           let mut err = this.struct_span_err(lo, "leading `+` is not supported");
      .                           err.span_label(lo, "unexpected `+`");
      .           
      .                           // a block on the LHS might have been intended to be an expression instead
      .                           if let Some(sp) = this.sess.ambiguous_block_expr_parse.borrow().get(&lo) {
      .                               this.sess.expr_parentheses_needed(&mut err, *sp);
-- line 562 ----------------------------------------
-- line 568 ----------------------------------------
      .                                   Applicability::MachineApplicable,
      .                               );
      .                           }
      .                           err.emit();
      .           
      .                           this.bump();
      .                           this.parse_prefix_expr(None)
      .                       } // `+expr`
    384 ( 0.00%)              token::Ident(..) if this.token.is_keyword(kw::Box) => {
      .                           make_it!(this, attrs, |this, _| this.parse_box_expr(lo))
      .                       }
      .                       token::Ident(..) if this.is_mistaken_not_ident_negation() => {
      .                           make_it!(this, attrs, |this, _| this.recover_not_expr(lo))
      .                       }
      .                       _ => return this.parse_dot_or_call_expr(Some(attrs)),
      .                   }
293,620 ( 0.03%)      }
      .           
      .               fn parse_prefix_expr_common(&mut self, lo: Span) -> PResult<'a, (Span, P<Expr>)> {
      .                   self.bump();
      .                   let expr = self.parse_prefix_expr(None);
      .                   let (span, expr) = self.interpolated_or_expr_span(expr)?;
      .                   Ok((lo.to(span), expr))
      .               }
      .           
-- line 592 ----------------------------------------
-- line 619 ----------------------------------------
      .               fn is_mistaken_not_ident_negation(&self) -> bool {
      .                   let token_cannot_continue_expr = |t: &Token| match t.uninterpolate().kind {
      .                       // These tokens can start an expression after `!`, but
      .                       // can't continue an expression after an ident
      .                       token::Ident(name, is_raw) => token::ident_can_begin_expr(name, t.span, is_raw),
      .                       token::Literal(..) | token::Pound => true,
      .                       _ => t.is_whole_expr(),
      .                   };
    384 ( 0.00%)          self.token.is_ident_named(sym::not) && self.look_ahead(1, token_cannot_continue_expr)
      .               }
      .           
      .               /// Recover on `not expr` in favor of `!expr`.
      .               fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
      .                   // Emit the error...
      .                   let not_token = self.look_ahead(1, |t| t.clone());
      .                   self.struct_span_err(
      .                       not_token.span,
-- line 635 ----------------------------------------
-- line 651 ----------------------------------------
      .           
      .               /// Returns the span of expr, if it was not interpolated or the span of the interpolated token.
      .               fn interpolated_or_expr_span(
      .                   &self,
      .                   expr: PResult<'a, P<Expr>>,
      .               ) -> PResult<'a, (Span, P<Expr>)> {
      .                   expr.map(|e| {
      .                       (
117,477 ( 0.01%)                  match self.prev_token.kind {
      .                               TokenKind::Interpolated(..) => self.prev_token.span,
      .                               _ => e.span,
      .                           },
      .                           e,
      .                       )
      .                   })
      .               }
      .           
-- line 667 ----------------------------------------
-- line 844 ----------------------------------------
      .                   let lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;
      .                   self.sess.gated_spans.gate(sym::type_ascription, lhs.span);
      .                   Ok(lhs)
      .               }
      .           
      .               /// Parse `& mut? <expr>` or `& raw [ const | mut ] <expr>`.
      .               fn parse_borrow_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {
      .                   self.expect_and()?;
    145 ( 0.00%)          let has_lifetime = self.token.is_lifetime() && self.look_ahead(1, |t| t != &token::Colon);
      .                   let lifetime = has_lifetime.then(|| self.expect_lifetime()); // For recovery, see below.
      .                   let (borrow_kind, mutbl) = self.parse_borrow_modifiers(lo);
    116 ( 0.00%)          let expr = self.parse_prefix_expr(None);
     58 ( 0.00%)          let (hi, expr) = self.interpolated_or_expr_span(expr)?;
     29 ( 0.00%)          let span = lo.to(hi);
     58 ( 0.00%)          if let Some(lt) = lifetime {
      .                       self.error_remove_borrow_lifetime(span, lt.ident.span);
      .                   }
      .                   Ok((span, ExprKind::AddrOf(borrow_kind, mutbl, expr)))
      .               }
      .           
      .               fn error_remove_borrow_lifetime(&self, span: Span, lt_span: Span) {
      .                   self.struct_span_err(span, "borrow expressions cannot be annotated with lifetimes")
      .                       .span_label(lt_span, "annotated with lifetime here")
-- line 866 ----------------------------------------
-- line 870 ----------------------------------------
      .                           String::new(),
      .                           Applicability::MachineApplicable,
      .                       )
      .                       .emit();
      .               }
      .           
      .               /// Parse `mut?` or `raw [ const | mut ]`.
      .               fn parse_borrow_modifiers(&mut self, lo: Span) -> (ast::BorrowKind, ast::Mutability) {
     58 ( 0.00%)          if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {
      .                       // `raw [ const | mut ]`.
      .                       let found_raw = self.eat_keyword(kw::Raw);
      .                       assert!(found_raw);
      .                       let mutability = self.parse_const_or_mut().unwrap();
      .                       self.sess.gated_spans.gate(sym::raw_ref_op, lo.to(self.prev_token.span));
      .                       (ast::BorrowKind::Raw, mutability)
      .                   } else {
      .                       // `mut?`
-- line 886 ----------------------------------------
-- line 889 ----------------------------------------
      .               }
      .           
      .               /// Parses `a.b` or `a(13)` or `a[4]` or just `a`.
      .               fn parse_dot_or_call_expr(&mut self, attrs: Option<AttrWrapper>) -> PResult<'a, P<Expr>> {
      .                   let attrs = self.parse_or_use_outer_attributes(attrs)?;
      .                   self.collect_tokens_for_expr(attrs, |this, attrs| {
      .                       let base = this.parse_bottom_expr();
      .                       let (span, base) = this.interpolated_or_expr_span(base)?;
117,332 ( 0.01%)              this.parse_dot_or_call_expr_with(base, span, attrs)
      .                   })
      .               }
      .           
      6 ( 0.00%)      pub(super) fn parse_dot_or_call_expr_with(
      .                   &mut self,
      .                   e0: P<Expr>,
      .                   lo: Span,
      .                   mut attrs: Vec<ast::Attribute>,
      .               ) -> PResult<'a, P<Expr>> {
      .                   // Stitch the list of outer attributes onto the return value.
      .                   // A little bit ugly, but the best way given the current code
      .                   // structure
205,574 ( 0.02%)          self.parse_dot_or_call_expr_with_(e0, lo).map(|expr| {
205,577 ( 0.02%)              expr.map(|mut expr| {
 29,368 ( 0.00%)                  attrs.extend::<Vec<_>>(expr.attrs.into());
 58,736 ( 0.01%)                  expr.attrs = attrs.into();
411,152 ( 0.04%)                  expr
      .                       })
      .                   })
      8 ( 0.00%)      }
      .           
910,408 ( 0.10%)      fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {
      .                   loop {
      .                       if self.eat(&token::Question) {
      .                           // `expr?`
      .                           e = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Try(e), AttrVec::new());
      .                           continue;
      .                       }
      .                       if self.eat(&token::Dot) {
      .                           // expr.f
    124 ( 0.00%)                  e = self.parse_dot_suffix_expr(lo, e)?;
      .                           continue;
      .                       }
    154 ( 0.00%)              if self.expr_is_complete(&e) {
      .                           return Ok(e);
      .                       }
 58,994 ( 0.01%)              e = match self.token.kind {
     84 ( 0.00%)                  token::OpenDelim(token::Paren) => self.parse_fn_call_expr(lo, e),
      .                           token::OpenDelim(token::Bracket) => self.parse_index_expr(lo, e)?,
 29,366 ( 0.00%)                  _ => return Ok(e),
      .                       }
      .                   }
264,312 ( 0.03%)      }
      .           
      .               fn look_ahead_type_ascription_as_field(&mut self) -> bool {
    168 ( 0.00%)          self.look_ahead(1, |t| t.is_ident())
      .                       && self.look_ahead(2, |t| t == &token::Colon)
      .                       && self.look_ahead(3, |t| t.can_begin_expr())
      .               }
      .           
      .               fn parse_dot_suffix_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {
    341 ( 0.00%)          match self.token.uninterpolate().kind {
      .                       token::Ident(..) => self.parse_dot_suffix(base, lo),
      .                       token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {
      .                           Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix, None))
      .                       }
      .                       token::Literal(token::Lit { kind: token::Float, symbol, suffix }) => {
      .                           Ok(self.parse_tuple_field_access_expr_float(lo, base, symbol, suffix))
      .                       }
      .                       _ => {
-- line 957 ----------------------------------------
-- line 1091 ----------------------------------------
      .                   let span = self.prev_token.span;
      .                   let field = ExprKind::Field(base, Ident::new(field, span));
      .                   self.expect_no_suffix(span, "a tuple index", suffix);
      .                   self.mk_expr(lo.to(span), field, AttrVec::new())
      .               }
      .           
      .               /// Parse a function call expression, `expr(...)`.
      .               fn parse_fn_call_expr(&mut self, lo: Span, fun: P<Expr>) -> P<Expr> {
    140 ( 0.00%)          let snapshot = if self.token.kind == token::OpenDelim(token::Paren)
      .                       && self.look_ahead_type_ascription_as_field()
      .                   {
      .                       Some((self.clone(), fun.kind.clone()))
      .                   } else {
     84 ( 0.00%)              None
      .                   };
     28 ( 0.00%)          let open_paren = self.token.span;
      .           
     56 ( 0.00%)          let mut seq = self.parse_paren_expr_seq().map(|args| {
     84 ( 0.00%)              self.mk_expr(lo.to(self.prev_token.span), self.mk_call(fun, args), AttrVec::new())
      .                   });
      .                   if let Some(expr) =
      .                       self.maybe_recover_struct_lit_bad_delims(lo, open_paren, &mut seq, snapshot)
      .                   {
      .                       return expr;
      .                   }
    140 ( 0.00%)          self.recover_seq_parse_error(token::Paren, lo, seq)
      .               }
      .           
      .               /// If we encounter a parser state that looks like the user has written a `struct` literal with
      .               /// parentheses instead of braces, recover the parser state and provide suggestions.
      .               #[instrument(skip(self, seq, snapshot), level = "trace")]
      .               fn maybe_recover_struct_lit_bad_delims(
      .                   &mut self,
      .                   lo: Span,
      .                   open_paren: Span,
      .                   seq: &mut PResult<'a, P<Expr>>,
      .                   snapshot: Option<(Self, ExprKind)>,
      .               ) -> Option<P<Expr>> {
    280 ( 0.00%)          match (seq.as_mut(), snapshot) {
      .                       (Err(ref mut err), Some((mut snapshot, ExprKind::Path(None, path)))) => {
      .                           let name = pprust::path_to_string(&path);
      .                           snapshot.bump(); // `(`
      .                           match snapshot.parse_struct_fields(path, false, token::Paren) {
      .                               Ok((fields, ..)) if snapshot.eat(&token::CloseDelim(token::Paren)) => {
      .                                   // We are certain we have `Enum::Foo(a: 3, b: 4)`, suggest
      .                                   // `Enum::Foo { a: 3, b: 4 }` or `Enum::Foo(3, 4)`.
      .                                   *self = snapshot;
-- line 1137 ----------------------------------------
-- line 1165 ----------------------------------------
      .                                   }
      .                                   return Some(self.mk_expr_err(span));
      .                               }
      .                               Ok(_) => {}
      .                               Err(mut err) => err.emit(),
      .                           }
      .                       }
      .                       _ => {}
     84 ( 0.00%)          }
      .                   None
      .               }
      .           
      .               /// Parse an indexing expression `expr[...]`.
      .               fn parse_index_expr(&mut self, lo: Span, base: P<Expr>) -> PResult<'a, P<Expr>> {
      .                   self.bump(); // `[`
      .                   let index = self.parse_expr()?;
      .                   self.expect(&token::CloseDelim(token::Bracket))?;
      .                   Ok(self.mk_expr(lo.to(self.prev_token.span), self.mk_index(base, index), AttrVec::new()))
      .               }
      .           
      .               /// Assuming we have just parsed `.`, continue parsing into an expression.
      .               fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {
     62 ( 0.00%)          if self.token.uninterpolated_span().rust_2018() && self.eat_keyword(kw::Await) {
      .                       return Ok(self.mk_await_expr(self_arg, lo));
      .                   }
      .           
     31 ( 0.00%)          let fn_span_lo = self.token.span;
    186 ( 0.00%)          let mut segment = self.parse_path_segment(PathStyle::Expr, None)?;
    155 ( 0.00%)          self.check_trailing_angle_brackets(&segment, &[&token::OpenDelim(token::Paren)]);
      .                   self.check_turbofish_missing_angle_brackets(&mut segment);
      .           
    155 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
      .                       // Method call `expr.f()`
     31 ( 0.00%)              let mut args = self.parse_paren_expr_seq()?;
    124 ( 0.00%)              args.insert(0, self_arg);
      .           
     93 ( 0.00%)              let fn_span = fn_span_lo.to(self.prev_token.span);
     93 ( 0.00%)              let span = lo.to(self.prev_token.span);
    155 ( 0.00%)              Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args, fn_span), AttrVec::new()))
      .                   } else {
      .                       // Field access `expr.f`
      .                       if let Some(args) = segment.args {
      .                           self.struct_span_err(
      .                               args.span(),
      .                               "field expressions cannot have generic arguments",
      .                           )
      .                           .emit();
-- line 1211 ----------------------------------------
-- line 1217 ----------------------------------------
      .               }
      .           
      .               /// At the bottom (top?) of the precedence hierarchy,
      .               /// Parses things like parenthesized exprs, macros, `return`, etc.
      .               ///
      .               /// N.B., this does not parse outer attributes, and is private because it only works
      .               /// correctly if called from `parse_dot_or_call_expr()`.
      .               fn parse_bottom_expr(&mut self) -> PResult<'a, P<Expr>> {
 58,755 ( 0.01%)          maybe_recover_from_interpolated_ty_qpath!(self, true);
 87,999 ( 0.01%)          maybe_whole_expr!(self);
      .           
      .                   // Outer attributes are already parsed and will be
      .                   // added to the return value after the fact.
      .                   //
      .                   // Therefore, prevent sub-parser from parsing
      .                   // attributes by giving them an empty "already-parsed" list.
 29,333 ( 0.00%)          let attrs = AttrVec::new();
      .           
      .                   // Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.
    124 ( 0.00%)          let lo = self.token.span;
 87,999 ( 0.01%)          if let token::Literal(_) = self.token.kind {
      .                       // This match arm is a special-case of the `_` match arm below and
      .                       // could be removed without changing functionality, but it's faster
      .                       // to have it here, especially for programs with large constants.
116,836 ( 0.01%)              self.parse_lit_expr(attrs)
    620 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Paren)) {
      .                       self.parse_tuple_parens_expr(attrs)
    620 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Brace)) {
      .                       self.parse_block_expr(None, lo, BlockCheckMode::Default, attrs)
  1,240 ( 0.00%)          } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {
      .                       self.parse_closure_expr(attrs)
    620 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Bracket)) {
    140 ( 0.00%)              self.parse_array_or_repeat_expr(attrs, token::Bracket)
    384 ( 0.00%)          } else if self.check_path() {
    332 ( 0.00%)              self.parse_path_start_expr(attrs)
    130 ( 0.00%)          } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {
      .                       self.parse_closure_expr(attrs)
     65 ( 0.00%)          } else if self.eat_keyword(kw::If) {
      .                       self.parse_if_expr(attrs)
     65 ( 0.00%)          } else if self.check_keyword(kw::For) {
      .                       if self.choose_generics_over_qpath(1) {
      .                           // NOTE(Centril, eddyb): DO NOT REMOVE! Beyond providing parser recovery,
      .                           // this is an insurance policy in case we allow qpaths in (tuple-)struct patterns.
      .                           // When `for <Foo as Bar>::Proj in $expr $block` is wanted,
      .                           // you can disambiguate in favor of a pattern with `(...)`.
      .                           self.recover_quantified_closure_expr(attrs)
      .                       } else {
      .                           assert!(self.eat_keyword(kw::For));
      .                           self.parse_for_expr(None, self.prev_token.span, attrs)
      .                       }
     65 ( 0.00%)          } else if self.eat_keyword(kw::While) {
      .                       self.parse_while_expr(None, self.prev_token.span, attrs)
     52 ( 0.00%)          } else if let Some(label) = self.eat_label() {
      .                       self.parse_labeled_expr(label, attrs, true)
     65 ( 0.00%)          } else if self.eat_keyword(kw::Loop) {
      .                       self.parse_loop_expr(None, self.prev_token.span, attrs)
     65 ( 0.00%)          } else if self.eat_keyword(kw::Continue) {
      .                       let kind = ExprKind::Continue(self.eat_label());
      .                       Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))
     52 ( 0.00%)          } else if self.eat_keyword(kw::Match) {
      4 ( 0.00%)              let match_sp = self.prev_token.span;
     16 ( 0.00%)              self.parse_match_expr(attrs).map_err(|mut err| {
      .                           err.span_label(match_sp, "while parsing this match expression");
      .                           err
      .                       })
     44 ( 0.00%)          } else if self.eat_keyword(kw::Unsafe) {
      .                       self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)
     44 ( 0.00%)          } else if self.check_inline_const(0) {
      .                       self.parse_const_block(lo.to(self.token.span), false)
     33 ( 0.00%)          } else if self.is_do_catch_block() {
      .                       self.recover_do_catch(attrs)
     33 ( 0.00%)          } else if self.is_try_block() {
      .                       self.expect_keyword(kw::Try)?;
      .                       self.parse_try_block(lo, attrs)
     44 ( 0.00%)          } else if self.eat_keyword(kw::Return) {
      .                       self.parse_return_expr(attrs)
     44 ( 0.00%)          } else if self.eat_keyword(kw::Break) {
      .                       self.parse_break_expr(attrs)
     44 ( 0.00%)          } else if self.eat_keyword(kw::Yield) {
      .                       self.parse_yield_expr(attrs)
     44 ( 0.00%)          } else if self.eat_keyword(kw::Let) {
      .                       self.parse_let_expr(attrs)
     44 ( 0.00%)          } else if self.eat_keyword(kw::Underscore) {
      .                       Ok(self.mk_expr(self.prev_token.span, ExprKind::Underscore, attrs))
     11 ( 0.00%)          } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {
      .                       // Don't complain about bare semicolons after unclosed braces
      .                       // recovery in order to keep the error count down. Fixing the
      .                       // delimiters will possibly also fix the bare semicolon found in
      .                       // expression context. For example, silence the following error:
      .                       //
      .                       //     error: expected expression, found `;`
      .                       //      --> file.rs:2:13
      .                       //       |
      .                       //     2 |     foo(bar(;
      .                       //       |             ^ expected expression
      .                       self.bump();
      .                       Ok(self.mk_expr_err(self.token.span))
     22 ( 0.00%)          } else if self.token.uninterpolated_span().rust_2018() {
      .                       // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.
      .                       if self.check_keyword(kw::Async) {
      .                           if self.is_async_block() {
      .                               // Check for `async {` and `async move {`.
      .                               self.parse_async_block(attrs)
      .                           } else {
      .                               self.parse_closure_expr(attrs)
      .                           }
      .                       } else if self.eat_keyword(kw::Await) {
      .                           self.recover_incorrect_await_syntax(lo, self.prev_token.span, attrs)
      .                       } else {
      .                           self.parse_lit_expr(attrs)
      .                       }
      .                   } else {
     44 ( 0.00%)              self.parse_lit_expr(attrs)
      .                   }
      .               }
      .           
292,200 ( 0.03%)      fn parse_lit_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
 58,440 ( 0.01%)          let lo = self.token.span;
116,880 ( 0.01%)          match self.parse_opt_lit() {
175,320 ( 0.02%)              Some(literal) => {
262,980 ( 0.03%)                  let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);
292,200 ( 0.03%)                  self.maybe_recover_from_bad_qpath(expr, true)
      .                       }
      .                       None => self.try_macro_suggestion(),
      .                   }
      .               }
      .           
      .               fn parse_tuple_parens_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
      .                   let lo = self.token.span;
      .                   self.expect(&token::OpenDelim(token::Paren))?;
-- line 1346 ----------------------------------------
-- line 1358 ----------------------------------------
      .                   } else {
      .                       // `(e,)` is a tuple with only one field, `e`.
      .                       ExprKind::Tup(es)
      .                   };
      .                   let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
      .                   self.maybe_recover_from_bad_qpath(expr, true)
      .               }
      .           
    308 ( 0.00%)      fn parse_array_or_repeat_expr(
      .                   &mut self,
      .                   attrs: AttrVec,
      .                   close_delim: token::DelimToken,
      .               ) -> PResult<'a, P<Expr>> {
     84 ( 0.00%)          let lo = self.token.span;
     28 ( 0.00%)          self.bump(); // `[` or other open delim
      .           
     84 ( 0.00%)          let close = &token::CloseDelim(close_delim);
      .                   let kind = if self.eat(close) {
      .                       // Empty vector
      .                       ExprKind::Array(Vec::new())
      .                   } else {
      .                       // Non-empty vector
     56 ( 0.00%)              let first_expr = self.parse_expr()?;
      .                       if self.eat(&token::Semi) {
      .                           // Repeating array syntax: `[ 0; 512 ]`
      .                           let count = self.parse_anon_const_expr()?;
      .                           self.expect(close)?;
      .                           ExprKind::Repeat(first_expr, count)
      .                       } else if self.eat(&token::Comma) {
      .                           // Vector with two or more elements.
      .                           let sep = SeqSep::trailing_allowed(token::Comma);
      .                           let (remaining_exprs, _) = self.parse_seq_to_end(close, sep, |p| p.parse_expr())?;
     26 ( 0.00%)                  let mut exprs = vec![first_expr];
      .                           exprs.extend(remaining_exprs);
    130 ( 0.00%)                  ExprKind::Array(exprs)
      .                       } else {
      .                           // Vector with one element
      4 ( 0.00%)                  self.expect(close)?;
     10 ( 0.00%)                  ExprKind::Array(vec![first_expr])
      .                       }
      .                   };
     84 ( 0.00%)          let expr = self.mk_expr(lo.to(self.prev_token.span), kind, attrs);
     84 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
    280 ( 0.00%)      }
      .           
    830 ( 0.00%)      fn parse_path_start_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {
    664 ( 0.00%)          let (qself, path) = if self.eat_lt() {
      .                       let (qself, path) = self.parse_qpath(PathStyle::Expr)?;
      .                       (Some(qself), path)
      .                   } else {
    166 ( 0.00%)              (None, self.parse_path(PathStyle::Expr)?)
      .                   };
     83 ( 0.00%)          let lo = path.span;
      .           
      .                   // `!`, as an operator, is prefix, so we know this isn't that.
  1,245 ( 0.00%)          let (hi, kind) = if self.eat(&token::Not) {
      .                       // MACRO INVOCATION expression
      .                       if qself.is_some() {
      .                           self.struct_span_err(path.span, "macros cannot use qualified paths").emit();
      .                       }
      .                       let mac = MacCall {
      .                           path,
      .                           args: self.parse_mac_args()?,
      .                           prior_type_ascription: self.last_type_ascription,
      .                       };
      .                       (self.prev_token.span, ExprKind::MacCall(mac))
    415 ( 0.00%)          } else if self.check(&token::OpenDelim(token::Brace)) {
      .                       if let Some(expr) = self.maybe_parse_struct_expr(qself.as_ref(), &path, &attrs) {
      .                           if qself.is_some() {
      .                               self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);
      .                           }
      .                           return expr;
      .                       } else {
      .                           (path.span, ExprKind::Path(qself, path))
      .                       }
      .                   } else {
      .                       (path.span, ExprKind::Path(qself, path))
      .                   };
      .           
    166 ( 0.00%)          let expr = self.mk_expr(lo.to(hi), kind, attrs);
    249 ( 0.00%)          self.maybe_recover_from_bad_qpath(expr, true)
    996 ( 0.00%)      }
      .           
      .               /// Parse `'label: $expr`. The label is already parsed.
      .               fn parse_labeled_expr(
      .                   &mut self,
      .                   label: Label,
      .                   attrs: AttrVec,
      .                   mut consume_colon: bool,
      .               ) -> PResult<'a, P<Expr>> {
-- line 1447 ----------------------------------------
-- line 1607 ----------------------------------------
      .                               symbol_unescaped,
      .                           }),
      .                           _ => Err(Some(lit)),
      .                       },
      .                       None => Err(None),
      .                   }
      .               }
      .           
    207 ( 0.00%)      pub(super) fn parse_lit(&mut self) -> PResult<'a, Lit> {
     23 ( 0.00%)          self.parse_opt_lit().ok_or_else(|| {
      2 ( 0.00%)              if let token::Interpolated(inner) = &self.token.kind {
      .                           let expr = match inner.as_ref() {
      .                               token::NtExpr(expr) => Some(expr),
      .                               token::NtLiteral(expr) => Some(expr),
      .                               _ => None,
      .                           };
      .                           if let Some(expr) = expr {
      .                               if matches!(expr.kind, ExprKind::Err) {
      .                                   self.diagnostic()
      .                                       .delay_span_bug(self.token.span, &"invalid interpolated expression");
      .                                   return self.diagnostic().struct_dummy();
      .                               }
      .                           }
      .                       }
     11 ( 0.00%)              let msg = format!("unexpected token: {}", super::token_descr(&self.token));
      1 ( 0.00%)              self.struct_span_err(self.token.span, &msg)
      .                   })
    161 ( 0.00%)      }
      .           
      .               /// Matches `lit = true | false | token_lit`.
      .               /// Returns `None` if the next token is not a literal.
263,187 ( 0.03%)      pub(super) fn parse_opt_lit(&mut self) -> Option<Lit> {
 29,243 ( 0.00%)          let mut recovered = None;
175,458 ( 0.02%)          if self.token == token::Dot {
      .                       // Attempt to recover `.4` as `0.4`. We don't currently have any syntax where
      .                       // dot would follow an optional literal, so we do this unconditionally.
      .                       recovered = self.look_ahead(1, |next_token| {
      .                           if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =
      .                               next_token.kind
      .                           {
      .                               if self.token.span.hi() == next_token.span.lo() {
      .                                   let s = String::from("0.") + symbol.as_str();
-- line 1648 ----------------------------------------
-- line 1654 ----------------------------------------
      .                       });
      .                       if let Some(token) = &recovered {
      .                           self.bump();
      .                           self.error_float_lits_must_have_int_part(&token);
      .                       }
      .                   }
      .           
      .                   let token = recovered.as_ref().unwrap_or(&self.token);
 87,732 ( 0.01%)          match Lit::from_token(token) {
175,452 ( 0.02%)              Ok(lit) => {
 58,484 ( 0.01%)                  self.bump();
175,452 ( 0.02%)                  Some(lit)
      .                       }
      1 ( 0.00%)              Err(LitError::NotLiteral) => None,
      .                       Err(err) => {
      .                           let span = token.span;
      .                           let lit = match token.kind {
      .                               token::Literal(lit) => lit,
      .                               _ => unreachable!(),
      .                           };
      .                           self.bump();
      .                           self.report_lit_error(err, lit, span);
-- line 1675 ----------------------------------------
-- line 1676 ----------------------------------------
      .                           // Pack possible quotes and prefixes from the original literal into
      .                           // the error literal's symbol so they can be pretty-printed faithfully.
      .                           let suffixless_lit = token::Lit::new(lit.kind, lit.symbol, None);
      .                           let symbol = Symbol::intern(&suffixless_lit.to_string());
      .                           let lit = token::Lit::new(token::Err, symbol, lit.suffix);
      .                           Some(Lit::from_lit_token(lit, span).unwrap_or_else(|_| unreachable!()))
      .                       }
      .                   }
233,944 ( 0.02%)      }
      .           
      .               fn error_float_lits_must_have_int_part(&self, token: &Token) {
      .                   self.struct_span_err(token.span, "float literals must have an integer part")
      .                       .span_suggestion(
      .                           token.span,
      .                           "must have an integer part",
      .                           pprust::token_to_string(token).into(),
      .                           Applicability::MachineApplicable,
-- line 1692 ----------------------------------------
-- line 1795 ----------------------------------------
      .                       };
      .                       err.span_label(sp, format!("invalid suffix `{}`", suf));
      .                       err.emit();
      .                   }
      .               }
      .           
      .               /// Matches `'-' lit | lit` (cf. `ast_validation::AstValidator::check_expr_within_pat`).
      .               /// Keep this in sync with `Token::can_begin_literal_maybe_minus`.
    176 ( 0.00%)      pub fn parse_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {
     44 ( 0.00%)          maybe_whole_expr!(self);
      .           
     22 ( 0.00%)          let lo = self.token.span;
      .                   let minus_present = self.eat(&token::BinOp(token::Minus));
     44 ( 0.00%)          let lit = self.parse_lit()?;
     22 ( 0.00%)          let expr = self.mk_expr(lit.span, ExprKind::Lit(lit), AttrVec::new());
      .           
     44 ( 0.00%)          if minus_present {
      .                       Ok(self.mk_expr(
      .                           lo.to(self.prev_token.span),
      .                           self.mk_unary(UnOp::Neg, expr),
      .                           AttrVec::new(),
      .                       ))
      .                   } else {
      .                       Ok(expr)
      .                   }
    198 ( 0.00%)      }
      .           
      .               fn is_array_like_block(&mut self) -> bool {
      .                   self.look_ahead(1, |t| matches!(t.kind, TokenKind::Ident(..) | TokenKind::Literal(_)))
      .                       && self.look_ahead(2, |t| t == &token::Comma)
      .                       && self.look_ahead(3, |t| t.can_begin_expr())
      .               }
      .           
      .               /// Emits a suggestion if it looks like the user meant an array but
-- line 1828 ----------------------------------------
-- line 2235 ----------------------------------------
      .                   lo: Span,
      .                   mut attrs: AttrVec,
      .               ) -> PResult<'a, P<Expr>> {
      .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
      .                   attrs.extend(iattrs);
      .                   Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::Loop(body, opt_label), attrs))
      .               }
      .           
     52 ( 0.00%)      fn eat_label(&mut self) -> Option<Label> {
     52 ( 0.00%)          self.token.lifetime().map(|ident| {
      .                       self.bump();
      .                       Label { ident }
      .                   })
     52 ( 0.00%)      }
      .           
      .               /// Parses a `match ... { ... }` expression (`match` token already eaten).
     20 ( 0.00%)      fn parse_match_expr(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
      4 ( 0.00%)          let match_span = self.prev_token.span;
      .                   let lo = self.prev_token.span;
      4 ( 0.00%)          let scrutinee = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;
     10 ( 0.00%)          if let Err(mut e) = self.expect(&token::OpenDelim(token::Brace)) {
      .                       if self.token == token::Semi {
      .                           e.span_suggestion_short(
      .                               match_span,
      .                               "try removing this `match`",
      .                               String::new(),
      .                               Applicability::MaybeIncorrect, // speculative
      .                           );
      .                       }
      .                       return Err(e);
      .                   }
     12 ( 0.00%)          attrs.extend(self.parse_inner_attributes()?);
      .           
      .                   let mut arms: Vec<Arm> = Vec::new();
     30 ( 0.00%)          while self.token != token::CloseDelim(token::Brace) {
     39 ( 0.00%)              match self.parse_arm() {
    104 ( 0.00%)                  Ok(arm) => arms.push(arm),
      .                           Err(mut e) => {
      .                               // Recover by skipping to the end of the block.
      .                               e.emit();
      .                               self.recover_stmt();
      .                               let span = lo.to(self.token.span);
      .                               if self.token == token::CloseDelim(token::Brace) {
      .                                   self.bump();
      .                               }
      .                               return Ok(self.mk_expr(span, ExprKind::Match(scrutinee, arms), attrs));
      .                           }
      .                       }
      .                   }
      2 ( 0.00%)          let hi = self.token.span;
      4 ( 0.00%)          self.bump();
      8 ( 0.00%)          Ok(self.mk_expr(lo.to(hi), ExprKind::Match(scrutinee, arms), attrs))
     20 ( 0.00%)      }
      .           
      .               /// Attempt to recover from match arm body with statements and no surrounding braces.
      .               fn parse_arm_body_missing_braces(
      .                   &mut self,
      .                   first_expr: &P<Expr>,
      .                   arrow_span: Span,
      .               ) -> Option<P<Expr>> {
     55 ( 0.00%)          if self.token.kind != token::Semi {
      .                       return None;
      .                   }
      .                   let start_snapshot = self.clone();
      .                   let semi_sp = self.token.span;
      .                   self.bump(); // `;`
      .                   let mut stmts =
      .                       vec![self.mk_stmt(first_expr.span, ast::StmtKind::Expr(first_expr.clone()))];
      .                   let err = |this: &mut Parser<'_>, stmts: Vec<ast::Stmt>| {
-- line 2303 ----------------------------------------
-- line 2389 ----------------------------------------
      .                               let lhs_rslt = check_let_expr(lhs);
      .                               let rhs_rslt = check_let_expr(rhs);
      .                               (lhs_rslt.0 || rhs_rslt.0, false)
      .                           }
      .                           ExprKind::Let(..) => (true, true),
      .                           _ => (false, true),
      .                       }
      .                   }
     39 ( 0.00%)          let attrs = self.parse_outer_attributes()?;
    130 ( 0.00%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
     26 ( 0.00%)              let lo = this.token.span;
     39 ( 0.00%)              let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;
      .                       let guard = if this.eat_keyword(kw::If) {
      .                           let if_span = this.prev_token.span;
      .                           let cond = this.parse_expr()?;
      .                           let (has_let_expr, does_not_have_bin_op) = check_let_expr(&cond);
      .                           if has_let_expr {
      .                               if does_not_have_bin_op {
      .                                   // Remove the last feature gating of a `let` expression since it's stable.
      .                                   this.sess.gated_spans.ungate_last(sym::let_chains, cond.span);
      .                               }
      .                               let span = if_span.to(cond.span);
      .                               this.sess.gated_spans.gate(sym::if_let_guard, span);
      .                           }
      .                           Some(cond)
      .                       } else {
     52 ( 0.00%)                  None
      .                       };
     26 ( 0.00%)              let arrow_span = this.token.span;
     65 ( 0.00%)              if let Err(mut err) = this.expect(&token::FatArrow) {
      .                           // We might have a `=>` -> `=` or `->` typo (issue #89396).
      .                           if TokenKind::FatArrow
      .                               .similar_tokens()
      .                               .map_or(false, |similar_tokens| similar_tokens.contains(&this.token.kind))
      .                           {
      .                               err.span_suggestion(
      .                                   this.token.span,
      .                                   "try using a fat arrow here",
-- line 2426 ----------------------------------------
-- line 2428 ----------------------------------------
      .                                   Applicability::MaybeIncorrect,
      .                               );
      .                               err.emit();
      .                               this.bump();
      .                           } else {
      .                               return Err(err);
      .                           }
      .                       }
     26 ( 0.00%)              let arm_start_span = this.token.span;
      .           
     39 ( 0.00%)              let expr = this.parse_expr_res(Restrictions::STMT_EXPR, None).map_err(|mut err| {
      .                           err.span_label(arrow_span, "while parsing the `match` arm starting here");
      .                           err
      .                       })?;
      .           
     52 ( 0.00%)              let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)
      .                           && this.token != token::CloseDelim(token::Brace);
      .           
     26 ( 0.00%)              let hi = this.prev_token.span;
      .           
     26 ( 0.00%)              if require_comma {
     22 ( 0.00%)                  let sm = this.sess.source_map();
     44 ( 0.00%)                  if let Some(body) = this.parse_arm_body_missing_braces(&expr, arrow_span) {
      .                               let span = body.span;
      .                               return Ok((
      .                                   ast::Arm {
      .                                       attrs: attrs.into(),
      .                                       pat,
      .                                       guard,
      .                                       body,
      .                                       span,
      .                                       id: DUMMY_NODE_ID,
      .                                       is_placeholder: false,
      .                                   },
      .                                   TrailingToken::None,
      .                               ));
     11 ( 0.00%)                  }
    110 ( 0.00%)                  this.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]).map_err(
     99 ( 0.00%)                      |mut err| {
      .                                   match (sm.span_to_lines(expr.span), sm.span_to_lines(arm_start_span)) {
      .                                       (Ok(ref expr_lines), Ok(ref arm_start_lines))
      .                                           if arm_start_lines.lines[0].end_col
      .                                               == expr_lines.lines[0].end_col
      .                                               && expr_lines.lines.len() == 2
      .                                               && this.token == token::FatArrow =>
      .                                       {
      .                                           // We check whether there's any trailing code in the parse span,
-- line 2474 ----------------------------------------
-- line 2498 ----------------------------------------
      .                                   }
      .                                   err
      .                               },
      .                           )?;
      .                       } else {
      .                           this.eat(&token::Comma);
      .                       }
      .           
    130 ( 0.00%)              Ok((
      .                           ast::Arm {
     52 ( 0.00%)                      attrs: attrs.into(),
     26 ( 0.00%)                      pat,
     26 ( 0.00%)                      guard,
     52 ( 0.00%)                      body: expr,
     13 ( 0.00%)                      span: lo.to(hi),
      .                               id: DUMMY_NODE_ID,
      .                               is_placeholder: false,
      .                           },
      .                           TrailingToken::None,
      .                       ))
    104 ( 0.00%)          })
      .               }
      .           
      .               /// Parses a `try {...}` expression (`try` token already eaten).
      .               fn parse_try_block(&mut self, span_lo: Span, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
      .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
      .                   attrs.extend(iattrs);
      .                   if self.eat_keyword(kw::Catch) {
      .                       let mut error = self.struct_span_err(
-- line 2526 ----------------------------------------
-- line 2532 ----------------------------------------
      .                       Err(error)
      .                   } else {
      .                       let span = span_lo.to(body.span);
      .                       self.sess.gated_spans.gate(sym::try_blocks, span);
      .                       Ok(self.mk_expr(span, ExprKind::TryBlock(body), attrs))
      .                   }
      .               }
      .           
     88 ( 0.00%)      fn is_do_catch_block(&self) -> bool {
     55 ( 0.00%)          self.token.is_keyword(kw::Do)
      .                       && self.is_keyword_ahead(1, &[kw::Catch])
      .                       && self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))
      .                       && !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)
     88 ( 0.00%)      }
      .           
     88 ( 0.00%)      fn is_try_block(&self) -> bool {
     66 ( 0.00%)          self.token.is_keyword(kw::Try)
      .                       && self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))
      .                       && self.token.uninterpolated_span().rust_2018()
     88 ( 0.00%)      }
      .           
      .               /// Parses an `async move? {...}` expression.
      .               fn parse_async_block(&mut self, mut attrs: AttrVec) -> PResult<'a, P<Expr>> {
      .                   let lo = self.token.span;
      .                   self.expect_keyword(kw::Async)?;
      .                   let capture_clause = self.parse_capture_clause()?;
      .                   let (iattrs, body) = self.parse_inner_attrs_and_block()?;
      .                   attrs.extend(iattrs);
-- line 2559 ----------------------------------------
-- line 2569 ----------------------------------------
      .                               && self.look_ahead(2, |t| *t == token::OpenDelim(token::Brace))
      .                       ) || (
      .                           // `async {`
      .                           self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace))
      .                       ))
      .               }
      .           
      .               fn is_certainly_not_a_block(&self) -> bool {
      8 ( 0.00%)          self.look_ahead(1, |t| t.is_ident())
      .                       && (
      .                           // `{ ident, ` cannot start a block.
      .                           self.look_ahead(2, |t| t == &token::Comma)
      .                               || self.look_ahead(2, |t| t == &token::Colon)
      .                                   && (
      .                                       // `{ ident: token, ` cannot start a block.
      .                                       self.look_ahead(4, |t| t == &token::Comma) ||
      .                           // `{ ident: ` cannot start a block unless it's a type ascription `ident: Type`.
-- line 2585 ----------------------------------------
-- line 2589 ----------------------------------------
      .               }
      .           
      .               fn maybe_parse_struct_expr(
      .                   &mut self,
      .                   qself: Option<&ast::QSelf>,
      .                   path: &ast::Path,
      .                   attrs: &AttrVec,
      .               ) -> Option<PResult<'a, P<Expr>>> {
      4 ( 0.00%)          let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);
      2 ( 0.00%)          if struct_allowed || self.is_certainly_not_a_block() {
      .                       if let Err(err) = self.expect(&token::OpenDelim(token::Brace)) {
      .                           return Some(Err(err));
      .                       }
      .                       let expr = self.parse_struct_expr(qself.cloned(), path.clone(), attrs.clone(), true);
      .                       if let (Ok(expr), false) = (&expr, struct_allowed) {
      .                           // This is a struct literal, but we don't can't accept them here.
      .                           self.error_struct_lit_not_allowed_here(path.span, expr.span);
      .                       }
-- line 2606 ----------------------------------------
-- line 2903 ----------------------------------------
      .           
      .               pub(super) fn mk_expr_err(&self, span: Span) -> P<Expr> {
      .                   self.mk_expr(span, ExprKind::Err, AttrVec::new())
      .               }
      .           
      .               /// Create expression span ensuring the span of the parent node
      .               /// is larger than the span of lhs and rhs, including the attributes.
      .               fn mk_expr_sp(&self, lhs: &P<Expr>, lhs_span: Span, rhs_span: Span) -> Span {
     22 ( 0.00%)          lhs.attrs
      .                       .iter()
      .                       .find(|a| a.style == AttrStyle::Outer)
      .                       .map_or(lhs_span, |a| a.span)
      .                       .to(rhs_span)
      .               }
      .           
      .               fn collect_tokens_for_expr(
      .                   &mut self,
      .                   attrs: AttrWrapper,
      .                   f: impl FnOnce(&mut Self, Vec<ast::Attribute>) -> PResult<'a, P<Expr>>,
      .               ) -> PResult<'a, P<Expr>> {
263,997 ( 0.03%)          self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {
205,679 ( 0.02%)              let res = f(this, attrs)?;
 29,377 ( 0.00%)              let trailing = if this.restrictions.contains(Restrictions::STMT_EXPR)
     60 ( 0.00%)                  && this.token.kind == token::Semi
      .                       {
      .                           TrailingToken::Semi
      .                       } else {
      .                           // FIXME - pass this through from the place where we know
      .                           // we need a comma, rather than assuming that `#[attr] expr,`
      .                           // always captures a trailing comma
      .                           TrailingToken::MaybeComma
      .                       };
 87,999 ( 0.01%)              Ok((res, trailing))
234,664 ( 0.02%)          })
      .               }
      .           }

914,503 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/mem_categorization.rs
--------------------------------------------------------------------------------
Ir               

-- line 96 ----------------------------------------
      .               body_owner: LocalDefId,
      .               upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,
      .           }
      .           
      .           crate type McResult<T> = Result<T, ()>;
      .           
      .           impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {
      .               /// Creates a `MemCategorizationContext`.
267,678 ( 0.03%)      crate fn new(
      .                   infcx: &'a InferCtxt<'a, 'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .                   body_owner: LocalDefId,
      .                   typeck_results: &'a ty::TypeckResults<'tcx>,
      .               ) -> MemCategorizationContext<'a, 'tcx> {
148,710 ( 0.02%)          MemCategorizationContext {
      .                       typeck_results,
      .                       infcx,
      .                       param_env,
      .                       body_owner,
 29,742 ( 0.00%)              upvars: infcx.tcx.upvars_mentioned(body_owner),
      .                   }
267,678 ( 0.03%)      }
      .           
      .               crate fn tcx(&self) -> TyCtxt<'tcx> {
      .                   self.infcx.tcx
      .               }
      .           
      .               crate fn type_is_copy_modulo_regions(&self, ty: Ty<'tcx>, span: Span) -> bool {
      .                   self.infcx.type_is_copy_modulo_regions(self.param_env, ty, span)
      .               }
-- line 125 ----------------------------------------
-- line 135 ----------------------------------------
      .                   self.infcx.is_tainted_by_errors()
      .               }
      .           
      .               fn resolve_type_vars_or_error(
      .                   &self,
      .                   id: hir::HirId,
      .                   ty: Option<Ty<'tcx>>,
      .               ) -> McResult<Ty<'tcx>> {
 59,132 ( 0.01%)          match ty {
      .                       Some(ty) => {
      .                           let ty = self.resolve_vars_if_possible(ty);
 59,132 ( 0.01%)                  if ty.references_error() || ty.is_ty_var() {
      .                               debug!("resolve_type_vars_or_error: error from {:?}", ty);
      .                               Err(())
      .                           } else {
      .                               Ok(ty)
      .                           }
      .                       }
      .                       // FIXME
      .                       None if self.is_tainted_by_errors() => Err(()),
-- line 154 ----------------------------------------
-- line 162 ----------------------------------------
      .                   }
      .               }
      .           
      .               crate fn node_ty(&self, hir_id: hir::HirId) -> McResult<Ty<'tcx>> {
      .                   self.resolve_type_vars_or_error(hir_id, self.typeck_results.node_type_opt(hir_id))
      .               }
      .           
      .               fn expr_ty(&self, expr: &hir::Expr<'_>) -> McResult<Ty<'tcx>> {
266,094 ( 0.03%)          self.resolve_type_vars_or_error(expr.hir_id, self.typeck_results.expr_ty_opt(expr))
      .               }
      .           
      .               crate fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> McResult<Ty<'tcx>> {
      .                   self.resolve_type_vars_or_error(expr.hir_id, self.typeck_results.expr_ty_adjusted_opt(expr))
      .               }
      .           
      .               /// Returns the type of value that this pattern matches against.
      .               /// Some non-obvious cases:
-- line 178 ----------------------------------------
-- line 239 ----------------------------------------
      .               crate fn cat_expr(&self, expr: &hir::Expr<'_>) -> McResult<PlaceWithHirId<'tcx>> {
      .                   // This recursion helper avoids going through *too many*
      .                   // adjustments, since *only* non-overloaded deref recurses.
      .                   fn helper<'a, 'tcx>(
      .                       mc: &MemCategorizationContext<'a, 'tcx>,
      .                       expr: &hir::Expr<'_>,
      .                       adjustments: &[adjustment::Adjustment<'tcx>],
      .                   ) -> McResult<PlaceWithHirId<'tcx>> {
     62 ( 0.00%)              match adjustments.split_last() {
     62 ( 0.00%)                  None => mc.cat_expr_unadjusted(expr),
      .                           Some((adjustment, previous)) => {
      .                               mc.cat_expr_adjusted_with(expr, || helper(mc, expr, previous), adjustment)
      .                           }
      .                       }
      .                   }
      .           
     93 ( 0.00%)          helper(self, expr, self.typeck_results.expr_adjustments(expr))
      .               }
      .           
    979 ( 0.00%)      crate fn cat_expr_adjusted(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   previous: PlaceWithHirId<'tcx>,
      .                   adjustment: &adjustment::Adjustment<'tcx>,
      .               ) -> McResult<PlaceWithHirId<'tcx>> {
    712 ( 0.00%)          self.cat_expr_adjusted_with(expr, || Ok(previous), adjustment)
    801 ( 0.00%)      }
      .           
      .               fn cat_expr_adjusted_with<F>(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   previous: F,
      .                   adjustment: &adjustment::Adjustment<'tcx>,
      .               ) -> McResult<PlaceWithHirId<'tcx>>
      .               where
      .                   F: FnOnce() -> McResult<PlaceWithHirId<'tcx>>,
      .               {
      .                   debug!("cat_expr_adjusted_with({:?}): {:?}", adjustment, expr);
    178 ( 0.00%)          let target = self.resolve_vars_if_possible(adjustment.target);
    178 ( 0.00%)          match adjustment.kind {
     30 ( 0.00%)              adjustment::Adjust::Deref(overloaded) => {
      .                           // Equivalent to *expr or something similar.
     90 ( 0.00%)                  let base = if let Some(deref) = overloaded {
      .                               let ref_ty = self
      .                                   .tcx()
      .                                   .mk_ref(deref.region, ty::TypeAndMut { ty: target, mutbl: deref.mutbl });
      .                               self.cat_rvalue(expr.hir_id, expr.span, ref_ty)
      .                           } else {
    300 ( 0.00%)                      previous()?
      .                           };
    570 ( 0.00%)                  self.cat_deref(expr, base)
      .                       }
      .           
      .                       adjustment::Adjust::NeverToAny
      .                       | adjustment::Adjust::Pointer(_)
      .                       | adjustment::Adjust::Borrow(_) => {
      .                           // Result is an rvalue.
    649 ( 0.00%)                  Ok(self.cat_rvalue(expr.hir_id, expr.span, target))
      .                       }
      .                   }
     30 ( 0.00%)      }
      .           
266,094 ( 0.03%)      crate fn cat_expr_unadjusted(&self, expr: &hir::Expr<'_>) -> McResult<PlaceWithHirId<'tcx>> {
      .                   debug!("cat_expr: id={} expr={:?}", expr.hir_id, expr);
      .           
      .                   let expr_ty = self.expr_ty(expr)?;
147,830 ( 0.02%)          match expr.kind {
      .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref e_base) => {
      .                           if self.typeck_results.is_method_call(expr) {
      .                               self.cat_overloaded_place(expr, e_base)
      .                           } else {
      .                               let base = self.cat_expr(e_base)?;
      .                               self.cat_deref(expr, base)
      .                           }
      .                       }
-- line 313 ----------------------------------------
-- line 340 ----------------------------------------
      .                               // dereferencing.
      .                               self.cat_overloaded_place(expr, base)
      .                           } else {
      .                               let base = self.cat_expr(base)?;
      .                               Ok(self.cat_projection(expr, base, expr_ty, ProjectionKind::Index))
      .                           }
      .                       }
      .           
    120 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
    600 ( 0.00%)                  let res = self.typeck_results.qpath_res(qpath, expr.hir_id);
  1,680 ( 0.00%)                  self.cat_res(expr.hir_id, expr.span, expr_ty, res)
      .                       }
      .           
      .                       hir::ExprKind::Type(ref e, _) => self.cat_expr(e),
      .           
      .                       hir::ExprKind::AddrOf(..)
      .                       | hir::ExprKind::Call(..)
      .                       | hir::ExprKind::Assign(..)
      .                       | hir::ExprKind::AssignOp(..)
-- line 358 ----------------------------------------
-- line 374 ----------------------------------------
      .                       | hir::ExprKind::Lit(..)
      .                       | hir::ExprKind::ConstBlock(..)
      .                       | hir::ExprKind::Break(..)
      .                       | hir::ExprKind::Continue(..)
      .                       | hir::ExprKind::Struct(..)
      .                       | hir::ExprKind::Repeat(..)
      .                       | hir::ExprKind::InlineAsm(..)
      .                       | hir::ExprKind::Box(..)
206,122 ( 0.02%)              | hir::ExprKind::Err => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),
      .                   }
266,094 ( 0.03%)      }
      .           
  1,320 ( 0.00%)      crate fn cat_res(
      .                   &self,
      .                   hir_id: hir::HirId,
      .                   span: Span,
      .                   expr_ty: Ty<'tcx>,
      .                   res: Res,
      .               ) -> McResult<PlaceWithHirId<'tcx>> {
      .                   debug!("cat_res: id={:?} expr={:?} def={:?}", hir_id, expr_ty, res);
      .           
    784 ( 0.00%)          match res {
      .                       Res::Def(
      .                           DefKind::Ctor(..)
      .                           | DefKind::Const
      .                           | DefKind::ConstParam
      .                           | DefKind::AssocConst
      .                           | DefKind::Fn
      .                           | DefKind::AssocFn,
      .                           _,
      .                       )
      .                       | Res::SelfCtor(..) => Ok(self.cat_rvalue(hir_id, span, expr_ty)),
      .           
      .                       Res::Def(DefKind::Static, _) => {
    168 ( 0.00%)                  Ok(PlaceWithHirId::new(hir_id, expr_ty, PlaceBase::StaticItem, Vec::new()))
      .                       }
      .           
    256 ( 0.00%)              Res::Local(var_id) => {
     64 ( 0.00%)                  if self.upvars.map_or(false, |upvars| upvars.contains_key(&var_id)) {
      .                               self.cat_upvar(hir_id, var_id)
      .                           } else {
    640 ( 0.00%)                      Ok(PlaceWithHirId::new(hir_id, expr_ty, PlaceBase::Local(var_id), Vec::new()))
      .                           }
      .                       }
      .           
      .                       def => span_bug!(span, "unexpected definition in memory categorization: {:?}", def),
      .                   }
    960 ( 0.00%)      }
      .           
      .               /// Categorize an upvar.
      .               ///
      .               /// Note: the actual upvar access contains invisible derefs of closure
      .               /// environment and upvar reference as appropriate. Only regionck cares
      .               /// about these dereferences, so we let it compute them as needed.
      .               fn cat_upvar(&self, hir_id: hir::HirId, var_id: hir::HirId) -> McResult<PlaceWithHirId<'tcx>> {
      .                   let closure_expr_def_id = self.body_owner;
-- line 429 ----------------------------------------
-- line 442 ----------------------------------------
      .           
      .               crate fn cat_rvalue(
      .                   &self,
      .                   hir_id: hir::HirId,
      .                   span: Span,
      .                   expr_ty: Ty<'tcx>,
      .               ) -> PlaceWithHirId<'tcx> {
      .                   debug!("cat_rvalue hir_id={:?}, expr_ty={:?}, span={:?}", hir_id, expr_ty, span);
177,457 ( 0.02%)          let ret = PlaceWithHirId::new(hir_id, expr_ty, PlaceBase::Rvalue, Vec::new());
      .                   debug!("cat_rvalue ret={:?}", ret);
      .                   ret
      .               }
      .           
      .               crate fn cat_projection<N: HirNode>(
      .                   &self,
      .                   node: &N,
      .                   base_place: PlaceWithHirId<'tcx>,
-- line 458 ----------------------------------------
-- line 489 ----------------------------------------
      .                       _ => span_bug!(expr.span, "cat_overloaded_place: base is not a reference"),
      .                   };
      .                   let ref_ty = self.tcx().mk_ref(region, ty::TypeAndMut { ty: place_ty, mutbl });
      .           
      .                   let base = self.cat_rvalue(expr.hir_id, expr.span, ref_ty);
      .                   self.cat_deref(expr, base)
      .               }
      .           
    300 ( 0.00%)      fn cat_deref(
      .                   &self,
      .                   node: &impl HirNode,
      .                   base_place: PlaceWithHirId<'tcx>,
      .               ) -> McResult<PlaceWithHirId<'tcx>> {
      .                   debug!("cat_deref: base_place={:?}", base_place);
      .           
     60 ( 0.00%)          let base_curr_ty = base_place.place.ty();
    150 ( 0.00%)          let deref_ty = match base_curr_ty.builtin_deref(true) {
      .                       Some(mt) => mt.ty,
      .                       None => {
      .                           debug!("explicit deref of non-derefable type: {:?}", base_curr_ty);
      .                           return Err(());
      .                       }
      .                   };
    120 ( 0.00%)          let mut projections = base_place.place.projections;
      .                   projections.push(Projection { kind: ProjectionKind::Deref, ty: deref_ty });
      .           
    150 ( 0.00%)          let ret = PlaceWithHirId::new(
      .                       node.hir_id(),
     30 ( 0.00%)              base_place.place.base_ty,
     60 ( 0.00%)              base_place.place.base,
    120 ( 0.00%)              projections,
      .                   );
      .                   debug!("cat_deref ret {:?}", ret);
    240 ( 0.00%)          Ok(ret)
    210 ( 0.00%)      }
      .           
      .               crate fn cat_pattern<F>(
      .                   &self,
      .                   place: PlaceWithHirId<'tcx>,
      .                   pat: &hir::Pat<'_>,
      .                   mut op: F,
      .               ) -> McResult<()>
      .               where
      .                   F: FnMut(&PlaceWithHirId<'tcx>, &hir::Pat<'_>),
      .               {
    650 ( 0.00%)          self.cat_pattern_(place, pat, &mut op)
      .               }
      .           
      .               /// Returns the variant index for an ADT used within a Struct or TupleStruct pattern
      .               /// Here `pat_hir_id` is the HirId of the pattern itself.
      .               fn variant_index_for_adt(
      .                   &self,
      .                   qpath: &hir::QPath<'_>,
      .                   pat_hir_id: hir::HirId,
-- line 542 ----------------------------------------
-- line 599 ----------------------------------------
      .                       _ => {
      .                           self.tcx().sess.delay_span_bug(span, "tuple pattern not applied to a tuple");
      .                           Err(())
      .                       }
      .                   }
      .               }
      .           
      .               // FIXME(#19596) This is a workaround, but there should be a better way to do this
    550 ( 0.00%)      fn cat_pattern_<F>(
      .                   &self,
      .                   mut place_with_id: PlaceWithHirId<'tcx>,
      .                   pat: &hir::Pat<'_>,
      .                   op: &mut F,
      .               ) -> McResult<()>
      .               where
      .                   F: FnMut(&PlaceWithHirId<'tcx>, &hir::Pat<'_>),
      .               {
-- line 615 ----------------------------------------
-- line 649 ----------------------------------------
      .                   //     Some(x, ) => { ... },
      .                   //     _ => { ... },
      .                   // }
      .                   // ```
      .                   //
      .                   // Then we see that to get the same result, we must start with
      .                   // `deref { deref { place_foo }}` instead of `place_foo` since the pattern is now `Some(x,)`
      .                   // and not `&&Some(x,)`, even though its assigned type is that of `&&Some(x,)`.
    400 ( 0.00%)          for _ in 0..self.typeck_results.pat_adjustments().get(pat.hir_id).map_or(0, |v| v.len()) {
      .                       debug!("cat_pattern: applying adjustment to place_with_id={:?}", place_with_id);
      .                       place_with_id = self.cat_deref(pat, place_with_id)?;
      .                   }
    650 ( 0.00%)          let place_with_id = place_with_id; // lose mutability
      .                   debug!("cat_pattern: applied adjustment derefs to get place_with_id={:?}", place_with_id);
      .           
      .                   // Invoke the callback, but only now, after the `place_with_id` has adjusted.
      .                   //
      .                   // To see that this makes sense, consider `match &Some(3) { Some(x) => { ... }}`. In that
      .                   // case, the initial `place_with_id` will be that for `&Some(3)` and the pattern is `Some(x)`. We
      .                   // don't want to call `op` with these incompatible values. As written, what happens instead
      .                   // is that `op` is called with the adjusted place (that for `*&Some(3)`) and the pattern
      .                   // `Some(x)` (which matches). Recursing once more, `*&Some(3)` and the pattern `Some(x)`
      .                   // result in the place `Downcast<Some>(*&Some(3)).0` associated to `x` and invoke `op` with
      .                   // that (where the `ref` on `x` is implied).
      .                   op(&place_with_id, pat);
      .           
    361 ( 0.00%)          match pat.kind {
      .                       PatKind::Tuple(subpats, dots_pos) => {
      .                           // (p1, ..., pN)
      .                           let total_fields = self.total_fields_in_tuple(pat.hir_id, pat.span)?;
      .           
      .                           for (i, subpat) in subpats.iter().enumerate_and_adjust(total_fields, dots_pos) {
      .                               let subpat_ty = self.pat_ty_adjusted(subpat)?;
      .                               let projection_kind = ProjectionKind::Field(i as u32, VariantIdx::new(0));
      .                               let sub_place =
-- line 683 ----------------------------------------
-- line 780 ----------------------------------------
      .                       | PatKind::Lit(..)
      .                       | PatKind::Range(..)
      .                       | PatKind::Wild => {
      .                           // always ok
      .                       }
      .                   }
      .           
      .                   Ok(())
    400 ( 0.00%)      }
      .           }

208,113 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/mem_categorization.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
      365 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      224 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
    9,648 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
    1,708 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
        .                   Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
-- line 69 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
      686 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
       98 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
      294 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
      196 ( 0.00%)              self.current_id = parent_id;
      784 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
      392 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
      882 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
    6,588 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    2,196 ( 0.00%)          if self.current_id.local_id.index() != 0 {
      219 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
      876 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
      513 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
       72 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
      954 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
      954 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
    5,856 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      217 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       31 ( 0.00%)          self.tcx.hir_crate(())
      248 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
    7,452 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
    3,009 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
    5,589 ( 0.00%)      }
        .           
        .               #[inline]
    8,024 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
    1,787 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
        .                       self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
    9,027 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
      629 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
        .               }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
      686 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
    1,274 ( 0.00%)          let def_kind = match self.find(hir_id)? {
      136 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 247 ----------------------------------------
        .                           ItemKind::GlobalAsm(..) => DefKind::GlobalAsm,
        .                           ItemKind::Impl { .. } => DefKind::Impl,
        .                       },
        .                       Node::ForeignItem(item) => match item.kind {
        .                           ForeignItemKind::Fn(..) => DefKind::Fn,
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
       70 ( 0.00%)              Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
       28 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
        .                           assert_ne!(variant_data.ctor_hir_id(), None);
-- line 268 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
      392 ( 0.00%)          Some(def_kind)
      980 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
  723,608 ( 0.08%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
   90,451 ( 0.01%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  180,312 ( 0.02%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   90,156 ( 0.01%)              let node = owner.nodes[id.local_id].as_ref()?;
  270,468 ( 0.03%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
  723,608 ( 0.08%)      }
        .           
      165 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
  535,259 ( 0.06%)          self.find_parent_node(hir_id).unwrap()
      330 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
   46,864 ( 0.00%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
    5,858 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
    5,553 ( 0.00%)              Some(owner.node.into())
        .                   } else {
      610 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
      305 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
      915 ( 0.00%)              Some(node.node)
        .                   }
   46,864 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
    1,505 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
    3,516 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
    1,940 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
    2,344 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
      238 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      119 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      238 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
    6,622 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    1,892 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
    7,568 ( 0.00%)      }
        .           
    6,615 ( 0.00%)      pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
    1,890 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
    7,560 ( 0.00%)      }
        .           
    5,684 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    1,624 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
    6,496 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
   14,287 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    4,082 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   16,328 ( 0.00%)      }
        .           
      219 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
      219 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      146 ( 0.00%)      }
        .           
       84 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
       84 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
       84 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
    9,856 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
    7,392 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
    9,856 ( 0.00%)      }
        .           
    3,200 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
    5,015 ( 0.00%)          self.local_def_id(self.body_owner(id))
    3,200 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
      441 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    1,451 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    1,323 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
    1,152 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
      896 ( 0.00%)      }
        .           
       36 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
      256 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
       74 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      108 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
    2,304 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
    5,496 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
      336 ( 0.00%)              Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
    2,304 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
    3,072 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
    4,608 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
      504 ( 0.00%)              BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
      216 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      216 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
      432 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
    3,456 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
      294 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
      640 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
      588 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
      576 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      126 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       14 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      126 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       50 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
       98 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
       70 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
        6 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      126 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
      392 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
      635 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      144 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       21 ( 0.00%)          let krate = self.krate();
       81 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
    2,940 ( 0.00%)              match owner.node() {
    1,598 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
       84 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      144 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
       34 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
       28 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
       35 ( 0.00%)              Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
      172 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
       22 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
       24 ( 0.00%)          for id in module.items.iter() {
    1,530 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.trait_items.iter() {
    1,400 ( 0.00%)              visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.impl_items.iter() {
    1,092 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
      176 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
       16 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
        6 ( 0.00%)              let items = self.tcx.hir_module_items(id);
       64 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
       98 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
      392 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
    2,019 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
      625 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
    5,625 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
    1,250 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
      714 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
      212 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
    2,471 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    1,059 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    2,824 ( 0.00%)      }
        .           
      392 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
      168 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      448 ( 0.00%)      }
        .           
      490 ( 0.00%)      pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
      210 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
      560 ( 0.00%)      }
        .           
        .               pub fn expect_variant(&self, id: HirId) -> &'hir Variant<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Variant(variant)) => variant,
        .                       _ => bug!("expected variant, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
-- line 920 ----------------------------------------
-- line 954 ----------------------------------------
        .                   match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
1,468,292 ( 0.15%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  209,756 ( 0.02%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
1,678,048 ( 0.18%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
      579 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
    1,065 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
      579 ( 0.00%)      }
        .           
    3,759 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
    3,759 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
      242 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
      234 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
      168 ( 0.00%)              Node::TraitItem(trait_item) => match &trait_item.kind {
      168 ( 0.00%)                  TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
      224 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
      224 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
        .                           _ => impl_item.span,
        .                       },
        .                       Node::Variant(variant) => variant.span,
        .                       Node::Field(field) => field.span,
        .                       Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
-- line 994 ----------------------------------------
-- line 1007 ----------------------------------------
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
    5,370 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
       56 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
      224 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
       84 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    1,285 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
      442 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
      525 ( 0.00%)          self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
      392 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
        5 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
       95 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       19 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
       18 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       12 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       10 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
       32 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
       22 ( 0.00%)      return ModuleItems {
        8 ( 0.00%)          submodules: submodules.into_boxed_slice(),
        8 ( 0.00%)          items: items.into_boxed_slice(),
        8 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
        8 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
        8 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
      159 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
      170 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      102 ( 0.00%)              self.items.push(item.item_id());
       68 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
        1 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
      198 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
        4 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
      105 ( 0.00%)              self.trait_items.push(item.trait_item_id());
      105 ( 0.00%)              intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
       84 ( 0.00%)              self.impl_items.push(item.impl_item_id());
       84 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
       16 ( 0.00%)  }

  211,848 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           };
        .           use crate::ty;
        .           
        .           /// This type represents an Allocation in the Miri/CTFE core engine.
        .           ///
        .           /// Its public API is rather low-level, working directly with allocation offsets and a custom error
        .           /// type to account for the lack of an AllocId on this level. The Miri/CTFE core engine `memory`
        .           /// module provides higher-level access.
    2,220 ( 0.00%)  #[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Allocation<Tag = AllocId, Extra = ()> {
        .               /// The actual bytes of the allocation.
        .               /// Note that the bytes of a pointer represent the offset of the pointer.
      246 ( 0.00%)      bytes: Box<[u8]>,
        .               /// Maps from byte addresses to extra data for each pointer.
        .               /// Only the first byte of a pointer is inserted into the map; i.e.,
        .               /// every entry in this map applies to `pointer_size` consecutive bytes starting
        .               /// at the given offset.
       12 ( 0.00%)      relocations: Relocations<Tag>,
        .               /// Denotes which part of this allocation is initialized.
        1 ( 0.00%)      init_mask: InitMask,
        .               /// The alignment of the allocation to detect unaligned reads.
        .               /// (`Align` guarantees that this is a power of two.)
       30 ( 0.00%)      pub align: Align,
        .               /// `true` if the allocation is mutable.
        .               /// Also used by codegen to determine if a static should be put into mutable memory,
        .               /// which happens for `static mut` and `static` with interior mutability.
       10 ( 0.00%)      pub mutability: Mutability,
        .               /// Extra state for the machine.
        .               pub extra: Extra,
        .           }
        .           
        .           /// We have our own error type that does not know about the `AllocId`; that information
        .           /// is added when converting to `InterpError`.
        .           #[derive(Debug)]
        .           pub enum AllocError {
-- line 53 ----------------------------------------
-- line 91 ----------------------------------------
        .           impl AllocRange {
        .               #[inline(always)]
        .               pub fn end(self) -> Size {
        .                   self.start + self.size // This does overflow checking.
        .               }
        .           
        .               /// Returns the `subrange` within this range; panics if it is not a subrange.
        .               #[inline]
   88,059 ( 0.01%)      pub fn subrange(self, subrange: AllocRange) -> AllocRange {
        .                   let sub_start = self.start + subrange.start;
        .                   let range = alloc_range(sub_start, subrange.size);
   88,059 ( 0.01%)          assert!(range.end() <= self.end(), "access outside the bounds for given AllocRange");
        .                   range
  264,177 ( 0.03%)      }
        .           }
        .           
        .           // The constructors are all without extra; the extra gets added by a machine hook later.
        .           impl<Tag> Allocation<Tag> {
        .               /// Creates an allocation initialized by the given bytes
        .               pub fn from_bytes<'a>(
        .                   slice: impl Into<Cow<'a, [u8]>>,
        .                   align: Align,
        .                   mutability: Mutability,
        .               ) -> Self {
        .                   let bytes = Box::<[u8]>::from(slice.into());
        .                   let size = Size::from_bytes(bytes.len());
       24 ( 0.00%)          Self {
        .                       bytes,
        .                       relocations: Relocations::new(),
        9 ( 0.00%)              init_mask: InitMask::new(size, true),
        .                       align,
        .                       mutability,
        .                       extra: (),
        .                   }
        .               }
        .           
        .               pub fn from_bytes_byte_aligned_immutable<'a>(slice: impl Into<Cow<'a, [u8]>>) -> Self {
        .                   Allocation::from_bytes(slice, Align::ONE, Mutability::Not)
        .               }
        .           
        .               /// Try to create an Allocation of `size` bytes, failing if there is not enough memory
        .               /// available to the compiler to do so.
    1,617 ( 0.00%)      pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {
        .                   let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).map_err(|_| {
        .                       // This results in an error that can happen non-deterministically, since the memory
        .                       // available to the compiler can change between runs. Normally queries are always
        .                       // deterministic. However, we can be non-determinstic here because all uses of const
        .                       // evaluation (including ConstProp!) will make compilation fail (via hard error
        .                       // or ICE) upon encountering a `MemoryExhausted` error.
        .                       if panic_on_fail {
        .                           panic!("Allocation::uninit called with panic_on_fail had allocation failure")
-- line 141 ----------------------------------------
-- line 142 ----------------------------------------
        .                       }
        .                       ty::tls::with(|tcx| {
        .                           tcx.sess.delay_span_bug(DUMMY_SP, "exhausted memory during interpreation")
        .                       });
        .                       InterpError::ResourceExhaustion(ResourceExhaustionInfo::MemoryExhausted)
        .                   })?;
        .                   // SAFETY: the box was zero-allocated, which is a valid initial value for Box<[u8]>
        .                   let bytes = unsafe { bytes.assume_init() };
    2,058 ( 0.00%)          Ok(Allocation {
        .                       bytes,
        .                       relocations: Relocations::new(),
      441 ( 0.00%)              init_mask: InitMask::new(size, false),
        .                       align,
        .                       mutability: Mutability::Mut,
        .                       extra: (),
        .                   })
    1,323 ( 0.00%)      }
        .           }
        .           
        .           impl Allocation {
        .               /// Convert Tag and add Extra fields
        .               pub fn convert_tag_add_extra<Tag, Extra>(
        .                   self,
        .                   cx: &impl HasDataLayout,
        .                   extra: Extra,
-- line 166 ----------------------------------------
-- line 190 ----------------------------------------
        .                       extra,
        .                   }
        .               }
        .           }
        .           
        .           /// Raw accessors. Provide access to otherwise private bytes.
        .           impl<Tag, Extra> Allocation<Tag, Extra> {
        .               pub fn len(&self) -> usize {
       97 ( 0.00%)          self.bytes.len()
        .               }
        .           
        .               pub fn size(&self) -> Size {
   88,055 ( 0.01%)          Size::from_bytes(self.len())
        .               }
        .           
        .               /// Looks at a slice which may describe uninitialized bytes or describe a relocation. This differs
        .               /// from `get_bytes_with_uninit_and_ptr` in that it does no relocation checks (even on the
        .               /// edges) at all.
        .               /// This must not be used for reads affecting the interpreter execution.
        .               pub fn inspect_with_uninit_and_ptr_outside_interpreter(&self, range: Range<usize>) -> &[u8] {
       31 ( 0.00%)          &self.bytes[range]
        .               }
        .           
        .               /// Returns the mask indicating which bytes are initialized.
        .               pub fn init_mask(&self) -> &InitMask {
        .                   &self.init_mask
        .               }
        .           
        .               /// Returns the relocation list.
-- line 218 ----------------------------------------
-- line 227 ----------------------------------------
        .               /// or pointer bytes. You should never call this, call `get_bytes` or
        .               /// `get_bytes_with_uninit_and_ptr` instead,
        .               ///
        .               /// This function also guarantees that the resulting pointer will remain stable
        .               /// even when new allocations are pushed to the `HashMap`. `copy_repeatedly` relies
        .               /// on that.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
  704,760 ( 0.07%)      fn get_bytes_internal(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   check_init_and_ptr: bool,
        .               ) -> AllocResult<&[u8]> {
  117,460 ( 0.01%)          if check_init_and_ptr {
        .                       self.check_init(range)?;
        .                       self.check_relocations(cx, range)?;
        .                   } else {
        .                       // We still don't want relocations on the *edges*.
        .                       self.check_relocation_edges(cx, range)?;
        .                   }
        .           
  234,920 ( 0.02%)          Ok(&self.bytes[range.start.bytes_usize()..range.end().bytes_usize()])
  528,570 ( 0.06%)      }
        .           
        .               /// Checks that these bytes are initialized and not pointer bytes, and then return them
        .               /// as a slice.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods
        .               /// on `InterpCx` instead.
        .               #[inline]
-- line 258 ----------------------------------------
-- line 265 ----------------------------------------
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               #[inline]
        .               pub fn get_bytes_with_uninit_and_ptr(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<&[u8]> {
  117,460 ( 0.01%)          self.get_bytes_internal(cx, range, false)
        .               }
        .           
        .               /// Just calling this already marks everything as defined and removes relocations,
        .               /// so be sure to actually put data there!
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to use the `PlaceTy` and `OperandTy`-based methods
        .               /// on `InterpCx` instead.
  322,619 ( 0.03%)      pub fn get_bytes_mut(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<&mut [u8]> {
        .                   self.mark_init(range, true);
  146,645 ( 0.02%)          self.clear_relocations(cx, range)?;
        .           
  117,316 ( 0.01%)          Ok(&mut self.bytes[range.start.bytes_usize()..range.end().bytes_usize()])
  234,632 ( 0.02%)      }
        .           
        .               /// A raw pointer variant of `get_bytes_mut` that avoids invalidating existing aliases into this memory.
        .               pub fn get_bytes_mut_ptr(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<*mut [u8]> {
        .                   self.mark_init(range, true);
-- line 299 ----------------------------------------
-- line 329 ----------------------------------------
        .           
        .               /// Reads a *non-ZST* scalar.
        .               ///
        .               /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check
        .               /// for ZSTness anyway due to integer pointers being valid for ZSTs.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to call `InterpCx::read_scalar` instead of this method.
  763,490 ( 0.08%)      pub fn read_scalar(
        .                   &self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .               ) -> AllocResult<ScalarMaybeUninit<Tag>> {
        .                   // `get_bytes_with_uninit_and_ptr` tests relocation edges.
        .                   // We deliberately error when loading data that partially has provenance, or partially
        .                   // initialized data (that's the check below), into a scalar. The LLVM semantics of this are
        .                   // unclear so we are conservative. See <https://github.com/rust-lang/rust/issues/69488> for
-- line 345 ----------------------------------------
-- line 348 ----------------------------------------
        .                   // Uninit check happens *after* we established that the alignment is correct.
        .                   // We must not return `Ok()` for unaligned pointers!
        .                   if self.is_init(range).is_err() {
        .                       // This inflates uninitialized bytes to the entire scalar, even if only a few
        .                       // bytes are uninitialized.
        .                       return Ok(ScalarMaybeUninit::Uninit);
        .                   }
        .                   // Now we do the actual reading.
   58,730 ( 0.01%)          let bits = read_target_uint(cx.data_layout().endian, bytes).unwrap();
        .                   // See if we got a pointer.
   58,730 ( 0.01%)          if range.size != cx.data_layout().pointer_size {
        .                       // Not a pointer.
        .                       // *Now*, we better make sure that the inside is free of relocations too.
        .                       self.check_relocations(cx, range)?;
        .                   } else {
        .                       // Maybe a pointer.
        .                       if let Some(&prov) = self.relocations.get(&range.start) {
        .                           let ptr = Pointer::new(prov, Size::from_bytes(bits));
      885 ( 0.00%)                  return Ok(ScalarMaybeUninit::from_pointer(ptr, cx));
        .                       }
        .                   }
        .                   // We don't. Just return the bits.
  351,318 ( 0.04%)          Ok(ScalarMaybeUninit::Scalar(Scalar::from_uint(bits, range.size)))
  528,570 ( 0.06%)      }
        .           
        .               /// Writes a *non-ZST* scalar.
        .               ///
        .               /// ZSTs can't be read because in order to obtain a `Pointer`, we need to check
        .               /// for ZSTness anyway due to integer pointers being valid for ZSTs.
        .               ///
        .               /// It is the caller's responsibility to check bounds and alignment beforehand.
        .               /// Most likely, you want to call `InterpCx::write_scalar` instead of this method.
  205,303 ( 0.02%)      pub fn write_scalar(
        .                   &mut self,
        .                   cx: &impl HasDataLayout,
        .                   range: AllocRange,
        .                   val: ScalarMaybeUninit<Tag>,
        .               ) -> AllocResult {
   29,329 ( 0.00%)          assert!(self.mutability == Mutability::Mut);
        .           
   87,987 ( 0.01%)          let val = match val {
        .                       ScalarMaybeUninit::Scalar(scalar) => scalar,
        .                       ScalarMaybeUninit::Uninit => {
        .                           self.mark_init(range, false);
        .                           return Ok(());
        .                       }
        .                   };
        .           
        .                   // `to_bits_or_ptr_internal` is the right method because we just want to store this data
        .                   // as-is into memory.
  117,316 ( 0.01%)          let (bytes, provenance) = match val.to_bits_or_ptr_internal(range.size) {
        .                       Err(val) => {
        .                           let (provenance, offset) = val.into_parts();
        .                           (u128::from(offset.bytes()), Some(provenance))
        .                       }
        .                       Ok(data) => (data, None),
        .                   };
        .           
   87,987 ( 0.01%)          let endian = cx.data_layout().endian;
   87,987 ( 0.01%)          let dst = self.get_bytes_mut(cx, range)?;
        .                   write_target_uint(endian, dst, bytes).unwrap();
        .           
        .                   // See if we have to also write a relocation.
   87,926 ( 0.01%)          if let Some(provenance) = provenance {
      244 ( 0.00%)              self.relocations.0.insert(range.start, provenance);
        .                   }
        .           
        .                   Ok(())
  263,961 ( 0.03%)      }
        .           }
        .           
        .           /// Relocations.
        .           impl<Tag: Copy, Extra> Allocation<Tag, Extra> {
        .               /// Returns all relocations overlapping with the given pointer-offset pair.
  615,663 ( 0.06%)      pub fn get_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> &[(Size, Tag)] {
        .                   // We have to go back `pointer_size - 1` bytes, as that one would still overlap with
        .                   // the beginning of this range.
  615,663 ( 0.06%)          let start = range.start.bytes().saturating_sub(cx.data_layout().pointer_size.bytes() - 1);
        .                   self.relocations.range(Size::from_bytes(start)..range.end())
  820,884 ( 0.09%)      }
        .           
        .               /// Checks that there are no relocations overlapping with the given range.
        .               #[inline(always)]
        .               fn check_relocations(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {
1,055,352 ( 0.11%)          if self.get_relocations(cx, range).is_empty() {
        .                       Ok(())
        .                   } else {
        .                       Err(AllocError::ReadPointerAsBytes)
        .                   }
        .               }
        .           
        .               /// Removes all relocations inside the given range.
        .               /// If there are relocations overlapping with the edges, they
        .               /// are removed as well *and* the bytes they cover are marked as
        .               /// uninitialized. This is a somewhat odd "spooky action at a distance",
        .               /// but it allows strictly more code to run than if we would just error
        .               /// immediately in that case.
  322,619 ( 0.03%)      fn clear_relocations(&mut self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult
        .               where
        .                   Tag: Provenance,
        .               {
        .                   // Find the start and end of the given range and its outermost relocations.
        .                   let (first, last) = {
        .                       // Find all relocations overlapping the given range.
  146,645 ( 0.02%)              let relocations = self.get_relocations(cx, range);
   29,329 ( 0.00%)              if relocations.is_empty() {
        .                           return Ok(());
        .                       }
        .           
        .                       (
        .                           relocations.first().unwrap().0,
        .                           relocations.last().unwrap().0 + cx.data_layout().pointer_size,
        .                       )
        .                   };
-- line 461 ----------------------------------------
-- line 478 ----------------------------------------
        .                       }
        .                       self.init_mask.set_range(end, last, false);
        .                   }
        .           
        .                   // Forget all the relocations.
        .                   self.relocations.0.remove_range(first..last);
        .           
        .                   Ok(())
  205,303 ( 0.02%)      }
        .           
        .               /// Errors if there are relocations overlapping with the edges of the
        .               /// given memory range.
        .               #[inline]
        .               fn check_relocation_edges(&self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {
        .                   self.check_relocations(cx, alloc_range(range.start, Size::ZERO))?;
        .                   self.check_relocations(cx, alloc_range(range.end(), Size::ZERO))?;
        .                   Ok(())
-- line 494 ----------------------------------------
-- line 496 ----------------------------------------
        .           }
        .           
        .           /// "Relocations" stores the provenance information of pointers stored in memory.
        .           #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           pub struct Relocations<Tag = AllocId>(SortedMap<Size, Tag>);
        .           
        .           impl<Tag> Relocations<Tag> {
        .               pub fn new() -> Self {
      300 ( 0.00%)          Relocations(SortedMap::new())
        .               }
        .           
        .               // The caller must guarantee that the given relocations are already sorted
        .               // by address and contain no duplicates.
        .               pub fn from_presorted(r: Vec<(Size, Tag)>) -> Self {
        .                   Relocations(SortedMap::from_presorted_elements(r))
        .               }
        .           }
-- line 512 ----------------------------------------
-- line 582 ----------------------------------------
        .               pub const BLOCK_SIZE: u64 = 64;
        .           
        .               #[inline]
        .               fn bit_index(bits: Size) -> (usize, usize) {
        .                   // BLOCK_SIZE is the number of bits that can fit in a `Block`.
        .                   // Each bit in a `Block` represents the initialization state of one byte of an allocation,
        .                   // so we use `.bytes()` here.
        .                   let bits = bits.bytes();
  235,632 ( 0.02%)          let a = bits / InitMask::BLOCK_SIZE;
   58,958 ( 0.01%)          let b = bits % InitMask::BLOCK_SIZE;
        .                   (usize::try_from(a).unwrap(), usize::try_from(b).unwrap())
        .               }
        .           
        .               #[inline]
        .               fn size_from_bit_index(block: impl TryInto<u64>, bit: impl TryInto<u64>) -> Size {
        .                   let block = block.try_into().ok().unwrap();
        .                   let bit = bit.try_into().ok().unwrap();
      832 ( 0.00%)          Size::from_bytes(block * InitMask::BLOCK_SIZE + bit)
        .               }
        .           
      600 ( 0.00%)      pub fn new(size: Size, state: bool) -> Self {
      300 ( 0.00%)          let mut m = InitMask { blocks: vec![], len: Size::ZERO };
      150 ( 0.00%)          m.grow(size, state);
        .                   m
      750 ( 0.00%)      }
        .           
  234,632 ( 0.02%)      pub fn set_range(&mut self, start: Size, end: Size, new_state: bool) {
   58,658 ( 0.01%)          let len = self.len;
   29,329 ( 0.00%)          if end > len {
        .                       self.grow(end - len, new_state);
        .                   }
  293,290 ( 0.03%)          self.set_range_inbounds(start, end, new_state);
        .               }
        .           
  117,916 ( 0.01%)      pub fn set_range_inbounds(&mut self, start: Size, end: Size, new_state: bool) {
        .                   let (blocka, bita) = Self::bit_index(start);
        .                   let (blockb, bitb) = Self::bit_index(end);
   58,958 ( 0.01%)          if blocka == blockb {
        .                       // First set all bits except the first `bita`,
        .                       // then unset the last `64 - bitb` bits.
   55,286 ( 0.01%)              let range = if bitb == 0 {
        .                           u64::MAX << bita
        .                       } else {
  193,501 ( 0.02%)                  (u64::MAX << bita) & (u64::MAX >> (64 - bitb))
        .                       };
   55,286 ( 0.01%)              if new_state {
   27,517 ( 0.00%)                  self.blocks[blocka] |= range;
        .                       } else {
      252 ( 0.00%)                  self.blocks[blocka] &= !range;
        .                       }
        .                       return;
        .                   }
        .                   // across block boundaries
    3,672 ( 0.00%)          if new_state {
        .                       // Set `bita..64` to `1`.
    5,445 ( 0.00%)              self.blocks[blocka] |= u64::MAX << bita;
        .                       // Set `0..bitb` to `1`.
    3,630 ( 0.00%)              if bitb != 0 {
       15 ( 0.00%)                  self.blocks[blockb] |= u64::MAX >> (64 - bitb);
        .                       }
        .                       // Fill in all the other blocks (much faster than one bit at a time).
        .                       for block in (blocka + 1)..blockb {
        .                           self.blocks[block] = u64::MAX;
        .                       }
        .                   } else {
        .                       // Set `bita..64` to `0`.
       84 ( 0.00%)              self.blocks[blocka] &= !(u64::MAX << bita);
        .                       // Set `0..bitb` to `0`.
       42 ( 0.00%)              if bitb != 0 {
      120 ( 0.00%)                  self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));
        .                       }
        .                       // Fill in all the other blocks (much faster than one bit at a time).
        .                       for block in (blocka + 1)..blockb {
    1,791 ( 0.00%)                  self.blocks[block] = 0;
        .                       }
        .                   }
   58,958 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn get(&self, i: Size) -> bool {
        .                   let (block, bit) = Self::bit_index(i);
      192 ( 0.00%)          (self.blocks[block] & (1 << bit)) != 0
        .               }
        .           
        .               #[inline]
        .               pub fn set(&mut self, i: Size, new_state: bool) {
        .                   let (block, bit) = Self::bit_index(i);
        .                   self.set_bit(block, bit, new_state);
        .               }
        .           
-- line 671 ----------------------------------------
-- line 673 ----------------------------------------
        .               fn set_bit(&mut self, block: usize, bit: usize, new_state: bool) {
        .                   if new_state {
        .                       self.blocks[block] |= 1 << bit;
        .                   } else {
        .                       self.blocks[block] &= !(1 << bit);
        .                   }
        .               }
        .           
      900 ( 0.00%)      pub fn grow(&mut self, amount: Size, new_state: bool) {
      300 ( 0.00%)          if amount.bytes() == 0 {
        .                       return;
        .                   }
        .                   let unused_trailing_bits =
    1,200 ( 0.00%)              u64::try_from(self.blocks.len()).unwrap() * Self::BLOCK_SIZE - self.len.bytes();
      300 ( 0.00%)          if amount.bytes() > unused_trailing_bits {
      450 ( 0.00%)              let additional_blocks = amount.bytes() / Self::BLOCK_SIZE + 1;
        .                       self.blocks.extend(
        .                           // FIXME(oli-obk): optimize this by repeating `new_state as Block`.
        .                           iter::repeat(0).take(usize::try_from(additional_blocks).unwrap()),
        .                       );
        .                   }
      150 ( 0.00%)          let start = self.len;
        .                   self.len += amount;
    1,350 ( 0.00%)          self.set_range_inbounds(start, start + amount, new_state); // `Size` operation
        .               }
        .           
        .               /// Returns the index of the first bit in `start..end` (end-exclusive) that is equal to is_init.
  117,588 ( 0.01%)      fn find_bit(&self, start: Size, end: Size, is_init: bool) -> Option<Size> {
        .                   /// A fast implementation of `find_bit`,
        .                   /// which skips over an entire block at a time if it's all 0s (resp. 1s),
        .                   /// and finds the first 1 (resp. 0) bit inside a block using `trailing_zeros` instead of a loop.
        .                   ///
        .                   /// Note that all examples below are written with 8 (instead of 64) bit blocks for simplicity,
        .                   /// and with the least significant bit (and lowest block) first:
        .                   ///
        .                   ///          00000000|00000000
-- line 708 ----------------------------------------
-- line 728 ----------------------------------------
        .                           //   start_bit = 3
        .                           //   is_init = false
        .                           // Note that, for the examples in this function, the most significant bit is written first,
        .                           // which is backwards compared to the comments in `find_bit`/`find_bit_fast`.
        .           
        .                           // Invert bits so we're always looking for the first set bit.
        .                           //        ! 0b00111011
        .                           //   bits = 0b11000100
  235,176 ( 0.02%)                  let bits = if is_init { bits } else { !bits };
        .                           // Mask off unused start bits.
        .                           //          0b11000100
        .                           //        & 0b11111000
        .                           //   bits = 0b11000000
  176,382 ( 0.02%)                  let bits = bits & (!0 << start_bit);
        .                           // Find set bit, if any.
        .                           //   bit = trailing_zeros(0b11000000)
        .                           //   bit = 6
  121,336 ( 0.01%)                  if bits == 0 {
        .                               None
        .                           } else {
        .                               let bit = bits.trailing_zeros();
        .                               Some(InitMask::size_from_bit_index(block, bit))
        .                           }
        .                       }
        .           
   58,794 ( 0.01%)              if start >= end {
        .                           return None;
        .                       }
        .           
        .                       // Convert `start` and `end` to block indexes and bit indexes within each block.
        .                       // We must convert `end` to an inclusive bound to handle block boundaries correctly.
        .                       //
        .                       // For example:
        .                       //
-- line 761 ----------------------------------------
-- line 819 ----------------------------------------
        .                       // The block marked (3) in this example is the first block that will be handled by this loop,
        .                       // and it will be skipped for that reason:
        .                       //
        .                       //                   (3)
        .                       //                --------
        .                       //   (e) 01000000|00000000|00000001
        .                       //          ^~~~~~~~~~~~~~~~~~^
        .                       //        start              end
  116,016 ( 0.01%)              if start_block < end_block_inclusive {
        .                           // This loop is written in a specific way for performance.
        .                           // Notably: `..end_block_inclusive + 1` is used for an inclusive range instead of `..=end_block_inclusive`,
        .                           // and `.zip(start_block + 1..)` is used to track the index instead of `.enumerate().skip().take()`,
        .                           // because both alternatives result in significantly worse codegen.
        .                           // `end_block_inclusive + 1` is guaranteed not to wrap, because `end_block_inclusive <= end / BLOCK_SIZE`,
        .                           // and `BLOCK_SIZE` (the number of bits per block) will always be at least 8 (1 byte).
       24 ( 0.00%)                  for (&bits, block) in init_mask.blocks[start_block + 1..end_block_inclusive + 1]
        .                               .iter()
        .                               .zip(start_block + 1..)
        .                           {
        .                               if let Some(i) = search_block(bits, block, 0, is_init) {
        .                                   // If this is the last block, we may find a matching bit after `end`.
        .                                   //
        .                                   // For example, we shouldn't successfully find bit (4), because it's after `end`:
        .                                   //
-- line 842 ----------------------------------------
-- line 879 ----------------------------------------
        .                       "optimized implementation of find_bit is wrong for start={:?} end={:?} is_init={} init_mask={:#?}",
        .                       start,
        .                       end,
        .                       is_init,
        .                       self
        .                   );
        .           
        .                   result
  117,588 ( 0.01%)      }
        .           }
        .           
        .           /// A contiguous chunk of initialized or uninitialized memory.
        .           pub enum InitChunk {
        .               Init(Range<Size>),
        .               Uninit(Range<Size>),
        .           }
        .           
-- line 895 ----------------------------------------
-- line 913 ----------------------------------------
        .           
        .           impl InitMask {
        .               /// Checks whether the range `start..end` (end-exclusive) is entirely initialized.
        .               ///
        .               /// Returns `Ok(())` if it's initialized. Otherwise returns a range of byte
        .               /// indexes for the first contiguous span of the uninitialized access.
        .               #[inline]
        .               pub fn is_range_initialized(&self, start: Size, end: Size) -> Result<(), Range<Size>> {
   58,730 ( 0.01%)          if end > self.len {
        .                       return Err(self.len..end);
        .                   }
        .           
  293,650 ( 0.03%)          let uninit_start = self.find_bit(start, end, false);
        .           
  117,460 ( 0.01%)          match uninit_start {
        .                       Some(uninit_start) => {
        .                           let uninit_end = self.find_bit(uninit_start, end, true).unwrap_or(end);
        .                           Err(uninit_start..uninit_end)
        .                       }
        .                       None => Ok(()),
        .                   }
        .               }
        .           
-- line 935 ----------------------------------------
-- line 938 ----------------------------------------
        .               ///
        .               /// The iterator guarantees the following:
        .               /// - Chunks are nonempty.
        .               /// - Chunks are adjacent (each range's start is equal to the previous range's end).
        .               /// - Chunks span exactly `start..end` (the first starts at `start`, the last ends at `end`).
        .               /// - Chunks alternate between [`InitChunk::Init`] and [`InitChunk::Uninit`].
        .               #[inline]
        .               pub fn range_as_init_chunks(&self, start: Size, end: Size) -> InitChunkIter<'_> {
       64 ( 0.00%)          assert!(end <= self.len);
        .           
       64 ( 0.00%)          let is_init = if start < end {
        .                       self.get(start)
        .                   } else {
        .                       // `start..end` is empty: there are no chunks, so use some arbitrary value
        .                       false
        .                   };
        .           
        .                   InitChunkIter { init_mask: self, is_init, start, end }
        .               }
-- line 956 ----------------------------------------
-- line 968 ----------------------------------------
        .               end: Size,
        .           }
        .           
        .           impl<'a> Iterator for InitChunkIter<'a> {
        .               type Item = InitChunk;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<Self::Item> {
      128 ( 0.00%)          if self.start >= self.end {
        .                       return None;
        .                   }
        .           
        .                   let end_of_chunk =
      576 ( 0.00%)              self.init_mask.find_bit(self.start, self.end, !self.is_init).unwrap_or(self.end);
        .                   let range = self.start..end_of_chunk;
        .           
        .                   let ret =
      128 ( 0.00%)              Some(if self.is_init { InitChunk::Init(range) } else { InitChunk::Uninit(range) });
        .           
        .                   self.is_init = !self.is_init;
        .                   self.start = end_of_chunk;
        .           
        .                   ret
        .               }
        .           }
        .           
-- line 993 ----------------------------------------
-- line 1010 ----------------------------------------
        .                           access_size: range.size,
        .                           uninit_offset: idx_range.start,
        .                           uninit_size: idx_range.end - idx_range.start, // `Size` subtraction
        .                       }))
        .                   })
        .               }
        .           
        .               pub fn mark_init(&mut self, range: AllocRange, is_init: bool) {
   58,658 ( 0.01%)          if range.size.bytes() == 0 {
        .                       return;
        .                   }
   29,329 ( 0.00%)          assert!(self.mutability == Mutability::Mut);
  117,316 ( 0.01%)          self.init_mask.set_range(range.start, range.end(), is_init);
        .               }
        .           }
        .           
        .           /// Run-length encoding of the uninit mask.
        .           /// Used to copy parts of a mask multiple times to another allocation.
        .           pub struct InitMaskCompressed {
        .               /// Whether the first range is initialized.
        .               initial: bool,
-- line 1030 ----------------------------------------

  975,856 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/allocation.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           use rustc_macros::HashStable_Generic;
      .           use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};
      .           use std::fmt;
      .           use std::hash::Hash;
      .           use tracing::*;
      .           
      .           /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named "marks".
      .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
216,013 ( 0.02%)  pub struct SyntaxContext(u32);
      .           
    323 ( 0.00%)  #[derive(Debug, Encodable, Decodable, Clone)]
      .           pub struct SyntaxContextData {
      2 ( 0.00%)      outer_expn: ExpnId,
      6 ( 0.00%)      outer_transparency: Transparency,
      .               parent: SyntaxContext,
      .               /// This context, but with all transparent and semi-transparent expansions filtered away.
      .               opaque: SyntaxContext,
      .               /// This context, but with all transparent expansions filtered away.
      .               opaque_and_semitransparent: SyntaxContext,
      .               /// Name of the crate to which `$crate` with this context would resolve.
      .               dollar_crate_name: Symbol,
      .           }
-- line 61 ----------------------------------------
-- line 65 ----------------------------------------
      .               pub struct ExpnIndex {
      .                   ENCODABLE = custom
      .               }
      .           }
      .           
      .           /// A unique ID associated with a macro invocation and expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
      .           pub struct ExpnId {
    100 ( 0.00%)      pub krate: CrateNum,
  1,442 ( 0.00%)      pub local_id: ExpnIndex,
      .           }
      .           
      .           impl fmt::Debug for ExpnId {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   // Generate crate_::{{expn_}}.
      .                   write!(f, "{:?}::{{{{expn{}}}}}", self.krate, self.local_id.private)
      .               }
      .           }
-- line 82 ----------------------------------------
-- line 106 ----------------------------------------
      .                   // or ensure that this method is always invoked with the same
      .                   // `NodeIdHashingMode`
      .                   //
      .                   // Note that we require that `hash_spans` be set according to the global
      .                   // `-Z incremental-ignore-spans` option. Normally, this option is disabled,
      .                   // which will cause us to require that this method always be called with `Span` hashing
      .                   // enabled.
      .                   HashingControls { hash_spans, node_id_hashing_mode: _ }
     44 ( 0.00%)              if hash_spans == !ctx.debug_opts_incremental_ignore_spans() => {}
      .                   other => panic!("Attempted hashing of {msg} with non-default HashingControls: {:?}", other),
      .               }
      .           }
      .           
      .           /// A unique hash value associated to an expansion.
      .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]
     24 ( 0.00%)  pub struct ExpnHash(Fingerprint);
      .           
      .           impl ExpnHash {
      .               /// Returns the [StableCrateId] identifying the crate this [ExpnHash]
      .               /// originates from.
      .               #[inline]
      .               pub fn stable_crate_id(self) -> StableCrateId {
      .                   StableCrateId(self.0.as_value().0)
      .               }
-- line 129 ----------------------------------------
-- line 138 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn is_root(self) -> bool {
      .                   self.0 == Fingerprint::ZERO
      .               }
      .           
      .               /// Builds a new [ExpnHash] with the given [StableCrateId] and
      .               /// `local_hash`, where `local_hash` must be unique within its crate.
      2 ( 0.00%)      fn new(stable_crate_id: StableCrateId, local_hash: u64) -> ExpnHash {
      .                   ExpnHash(Fingerprint::new(stable_crate_id.0, local_hash))
      1 ( 0.00%)      }
      .           }
      .           
      .           /// A property of a macro expansion that determines how identifiers
      .           /// produced by that expansion are resolved.
     47 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, Encodable, Decodable)]
      .           #[derive(HashStable_Generic)]
      .           pub enum Transparency {
      .               /// Identifier produced by a transparent expansion is always resolved at call-site.
      .               /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.
      .               Transparent,
      .               /// Identifier produced by a semi-transparent expansion may be resolved
      .               /// either at call-site or at definition-site.
      .               /// If it's a local variable, label or `$crate` then it's resolved at def-site.
-- line 161 ----------------------------------------
-- line 169 ----------------------------------------
      .           }
      .           
      .           impl LocalExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               pub const ROOT: LocalExpnId = LocalExpnId::from_u32(0);
      .           
      .               pub fn from_raw(idx: ExpnIndex) -> LocalExpnId {
      .                   LocalExpnId::from_u32(idx.as_u32())
     70 ( 0.00%)      }
      .           
      .               pub fn as_raw(self) -> ExpnIndex {
      .                   ExpnIndex::from_u32(self.as_u32())
    212 ( 0.00%)      }
      .           
      .               pub fn fresh_empty() -> LocalExpnId {
      .                   HygieneData::with(|data| {
      .                       let expn_id = data.local_expn_data.push(None);
      .                       let _eid = data.local_expn_hashes.push(ExpnHash(Fingerprint::ZERO));
      .                       debug_assert_eq!(expn_id, _eid);
      .                       expn_id
      .                   })
      .               }
      .           
      .               pub fn fresh(mut expn_data: ExpnData, ctx: impl HashStableContext) -> LocalExpnId {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
     15 ( 0.00%)          let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
     10 ( 0.00%)              let expn_id = data.local_expn_data.push(Some(expn_data));
      .                       let _eid = data.local_expn_hashes.push(expn_hash);
      .                       debug_assert_eq!(expn_id, _eid);
      2 ( 0.00%)              let _old_id = data.expn_hash_to_expn_id.insert(expn_hash, expn_id.to_expn_id());
      .                       debug_assert!(_old_id.is_none());
      .                       expn_id
      .                   })
      .               }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.local_expn_hash(self))
-- line 207 ----------------------------------------
-- line 209 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
      .                   HygieneData::with(|data| data.local_expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn to_expn_id(self) -> ExpnId {
    400 ( 0.00%)          ExpnId { krate: LOCAL_CRATE, local_id: self.as_raw() }
      .               }
      .           
      .               #[inline]
      .               pub fn set_expn_data(self, mut expn_data: ExpnData, ctx: impl HashStableContext) {
      .                   debug_assert_eq!(expn_data.parent.krate, LOCAL_CRATE);
      .                   let expn_hash = update_disambiguator(&mut expn_data, ctx);
      .                   HygieneData::with(|data| {
      .                       let old_expn_data = &mut data.local_expn_data[self];
-- line 225 ----------------------------------------
-- line 259 ----------------------------------------
      .               }
      .           }
      .           
      .           impl ExpnId {
      .               /// The ID of the theoretical expansion that generates freshly parsed, unexpanded AST.
      .               /// Invariant: we do not create any ExpnId with local_id == 0 and krate != 0.
      .               pub const fn root() -> ExpnId {
      .                   ExpnId { krate: LOCAL_CRATE, local_id: ExpnIndex::from_u32(0) }
  1,689 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn expn_hash(self) -> ExpnHash {
      .                   HygieneData::with(|data| data.expn_hash(self))
      .               }
      .           
      .               #[inline]
      .               pub fn from_hash(hash: ExpnHash) -> Option<ExpnId> {
      .                   HygieneData::with(|data| data.expn_hash_to_expn_id.get(&hash).copied())
      .               }
      .           
      .               #[inline]
      .               pub fn as_local(self) -> Option<LocalExpnId> {
     87 ( 0.00%)          if self.krate == LOCAL_CRATE { Some(LocalExpnId::from_raw(self.local_id)) } else { None }
      .               }
      .           
      .               #[inline]
      .               #[track_caller]
      .               pub fn expect_local(self) -> LocalExpnId {
      .                   self.as_local().unwrap()
      .               }
      .           
      .               #[inline]
      .               pub fn expn_data(self) -> ExpnData {
     16 ( 0.00%)          HygieneData::with(|data| data.expn_data(self).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn is_descendant_of(self, ancestor: ExpnId) -> bool {
      .                   // a few "fast path" cases to avoid locking HygieneData
      .                   if ancestor == ExpnId::root() || ancestor == self {
      .                       return true;
      .                   }
-- line 300 ----------------------------------------
-- line 301 ----------------------------------------
      .                   if ancestor.krate != self.krate {
      .                       return false;
      .                   }
      .                   HygieneData::with(|data| data.is_descendant_of(self, ancestor))
      .               }
      .           
      .               /// `expn_id.outer_expn_is_descendant_of(ctxt)` is equivalent to but faster than
      .               /// `expn_id.is_descendant_of(ctxt.outer_expn())`.
    788 ( 0.00%)      pub fn outer_expn_is_descendant_of(self, ctxt: SyntaxContext) -> bool {
      .                   HygieneData::with(|data| data.is_descendant_of(self, data.outer_expn(ctxt)))
    394 ( 0.00%)      }
      .           
      .               /// Returns span for the macro which originally caused this expansion to happen.
      .               ///
      .               /// Stops backtracing at include! boundary.
     18 ( 0.00%)      pub fn expansion_cause(mut self) -> Option<Span> {
      .                   let mut last_macro = None;
      .                   loop {
      .                       let expn_data = self.expn_data();
      .                       // Stop going up the backtrace once include! is encountered
      9 ( 0.00%)              if expn_data.is_root()
      .                           || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)
      .                       {
      .                           break;
      .                       }
      .                       self = expn_data.call_site.ctxt().outer_expn();
      .                       last_macro = Some(expn_data.call_site);
      .                   }
      .                   last_macro
     30 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Debug)]
      .           pub struct HygieneData {
      .               /// Each expansion should have an associated expansion data, but sometimes there's a delay
      .               /// between creation of an expansion ID and obtaining its data (e.g. macros are collected
      .               /// first and then resolved later), so we use an `Option` here.
      .               local_expn_data: IndexVec<LocalExpnId, Option<ExpnData>>,
-- line 338 ----------------------------------------
-- line 348 ----------------------------------------
      .               /// This is used by `update_disambiguator` to keep track of which `ExpnData`s
      .               /// would have collisions without a disambiguator.
      .               /// The keys of this map are always computed with `ExpnData.disambiguator`
      .               /// set to 0.
      .               expn_data_disambiguators: FxHashMap<u64, u32>,
      .           }
      .           
      .           impl HygieneData {
     10 ( 0.00%)      crate fn new(edition: Edition) -> Self {
      .                   let root_data = ExpnData::default(
      .                       ExpnKind::Root,
      .                       DUMMY_SP,
      .                       edition,
      .                       Some(CRATE_DEF_ID.to_def_id()),
      .                       None,
      .                   );
      .           
     50 ( 0.00%)          HygieneData {
      .                       local_expn_data: IndexVec::from_elem_n(Some(root_data), 1),
      .                       local_expn_hashes: IndexVec::from_elem_n(ExpnHash(Fingerprint::ZERO), 1),
      .                       foreign_expn_data: FxHashMap::default(),
      .                       foreign_expn_hashes: FxHashMap::default(),
      .                       expn_hash_to_expn_id: std::iter::once((ExpnHash(Fingerprint::ZERO), ExpnId::root()))
      .                           .collect(),
      8 ( 0.00%)              syntax_context_data: vec![SyntaxContextData {
      .                           outer_expn: ExpnId::root(),
      .                           outer_transparency: Transparency::Opaque,
      .                           parent: SyntaxContext(0),
      .                           opaque: SyntaxContext(0),
      .                           opaque_and_semitransparent: SyntaxContext(0),
      .                           dollar_crate_name: kw::DollarCrate,
      .                       }],
      .                       syntax_context_map: FxHashMap::default(),
      .                       expn_data_disambiguators: FxHashMap::default(),
      .                   }
     10 ( 0.00%)      }
      .           
    449 ( 0.00%)      pub fn with<T, F: FnOnce(&mut HygieneData) -> T>(f: F) -> T {
    813 ( 0.00%)          with_session_globals(|session_globals| f(&mut *session_globals.hygiene_data.borrow_mut()))
    504 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn local_expn_hash(&self, expn_id: LocalExpnId) -> ExpnHash {
      .                   self.local_expn_hashes[expn_id]
      .               }
      .           
      .               #[inline]
      .               fn expn_hash(&self, expn_id: ExpnId) -> ExpnHash {
-- line 395 ----------------------------------------
-- line 398 ----------------------------------------
      .                       None => self.foreign_expn_hashes[&expn_id],
      .                   }
      .               }
      .           
      .               fn local_expn_data(&self, expn_id: LocalExpnId) -> &ExpnData {
      .                   self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
      .               }
      .           
    768 ( 0.00%)      fn expn_data(&self, expn_id: ExpnId) -> &ExpnData {
  2,304 ( 0.00%)          if let Some(expn_id) = expn_id.as_local() {
      .                       self.local_expn_data[expn_id].as_ref().expect("no expansion data for an expansion ID")
      .                   } else {
      .                       &self.foreign_expn_data[&expn_id]
      .                   }
  1,536 ( 0.00%)      }
      .           
      .               fn is_descendant_of(&self, mut expn_id: ExpnId, ancestor: ExpnId) -> bool {
      .                   // a couple "fast path" cases to avoid traversing parents in the loop below
    585 ( 0.00%)          if ancestor == ExpnId::root() {
      .                       return true;
      .                   }
     10 ( 0.00%)          if expn_id.krate != ancestor.krate {
      .                       return false;
      .                   }
      .                   loop {
     10 ( 0.00%)              if expn_id == ancestor {
      .                           return true;
      .                       }
     10 ( 0.00%)              if expn_id == ExpnId::root() {
      .                           return false;
      .                       }
      .                       expn_id = self.expn_data(expn_id).parent;
      .                   }
      2 ( 0.00%)      }
      .           
  1,072 ( 0.00%)      fn normalize_to_macros_2_0(&self, ctxt: SyntaxContext) -> SyntaxContext {
  7,560 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].opaque
  1,072 ( 0.00%)      }
      .           
    314 ( 0.00%)      fn normalize_to_macro_rules(&self, ctxt: SyntaxContext) -> SyntaxContext {
    958 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent
    314 ( 0.00%)      }
      .           
    352 ( 0.00%)      fn outer_expn(&self, ctxt: SyntaxContext) -> ExpnId {
  7,280 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].outer_expn
    352 ( 0.00%)      }
      .           
     40 ( 0.00%)      fn outer_mark(&self, ctxt: SyntaxContext) -> (ExpnId, Transparency) {
     21 ( 0.00%)          let data = &self.syntax_context_data[ctxt.0 as usize];
    118 ( 0.00%)          (data.outer_expn, data.outer_transparency)
     61 ( 0.00%)      }
      .           
      .               fn parent_ctxt(&self, ctxt: SyntaxContext) -> SyntaxContext {
     19 ( 0.00%)          self.syntax_context_data[ctxt.0 as usize].parent
      .               }
      .           
      .               fn remove_mark(&self, ctxt: &mut SyntaxContext) -> (ExpnId, Transparency) {
      2 ( 0.00%)          let outer_mark = self.outer_mark(*ctxt);
     26 ( 0.00%)          *ctxt = self.parent_ctxt(*ctxt);
      .                   outer_mark
      .               }
      .           
     24 ( 0.00%)      fn marks(&self, mut ctxt: SyntaxContext) -> Vec<(ExpnId, Transparency)> {
      .                   let mut marks = Vec::new();
      4 ( 0.00%)          while ctxt != SyntaxContext::root() {
      .                       debug!("marks: getting parent of {:?}", ctxt);
      .                       marks.push(self.outer_mark(ctxt));
      .                       ctxt = self.parent_ctxt(ctxt);
      .                   }
      .                   marks.reverse();
      .                   marks
     27 ( 0.00%)      }
      .           
  1,480 ( 0.00%)      fn walk_chain(&self, mut span: Span, to: SyntaxContext) -> Span {
      .                   debug!("walk_chain({:?}, {:?})", span, to);
      .                   debug!("walk_chain: span ctxt = {:?}", span.ctxt());
    220 ( 0.00%)          while span.from_expansion() && span.ctxt() != to {
      .                       let outer_expn = self.outer_expn(span.ctxt());
      .                       debug!("walk_chain({:?}): outer_expn={:?}", span, outer_expn);
     40 ( 0.00%)              let expn_data = self.expn_data(outer_expn);
      .                       debug!("walk_chain({:?}): expn_data={:?}", span, expn_data);
     40 ( 0.00%)              span = expn_data.call_site;
      .                   }
      .                   span
    810 ( 0.00%)      }
      .           
  3,800 ( 0.00%)      fn adjust(&self, ctxt: &mut SyntaxContext, expn_id: ExpnId) -> Option<ExpnId> {
      .                   let mut scope = None;
  1,140 ( 0.00%)          while !self.is_descendant_of(expn_id, self.outer_expn(*ctxt)) {
      .                       scope = Some(self.remove_mark(ctxt).0);
      .                   }
      .                   scope
  3,800 ( 0.00%)      }
      .           
     18 ( 0.00%)      fn apply_mark(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
      4 ( 0.00%)          assert_ne!(expn_id, ExpnId::root());
      2 ( 0.00%)          if transparency == Transparency::Opaque {
      6 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
      7 ( 0.00%)          let call_site_ctxt = self.expn_data(expn_id).call_site.ctxt();
      1 ( 0.00%)          let mut call_site_ctxt = if transparency == Transparency::SemiTransparent {
      .                       self.normalize_to_macros_2_0(call_site_ctxt)
      .                   } else {
      .                       self.normalize_to_macro_rules(call_site_ctxt)
      .                   };
      .           
      1 ( 0.00%)          if call_site_ctxt == SyntaxContext::root() {
      3 ( 0.00%)              return self.apply_mark_internal(ctxt, expn_id, transparency);
      .                   }
      .           
      .                   // Otherwise, `expn_id` is a macros 1.0 definition and the call site is in a
      .                   // macros 2.0 expansion, i.e., a macros 1.0 invocation is in a macros 2.0 definition.
      .                   //
      .                   // In this case, the tokens from the macros 1.0 definition inherit the hygiene
      .                   // at their invocation. That is, we pretend that the macros 1.0 definition
      .                   // was defined at its invocation (i.e., inside the macros 2.0 definition)
-- line 519 ----------------------------------------
-- line 521 ----------------------------------------
      .                   //
      .                   // See the example at `test/ui/hygiene/legacy_interaction.rs`.
      .                   for (expn_id, transparency) in self.marks(ctxt) {
      .                       call_site_ctxt = self.apply_mark_internal(call_site_ctxt, expn_id, transparency);
      .                   }
      .                   self.apply_mark_internal(call_site_ctxt, expn_id, transparency)
      .               }
      .           
     16 ( 0.00%)      fn apply_mark_internal(
      .                   &mut self,
      .                   ctxt: SyntaxContext,
      .                   expn_id: ExpnId,
      .                   transparency: Transparency,
      .               ) -> SyntaxContext {
      .                   let syntax_context_data = &mut self.syntax_context_data;
     12 ( 0.00%)          let mut opaque = syntax_context_data[ctxt.0 as usize].opaque;
      .                   let mut opaque_and_semitransparent =
      2 ( 0.00%)              syntax_context_data[ctxt.0 as usize].opaque_and_semitransparent;
      .           
      2 ( 0.00%)          if transparency >= Transparency::Opaque {
      .                       let parent = opaque;
     10 ( 0.00%)              opaque = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      1 ( 0.00%)                      let new_opaque = SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
      .                                   parent,
      .                                   opaque: new_opaque,
      .                                   opaque_and_semitransparent: new_opaque,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque
      .                           });
      .                   }
      .           
      2 ( 0.00%)          if transparency >= Transparency::SemiTransparent {
      .                       let parent = opaque_and_semitransparent;
      3 ( 0.00%)              opaque_and_semitransparent = *self
      .                           .syntax_context_map
      .                           .entry((parent, expn_id, transparency))
      .                           .or_insert_with(|| {
      .                               let new_opaque_and_semitransparent =
      .                                   SyntaxContext(syntax_context_data.len() as u32);
      .                               syntax_context_data.push(SyntaxContextData {
      .                                   outer_expn: expn_id,
      .                                   outer_transparency: transparency,
-- line 569 ----------------------------------------
-- line 572 ----------------------------------------
      .                                   opaque_and_semitransparent: new_opaque_and_semitransparent,
      .                                   dollar_crate_name: kw::DollarCrate,
      .                               });
      .                               new_opaque_and_semitransparent
      .                           });
      .                   }
      .           
      .                   let parent = ctxt;
      4 ( 0.00%)          *self.syntax_context_map.entry((parent, expn_id, transparency)).or_insert_with(|| {
      .                       let new_opaque_and_semitransparent_and_transparent =
      2 ( 0.00%)                  SyntaxContext(syntax_context_data.len() as u32);
      .                       syntax_context_data.push(SyntaxContextData {
      .                           outer_expn: expn_id,
      .                           outer_transparency: transparency,
      .                           parent,
      .                           opaque,
      .                           opaque_and_semitransparent,
      .                           dollar_crate_name: kw::DollarCrate,
      .                       });
      .                       new_opaque_and_semitransparent_and_transparent
      .                   })
     16 ( 0.00%)      }
      .           }
      .           
      .           pub fn clear_syntax_context_map() {
      5 ( 0.00%)      HygieneData::with(|data| data.syntax_context_map = FxHashMap::default());
      .           }
      .           
    270 ( 0.00%)  pub fn walk_chain(span: Span, to: SyntaxContext) -> Span {
    180 ( 0.00%)      HygieneData::with(|data| data.walk_chain(span, to))
    180 ( 0.00%)  }
      .           
      6 ( 0.00%)  pub fn update_dollar_crate_names(mut get_name: impl FnMut(SyntaxContext) -> Symbol) {
      .               // The new contexts that need updating are at the end of the list and have `$crate` as a name.
      .               let (len, to_update) = HygieneData::with(|data| {
      .                   (
      1 ( 0.00%)              data.syntax_context_data.len(),
      .                       data.syntax_context_data
      .                           .iter()
      .                           .rev()
      .                           .take_while(|scdata| scdata.dollar_crate_name == kw::DollarCrate)
      .                           .count(),
      .                   )
      .               });
      .               // The callback must be called from outside of the `HygieneData` lock,
      .               // since it will try to acquire it too.
      3 ( 0.00%)      let range_to_update = len - to_update..len;
      .               let names: Vec<_> =
      .                   range_to_update.clone().map(|idx| get_name(SyntaxContext::from_u32(idx as u32))).collect();
      .               HygieneData::with(|data| {
      2 ( 0.00%)          range_to_update.zip(names).for_each(|(idx, name)| {
      3 ( 0.00%)              data.syntax_context_data[idx].dollar_crate_name = name;
      .                   })
      .               })
      6 ( 0.00%)  }
      .           
      .           pub fn debug_hygiene_data(verbose: bool) -> String {
      .               HygieneData::with(|data| {
      .                   if verbose {
      .                       format!("{:#?}", data)
      .                   } else {
      .                       let mut s = String::from("");
      .                       s.push_str("Expansions:");
-- line 634 ----------------------------------------
-- line 675 ----------------------------------------
      .           
      .               #[inline]
      .               crate fn from_u32(raw: u32) -> SyntaxContext {
      .                   SyntaxContext(raw)
      .               }
      .           
      .               /// Extend a syntax context with a given expansion and transparency.
      .               crate fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> SyntaxContext {
      4 ( 0.00%)          HygieneData::with(|data| data.apply_mark(self, expn_id, transparency))
      .               }
      .           
      .               /// Pulls a single mark off of the syntax context. This effectively moves the
      .               /// context up one macro definition level. That is, if we have a nested macro
      .               /// definition as follows:
      .               ///
      .               /// ```rust
      .               /// macro_rules! f {
-- line 691 ----------------------------------------
-- line 694 ----------------------------------------
      .               ///    }
      .               /// }
      .               /// ```
      .               ///
      .               /// and we have a SyntaxContext that is referring to something declared by an invocation
      .               /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the
      .               /// invocation of f that created g1.
      .               /// Returns the mark that was removed.
      2 ( 0.00%)      pub fn remove_mark(&mut self) -> ExpnId {
      .                   HygieneData::with(|data| data.remove_mark(self).0)
      .               }
      .           
     12 ( 0.00%)      pub fn marks(self) -> Vec<(ExpnId, Transparency)> {
      6 ( 0.00%)          HygieneData::with(|data| data.marks(self))
     12 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion.
      .               /// For example, consider the following three resolutions of `f`:
      .               ///
      .               /// ```rust
      .               /// mod foo { pub fn f() {} } // `f`'s `SyntaxContext` is empty.
      .               /// m!(f);
      .               /// macro m($f:ident) {
-- line 716 ----------------------------------------
-- line 726 ----------------------------------------
      .               ///     //| and it resolves to `::bar::f`.
      .               ///     bar::$f(); // `f`'s `SyntaxContext` is empty.
      .               ///     //^ Since `mod bar` is not outside this expansion, `adjust` does not change `$f`,
      .               ///     //| and it resolves to `::bar::$f`.
      .               /// }
      .               /// ```
      .               /// This returns the expansion whose definition scope we use to privacy check the resolution,
      .               /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).
    788 ( 0.00%)      pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
    394 ( 0.00%)          HygieneData::with(|data| data.adjust(self, expn_id))
    394 ( 0.00%)      }
      .           
      .               /// Like `SyntaxContext::adjust`, but also normalizes `self` to macros 2.0.
    492 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
      .                   HygieneData::with(|data| {
    246 ( 0.00%)              *self = data.normalize_to_macros_2_0(*self);
    369 ( 0.00%)              data.adjust(self, expn_id)
      .                   })
    246 ( 0.00%)      }
      .           
      .               /// Adjust this context for resolution in a scope created by the given expansion
      .               /// via a glob import with the given `SyntaxContext`.
      .               /// For example:
      .               ///
      .               /// ```rust
      .               /// m!(f);
      .               /// macro m($i:ident) {
-- line 752 ----------------------------------------
-- line 811 ----------------------------------------
      .                       let scope = marks.last().map(|mark| mark.0);
      .                       while let Some((expn_id, transparency)) = marks.pop() {
      .                           *self = data.apply_mark(*self, expn_id, transparency);
      .                       }
      .                       Some(scope)
      .                   })
      .               }
      .           
    360 ( 0.00%)      pub fn hygienic_eq(self, other: SyntaxContext, expn_id: ExpnId) -> bool {
      .                   HygieneData::with(|data| {
     60 ( 0.00%)              let mut self_normalized = data.normalize_to_macros_2_0(self);
    300 ( 0.00%)              data.adjust(&mut self_normalized, expn_id);
     60 ( 0.00%)              self_normalized == data.normalize_to_macros_2_0(other)
      .                   })
    120 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn normalize_to_macros_2_0(self) -> SyntaxContext {
    536 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macros_2_0(self))
      .               }
      .           
      .               #[inline]
      .               pub fn normalize_to_macro_rules(self) -> SyntaxContext {
    157 ( 0.00%)          HygieneData::with(|data| data.normalize_to_macro_rules(self))
      .               }
      .           
      .               #[inline]
      .               pub fn outer_expn(self) -> ExpnId {
      6 ( 0.00%)          HygieneData::with(|data| data.outer_expn(self))
      .               }
      .           
      .               /// `ctxt.outer_expn_data()` is equivalent to but faster than
      .               /// `ctxt.outer_expn().expn_data()`.
      .               #[inline]
      .               pub fn outer_expn_data(self) -> ExpnData {
  1,177 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).clone())
      .               }
      .           
      .               #[inline]
      .               pub fn outer_mark(self) -> (ExpnId, Transparency) {
     22 ( 0.00%)          HygieneData::with(|data| data.outer_mark(self))
      .               }
      .           
      .               pub fn dollar_crate_name(self) -> Symbol {
      .                   HygieneData::with(|data| data.syntax_context_data[self.0 as usize].dollar_crate_name)
      .               }
      .           
    506 ( 0.00%)      pub fn edition(self) -> Edition {
  1,500 ( 0.00%)          HygieneData::with(|data| data.expn_data(data.outer_expn(self)).edition)
    506 ( 0.00%)      }
      .           }
      .           
      .           impl fmt::Debug for SyntaxContext {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(f, "#{}", self.0)
      .               }
      .           }
      .           
-- line 868 ----------------------------------------
-- line 902 ----------------------------------------
      .                       ..ExpnData::default(ExpnKind::Desugaring(reason), self, edition, None, None)
      .                   };
      .                   self.fresh_expansion(expn_data, ctx)
      .               }
      .           }
      .           
      .           /// A subset of properties from both macro definition and macro call available through global data.
      .           /// Avoid using this if you have access to the original definition or call structures.
  3,671 ( 0.00%)  #[derive(Clone, Debug, Encodable, Decodable, HashStable_Generic)]
      .           pub struct ExpnData {
      .               // --- The part unique to each expansion.
      .               /// The kind of this expansion - macro or compiler desugaring.
      .               pub kind: ExpnKind,
      .               /// The expansion that produced this expansion.
    494 ( 0.00%)      pub parent: ExpnId,
      .               /// The location of the actual macro invocation or syntax sugar , e.g.
      .               /// `let x = foo!();` or `if let Some(y) = x {}`
      .               ///
      .               /// This may recursively refer to other macro invocations, e.g., if
      .               /// `foo!()` invoked `bar!()` internally, and there was an
      .               /// expression inside `bar!`; the call_site of the expression in
      .               /// the expansion would point to the `bar!` invocation; that
      .               /// call_site span would have its own ExpnData, with the call_site
-- line 924 ----------------------------------------
-- line 929 ----------------------------------------
      .               /// that have identical `ExpnData`s. This violates the contract of `HashStable`
      .               /// - the two `ExpnId`s are not equal, but their `Fingerprint`s are equal
      .               /// (since the numerical `ExpnId` value is not considered by the `HashStable`
      .               /// implementation).
      .               ///
      .               /// The `disambiguator` field is set by `update_disambiguator` when two distinct
      .               /// `ExpnId`s would end up with the same `Fingerprint`. Since `ExpnData` includes
      .               /// a `krate` field, this value only needs to be unique within a single crate.
    247 ( 0.00%)      disambiguator: u32,
      .           
      .               // --- The part specific to the macro/desugaring definition.
      .               // --- It may be reasonable to share this part between expansions with the same definition,
      .               // --- but such sharing is known to bring some minor inconveniences without also bringing
      .               // --- noticeable perf improvements (PR #62898).
      .               /// The span of the macro definition (possibly dummy).
      .               /// This span serves only informational purpose and is not used for resolution.
      .               pub def_site: Span,
      .               /// List of `#[unstable]`/feature-gated features that the macro is allowed to use
      .               /// internally without forcing the whole crate to opt-in
      .               /// to them.
     32 ( 0.00%)      pub allow_internal_unstable: Option<Lrc<[Symbol]>>,
      .               /// Whether the macro is allowed to use `unsafe` internally
      .               /// even if the user crate has `#![forbid(unsafe_code)]`.
      .               pub allow_internal_unsafe: bool,
      .               /// Enables the macro helper hack (`ident!(...)` -> `$crate::ident!(...)`)
      .               /// for a given macro.
      .               pub local_inner_macros: bool,
      .               /// Edition of the crate in which the macro is defined.
    247 ( 0.00%)      pub edition: Edition,
      .               /// The `DefId` of the macro being invoked,
      .               /// if this `ExpnData` corresponds to a macro invocation
    247 ( 0.00%)      pub macro_def_id: Option<DefId>,
      .               /// The normal module (`mod`) in which the expanded macro was defined.
      .               pub parent_module: Option<DefId>,
      .           }
      .           
      .           impl !PartialEq for ExpnData {}
      .           impl !Hash for ExpnData {}
      .           
      .           impl ExpnData {
-- line 968 ----------------------------------------
-- line 1011 ----------------------------------------
      .                       local_inner_macros: false,
      .                       edition,
      .                       macro_def_id,
      .                       parent_module,
      .                       disambiguator: 0,
      .                   }
      .               }
      .           
      6 ( 0.00%)      pub fn allow_unstable(
      .                   kind: ExpnKind,
      .                   call_site: Span,
      .                   edition: Edition,
      .                   allow_internal_unstable: Lrc<[Symbol]>,
      .                   macro_def_id: Option<DefId>,
      .                   parent_module: Option<DefId>,
      .               ) -> ExpnData {
     13 ( 0.00%)          ExpnData {
      .                       allow_internal_unstable: Some(allow_internal_unstable),
      .                       ..ExpnData::default(kind, call_site, edition, macro_def_id, parent_module)
      .                   }
      2 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn is_root(&self) -> bool {
     47 ( 0.00%)          matches!(self.kind, ExpnKind::Root)
      .               }
      .           
      .               #[inline]
      9 ( 0.00%)      fn hash_expn(&self, ctx: &mut impl HashStableContext) -> u64 {
      .                   let mut hasher = StableHasher::new();
      .                   self.hash_stable(ctx, &mut hasher);
      .                   hasher.finish()
      8 ( 0.00%)      }
      .           }
      .           
      .           /// Expansion kind.
  2,596 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum ExpnKind {
      .               /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.
      .               Root,
      .               /// Expansion produced by a macro.
      .               Macro(MacroKind, Symbol),
      .               /// Transform done by the compiler on the AST.
     51 ( 0.00%)      AstPass(AstPass),
      .               /// Desugaring done by the compiler during HIR lowering.
      .               Desugaring(DesugaringKind),
      .               /// MIR inlining
      .               Inlined,
      .           }
      .           
      .           impl ExpnKind {
      .               pub fn descr(&self) -> String {
-- line 1062 ----------------------------------------
-- line 1070 ----------------------------------------
      .                       ExpnKind::AstPass(kind) => kind.descr().to_string(),
      .                       ExpnKind::Desugaring(kind) => format!("desugaring of {}", kind.descr()),
      .                       ExpnKind::Inlined => "inlined source".to_string(),
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of macro invocation or definition.
    205 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Debug)]
      .           #[derive(HashStable_Generic)]
      .           pub enum MacroKind {
      .               /// A bang macro `foo!()`.
      .               Bang,
      .               /// An attribute macro `#[foo]`.
      .               Attr,
      .               /// A derive macro `#[derive(Foo)]`
      .               Derive,
-- line 1086 ----------------------------------------
-- line 1124 ----------------------------------------
      .                       AstPass::StdImports => "standard library imports",
      .                       AstPass::TestHarness => "test harness",
      .                       AstPass::ProcMacroHarness => "proc macro harness",
      .                   }
      .               }
      .           }
      .           
      .           /// The kind of compiler desugaring.
     28 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Debug, Encodable, Decodable, HashStable_Generic)]
      .           pub enum DesugaringKind {
      .               /// We desugar `if c { i } else { e }` to `match $ExprKind::Use(c) { true => i, _ => e }`.
      .               /// However, we do not want to blame `c` for unreachability but rather say that `i`
      .               /// is unreachable. This desugaring kind allows us to avoid blaming `c`.
      .               /// This also applies to `while` loops.
      .               CondTemporary,
      .               QuestionMark,
      .               TryBlock,
-- line 1140 ----------------------------------------
-- line 1161 ----------------------------------------
      .                       DesugaringKind::OpaqueTy => "`impl Trait`",
      .                       DesugaringKind::ForLoop => "`for` loop",
      .                       DesugaringKind::LetElse => "`let...else`",
      .                       DesugaringKind::WhileLoop => "`while` loop",
      .                   }
      .               }
      .           }
      .           
      7 ( 0.00%)  #[derive(Default)]
      .           pub struct HygieneEncodeContext {
      .               /// All `SyntaxContexts` for which we have written `SyntaxContextData` into crate metadata.
      .               /// This is `None` after we finish encoding `SyntaxContexts`, to ensure
      .               /// that we don't accidentally try to encode any more `SyntaxContexts`
      .               serialized_ctxts: Lock<FxHashSet<SyntaxContext>>,
      .               /// The `SyntaxContexts` that we have serialized (e.g. as a result of encoding `Spans`)
      .               /// in the most recent 'round' of serializnig. Serializing `SyntaxContextData`
      .               /// may cause us to serialize more `SyntaxContext`s, so serialize in a loop
-- line 1177 ----------------------------------------
-- line 1180 ----------------------------------------
      .           
      .               serialized_expns: Lock<FxHashSet<ExpnId>>,
      .           
      .               latest_expns: Lock<FxHashSet<ExpnId>>,
      .           }
      .           
      .           impl HygieneEncodeContext {
      .               /// Record the fact that we need to serialize the corresponding `ExpnData`.
    510 ( 0.00%)      pub fn schedule_expn_data_for_encoding(&self, expn: ExpnId) {
    204 ( 0.00%)          if !self.serialized_expns.lock().contains(&expn) {
    200 ( 0.00%)              self.latest_expns.lock().insert(expn);
      .                   }
    408 ( 0.00%)      }
      .           
      8 ( 0.00%)      pub fn encode<T, R>(
      .                   &self,
      .                   encoder: &mut T,
      .                   mut encode_ctxt: impl FnMut(&mut T, u32, &SyntaxContextData) -> Result<(), R>,
      .                   mut encode_expn: impl FnMut(&mut T, ExpnId, &ExpnData, ExpnHash) -> Result<(), R>,
      .               ) -> Result<(), R> {
      .                   // When we serialize a `SyntaxContextData`, we may end up serializing
      .                   // a `SyntaxContext` that we haven't seen before
      3 ( 0.00%)          while !self.latest_ctxts.lock().is_empty() || !self.latest_expns.lock().is_empty() {
      .                       debug!(
      .                           "encode_hygiene: Serializing a round of {:?} SyntaxContextDatas: {:?}",
      .                           self.latest_ctxts.lock().len(),
      .                           self.latest_ctxts
      .                       );
      .           
      .                       // Consume the current round of SyntaxContexts.
      .                       // Drop the lock() temporary early
      .                       let latest_ctxts = { std::mem::take(&mut *self.latest_ctxts.lock()) };
      .           
      .                       // It's fine to iterate over a HashMap, because the serialization
      .                       // of the table that we insert data into doesn't depend on insertion
      .                       // order
      .                       for_all_ctxts_in(latest_ctxts.into_iter(), |index, ctxt, data| {
      4 ( 0.00%)                  if self.serialized_ctxts.lock().insert(ctxt) {
      .                               encode_ctxt(encoder, index, data)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .           
      .                       let latest_expns = { std::mem::take(&mut *self.latest_expns.lock()) };
      .           
      .                       for_all_expns_in(latest_expns.into_iter(), |expn, data, hash| {
      8 ( 0.00%)                  if self.serialized_expns.lock().insert(expn) {
      .                               encode_expn(encoder, expn, data, hash)?;
      .                           }
      .                           Ok(())
      .                       })?;
      .                   }
      .                   debug!("encode_hygiene: Done serializing SyntaxContextData");
      .                   Ok(())
      8 ( 0.00%)      }
      .           }
      .           
      .           #[derive(Default)]
      .           /// Additional information used to assist in decoding hygiene data
      .           pub struct HygieneDecodeContext {
      .               // Maps serialized `SyntaxContext` ids to a `SyntaxContext` in the current
      .               // global `HygieneData`. When we deserialize a `SyntaxContext`, we need to create
      .               // a new id in the global `HygieneData`. This map tracks the ID we end up picking,
-- line 1242 ----------------------------------------
-- line 1257 ----------------------------------------
      .           
      .                   let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .                   expn_id
      .               })
      .           }
      .           
      .           /// Register an expansion which has been decoded from the metadata of a foreign crate.
     48 ( 0.00%)  pub fn register_expn_id(
      .               krate: CrateNum,
      .               local_id: ExpnIndex,
      .               data: ExpnData,
      .               hash: ExpnHash,
      .           ) -> ExpnId {
      .               debug_assert!(data.parent == ExpnId::root() || krate == data.parent.krate);
     48 ( 0.00%)      let expn_id = ExpnId { krate, local_id };
      .               HygieneData::with(|hygiene_data| {
     48 ( 0.00%)          let _old_data = hygiene_data.foreign_expn_data.insert(expn_id, data);
      .                   debug_assert!(_old_data.is_none());
     80 ( 0.00%)          let _old_hash = hygiene_data.foreign_expn_hashes.insert(expn_id, hash);
      .                   debug_assert!(_old_hash.is_none());
     64 ( 0.00%)          let _old_id = hygiene_data.expn_hash_to_expn_id.insert(hash, expn_id);
      .                   debug_assert!(_old_id.is_none());
      .               });
      .               expn_id
     64 ( 0.00%)  }
      .           
      .           /// Decode an expansion from the metadata of a foreign crate.
      .           pub fn decode_expn_id(
      .               krate: CrateNum,
      .               index: u32,
      .               decode_data: impl FnOnce(ExpnId) -> (ExpnData, ExpnHash),
      .           ) -> ExpnId {
    430 ( 0.00%)      if index == 0 {
      .                   debug!("decode_expn_id: deserialized root");
    272 ( 0.00%)          return ExpnId::root();
      .               }
      .           
      .               let index = ExpnIndex::from_u32(index);
      .           
      .               // This function is used to decode metadata, so it cannot decode information about LOCAL_CRATE.
      .               debug_assert_ne!(krate, LOCAL_CRATE);
    158 ( 0.00%)      let expn_id = ExpnId { krate, local_id: index };
      .           
      .               // Fast path if the expansion has already been decoded.
    158 ( 0.00%)      if HygieneData::with(|hygiene_data| hygiene_data.foreign_expn_data.contains_key(&expn_id)) {
    189 ( 0.00%)          return expn_id;
      .               }
      .           
      .               // Don't decode the data inside `HygieneData::with`, since we need to recursively decode
      .               // other ExpnIds
    112 ( 0.00%)      let (expn_data, hash) = decode_data(expn_id);
      .           
    144 ( 0.00%)      register_expn_id(krate, index, expn_data, hash)
      .           }
      .           
      .           // Decodes `SyntaxContext`, using the provided `HygieneDecodeContext`
      .           // to track which `SyntaxContext`s we have already decoded.
      .           // The provided closure will be invoked to deserialize a `SyntaxContextData`
      .           // if we haven't already seen the id of the `SyntaxContext` we are deserializing.
      .           pub fn decode_syntax_context<D: Decoder, F: FnOnce(&mut D, u32) -> SyntaxContextData>(
      .               d: &mut D,
      .               context: &HygieneDecodeContext,
      .               decode_data: F,
      .           ) -> SyntaxContext {
  2,871 ( 0.00%)      let raw_id: u32 = Decodable::decode(d);
  5,742 ( 0.00%)      if raw_id == 0 {
      .                   debug!("decode_syntax_context: deserialized root");
      .                   // The root is special
      .                   return SyntaxContext::root();
      .               }
      .           
      .               let outer_ctxts = &context.remapped_ctxts;
      .           
      .               // Ensure that the lock() temporary is dropped early
      .               {
    478 ( 0.00%)          if let Some(ctxt) = outer_ctxts.lock().get(raw_id as usize).copied().flatten() {
      .                       return ctxt;
      .                   }
      .               }
      .           
      .               // Allocate and store SyntaxContext id *before* calling the decoder function,
      .               // as the SyntaxContextData may reference itself.
     11 ( 0.00%)      let new_ctxt = HygieneData::with(|hygiene_data| {
     11 ( 0.00%)          let new_ctxt = SyntaxContext(hygiene_data.syntax_context_data.len() as u32);
      .                   // Push a dummy SyntaxContextData to ensure that nobody else can get the
      .                   // same ID as us. This will be overwritten after call `decode_Data`
      .                   hygiene_data.syntax_context_data.push(SyntaxContextData {
     11 ( 0.00%)              outer_expn: ExpnId::root(),
      .                       outer_transparency: Transparency::Transparent,
      .                       parent: SyntaxContext::root(),
      .                       opaque: SyntaxContext::root(),
      .                       opaque_and_semitransparent: SyntaxContext::root(),
      .                       dollar_crate_name: kw::Empty,
      .                   });
      .                   let mut ctxts = outer_ctxts.lock();
      .                   let new_len = raw_id as usize + 1;
     33 ( 0.00%)          if ctxts.len() < new_len {
      .                       ctxts.resize(new_len, None);
      .                   }
     22 ( 0.00%)          ctxts[raw_id as usize] = Some(new_ctxt);
      .                   drop(ctxts);
      .                   new_ctxt
      .               });
      .           
      .               // Don't try to decode data while holding the lock, since we need to
      .               // be able to recursively decode a SyntaxContext
     22 ( 0.00%)      let mut ctxt_data = decode_data(d, raw_id);
      .               // Reset `dollar_crate_name` so that it will be updated by `update_dollar_crate_names`
      .               // We don't care what the encoding crate set this to - we want to resolve it
      .               // from the perspective of the current compilation session
     22 ( 0.00%)      ctxt_data.dollar_crate_name = kw::DollarCrate;
      .           
      .               // Overwrite the dummy data with our decoded SyntaxContextData
      .               HygieneData::with(|hygiene_data| {
      .                   let dummy = std::mem::replace(
     11 ( 0.00%)              &mut hygiene_data.syntax_context_data[new_ctxt.as_u32() as usize],
      .                       ctxt_data,
      .                   );
      .                   // Make sure nothing weird happening while `decode_data` was running
     11 ( 0.00%)          assert_eq!(dummy.dollar_crate_name, kw::Empty);
      .               });
      .           
     22 ( 0.00%)      new_ctxt
      .           }
      .           
      .           fn for_all_ctxts_in<E, F: FnMut(u32, SyntaxContext, &SyntaxContextData) -> Result<(), E>>(
      .               ctxts: impl Iterator<Item = SyntaxContext>,
      .               mut f: F,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
      5 ( 0.00%)          ctxts.map(|ctxt| (ctxt, data.syntax_context_data[ctxt.0 as usize].clone())).collect()
      .               });
     18 ( 0.00%)      for (ctxt, data) in all_data.into_iter() {
      .                   f(ctxt.0, ctxt, &data)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           fn for_all_expns_in<E>(
      .               expns: impl Iterator<Item = ExpnId>,
      .               mut f: impl FnMut(ExpnId, &ExpnData, ExpnHash) -> Result<(), E>,
      .           ) -> Result<(), E> {
      .               let all_data: Vec<_> = HygieneData::with(|data| {
     36 ( 0.00%)          expns.map(|expn| (expn, data.expn_data(expn).clone(), data.expn_hash(expn))).collect()
      .               });
     35 ( 0.00%)      for (expn, data, hash) in all_data.into_iter() {
      .                   f(expn, &data, hash)?;
      .               }
      .               Ok(())
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for LocalExpnId {
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
      .                   self.to_expn_id().encode(e)
-- line 1411 ----------------------------------------
-- line 1430 ----------------------------------------
      .               }
      .           }
      .           
      .           pub fn raw_encode_syntax_context<E: Encoder>(
      .               ctxt: SyntaxContext,
      .               context: &HygieneEncodeContext,
      .               e: &mut E,
      .           ) -> Result<(), E::Error> {
 62,890 ( 0.01%)      if !context.serialized_ctxts.lock().contains(&ctxt) {
 31,435 ( 0.00%)          context.latest_ctxts.lock().insert(ctxt);
      .               }
      .               ctxt.0.encode(e)
      .           }
      .           
      .           impl<E: Encoder> Encodable<E> for SyntaxContext {
      .               default fn encode(&self, _: &mut E) -> Result<(), E::Error> {
      .                   panic!("cannot encode `SyntaxContext` with `{}`", std::any::type_name::<E>());
      .               }
-- line 1447 ----------------------------------------
-- line 1457 ----------------------------------------
      .           /// such that the `Fingerprint` of the `ExpnData` does not collide with
      .           /// any other `ExpnIds`.
      .           ///
      .           /// This method is called only when an `ExpnData` is first associated
      .           /// with an `ExpnId` (when the `ExpnId` is initially constructed, or via
      .           /// `set_expn_data`). It is *not* called for foreign `ExpnId`s deserialized
      .           /// from another crate's metadata - since `ExpnHash` includes the stable crate id,
      .           /// collisions are only possible between `ExpnId`s within the same crate.
      9 ( 0.00%)  fn update_disambiguator(expn_data: &mut ExpnData, mut ctx: impl HashStableContext) -> ExpnHash {
      .               // This disambiguator should not have been set yet.
      2 ( 0.00%)      assert_eq!(
      .                   expn_data.disambiguator, 0,
      .                   "Already set disambiguator for ExpnData: {:?}",
      .                   expn_data
      .               );
      2 ( 0.00%)      assert_default_hashing_controls(&ctx, "ExpnData (disambiguator)");
      5 ( 0.00%)      let mut expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .               let disambiguator = HygieneData::with(|data| {
      .                   // If this is the first ExpnData with a given hash, then keep our
      .                   // disambiguator at 0 (the default u32 value)
      .                   let disambig = data.expn_data_disambiguators.entry(expn_hash).or_default();
      1 ( 0.00%)          let disambiguator = *disambig;
      4 ( 0.00%)          *disambig += 1;
      .                   disambiguator
      .               });
      .           
      2 ( 0.00%)      if disambiguator != 0 {
      .                   debug!("Set disambiguator for expn_data={:?} expn_hash={:?}", expn_data, expn_hash);
      .           
      .                   expn_data.disambiguator = disambiguator;
      .                   expn_hash = expn_data.hash_expn(&mut ctx);
      .           
      .                   // Verify that the new disambiguator makes the hash unique
      .                   #[cfg(debug_assertions)]
      .                   HygieneData::with(|data| {
-- line 1492 ----------------------------------------
-- line 1493 ----------------------------------------
      .                       assert_eq!(
      .                           data.expn_data_disambiguators.get(&expn_hash),
      .                           None,
      .                           "Hash collision after disambiguator update!",
      .                       );
      .                   });
      .               }
      .           
      2 ( 0.00%)      ExpnHash::new(ctx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(), expn_hash)
      9 ( 0.00%)  }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for SyntaxContext {
482,764 ( 0.05%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   const TAG_EXPANSION: u8 = 0;
      .                   const TAG_NO_EXPANSION: u8 = 1;
      .           
121,888 ( 0.01%)          if *self == SyntaxContext::root() {
      .                       TAG_NO_EXPANSION.hash_stable(ctx, hasher);
      .                   } else {
      .                       TAG_EXPANSION.hash_stable(ctx, hasher);
     36 ( 0.00%)              let (expn_id, transparency) = self.outer_mark();
    112 ( 0.00%)              expn_id.hash_stable(ctx, hasher);
      .                       transparency.hash_stable(ctx, hasher);
      .                   }
475,340 ( 0.05%)      }
      .           }
      .           
      .           impl<CTX: HashStableContext> HashStable<CTX> for ExpnId {
    133 ( 0.00%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
      .                   assert_default_hashing_controls(ctx, "ExpnId");
     84 ( 0.00%)          let hash = if *self == ExpnId::root() {
      .                       // Avoid fetching TLS storage for a trivial often-used value.
      .                       Fingerprint::ZERO
      .                   } else {
      .                       self.expn_hash().0
      .                   };
      .           
      .                   hash.hash_stable(ctx, hasher);
     95 ( 0.00%)      }
      .           }

 66,657 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/hygiene.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/passes.rs
--------------------------------------------------------------------------------
Ir                 

-- line 107 ----------------------------------------
        .               ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({
        .                   $($self.$passes.$name $params;)*
        .               })
        .           }
        .           
        .           #[macro_export]
        .           macro_rules! expand_combined_late_lint_pass_methods {
        .               ($passes:tt, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (
  386,485 ( 0.04%)          $(fn $name(&mut self, context: &LateContext<'tcx>, $($param: $arg),*) {
1,568,713 ( 0.16%)              expand_combined_late_lint_pass_method!($passes, self, $name, (context, $($param),*));
   92,483 ( 0.01%)          })*
        .               )
        .           }
        .           
        .           #[macro_export]
        .           macro_rules! declare_combined_late_lint_pass {
        .               ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], [$hir:tt], $methods:tt) => (
        .                   #[allow(non_snake_case)]
        .                   $v struct $name {
        .                       $($passes: $passes,)*
        .                   }
        .           
        .                   impl $name {
        4 ( 0.00%)              $v fn new() -> Self {
       14 ( 0.00%)                  Self {
        .                               $($passes: $constructor,)*
        .                           }
        5 ( 0.00%)              }
        .           
        6 ( 0.00%)              $v fn get_lints() -> LintArray {
        .                           let mut lints = Vec::new();
        1 ( 0.00%)                  $(lints.extend_from_slice(&$passes::get_lints());)*
        .                           lints
        7 ( 0.00%)              }
        .                   }
        .           
        .                   impl<'tcx> LateLintPass<'tcx> for $name {
        .                       expand_combined_late_lint_pass_methods!([$($passes),*], $methods);
        .                   }
        .           
        .                   #[allow(rustc::lint_pass_impl_without_macro)]
        .                   impl LintPass for $name {
-- line 148 ----------------------------------------
-- line 234 ----------------------------------------
        .               ([$($passes:ident),*], $self: ident, $name: ident, $params:tt) => ({
        .                   $($self.$passes.$name $params;)*
        .               })
        .           }
        .           
        .           #[macro_export]
        .           macro_rules! expand_combined_early_lint_pass_methods {
        .               ($passes:tt, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (
  181,585 ( 0.02%)          $(fn $name(&mut self, context: &EarlyContext<'_>, $($param: $arg),*) {
  504,523 ( 0.05%)              expand_combined_early_lint_pass_method!($passes, self, $name, (context, $($param),*));
  211,796 ( 0.02%)          })*
        .               )
        .           }
        .           
        .           #[macro_export]
        .           macro_rules! declare_combined_early_lint_pass {
        .               ([$v:vis $name:ident, [$($passes:ident: $constructor:expr,)*]], $methods:tt) => (
        .                   #[allow(non_snake_case)]
        .                   $v struct $name {
        .                       $($passes: $passes,)*
        .                   }
        .           
        .                   impl $name {
        4 ( 0.00%)              $v fn new() -> Self {
        5 ( 0.00%)                  Self {
        .                               $($passes: $constructor,)*
        .                           }
        6 ( 0.00%)              }
        .           
       12 ( 0.00%)              $v fn get_lints() -> LintArray {
        .                           let mut lints = Vec::new();
        1 ( 0.00%)                  $(lints.extend_from_slice(&$passes::get_lints());)*
        .                           lints
       14 ( 0.00%)              }
        .                   }
        .           
        .                   impl EarlyLintPass for $name {
        .                       expand_combined_early_lint_pass_methods!([$($passes),*], $methods);
        .                   }
        .           
        .                   #[allow(rustc::lint_pass_impl_without_macro)]
        .                   impl LintPass for $name {
-- line 275 ----------------------------------------

      104 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/passes.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs
--------------------------------------------------------------------------------
Ir               

-- line 70 ----------------------------------------
      .                   expected: Expectation<'tcx>,
      .                   extend_err: impl Fn(&mut DiagnosticBuilder<'_>),
      .               ) -> Ty<'tcx> {
      .                   let expected_ty = expected.to_option(&self).unwrap_or(self.tcx.types.bool);
      .                   let mut ty = self.check_expr_with_expectation(expr, expected);
      .           
      .                   // While we don't allow *arbitrary* coercions here, we *do* allow
      .                   // coercions from ! to `expected`.
      2 ( 0.00%)          if ty.is_never() {
      .                       assert!(
      .                           !self.typeck_results.borrow().adjustments().contains_key(expr.hir_id),
      .                           "expression with never type wound up being adjusted"
      .                       );
      .                       let adj_ty = self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::AdjustmentType,
      .                           span: expr.span,
      .                       });
      .                       self.apply_adjustments(
      .                           expr,
      .                           vec![Adjustment { kind: Adjust::NeverToAny, target: adj_ty }],
      .                       );
      .                       ty = adj_ty;
      .                   }
      .           
     14 ( 0.00%)          if let Some(mut err) = self.demand_suptype_diag(expr.span, expected_ty, ty) {
      .                       let expr = expr.peel_drop_temps();
      .                       self.suggest_deref_ref_or_into(&mut err, expr, expected_ty, ty, None);
      .                       extend_err(&mut err);
      .                       err.emit();
      .                   }
      .                   ty
      .               }
      .           
    648 ( 0.00%)      pub(super) fn check_expr_coercable_to_type(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   expected: Ty<'tcx>,
      .                   expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,
      .               ) -> Ty<'tcx> {
      .                   let ty = self.check_expr_with_hint(expr, expected);
      .                   // checks don't need two phase
      .                   self.demand_coerce(expr, ty, expected, expected_ty_expr, AllowTwoPhase::No)
    504 ( 0.00%)      }
      .           
      .               pub(super) fn check_expr_with_hint(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   expected: Ty<'tcx>,
      .               ) -> Ty<'tcx> {
     36 ( 0.00%)          self.check_expr_with_expectation(expr, ExpectHasType(expected))
      .               }
      .           
      .               fn check_expr_with_expectation_and_needs(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   expected: Expectation<'tcx>,
      .                   needs: Needs,
      .               ) -> Ty<'tcx> {
      .                   let ty = self.check_expr_with_expectation(expr, expected);
      .           
      .                   // If the expression is used in a place whether mutable place is required
      .                   // e.g. LHS of assignment, perform the conversion.
     29 ( 0.00%)          if let Needs::MutPlace = needs {
      .                       self.convert_place_derefs_to_mutable(expr);
      .                   }
      .           
      .                   ty
      .               }
      .           
      .               pub(super) fn check_expr(&self, expr: &'tcx hir::Expr<'tcx>) -> Ty<'tcx> {
      .                   self.check_expr_with_expectation(expr, NoExpectation)
-- line 140 ----------------------------------------
-- line 159 ----------------------------------------
      .               /// that there are actually multiple representations for `Error`, so avoid
      .               /// that when err needs to be handled differently.
      .               #[instrument(skip(self, expr), level = "debug")]
      .               pub(super) fn check_expr_with_expectation(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   expected: Expectation<'tcx>,
      .               ) -> Ty<'tcx> {
206,228 ( 0.02%)          self.check_expr_with_expectation_and_args(expr, expected, &[])
      .               }
      .           
      .               /// Same as `check_expr_with_expectation`, but allows us to pass in the arguments of a
      .               /// `ExprKind::Call` when evaluating its callee when it is an `ExprKind::Path`.
383,955 ( 0.04%)      pub(super) fn check_expr_with_expectation_and_args(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   expected: Expectation<'tcx>,
      .                   args: &'tcx [hir::Expr<'tcx>],
      .               ) -> Ty<'tcx> {
118,140 ( 0.01%)          if self.tcx().sess.verbose() {
      .                       // make this code only run with -Zverbose because it is probably slow
      .                       if let Ok(lint_str) = self.tcx.sess.source_map().span_to_snippet(expr.span) {
      .                           if !lint_str.contains('\n') {
      .                               debug!("expr text: {}", lint_str);
      .                           } else {
      .                               let mut lines = lint_str.lines();
      .                               if let Some(line0) = lines.next() {
      .                                   let remaining_lines = lines.count();
-- line 186 ----------------------------------------
-- line 189 ----------------------------------------
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   // True if `expr` is a `Try::from_ok(())` that is a result of desugaring a try block
      .                   // without the final expr (e.g. `try { return; }`). We don't want to generate an
      .                   // unreachable_code lint for it since warnings for autogenerated code are confusing.
 59,070 ( 0.01%)          let is_try_block_generated_unit_expr = match expr.kind {
    140 ( 0.00%)              ExprKind::Call(_, args) if expr.span.is_desugaring(DesugaringKind::TryBlock) => {
      .                           args.len() == 1 && args[0].span.is_desugaring(DesugaringKind::TryBlock)
      .                       }
      .           
      .                       _ => false,
      .                   };
      .           
      .                   // Warn for expressions after diverging siblings.
      .                   if !is_try_block_generated_unit_expr {
206,745 ( 0.02%)              self.warn_if_unreachable(expr.hir_id, expr.span, "expression");
      .                   }
      .           
      .                   // Hide the outer diverging and has_errors flags.
      .                   let old_diverges = self.diverges.replace(Diverges::Maybe);
      .                   let old_has_errors = self.has_errors.replace(false);
      .           
 59,304 ( 0.01%)          let ty = ensure_sufficient_stack(|| match &expr.kind {
      .                       hir::ExprKind::Path(
      .                           qpath @ hir::QPath::Resolved(..) | qpath @ hir::QPath::TypeRelative(..),
    702 ( 0.00%)              ) => self.check_expr_path(qpath, expr, args),
147,090 ( 0.02%)              _ => self.check_expr_kind(expr, expected),
      .                   });
      .           
      .                   // Warn for non-block expressions with diverging children.
118,140 ( 0.01%)          match expr.kind {
      .                       ExprKind::Block(..)
      .                       | ExprKind::If(..)
      .                       | ExprKind::Let(..)
      .                       | ExprKind::Loop(..)
      .                       | ExprKind::Match(..) => {}
      .                       // If `expr` is a result of desugaring the try block and is an ok-wrapped
      .                       // diverging expression (e.g. it arose from desugaring of `try { return }`),
      .                       // we skip issuing a warning because it is autogenerated code.
    140 ( 0.00%)              ExprKind::Call(..) if expr.span.is_desugaring(DesugaringKind::TryBlock) => {}
    140 ( 0.00%)              ExprKind::Call(callee, _) => self.warn_if_unreachable(expr.hir_id, callee.span, "call"),
     31 ( 0.00%)              ExprKind::MethodCall(segment, ..) => {
     93 ( 0.00%)                  self.warn_if_unreachable(expr.hir_id, segment.ident.span, "call")
      .                       }
176,628 ( 0.02%)              _ => self.warn_if_unreachable(expr.hir_id, expr.span, "expression"),
      .                   }
      .           
      .                   // Any expression that produces a value of type `!` must have diverged
 29,535 ( 0.00%)          if ty.is_never() {
      .                       self.diverges.set(self.diverges.get() | Diverges::always(expr.span));
      .                   }
      .           
      .                   // Record the type, which applies it effects.
      .                   // We need to do this after the warning above, so that
      .                   // we don't warn for the diverging expression itself.
147,675 ( 0.02%)          self.write_ty(expr.hir_id, ty);
      .           
      .                   // Combine the diverging and has_error flags.
      .                   self.diverges.set(self.diverges.get() | old_diverges);
 29,535 ( 0.00%)          self.has_errors.set(self.has_errors.get() | old_has_errors);
      .           
      .                   debug!("type of {} is...", self.tcx.hir().node_to_string(expr.hir_id));
      .                   debug!("... {:?}, expected is {:?}", ty, expected);
      .           
      .                   ty
265,815 ( 0.03%)      }
      .           
587,690 ( 0.06%)      #[instrument(skip(self, expr), level = "debug")]
      .               fn check_expr_kind(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   expected: Expectation<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   trace!("expr={:#?}", expr);
      .           
 29,418 ( 0.00%)          let tcx = self.tcx;
176,508 ( 0.02%)          match expr.kind {
      .                       ExprKind::Box(subexpr) => self.check_expr_box(subexpr, expected),
      .                       ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),
    308 ( 0.00%)              ExprKind::Binary(op, lhs, rhs) => self.check_binop(expr, op, lhs, rhs),
      .                       ExprKind::Assign(lhs, rhs, ref span) => {
      .                           self.check_expr_assign(expr, expected, lhs, rhs, span)
      .                       }
      .                       ExprKind::AssignOp(op, lhs, rhs) => self.check_binop_assign(expr, op, lhs, rhs),
      .                       ExprKind::Unary(unop, oprnd) => self.check_expr_unary(unop, oprnd, expected, expr),
    261 ( 0.00%)              ExprKind::AddrOf(kind, mutbl, oprnd) => {
      .                           self.check_expr_addr_of(kind, mutbl, oprnd, expected, expr)
      .                       }
      .                       ExprKind::Path(QPath::LangItem(lang_item, _, hir_id)) => {
      .                           self.check_lang_item_path(lang_item, expr, hir_id)
      .                       }
      .                       ExprKind::Path(ref qpath) => self.check_expr_path(qpath, expr, &[]),
      .                       ExprKind::InlineAsm(asm) => self.check_expr_asm(asm),
      .                       ExprKind::Break(destination, ref expr_opt) => {
-- line 285 ----------------------------------------
-- line 293 ----------------------------------------
      .                               tcx.ty_error()
      .                           }
      .                       }
      .                       ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),
      .                       ExprKind::Let(let_expr) => self.check_expr_let(let_expr),
      .                       ExprKind::Loop(body, _, source, _) => {
      .                           self.check_expr_loop(body, source, expected, expr)
      .                       }
      6 ( 0.00%)              ExprKind::Match(discrim, arms, match_src) => {
     14 ( 0.00%)                  self.check_match(expr, &discrim, arms, expected, match_src)
      .                       }
      .                       ExprKind::Closure(capture, decl, body_id, _, gen) => {
      .                           self.check_expr_closure(expr, capture, &decl, body_id, gen, expected)
      .                       }
    396 ( 0.00%)              ExprKind::Block(body, _) => self.check_block_with_expected(&body, expected),
    224 ( 0.00%)              ExprKind::Call(callee, args) => self.check_call(expr, &callee, args, expected),
     31 ( 0.00%)              ExprKind::MethodCall(segment, args, _) => {
      .                           self.check_method_call(expr, segment, args, expected)
      .                       }
      .                       ExprKind::Cast(e, t) => self.check_expr_cast(e, t, expr),
      .                       ExprKind::Type(e, t) => {
      .                           let ty = self.to_ty_saving_user_provided_ty(&t);
      .                           self.check_expr_eq_type(&e, ty);
      .                           ty
      .                       }
      .                       ExprKind::If(cond, then_expr, opt_else_expr) => {
      .                           self.check_then_else(cond, then_expr, opt_else_expr, expr.span, expected)
      .                       }
      .                       ExprKind::DropTemps(e) => self.check_expr_with_expectation(e, expected),
     56 ( 0.00%)              ExprKind::Array(args) => self.check_expr_array(args, expected, expr),
      .                       ExprKind::ConstBlock(ref anon_const) => {
      .                           self.check_expr_const_block(anon_const, expected, expr)
      .                       }
      .                       ExprKind::Repeat(element, ref count) => {
      .                           self.check_expr_repeat(element, count, expected, expr)
      .                       }
      .                       ExprKind::Tup(elts) => self.check_expr_tuple(elts, expected, expr),
      .                       ExprKind::Struct(qpath, fields, ref base_expr) => {
-- line 330 ----------------------------------------
-- line 409 ----------------------------------------
      .                   &self,
      .                   kind: hir::BorrowKind,
      .                   mutbl: hir::Mutability,
      .                   oprnd: &'tcx hir::Expr<'tcx>,
      .                   expected: Expectation<'tcx>,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let hint = expected.only_has_type(self).map_or(NoExpectation, |ty| {
    145 ( 0.00%)              match ty.kind() {
      .                           ty::Ref(_, ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) => {
    116 ( 0.00%)                      if oprnd.is_syntactic_place_expr() {
      .                                   // Places may legitimately have unsized types.
      .                                   // For example, dereferences of a fat pointer and
      .                                   // the last field of a struct can be unsized.
      .                                   ExpectHasType(ty)
      .                               } else {
    168 ( 0.00%)                          Expectation::rvalue_hint(self, ty)
      .                               }
      .                           }
      .                           _ => NoExpectation,
      .                       }
     87 ( 0.00%)          });
      .                   let ty =
      .                       self.check_expr_with_expectation_and_needs(&oprnd, hint, Needs::maybe_mut_place(mutbl));
      .           
      .                   let tm = ty::TypeAndMut { ty, mutbl };
     29 ( 0.00%)          match kind {
     29 ( 0.00%)              _ if tm.ty.references_error() => self.tcx.ty_error(),
      .                       hir::BorrowKind::Raw => {
      .                           self.check_named_place_expr(oprnd);
      .                           self.tcx.mk_ptr(tm)
      .                       }
      .                       hir::BorrowKind::Ref => {
      .                           // Note: at this point, we cannot say what the best lifetime
      .                           // is to use for resulting pointer.  We want to use the
      .                           // shortest lifetime possible so as to avoid spurious borrowck
-- line 444 ----------------------------------------
-- line 448 ----------------------------------------
      .                           // type inference is complete.
      .                           //
      .                           // Therefore, here we simply generate a region variable. The
      .                           // region inferencer will then select a suitable value.
      .                           // Finally, borrowck will infer the value of the region again,
      .                           // this time with enough precision to check that the value
      .                           // whose address was taken can actually be made to live as long
      .                           // as it needs to live.
    145 ( 0.00%)                  let region = self.next_region_var(infer::AddrOfRegion(expr.span));
     29 ( 0.00%)                  self.tcx.mk_ref(region, tm)
      .                       }
      .                   }
      .               }
      .           
      .               /// Does this expression refer to a place that either:
      .               /// * Is based on a local or static.
      .               /// * Contains a dereference
      .               /// Note that the adjustments for the children of `expr` should already
-- line 465 ----------------------------------------
-- line 492 ----------------------------------------
      .                   &self,
      .                   lang_item: hir::LangItem,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   hir_id: Option<hir::HirId>,
      .               ) -> Ty<'tcx> {
      .                   self.resolve_lang_item_path(lang_item, expr.span, expr.hir_id, hir_id).1
      .               }
      .           
  1,287 ( 0.00%)      pub(crate) fn check_expr_path(
      .                   &self,
      .                   qpath: &'tcx hir::QPath<'tcx>,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   args: &'tcx [hir::Expr<'tcx>],
      .               ) -> Ty<'tcx> {
    117 ( 0.00%)          let tcx = self.tcx;
  1,287 ( 0.00%)          let (res, opt_ty, segs) =
  1,170 ( 0.00%)              self.resolve_ty_and_res_fully_qualified_call(qpath, expr.hir_id, expr.span);
    580 ( 0.00%)          let ty = match res {
      .                       Res::Err => {
      .                           self.set_tainted_by_errors();
      .                           tcx.ty_error()
      .                       }
      .                       Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _) => {
      .                           report_unexpected_variant_res(tcx, res, expr.span);
      .                           tcx.ty_error()
      .                       }
  2,106 ( 0.00%)              _ => self.instantiate_value_path(segs, opt_ty, res, expr.span, expr.hir_id).0,
      .                   };
      .           
    351 ( 0.00%)          if let ty::FnDef(..) = ty.kind() {
     84 ( 0.00%)              let fn_sig = ty.fn_sig(tcx);
    112 ( 0.00%)              if !tcx.features().unsized_fn_params {
      .                           // We want to remove some Sized bounds from std functions,
      .                           // but don't want to expose the removal to stable Rust.
      .                           // i.e., we don't want to allow
      .                           //
      .                           // ```rust
      .                           // drop as fn(str);
      .                           // ```
      .                           //
      .                           // to work in stable even if the Sized bound on `drop` is relaxed.
      .                           for i in 0..fn_sig.inputs().skip_binder().len() {
      .                               // We just want to check sizedness, so instead of introducing
      .                               // placeholder lifetimes with probing, we just replace higher lifetimes
      .                               // with fresh vars.
     56 ( 0.00%)                      let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);
      .                               let input = self
      .                                   .replace_bound_vars_with_fresh_vars(
      .                                       span,
      .                                       infer::LateBoundRegionConversionTime::FnCall,
      .                                       fn_sig.input(i),
      .                                   )
      .                                   .0;
    224 ( 0.00%)                      self.require_type_is_sized_deferred(
      .                                   input,
      .                                   span,
    168 ( 0.00%)                          traits::SizedArgumentType(None),
      .                               );
      .                           }
      .                       }
      .                       // Here we want to prevent struct constructors from returning unsized types.
      .                       // There were two cases this happened: fn pointer coercion in stable
      .                       // and usual function call in presence of unsized_locals.
      .                       // Also, as we just want to check sizedness, instead of introducing
      .                       // placeholder lifetimes with probing, we just replace higher lifetimes
-- line 556 ----------------------------------------
-- line 557 ----------------------------------------
      .                       // with fresh vars.
      .                       let output = self
      .                           .replace_bound_vars_with_fresh_vars(
      .                               expr.span,
      .                               infer::LateBoundRegionConversionTime::FnCall,
      .                               fn_sig.output(),
      .                           )
      .                           .0;
    168 ( 0.00%)              self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);
      .                   }
      .           
      .                   // We always require that the type provided as the value for
      .                   // a type parameter outlives the moment of instantiation.
    468 ( 0.00%)          let substs = self.typeck_results.borrow().node_substs(expr.hir_id);
      .                   self.add_wf_bounds(substs, expr);
      .           
      .                   ty
    936 ( 0.00%)      }
      .           
      .               fn check_expr_break(
      .                   &self,
      .                   destination: hir::Destination,
      .                   expr_opt: Option<&'tcx hir::Expr<'tcx>>,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tcx = self.tcx;
-- line 582 ----------------------------------------
-- line 791 ----------------------------------------
      .                           coercion.coerce_forced_unit(self, &cause, &mut |_| (), true);
      .                       }
      .                   }
      .                   self.tcx.types.never
      .               }
      .           
      .               /// `explicit_return` is `true` if we're checkng an explicit `return expr`,
      .               /// and `false` if we're checking a trailing expression.
    288 ( 0.00%)      pub(super) fn check_return_expr(
      .                   &self,
      .                   return_expr: &'tcx hir::Expr<'tcx>,
      .                   explicit_return: bool,
      .               ) {
      .                   let ret_coercion = self.ret_coercion.as_ref().unwrap_or_else(|| {
      .                       span_bug!(return_expr.span, "check_return_expr called outside fn body")
      .                   });
      .           
      .                   let ret_ty = ret_coercion.borrow().expected_ty();
      .                   let return_expr_ty = self.check_expr_with_hint(return_expr, ret_ty);
     36 ( 0.00%)          let mut span = return_expr.span;
      .                   // Use the span of the trailing expression for our cause,
      .                   // not the span of the entire function
     72 ( 0.00%)          if !explicit_return {
    108 ( 0.00%)              if let ExprKind::Block(body, _) = return_expr.kind {
    108 ( 0.00%)                  if let Some(last_expr) = body.expr {
     36 ( 0.00%)                      span = last_expr.span;
      .                           }
      .                       }
      .                   }
      .                   ret_coercion.borrow_mut().coerce(
      .                       self,
     72 ( 0.00%)              &self.cause(span, ObligationCauseCode::ReturnValue(return_expr.hir_id)),
      .                       return_expr,
      .                       return_expr_ty,
      .                   );
    288 ( 0.00%)      }
      .           
      .               pub(crate) fn check_lhs_assignable(
      .                   &self,
      .                   lhs: &'tcx hir::Expr<'tcx>,
      .                   err_code: &'static str,
      .                   op_span: Span,
      .               ) {
      .                   if lhs.is_syntactic_place_expr() {
-- line 834 ----------------------------------------
-- line 1095 ----------------------------------------
      .               /// Checks a method call.
      .               fn check_method_call(
      .                   &self,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .                   segment: &hir::PathSegment<'_>,
      .                   args: &'tcx [hir::Expr<'tcx>],
      .                   expected: Expectation<'tcx>,
      .               ) -> Ty<'tcx> {
     62 ( 0.00%)          let rcvr = &args[0];
      .                   let rcvr_t = self.check_expr(&rcvr);
      .                   // no need to check for bot/err -- callee does that
    124 ( 0.00%)          let rcvr_t = self.structurally_resolved_type(args[0].span, rcvr_t);
     31 ( 0.00%)          let span = segment.ident.span;
      .           
    496 ( 0.00%)          let method = match self.lookup_method(rcvr_t, segment, span, expr, rcvr, args) {
     62 ( 0.00%)              Ok(method) => {
      .                           // We could add a "consider `foo::<params>`" suggestion here, but I wasn't able to
      .                           // trigger this codepath causing `structuraly_resolved_type` to emit an error.
      .           
    341 ( 0.00%)                  self.write_method_call(expr.hir_id, method);
    155 ( 0.00%)                  Ok(method)
      .                       }
      .                       Err(error) => {
      .                           if segment.ident.name != kw::Empty {
      .                               if let Some(mut err) = self.report_method_error(
      .                                   span,
      .                                   rcvr_t,
      .                                   segment.ident,
      .                                   SelfSource::MethodCall(&args[0]),
-- line 1123 ----------------------------------------
-- line 1127 ----------------------------------------
      .                                   err.emit();
      .                               }
      .                           }
      .                           Err(())
      .                       }
      .                   };
      .           
      .                   // Call the generic checker.
    434 ( 0.00%)          self.check_method_argument_types(
      .                       span,
      .                       expr,
    186 ( 0.00%)              method,
      .                       &args[1..],
      .                       DontTupleArguments,
      .                       expected,
      .                   )
      .               }
      .           
      .               fn check_expr_cast(
      .                   &self,
-- line 1146 ----------------------------------------
-- line 1176 ----------------------------------------
      .               }
      .           
      .               fn check_expr_array(
      .                   &self,
      .                   args: &'tcx [hir::Expr<'tcx>],
      .                   expected: Expectation<'tcx>,
      .                   expr: &'tcx hir::Expr<'tcx>,
      .               ) -> Ty<'tcx> {
     28 ( 0.00%)          let element_ty = if !args.is_empty() {
     84 ( 0.00%)              let coerce_to = expected
      .                           .to_option(self)
     84 ( 0.00%)                  .and_then(|uty| match *uty.kind() {
      .                               ty::Array(ty, _) | ty::Slice(ty) => Some(ty),
      .                               _ => None,
      .                           })
      .                           .unwrap_or_else(|| {
      .                               self.next_ty_var(TypeVariableOrigin {
      .                                   kind: TypeVariableOriginKind::TypeInference,
      .                                   span: expr.span,
      .                               })
      .                           });
      .                       let mut coerce = CoerceMany::with_coercion_sites(coerce_to, args);
     28 ( 0.00%)              assert_eq!(self.diverges.get(), Diverges::Maybe);
      .                       for e in args {
      .                           let e_ty = self.check_expr_with_hint(e, coerce_to);
 29,209 ( 0.00%)                  let cause = self.misc(e.span);
175,254 ( 0.02%)                  coerce.coerce(self, &cause, e, e_ty);
      .                       }
    336 ( 0.00%)              coerce.complete(self)
      .                   } else {
      .                       self.next_ty_var(TypeVariableOrigin {
      .                           kind: TypeVariableOriginKind::TypeInference,
      .                           span: expr.span,
      .                       })
      .                   };
    168 ( 0.00%)          self.tcx.mk_array(element_ty, args.len() as u64)
      .               }
      .           
      .               fn check_expr_const_block(
      .                   &self,
      .                   anon_const: &'tcx hir::AnonConst,
      .                   expected: Expectation<'tcx>,
      .                   _expr: &'tcx hir::Expr<'tcx>,
      .               ) -> Ty<'tcx> {
-- line 1219 ----------------------------------------

266,109 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_passes/src/check_attr.rs
--------------------------------------------------------------------------------
Ir               

-- line 23 ----------------------------------------
      .           use rustc_span::symbol::{sym, Symbol};
      .           use rustc_span::{MultiSpan, Span, DUMMY_SP};
      .           use std::collections::hash_map::Entry;
      .           
      .           pub(crate) fn target_from_impl_item<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               impl_item: &hir::ImplItem<'_>,
      .           ) -> Target {
    280 ( 0.00%)      match impl_item.kind {
      .                   hir::ImplItemKind::Const(..) => Target::AssocConst,
      .                   hir::ImplItemKind::Fn(..) => {
    280 ( 0.00%)              let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id());
    224 ( 0.00%)              let containing_item = tcx.hir().expect_item(parent_hir_id);
    112 ( 0.00%)              let containing_impl_is_for_trait = match &containing_item.kind {
      .                           hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),
      .                           _ => bug!("parent of an ImplItem must be an Impl"),
      .                       };
    168 ( 0.00%)              if containing_impl_is_for_trait {
      .                           Target::Method(MethodKind::Trait { body: true })
      .                       } else {
      .                           Target::Method(MethodKind::Inherent)
      .                       }
      .                   }
      .                   hir::ImplItemKind::TyAlias(..) => Target::AssocTy,
      .               }
      .           }
-- line 48 ----------------------------------------
-- line 54 ----------------------------------------
      .           }
      .           
      .           struct CheckAttrVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .           }
      .           
      .           impl CheckAttrVisitor<'_> {
      .               /// Checks any attribute.
296,830 ( 0.03%)      fn check_attributes(
      .                   &self,
      .                   hir_id: HirId,
      .                   span: &Span,
      .                   target: Target,
      .                   item: Option<ItemLike<'_>>,
      .               ) {
      .                   let mut doc_aliases = FxHashMap::default();
      .                   let mut is_valid = true;
 29,683 ( 0.00%)          let mut specified_inline = None;
      .                   let mut seen = FxHashMap::default();
237,464 ( 0.02%)          let attrs = self.tcx.hir().attrs(hir_id);
      .                   for attr in attrs {
  1,871 ( 0.00%)              let attr_is_valid = match attr.name_or_empty() {
      .                           sym::inline => self.check_inline(hir_id, attr, span, target),
      .                           sym::non_exhaustive => self.check_non_exhaustive(hir_id, attr, span, target),
      .                           sym::marker => self.check_marker(hir_id, attr, span, target),
      .                           sym::target_feature => self.check_target_feature(hir_id, attr, span, target),
      .                           sym::track_caller => {
      .                               self.check_track_caller(hir_id, &attr.span, attrs, span, target)
      .                           }
      .                           sym::doc => self.check_doc_attrs(
-- line 83 ----------------------------------------
-- line 116 ----------------------------------------
      .                           sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),
      .                           sym::rustc_const_unstable
      .                           | sym::rustc_const_stable
      .                           | sym::unstable
      .                           | sym::stable
      .                           | sym::rustc_promotable => self.check_stability_promotable(&attr, span, target),
      .                           _ => true,
      .                       };
    381 ( 0.00%)              is_valid &= attr_is_valid;
      .           
      .                       // lint-only checks
  1,342 ( 0.00%)              match attr.name_or_empty() {
      .                           sym::cold => self.check_cold(hir_id, attr, span, target),
      .                           sym::link => self.check_link(hir_id, attr, span, target),
      .                           sym::link_name => self.check_link_name(hir_id, attr, span, target),
      .                           sym::link_section => self.check_link_section(hir_id, attr, span, target),
      .                           sym::no_mangle => self.check_no_mangle(hir_id, attr, span, target),
      .                           sym::deprecated | sym::rustc_deprecated => {
      .                               self.check_deprecated(hir_id, attr, span, target)
      .                           }
      2 ( 0.00%)                  sym::macro_use | sym::macro_escape => self.check_macro_use(hir_id, attr, target),
      .                           sym::path => self.check_generic_attr(hir_id, attr, target, &[Target::Mod]),
      .                           sym::plugin_registrar => self.check_plugin_registrar(hir_id, attr, target),
      .                           sym::macro_export => self.check_macro_export(hir_id, attr, target),
      .                           sym::ignore | sym::should_panic | sym::proc_macro_derive => {
      .                               self.check_generic_attr(hir_id, attr, target, &[Target::Fn])
      .                           }
      .                           sym::automatically_derived => {
      .                               self.check_generic_attr(hir_id, attr, target, &[Target::Impl])
      .                           }
      .                           sym::no_implicit_prelude => {
      .                               self.check_generic_attr(hir_id, attr, target, &[Target::Mod])
      .                           }
      .                           _ => {}
      .                       }
      .           
    127 ( 0.00%)              let builtin = attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name));
      .           
    272 ( 0.00%)              if hir_id != CRATE_HIR_ID {
    111 ( 0.00%)                  if let Some(BuiltinAttribute { type_: AttributeType::CrateLevel, .. }) =
    109 ( 0.00%)                      attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name))
      .                           {
      .                               self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {
      .                                   let msg = match attr.style {
      .                                       ast::AttrStyle::Outer => {
      .                                           "crate-level attribute should be an inner attribute: add an exclamation \
      .                                            mark: `#![foo]`"
      .                                       }
      .                                       ast::AttrStyle::Inner => "crate-level attribute should be in the root module",
      .                                   };
      .                                   lint.build(msg).emit()
      .                               });
      .                           }
      .                       }
      .           
    328 ( 0.00%)              if let Some(BuiltinAttribute { duplicates, .. }) = builtin {
    111 ( 0.00%)                  check_duplicates(self.tcx, attr, hir_id, *duplicates, &mut seen);
      .                       }
      .           
      .                       // Warn on useless empty attributes.
  1,140 ( 0.00%)              if matches!(
    127 ( 0.00%)                  attr.name_or_empty(),
      .                           sym::macro_use
      .                               | sym::allow
      .                               | sym::warn
      .                               | sym::deny
      .                               | sym::forbid
      .                               | sym::feature
      .                               | sym::repr
      .                               | sym::target_feature
      3 ( 0.00%)              ) && attr.meta_item_list().map_or(false, |list| list.is_empty())
      .                       {
      .                           self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {
      .                               lint.build("unused attribute")
      .                                   .span_suggestion(
      .                                       attr.span,
      .                                       "remove this attribute",
      .                                       String::new(),
      .                                       Applicability::MachineApplicable,
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
      .                                       "attribute `{}` with an empty list has no effect",
      .                                       attr.name_or_empty()
      .                                   ))
      .                                   .emit();
      .                           });
      .                       }
      .                   }
      .           
    198 ( 0.00%)          if !is_valid {
      .                       return;
      .                   }
      .           
 59,366 ( 0.01%)          if matches!(target, Target::Closure | Target::Fn | Target::Method(_) | Target::ForeignFn) {
    384 ( 0.00%)              self.tcx.ensure().codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));
      .                   }
      .           
      .                   self.check_repr(attrs, span, target, item, hir_id);
      .                   self.check_used(attrs, target);
237,464 ( 0.02%)      }
      .           
      .               fn inline_attr_str_error_with_macro_def(&self, hir_id: HirId, attr: &Attribute, sym: &str) {
      .                   self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {
      .                       lint.build(&format!(
      .                           "`#[{}]` is ignored on struct fields, match arms and macro defs",
      .                           sym,
      .                       ))
      .                       .warn(
-- line 223 ----------------------------------------
-- line 246 ----------------------------------------
      .                            for more information",
      .                           )
      .                           .emit();
      .                   });
      .               }
      .           
      .               /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.
      .               fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {
    175 ( 0.00%)          match target {
      .                       Target::Fn
      .                       | Target::Closure
      .                       | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,
      .                       Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {
      .                           self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {
      .                               lint.build("`#[inline]` is ignored on function prototypes").emit()
      .                           });
      .                           true
-- line 262 ----------------------------------------
-- line 1672 ----------------------------------------
      .                           hint_spans,
      .                           E0692,
      .                           "transparent {} cannot have other repr hints",
      .                           target
      .                       )
      .                       .emit();
      .                   }
      .                   // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)
237,464 ( 0.02%)          if (int_reprs > 1)
      .                       || (is_simd && is_c)
118,732 ( 0.01%)              || (int_reprs == 1
      .                           && is_c
      .                           && item.map_or(false, |item| {
      .                               if let ItemLike::Item(item) = item {
      .                                   return is_c_like_enum(item);
      .                               }
      .                               return false;
      .                           }))
      .                   {
-- line 1690 ----------------------------------------
-- line 1698 ----------------------------------------
      .                                   .emit();
      .                           },
      .                       );
      .                   }
      .               }
      .           
      .               fn check_used(&self, attrs: &[Attribute], target: Target) {
      .                   for attr in attrs {
     37 ( 0.00%)              if attr.has_name(sym::used) && target != Target::Static {
      .                           self.tcx
      .                               .sess
      .                               .span_err(attr.span, "attribute must be applied to a `static` variable");
      .                       }
      .                   }
      .               }
      .           
      .               /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.
-- line 1714 ----------------------------------------
-- line 1834 ----------------------------------------
      .                               lint.build("attribute is ignored here").emit();
      .                           });
      .                       }
      .                       _ => {}
      .                   }
      .               }
      .           
      .               fn check_macro_use(&self, hir_id: HirId, attr: &Attribute, target: Target) {
      2 ( 0.00%)          let name = attr.name_or_empty();
      2 ( 0.00%)          match target {
      .                       Target::ExternCrate | Target::Mod => {}
      .                       _ => {
      .                           self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {
      .                               lint.build(&format!(
      .                                   "`#[{name}]` only has an effect on `extern crate` and modules"
      .                               ))
      .                               .emit();
      .                           });
-- line 1851 ----------------------------------------
-- line 1869 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for CheckAttrVisitor<'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
     64 ( 0.00%)          self.tcx.hir()
      .               }
      .           
    306 ( 0.00%)      fn visit_item(&mut self, item: &'tcx Item<'tcx>) {
      .                   // Historically we've run more checks on non-exported than exported macros,
      .                   // so this lets us continue to run them while maintaining backwards compatibility.
      .                   // In the long run, the checks should be harmonized.
     68 ( 0.00%)          if let ItemKind::Macro(ref macro_def) = item.kind {
      .                       let def_id = item.def_id.to_def_id();
      .                       if macro_def.macro_rules && !self.tcx.has_attr(def_id, sym::macro_export) {
      .                           check_non_exported_macro_for_invalid_attrs(self.tcx, item);
      .                       }
      .                   }
      .           
     68 ( 0.00%)          let target = Target::from_item(item);
    340 ( 0.00%)          self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));
    102 ( 0.00%)          intravisit::walk_item(self, item)
    272 ( 0.00%)      }
      .           
      .               fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {
      .                   let target = Target::from_generic_param(generic_param);
      .                   self.check_attributes(generic_param.hir_id, &generic_param.span, target, None);
      .                   intravisit::walk_generic_param(self, generic_param)
      .               }
      .           
      .               fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {
     70 ( 0.00%)          let target = Target::from_trait_item(trait_item);
    280 ( 0.00%)          self.check_attributes(trait_item.hir_id(), &trait_item.span, target, None);
    105 ( 0.00%)          intravisit::walk_trait_item(self, trait_item)
      .               }
      .           
      .               fn visit_field_def(&mut self, struct_field: &'tcx hir::FieldDef<'tcx>) {
      .                   self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);
      .                   intravisit::walk_field_def(self, struct_field);
      .               }
      .           
      .               fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {
    104 ( 0.00%)          self.check_attributes(arm.hir_id, &arm.span, Target::Arm, None);
     39 ( 0.00%)          intravisit::walk_arm(self, arm);
      .               }
      .           
      .               fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {
      .                   let target = Target::from_foreign_item(f_item);
      .                   self.check_attributes(
      .                       f_item.hir_id(),
      .                       &f_item.span,
      .                       target,
      .                       Some(ItemLike::ForeignItem(f_item)),
      .                   );
      .                   intravisit::walk_foreign_item(self, f_item)
      .               }
      .           
    168 ( 0.00%)      fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {
      .                   let target = target_from_impl_item(self.tcx, impl_item);
    224 ( 0.00%)          self.check_attributes(impl_item.hir_id(), &impl_item.span, target, None);
     84 ( 0.00%)          intravisit::walk_impl_item(self, impl_item)
    140 ( 0.00%)      }
      .           
      .               fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {
      .                   // When checking statements ignore expressions, they will be checked later.
      .                   if let hir::StmtKind::Local(ref l) = stmt.kind {
      .                       self.check_attributes(l.hir_id, &stmt.span, Target::Statement, None);
      .                   }
      .                   intravisit::walk_stmt(self, stmt)
      .               }
      .           
      .               fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 29,473 ( 0.00%)          let target = match expr.kind {
      .                       hir::ExprKind::Closure(..) => Target::Closure,
      .                       _ => Target::Expression,
      .                   };
      .           
236,024 ( 0.02%)          self.check_attributes(expr.hir_id, &expr.span, target, None);
 88,885 ( 0.01%)          intravisit::walk_expr(self, expr)
      .               }
      .           
      .               fn visit_variant(
      .                   &mut self,
      .                   variant: &'tcx hir::Variant<'tcx>,
      .                   generics: &'tcx hir::Generics<'tcx>,
      .                   item_id: HirId,
      .               ) {
      .                   self.check_attributes(variant.id, &variant.span, Target::Variant, None);
      .                   intravisit::walk_variant(self, variant, generics, item_id)
      .               }
      .           
      .               fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {
    259 ( 0.00%)          self.check_attributes(param.hir_id, &param.span, Target::Param, None);
      .           
      .                   intravisit::walk_param(self, param);
      .               }
      .           }
      .           
      .           fn is_c_like_enum(item: &Item<'_>) -> bool {
      .               if let ItemKind::Enum(ref def, _) = item.kind {
      .                   for variant in def.variants {
-- line 1972 ----------------------------------------
-- line 1999 ----------------------------------------
      .                   sym::test_case,
      .                   sym::global_allocator,
      .                   sym::bench,
      .               ];
      .           
      .               for attr in attrs {
      .                   // This function should only be called with crate attributes
      .                   // which are inner attributes always but lets check to make sure
     18 ( 0.00%)          if attr.style == AttrStyle::Inner {
      .                       for attr_to_check in ATTRS_TO_CHECK {
      .                           if attr.has_name(*attr_to_check) {
      .                               let mut err = tcx.sess.struct_span_err(
      .                                   attr.span,
      .                                   &format!(
      .                                       "`{}` attribute cannot be used at crate level",
      .                                       attr_to_check.to_ident_string()
      .                                   ),
-- line 2015 ----------------------------------------
-- line 2044 ----------------------------------------
      .                           "attribute should be applied to function or closure",
      .                       )
      .                       .span_label(attr.span, "not a function or closure")
      .                       .emit();
      .                   }
      .               }
      .           }
      .           
     18 ( 0.00%)  fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
      2 ( 0.00%)      let check_attr_visitor = &mut CheckAttrVisitor { tcx };
     12 ( 0.00%)      tcx.hir().visit_item_likes_in_module(module_def_id, &mut check_attr_visitor.as_deep_visitor());
      2 ( 0.00%)      if module_def_id.is_top_level_module() {
      7 ( 0.00%)          check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);
      4 ( 0.00%)          check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());
      .               }
     16 ( 0.00%)  }
      .           
      .           pub(crate) fn provide(providers: &mut Providers) {
      2 ( 0.00%)      *providers = Providers { check_mod_attrs, ..*providers };
      .           }
      .           
      .           fn check_duplicates(
      .               tcx: TyCtxt<'_>,
      .               attr: &Attribute,
      .               hir_id: HirId,
      .               duplicates: AttributeDuplicates,
      .               seen: &mut FxHashMap<Symbol, Span>,
      .           ) {
      .               use AttributeDuplicates::*;
    188 ( 0.00%)      if matches!(duplicates, WarnFollowingWordOnly) && !attr.is_word() {
      .                   return;
      .               }
      .               match duplicates {
      .                   DuplicatesOk => {}
      .                   WarnFollowing | FutureWarnFollowing | WarnFollowingWordOnly | FutureWarnPreceding => {
     37 ( 0.00%)              match seen.entry(attr.name_or_empty()) {
      .                           Entry::Occupied(mut entry) => {
      .                               let (this, other) = if matches!(duplicates, FutureWarnPreceding) {
      .                                   let to_remove = entry.insert(attr.span);
      .                                   (to_remove, attr.span)
      .                               } else {
      .                                   (attr.span, *entry.get())
      .                               };
      .                               tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, this, |lint| {
-- line 2087 ----------------------------------------
-- line 2098 ----------------------------------------
      .                                            being phased out; it will become a hard error in \
      .                                            a future release!",
      .                                       );
      .                                   }
      .                                   db.emit();
      .                               });
      .                           }
      .                           Entry::Vacant(entry) => {
     37 ( 0.00%)                      entry.insert(attr.span);
      .                           }
      .                       }
      .                   }
      .                   ErrorFollowing | ErrorPreceding => match seen.entry(attr.name_or_empty()) {
      .                       Entry::Occupied(mut entry) => {
      .                           let (this, other) = if matches!(duplicates, ErrorPreceding) {
      .                               let to_remove = entry.insert(attr.span);
      .                               (to_remove, attr.span)
-- line 2114 ----------------------------------------

210,125 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_passes/src/check_attr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/early.rs
--------------------------------------------------------------------------------
Ir               

-- line 34 ----------------------------------------
      .           }) }
      .           
      .           pub struct EarlyContextAndPass<'a, T: EarlyLintPass> {
      .               context: EarlyContext<'a>,
      .               pass: T,
      .           }
      .           
      .           impl<'a, T: EarlyLintPass> EarlyContextAndPass<'a, T> {
547,452 ( 0.06%)      fn check_id(&mut self, id: ast::NodeId) {
425,796 ( 0.04%)          for early_lint in self.context.buffered.take(id) {
      .                       let BufferedEarlyLint { span, msg, node_id: _, lint_id, diagnostic } = early_lint;
      .                       self.context.lookup_with_diagnostics(
      .                           lint_id.lint,
      .                           Some(span),
      .                           |lint| lint.build(&msg).emit(),
      .                           diagnostic,
      .                       );
      .                   }
486,624 ( 0.05%)      }
      .           
      .               /// Merge the lints specified by any lint attributes into the
      .               /// current lint context, call the provided function, then reset the
      .               /// lints in effect to their previous state.
      .               fn with_lint_attrs<F>(&mut self, id: ast::NodeId, attrs: &'a [ast::Attribute], f: F)
      .               where
      .                   F: FnOnce(&mut Self),
      .               {
      .                   let is_crate_node = id == ast::CRATE_NODE_ID;
416,065 ( 0.04%)          let push = self.context.builder.push(attrs, is_crate_node);
178,442 ( 0.02%)          self.check_id(id);
      .                   self.enter_attrs(attrs);
      .                   f(self);
      .                   self.exit_attrs(attrs);
650,710 ( 0.07%)          self.context.builder.pop(push);
      .               }
      .           
      .               fn enter_attrs(&mut self, attrs: &'a [ast::Attribute]) {
      .                   debug!("early context: enter_attrs({:?})", attrs);
326,957 ( 0.03%)          run_early_pass!(self, enter_lint_attrs, attrs);
      .               }
      .           
      .               fn exit_attrs(&mut self, attrs: &'a [ast::Attribute]) {
      .                   debug!("early context: exit_attrs({:?})", attrs);
297,207 ( 0.03%)          run_early_pass!(self, exit_lint_attrs, attrs);
      .               }
      .           }
      .           
      .           impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T> {
      .               fn visit_param(&mut self, param: &'a ast::Param) {
      .                   self.with_lint_attrs(param.id, &param.attrs, |cx| {
    520 ( 0.00%)              run_early_pass!(cx, check_param, param);
    390 ( 0.00%)              ast_visit::walk_param(cx, param);
      .                   });
      .               }
      .           
      .               fn visit_item(&mut self, it: &'a ast::Item) {
     74 ( 0.00%)          self.with_lint_attrs(it.id, &it.attrs, |cx| {
    296 ( 0.00%)              run_early_pass!(cx, check_item, it);
    222 ( 0.00%)              ast_visit::walk_item(cx, it);
    296 ( 0.00%)              run_early_pass!(cx, check_item_post, it);
      .                   })
      .               }
      .           
      .               fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) {
      .                   self.with_lint_attrs(it.id, &it.attrs, |cx| {
      .                       run_early_pass!(cx, check_foreign_item, it);
      .                       ast_visit::walk_foreign_item(cx, it);
      .                       run_early_pass!(cx, check_foreign_item_post, it);
      .                   })
      .               }
      .           
      .               fn visit_pat(&mut self, p: &'a ast::Pat) {
    689 ( 0.00%)          run_early_pass!(self, check_pat, p);
    468 ( 0.00%)          self.check_id(p.id);
    468 ( 0.00%)          ast_visit::walk_pat(self, p);
    624 ( 0.00%)          run_early_pass!(self, check_pat_post, p);
      .               }
      .           
      .               fn visit_anon_const(&mut self, c: &'a ast::AnonConst) {
      .                   run_early_pass!(self, check_anon_const, c);
      .                   self.check_id(c.id);
      .                   ast_visit::walk_anon_const(self, c);
      .               }
      .           
530,487 ( 0.06%)      fn visit_expr(&mut self, e: &'a ast::Expr) {
 58,999 ( 0.01%)          self.with_lint_attrs(e.id, &e.attrs, |cx| {
235,996 ( 0.02%)              run_early_pass!(cx, check_expr, e);
176,997 ( 0.02%)              ast_visit::walk_expr(cx, e);
      .                   })
      .               }
      .           
      .               fn visit_expr_field(&mut self, f: &'a ast::ExprField) {
      .                   self.with_lint_attrs(f.id, &f.attrs, |cx| {
      .                       ast_visit::walk_expr_field(cx, f);
      .                   })
      .               }
      .           
    756 ( 0.00%)      fn visit_stmt(&mut self, s: &'a ast::Stmt) {
      .                   // Add the statement's lint attributes to our
      .                   // current state when checking the statement itself.
      .                   // This allows us to handle attributes like
      .                   // `#[allow(unused_doc_comments)]`, which apply to
      .                   // sibling attributes on the same target
      .                   //
      .                   // Note that statements get their attributes from
      .                   // the AST struct that they wrap (e.g. an item)
    420 ( 0.00%)          self.with_lint_attrs(s.id, s.attrs(), |cx| {
    336 ( 0.00%)              run_early_pass!(cx, check_stmt, s);
    252 ( 0.00%)              cx.check_id(s.id);
      .                   });
      .                   // The visitor for the AST struct wrapped
      .                   // by the statement (e.g. `Item`) will call
      .                   // `with_lint_attrs`, so do this walk
      .                   // outside of the above `with_lint_attrs` call
    840 ( 0.00%)          ast_visit::walk_stmt(self, s);
      .               }
      .           
      .               fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, span: Span, id: ast::NodeId) {
  2,459 ( 0.00%)          run_early_pass!(self, check_fn, fk, span, id);
    466 ( 0.00%)          self.check_id(id);
  1,790 ( 0.00%)          ast_visit::walk_fn(self, fk, span);
      .           
      .                   // Explicitly check for lints associated with 'closure_id', since
      .                   // it does not have a corresponding AST node
      .                   if let ast_visit::FnKind::Fn(_, _, sig, _, _) = fk {
    268 ( 0.00%)              if let ast::Async::Yes { closure_id, .. } = sig.header.asyncness {
      .                           self.check_id(closure_id);
      .                       }
      .                   }
  2,325 ( 0.00%)          run_early_pass!(self, check_fn_post, fk, span, id);
      .               }
      .           
      .               fn visit_variant_data(&mut self, s: &'a ast::VariantData) {
      .                   run_early_pass!(self, check_struct_def, s);
      .                   if let Some(ctor_hir_id) = s.ctor_id() {
      .                       self.check_id(ctor_hir_id);
      .                   }
      .                   ast_visit::walk_struct_def(self, s);
-- line 171 ----------------------------------------
-- line 183 ----------------------------------------
      .                   self.with_lint_attrs(v.id, &v.attrs, |cx| {
      .                       run_early_pass!(cx, check_variant, v);
      .                       ast_visit::walk_variant(cx, v);
      .                       run_early_pass!(cx, check_variant_post, v);
      .                   })
      .               }
      .           
      .               fn visit_ty(&mut self, t: &'a ast::Ty) {
  1,235 ( 0.00%)          run_early_pass!(self, check_ty, t);
    948 ( 0.00%)          self.check_id(t.id);
  1,728 ( 0.00%)          ast_visit::walk_ty(self, t);
      .               }
      .           
      .               fn visit_ident(&mut self, ident: Ident) {
  3,204 ( 0.00%)          run_early_pass!(self, check_ident, ident);
      .               }
      .           
      .               fn visit_local(&mut self, l: &'a ast::Local) {
      .                   self.with_lint_attrs(l.id, &l.attrs, |cx| {
      .                       run_early_pass!(cx, check_local, l);
      .                       ast_visit::walk_local(cx, l);
      .                   })
      .               }
      .           
      .               fn visit_block(&mut self, b: &'a ast::Block) {
    348 ( 0.00%)          run_early_pass!(self, check_block, b);
    234 ( 0.00%)          self.check_id(b.id);
      .                   ast_visit::walk_block(self, b);
    858 ( 0.00%)          run_early_pass!(self, check_block_post, b);
      .               }
      .           
      .               fn visit_arm(&mut self, a: &'a ast::Arm) {
      .                   self.with_lint_attrs(a.id, &a.attrs, |cx| {
    104 ( 0.00%)              run_early_pass!(cx, check_arm, a);
     78 ( 0.00%)              ast_visit::walk_arm(cx, a);
      .                   })
      .               }
      .           
      .               fn visit_expr_post(&mut self, e: &'a ast::Expr) {
265,495 ( 0.03%)          run_early_pass!(self, check_expr_post, e);
      .           
      .                   // Explicitly check for lints associated with 'closure_id', since
      .                   // it does not have a corresponding AST node
294,995 ( 0.03%)          match e.kind {
      .                       ast::ExprKind::Closure(_, ast::Async::Yes { closure_id, .. }, ..)
      .                       | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),
      .                       _ => {}
      .                   }
      .               }
      .           
      .               fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {
      .                   run_early_pass!(self, check_generic_arg, arg);
-- line 234 ----------------------------------------
-- line 236 ----------------------------------------
      .               }
      .           
      .               fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {
      .                   run_early_pass!(self, check_generic_param, param);
      .                   ast_visit::walk_generic_param(self, param);
      .               }
      .           
      .               fn visit_generics(&mut self, g: &'a ast::Generics) {
    681 ( 0.00%)          run_early_pass!(self, check_generics, g);
      .                   ast_visit::walk_generics(self, g);
      .               }
      .           
      .               fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {
      .                   run_early_pass!(self, check_where_predicate, p);
      .                   ast_visit::walk_where_predicate(self, p);
      .               }
      .           
      .               fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {
     20 ( 0.00%)          run_early_pass!(self, check_poly_trait_ref, t, m);
     12 ( 0.00%)          ast_visit::walk_poly_trait_ref(self, t, m);
      .               }
      .           
      .               fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: ast_visit::AssocCtxt) {
    126 ( 0.00%)          self.with_lint_attrs(item.id, &item.attrs, |cx| match ctxt {
      .                       ast_visit::AssocCtxt::Trait => {
    280 ( 0.00%)                  run_early_pass!(cx, check_trait_item, item);
    280 ( 0.00%)                  ast_visit::walk_assoc_item(cx, item, ctxt);
    315 ( 0.00%)                  run_early_pass!(cx, check_trait_item_post, item);
      .                       }
      .                       ast_visit::AssocCtxt::Impl => {
    224 ( 0.00%)                  run_early_pass!(cx, check_impl_item, item);
    224 ( 0.00%)                  ast_visit::walk_assoc_item(cx, item, ctxt);
    280 ( 0.00%)                  run_early_pass!(cx, check_impl_item_post, item);
      .                       }
      .                   });
      .               }
      .           
      .               fn visit_lifetime(&mut self, lt: &'a ast::Lifetime) {
    232 ( 0.00%)          run_early_pass!(self, check_lifetime, lt);
    232 ( 0.00%)          self.check_id(lt.id);
      .               }
      .           
      .               fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) {
  2,332 ( 0.00%)          run_early_pass!(self, check_path, p, id);
  1,428 ( 0.00%)          self.check_id(id);
      .                   ast_visit::walk_path(self, p);
      .               }
      .           
      .               fn visit_attribute(&mut self, attr: &'a ast::Attribute) {
  1,036 ( 0.00%)          run_early_pass!(self, check_attribute, attr);
      .               }
      .           
      .               fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {
      .                   run_early_pass!(self, check_mac_def, mac, id);
      .                   self.check_id(id);
      .               }
      .           
      .               fn visit_mac_call(&mut self, mac: &'a ast::MacCall) {
     48 ( 0.00%)          run_early_pass!(self, check_mac, mac);
      .                   ast_visit::walk_mac(self, mac);
      .               }
      .           }
      .           
      .           struct EarlyLintPassObjects<'a> {
      .               lints: &'a mut [EarlyLintPassObject],
      .           }
      .           
-- line 302 ----------------------------------------
-- line 337 ----------------------------------------
      .               fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)
      .               where
      .                   'a: 'b;
      .           }
      .           
      .           impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {
      .               fn id(self) -> ast::NodeId {
      .                   ast::CRATE_NODE_ID
      4 ( 0.00%)      }
      .               fn attrs<'b>(self) -> &'b [ast::Attribute]
      .               where
      .                   'a: 'b,
      .               {
      .                   &self.attrs
      2 ( 0.00%)      }
      .               fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)
      .               where
      .                   'a: 'b,
      .               {
      6 ( 0.00%)          run_early_pass!(cx, check_crate, self);
      3 ( 0.00%)          ast_visit::walk_crate(cx, self);
      6 ( 0.00%)          run_early_pass!(cx, check_crate_post, self);
      .               }
      .           }
      .           
      .           impl<'a> EarlyCheckNode<'a> for (ast::NodeId, &'a [ast::Attribute], &'a [P<ast::Item>]) {
      .               fn id(self) -> ast::NodeId {
      1 ( 0.00%)          self.0
      1 ( 0.00%)      }
      .               fn attrs<'b>(self) -> &'b [ast::Attribute]
      .               where
      .                   'a: 'b,
      .               {
      2 ( 0.00%)          self.1
      1 ( 0.00%)      }
      9 ( 0.00%)      fn check<'b>(self, cx: &mut EarlyContextAndPass<'b, impl EarlyLintPass>)
      .               where
      .                   'a: 'b,
      .               {
      .                   walk_list!(cx, visit_attribute, self.1);
      1 ( 0.00%)          walk_list!(cx, visit_item, self.2);
      8 ( 0.00%)      }
      .           }
      .           
      .           fn early_lint_node<'a>(
      .               sess: &Session,
      .               warn_about_weird_lints: bool,
      .               lint_store: &LintStore,
      .               registered_tools: &RegisteredTools,
      .               buffered: LintBuffer,
      .               pass: impl EarlyLintPass,
      .               check_node: impl EarlyCheckNode<'a>,
      .           ) -> LintBuffer {
     16 ( 0.00%)      let mut cx = EarlyContextAndPass {
     19 ( 0.00%)          context: EarlyContext::new(
      .                       sess,
      .                       warn_about_weird_lints,
      .                       lint_store,
      .                       registered_tools,
     12 ( 0.00%)              buffered,
      .                   ),
      4 ( 0.00%)          pass,
      .               };
      .           
     31 ( 0.00%)      cx.with_lint_attrs(check_node.id(), check_node.attrs(), |cx| check_node.check(cx));
     12 ( 0.00%)      cx.context.buffered
      .           }
      .           
     33 ( 0.00%)  pub fn check_ast_node<'a>(
      .               sess: &Session,
      .               pre_expansion: bool,
      .               lint_store: &LintStore,
      .               registered_tools: &RegisteredTools,
      .               lint_buffer: Option<LintBuffer>,
      .               builtin_lints: impl EarlyLintPass,
      .               check_node: impl EarlyCheckNode<'a>,
      .           ) {
      .               let passes =
     18 ( 0.00%)          if pre_expansion { &lint_store.pre_expansion_passes } else { &lint_store.early_passes };
      .               let mut passes: Vec<_> = passes.iter().map(|p| (p)()).collect();
      3 ( 0.00%)      let mut buffered = lint_buffer.unwrap_or_default();
      .           
      6 ( 0.00%)      if !sess.opts.debugging_opts.no_interleave_lints {
     12 ( 0.00%)          buffered = early_lint_node(
      .                       sess,
      .                       pre_expansion,
      .                       lint_store,
      .                       registered_tools,
      .                       buffered,
      4 ( 0.00%)              builtin_lints,
      .                       check_node,
      .                   );
      .           
      3 ( 0.00%)          if !passes.is_empty() {
      .                       buffered = early_lint_node(
      .                           sess,
      .                           false,
      .                           lint_store,
      .                           registered_tools,
      .                           buffered,
      .                           EarlyLintPassObjects { lints: &mut passes[..] },
      .                           check_node,
-- line 438 ----------------------------------------
-- line 453 ----------------------------------------
      .                               )
      .                           });
      .                   }
      .               }
      .           
      .               // All of the buffered lints should have been emitted at this point.
      .               // If not, that means that we somehow buffered a lint for a node id
      .               // that was not lint-checked (perhaps it doesn't exist?). This is a bug.
     33 ( 0.00%)      for (id, lints) in buffered.map {
      .                   for early_lint in lints {
      .                       sess.delay_span_bug(
      .                           early_lint.span,
      .                           &format!(
      .                               "failed to process buffered lint here (dummy = {})",
      .                               id == ast::DUMMY_NODE_ID
      .                           ),
      .                       );
      .                   }
      .               }
     26 ( 0.00%)  }

    370 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/early.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 71 ----------------------------------------
        .               fn default() -> FxHasher {
        .                   FxHasher { hash: 0 }
        .               }
        .           }
        .           
        .           impl FxHasher {
        .               #[inline]
        .               fn add_to_hash(&mut self, i: usize) {
1,038,936 ( 0.11%)          self.hash = self.hash.rotate_left(5).bitxor(i).wrapping_mul(K);
        .               }
        .           }
        .           
        .           impl Hasher for FxHasher {
        .               #[inline]
   87,586 ( 0.01%)      fn write(&mut self, mut bytes: &[u8]) {
        .                   #[cfg(target_pointer_width = "32")]
        .                   let read_usize = |bytes: &[u8]| u32::from_ne_bytes(bytes[..4].try_into().unwrap());
        .                   #[cfg(target_pointer_width = "64")]
        .                   let read_usize = |bytes: &[u8]| u64::from_ne_bytes(bytes[..8].try_into().unwrap());
        .           
  213,660 ( 0.02%)          let mut hash = FxHasher { hash: self.hash };
        .                   assert!(size_of::<usize>() <= 8);
4,217,240 ( 0.44%)          while bytes.len() >= size_of::<usize>() {
        .                       hash.add_to_hash(read_usize(bytes) as usize);
        .                       bytes = &bytes[size_of::<usize>()..];
        .                   }
  427,356 ( 0.04%)          if (size_of::<usize>() > 4) && (bytes.len() >= 4) {
        .                       hash.add_to_hash(u32::from_ne_bytes(bytes[..4].try_into().unwrap()) as usize);
        .                       bytes = &bytes[4..];
        .                   }
  427,356 ( 0.04%)          if (size_of::<usize>() > 2) && bytes.len() >= 2 {
        .                       hash.add_to_hash(u16::from_ne_bytes(bytes[..2].try_into().unwrap()) as usize);
        .                       bytes = &bytes[2..];
        .                   }
  432,123 ( 0.05%)          if (size_of::<usize>() > 1) && bytes.len() >= 1 {
   51,799 ( 0.01%)              hash.add_to_hash(bytes[0] as usize);
        .                   }
   88,380 ( 0.01%)          self.hash = hash.hash;
   87,586 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
   29,320 ( 0.00%)          self.add_to_hash(i as usize);
        .               }
        .           
        .               #[inline]
        .               fn write_u16(&mut self, i: u16) {
        3 ( 0.00%)          self.add_to_hash(i as usize);
        .               }
        .           
        .               #[inline]
        .               fn write_u32(&mut self, i: u32) {
1,829,720 ( 0.19%)          self.add_to_hash(i as usize);
        .               }
        .           
        .               #[cfg(target_pointer_width = "32")]
        .               #[inline]
        .               fn write_u64(&mut self, i: u64) {
        .                   self.add_to_hash(i as usize);
        .                   self.add_to_hash((i >> 32) as usize);
        .               }
-- line 131 ----------------------------------------

      445 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-hash-1.1.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
   61,193 ( 0.01%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
1,454,805 ( 0.15%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
  205,751 ( 0.02%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
      350 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  623,854 ( 0.07%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    1,267 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
       19 ( 0.00%)          self.position += bytes;
       19 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
      579 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
      764 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
    8,088 ( 0.00%)      fn read_u32(&mut self) -> u32 {
   47,612 ( 0.01%)          read_leb128!(self, read_u32_leb128)
   16,176 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  561,386 ( 0.06%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   80,198 ( 0.01%)          let value = u16::from_le_bytes(bytes);
  160,396 ( 0.02%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
1,729,479 ( 0.18%)          let value = self.data[self.position];
  319,985 ( 0.03%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
   63,784 ( 0.01%)      fn read_usize(&mut self) -> usize {
   63,784 ( 0.01%)          read_leb128!(self, read_usize_leb128)
  127,568 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
    2,749 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
    8,923 ( 0.00%)          let len = self.read_usize();
   43,240 ( 0.00%)          let sentinel = self.data[self.position + len];
   10,810 ( 0.00%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
   27,025 ( 0.00%)          self.position += len + 1;
   10,470 ( 0.00%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
       62 ( 0.00%)          let start = self.position;
      296 ( 0.00%)          self.position += s.len();
       62 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

1,060,143 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
   149,153 ( 0.02%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   923,200 ( 0.10%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
         .                               old
         .                           }
         .                       }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
        50 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
         .                               self.end
         .                           }
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
     3,699 ( 0.00%)                  len!(self)
         .                       }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
         .                       fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   155,897 ( 0.02%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
    90,811 ( 0.01%)                          assume(!self.end.is_null());
         .                               }
14,064,095 ( 1.48%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
         .                       fn size_hint(&self) -> (usize, Option<usize>) {
    48,418 ( 0.01%)                  let exact = len!(self);
         .                           (exact, Some(exact))
         .                       }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
       603 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
       224 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
        32 ( 0.00%)                  while let Some(x) = self.next() {
     2,383 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   363,571 ( 0.04%)                  while let Some(x) = self.next() {
   862,094 ( 0.09%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
     1,672 ( 0.00%)                  while let Some(x) = self.next() {
    10,113 ( 0.00%)                      if predicate(&x) {
         .                                   return Some(x);
         .                               }
         .                           }
         .                           None
       304 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
       816 ( 0.00%)                  while let Some(x) = self.next() {
    63,558 ( 0.01%)                      if let Some(y) = f(x) {
       179 ( 0.00%)                          return Some(y);
         .                               }
         .                           }
         .                           None
       485 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   258,324 ( 0.03%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
     5,595 ( 0.00%)                  while let Some(x) = self.next_back() {
    83,877 ( 0.01%)                      i -= 1;
    69,549 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
     1,106 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
         .                       fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
        16 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
         .                               if mem::size_of::<T>() != 0 {
        36 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   195,840 ( 0.02%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
         .                                   Some(next_back_unchecked!(self))
         .                               }
         .                           }
         .                       }
         .           
         .                       #[inline]
-- line 369 ----------------------------------------

 2,475,604 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 180 ----------------------------------------
        .           /// assert_eq!(v, &[0.into()]);
        .           ///
        .           /// // Ensure that the last item was dropped.
        .           /// assert!(weak.upgrade().is_none());
        .           /// ```
        .           #[stable(feature = "drop_in_place", since = "1.8.0")]
        .           #[lang = "drop_in_place"]
        .           #[allow(unconditional_recursion)]
8,963,204 ( 0.94%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
        .               // Code here does not matter - this is replaced by the
        .               // real drop glue by the compiler.
        .           
        .               // SAFETY: see comment above
        .               unsafe { drop_in_place(to_drop) }
        .           }
        .           
        .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 448 ----------------------------------------
        .                       return;
        .                   }
        .               }
        .           
        .               // Direct swapping, for the cases not going through the block optimization.
        .               // SAFETY: the caller must guarantee that `x` and `y` are valid
        .               // for writes, properly aligned, and non-overlapping.
        .               unsafe {
       83 ( 0.00%)          let z = read(x);
        .                   copy_nonoverlapping(y, x, 1);
        .                   write(y, z);
        .               }
        .           }
        .           
        .           #[inline]
        .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
        .               let mut tmp = MaybeUninit::<T>::uninit();
        .               // SAFETY: the caller must guarantee that `src` is valid for reads.
        .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
        .               // the stack as a separate allocated object.
        .               //
        .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
        .               // to be properly initialized.
        .               unsafe {
  141,101 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
1,277,741 ( 0.13%)          tmp.assume_init()
        .               }
        .           }
        .           
        .           /// Reads the value from `src` without moving it. This leaves the
        .           /// memory in `src` unchanged.
        .           ///
        .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
        .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
        .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
        .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
        .               }
        .           
        .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
        .               // `dst` cannot overlap `src` because the caller has mutable access
        .               // to `dst` while `src` is owned by this function.
        .               unsafe {
9,162,520 ( 0.96%)          copy_nonoverlapping(&src as *const T, dst, 1);
        .                   intrinsics::forget(src);
        .               }
        .           }
        .           
        .           /// Overwrites a memory location with the given value without reading or
        .           /// dropping the old value.
        .           ///
        .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
        .               if stride == 1 {
        .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
        .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
        .                   //
        .                   //    round_up_to_next_alignment(p, a) - p
        .                   //
        .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
        .                   // for LLVM to be able to utilize the various optimizations it knows about.
    1,660 ( 0.00%)          return wrapping_sub(
    4,666 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
        .                       p as usize,
        .                   );
        .               }
        .           
        .               let pmoda = p as usize & a_minus_one;
        .               if pmoda == 0 {
        .                   // Already aligned. Yay!
        .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
        .           /// assert!(std::ptr::eq(
        .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
        .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
        .           /// ));
        .           /// ```
        .           #[stable(feature = "ptr_eq", since = "1.17.0")]
        .           #[inline]
        .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  211,442 ( 0.02%)      a == b
        .           }
        .           
        .           /// Hash a raw pointer.
        .           ///
        .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
        .           /// by its address rather than the value it points to
        .           /// (which is what the `Hash for &T` implementation does).
        .           ///
-- line 1364 ----------------------------------------

1,260,134 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/canonical.rs
--------------------------------------------------------------------------------
Ir               

-- line 19 ----------------------------------------
      .               /// `op` and then executes all the further obligations that `op`
      .               /// returns. This will yield a set of outlives constraints amongst
      .               /// regions which are extracted and stored as having occurred at
      .               /// `locations`.
      .               ///
      .               /// **Any `rustc_infer::infer` operations that might generate region
      .               /// constraints should occur within this method so that those
      .               /// constraints can be properly localized!**
270,972 ( 0.03%)      #[instrument(skip(self, category, op), level = "trace")]
331,188 ( 0.03%)      pub(super) fn fully_perform_op<R, Op>(
      .                   &mut self,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .                   op: Op,
      .               ) -> Fallible<R>
      .               where
      .                   Op: type_op::TypeOp<'tcx, Output = R>,
      .                   Canonical<'tcx, Op>: ToUniverseInfo<'tcx>,
      .               {
154,665 ( 0.02%)          let old_universe = self.infcx.universe();
      .           
 93,097 ( 0.01%)          let TypeOpOutput { output, constraints, canonicalized_query } =
124,417 ( 0.01%)              op.fully_perform(self.infcx)?;
      .           
 61,986 ( 0.01%)          if let Some(data) = &constraints {
      .                       self.push_region_constraints(locations, category, data);
      .                   }
      .           
 61,986 ( 0.01%)          let universe = self.infcx.universe();
      .           
 30,993 ( 0.00%)          if old_universe != universe {
      .                       let universe_info = match canonicalized_query {
      .                           Some(canonicalized_query) => canonicalized_query.to_universe_info(old_universe),
      .                           None => UniverseInfo::other(),
      .                       };
      .                       for u in old_universe..universe {
      .                           self.borrowck_context
      .                               .constraints
      .                               .universe_causes
-- line 57 ----------------------------------------
-- line 79 ----------------------------------------
      .                           .constraints
      .                           .universe_causes
      .                           .insert(ty::UniverseIndex::from_u32(u), info);
      .                   }
      .           
      .                   instantiated
      .               }
      .           
    140 ( 0.00%)      pub(super) fn prove_trait_ref(
      .                   &mut self,
      .                   trait_ref: ty::TraitRef<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) {
      .                   self.prove_predicates(
  2,123 ( 0.00%)              Some(ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {
      .                           trait_ref,
      .                           constness: ty::BoundConstness::NotConst,
      .                           polarity: ty::ImplPolarity::Positive,
      .                       }))),
      .                       locations,
      .                       category,
      .                   );
    112 ( 0.00%)      }
      .           
    783 ( 0.00%)      pub(super) fn normalize_and_prove_instantiated_predicates(
      .                   &mut self,
      .                   // Keep this parameter for now, in case we start using
      .                   // it in `ConstraintCategory` at some point.
      .                   _def_id: DefId,
      .                   instantiated_predicates: ty::InstantiatedPredicates<'tcx>,
      .                   locations: Locations,
      .               ) {
    957 ( 0.00%)          for (predicate, span) in instantiated_predicates
      .                       .predicates
      .                       .into_iter()
      .                       .zip(instantiated_predicates.spans.into_iter())
      .                   {
      .                       let predicate = self.normalize(predicate, locations);
    728 ( 0.00%)              self.prove_predicate(predicate, locations, ConstraintCategory::Predicate(span));
      .                   }
    696 ( 0.00%)      }
      .           
      .               pub(super) fn prove_predicates(
      .                   &mut self,
      .                   predicates: impl IntoIterator<Item = impl ToPredicate<'tcx>>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) {
  1,288 ( 0.00%)          for predicate in predicates {
      .                       let predicate = predicate.to_predicate(self.tcx());
      .                       debug!("prove_predicates(predicate={:?}, locations={:?})", predicate, locations,);
      .           
  7,016 ( 0.00%)              self.prove_predicate(predicate, locations, category);
      .                   }
      .               }
      .           
 14,700 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub(super) fn prove_predicate(
      .                   &mut self,
      .                   predicate: ty::Predicate<'tcx>,
      .                   locations: Locations,
      .                   category: ConstraintCategory,
      .               ) {
    735 ( 0.00%)          let param_env = self.param_env;
      .                   self.fully_perform_op(
      .                       locations,
      .                       category,
  2,205 ( 0.00%)              param_env.and(type_op::prove_predicate::ProvePredicate::new(predicate)),
      .                   )
      .                   .unwrap_or_else(|NoSolution| {
      .                       span_mirbug!(self, NoSolution, "could not prove {:?}", predicate);
      .                   })
      .               }
      .           
210,728 ( 0.02%)      #[instrument(skip(self), level = "debug")]
331,132 ( 0.03%)      pub(super) fn normalize<T>(&mut self, value: T, location: impl NormalizeLocation) -> T
      .               where
      .                   T: type_op::normalize::Normalizable<'tcx> + fmt::Display + Copy + 'tcx,
      .               {
 30,258 ( 0.00%)          let param_env = self.param_env;
 90,324 ( 0.01%)          self.fully_perform_op(
    112 ( 0.00%)              location.to_locations(),
      .                       ConstraintCategory::Boring,
      .                       param_env.and(type_op::normalize::Normalize::new(value)),
      .                   )
      .                   .unwrap_or_else(|NoSolution| {
      .                       span_mirbug!(self, NoSolution, "failed to normalize `{:?}`", value);
      .                       value
      .                   })
      .               }
-- line 169 ----------------------------------------

 32,388 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/type_check/canonical.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
    7,237 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   12,612 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
   27,431 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
    3,648 ( 0.00%)          i += 2
        .               }
        .           
   12,612 ( 0.00%)      if i < count {
    5,735 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
  355,477 ( 0.04%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
2,358,195 ( 0.25%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
  789,196 ( 0.08%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
   89,584 ( 0.01%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   32,469 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   32,469 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  324,690 ( 0.03%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  259,752 ( 0.03%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  292,221 ( 0.03%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  150,841 ( 0.02%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  129,876 ( 0.01%)          self.processed += BUFFER_SIZE;
   64,938 ( 0.01%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    6,190 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
   35,920 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   13,192 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
    6,602 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
    3,154 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
    2,890 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
      578 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
    1,734 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
      578 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    1,156 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
    4,536 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
    5,114 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    9,072 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    1,156 ( 0.00%)          let input_left = length - processed;
      420 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
      210 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
      210 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
      210 ( 0.00%)              self.state.v0 ^= elem;
      420 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
      578 ( 0.00%)          self.nbuf = extra_bytes_left;
    2,890 ( 0.00%)          self.processed += nbuf + processed;
    3,468 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
    3,687 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
    4,916 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
    3,474 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
    3,474 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
    3,474 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
    2,458 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
    1,024 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
    3,468 ( 0.00%)          let length = self.processed + self.nbuf;
    2,372 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
    1,186 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
    1,186 ( 0.00%)          state.v0 ^= b;
        .           
    1,186 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
    3,482 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
    1,108 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
    1,108 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
1,110,835 ( 0.12%)          compress!(state);
1,187,647 ( 0.12%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
    6,960 ( 0.00%)          compress!(state);
    6,960 ( 0.00%)          compress!(state);
    6,960 ( 0.00%)          compress!(state);
    5,775 ( 0.00%)          compress!(state);
        .               }
        .           }

  139,171 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs
--------------------------------------------------------------------------------
Ir                 

-- line 47 ----------------------------------------
        .                   self.layout
        .               }
        .           
        .               #[inline(always)]
        .               fn to_op(
        .                   &self,
        .                   _ecx: &InterpCx<'mir, 'tcx, M>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        2 ( 0.00%)          Ok(*self)
        .               }
        .           
        .               #[inline(always)]
        .               fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {
  525,762 ( 0.06%)          mplace.into()
        .               }
        .           
        .               #[inline(always)]
        .               fn project_downcast(
        .                   &self,
        .                   ecx: &InterpCx<'mir, 'tcx, M>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, Self> {
        6 ( 0.00%)          ecx.operand_downcast(self, variant)
        .               }
        .           
        .               #[inline(always)]
        .               fn project_field(
        .                   &self,
        .                   ecx: &InterpCx<'mir, 'tcx, M>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, Self> {
        6 ( 0.00%)          ecx.operand_field(self, field)
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>
        .               for MPlaceTy<'tcx, M::PointerTag>
        .           {
        .               #[inline(always)]
        .               fn layout(&self) -> TyAndLayout<'tcx> {
-- line 86 ----------------------------------------
-- line 87 ----------------------------------------
        .                   self.layout
        .               }
        .           
        .               #[inline(always)]
        .               fn to_op(
        .                   &self,
        .                   _ecx: &InterpCx<'mir, 'tcx, M>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
      111 ( 0.00%)          Ok((*self).into())
        .               }
        .           
        .               #[inline(always)]
        .               fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self {
        .                   mplace
        .               }
        .           
        .               #[inline(always)]
-- line 103 ----------------------------------------
-- line 130 ----------------------------------------
        .                           -> &$($mutability)? InterpCx<'mir, 'tcx, M>;
        .           
        .                       /// `read_discriminant` can be hooked for better error messages.
        .                       #[inline(always)]
        .                       fn read_discriminant(
        .                           &mut self,
        .                           op: &OpTy<'tcx, M::PointerTag>,
        .                       ) -> InterpResult<'tcx, VariantIdx> {
        2 ( 0.00%)                  Ok(self.ecx().read_discriminant(op)?.1)
        .                       }
        .           
        .                       // Recursive actions, ready to be overloaded.
        .                       /// Visits the given value, dispatching as appropriate to more specialized visitors.
        .                       #[inline(always)]
        .                       fn visit_value(&mut self, v: &Self::V) -> InterpResult<'tcx>
        .                       {
        .                           self.walk_value(v)
-- line 146 ----------------------------------------
-- line 170 ----------------------------------------
        .                       /// we are descending through.
        .                       #[inline(always)]
        .                       fn visit_field(
        .                           &mut self,
        .                           _old_val: &Self::V,
        .                           _field: usize,
        .                           new_val: &Self::V,
        .                       ) -> InterpResult<'tcx> {
   88,306 ( 0.01%)                  self.visit_value(new_val)
        .                       }
        .                       /// Called when recursing into an enum variant.
        .                       /// This gives the visitor the chance to track the stack of nested fields that
        .                       /// we are descending through.
        .                       #[inline(always)]
        .                       fn visit_variant(
        .                           &mut self,
        .                           _old_val: &Self::V,
        .                           _variant: VariantIdx,
        .                           new_val: &Self::V,
        .                       ) -> InterpResult<'tcx> {
        .                           self.visit_value(new_val)
        .                       }
        .           
        .                       // Default recursors. Not meant to be overloaded.
      273 ( 0.00%)              fn walk_aggregate(
        .                           &mut self,
        .                           v: &Self::V,
        .                           fields: impl Iterator<Item=InterpResult<'tcx, Self::V>>,
        .                       ) -> InterpResult<'tcx> {
        .                           // Now iterate over it.
   59,144 ( 0.01%)                  for (idx, field_val) in fields.enumerate() {
1,083,296 ( 0.11%)                      self.visit_field(v, idx, &field_val?)?;
        .                           }
        .                           Ok(())
      311 ( 0.00%)              }
      540 ( 0.00%)              fn walk_value(&mut self, v: &Self::V) -> InterpResult<'tcx>
        .                       {
        .                           trace!("walk_value: type: {}", v.layout().ty);
        .           
        .                           // Special treatment for special types, where the (static) layout is not sufficient.
   88,722 ( 0.01%)                  match *v.layout().ty.kind() {
        .                               // If it is a trait object, switch to the real type that was used to create it.
        .                               ty::Dynamic(..) => {
        .                                   // immediate trait objects are not a thing
        .                                   let op = v.to_op(self.ecx())?;
        .                                   let dest = op.assert_mem_place();
        .                                   let inner = self.ecx().unpack_dyn_trait(&dest)?.1;
        .                                   trace!("walk_value: dyn object layout: {:#?}", inner.layout);
        .                                   // recurse with the inner type
-- line 218 ----------------------------------------
-- line 220 ----------------------------------------
        .                               },
        .                               // Slices do not need special handling here: they have `Array` field
        .                               // placement with length 0, so we enter the `Array` case below which
        .                               // indirectly uses the metadata to determine the actual length.
        .                               _ => {},
        .                           };
        .           
        .                           // Visit the fields of this value.
   88,858 ( 0.01%)                  match v.layout().fields {
        .                               FieldsShape::Primitive => {},
        .                               FieldsShape::Union(fields) => {
        .                                   self.visit_union(v, fields)?;
        .                               },
        .                               FieldsShape::Arbitrary { ref offsets, .. } => {
        .                                   // FIXME: We collect in a vec because otherwise there are lifetime
        .                                   // errors: Projecting to a field needs access to `ecx`.
        .                                   let fields: Vec<InterpResult<'tcx, Self::V>> =
       11 ( 0.00%)                              (0..offsets.len()).map(|i| {
       13 ( 0.00%)                                  v.project_field(self.ecx(), i)
        .                                       })
        .                                       .collect();
        .                                   self.visit_aggregate(v, fields.into_iter())?;
        .                               },
        .                               FieldsShape::Array { .. } => {
        .                                   // Let's get an mplace first.
      336 ( 0.00%)                          let op = v.to_op(self.ecx())?;
        .                                   let mplace = op.assert_mem_place();
        .                                   // Now we can go over all the fields.
        .                                   // This uses the *run-time length*, i.e., if we are a slice,
        .                                   // the dynamic info from the metadata is used.
      286 ( 0.00%)                          let iter = self.ecx().mplace_array_fields(&mplace)?
        .                                       .map(|f| f.and_then(|f| {
        .                                           Ok(Value::from_mem_place(f))
        .                                       }));
        .                                   self.visit_aggregate(v, iter)?;
        .                               }
        .                           }
        .           
   88,662 ( 0.01%)                  match v.layout().variants {
        .                               // If this is a multi-variant layout, find the right variant and proceed
        .                               // with *its* fields.
        .                               Variants::Multiple { .. } => {
       26 ( 0.00%)                          let op = v.to_op(self.ecx())?;
        6 ( 0.00%)                          let idx = self.read_discriminant(&op)?;
       10 ( 0.00%)                          let inner = v.project_downcast(self.ecx(), idx)?;
        .                                   trace!("walk_value: variant layout: {:#?}", inner.layout());
        .                                   // recurse with the inner type
        .                                   self.visit_variant(v, idx, &inner)
        .                               }
        .                               // For single-variant layouts, we already did anything there is to do.
        .                               Variants::Single { .. } => Ok(())
        .                           }
      540 ( 0.00%)              }
        .                   }
        .               }
        .           }
        .           
        .           make_value_visitor!(ValueVisitor,);
        .           make_value_visitor!(MutValueVisitor, mut);

      175 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/visitor.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir                 

-- line 77 ----------------------------------------
        .           //
        .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
        .           // placate the same deriving in `ty::FreeRegion`, but we may want to
        .           // actually attach a more meaningful ordering to scopes than the one
        .           // generated via deriving here.
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Scope {
   29,733 ( 0.00%)      pub id: hir::ItemLocalId,
  450,968 ( 0.05%)      pub data: ScopeData,
        .           }
        .           
        .           impl fmt::Debug for Scope {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.data {
        .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
        .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
        .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
        .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
        .                           self.id,
        .                           fsi.as_u32(),
        .                       ),
        .                   }
        .               }
        .           }
        .           
2,185,862 ( 0.23%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum ScopeData {
        .               Node,
        .           
        .               /// Scope of the call-site for a function or closure
        .               /// (outlives the arguments as well as the body).
        .               CallSite,
        .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
        .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
        .               pub fn item_local_id(&self) -> hir::ItemLocalId {
        .                   self.id
        .               }
        .           
        .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
      218 ( 0.00%)          scope_tree
        .                       .root_body
        .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
        .               }
        .           
        .               /// Returns the span of this `Scope`. Note that in general the
        .               /// returned span may not correspond to the span of any `NodeId` in
        .               /// the AST.
    1,526 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
      436 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
        .                       Some(hir_id) => hir_id,
        .                       None => return DUMMY_SP,
        .                   };
      872 ( 0.00%)          let span = tcx.hir().span(hir_id);
      872 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
        .                       if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
        .                           // Want span for scope starting after the
        .                           // indexed statement and ending at end of
        .                           // `blk`; reuse span of `blk` and shift `lo`
        .                           // forward to end of indexed statement.
        .                           //
        .                           // (This is the special case alluded to in the
        .                           // doc-comment for this method)
-- line 189 ----------------------------------------
-- line 193 ----------------------------------------
        .                           // To avoid issues with macro-generated spans, the span
        .                           // of the statement must be nested in that of the block.
        .                           if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
        .                               return span.with_lo(stmt_span.lo());
        .                           }
        .                       }
        .                   }
        .                   span
    1,962 ( 0.00%)      }
        .           }
        .           
        .           pub type ScopeDepth = u32;
        .           
        .           /// The region scope tree encodes information about region relationships.
        .           #[derive(Default, Debug)]
        .           pub struct ScopeTree {
        .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
        .               /// The `Span` of the yield.
        .               pub span: Span,
        .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
        .               pub expr_and_pat_count: usize,
        .               pub source: hir::YieldSource,
        .           }
        .           
        .           impl ScopeTree {
  179,166 ( 0.02%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
        .                   debug!("{:?}.parent = {:?}", child, parent);
        .           
   59,722 ( 0.01%)          if let Some(p) = parent {
        .                       let prev = self.parent_map.insert(child, p);
   29,760 ( 0.00%)              assert!(prev.is_none());
        .                   }
        .           
        .                   // Record the destruction scopes for later so we can query them.
   59,722 ( 0.01%)          if let ScopeData::Destruction = child.data {
        .                       self.destruction_scopes.insert(child.item_local_id(), child);
        .                   }
  119,048 ( 0.01%)      }
        .           
   59,098 ( 0.01%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
        .                   self.destruction_scopes.get(&n).cloned()
   59,098 ( 0.01%)      }
        .           
        .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
        .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
       37 ( 0.00%)          assert!(var != lifetime.item_local_id());
        .                   self.var_map.insert(var, lifetime);
        .               }
        .           
        .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
        .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
      112 ( 0.00%)          if let Some(lifetime) = lifetime {
        .                       assert!(var != lifetime.item_local_id());
        .                   }
        .                   self.rvalue_scopes.insert(var, lifetime);
        .               }
        .           
        .               /// Returns the narrowest scope that encloses `id`, if any.
        .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
        .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
-- line 363 ----------------------------------------
-- line 367 ----------------------------------------
        .               pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
        .                   self.var_map
        .                       .get(&var_id)
        .                       .cloned()
        .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
        .               }
        .           
        .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
  413,595 ( 0.04%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
        .                   // Check for a designated rvalue scope.
      168 ( 0.00%)          if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
        .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
        .                       return s;
        .                   }
        .           
        .                   // Otherwise, locate the innermost terminating scope
        .                   // if there's one. Static items, for instance, won't
        .                   // have an enclosing scope, hence no scope will be
        .                   // returned.
   59,029 ( 0.01%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
        .           
1,179,859 ( 0.12%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
  412,777 ( 0.04%)              match p.data {
        .                           ScopeData::Destruction => {
        .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
        .                               return Some(id);
        .                           }
  117,955 ( 0.01%)                  _ => id = p,
        .                       }
        .                   }
        .           
        .                   debug!("temporary_scope({:?}) = None", expr_id);
        .                   None
  472,680 ( 0.05%)      }
        .           
        .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
        .               /// `false` otherwise.
        .               ///
        .               /// Used by clippy.
        .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
        .                   let mut s = subscope;
        .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

  846,881 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs
--------------------------------------------------------------------------------
Ir               

-- line 41 ----------------------------------------
      .                           write!(fmt, "{}", x)
      .                       }
      .                       _ => write!(fmt, "{}", self.val),
      .                   }
      .               }
      .           }
      .           
      .           fn int_size_and_signed<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> (Size, bool) {
    117 ( 0.00%)      let (int, signed) = match *ty.kind() {
    273 ( 0.00%)          Int(ity) => (Integer::from_int_ty(&tcx, ity), true),
      .                   Uint(uty) => (Integer::from_uint_ty(&tcx, uty), false),
      .                   _ => bug!("non integer discriminant"),
      .               };
      .               (int.size(), signed)
      .           }
      .           
      .           impl<'tcx> Discr<'tcx> {
      .               /// Adds `1` to the value and wraps around if the maximum for the type is reached.
     50 ( 0.00%)      pub fn wrap_incr(self, tcx: TyCtxt<'tcx>) -> Self {
    232 ( 0.00%)          self.checked_add(tcx, 1).0
     20 ( 0.00%)      }
    351 ( 0.00%)      pub fn checked_add(self, tcx: TyCtxt<'tcx>, n: u128) -> (Self, bool) {
      .                   let (size, signed) = int_size_and_signed(tcx, self.ty);
      .                   let (val, oflo) = if signed {
      .                       let min = size.signed_int_min();
      .                       let max = size.signed_int_max();
      .                       let val = size.sign_extend(self.val) as i128;
    156 ( 0.00%)              assert!(n < (i128::MAX as u128));
      .                       let n = n as i128;
    273 ( 0.00%)              let oflo = val > max - n;
    156 ( 0.00%)              let val = if oflo { min + (n - (max - val) - 1) } else { val + n };
      .                       // zero the upper bits
      .                       let val = val as u128;
      .                       let val = size.truncate(val);
      .                       (val, oflo)
      .                   } else {
      .                       let max = size.unsigned_int_max();
      .                       let val = self.val;
      .                       let oflo = val > max - n;
      .                       let val = if oflo { n - (max - val) - 1 } else { val + n };
      .                       (val, oflo)
      .                   };
    156 ( 0.00%)          (Self { val, ty: self.ty }, oflo)
    351 ( 0.00%)      }
      .           }
      .           
      .           pub trait IntTypeExt {
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx>;
      .               fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx>, val: Option<Discr<'tcx>>) -> Option<Discr<'tcx>>;
      .               fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Discr<'tcx>;
      .           }
      .           
      .           impl IntTypeExt for attr::IntType {
      .               fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    340 ( 0.00%)          match *self {
      .                       SignedInt(ast::IntTy::I8) => tcx.types.i8,
      .                       SignedInt(ast::IntTy::I16) => tcx.types.i16,
      .                       SignedInt(ast::IntTy::I32) => tcx.types.i32,
      .                       SignedInt(ast::IntTy::I64) => tcx.types.i64,
      .                       SignedInt(ast::IntTy::I128) => tcx.types.i128,
      .                       SignedInt(ast::IntTy::Isize) => tcx.types.isize,
      .                       UnsignedInt(ast::UintTy::U8) => tcx.types.u8,
      .                       UnsignedInt(ast::UintTy::U16) => tcx.types.u16,
      .                       UnsignedInt(ast::UintTy::U32) => tcx.types.u32,
      .                       UnsignedInt(ast::UintTy::U64) => tcx.types.u64,
      .                       UnsignedInt(ast::UintTy::U128) => tcx.types.u128,
      .                       UnsignedInt(ast::UintTy::Usize) => tcx.types.usize,
      .                   }
     29 ( 0.00%)      }
      .           
      .               fn initial_discriminant<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Discr<'tcx> {
      .                   Discr { val: 0, ty: self.to_ty(tcx) }
     39 ( 0.00%)      }
      .           
      .               fn disr_incr<'tcx>(&self, tcx: TyCtxt<'tcx>, val: Option<Discr<'tcx>>) -> Option<Discr<'tcx>> {
      .                   if let Some(val) = val {
      .                       assert_eq!(self.to_ty(tcx), val.ty);
      .                       let (new, oflo) = val.checked_add(tcx, 1);
      .                       if oflo { None } else { Some(new) }
      .                   } else {
      .                       Some(self.initial_discriminant(tcx))
-- line 121 ----------------------------------------
-- line 153 ----------------------------------------
      .                       }
      .                   }
      .                   false
      .               }
      .           
      .               /// Attempts to returns the deeply last field of nested structures, but
      .               /// does not apply any normalization in its search. Returns the same type
      .               /// if input `ty` is not a structure at all.
    765 ( 0.00%)      pub fn struct_tail_without_normalization(self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   let tcx = self;
      .                   tcx.struct_tail_with_normalize(ty, |ty| ty)
    680 ( 0.00%)      }
      .           
      .               /// Returns the deeply last field of nested structures, or the same type if
      .               /// not a structure at all. Corresponds to the only possible unsized field,
      .               /// and its type can be used to determine unsizing strategy.
      .               ///
      .               /// Should only be called if `ty` has no inference variables and does not
      .               /// need its lifetimes preserved (e.g. as part of codegen); otherwise
      .               /// normalization attempt may cause compiler bugs.
  1,364 ( 0.00%)      pub fn struct_tail_erasing_lifetimes(
      .                   self,
      .                   ty: Ty<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   let tcx = self;
      .                   tcx.struct_tail_with_normalize(ty, |ty| tcx.normalize_erasing_regions(param_env, ty))
  1,116 ( 0.00%)      }
      .           
      .               /// Returns the deeply last field of nested structures, or the same type if
      .               /// not a structure at all. Corresponds to the only possible unsized field,
      .               /// and its type can be used to determine unsizing strategy.
      .               ///
      .               /// This is parameterized over the normalization strategy (i.e. how to
      .               /// handle `<T as Trait>::Assoc` and `impl Trait`); pass the identity
      .               /// function to indicate no normalization should take place.
      .               ///
      .               /// See also `struct_tail_erasing_lifetimes`, which is suitable for use
      .               /// during codegen.
     70 ( 0.00%)      pub fn struct_tail_with_normalize(
      .                   self,
      .                   mut ty: Ty<'tcx>,
      .                   mut normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> Ty<'tcx> {
  1,093 ( 0.00%)          let recursion_limit = self.recursion_limit();
      .                   for iteration in 0.. {
    215 ( 0.00%)              if !recursion_limit.value_within_limit(iteration) {
      .                           return self.ty_error_with_message(
      .                               DUMMY_SP,
      .                               &format!("reached the recursion limit finding the struct tail for {}", ty),
      .                           );
      .                       }
  1,461 ( 0.00%)              match *ty.kind() {
      2 ( 0.00%)                  ty::Adt(def, substs) => {
      4 ( 0.00%)                      if !def.is_struct() {
      .                                   break;
      .                               }
      .                               match def.non_enum_variant().fields.last() {
      .                                   Some(f) => ty = f.ty(self, substs),
      .                                   None => break,
      .                               }
      .                           }
      .           
-- line 215 ----------------------------------------
-- line 229 ----------------------------------------
      .                           }
      .           
      .                           _ => {
      .                               break;
      .                           }
      .                       }
      .                   }
      .                   ty
     54 ( 0.00%)      }
      .           
      .               /// Same as applying `struct_tail` on `source` and `target`, but only
      .               /// keeps going as long as the two types are instances of the same
      .               /// structure definitions.
      .               /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,
      .               /// whereas struct_tail produces `T`, and `Trait`, respectively.
      .               ///
      .               /// Should only be called if the types have no inference variables and do
      .               /// not need their lifetimes preserved (e.g., as part of codegen); otherwise,
      .               /// normalization attempt may cause compiler bugs.
    420 ( 0.00%)      pub fn struct_lockstep_tails_erasing_lifetimes(
      .                   self,
      .                   source: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> (Ty<'tcx>, Ty<'tcx>) {
      .                   let tcx = self;
      .                   tcx.struct_lockstep_tails_with_normalize(source, target, |ty| {
      .                       tcx.normalize_erasing_regions(param_env, ty)
      .                   })
    280 ( 0.00%)      }
      .           
      .               /// Same as applying `struct_tail` on `source` and `target`, but only
      .               /// keeps going as long as the two types are instances of the same
      .               /// structure definitions.
      .               /// For `(Foo<Foo<T>>, Foo<dyn Trait>)`, the result will be `(Foo<T>, Trait)`,
      .               /// whereas struct_tail produces `T`, and `Trait`, respectively.
      .               ///
      .               /// See also `struct_lockstep_tails_erasing_lifetimes`, which is suitable for use
-- line 266 ----------------------------------------
-- line 268 ----------------------------------------
      .               pub fn struct_lockstep_tails_with_normalize(
      .                   self,
      .                   source: Ty<'tcx>,
      .                   target: Ty<'tcx>,
      .                   normalize: impl Fn(Ty<'tcx>) -> Ty<'tcx>,
      .               ) -> (Ty<'tcx>, Ty<'tcx>) {
      .                   let (mut a, mut b) = (source, target);
      .                   loop {
    336 ( 0.00%)              match (&a.kind(), &b.kind()) {
      .                           (&Adt(a_def, a_substs), &Adt(b_def, b_substs))
      .                               if a_def == b_def && a_def.is_struct() =>
      .                           {
      .                               if let Some(f) = a_def.non_enum_variant().fields.last() {
      .                                   a = f.ty(self, a_substs);
      .                                   b = f.ty(self, b_substs);
      .                               } else {
      .                                   break;
-- line 284 ----------------------------------------
-- line 310 ----------------------------------------
      .           
      .                           _ => break,
      .                       }
      .                   }
      .                   (a, b)
      .               }
      .           
      .               /// Calculate the destructor of a given type.
     12 ( 0.00%)      pub fn calculate_dtor(
      .                   self,
      .                   adt_did: DefId,
      .                   validate: impl Fn(Self, DefId) -> Result<(), ErrorReported>,
      .               ) -> Option<ty::Destructor> {
      5 ( 0.00%)          let drop_trait = self.lang_items().drop_trait()?;
      .                   self.ensure().coherent_trait(drop_trait);
      .           
      1 ( 0.00%)          let ty = self.type_of(adt_did);
      9 ( 0.00%)          let (did, constness) = self.find_map_relevant_impl(drop_trait, ty, |impl_did| {
      .                       if let Some(item_id) = self.associated_item_def_ids(impl_did).first() {
      .                           if validate(self, impl_did).is_ok() {
      .                               return Some((*item_id, self.impl_constness(impl_did)));
      .                           }
      .                       }
      .                       None
      .                   })?;
      .           
      .                   Some(ty::Destructor { did, constness })
     10 ( 0.00%)      }
      .           
      .               /// Returns the set of types that are required to be alive in
      .               /// order to run the destructor of `def` (see RFCs 769 and
      .               /// 1238).
      .               ///
      .               /// Note that this returns only the constraints for the
      .               /// destructor of `def` itself. For the destructors of the
      .               /// contents, you need `adt_dtorck_constraint`.
     11 ( 0.00%)      pub fn destructor_constraints(self, def: &'tcx ty::AdtDef) -> Vec<ty::subst::GenericArg<'tcx>> {
      5 ( 0.00%)          let dtor = match def.destructor(self) {
      .                       None => {
      .                           debug!("destructor_constraints({:?}) - no dtor", def.did);
      .                           return vec![];
      .                       }
      .                       Some(dtor) => dtor.did,
      .                   };
      .           
      .                   let impl_def_id = self.associated_item(dtor).container.id();
-- line 355 ----------------------------------------
-- line 406 ----------------------------------------
      .                                   false
      .                               }
      .                           }
      .                       })
      .                       .map(|(item_param, _)| item_param)
      .                       .collect();
      .                   debug!("destructor_constraint({:?}) = {:?}", def.did, result);
      .                   result
     10 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a closure (e.g., `|x| x * 2`). Note
      .               /// that closures have a `DefId`, but the closure *expression* also
      .               /// has a `HirId` that is located within the context where the
      .               /// closure appears (and, sadly, a corresponding `NodeId`, since
      .               /// those are not yet phased out). The parent of the closure's
      .               /// `DefId` will also be the context where it appears.
    250 ( 0.00%)      pub fn is_closure(self, def_id: DefId) -> bool {
  1,250 ( 0.00%)          matches!(self.def_kind(def_id), DefKind::Closure | DefKind::Generator)
    500 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a definition that does not have its own
      .               /// type-checking context, i.e. closure, generator or inline const.
    128 ( 0.00%)      pub fn is_typeck_child(self, def_id: DefId) -> bool {
  2,064 ( 0.00%)          matches!(
  2,208 ( 0.00%)              self.def_kind(def_id),
      .                       DefKind::Closure | DefKind::Generator | DefKind::InlineConst
      .                   )
    256 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a trait (i.e., `trait Foo { ... }`).
    155 ( 0.00%)      pub fn is_trait(self, def_id: DefId) -> bool {
    155 ( 0.00%)          self.def_kind(def_id) == DefKind::Trait
    310 ( 0.00%)      }
      .           
      .               /// Returns `true` if `def_id` refers to a trait alias (i.e., `trait Foo = ...;`),
      .               /// and `false` otherwise.
    126 ( 0.00%)      pub fn is_trait_alias(self, def_id: DefId) -> bool {
    126 ( 0.00%)          self.def_kind(def_id) == DefKind::TraitAlias
    252 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `DefId` refers to the implicit constructor for
      .               /// a tuple struct like `struct Foo(u32)`, and `false` otherwise.
    127 ( 0.00%)      pub fn is_constructor(self, def_id: DefId) -> bool {
  1,461 ( 0.00%)          matches!(self.def_kind(def_id), DefKind::Ctor(..))
    254 ( 0.00%)      }
      .           
      .               /// Given the `DefId`, returns the `DefId` of the innermost item that
      .               /// has its own type-checking context or "inference enviornment".
      .               ///
      .               /// For example, a closure has its own `DefId`, but it is type-checked
      .               /// with the containing item. Similarly, an inline const block has its
      .               /// own `DefId` but it is type-checked together with the containing item.
      .               ///
      .               /// Therefore, when we fetch the
      .               /// `typeck` the closure, for example, we really wind up
      .               /// fetching the `typeck` the enclosing fn item.
  5,190 ( 0.00%)      pub fn typeck_root_def_id(self, def_id: DefId) -> DefId {
      .                   let mut def_id = def_id;
      .                   while self.is_typeck_child(def_id) {
      .                       def_id = self.parent(def_id).unwrap_or_else(|| {
      .                           bug!("closure {:?} has no parent", def_id);
      .                       });
      .                   }
      .                   def_id
  4,152 ( 0.00%)      }
      .           
      .               /// Given the `DefId` and substs a closure, creates the type of
      .               /// `self` argument that the closure expects. For example, for a
      .               /// `Fn` closure, this would return a reference type `&T` where
      .               /// `T = closure_ty`.
      .               ///
      .               /// Returns `None` if this closure's kind has not yet been inferred.
      .               /// This should only be possible during type checking.
      .               ///
      .               /// Note that the return value is a late-bound region and hence
      .               /// wrapped in a binder.
      9 ( 0.00%)      pub fn closure_env_ty(
      .                   self,
      .                   closure_def_id: DefId,
      .                   closure_substs: SubstsRef<'tcx>,
      .                   env_region: ty::RegionKind,
      .               ) -> Option<Ty<'tcx>> {
      .                   let closure_ty = self.mk_closure(closure_def_id, closure_substs);
      .                   let closure_kind_ty = closure_substs.as_closure().kind_ty();
      3 ( 0.00%)          let closure_kind = closure_kind_ty.to_opt_closure_kind()?;
      4 ( 0.00%)          let env_ty = match closure_kind {
      .                       ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),
      7 ( 0.00%)              ty::ClosureKind::FnMut => self.mk_mut_ref(self.mk_region(env_region), closure_ty),
      .                       ty::ClosureKind::FnOnce => closure_ty,
      .                   };
      .                   Some(env_ty)
      8 ( 0.00%)      }
      .           
      .               /// Returns `true` if the node pointed to by `def_id` is a `static` item.
  2,268 ( 0.00%)      pub fn is_static(self, def_id: DefId) -> bool {
      .                   self.static_mutability(def_id).is_some()
  2,592 ( 0.00%)      }
      .           
      .               /// Returns `true` if this is a `static` item with the `#[thread_local]` attribute.
  1,764 ( 0.00%)      pub fn is_thread_local_static(self, def_id: DefId) -> bool {
      .                   self.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)
  2,016 ( 0.00%)      }
      .           
      .               /// Returns `true` if the node pointed to by `def_id` is a mutable `static` item.
    588 ( 0.00%)      pub fn is_mutable_static(self, def_id: DefId) -> bool {
      .                   self.static_mutability(def_id) == Some(hir::Mutability::Mut)
    672 ( 0.00%)      }
      .           
      .               /// Get the type of the pointer to the static that we use in MIR.
    224 ( 0.00%)      pub fn static_ptr_ty(self, def_id: DefId) -> Ty<'tcx> {
      .                   // Make sure that any constants in the static's type are evaluated.
      .                   let static_ty = self.normalize_erasing_regions(ty::ParamEnv::empty(), self.type_of(def_id));
      .           
      .                   // Make sure that accesses to unsafe statics end up using raw pointers.
      .                   // For thread-locals, this needs to be kept in sync with `Rvalue::ty`.
    168 ( 0.00%)          if self.is_mutable_static(def_id) {
      .                       self.mk_mut_ptr(static_ty)
     28 ( 0.00%)          } else if self.is_foreign_item(def_id) {
      .                       self.mk_imm_ptr(static_ty)
      .                   } else {
     28 ( 0.00%)              self.mk_imm_ref(self.lifetimes.re_erased, static_ty)
      .                   }
    168 ( 0.00%)      }
      .           
      .               /// Expands the given impl trait type, stopping if the type is recursive.
      .               #[instrument(skip(self), level = "debug")]
      .               pub fn try_expand_impl_trait_type(
      .                   self,
      .                   def_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> Result<Ty<'tcx>, Ty<'tcx>> {
-- line 536 ----------------------------------------
-- line 597 ----------------------------------------
      .                       self.found_recursion = def_id == *self.primary_def_id.as_ref().unwrap();
      .                       None
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
      4 ( 0.00%)          self.tcx
      .               }
      .           
      .               fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
      8 ( 0.00%)          if let ty::Opaque(def_id, substs) = t.kind {
      .                       self.expand_opaque_ty(def_id, substs).unwrap_or(t)
      4 ( 0.00%)          } else if t.has_opaque_types() {
      .                       t.super_fold_with(self)
      .                   } else {
      .                       t
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> ty::TyS<'tcx> {
-- line 619 ----------------------------------------
-- line 658 ----------------------------------------
      .           
      .               /// Checks whether values of this type `T` are *moved* or *copied*
      .               /// when referenced -- this amounts to a check for whether `T:
      .               /// Copy`, but note that we **don't** consider lifetimes when
      .               /// doing this check. This means that we may generate MIR which
      .               /// does copies even when the type actually doesn't satisfy the
      .               /// full requirements for the `Copy` trait (cc #29149) -- this
      .               /// winds up being reported as an error during NLL borrow check.
    440 ( 0.00%)      pub fn is_copy_modulo_regions(
      .                   &'tcx self,
      .                   tcx_at: TyCtxtAt<'tcx>,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> bool {
      .                   tcx_at.is_copy_raw(param_env.and(self))
    352 ( 0.00%)      }
      .           
      .               /// Checks whether values of this type `T` have a size known at
      .               /// compile time (i.e., whether `T: Sized`). Lifetimes are ignored
      .               /// for the purposes of this check, so it can be an
      .               /// over-approximation in generic contexts, where one can have
      .               /// strange rules like `<T as Foo<'static>>::Bar: Sized` that
      .               /// actually carry lifetime requirements.
  3,591 ( 0.00%)      pub fn is_sized(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
  1,995 ( 0.00%)          self.is_trivially_sized(tcx_at.tcx) || tcx_at.is_sized_raw(param_env.and(self))
  2,394 ( 0.00%)      }
      .           
      .               /// Checks whether values of this type `T` implement the `Freeze`
      .               /// trait -- frozen types are those that do not contain an
      .               /// `UnsafeCell` anywhere. This is a language concept used to
      .               /// distinguish "true immutability", which is relevant to
      .               /// optimization as well as the rules around static values. Note
      .               /// that the `Freeze` trait is not exposed to end users and is
      .               /// effectively an implementation detail.
789,651 ( 0.08%)      pub fn is_freeze(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
438,695 ( 0.05%)          self.is_trivially_freeze() || tcx_at.is_freeze_raw(param_env.and(self))
526,434 ( 0.06%)      }
      .           
      .               /// Fast path helper for testing if a type is `Freeze`.
      .               ///
      .               /// Returning true means the type is known to be `Freeze`. Returning
      .               /// `false` means nothing -- could be `Freeze`, might not be.
      .               fn is_trivially_freeze(&self) -> bool {
      .                   match self.kind() {
      .                       ty::Int(_)
-- line 701 ----------------------------------------
-- line 731 ----------------------------------------
      .               pub fn is_unpin(&'tcx self, tcx_at: TyCtxtAt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
      .                   self.is_trivially_unpin() || tcx_at.is_unpin_raw(param_env.and(self))
      .               }
      .           
      .               /// Fast path helper for testing if a type is `Unpin`.
      .               ///
      .               /// Returning true means the type is known to be `Unpin`. Returning
      .               /// `false` means nothing -- could be `Unpin`, might not be.
438,695 ( 0.05%)      fn is_trivially_unpin(&self) -> bool {
438,835 ( 0.05%)          match self.kind() {
      .                       ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
      .                       | ty::Bool
      .                       | ty::Char
      .                       | ty::Str
      .                       | ty::Never
      .                       | ty::Ref(..)
      .                       | ty::RawPtr(_)
      .                       | ty::FnDef(..)
      .                       | ty::Error(_)
      .                       | ty::FnPtr(_) => true,
      .                       ty::Tuple(_) => self.tuple_fields().all(Self::is_trivially_unpin),
     56 ( 0.00%)              ty::Slice(elem_ty) | ty::Array(elem_ty, _) => elem_ty.is_trivially_unpin(),
      .                       ty::Adt(..)
      .                       | ty::Bound(..)
      .                       | ty::Closure(..)
      .                       | ty::Dynamic(..)
      .                       | ty::Foreign(_)
      .                       | ty::Generator(..)
      .                       | ty::GeneratorWitness(_)
      .                       | ty::Infer(_)
      .                       | ty::Opaque(..)
      .                       | ty::Param(_)
      .                       | ty::Placeholder(_)
      .                       | ty::Projection(_) => false,
      .                   }
614,173 ( 0.06%)      }
      .           
      .               /// If `ty.needs_drop(...)` returns `true`, then `ty` is definitely
      .               /// non-copy and *might* have a destructor attached; if it returns
      .               /// `false`, then `ty` definitely has no destructor (i.e., no drop glue).
      .               ///
      .               /// (Note that this implies that if `ty` has a destructor attached,
      .               /// then `needs_drop` will definitely return `true` for `ty`.)
      .               ///
      .               /// Note that this method is used to check eligible types in unions.
      .               #[inline]
  2,550 ( 0.00%)      pub fn needs_drop(&'tcx self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> bool {
      .                   // Avoid querying in simple cases.
177,225 ( 0.02%)          match needs_drop_components(self, &tcx.data_layout) {
      .                       Err(AlwaysRequiresDrop) => true,
117,980 ( 0.01%)              Ok(components) => {
      .                           let query_ty = match *components {
 59,068 ( 0.01%)                      [] => return false,
      .                               // If we've got a single component, call the query with that
      .                               // to increase the chance that we hit the query cache.
     39 ( 0.00%)                      [component_ty] => component_ty,
      .                               _ => self,
      .                           };
      .           
      .                           // This doesn't depend on regions, so try to minimize distinct
      .                           // query keys used.
      .                           // If normalization fails, we just use `query_ty`.
      .                           let query_ty =
      4 ( 0.00%)                      tcx.try_normalize_erasing_regions(param_env, query_ty).unwrap_or(query_ty);
      .           
      2 ( 0.00%)                  tcx.needs_drop_raw(param_env.and(query_ty))
      .                       }
      .                   }
  2,295 ( 0.00%)      }
      .           
      .               /// Checks if `ty` has has a significant drop.
      .               ///
      .               /// Note that this method can return false even if `ty` has a destructor
      .               /// attached; even if that is the case then the adt has been marked with
      .               /// the attribute `rustc_insignificant_dtor`.
      .               ///
      .               /// Note that this method is used to check for change in drop order for
-- line 809 ----------------------------------------
-- line 911 ----------------------------------------
      .               /// This method is idempotent, i.e. `ty.peel_refs().peel_refs() == ty.peel_refs()`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// - `u8` -> `u8`
      .               /// - `&'a mut u8` -> `u8`
      .               /// - `&'a &'b u8` -> `u8`
      .               /// - `&'a *const &'b u8 -> *const &'b u8`
     37 ( 0.00%)      pub fn peel_refs(&'tcx self) -> Ty<'tcx> {
      .                   let mut ty = self;
     77 ( 0.00%)          while let Ref(_, inner_ty, _) = ty.kind() {
      1 ( 0.00%)              ty = inner_ty;
      .                   }
      .                   ty
     37 ( 0.00%)      }
      .           
      .               pub fn outer_exclusive_binder(&'tcx self) -> DebruijnIndex {
     25 ( 0.00%)          self.outer_exclusive_binder
     25 ( 0.00%)      }
      .           }
      .           
      .           pub enum ExplicitSelf<'tcx> {
      .               ByValue,
      .               ByReference(ty::Region<'tcx>, hir::Mutability),
      .               ByRawPointer(hir::Mutability),
      .               ByBox,
      .               Other,
-- line 937 ----------------------------------------
-- line 976 ----------------------------------------
      .                       _ => Other,
      .                   }
      .               }
      .           }
      .           
      .           /// Returns a list of types such that the given type needs drop if and only if
      .           /// *any* of the returned types need drop. Returns `Err(AlwaysRequiresDrop)` if
      .           /// this type always needs drop.
206,486 ( 0.02%)  pub fn needs_drop_components<'tcx>(
      .               ty: Ty<'tcx>,
      .               target_layout: &TargetDataLayout,
      .           ) -> Result<SmallVec<[Ty<'tcx>; 2]>, AlwaysRequiresDrop> {
176,988 ( 0.02%)      match ty.kind() {
      .                   ty::Infer(ty::FreshIntTy(_))
      .                   | ty::Infer(ty::FreshFloatTy(_))
      .                   | ty::Bool
      .                   | ty::Int(_)
      .                   | ty::Uint(_)
      .                   | ty::Float(_)
      .                   | ty::Never
      .                   | ty::FnDef(..)
-- line 996 ----------------------------------------
-- line 1032 ----------------------------------------
      .                   ty::Adt(..)
      .                   | ty::Projection(..)
      .                   | ty::Param(_)
      .                   | ty::Bound(..)
      .                   | ty::Placeholder(..)
      .                   | ty::Opaque(..)
      .                   | ty::Infer(_)
      .                   | ty::Closure(..)
     84 ( 0.00%)          | ty::Generator(..) => Ok(smallvec![ty]),
      .               }
176,988 ( 0.02%)  }
      .           
    168 ( 0.00%)  pub fn is_trivially_const_drop<'tcx>(ty: Ty<'tcx>) -> bool {
    112 ( 0.00%)      match *ty.kind() {
      .                   ty::Bool
      .                   | ty::Char
      .                   | ty::Int(_)
      .                   | ty::Uint(_)
      .                   | ty::Float(_)
      .                   | ty::Infer(ty::IntVar(_))
      .                   | ty::Infer(ty::FloatVar(_))
      .                   | ty::Str
-- line 1053 ----------------------------------------
-- line 1070 ----------------------------------------
      .                   // Not trivial because they have components, and instead of looking inside,
      .                   // we'll just perform trait selection.
      .                   ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(_) | ty::Adt(..) => false,
      .           
      .                   ty::Array(ty, _) | ty::Slice(ty) => is_trivially_const_drop(ty),
      .           
      .                   ty::Tuple(tys) => tys.iter().all(|ty| is_trivially_const_drop(ty.expect_ty())),
      .               }
    224 ( 0.00%)  }
      .           
      .           // Does the equivalent of
      .           // ```
      .           // let v = self.iter().map(|p| p.fold_with(folder)).collect::<SmallVec<[_; 8]>>();
      .           // folder.tcx().intern_*(&v)
      .           // ```
  8,474 ( 0.00%)  pub fn fold_list<'tcx, F, T>(
      .               list: &'tcx ty::List<T>,
      .               folder: &mut F,
      .               intern: impl FnOnce(TyCtxt<'tcx>, &[T]) -> &'tcx ty::List<T>,
      .           ) -> Result<&'tcx ty::List<T>, F::Error>
      .           where
      .               F: FallibleTypeFolder<'tcx>,
      .               T: TypeFoldable<'tcx> + PartialEq + Copy,
      .           {
      .               let mut iter = list.iter();
      .               // Look for the first element that changed
     58 ( 0.00%)      match iter.by_ref().enumerate().find_map(|(i, t)| match t.try_fold_with(folder) {
     87 ( 0.00%)          Ok(new_t) if new_t == t => None,
      .                   new_t => Some((i, new_t)),
      .               }) {
      .                   Some((i, Ok(new_t))) => {
      .                       // An element changed, prepare to intern the resulting list
      .                       let mut new_list = SmallVec::<[_; 8]>::with_capacity(list.len());
      .                       new_list.extend_from_slice(&list[..i]);
      .                       new_list.push(new_t);
      .                       for t in iter {
      .                           new_list.push(t.try_fold_with(folder)?)
      .                       }
     72 ( 0.00%)              Ok(intern(folder.tcx(), &new_list))
      .                   }
      .                   Some((_, Err(err))) => {
      .                       return Err(err);
      .                   }
      .                   None => Ok(list),
      .               }
  8,593 ( 0.00%)  }
      .           
      .           #[derive(Copy, Clone, Debug, HashStable, TyEncodable, TyDecodable)]
      .           pub struct AlwaysRequiresDrop;
      .           
      .           /// Normalizes all opaque types in the given value, replacing them
      .           /// with their underlying types.
      8 ( 0.00%)  pub fn normalize_opaque_types<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               val: &'tcx List<ty::Predicate<'tcx>>,
      .           ) -> &'tcx List<ty::Predicate<'tcx>> {
     14 ( 0.00%)      let mut visitor = OpaqueTypeExpander {
      .                   seen_opaque_tys: FxHashSet::default(),
      .                   expanded_cache: FxHashMap::default(),
      .                   primary_def_id: None,
      .                   found_recursion: false,
      .                   found_any_recursion: false,
      .                   check_recursion: false,
      .                   tcx,
      .               };
      .               val.fold_with(&mut visitor)
     10 ( 0.00%)  }
      .           
      .           pub fn provide(providers: &mut ty::query::Providers) {
      2 ( 0.00%)      *providers = ty::query::Providers { normalize_opaque_types, ..*providers }
      .           }

441,934 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/util.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_target/src/abi/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 40 ----------------------------------------
        .               /// Minimum size of #[repr(C)] enums (default I32 bits)
        .               pub c_enum_min_size: Integer,
        .           }
        .           
        .           impl Default for TargetDataLayout {
        .               /// Creates an instance of `TargetDataLayout`.
        .               fn default() -> TargetDataLayout {
        .                   let align = |bits| Align::from_bits(bits).unwrap();
       24 ( 0.00%)          TargetDataLayout {
        .                       endian: Endian::Big,
        .                       i1_align: AbiAndPrefAlign::new(align(8)),
        .                       i8_align: AbiAndPrefAlign::new(align(8)),
        .                       i16_align: AbiAndPrefAlign::new(align(16)),
        .                       i32_align: AbiAndPrefAlign::new(align(32)),
        .                       i64_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },
        .                       i128_align: AbiAndPrefAlign { abi: align(32), pref: align(64) },
        .                       f32_align: AbiAndPrefAlign::new(align(32)),
        .                       f64_align: AbiAndPrefAlign::new(align(64)),
        .                       pointer_size: Size::from_bits(64),
        .                       pointer_align: AbiAndPrefAlign::new(align(64)),
        .                       aggregate_align: AbiAndPrefAlign { abi: align(0), pref: align(64) },
        8 ( 0.00%)              vector_align: vec![
        .                           (Size::from_bits(64), AbiAndPrefAlign::new(align(64))),
        .                           (Size::from_bits(128), AbiAndPrefAlign::new(align(128))),
        .                       ],
        .                       instruction_address_space: AddressSpace::DATA,
        .                       c_enum_min_size: Integer::I32,
        .                   }
        .               }
        .           }
        .           
        .           impl TargetDataLayout {
       18 ( 0.00%)      pub fn parse(target: &Target) -> Result<TargetDataLayout, String> {
        .                   // Parse an address space index from a string.
        .                   let parse_address_space = |s: &str, cause: &str| {
        .                       s.parse::<u32>().map(AddressSpace).map_err(|err| {
        .                           format!("invalid address space `{}` for `{}` in \"data-layout\": {}", s, cause, err)
        .                       })
        .                   };
        .           
        .                   // Parse a bit count from a string.
-- line 80 ----------------------------------------
-- line 83 ----------------------------------------
        .                           format!("invalid {} `{}` for `{}` in \"data-layout\": {}", kind, s, cause, err)
        .                       })
        .                   };
        .           
        .                   // Parse a size string.
        .                   let size = |s: &str, cause: &str| parse_bits(s, "size", cause).map(Size::from_bits);
        .           
        .                   // Parse an alignment string.
       20 ( 0.00%)          let align = |s: &[&str], cause: &str| {
        2 ( 0.00%)              if s.is_empty() {
        .                           return Err(format!("missing alignment for `{}` in \"data-layout\"", cause));
        .                       }
       12 ( 0.00%)              let align_from_bits = |bits| {
        .                           Align::from_bits(bits).map_err(|err| {
        .                               format!("invalid alignment for `{}` in \"data-layout\": {}", cause, err)
        .                           })
       16 ( 0.00%)              };
       18 ( 0.00%)              let abi = parse_bits(s[0], "alignment", cause)?;
        .                       let pref = s.get(1).map_or(Ok(abi), |pref| parse_bits(pref, "alignment", cause))?;
       14 ( 0.00%)              Ok(AbiAndPrefAlign { abi: align_from_bits(abi)?, pref: align_from_bits(pref)? })
       16 ( 0.00%)          };
        .           
        .                   let mut dl = TargetDataLayout::default();
        .                   let mut i128_align_src = 64;
       32 ( 0.00%)          for spec in target.data_layout.split('-') {
        .                       let spec_parts = spec.split(':').collect::<Vec<_>>();
        .           
        .                       match &*spec_parts {
       78 ( 0.00%)                  ["e"] => dl.endian = Endian::Little,
        .                           ["E"] => dl.endian = Endian::Big,
        2 ( 0.00%)                  [p] if p.starts_with('P') => {
        .                               dl.instruction_address_space = parse_address_space(&p[1..], "P")?
        .                           }
       44 ( 0.00%)                  ["a", ref a @ ..] => dl.aggregate_align = align(a, "a")?,
        4 ( 0.00%)                  ["f32", ref a @ ..] => dl.f32_align = align(a, "f32")?,
        4 ( 0.00%)                  ["f64", ref a @ ..] => dl.f64_align = align(a, "f64")?,
       44 ( 0.00%)                  [p @ "p", s, ref a @ ..] | [p @ "p0", s, ref a @ ..] => {
        .                               dl.pointer_size = size(s, p)?;
        .                               dl.pointer_align = align(a, p)?;
        .                           }
       64 ( 0.00%)                  [s, ref a @ ..] if s.starts_with('i') => {
        4 ( 0.00%)                      let bits = match s[1..].parse::<u64>() {
        .                                   Ok(bits) => bits,
        .                                   Err(_) => {
        .                                       size(&s[1..], "i")?; // For the user error.
        .                                       continue;
        .                                   }
        .                               };
       14 ( 0.00%)                      let a = align(a, s)?;
       10 ( 0.00%)                      match bits {
        .                                   1 => dl.i1_align = a,
        .                                   8 => dl.i8_align = a,
        .                                   16 => dl.i16_align = a,
        .                                   32 => dl.i32_align = a,
        6 ( 0.00%)                          64 => dl.i64_align = a,
        .                                   _ => {}
        .                               }
        8 ( 0.00%)                      if bits >= i128_align_src && bits <= 128 {
        .                                   // Default alignment for i128 is decided by taking the alignment of
        .                                   // largest-sized i{64..=128}.
        .                                   i128_align_src = bits;
        8 ( 0.00%)                          dl.i128_align = a;
        .                               }
        .                           }
       14 ( 0.00%)                  [s, ref a @ ..] if s.starts_with('v') => {
        .                               let v_size = size(&s[1..], "v")?;
        .                               let a = align(a, s)?;
        .                               if let Some(v) = dl.vector_align.iter_mut().find(|v| v.0 == v_size) {
        .                                   v.1 = a;
        .                                   continue;
        .                               }
        .                               // No existing entry, add a new one.
        .                               dl.vector_align.push((v_size, a));
        .                           }
        .                           _ => {} // Ignore everything else.
        .                       }
        .                   }
        .           
        .                   // Perform consistency checks against the Target information.
        8 ( 0.00%)          if dl.endian != target.endian {
        .                       return Err(format!(
        .                           "inconsistent target specification: \"data-layout\" claims \
        .                            architecture is {}-endian, while \"target-endian\" is `{}`",
        .                           dl.endian.as_str(),
        .                           target.endian.as_str(),
        .                       ));
        .                   }
        .           
       10 ( 0.00%)          if dl.pointer_size.bits() != target.pointer_width.into() {
        .                       return Err(format!(
        .                           "inconsistent target specification: \"data-layout\" claims \
        .                            pointers are {}-bit, while \"target-pointer-width\" is `{}`",
        .                           dl.pointer_size.bits(),
        .                           target.pointer_width
        .                       ));
        .                   }
        .           
        4 ( 0.00%)          dl.c_enum_min_size = Integer::from_size(Size::from_bits(target.c_enum_min_bits))?;
        .           
       34 ( 0.00%)          Ok(dl)
       18 ( 0.00%)      }
        .           
        .               /// Returns exclusive upper bound on object size.
        .               ///
        .               /// The theoretical maximum object size is defined as the maximum positive `isize` value.
        .               /// This ensures that the `offset` semantics remain well-defined by allowing it to correctly
        .               /// index every address within an object along with one byte past the end, along with allowing
        .               /// `isize` to store the difference between any two pointers into an object.
        .               ///
        .               /// The upper bound on 64-bit currently needs to be lower because LLVM uses a 64-bit integer
        .               /// to represent object size in bits. It would need to be 1 << 61 to account for this, but is
        .               /// currently conservatively bounded to 1 << 47 as that is enough to cover the current usable
        .               /// address space on 64-bit ARMv8 and x86_64.
        .               #[inline]
        .               pub fn obj_size_bound(&self) -> u64 {
  528,954 ( 0.06%)          match self.pointer_size.bits() {
        .                       16 => 1 << 15,
        .                       32 => 1 << 31,
        .                       64 => 1 << 47,
        .                       bits => panic!("obj_size_bound: unknown pointer bit size {}", bits),
        .                   }
        5 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn ptr_sized_integer(&self) -> Integer {
      150 ( 0.00%)          match self.pointer_size.bits() {
        .                       16 => I16,
        .                       32 => I32,
        .                       64 => I64,
        .                       bits => panic!("ptr_sized_integer: unknown pointer bit size {}", bits),
        .                   }
        5 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn vector_align(&self, vec_size: Size) -> AbiAndPrefAlign {
        .                   for &(size, align) in &self.vector_align {
        .                       if size == vec_size {
        .                           return align;
        .                       }
        .                   }
-- line 222 ----------------------------------------
-- line 233 ----------------------------------------
        .           impl HasDataLayout for TargetDataLayout {
        .               #[inline]
        .               fn data_layout(&self) -> &TargetDataLayout {
        .                   self
        .               }
        .           }
        .           
        .           /// Endianness of the target, which must match cfg(target-endian).
        2 ( 0.00%)  #[derive(Copy, Clone, PartialEq)]
        .           pub enum Endian {
        .               Little,
        .               Big,
        .           }
        .           
        .           impl Endian {
        .               pub fn as_str(&self) -> &'static str {
        3 ( 0.00%)          match self {
        .                       Self::Little => "little",
        .                       Self::Big => "big",
        .                   }
        1 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Endian {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.write_str(self.as_str())
        .               }
        .           }
        .           
-- line 261 ----------------------------------------
-- line 273 ----------------------------------------
        .           
        .           impl ToJson for Endian {
        .               fn to_json(&self) -> Json {
        .                   self.as_str().to_json()
        .               }
        .           }
        .           
        .           /// Size of a type in bytes.
       84 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]
        .           #[derive(HashStable_Generic)]
        .           pub struct Size {
        .               // The top 3 bits are ALWAYS zero.
  117,869 ( 0.01%)      raw: u64,
        .           }
        .           
        .           impl Size {
        .               pub const ZERO: Size = Size { raw: 0 };
        .           
        .               /// Rounds `bits` up to the next-higher byte boundary, if `bits` is
        .               /// is not aligned.
        .               pub fn from_bits(bits: impl TryInto<u64>) -> Size {
-- line 293 ----------------------------------------
-- line 296 ----------------------------------------
        .                   #[cold]
        .                   fn overflow(bits: u64) -> ! {
        .                       panic!("Size::from_bits({}) has overflowed", bits);
        .                   }
        .           
        .                   // This is the largest value of `bits` that does not cause overflow
        .                   // during rounding, and guarantees that the resulting number of bytes
        .                   // cannot cause overflow when multiplied by 8.
       12 ( 0.00%)          if bits > 0xffff_ffff_ffff_fff8 {
        .                       overflow(bits);
        .                   }
        .           
        .                   // Avoid potential overflow from `bits + 7`.
      290 ( 0.00%)          Size { raw: bits / 8 + ((bits % 8) + 7) / 8 }
        .               }
        .           
        .               #[inline]
        .               pub fn from_bytes(bytes: impl TryInto<u64>) -> Size {
        .                   let bytes: u64 = bytes.try_into().ok().unwrap();
        .                   Size { raw: bytes }
        .               }
        .           
-- line 317 ----------------------------------------
-- line 322 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn bytes_usize(self) -> usize {
        .                   self.bytes().try_into().unwrap()
        .               }
        .           
        .               #[inline]
        .               pub fn bits(self) -> u64 {
  381,575 ( 0.04%)          self.raw << 3
        .               }
        .           
        .               #[inline]
        .               pub fn bits_usize(self) -> usize {
        .                   self.bits().try_into().unwrap()
        .               }
        .           
        .               #[inline]
        6 ( 0.00%)      pub fn align_to(self, align: Align) -> Size {
      813 ( 0.00%)          let mask = align.bytes() - 1;
      782 ( 0.00%)          Size::from_bytes((self.bytes() + mask) & !mask)
       18 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_aligned(self, align: Align) -> bool {
       16 ( 0.00%)          let mask = align.bytes() - 1;
        8 ( 0.00%)          self.bytes() & mask == 0
        .               }
        .           
        .               #[inline]
        .               pub fn checked_add<C: HasDataLayout>(self, offset: Size, cx: &C) -> Option<Size> {
        .                   let dl = cx.data_layout();
        .           
   88,099 ( 0.01%)          let bytes = self.bytes().checked_add(offset.bytes())?;
        .           
  440,447 ( 0.05%)          if bytes < dl.obj_size_bound() { Some(Size::from_bytes(bytes)) } else { None }
        .               }
        .           
        .               #[inline]
       54 ( 0.00%)      pub fn checked_mul<C: HasDataLayout>(self, count: u64, cx: &C) -> Option<Size> {
        .                   let dl = cx.data_layout();
        .           
       55 ( 0.00%)          let bytes = self.bytes().checked_mul(count)?;
      165 ( 0.00%)          if bytes < dl.obj_size_bound() { Some(Size::from_bytes(bytes)) } else { None }
       27 ( 0.00%)      }
        .           
        .               /// Truncates `value` to `self` bits and then sign-extends it to 128 bits
        .               /// (i.e., if it is negative, fill with 1's on the left).
        .               #[inline]
        .               pub fn sign_extend(self, value: u128) -> u128 {
        .                   let size = self.bits();
        8 ( 0.00%)          if size == 0 {
        .                       // Truncated until nothing is left.
        .                       return 0;
        .                   }
        .                   // Sign-extend it.
       47 ( 0.00%)          let shift = 128 - size;
        .                   // Shift the unsigned value to the left, then shift back to the right as signed
        .                   // (essentially fills with sign bit on the left).
    1,398 ( 0.00%)          (((value << shift) as i128) >> shift) as u128
        .               }
        .           
        .               /// Truncates `value` to `self` bits.
        .               #[inline]
        .               pub fn truncate(self, value: u128) -> u128 {
        .                   let size = self.bits();
  117,632 ( 0.01%)          if size == 0 {
        .                       // Truncated until nothing is left.
        .                       return 0;
        .                   }
  117,668 ( 0.01%)          let shift = 128 - size;
        .                   // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).
1,468,098 ( 0.15%)          (value << shift) >> shift
        .               }
        .           
        .               #[inline]
        .               pub fn signed_int_min(&self) -> i128 {
      351 ( 0.00%)          self.sign_extend(1_u128 << (self.bits() - 1)) as i128
        .               }
        .           
        .               #[inline]
        .               pub fn signed_int_max(&self) -> i128 {
      351 ( 0.00%)          i128::MAX >> (128 - self.bits())
        .               }
        .           
        .               #[inline]
        5 ( 0.00%)      pub fn unsigned_int_max(&self) -> u128 {
    1,262 ( 0.00%)          u128::MAX >> (128 - self.bits())
       10 ( 0.00%)      }
        .           }
        .           
        .           // Panicking addition, subtraction and multiplication for convenience.
        .           // Avoid during layout computation, return `LayoutError` instead.
        .           
        .           impl Add for Size {
        .               type Output = Size;
        .               #[inline]
-- line 417 ----------------------------------------
-- line 439 ----------------------------------------
        .                   size * self
        .               }
        .           }
        .           
        .           impl Mul<u64> for Size {
        .               type Output = Size;
        .               #[inline]
        .               fn mul(self, count: u64) -> Size {
  117,055 ( 0.01%)          match self.bytes().checked_mul(count) {
        .                       Some(bytes) => Size::from_bytes(bytes),
        .                       None => panic!("Size::mul: {} * {} doesn't fit in u64", self.bytes(), count),
        .                   }
        .               }
        .           }
        .           
        .           impl AddAssign for Size {
        .               #[inline]
        .               fn add_assign(&mut self, other: Size) {
      152 ( 0.00%)          *self = *self + other;
        .               }
        .           }
        .           
        .           impl Step for Size {
        .               #[inline]
        .               fn steps_between(start: &Self, end: &Self) -> Option<usize> {
        .                   u64::steps_between(&start.bytes(), &end.bytes())
        .               }
-- line 465 ----------------------------------------
-- line 494 ----------------------------------------
        .                   Self::from_bytes(u64::backward_unchecked(start.bytes(), count))
        .               }
        .           }
        .           
        .           /// Alignment of a type in bytes (always a power of two).
        .           #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]
        .           #[derive(HashStable_Generic)]
        .           pub struct Align {
      603 ( 0.00%)      pow2: u8,
        .           }
        .           
        .           impl Align {
        .               pub const ONE: Align = Align { pow2: 0 };
        .           
        .               #[inline]
        .               pub fn from_bits(bits: u64) -> Result<Align, String> {
        .                   Align::from_bytes(Size::from_bits(bits).bytes())
        .               }
        .           
        .               #[inline]
        .               pub fn from_bytes(align: u64) -> Result<Align, String> {
        .                   // Treat an alignment of 0 bytes like 1-byte alignment.
        8 ( 0.00%)          if align == 0 {
        .                       return Ok(Align::ONE);
        .                   }
        .           
        .                   #[cold]
        .                   fn not_power_of_2(align: u64) -> String {
        .                       format!("`{}` is not a power of 2", align)
        .                   }
        .           
        .                   #[cold]
        .                   fn too_large(align: u64) -> String {
        .                       format!("`{}` is too large", align)
        .                   }
        .           
        .                   let mut bytes = align;
        .                   let mut pow2: u8 = 0;
       56 ( 0.00%)          while (bytes & 1) == 0 {
       36 ( 0.00%)              pow2 += 1;
       24 ( 0.00%)              bytes >>= 1;
        .                   }
        8 ( 0.00%)          if bytes != 1 {
        .                       return Err(not_power_of_2(align));
        .                   }
        8 ( 0.00%)          if pow2 > 29 {
        .                       return Err(too_large(align));
        .                   }
        .           
       10 ( 0.00%)          Ok(Align { pow2 })
        .               }
        .           
        .               #[inline]
        .               pub fn bytes(self) -> u64 {
    3,113 ( 0.00%)          1 << self.pow2
        .               }
        .           
        .               #[inline]
        .               pub fn bits(self) -> u64 {
      108 ( 0.00%)          self.bytes() * 8
        .               }
        .           
        .               /// Computes the best alignment possible for the given offset
        .               /// (the largest power of two that the offset is a multiple of).
        .               ///
        .               /// N.B., for an offset of `0`, this happens to return `2^64`.
        .               #[inline]
        .               pub fn max_for_offset(offset: Size) -> Align {
-- line 561 ----------------------------------------
-- line 591 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn max(self, other: AbiAndPrefAlign) -> AbiAndPrefAlign {
        .                   AbiAndPrefAlign { abi: self.abi.max(other.abi), pref: self.pref.max(other.pref) }
        .               }
        .           }
        .           
        .           /// Integers, also used for enum discriminants.
       58 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, HashStable_Generic)]
        .           pub enum Integer {
        .               I8,
        .               I16,
        .               I32,
        .               I64,
        .               I128,
        .           }
        .           
        .           impl Integer {
        .               #[inline]
        .               pub fn size(self) -> Size {
    1,344 ( 0.00%)          match self {
        .                       I8 => Size::from_bytes(1),
        .                       I16 => Size::from_bytes(2),
        .                       I32 => Size::from_bytes(4),
        .                       I64 => Size::from_bytes(8),
        .                       I128 => Size::from_bytes(16),
        .                   }
        .               }
        .           
        .               pub fn align<C: HasDataLayout>(self, cx: &C) -> AbiAndPrefAlign {
        .                   let dl = cx.data_layout();
        .           
      200 ( 0.00%)          match self {
       97 ( 0.00%)              I8 => dl.i8_align,
        .                       I16 => dl.i16_align,
       28 ( 0.00%)              I32 => dl.i32_align,
      189 ( 0.00%)              I64 => dl.i64_align,
        .                       I128 => dl.i128_align,
        .                   }
        .               }
        .           
        .               /// Finds the smallest Integer type which can represent the signed value.
        .               #[inline]
        .               pub fn fit_signed(x: i128) -> Integer {
        .                   match x {
       70 ( 0.00%)              -0x0000_0000_0000_0080..=0x0000_0000_0000_007f => I8,
        .                       -0x0000_0000_0000_8000..=0x0000_0000_0000_7fff => I16,
        .                       -0x0000_0000_8000_0000..=0x0000_0000_7fff_ffff => I32,
        .                       -0x8000_0000_0000_0000..=0x7fff_ffff_ffff_ffff => I64,
        .                       _ => I128,
        .                   }
        .               }
        .           
        .               /// Finds the smallest Integer type which can represent the unsigned value.
        .               #[inline]
        .               pub fn fit_unsigned(x: u128) -> Integer {
        .                   match x {
       20 ( 0.00%)              0..=0x0000_0000_0000_00ff => I8,
        8 ( 0.00%)              0..=0x0000_0000_0000_ffff => I16,
       12 ( 0.00%)              0..=0x0000_0000_ffff_ffff => I32,
        .                       0..=0xffff_ffff_ffff_ffff => I64,
        .                       _ => I128,
        .                   }
        .               }
        .           
        .               /// Finds the smallest integer with the given alignment.
       36 ( 0.00%)      pub fn for_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Option<Integer> {
        .                   let dl = cx.data_layout();
        .           
      247 ( 0.00%)          for candidate in [I8, I16, I32, I64, I128] {
       48 ( 0.00%)              if wanted == candidate.align(dl).abi && wanted.bytes() == candidate.size().bytes() {
        .                           return Some(candidate);
        .                       }
        .                   }
        .                   None
       36 ( 0.00%)      }
        .           
        .               /// Find the largest integer with the given alignment or less.
        .               pub fn approximate_align<C: HasDataLayout>(cx: &C, wanted: Align) -> Integer {
        .                   let dl = cx.data_layout();
        .           
        .                   // FIXME(eddyb) maybe include I128 in the future, when it works everywhere.
        .                   for candidate in [I64, I32, I16] {
       34 ( 0.00%)              if wanted >= candidate.align(dl).abi && wanted.bytes() >= candidate.size().bytes() {
        .                           return candidate;
        .                       }
        .                   }
        .                   I8
        .               }
        .           
        .               // FIXME(eddyb) consolidate this and other methods that find the appropriate
        .               // `Integer` given some requirements.
        .               #[inline]
        .               fn from_size(size: Size) -> Result<Self, String> {
        8 ( 0.00%)          match size.bits() {
        .                       8 => Ok(Integer::I8),
        .                       16 => Ok(Integer::I16),
        .                       32 => Ok(Integer::I32),
        .                       64 => Ok(Integer::I64),
        .                       128 => Ok(Integer::I128),
        .                       _ => Err(format!("rust does not support integers with {} bits", size.bits())),
        .                   }
        .               }
        .           }
        .           
        .           /// Fundamental unit of memory access and layout.
    4,685 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum Primitive {
        .               /// The `bool` is the signedness of the `Integer` type.
        .               ///
        .               /// One would think we would not care about such details this low down,
        .               /// but some ABIs are described in terms of C types and ISAs where the
        .               /// integer arithmetic is done on {sign,zero}-extended registers, e.g.
        .               /// a negative integer passed by zero-extension will appear positive in
        .               /// the callee, and most operations on it will produce the wrong values.
      288 ( 0.00%)      Int(Integer, bool),
        .               F32,
        .               F64,
        .               Pointer,
        .           }
        .           
        .           impl Primitive {
        .               pub fn size<C: HasDataLayout>(self, cx: &C) -> Size {
        .                   let dl = cx.data_layout();
        .           
    4,242 ( 0.00%)          match self {
        .                       Int(i, _) => i.size(),
        .                       F32 => Size::from_bits(32),
        .                       F64 => Size::from_bits(64),
      330 ( 0.00%)              Pointer => dl.pointer_size,
        .                   }
        5 ( 0.00%)      }
        .           
        .               pub fn align<C: HasDataLayout>(self, cx: &C) -> AbiAndPrefAlign {
        .                   let dl = cx.data_layout();
        .           
      299 ( 0.00%)          match self {
        .                       Int(i, _) => i.align(dl),
        .                       F32 => dl.f32_align,
        .                       F64 => dl.f64_align,
       82 ( 0.00%)              Pointer => dl.pointer_align,
        .                   }
        .               }
        .           
        .               // FIXME(eddyb) remove, it's trivial thanks to `matches!`.
        .               #[inline]
        .               pub fn is_float(self) -> bool {
        .                   matches!(self, F32 | F64)
        .               }
-- line 739 ----------------------------------------
-- line 753 ----------------------------------------
        .           /// sequence:
        .           ///
        .           ///    254 (-2), 255 (-1), 0, 1, 2
        .           ///
        .           /// This is intended specifically to mirror LLVM’s `!range` metadata semantics.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash)]
        .           #[derive(HashStable_Generic)]
        .           pub struct WrappingRange {
      384 ( 0.00%)      pub start: u128,
        .               pub end: u128,
        .           }
        .           
        .           impl WrappingRange {
        .               /// Returns `true` if `v` is contained in the range.
        .               #[inline(always)]
        .               pub fn contains(&self, v: u128) -> bool {
      156 ( 0.00%)          if self.start <= self.end {
        .                       self.start <= v && v <= self.end
        .                   } else {
        .                       self.start <= v || v <= self.end
        .                   }
        .               }
        .           
        .               /// Returns `self` with replaced `start`
        .               #[inline(always)]
-- line 777 ----------------------------------------
-- line 787 ----------------------------------------
        .                   self
        .               }
        .           
        .               /// Returns `true` if `size` completely fills the range.
        .               #[inline]
        .               pub fn is_full_for(&self, size: Size) -> bool {
        .                   let max_value = size.unsigned_int_max();
        .                   debug_assert!(self.start <= max_value && self.end <= max_value);
      445 ( 0.00%)          self.start == (self.end.wrapping_add(1) & max_value)
        .               }
        .           }
        .           
        .           impl fmt::Debug for WrappingRange {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   if self.start > self.end {
        .                       write!(fmt, "(..={}) | ({}..)", self.end, self.start)?;
        .                   } else {
-- line 803 ----------------------------------------
-- line 806 ----------------------------------------
        .                   Ok(())
        .               }
        .           }
        .           
        .           /// Information about one scalar component of a Rust type.
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
        .           #[derive(HashStable_Generic)]
        .           pub struct Scalar {
      858 ( 0.00%)      pub value: Primitive,
        .           
        .               // FIXME(eddyb) always use the shortest range, e.g., by finding
        .               // the largest space between two consecutive valid values and
        .               // taking everything else as the (shortest) valid range.
      431 ( 0.00%)      pub valid_range: WrappingRange,
        .           }
        .           
        .           impl Scalar {
        .               #[inline]
        .               pub fn is_bool(&self) -> bool {
      932 ( 0.00%)          matches!(
      596 ( 0.00%)              self,
        .                       Scalar { value: Int(I8, false), valid_range: WrappingRange { start: 0, end: 1 } }
        .                   )
        .               }
        .           
        .               /// Returns `true` if all possible numbers are valid, i.e `valid_range` covers the whole layout
        .               #[inline]
        1 ( 0.00%)      pub fn is_always_valid<C: HasDataLayout>(&self, cx: &C) -> bool {
      139 ( 0.00%)          self.valid_range.is_full_for(self.value.size(cx))
        2 ( 0.00%)      }
        .           }
        .           
        .           /// Describes how the fields of a type are located in memory.
    3,766 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum FieldsShape {
        .               /// Scalar primitives and `!`, which never have fields.
        .               Primitive,
        .           
        .               /// All fields start at no offset. The `usize` is the field count.
        .               Union(NonZeroUsize),
        .           
        .               /// Array/vector-like placement, with all fields of identical types.
        8 ( 0.00%)      Array { stride: Size, count: u64 },
        .           
        .               /// Struct-like placement, with precomputed offsets.
        .               ///
        .               /// Fields are guaranteed to not overlap, but note that gaps
        .               /// before, between and after all the fields are NOT always
        .               /// padding, and as such their contents may not be discarded.
        .               /// For example, enum variants leave a gap at the start,
        .               /// where the discriminant field in the enum layout goes.
-- line 856 ----------------------------------------
-- line 875 ----------------------------------------
        .                   // FIXME(camlorn) also consider small vector  optimization here.
        .                   memory_index: Vec<u32>,
        .               },
        .           }
        .           
        .           impl FieldsShape {
        .               #[inline]
        .               pub fn count(&self) -> usize {
      447 ( 0.00%)          match *self {
        .                       FieldsShape::Primitive => 0,
        .                       FieldsShape::Union(count) => count.get(),
        .                       FieldsShape::Array { count, .. } => count.try_into().unwrap(),
      155 ( 0.00%)              FieldsShape::Arbitrary { ref offsets, .. } => offsets.len(),
        .                   }
        .               }
        .           
        .               #[inline]
   58,520 ( 0.01%)      pub fn offset(&self, i: usize) -> Size {
  146,402 ( 0.02%)          match *self {
        .                       FieldsShape::Primitive => {
        .                           unreachable!("FieldsShape::offset: `Primitive`s have no fields")
        .                       }
        4 ( 0.00%)              FieldsShape::Union(count) => {
        2 ( 0.00%)                  assert!(
        2 ( 0.00%)                      i < count.get(),
        .                               "tried to access field {} of union with {} fields",
        .                               i,
        .                               count
        .                           );
        .                           Size::ZERO
        .                       }
        .                       FieldsShape::Array { stride, count } => {
        .                           let i = u64::try_from(i).unwrap();
   58,418 ( 0.01%)                  assert!(i < count);
        .                           stride * i
        .                       }
       73 ( 0.00%)              FieldsShape::Arbitrary { ref offsets, .. } => offsets[i],
        .                   }
   58,520 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn memory_index(&self, i: usize) -> usize {
        .                   match *self {
        .                       FieldsShape::Primitive => {
        .                           unreachable!("FieldsShape::memory_index: `Primitive`s have no fields")
        .                       }
        .                       FieldsShape::Union(_) | FieldsShape::Array { .. } => i,
        .                       FieldsShape::Arbitrary { ref memory_index, .. } => memory_index[i].try_into().unwrap(),
        .                   }
        .               }
        .           
        .               /// Gets source indices of the fields by increasing offsets.
        .               #[inline]
        .               pub fn index_by_increasing_offset<'a>(&'a self) -> impl Iterator<Item = usize> + 'a {
      187 ( 0.00%)          let mut inverse_small = [0u8; 64];
        .                   let mut inverse_big = vec![];
       42 ( 0.00%)          let use_small = self.count() <= inverse_small.len();
        .           
        .                   // We have to write this logic twice in order to keep the array small.
        .                   if let FieldsShape::Arbitrary { ref memory_index, .. } = *self {
       42 ( 0.00%)              if use_small {
        .                           for i in 0..self.count() {
       60 ( 0.00%)                      inverse_small[memory_index[i] as usize] = i as u8;
        .                           }
        .                       } else {
        .                           inverse_big = vec![0; self.count()];
        .                           for i in 0..self.count() {
        .                               inverse_big[memory_index[i] as usize] = i as u32;
        .                           }
        .                       }
        .                   }
        .           
      464 ( 0.00%)          (0..self.count()).map(move |i| match *self {
        .                       FieldsShape::Primitive | FieldsShape::Union(_) | FieldsShape::Array { .. } => i,
        .                       FieldsShape::Arbitrary { .. } => {
       18 ( 0.00%)                  if use_small {
       38 ( 0.00%)                      inverse_small[i] as usize
        .                           } else {
        .                               inverse_big[i] as usize
        .                           }
        .                       }
        .                   })
        .               }
        .           }
        .           
-- line 959 ----------------------------------------
-- line 965 ----------------------------------------
        .           
        .           impl AddressSpace {
        .               /// The default address space, corresponding to data space.
        .               pub const DATA: Self = AddressSpace(0);
        .           }
        .           
        .           /// Describes how values of the type are passed by target ABIs,
        .           /// in terms of categories of C types there are ABI rules for.
    2,416 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum Abi {
        .               Uninhabited,
        .               Scalar(Scalar),
       20 ( 0.00%)      ScalarPair(Scalar, Scalar),
        .               Vector {
        .                   element: Scalar,
        .                   count: u64,
        .               },
        .               Aggregate {
        .                   /// If true, the size is exact, otherwise it's only a lower bound.
      303 ( 0.00%)          sized: bool,
        .               },
        .           }
        .           
        .           impl Abi {
        .               /// Returns `true` if the layout corresponds to an unsized type.
        .               #[inline]
        .               pub fn is_unsized(&self) -> bool {
  176,569 ( 0.02%)          match *self {
        .                       Abi::Uninhabited | Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } => false,
        .                       Abi::Aggregate { sized } => !sized,
        .                   }
        .               }
        .           
        .               /// Returns `true` if this is a single signed integer scalar
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
       24 ( 0.00%)          match self {
       56 ( 0.00%)              Abi::Scalar(scal) => match scal.value {
        .                           Primitive::Int(_, signed) => signed,
        .                           _ => false,
        .                       },
        .                       _ => panic!("`is_signed` on non-scalar ABI {:?}", self),
        .                   }
        .               }
        .           
        .               /// Returns `true` if this is an uninhabited type
        .               #[inline]
        .               pub fn is_uninhabited(&self) -> bool {
      192 ( 0.00%)          matches!(*self, Abi::Uninhabited)
        .               }
        .           
        .               /// Returns `true` is this is a scalar type
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
        .                   matches!(*self, Abi::Scalar(_))
        .               }
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               pub struct VariantIdx {
        .                   derive [HashStable_Generic]
        .               }
        .           }
        .           
    1,592 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum Variants {
        .               /// Single enum variants, structs/tuples, unions, and all non-ADTs.
      102 ( 0.00%)      Single { index: VariantIdx },
        .           
        .               /// Enum-likes with more than one inhabited variant: each variant comes with
        .               /// a *discriminant* (usually the same as the variant index but the user can
        .               /// assign explicit discriminant values).  That discriminant is encoded
        .               /// as a *tag* on the machine.  The layout of each variant is
        .               /// a struct, and they all have space reserved for the tag.
        .               /// For enums, the tag is the sole field of the layout.
        .               Multiple {
        .                   tag: Scalar,
        5 ( 0.00%)          tag_encoding: TagEncoding,
        4 ( 0.00%)          tag_field: usize,
        1 ( 0.00%)          variants: IndexVec<VariantIdx, Layout>,
        .               },
        .           }
        .           
       46 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub enum TagEncoding {
        .               /// The tag directly stores the discriminant, but possibly with a smaller layout
        .               /// (so converting the tag to the discriminant can require sign extension).
        .               Direct,
        .           
        .               /// Niche (values invalid for a type) encoding the discriminant:
        .               /// Discriminant and variant index coincide.
        .               /// The variant `dataful_variant` contains a niche at an arbitrary
-- line 1056 ----------------------------------------
-- line 1065 ----------------------------------------
        .                   dataful_variant: VariantIdx,
        .                   niche_variants: RangeInclusive<VariantIdx>,
        .                   niche_start: u128,
        .               },
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub struct Niche {
       56 ( 0.00%)      pub offset: Size,
       56 ( 0.00%)      pub scalar: Scalar,
        .           }
        .           
        .           impl Niche {
       36 ( 0.00%)      pub fn from_scalar<C: HasDataLayout>(cx: &C, offset: Size, scalar: Scalar) -> Option<Self> {
       36 ( 0.00%)          let niche = Niche { offset, scalar };
    1,277 ( 0.00%)          if niche.available(cx) > 0 { Some(niche) } else { None }
       42 ( 0.00%)      }
        .           
        .               pub fn available<C: HasDataLayout>(&self, cx: &C) -> u128 {
        .                   let Scalar { value, valid_range: v } = self.scalar;
        .                   let size = value.size(cx);
      214 ( 0.00%)          assert!(size.bits() <= 128);
        .                   let max_value = size.unsigned_int_max();
        .           
        .                   // Find out how many values are outside the valid range.
        .                   let niche = v.end.wrapping_add(1)..v.start;
      103 ( 0.00%)          niche.end.wrapping_sub(niche.start) & max_value
        .               }
        .           
        .               pub fn reserve<C: HasDataLayout>(&self, cx: &C, count: u128) -> Option<(u128, Scalar)> {
        .                   assert!(count > 0);
        .           
        .                   let Scalar { value, valid_range: v } = self.scalar;
        .                   let size = value.size(cx);
        .                   assert!(size.bits() <= 128);
-- line 1099 ----------------------------------------
-- line 1144 ----------------------------------------
        .                           move_start(v)
        .                       } else {
        .                           move_end(v)
        .                       }
        .                   }
        .               }
        .           }
        .           
    6,650 ( 0.00%)  #[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]
        .           pub struct Layout {
        .               /// Says where the fields are located within the layout.
        .               pub fields: FieldsShape,
        .           
        .               /// Encodes information about multi-variant layouts.
        .               /// Even with `Multiple` variants, a layout still has its own fields! Those are then
        .               /// shared between all variants. One of them will be the discriminant,
        .               /// but e.g. generators can have more.
        .               ///
        .               /// To access all fields of this layout, both `fields` and the fields of the active variant
        .               /// must be taken into account.
       45 ( 0.00%)      pub variants: Variants,
        .           
        .               /// The `abi` defines how this data is passed between functions, and it defines
        .               /// value restrictions via `valid_range`.
        .               ///
        .               /// Note that this is entirely orthogonal to the recursive structure defined by
        .               /// `variants` and `fields`; for example, `ManuallyDrop<Result<isize, isize>>` has
        .               /// `Abi::ScalarPair`! So, even with non-`Aggregate` `abi`, `fields` and `variants`
        .               /// have to be taken into account to find all fields of this layout.
       85 ( 0.00%)      pub abi: Abi,
        .           
        .               /// The leaf scalar with the largest number of invalid values
        .               /// (i.e. outside of its `valid_range`), if it exists.
      373 ( 0.00%)      pub largest_niche: Option<Niche>,
        .           
    1,379 ( 0.00%)      pub align: AbiAndPrefAlign,
      344 ( 0.00%)      pub size: Size,
        .           }
        .           
        .           impl Layout {
      438 ( 0.00%)      pub fn scalar<C: HasDataLayout>(cx: &C, scalar: Scalar) -> Self {
      438 ( 0.00%)          let largest_niche = Niche::from_scalar(cx, Size::ZERO, scalar);
        .                   let size = scalar.value.size(cx);
        .                   let align = scalar.value.align(cx);
    1,533 ( 0.00%)          Layout {
        .                       variants: Variants::Single { index: VariantIdx::new(0) },
        .                       fields: FieldsShape::Primitive,
      438 ( 0.00%)              abi: Abi::Scalar(scalar),
      292 ( 0.00%)              largest_niche,
        .                       size,
        .                       align,
        .                   }
      584 ( 0.00%)      }
        .           }
        .           
        .           /// The layout of a type, alongside the type itself.
        .           /// Provides various type traversal APIs (e.g., recursing into fields).
        .           ///
        .           /// Note that the layout is NOT guaranteed to always be identical
        .           /// to that obtained from `layout_of(ty)`, as we need to produce
        .           /// layouts for which Rust types do not exist, such as enum variants
        .           /// or synthetic fields of enums (i.e., discriminants) and fat pointers.
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable_Generic)]
        .           pub struct TyAndLayout<'a, Ty> {
   60,541 ( 0.01%)      pub ty: Ty,
  122,334 ( 0.01%)      pub layout: &'a Layout,
        .           }
        .           
        .           impl<'a, Ty> Deref for TyAndLayout<'a, Ty> {
        .               type Target = &'a Layout;
        .               fn deref(&self) -> &&'a Layout {
        4 ( 0.00%)          &self.layout
        .               }
        .           }
        .           
       34 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub enum PointerKind {
        .               /// Most general case, we know no restrictions to tell LLVM.
        .               Shared,
        .           
        .               /// `&T` where `T` contains no `UnsafeCell`, is `noalias` and `readonly`.
        .               Frozen,
        .           
        .               /// `&mut T` which is `noalias` but not `readonly`.
-- line 1227 ----------------------------------------
-- line 1255 ----------------------------------------
        .               ) -> Option<PointeeInfo>;
        .           }
        .           
        .           impl<'a, Ty> TyAndLayout<'a, Ty> {
        .               pub fn for_variant<C>(self, cx: &C, variant_index: VariantIdx) -> Self
        .               where
        .                   Ty: TyAbiInterface<'a, C>,
        .               {
       65 ( 0.00%)          Ty::ty_and_layout_for_variant(self, cx, variant_index)
        .               }
        .           
        .               pub fn field<C>(self, cx: &C, i: usize) -> Self
        .               where
        .                   Ty: TyAbiInterface<'a, C>,
        .               {
  117,891 ( 0.01%)          Ty::ty_and_layout_field(self, cx, i)
        .               }
        .           
        .               pub fn pointee_info_at<C>(self, cx: &C, offset: Size) -> Option<PointeeInfo>
        .               where
        .                   Ty: TyAbiInterface<'a, C>,
        .               {
      150 ( 0.00%)          Ty::ty_and_layout_pointee_info_at(self, cx, offset)
        .               }
        .           }
        .           
        .           impl<'a, Ty> TyAndLayout<'a, Ty> {
        .               /// Returns `true` if the layout corresponds to an unsized type.
        .               pub fn is_unsized(&self) -> bool {
   29,727 ( 0.00%)          self.abi.is_unsized()
        .               }
        .           
        .               /// Returns `true` if the type is a ZST and not unsized.
        .               pub fn is_zst(&self) -> bool {
  153,030 ( 0.02%)          match self.abi {
        .                       Abi::Scalar(_) | Abi::ScalarPair(..) | Abi::Vector { .. } => false,
        .                       Abi::Uninhabited => self.size.bytes() == 0,
      154 ( 0.00%)              Abi::Aggregate { sized } => sized && self.size.bytes() == 0,
        .                   }
       56 ( 0.00%)      }
        .           
        .               /// Determines if this type permits "raw" initialization by just transmuting some
        .               /// memory into an instance of `T`.
        .               /// `zero` indicates if the memory is zero-initialized, or alternatively
        .               /// left entirely uninitialized.
        .               /// This is conservative: in doubt, it will answer `true`.
        .               ///
        .               /// FIXME: Once we removed all the conservatism, we could alternatively
-- line 1302 ----------------------------------------

  568,356 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_target/src/abi/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs
--------------------------------------------------------------------------------
Ir               

-- line 40 ----------------------------------------
      .           
      .           use std::collections::hash_map::Entry;
      .           use std::iter;
      .           use std::slice;
      .           
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
      .               /// Produces warning on the given node, if the current point in the
      .               /// function is unreachable, and there hasn't been another warning.
531,288 ( 0.06%)      pub(in super::super) fn warn_if_unreachable(&self, id: hir::HirId, span: Span, kind: &str) {
      .                   // FIXME: Combine these two 'if' expressions into one once
      .                   // let chains are implemented
118,182 ( 0.01%)          if let Diverges::Always { span: orig_span, custom_note } = self.diverges.get() {
      .                       // If span arose from a desugaring of `if` or `while`, then it is the condition itself,
      .                       // which diverges, that we are about to lint on. This gives suboptimal diagnostics.
      .                       // Instead, stop here so that the `if`- or `while`-expression's block is linted instead.
      .                       if !span.is_desugaring(DesugaringKind::CondTemporary)
      .                           && !span.is_desugaring(DesugaringKind::Async)
      .                           && !orig_span.is_desugaring(DesugaringKind::Await)
      .                       {
      .                           self.diverges.set(Diverges::WarnedAlways);
-- line 59 ----------------------------------------
-- line 68 ----------------------------------------
      .                                       orig_span,
      .                                       custom_note
      .                                           .unwrap_or("any code following this expression is unreachable"),
      .                                   )
      .                                   .emit();
      .                           })
      .                       }
      .                   }
413,224 ( 0.04%)      }
      .           
      .               /// Resolves type and const variables in `ty` if possible. Unlike the infcx
      .               /// version (resolve_vars_if_possible), this version will
      .               /// also select obligations if it seems useful, in an effort
      .               /// to get more type information.
412,601 ( 0.04%)      pub(in super::super) fn resolve_vars_with_obligations(&self, ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.resolve_vars_with_obligations_and_mutate_fulfillment(ty, |_| {})
471,544 ( 0.05%)      }
      .           
      .               #[instrument(skip(self, mutate_fulfillment_errors), level = "debug")]
      .               pub(in super::super) fn resolve_vars_with_obligations_and_mutate_fulfillment(
      .                   &self,
      .                   mut ty: Ty<'tcx>,
      .                   mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),
      .               ) -> Ty<'tcx> {
      .                   // No Infer()? Nothing needs doing.
 59,000 ( 0.01%)          if !ty.has_infer_types_or_consts() {
      .                       debug!("no inference var, nothing needs doing");
      .                       return ty;
      .                   }
      .           
      .                   // If `ty` is a type variable, see whether we already know what it is.
      .                   ty = self.resolve_vars_if_possible(ty);
     11 ( 0.00%)          if !ty.has_infer_types_or_consts() {
      .                       debug!(?ty);
      .                       return ty;
      .                   }
      .           
      .                   // If not, try resolving pending obligations as much as
      .                   // possible. This can help substantially when there are
      .                   // indirect dependencies that don't seem worth tracking
      .                   // precisely.
-- line 108 ----------------------------------------
-- line 129 ----------------------------------------
      .                   let mut deferred_call_resolutions = self.deferred_call_resolutions.borrow_mut();
      .                   deferred_call_resolutions.remove(&closure_def_id).unwrap_or_default()
      .               }
      .           
      .               pub fn tag(&self) -> String {
      .                   format!("{:p}", self)
      .               }
      .           
    490 ( 0.00%)      pub fn local_ty(&self, span: Span, nid: hir::HirId) -> LocalTy<'tcx> {
      .                   self.locals.borrow().get(&nid).cloned().unwrap_or_else(|| {
      .                       span_bug!(span, "no type for local variable {}", self.tcx.hir().node_to_string(nid))
      .                   })
    588 ( 0.00%)      }
      .           
      .               #[inline]
207,718 ( 0.02%)      pub fn write_ty(&self, id: hir::HirId, ty: Ty<'tcx>) {
      .                   debug!("write_ty({:?}, {:?}) in fcx {}", id, self.resolve_vars_if_possible(ty), self.tag());
 59,494 ( 0.01%)          self.typeck_results.borrow_mut().node_types_mut().insert(id, ty);
      .           
 29,747 ( 0.00%)          if ty.references_error() {
      .                       self.has_errors.set(true);
      .                       self.set_tainted_by_errors();
      .                   }
237,392 ( 0.02%)      }
      .           
      .               pub fn write_field_index(&self, hir_id: hir::HirId, index: usize) {
      .                   self.typeck_results.borrow_mut().field_indices_mut().insert(hir_id, index);
      .               }
      .           
      .               pub(in super::super) fn write_resolution(
      .                   &self,
      .                   hir_id: hir::HirId,
      .                   r: Result<(DefKind, DefId), ErrorReported>,
      .               ) {
     31 ( 0.00%)          self.typeck_results.borrow_mut().type_dependent_defs_mut().insert(hir_id, r);
      .               }
      .           
    279 ( 0.00%)      pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {
      .                   debug!("write_method_call(hir_id={:?}, method={:?})", hir_id, method);
     62 ( 0.00%)          self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));
    217 ( 0.00%)          self.write_substs(hir_id, method.substs);
      .           
      .                   // When the method is confirmed, the `method.substs` includes
      .                   // parameters from not just the method, but also the impl of
      .                   // the method -- in particular, the `Self` type will be fully
      .                   // resolved. However, those are not something that the "user
      .                   // specified" -- i.e., those types come from the inferred type
      .                   // of the receiver, not something the user wrote. So when we
      .                   // create the user-substs, we want to replace those earlier
      .                   // types with just the types that the user actually wrote --
      .                   // that is, those that appear on the *method itself*.
      .                   //
      .                   // As an example, if the user wrote something like
      .                   // `foo.bar::<u32>(...)` -- the `Self` type here will be the
      .                   // type of `foo` (possibly adjusted), but we don't want to
      .                   // include that. We want just the `[_, u32]` part.
     31 ( 0.00%)          if !method.substs.is_empty() {
     31 ( 0.00%)              let method_generics = self.tcx.generics_of(method.def_id);
     62 ( 0.00%)              if !method_generics.params.is_empty() {
      .                           let user_type_annotation = self.infcx.probe(|_| {
      .                               let user_substs = UserSubsts {
      .                                   substs: InternalSubsts::for_item(self.tcx, method.def_id, |param, _| {
      .                                       let i = param.index as usize;
      .                                       if i < method_generics.parent_count {
      .                                           self.infcx.var_for_def(DUMMY_SP, param)
      .                                       } else {
      .                                           method.substs[i]
-- line 195 ----------------------------------------
-- line 203 ----------------------------------------
      .                                   user_substs,
      .                               ))
      .                           });
      .           
      .                           debug!("write_method_call: user_type_annotation={:?}", user_type_annotation);
      .                           self.write_user_type_annotation(hir_id, user_type_annotation);
      .                       }
      .                   }
    248 ( 0.00%)      }
      .           
    522 ( 0.00%)      pub fn write_substs(&self, node_id: hir::HirId, substs: SubstsRef<'tcx>) {
     87 ( 0.00%)          if !substs.is_empty() {
      .                       debug!("write_substs({:?}, {:?}) in fcx {}", node_id, substs, self.tag());
      .           
     62 ( 0.00%)              self.typeck_results.borrow_mut().node_substs_mut().insert(node_id, substs);
      .                   }
    609 ( 0.00%)      }
      .           
      .               /// Given the substs that we just converted from the HIR, try to
      .               /// canonicalize them and store them as user-given substitutions
      .               /// (i.e., substitutions that must be respected by the NLL check).
      .               ///
      .               /// This should be invoked **before any unifications have
      .               /// occurred**, so that annotations like `Vec<_>` are preserved
      .               /// properly.
-- line 227 ----------------------------------------
-- line 258 ----------------------------------------
      .                           .borrow_mut()
      .                           .user_provided_types_mut()
      .                           .insert(hir_id, canonical_user_type_annotation);
      .                   } else {
      .                       debug!("skipping identity substs");
      .                   }
      .               }
      .           
  4,930 ( 0.00%)      #[instrument(skip(self, expr), level = "debug")]
      .               pub fn apply_adjustments(&self, expr: &hir::Expr<'_>, adj: Vec<Adjustment<'tcx>>) {
      .                   debug!("expr = {:#?}", expr);
      .           
    290 ( 0.00%)          if adj.is_empty() {
      .                       return;
      .                   }
      .           
      .                   for a in &adj {
    178 ( 0.00%)              if let Adjust::NeverToAny = a.kind {
      .                           if a.target.is_ty_var() {
      .                               self.diverging_type_vars.borrow_mut().insert(a.target);
      .                               debug!("apply_adjustments: adding `{:?}` as diverging type var", a.target);
      .                           }
      .                       }
      .                   }
      .           
      .                   let autoborrow_mut = adj.iter().any(|adj| {
    364 ( 0.00%)              matches!(
     31 ( 0.00%)                  adj,
      .                           &Adjustment {
      .                               kind: Adjust::Borrow(AutoBorrow::Ref(_, AutoBorrowMutability::Mut { .. })),
      .                               ..
      .                           }
      .                       )
      .                   });
      .           
    186 ( 0.00%)          match self.typeck_results.borrow_mut().adjustments_mut().entry(expr.hir_id) {
      .                       Entry::Vacant(entry) => {
      .                           entry.insert(adj);
      .                       }
      .                       Entry::Occupied(mut entry) => {
      .                           debug!(" - composing on top of {:?}", entry.get());
      .                           match (&entry.get()[..], &adj[..]) {
      .                               // Applying any adjustment on top of a NeverToAny
      .                               // is a valid NeverToAny adjustment, because it can't
-- line 301 ----------------------------------------
-- line 324 ----------------------------------------
      .                           };
      .                           *entry.get_mut() = adj;
      .                       }
      .                   }
      .           
      .                   // If there is an mutable auto-borrow, it is equivalent to `&mut <expr>`.
      .                   // In this case implicit use of `Deref` and `Index` within `<expr>` should
      .                   // instead be `DerefMut` and `IndexMut`, so fix those up.
     93 ( 0.00%)          if autoborrow_mut {
      .                       self.convert_place_derefs_to_mutable(expr);
      .                   }
      .               }
      .           
      .               /// Basically whenever we are converting from a type scheme into
      .               /// the fn body space, we always want to normalize associated
      .               /// types as well. This function combines the two.
      .               fn instantiate_type_scheme<T>(&self, span: Span, substs: SubstsRef<'tcx>, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   debug!("instantiate_type_scheme(value={:?}, substs={:?})", value, substs);
     56 ( 0.00%)          let value = value.subst(self.tcx, substs);
      .                   let result = self.normalize_associated_types_in(span, value);
      .                   debug!("instantiate_type_scheme = {:?}", result);
      .                   result
      .               }
      .           
      .               /// As `instantiate_type_scheme`, but for the bounds found in a
      .               /// generic type scheme.
      .               pub(in super::super) fn instantiate_bounds(
      .                   &self,
      .                   span: Span,
      .                   def_id: DefId,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> (ty::InstantiatedPredicates<'tcx>, Vec<Span>) {
     56 ( 0.00%)          let bounds = self.tcx.predicates_of(def_id);
      .                   let spans: Vec<Span> = bounds.predicates.iter().map(|(_, span)| *span).collect();
    224 ( 0.00%)          let result = bounds.instantiate(self.tcx, substs);
      .                   let result = self.normalize_associated_types_in(span, result);
      .                   debug!(
      .                       "instantiate_bounds(bounds={:?}, substs={:?}) = {:?}, {:?}",
      .                       bounds, substs, result, spans,
      .                   );
    336 ( 0.00%)          (result, spans)
      .               }
      .           
      .               /// Replaces the opaque types from the given value with type variables,
      .               /// and records the `OpaqueTypeMap` for later use during writeback. See
      .               /// `InferCtxt::instantiate_opaque_types` for more details.
    288 ( 0.00%)      #[instrument(skip(self, value_span), level = "debug")]
    252 ( 0.00%)      pub(in super::super) fn instantiate_opaque_types_from_value<T: TypeFoldable<'tcx>>(
      .                   &self,
      .                   value: T,
      .                   value_span: Span,
      .               ) -> T {
      .                   self.register_infer_ok_obligations(self.instantiate_opaque_types(
     36 ( 0.00%)              self.body_id,
     36 ( 0.00%)              self.param_env,
      .                       value,
      .                       value_span,
      .                   ))
      .               }
      .           
      .               /// Convenience method which tracks extra diagnostic information for normalization
      .               /// that occurs as a result of WF checking. The `hir_id` is the `HirId` of the hir item
      .               /// whose type is being wf-checked - this is used to construct a more precise span if
-- line 389 ----------------------------------------
-- line 395 ----------------------------------------
      .                   &self,
      .                   span: Span,
      .                   value: T,
      .                   loc: WellFormedLoc,
      .               ) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
    527 ( 0.00%)          self.inh.normalize_associated_types_in_with_cause(
    314 ( 0.00%)              ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(Some(loc))),
    572 ( 0.00%)              self.param_env,
      .                       value,
      .                   )
      .               }
      .           
      .               pub(in super::super) fn normalize_associated_types_in<T>(&self, span: Span, value: T) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
  6,878 ( 0.00%)          self.inh.normalize_associated_types_in(span, self.body_id, self.param_env, value)
      .               }
      .           
      .               pub(in super::super) fn normalize_associated_types_in_as_infer_ok<T>(
      .                   &self,
      .                   span: Span,
      .                   value: T,
      .               ) -> InferOk<'tcx, T>
      .               where
-- line 422 ----------------------------------------
-- line 431 ----------------------------------------
      .           
      .               pub fn require_type_meets(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   span: Span,
      .                   code: traits::ObligationCauseCode<'tcx>,
      .                   def_id: DefId,
      .               ) {
  2,371 ( 0.00%)          self.register_bound(ty, def_id, traits::ObligationCause::new(span, self.body_id, code));
      .               }
      .           
    808 ( 0.00%)      pub fn require_type_is_sized(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   span: Span,
      .                   code: traits::ObligationCauseCode<'tcx>,
      .               ) {
    185 ( 0.00%)          if !ty.references_error() {
    925 ( 0.00%)              let lang_item = self.tcx.require_lang_item(LangItem::Sized, None);
      .                       self.require_type_meets(ty, span, code, lang_item);
      .                   }
    808 ( 0.00%)      }
      .           
    420 ( 0.00%)      pub fn require_type_is_sized_deferred(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   span: Span,
      .                   code: traits::ObligationCauseCode<'tcx>,
      .               ) {
     84 ( 0.00%)          if !ty.references_error() {
    672 ( 0.00%)              self.deferred_sized_obligations.borrow_mut().push((ty, span, code));
      .                   }
    420 ( 0.00%)      }
      .           
  1,205 ( 0.00%)      pub fn register_bound(
      .                   &self,
      .                   ty: Ty<'tcx>,
      .                   def_id: DefId,
      .                   cause: traits::ObligationCause<'tcx>,
      .               ) {
    241 ( 0.00%)          if !ty.references_error() {
  1,687 ( 0.00%)              self.fulfillment_cx.borrow_mut().register_bound(
      .                           self,
    241 ( 0.00%)                  self.param_env,
      .                           ty,
      .                           def_id,
    964 ( 0.00%)                  cause,
      .                       );
      .                   }
  1,205 ( 0.00%)      }
      .           
      .               pub fn to_ty(&self, ast_t: &hir::Ty<'_>) -> Ty<'tcx> {
      .                   let t = <dyn AstConv<'_>>::ast_ty_to_ty(self, ast_t);
      .                   self.register_wf_obligation(t.into(), ast_t.span, traits::MiscObligation);
      .                   t
      .               }
      .           
      .               pub fn to_ty_saving_user_provided_ty(&self, ast_ty: &hir::Ty<'_>) -> Ty<'tcx> {
-- line 488 ----------------------------------------
-- line 543 ----------------------------------------
      .               // sufficiently enforced with erased regions. =)
      .               fn can_contain_user_lifetime_bounds<T>(t: T) -> bool
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
      .                   t.has_free_regions() || t.has_projections() || t.has_infer_types()
      .               }
      .           
208,572 ( 0.02%)      pub fn node_ty(&self, id: hir::HirId) -> Ty<'tcx> {
297,960 ( 0.03%)          match self.typeck_results.borrow().node_types().get(id) {
 59,592 ( 0.01%)              Some(&t) => t,
      .                       None if self.is_tainted_by_errors() => self.tcx.ty_error(),
      .                       None => {
      .                           bug!(
      .                               "no type for node {}: {} in fcx {}",
      .                               id,
      .                               self.tcx.hir().node_to_string(id),
      .                               self.tag()
      .                           );
      .                       }
      .                   }
178,776 ( 0.02%)      }
      .           
      .               pub fn node_ty_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
      .                   match self.typeck_results.borrow().node_types().get(id) {
      .                       Some(&t) => Some(t),
      .                       None if self.is_tainted_by_errors() => Some(self.tcx.ty_error()),
      .                       None => None,
      .                   }
      .               }
      .           
      .               /// Registers an obligation for checking later, during regionck, that `arg` is well-formed.
  3,050 ( 0.00%)      pub fn register_wf_obligation(
      .                   &self,
      .                   arg: subst::GenericArg<'tcx>,
      .                   span: Span,
      .                   code: traits::ObligationCauseCode<'tcx>,
      .               ) {
      .                   // WF obligations never themselves fail, so no real need to give a detailed cause:
  2,745 ( 0.00%)          let cause = traits::ObligationCause::new(span, self.body_id, code);
    305 ( 0.00%)          self.register_predicate(traits::Obligation::new(
  1,220 ( 0.00%)              cause,
    305 ( 0.00%)              self.param_env,
  1,220 ( 0.00%)              ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx),
      .                   ));
  2,440 ( 0.00%)      }
      .           
      .               /// Registers obligations that all `substs` are well-formed.
      .               pub fn add_wf_bounds(&self, substs: SubstsRef<'tcx>, expr: &hir::Expr<'_>) {
    740 ( 0.00%)          for arg in substs.iter().filter(|arg| {
      .                       matches!(arg.unpack(), GenericArgKind::Type(..) | GenericArgKind::Const(..))
      .                   }) {
    192 ( 0.00%)              self.register_wf_obligation(arg, expr.span, traits::MiscObligation);
      .                   }
      .               }
      .           
      .               // FIXME(arielb1): use this instead of field.ty everywhere
      .               // Only for fields! Returns <none> for methods>
      .               // Indifferent to privacy flags
      .               pub fn field_ty(
      .                   &self,
      .                   span: Span,
      .                   field: &'tcx ty::FieldDef,
      .                   substs: SubstsRef<'tcx>,
      .               ) -> Ty<'tcx> {
      .                   self.normalize_associated_types_in(span, &field.ty(self.tcx, substs))
      .               }
      .           
    576 ( 0.00%)      pub(in super::super) fn resolve_generator_interiors(&self, def_id: DefId) {
      .                   let mut generators = self.deferred_generator_interiors.borrow_mut();
    448 ( 0.00%)          for (body_id, interior, kind) in generators.drain(..) {
      .                       self.select_obligations_where_possible(false, |_| {});
      .                       crate::check::generator_interior::resolve_interior(
      .                           self, def_id, body_id, interior, kind,
      .                       );
      .                   }
    512 ( 0.00%)      }
      .           
  3,942 ( 0.00%)      #[instrument(skip(self), level = "debug")]
      .               pub(in super::super) fn select_all_obligations_or_error(&self) {
  1,314 ( 0.00%)          let errors = self.fulfillment_cx.borrow_mut().select_all_or_error(&self);
      .           
    438 ( 0.00%)          if !errors.is_empty() {
      .                       self.report_fulfillment_errors(&errors, self.inh.body_id, false);
      .                   }
      .               }
      .           
      .               /// Select as many obligations as we can at present.
    320 ( 0.00%)      pub(in super::super) fn select_obligations_where_possible(
      .                   &self,
      .                   fallback_has_occurred: bool,
      .                   mutate_fulfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),
      .               ) {
    620 ( 0.00%)          let mut result = self.fulfillment_cx.borrow_mut().select_where_possible(self);
    187 ( 0.00%)          if !result.is_empty() {
      .                       mutate_fulfillment_errors(&mut result);
      .                       self.report_fulfillment_errors(&result, self.inh.body_id, fallback_has_occurred);
      .                   }
    384 ( 0.00%)      }
      .           
      .               /// For the overloaded place expressions (`*x`, `x[3]`), the trait
      .               /// returns a type of `&T`, but the actual type we assign to the
      .               /// *expression* is `T`. So this function just peels off the return
      .               /// type by one layer to yield `T`.
      .               pub(in super::super) fn make_overloaded_place_return_type(
      .                   &self,
      .                   method: MethodCallee<'tcx>,
-- line 649 ----------------------------------------
-- line 739 ----------------------------------------
      .               #[instrument(skip(self, call_span), level = "debug")]
      .               pub(in super::super) fn expected_inputs_for_expected_output(
      .                   &self,
      .                   call_span: Span,
      .                   expected_ret: Expectation<'tcx>,
      .                   formal_ret: Ty<'tcx>,
      .                   formal_args: &[Ty<'tcx>],
      .               ) -> Vec<Ty<'tcx>> {
    236 ( 0.00%)          let formal_ret = self.resolve_vars_with_obligations(formal_ret);
      .                   let ret_ty = match expected_ret.only_has_type(self) {
     58 ( 0.00%)              Some(ret) => ret,
      .                       None => return Vec::new(),
      .                   };
     58 ( 0.00%)          let expect_args = self
    638 ( 0.00%)              .fudge_inference_if_ok(|| {
      .                           // Attempt to apply a subtyping relationship between the formal
      .                           // return type (likely containing type variables if the function
      .                           // is polymorphic) and the expected return type.
      .                           // No argument expectations are produced if unification fails.
     58 ( 0.00%)                  let origin = self.misc(call_span);
    232 ( 0.00%)                  let ures = self.at(&origin, self.param_env).sup(ret_ty, &formal_ret);
      .           
      .                           // FIXME(#27336) can't use ? here, Try::from_error doesn't default
      .                           // to identity so the resulting type is not constrained.
    174 ( 0.00%)                  match ures {
      .                               Ok(ok) => {
      .                                   // Process any obligations locally as much as
      .                                   // we can.  We don't care if some things turn
      .                                   // out unconstrained or ambiguous, as we're
      .                                   // just trying to get hints here.
      .                                   let errors = self.save_and_restore_in_snapshot_flag(|_| {
    348 ( 0.00%)                              let mut fulfill = <dyn TraitEngine<'_>>::new(self.tcx);
    232 ( 0.00%)                              for obligation in ok.obligations {
      .                                           fulfill.register_predicate_obligation(self, obligation);
      .                                       }
    116 ( 0.00%)                              fulfill.select_where_possible(self)
      .                                   });
      .           
     58 ( 0.00%)                          if !errors.is_empty() {
      .                                       return Err(());
      .                                   }
      .                               }
      .                               Err(_) => return Err(()),
      .                           }
      .           
      .                           // Record all the argument types, with the substitutions
      .                           // produced from the above subtyping unification.
    174 ( 0.00%)                  Ok(formal_args.iter().map(|&ty| self.resolve_vars_if_possible(ty)).collect())
      .                       })
      .                       .unwrap_or_default();
      .                   debug!(?formal_args, ?formal_ret, ?expect_args, ?expected_ret);
    174 ( 0.00%)          expect_args
      .               }
      .           
      .               pub(in super::super) fn resolve_lang_item_path(
      .                   &self,
      .                   lang_item: hir::LangItem,
      .                   span: Span,
      .                   hir_id: hir::HirId,
      .                   expr_hir_id: Option<hir::HirId>,
-- line 798 ----------------------------------------
-- line 826 ----------------------------------------
      .                           _ => traits::ItemObligation(def_id),
      .                       },
      .                   );
      .                   (Res::Def(def_kind, def_id), ty)
      .               }
      .           
      .               /// Resolves an associated value path into a base type and associated constant, or method
      .               /// resolution. The newly resolved definition is written into `type_dependent_defs`.
  1,170 ( 0.00%)      pub fn resolve_ty_and_res_fully_qualified_call(
      .                   &self,
      .                   qpath: &'tcx QPath<'tcx>,
      .                   hir_id: hir::HirId,
      .                   span: Span,
      .               ) -> (Res, Option<Ty<'tcx>>, &'tcx [hir::PathSegment<'tcx>]) {
      .                   debug!(
      .                       "resolve_ty_and_res_fully_qualified_call: qpath={:?} hir_id={:?} span={:?}",
      .                       qpath, hir_id, span
      .                   );
    351 ( 0.00%)          let (ty, qself, item_segment) = match *qpath {
      .                       QPath::Resolved(ref opt_qself, ref path) => {
    819 ( 0.00%)                  return (
    585 ( 0.00%)                      path.res,
      .                               opt_qself.as_ref().map(|qself| self.to_ty(qself)),
    117 ( 0.00%)                      path.segments,
      .                           );
      .                       }
      .                       QPath::TypeRelative(ref qself, ref segment) => {
      .                           // Don't use `self.to_ty`, since this will register a WF obligation.
      .                           // If we're trying to call a non-existent method on a trait
      .                           // (e.g. `MyTrait::missing_method`), then resolution will
      .                           // give us a `QPath::TypeRelative` with a trait object as
      .                           // `qself`. In that case, we want to avoid registering a WF obligation
-- line 857 ----------------------------------------
-- line 910 ----------------------------------------
      .           
      .                   // Write back the new resolution.
      .                   self.write_resolution(hir_id, result);
      .                   (
      .                       result.map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
      .                       Some(ty),
      .                       slice::from_ref(&**item_segment),
      .                   )
  1,053 ( 0.00%)      }
      .           
      .               /// Given a function `Node`, return its `FnDecl` if it exists, or `None` otherwise.
      .               pub(in super::super) fn get_node_fn_decl(
      .                   &self,
      .                   node: Node<'tcx>,
      .               ) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident, bool)> {
      .                   match node {
      .                       Node::Item(&hir::Item { ident, kind: hir::ItemKind::Fn(ref sig, ..), .. }) => {
-- line 926 ----------------------------------------
-- line 1115 ----------------------------------------
      .                   } else {
      .                       last_stmt.span.with_lo(last_stmt.span.hi() - BytePos(1))
      .                   };
      .                   Some((span, needs_box))
      .               }
      .           
      .               // Instantiates the given path, which must refer to an item with the given
      .               // number of type parameters and type.
    936 ( 0.00%)      #[instrument(skip(self, span), level = "debug")]
  1,404 ( 0.00%)      pub fn instantiate_value_path(
      .                   &self,
      .                   segments: &[hir::PathSegment<'_>],
      .                   self_ty: Option<Ty<'tcx>>,
      .                   res: Res,
      .                   span: Span,
      .                   hir_id: hir::HirId,
      .               ) -> (Ty<'tcx>, Res) {
    351 ( 0.00%)          let tcx = self.tcx;
      .           
    697 ( 0.00%)          let path_segs = match res {
      .                       Res::Local(_) | Res::SelfCtor(_) => vec![],
  1,008 ( 0.00%)              Res::Def(kind, def_id) => <dyn AstConv<'_>>::def_ids_for_value_path_segments(
      .                           self, segments, self_ty, kind, def_id,
      .                       ),
      .                       _ => bug!("instantiate_value_path on {:?}", res),
      .                   };
      .           
      .                   let mut user_self_ty = None;
    234 ( 0.00%)          let mut is_alias_variant_ctor = false;
    570 ( 0.00%)          match res {
      .                       Res::Def(DefKind::Ctor(CtorOf::Variant, _), _)
      .                           if let Some(self_ty) = self_ty =>
      .                       {
      .                           let adt_def = self_ty.ty_adt_def().unwrap();
      .                           user_self_ty = Some(UserSelfTy { impl_def_id: adt_def.did, self_ty });
      .                           is_alias_variant_ctor = true;
      .                       }
      .                       Res::Def(DefKind::AssocFn | DefKind::AssocConst, def_id) => {
-- line 1152 ----------------------------------------
-- line 1173 ----------------------------------------
      .                   }
      .           
      .                   // Now that we have categorized what space the parameters for each
      .                   // segment belong to, let's sort out the parameters that the user
      .                   // provided (if any) into their appropriate spaces. We'll also report
      .                   // errors if type parameters are provided in an inappropriate place.
      .           
      .                   let generic_segs: FxHashSet<_> = path_segs.iter().map(|PathSeg(_, index)| index).collect();
    468 ( 0.00%)          let generics_has_err = <dyn AstConv<'_>>::prohibit_generics(
      .                       self,
    145 ( 0.00%)              segments.iter().enumerate().filter_map(|(index, seg)| {
    402 ( 0.00%)                  if !generic_segs.contains(&index) || is_alias_variant_ctor {
      .                               Some(seg)
      .                           } else {
      .                               None
      .                           }
      .                       }),
      .                   );
      .           
    534 ( 0.00%)          if let Res::Local(hid) = res {
    122 ( 0.00%)              let ty = self.local_ty(span, hid).decl_ty;
      .                       let ty = self.normalize_associated_types_in(span, ty);
    244 ( 0.00%)              self.write_ty(hir_id, ty);
    366 ( 0.00%)              return (ty, res);
      .                   }
      .           
    280 ( 0.00%)          if generics_has_err {
      .                       // Don't try to infer type parameters when prohibited generic arguments were given.
      .                       user_self_ty = None;
      .                   }
      .           
      .                   // Now we have to compare the types that the user *actually*
      .                   // provided against the types that were *expected*. If the user
      .                   // did not provide any types, then we want to substitute inference
      .                   // variables. If the user provided some types, we may still need
      .                   // to add defaults. If the user provided *too many* types, that's
      .                   // a problem.
      .           
      .                   let mut infer_args_for_err = FxHashSet::default();
      .           
      .                   let mut explicit_late_bound = ExplicitLateBound::No;
     56 ( 0.00%)          for &PathSeg(def_id, index) in &path_segs {
    504 ( 0.00%)              let seg = &segments[index];
      .                       let generics = tcx.generics_of(def_id);
      .           
      .                       // Argument-position `impl Trait` is treated as a normal generic
      .                       // parameter internally, but we don't allow users to specify the
      .                       // parameter's value explicitly, so we have to do some error-
      .                       // checking here.
    560 ( 0.00%)              let arg_count = <dyn AstConv<'_>>::check_generic_arg_count_for_call(
      .                           tcx,
      .                           span,
      .                           def_id,
      .                           &generics,
      .                           seg,
      .                           IsMethodCall::No,
      .                       );
      .           
    336 ( 0.00%)              if let ExplicitLateBound::Yes = arg_count.explicit_late_bound {
      .                           explicit_late_bound = ExplicitLateBound::Yes;
      .                       }
      .           
    280 ( 0.00%)              if let Err(GenericArgCountMismatch { reported: Some(_), .. }) = arg_count.correct {
      .                           infer_args_for_err.insert(index);
      .                           self.set_tainted_by_errors(); // See issue #53251.
      .                       }
      .                   }
      .           
      .                   let has_self = path_segs
      .                       .last()
    112 ( 0.00%)              .map(|PathSeg(def_id, _)| tcx.generics_of(*def_id).has_self)
      .                       .unwrap_or(false);
      .           
    784 ( 0.00%)          let (res, self_ctor_substs) = if let Res::SelfCtor(impl_def_id) = res {
      .                       let ty = self.normalize_ty(span, tcx.at(span).type_of(impl_def_id));
      .                       match *ty.kind() {
      .                           ty::Adt(adt_def, substs) if adt_def.has_ctor() => {
      .                               let variant = adt_def.non_enum_variant();
      .                               let ctor_def_id = variant.ctor_def_id.unwrap();
      .                               (
      .                                   Res::Def(DefKind::Ctor(CtorOf::Struct, variant.ctor_kind), ctor_def_id),
      .                                   Some(substs),
-- line 1254 ----------------------------------------
-- line 1275 ----------------------------------------
      .                                   }
      .                               }
      .                               err.emit();
      .           
      .                               return (tcx.ty_error(), res);
      .                           }
      .                       }
      .                   } else {
    560 ( 0.00%)              (res, None)
      .                   };
      .                   let def_id = res.def_id();
      .           
      .                   // The things we are substituting into the type should not contain
      .                   // escaping late-bound regions, and nor should the base type scheme.
      .                   let ty = tcx.type_of(def_id);
      .           
    280 ( 0.00%)          let arg_count = GenericArgCountResult {
    112 ( 0.00%)              explicit_late_bound,
     56 ( 0.00%)              correct: if infer_args_for_err.is_empty() {
      .                           Ok(())
      .                       } else {
      .                           Err(GenericArgCountMismatch::default())
      .                       },
      .                   };
      .           
      .                   struct CreateCtorSubstsContext<'a, 'tcx> {
      .                       fcx: &'a FnCtxt<'a, 'tcx>,
-- line 1301 ----------------------------------------
-- line 1304 ----------------------------------------
      .                       infer_args_for_err: &'a FxHashSet<usize>,
      .                       segments: &'a [hir::PathSegment<'a>],
      .                   }
      .                   impl<'tcx, 'a> CreateSubstsForGenericArgsCtxt<'a, 'tcx> for CreateCtorSubstsContext<'a, 'tcx> {
      .                       fn args_for_def_id(
      .                           &mut self,
      .                           def_id: DefId,
      .                       ) -> (Option<&'a hir::GenericArgs<'a>>, bool) {
    112 ( 0.00%)                  if let Some(&PathSeg(_, index)) =
    112 ( 0.00%)                      self.path_segs.iter().find(|&PathSeg(did, _)| *did == def_id)
      .                           {
      .                               // If we've encountered an `impl Trait`-related error, we're just
      .                               // going to infer the arguments for better error messages.
    336 ( 0.00%)                      if !self.infer_args_for_err.contains(&index) {
      .                                   // Check whether the user has provided generic arguments.
    448 ( 0.00%)                          if let Some(ref data) = self.segments[index].args {
      .                                       return (Some(data), self.segments[index].infer_args);
      .                                   }
      .                               }
    280 ( 0.00%)                      return (None, self.segments[index].infer_args);
      .                           }
      .           
      .                           (None, true)
      .                       }
      .           
      .                       fn provided_kind(
      .                           &mut self,
      .                           param: &ty::GenericParamDef,
-- line 1331 ----------------------------------------
-- line 1392 ----------------------------------------
      .                                       self.fcx.var_for_def(self.span, param)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   let substs = self_ctor_substs.unwrap_or_else(|| {
    728 ( 0.00%)              <dyn AstConv<'_>>::create_substs_for_generic_args(
      .                           tcx,
      .                           def_id,
      .                           &[],
      .                           has_self,
      .                           self_ty,
      .                           &arg_count,
    728 ( 0.00%)                  &mut CreateCtorSubstsContext {
      .                               fcx: self,
      .                               span,
      .                               path_segs: &path_segs,
      .                               infer_args_for_err: &infer_args_for_err,
      .                               segments,
      .                           },
      .                       )
      .                   });
      .                   assert!(!substs.has_escaping_bound_vars());
     56 ( 0.00%)          assert!(!ty.has_escaping_bound_vars());
      .           
      .                   // First, store the "user substs" for later.
    224 ( 0.00%)          self.write_user_type_annotation_from_substs(hir_id, def_id, substs, user_self_ty);
      .           
      .                   self.add_required_obligations(span, def_id, &substs);
      .           
      .                   // Substitute the values for the type parameters into the type of
      .                   // the referenced item.
      .                   let ty_substituted = self.instantiate_type_scheme(span, &substs, ty);
      .           
    168 ( 0.00%)          if let Some(UserSelfTy { impl_def_id, self_ty }) = user_self_ty {
      .                       // In the case of `Foo<T>::method` and `<Foo<T>>::method`, if `method`
      .                       // is inherent, there is no `Self` parameter; instead, the impl needs
      .                       // type parameters, which we can infer by unifying the provided `Self`
      .                       // with the substituted impl type.
      .                       // This also occurs for an enum variant on a type alias.
      .                       let ty = tcx.type_of(impl_def_id);
      .           
      .                       let impl_ty = self.instantiate_type_scheme(span, &substs, ty);
-- line 1436 ----------------------------------------
-- line 1445 ----------------------------------------
      .                                   impl_ty,
      .                               ),
      .                               );
      .                           }
      .                       }
      .                   }
      .           
      .                   debug!("instantiate_value_path: type of {:?} is {:?}", hir_id, ty_substituted);
    224 ( 0.00%)          self.write_substs(hir_id, substs);
      .           
    336 ( 0.00%)          (ty_substituted, res)
      .               }
      .           
      .               /// Add all the obligations that are required, substituting and normalized appropriately.
      .               crate fn add_required_obligations(&self, span: Span, def_id: DefId, substs: &SubstsRef<'tcx>) {
    168 ( 0.00%)          self.add_required_obligations_with_code(
      .                       span,
      .                       def_id,
      .                       substs,
    336 ( 0.00%)              traits::ItemObligation(def_id),
      .                   )
      .               }
      .           
  1,008 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, span, def_id, substs))]
      .               fn add_required_obligations_with_code(
      .                   &self,
      .                   span: Span,
      .                   def_id: DefId,
      .                   substs: &SubstsRef<'tcx>,
      .                   code: ObligationCauseCode<'tcx>,
      .               ) {
    168 ( 0.00%)          let (bounds, _) = self.instantiate_bounds(span, def_id, &substs);
      .           
  1,008 ( 0.00%)          for obligation in traits::predicates_for_generics(
    504 ( 0.00%)              traits::ObligationCause::new(span, self.body_id, code),
     56 ( 0.00%)              self.param_env,
    504 ( 0.00%)              bounds,
      .                   ) {
      .                       self.register_predicate(obligation);
      .                   }
      .               }
      .           
      .               /// Resolves `typ` by a single level if `typ` is a type variable.
      .               /// If no resolution is possible, then an error is reported.
      .               /// Numeric inference variables may be left unresolved.
  1,161 ( 0.00%)      pub fn structurally_resolved_type(&self, sp: Span, ty: Ty<'tcx>) -> Ty<'tcx> {
    387 ( 0.00%)          let ty = self.resolve_vars_with_obligations(ty);
    129 ( 0.00%)          if !ty.is_ty_var() {
      .                       ty
      .                   } else {
      .                       if !self.is_tainted_by_errors() {
      .                           self.emit_inference_failure_err((**self).body_id, sp, ty.into(), vec![], E0282)
      .                               .note("type must be known at this point")
      .                               .emit();
      .                       }
      .                       let err = self.tcx.ty_error();
      .                       self.demand_suptype(sp, err, ty);
      .                       err
      .                   }
  1,161 ( 0.00%)      }
      .           
      .               pub(in super::super) fn with_breakable_ctxt<F: FnOnce() -> R, R>(
      .                   &self,
      .                   id: hir::HirId,
      .                   ctxt: BreakableCtxt<'tcx>,
      .                   f: F,
      .               ) -> (BreakableCtxt<'tcx>, R) {
      .                   let index;
      .                   {
      .                       let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();
     36 ( 0.00%)              index = enclosing_breakables.stack.len();
      .                       enclosing_breakables.by_id.insert(id, index);
    288 ( 0.00%)              enclosing_breakables.stack.push(ctxt);
      .                   }
      .                   let result = f();
      .                   let ctxt = {
      .                       let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();
      .                       debug_assert!(enclosing_breakables.stack.len() == index + 1);
      .                       enclosing_breakables.by_id.remove(&id).expect("missing breakable context");
      .                       enclosing_breakables.stack.pop().expect("missing breakable context")
      .                   };
    216 ( 0.00%)          (ctxt, result)
      .               }
      .           
      .               /// Instantiate a QueryResponse in a probe context, without a
      .               /// good ObligationCause.
    341 ( 0.00%)      pub(in super::super) fn probe_instantiate_query_response(
      .                   &self,
      .                   span: Span,
      .                   original_values: &OriginalQueryValues<'tcx>,
      .                   query_result: &Canonical<'tcx, QueryResponse<'tcx, Ty<'tcx>>>,
      .               ) -> InferResult<'tcx, Ty<'tcx>> {
    186 ( 0.00%)          self.instantiate_query_response_and_region_obligations(
    217 ( 0.00%)              &traits::ObligationCause::misc(span, self.body_id),
     31 ( 0.00%)              self.param_env,
      .                       original_values,
      .                       query_result,
      .                   )
    279 ( 0.00%)      }
      .           
      .               /// Returns `true` if an expression is contained inside the LHS of an assignment expression.
      .               pub(in super::super) fn expr_in_place(&self, mut expr_id: hir::HirId) -> bool {
      .                   let mut contained_in_place = false;
      .           
      .                   while let hir::Node::Expr(parent_expr) =
      .                       self.tcx.hir().get(self.tcx.hir().get_parent_node(expr_id))
      .                   {
-- line 1551 ----------------------------------------

 33,384 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                 

-- line 504 ----------------------------------------
        .           use crate::panicking::{panic, panic_str};
        .           use crate::pin::Pin;
        .           use crate::{
        .               convert, hint, mem,
        .               ops::{self, ControlFlow, Deref, DerefMut},
        .           };
        .           
        .           /// The `Option` type. See [the module level documentation](self) for more.
  559,407 ( 0.06%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
        .           #[rustc_diagnostic_item = "Option"]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           pub enum Option<T> {
        .               /// No value.
        .               #[lang = "None"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               None,
        .               /// Some value of type `T`.
        .               #[lang = "Some"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      136 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
        .           }
        .           
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Type implementation
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           impl<T> Option<T> {
        .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
        .               /// let x: Option<u32> = None;
        .               /// assert_eq!(x.is_some(), false);
        .               /// ```
        .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               pub const fn is_some(&self) -> bool {
  918,158 ( 0.10%)          matches!(*self, Some(_))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
        .               /// // then consume *that* with `map`, leaving `text` on the stack.
        .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
        .               /// println!("still can print text: {:?}", text);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub const fn as_ref(&self) -> Option<&T> {
  875,936 ( 0.09%)          match *self {
        .                       Some(ref x) => Some(x),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
        .               ///
        .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
        .               ///     None => {},
        .               /// }
        .               /// assert_eq!(x, Some(42));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn as_mut(&mut self) -> Option<&mut T> {
  180,999 ( 0.02%)          match *self {
        .                       Some(ref mut x) => Some(x),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
        .               ///
        .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn expect(self, msg: &str) -> T {
  291,330 ( 0.03%)          match self {
   33,336 ( 0.00%)              Some(val) => val,
        .                       None => expect_failed(msg),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value.
        .               ///
        .               /// Because this function may panic, its use is generally discouraged.
        .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.unwrap(), "air"); // fails
        .               /// ```
        .               #[inline]
        .               #[track_caller]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn unwrap(self) -> T {
  496,508 ( 0.05%)          match self {
  338,668 ( 0.04%)              Some(val) => val,
        .                       None => panic("called `Option::unwrap()` on a `None` value"),
        .                   }
        .               }
        .           
        .               /// Returns the contained [`Some`] value or a provided default.
        .               ///
        .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
        .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or(self, default: T) -> T
        .               where
        .                   T: ~const Drop,
        .               {
  993,268 ( 0.10%)          match self {
        .                       Some(x) => x,
        4 ( 0.00%)              None => default,
        .                   }
    1,087 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or computes it from a closure.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let k = 10;
        .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
        .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        3 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
1,167,139 ( 0.12%)          match self {
    9,112 ( 0.00%)              Some(x) => x,
      258 ( 0.00%)              None => f(),
        .                   }
      112 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value or a default.
        .               ///
        .               /// Consumes the `self` argument then, if [`Some`], returns the contained
        .               /// value, otherwise if [`None`], returns the [default value] for that
        .               /// type.
        .               ///
        .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
        .               /// [`FromStr`]: crate::str::FromStr
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn unwrap_or_default(self) -> T
        .               where
        .                   T: ~const Default,
        .               {
      288 ( 0.00%)          match self {
      107 ( 0.00%)              Some(x) => x,
        .                       None => Default::default(),
        .                   }
       26 ( 0.00%)      }
        .           
        .               /// Returns the contained [`Some`] value, consuming the `self` value,
        .               /// without checking that the value is not [`None`].
        .               ///
        .               /// # Safety
        .               ///
        .               /// Calling this method on [`None`] is *[undefined behavior]*.
        .               ///
-- line 851 ----------------------------------------
-- line 892 ----------------------------------------
        .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
        .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
        .               ///
        .               /// assert_eq!(maybe_some_len, Some(13));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
      441 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
  618,312 ( 0.06%)          match self {
2,131,195 ( 0.22%)              Some(x) => Some(f(x)),
    3,305 ( 0.00%)              None => None,
        .                   }
    8,434 ( 0.00%)      }
        .           
        .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(result_option_inspect)]
        .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
        .               where
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .                   U: ~const Drop,
        .               {
  193,542 ( 0.02%)          match self {
    1,669 ( 0.00%)              Some(t) => f(t),
    1,668 ( 0.00%)              None => default,
        .                   }
        .               }
        .           
        .               /// Computes a default function result (if none), or
        .               /// applies a different function to the contained value (if any).
        .               ///
        .               /// # Examples
        .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
        .               where
        .                   D: ~const FnOnce() -> U,
        .                   D: ~const Drop,
        .                   F: ~const FnOnce(T) -> U,
        .                   F: ~const Drop,
        .               {
    1,577 ( 0.00%)          match self {
      427 ( 0.00%)              Some(t) => f(t),
        .                       None => default(),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
        .               ///
        .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
        .               where
        .                   E: ~const Drop,
        .               {
   23,586 ( 0.00%)          match self {
      243 ( 0.00%)              Some(v) => Ok(v),
      116 ( 0.00%)              None => Err(err),
        .                   }
        .               }
        .           
        .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
        .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
        .               ///
        .               /// [`Ok(v)`]: Ok
        .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1049 ----------------------------------------
        .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
        .               ///
        .               /// let x: Option<&str> = None;
        .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       16 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
        .               where
        .                   F: ~const FnOnce() -> E,
        .                   F: ~const Drop,
        .               {
    2,678 ( 0.00%)          match self {
    2,941 ( 0.00%)              Some(v) => Ok(v),
      884 ( 0.00%)              None => Err(err()),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
        .               ///
        .               /// Leaves the original Option in-place, creating a new one with a reference
        .               /// to the original one, additionally coercing the contents via [`Deref`].
        .               ///
        .               /// # Examples
        .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
        .               /// assert_eq!(x.as_deref(), None);
        .               /// ```
        .               #[stable(feature = "option_deref", since = "1.40.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn as_deref(&self) -> Option<&T::Target>
        .               where
        .                   T: ~const Deref,
        .               {
      519 ( 0.00%)          match self.as_ref() {
        .                       Some(t) => Some(t.deref()),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
        .               ///
        .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
        .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
        .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
        .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
        .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       56 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
        .               where
        .                   F: ~const FnOnce(T) -> Option<U>,
        .                   F: ~const Drop,
        .               {
    8,894 ( 0.00%)          match self {
      576 ( 0.00%)              Some(x) => f(x),
        .                       None => None,
        .                   }
      852 ( 0.00%)      }
        .           
        .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
        .               /// with the wrapped value and returns:
        .               ///
        .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
        .               ///   value), and
        .               /// - [`None`] if `predicate` returns `false`.
        .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
        .               #[stable(feature = "option_filter", since = "1.27.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn filter<P>(self, predicate: P) -> Self
        .               where
        .                   T: ~const Drop,
        .                   P: ~const FnOnce(&T) -> bool,
        .                   P: ~const Drop,
        .               {
      159 ( 0.00%)          if let Some(x) = self {
       36 ( 0.00%)              if predicate(&x) {
        .                           return Some(x);
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise returns `optb`.
        .               ///
-- line 1274 ----------------------------------------
-- line 1299 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or(self, optb: Option<T>) -> Option<T>
        .               where
        .                   T: ~const Drop,
        .               {
      321 ( 0.00%)          match self {
        .                       Some(x) => Some(x),
        .                       None => optb,
        .                   }
        .               }
        .           
        .               /// Returns the option if it contains a value, otherwise calls `f` and
        .               /// returns the result.
        .               ///
-- line 1315 ----------------------------------------
-- line 1326 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn or_else<F>(self, f: F) -> Option<T>
        .               where
        .                   F: ~const FnOnce() -> Option<T>,
        .                   F: ~const Drop,
        .               {
  117,792 ( 0.01%)          match self {
      575 ( 0.00%)              Some(x) => Some(x),
        .                       None => f(),
        .                   }
        .               }
        .           
        .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
        .               ///
        .               /// # Examples
        .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
        .               where
        .                   T: ~const Drop,
        .               {
    2,040 ( 0.00%)          if let None = *self {
    4,760 ( 0.00%)              *self = Some(value);
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
        .               }
        .           
        .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
        .               #[inline]
        .               #[stable(feature = "option_entry", since = "1.20.0")]
        .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
        .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
        .               where
        .                   F: ~const FnOnce() -> T,
        .                   F: ~const Drop,
        .               {
   94,605 ( 0.01%)          if let None = *self {
        .                       // the compiler isn't smart enough to know that we are not dropping a `T`
        .                       // here and wants us to ensure `T` can be dropped at compile time.
        .                       mem::forget(mem::replace(self, Some(f())))
        .                   }
        .           
        .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
        .                   // variant in the code above.
        .                   unsafe { self.as_mut().unwrap_unchecked() }
-- line 1515 ----------------------------------------
-- line 1558 ----------------------------------------
        .               /// let old = x.replace(3);
        .               /// assert_eq!(x, Some(3));
        .               /// assert_eq!(old, None);
        .               /// ```
        .               #[inline]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               #[stable(feature = "option_replace", since = "1.31.0")]
        .               pub const fn replace(&mut self, value: T) -> Option<T> {
      148 ( 0.00%)          mem::replace(self, Some(value))
        .               }
        .           
        .               /// Returns `true` if the option is a [`Some`] value containing the given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
        .               #[stable(feature = "copied", since = "1.35.0")]
        .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
        .               pub const fn copied(self) -> Option<T>
        .               where
        .                   T: Copy,
        .               {
        .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
        .                   // ready yet, should be reverted when possible to avoid code repetition
    1,502 ( 0.00%)          match self {
   34,697 ( 0.00%)              Some(&v) => Some(v),
      154 ( 0.00%)              None => None,
        .                   }
        .               }
        .           
        .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1730 ----------------------------------------
-- line 1733 ----------------------------------------
        .               /// let opt_x = Some(&x);
        .               /// assert_eq!(opt_x, Some(&12));
        .               /// let cloned = opt_x.cloned();
        .               /// assert_eq!(cloned, Some(12));
        .               /// ```
        .               #[must_use = "`self` will be dropped if the result is not used"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
      400 ( 0.00%)      pub const fn cloned(self) -> Option<T>
        .               where
        .                   T: ~const Clone,
        .               {
   65,028 ( 0.01%)          match self {
  568,042 ( 0.06%)              Some(t) => Some(t.clone()),
      366 ( 0.00%)              None => None,
        .                   }
    1,286 ( 0.00%)      }
        .           }
        .           
        .           impl<T> Option<&mut T> {
        .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
        .               /// option.
        .               ///
        .               /// # Examples
        .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
        .           /////////////////////////////////////////////////////////////////////////////
        .           // Trait implementations
        .           /////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone> Clone for Option<T> {
        .               #[inline]
        .               fn clone(&self) -> Self {
   89,907 ( 0.01%)          match self {
    1,604 ( 0.00%)              Some(x) => Some(x.clone()),
       12 ( 0.00%)              None => None,
        .                   }
   25,630 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn clone_from(&mut self, source: &Self) {
        .                   match (self, source) {
        .                       (Some(to), Some(from)) => to.clone_from(from),
        .                       (to, from) => *to = from.clone(),
        .                   }
        .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A> {
        .                   self.opt.take()
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
      754 ( 0.00%)          match self.opt {
        .                       Some(_) => (1, Some(1)),
        .                       None => (0, Some(0)),
        .                   }
        .               }
        .           }
        .           
        .           impl<A> DoubleEndedIterator for Item<A> {
        .               #[inline]
-- line 2022 ----------------------------------------
-- line 2241 ----------------------------------------
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::Try for Option<T> {
        .               type Output = T;
        .               type Residual = Option<convert::Infallible>;
        .           
        .               #[inline]
        .               fn from_output(output: Self::Output) -> Self {
        .                   Some(output)
      185 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
  119,639 ( 0.01%)          match self {
  176,151 ( 0.02%)              Some(v) => ControlFlow::Continue(v),
        .                       None => ControlFlow::Break(None),
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2", issue = "84277")]
        .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
        .           impl<T> const ops::FromResidual for Option<T> {
        .               #[inline]
        .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
        .                   match residual {
   61,288 ( 0.01%)              None => None,
        .                   }
        .               }
        .           }
        .           
        .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
        .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
        .               type TryType = Option<T>;
        .           }
-- line 2274 ----------------------------------------

2,276,656 ( 0.24%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/../../stdarch/crates/core_arch/src/x86/sse2.rs
--------------------------------------------------------------------------------
Ir                  

-- line 94 ----------------------------------------
         .           /// Adds packed 32-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddd))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_add_epi32(a: __m128i, b: __m128i) -> __m128i {
        17 ( 0.00%)      transmute(simd_add(a.as_i32x4(), b.as_i32x4()))
         .           }
         .           
         .           /// Adds packed 64-bit integers in `a` and `b`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_add_epi64)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(paddq))]
-- line 110 ----------------------------------------
-- line 790 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmpeq_epi8(a: __m128i, b: __m128i) -> __m128i {
    96,439 ( 0.01%)      transmute::<i8x16, _>(simd_eq(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for equality.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmpeq_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpeqw))]
-- line 806 ----------------------------------------
-- line 856 ----------------------------------------
         .           /// Compares packed 8-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_cmplt_epi8(a: __m128i, b: __m128i) -> __m128i {
    48,980 ( 0.01%)      transmute::<i8x16, _>(simd_lt(a.as_i8x16(), b.as_i8x16()))
         .           }
         .           
         .           /// Compares packed 16-bit integers in `a` and `b` for less-than.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_cmplt_epi16)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pcmpgtw))]
-- line 872 ----------------------------------------
-- line 1174 ----------------------------------------
         .           /// `mem_addr` must be aligned on a 16-byte boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_load_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movaps))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_load_si128(mem_addr: *const __m128i) -> __m128i {
    97,565 ( 0.01%)      *mem_addr
         .           }
         .           
         .           /// Loads 128-bits of integer data from memory into a new vector.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_loadu_si128)
         .           #[inline]
-- line 1190 ----------------------------------------
-- line 1237 ----------------------------------------
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storeu_si128)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(movups))] // FIXME movdqu expected
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_storeu_si128(mem_addr: *mut __m128i, a: __m128i) {
        16 ( 0.00%)      storeudq(mem_addr as *mut i8, a);
         .           }
         .           
         .           /// Stores the lower 64-bit integer `a` to a memory location.
         .           ///
         .           /// `mem_addr` does not need to be aligned on any particular boundary.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_storel_epi64)
         .           #[inline]
-- line 1253 ----------------------------------------
-- line 1373 ----------------------------------------
         .           /// Returns a mask of the most significant bit of each element in `a`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_movemask_epi8)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pmovmskb))]
         .           #[stable(feature = "simd_x86", since = "1.27.0")]
         .           pub unsafe fn _mm_movemask_epi8(a: __m128i) -> i32 {
14,923,009 ( 1.57%)      pmovmskb(a.as_i8x16())
         .           }
         .           
         .           /// Shuffles 32-bit integers in `a` using the control in `IMM8`.
         .           ///
         .           /// [Intel's documentation](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_shuffle_epi32)
         .           #[inline]
         .           #[target_feature(enable = "sse2")]
         .           #[cfg_attr(test, assert_instr(pshufd, IMM8 = 9))]
-- line 1389 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .           ///
      .           /// It's very easy to produce a deeply
      .           /// nested type tree with a lot of
      .           /// identical subtrees. In order to work efficiently
      .           /// in this situation walker only visits each type once.
      .           /// It maintains a set of visited types and
      .           /// skips any types that are already there.
      .           impl<'tcx> TypeWalker<'tcx> {
 29,829 ( 0.00%)      pub fn new(root: GenericArg<'tcx>) -> Self {
119,316 ( 0.01%)          Self { stack: smallvec![root], last_subtree: 1, visited: SsoHashSet::new() }
 29,829 ( 0.00%)      }
      .           
      .               /// Skips the subtree corresponding to the last type
      .               /// returned by `next()`.
      .               ///
      .               /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.
      .               ///
      .               /// ```
      .               /// let mut iter: TypeWalker = ...;
-- line 38 ----------------------------------------
-- line 44 ----------------------------------------
      .               pub fn skip_current_subtree(&mut self) {
      .                   self.stack.truncate(self.last_subtree);
      .               }
      .           }
      .           
      .           impl<'tcx> Iterator for TypeWalker<'tcx> {
      .               type Item = GenericArg<'tcx>;
      .           
541,818 ( 0.06%)      fn next(&mut self) -> Option<GenericArg<'tcx>> {
      .                   debug!("next(): stack={:?}", self.stack);
      .                   loop {
 60,762 ( 0.01%)              let next = self.stack.pop()?;
 30,381 ( 0.00%)              self.last_subtree = self.stack.len();
 60,762 ( 0.01%)              if self.visited.insert(next) {
 91,119 ( 0.01%)                  push_inner(&mut self.stack, next);
      .                           debug!("next: stack={:?}", self.stack);
      .                           return Some(next);
      .                       }
      .                   }
421,414 ( 0.04%)      }
      .           }
      .           
      .           impl<'tcx> GenericArg<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
    586 ( 0.00%)      pub fn walk(self) -> TypeWalker<'tcx> {
    293 ( 0.00%)          TypeWalker::new(self)
    879 ( 0.00%)      }
      .           
      .               /// Iterator that walks the immediate children of `self`. Hence
      .               /// `Foo<Bar<i32>, u32>` yields the sequence `[Bar<i32>, u32]`
      .               /// (but not `i32`, like `walk`).
      .               ///
      .               /// Iterator only walks items once.
      .               /// It accepts visited set, updates it with all visited types
      .               /// and skips any types that are already there.
  1,220 ( 0.00%)      pub fn walk_shallow(
      .                   self,
      .                   visited: &mut SsoHashSet<GenericArg<'tcx>>,
      .               ) -> impl Iterator<Item = GenericArg<'tcx>> {
      .                   let mut stack = SmallVec::new();
    244 ( 0.00%)          push_inner(&mut stack, self);
    488 ( 0.00%)          stack.retain(|a| visited.insert(*a));
  2,684 ( 0.00%)          stack.into_iter()
  1,220 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> super::TyS<'tcx> {
      .               /// Iterator that walks `self` and any types reachable from
      .               /// `self`, in depth-first order. Note that just walks the types
      .               /// that appear in `self`, it does not descend into the fields of
      .               /// structs or variants. For example:
      .               ///
      .               /// ```text
      .               /// isize => { isize }
      .               /// Foo<Bar<isize>> => { Foo<Bar<isize>>, Bar<isize>, isize }
      .               /// [isize] => { [isize], isize }
      .               /// ```
 59,072 ( 0.01%)      pub fn walk(&'tcx self) -> TypeWalker<'tcx> {
 29,536 ( 0.00%)          TypeWalker::new(self.into())
 88,608 ( 0.01%)      }
      .           }
      .           
      .           /// We push `GenericArg`s on the stack in reverse order so as to
      .           /// maintain a pre-order traversal. As of the time of this
      .           /// writing, the fact that the traversal is pre-order is not
      .           /// known to be significant to any code, but it seems like the
      .           /// natural order one would expect (basically, the order of the
      .           /// types as they are written).
183,702 ( 0.02%)  fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>) {
      .               match parent.unpack() {
152,165 ( 0.02%)          GenericArgKind::Type(parent_ty) => match *parent_ty.kind() {
      .                       ty::Bool
      .                       | ty::Char
      .                       | ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
      .                       | ty::Str
      .                       | ty::Infer(_)
      .                       | ty::Param(_)
      .                       | ty::Never
      .                       | ty::Error(_)
      .                       | ty::Placeholder(..)
      .                       | ty::Bound(..)
      .                       | ty::Foreign(..) => {}
      .           
    112 ( 0.00%)              ty::Array(ty, len) => {
    168 ( 0.00%)                  stack.push(len.into());
      .                           stack.push(ty.into());
      .                       }
      .                       ty::Slice(ty) => {
      .                           stack.push(ty.into());
      .                       }
      .                       ty::RawPtr(mt) => {
      .                           stack.push(mt.ty.into());
      .                       }
    254 ( 0.00%)              ty::Ref(lt, ty, _) => {
    254 ( 0.00%)                  stack.push(ty.into());
      .                           stack.push(lt.into());
      .                       }
      .                       ty::Projection(data) => {
      .                           stack.extend(data.substs.iter().rev());
      .                       }
      .                       ty::Dynamic(obj, lt) => {
      .                           stack.push(lt.into());
      .                           stack.extend(obj.iter().rev().flat_map(|predicate| {
-- line 157 ----------------------------------------
-- line 170 ----------------------------------------
      .                                   ty::Term::Const(ct) => ct.into(),
      .                               }))
      .                           }));
      .                       }
      .                       ty::Adt(_, substs)
      .                       | ty::Opaque(_, substs)
      .                       | ty::Closure(_, substs)
      .                       | ty::Generator(_, substs, _)
      3 ( 0.00%)              | ty::Tuple(substs)
      .                       | ty::FnDef(_, substs) => {
      .                           stack.extend(substs.iter().rev());
      .                       }
      .                       ty::GeneratorWitness(ts) => {
      .                           stack.extend(ts.skip_binder().iter().rev().map(|ty| ty.into()));
      .                       }
     22 ( 0.00%)              ty::FnPtr(sig) => {
     77 ( 0.00%)                  stack.push(sig.skip_binder().output().into());
     88 ( 0.00%)                  stack.extend(sig.skip_binder().inputs().iter().copied().rev().map(|ty| ty.into()));
      .                       }
      .                   },
      .                   GenericArgKind::Lifetime(_) => {}
      .                   GenericArgKind::Const(parent_ct) => {
      .                       stack.push(parent_ct.ty.into());
    112 ( 0.00%)              match parent_ct.val {
      .                           ty::ConstKind::Infer(_)
      .                           | ty::ConstKind::Param(_)
      .                           | ty::ConstKind::Placeholder(_)
      .                           | ty::ConstKind::Bound(..)
      .                           | ty::ConstKind::Value(_)
      .                           | ty::ConstKind::Error(_) => {}
      .           
      .                           ty::ConstKind::Unevaluated(ct) => {
      .                               stack.extend(ct.substs.iter().rev());
      .                           }
      .                       }
      .                   }
      .               }
151,060 ( 0.02%)  }

  3,569 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/walk.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs
--------------------------------------------------------------------------------
Ir                 

-- line 2075 ----------------------------------------
        .               // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.
        .               // Therefore, compiletime_check and runtime_check are observably equivalent.
        .               unsafe {
        .                   const_eval_select((src, dst, count), compiletime_check, runtime_check);
        .               }
        .           
        .               // SAFETY: the safety contract for `copy_nonoverlapping` must be
        .               // upheld by the caller.
9,355,241 ( 0.98%)      unsafe { copy_nonoverlapping(src, dst, count) }
        .           }
        .           
        .           /// Copies `count * size_of::<T>()` bytes from `src` to `dst`. The source
        .           /// and destination may overlap.
        .           ///
        .           /// If the source and destination will *never* overlap,
        .           /// [`copy_nonoverlapping`] can be used instead.
        .           ///
-- line 2091 ----------------------------------------
-- line 2165 ----------------------------------------
        .               #[cfg(debug_assertions)]
        .               // SAFETY: As per our safety precondition, we may assume that the `abort` above is never reached.
        .               // Therefore, compiletime_check and runtime_check are observably equivalent.
        .               unsafe {
        .                   const_eval_select((src, dst), compiletime_check, runtime_check);
        .               }
        .           
        .               // SAFETY: the safety contract for `copy` must be upheld by the caller.
   15,395 ( 0.00%)      unsafe { copy(src, dst, count) }
        .           }
        .           
        .           /// Sets `count * size_of::<T>()` bytes of memory starting at `dst` to
        .           /// `val`.
        .           ///
        .           /// `write_bytes` is similar to C's [`memset`], but sets `count *
        .           /// size_of::<T>()` bytes to `val`.
        .           ///
-- line 2181 ----------------------------------------
-- line 2266 ----------------------------------------
        .               #[cfg(debug_assertions)]
        .               // SAFETY: runtime debug-assertions are a best-effort basis; it's fine to
        .               // not do them during compile time
        .               unsafe {
        .                   const_eval_select((dst,), compiletime_check, runtime_check);
        .               }
        .           
        .               // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
   32,151 ( 0.00%)      unsafe { write_bytes(dst, val, count) }
        .           }
        .           
        .           /// Selects which function to call depending on the context.
        .           ///
        .           /// If this function is evaluated at compile-time, then a call to this
        .           /// intrinsic will be replaced with a call to `called_in_const`. It gets
        .           /// replaced with a call to `called_at_rt` otherwise.
        .           ///
-- line 2282 ----------------------------------------

   65,828 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/intrinsics.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 417 ----------------------------------------
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub const fn new() -> Self {
1,620,276 ( 0.17%)          Vec { buf: RawVec::NEW, len: 0 }
       34 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
   70,419 ( 0.01%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
        .               }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    5,312 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
        .               }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn capacity(&self) -> usize {
  355,459 ( 0.04%)          self.buf.capacity()
        .               }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve(&mut self, additional: usize) {
   48,629 ( 0.01%)          self.buf.reserve(self.len, additional);
        .               }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
      887 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
    2,204 ( 0.00%)          if self.capacity() > self.len {
    2,612 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
        .               }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
        .                       self.shrink_to_fit();
      289 ( 0.00%)              let me = ManuallyDrop::new(self);
        .                       let buf = ptr::read(&me.buf);
        .                       let len = me.len();
        .                       buf.into_box(len).assume_init()
        .                   }
        .               }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
  301,635 ( 0.03%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
  301,189 ( 0.03%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  185,168 ( 0.02%)              self.len = len;
      259 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  361,952 ( 0.04%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
  764,442 ( 0.08%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
        .               pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
1,227,689 ( 0.13%)          let ptr = self.buf.ptr();
        .                   unsafe {
        .                       assume(!ptr.is_null());
        .                   }
        .                   ptr
        .               }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  344,800 ( 0.04%)          self.len = new_len;
      974 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      483 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
      148 ( 0.00%)          let len = self.len();
      138 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
      550 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
      588 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
      550 ( 0.00%)              self.set_len(len + 1);
        .                   }
      414 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
        .               pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
       24 ( 0.00%)          let len = self.len();
       95 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
       16 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
       68 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
       28 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
   22,410 ( 0.00%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
      496 ( 0.00%)          self.retain_mut(|elem| f(elem));
   22,104 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    2,904 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
    2,349 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
    1,860 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
   28,223 ( 0.00%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
    7,196 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    1,627 ( 0.00%)                      g.processed_len += 1;
      820 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
       84 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
      924 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
      756 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
        7 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
       60 ( 0.00%)          let len = self.len();
      316 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
      440 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
        .                           if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
-- line 1686 ----------------------------------------
-- line 1688 ----------------------------------------
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
      264 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      130 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
2,759,951 ( 0.29%)          if self.len == self.buf.capacity() {
   39,099 ( 0.00%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
   16,440 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
        .                       ptr::write(end, value);
3,721,283 ( 0.39%)              self.len += 1;
        .                   }
      104 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  243,335 ( 0.03%)          if self.len == 0 {
        3 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  159,096 ( 0.02%)                  self.len -= 1;
   11,979 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
       14 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               unsafe fn append_elements(&mut self, other: *const [T]) {
        .                   let count = unsafe { (*other).len() };
        .                   self.reserve(count);
    3,386 ( 0.00%)          let len = self.len();
        .                   unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  112,201 ( 0.01%)          self.len += count;
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
    1,090 ( 0.00%)          let len = self.len();
        .                   let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
        .                       self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
       56 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
      152 ( 0.00%)              Drain {
        .                           tail_start: end,
       56 ( 0.00%)                  tail_len: len - end,
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  542,609 ( 0.06%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
  255,521 ( 0.03%)          self.len() == 0
        .               }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      196 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      194 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
        .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    2,810 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
      380 ( 0.00%)          let len = self.len();
      760 ( 0.00%)          if new_len > len {
   90,046 ( 0.01%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    2,430 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
        .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
        .                       slice::from_raw_parts_mut(
        2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
       23 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
        .               }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
    3,330 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
      342 ( 0.00%)          let len = self.len();
        .           
    9,476 ( 0.00%)          if new_len > len {
      936 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    1,062 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
   24,768 ( 0.00%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    1,285 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
   88,605 ( 0.01%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
   19,719 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
        2 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
    4,167 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
   25,473 ( 0.00%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    4,160 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
        .               fn deref(&self) -> &[T] {
1,420,070 ( 0.15%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
        .               fn deref_mut(&mut self) -> &mut [T] {
  207,977 ( 0.02%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
   14,618 ( 0.00%)      fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
        2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
   18,073 ( 0.00%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
        .               fn index(&self, index: I) -> &Self::Output {
    9,135 ( 0.00%)          Index::index(&**self, index)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
-- line 2534 ----------------------------------------
-- line 2539 ----------------------------------------
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
  319,352 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
        .               fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  299,852 ( 0.03%)              let mut me = ManuallyDrop::new(self);
        .                       let alloc = ptr::read(me.allocator());
        .                       let begin = me.as_mut_ptr();
        .                       let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
        .                           begin.add(me.len()) as *const T
        .                       };
        .                       let cap = me.buf.capacity();
  125,706 ( 0.01%)              IntoIter {
        .                           buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
        .                           end,
        .                       }
        .                   }
-- line 2589 ----------------------------------------
-- line 2601 ----------------------------------------
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
        .               fn into_iter(self) -> slice::IterMut<'a, T> {
    1,062 ( 0.00%)          self.iter_mut()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
       32 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
   35,651 ( 0.00%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
       32 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2627 ----------------------------------------
-- line 2636 ----------------------------------------
        .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
    7,545 ( 0.00%)          while let Some(element) = iterator.next() {
      679 ( 0.00%)              let len = self.len();
   16,357 ( 0.00%)              if len == self.capacity() {
      115 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
        .                           ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
   12,273 ( 0.00%)                  self.set_len(len + 1);
        .                       }
        .                   }
        .               }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
-- line 2663 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
      164 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
       24 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
       64 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
       48 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  692,899 ( 0.07%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  168,901 ( 0.02%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  818,470 ( 0.09%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

  956,984 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/constant.rs
--------------------------------------------------------------------------------
Ir               

-- line 2 ----------------------------------------
      .           use rustc_ast as ast;
      .           use rustc_middle::mir::interpret::{
      .               Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,
      .           };
      .           use rustc_middle::ty::{self, ParamEnv, TyCtxt};
      .           use rustc_span::symbol::Symbol;
      .           use rustc_target::abi::Size;
      .           
233,696 ( 0.02%)  crate fn lit_to_const<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               lit_input: LitToConstInput<'tcx>,
      .           ) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {
 87,636 ( 0.01%)      let LitToConstInput { lit, ty, neg } = lit_input;
      .           
      .               let trunc = |n| {
      .                   let param_ty = ParamEnv::reveal_all().and(ty);
      .                   let width = tcx.layout_of(param_ty).map_err(|_| LitToConstError::Reported)?.size;
      .                   trace!("trunc {} with size {} and shift {}", n, width.bits(), 128 - width.bits());
      .                   let result = width.truncate(n);
      .                   trace!("trunc result: {}", result);
      .                   Ok(ConstValue::Scalar(Scalar::from_uint(result, width)))
      .               };
      .           
262,908 ( 0.03%)      let lit = match (lit, &ty.kind()) {
      .                   (ast::LitKind::Str(s, _), ty::Ref(_, inner_ty, _)) if inner_ty.is_str() => {
      .                       let s = s.as_str();
      .                       let allocation = Allocation::from_bytes_byte_aligned_immutable(s.as_bytes());
      .                       let allocation = tcx.intern_const_alloc(allocation);
      .                       ConstValue::Slice { data: allocation, start: 0, end: s.len() }
      .                   }
      .                   (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))
      .                       if matches!(inner_ty.kind(), ty::Slice(_)) =>
-- line 33 ----------------------------------------
-- line 44 ----------------------------------------
      .                       ConstValue::Scalar(Scalar::from_uint(*n, Size::from_bytes(1)))
      .                   }
      .                   (ast::LitKind::Int(n, _), ty::Uint(_)) | (ast::LitKind::Int(n, _), ty::Int(_)) => {
      .                       trunc(if neg { (*n as i128).overflowing_neg().0 as u128 } else { *n })?
      .                   }
      .                   (ast::LitKind::Float(n, _), ty::Float(fty)) => {
      .                       parse_float(*n, *fty, neg).ok_or(LitToConstError::Reported)?
      .                   }
      1 ( 0.00%)          (ast::LitKind::Bool(b), ty::Bool) => ConstValue::Scalar(Scalar::from_bool(*b)),
 29,211 ( 0.00%)          (ast::LitKind::Char(c), ty::Char) => ConstValue::Scalar(Scalar::from_char(*c)),
      .                   (ast::LitKind::Err(_), _) => return Err(LitToConstError::Reported),
      .                   _ => return Err(LitToConstError::TypeError),
      .               };
      .               Ok(ty::Const::from_value(tcx, lit, ty))
350,544 ( 0.04%)  }
      .           
      .           fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> Option<ConstValue<'tcx>> {
      .               let num = num.as_str();
      .               use rustc_apfloat::ieee::{Double, Single};
      .               let scalar = match fty {
      .                   ty::FloatTy::F32 => {
      .                       let rust_f = match num.parse::<f32>() {
      .                           Ok(f) => f,
-- line 66 ----------------------------------------

116,848 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/constant.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/builtin.rs
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .           fn pierce_parens(mut expr: &ast::Expr) -> &ast::Expr {
      .               while let ast::ExprKind::Paren(sub) = &expr.kind {
      .                   expr = sub;
      .               }
      .               expr
      .           }
      .           
      .           impl EarlyLintPass for WhileTrue {
176,994 ( 0.02%)      fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {
 58,998 ( 0.01%)          if let ast::ExprKind::While(cond, _, label) = &e.kind {
      .                       if let ast::ExprKind::Lit(ref lit) = pierce_parens(cond).kind {
      .                           if let ast::LitKind::Bool(true) = lit.kind {
      .                               if !lit.span.from_expansion() {
      .                                   let msg = "denote infinite loops with `loop { ... }`";
      .                                   let condition_span = e.span.with_hi(cond.span.hi());
      .                                   cx.struct_span_lint(WHILE_TRUE, condition_span, |lint| {
      .                                       lint.build(msg)
      .                                           .span_suggestion_short(
-- line 107 ----------------------------------------
-- line 117 ----------------------------------------
      .                                               Applicability::MachineApplicable,
      .                                           )
      .                                           .emit();
      .                                   })
      .                               }
      .                           }
      .                       }
      .                   }
206,493 ( 0.02%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `box_pointers` lints use of the Box type.
      .               ///
      .               /// ### Example
      .               ///
      .               /// ```rust,compile_fail
-- line 133 ----------------------------------------
-- line 147 ----------------------------------------
      .               BOX_POINTERS,
      .               Allow,
      .               "use of owned (Box type) heap memory"
      .           }
      .           
      .           declare_lint_pass!(BoxPointers => [BOX_POINTERS]);
      .           
      .           impl BoxPointers {
324,896 ( 0.03%)      fn check_heap_type(&self, cx: &LateContext<'_>, span: Span, ty: Ty<'_>) {
591,976 ( 0.06%)          for leaf in ty.walk() {
      .                       if let GenericArgKind::Type(leaf_ty) = leaf.unpack() {
      1 ( 0.00%)                  if leaf_ty.is_box() {
      .                               cx.struct_span_lint(BOX_POINTERS, span, |lint| {
      .                                   lint.build(&format!("type uses owned (Box type) pointers: {}", ty)).emit()
      .                               });
      .                           }
      .                       }
      .                   }
236,288 ( 0.02%)      }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for BoxPointers {
    306 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    136 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::Enum(..)
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..) => {
      5 ( 0.00%)                  self.check_heap_type(cx, it.span, cx.tcx.type_of(it.def_id))
      .                       }
      .                       _ => (),
      .                   }
      .           
      .                   // If it's a struct, we also have to check the fields' types
    103 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
      .                           for struct_field in struct_def.fields() {
      .                               let def_id = cx.tcx.hir().local_def_id(struct_field.hir_id);
      .                               self.check_heap_type(cx, struct_field.span, cx.tcx.type_of(def_id));
      .                           }
      .                       }
      .                       _ => (),
      .                   }
    272 ( 0.00%)      }
      .           
      .               fn check_expr(&mut self, cx: &LateContext<'_>, e: &hir::Expr<'_>) {
 88,605 ( 0.01%)          let ty = cx.typeck_results().node_type(e.hir_id);
118,140 ( 0.01%)          self.check_heap_type(cx, e.span, ty);
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `non_shorthand_field_patterns` lint detects using `Struct { x: x }`
      .               /// instead of `Struct { x }` in a pattern.
      .               ///
      .               /// ### Example
-- line 203 ----------------------------------------
-- line 230 ----------------------------------------
      .               NON_SHORTHAND_FIELD_PATTERNS,
      .               Warn,
      .               "using `Struct { x: x }` instead of `Struct { x }` in a pattern"
      .           }
      .           
      .           declare_lint_pass!(NonShorthandFieldPatterns => [NON_SHORTHAND_FIELD_PATTERNS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for NonShorthandFieldPatterns {
    350 ( 0.00%)      fn check_pat(&mut self, cx: &LateContext<'_>, pat: &hir::Pat<'_>) {
    100 ( 0.00%)          if let PatKind::Struct(ref qpath, field_pats, _) = pat.kind {
      .                       let variant = cx
      .                           .typeck_results()
      .                           .pat_ty(pat)
      .                           .ty_adt_def()
      .                           .expect("struct pattern type is not an ADT")
      .                           .variant_of_res(cx.qpath_res(qpath, pat.hir_id));
      .                       for fieldpat in field_pats {
      .                           if fieldpat.is_shorthand {
-- line 247 ----------------------------------------
-- line 278 ----------------------------------------
      .                                           Applicability::MachineApplicable,
      .                                       );
      .                                       err.emit();
      .                                   });
      .                               }
      .                           }
      .                       }
      .                   }
    400 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `unsafe_code` lint catches usage of `unsafe` code.
      .               ///
      .               /// ### Example
      .               ///
      .               /// ```rust,compile_fail
-- line 294 ----------------------------------------
-- line 337 ----------------------------------------
      .                               override them",
      .                           )
      .                           .emit();
      .                   })
      .               }
      .           }
      .           
      .           impl EarlyLintPass for UnsafeCode {
    381 ( 0.00%)      fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {
     37 ( 0.00%)          if attr.has_name(sym::allow_internal_unsafe) {
      .                       self.report_unsafe(cx, attr.span, |lint| {
      .                           lint.build(
      .                               "`allow_internal_unsafe` allows defining \
      .                                                          macros using unsafe without triggering \
      .                                                          the `unsafe_code` lint at their call site",
      .                           )
      .                           .emit()
      .                       });
      .                   }
    508 ( 0.00%)      }
      .           
 88,497 ( 0.01%)      fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {
 58,998 ( 0.01%)          if let ast::ExprKind::Block(ref blk, _) = e.kind {
      .                       // Don't warn about generated blocks; that'll just pollute the output.
      .                       if blk.rules == ast::BlockCheckMode::Unsafe(ast::UserProvided) {
      .                           self.report_unsafe(cx, blk.span, |lint| {
      .                               lint.build("usage of an `unsafe` block").emit()
      .                           });
      .                       }
      .                   }
117,996 ( 0.01%)      }
      .           
    204 ( 0.00%)      fn check_item(&mut self, cx: &EarlyContext<'_>, it: &ast::Item) {
    176 ( 0.00%)          match it.kind {
      .                       ast::ItemKind::Trait(box ast::Trait { unsafety: ast::Unsafe::Yes(_), .. }) => self
      .                           .report_unsafe(cx, it.span, |lint| {
      .                               lint.build("declaration of an `unsafe` trait").emit()
      .                           }),
      .           
      .                       ast::ItemKind::Impl(box ast::Impl { unsafety: ast::Unsafe::Yes(_), .. }) => self
      .                           .report_unsafe(cx, it.span, |lint| {
      .                               lint.build("implementation of an `unsafe` trait").emit()
      .                           }),
      .           
      .                       ast::ItemKind::Fn(..) => {
      7 ( 0.00%)                  if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {
      .                               self.report_overriden_symbol_name(
      .                                   cx,
      .                                   attr.span,
      .                                   "declaration of a `no_mangle` function",
      .                               );
      .                           }
      7 ( 0.00%)                  if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {
      .                               self.report_overriden_symbol_name(
      .                                   cx,
      .                                   attr.span,
      .                                   "declaration of a function with `export_name`",
      .                               );
      .                           }
      .                       }
      .           
      .                       ast::ItemKind::Static(..) => {
    196 ( 0.00%)                  if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {
      .                               self.report_overriden_symbol_name(
      .                                   cx,
      .                                   attr.span,
      .                                   "declaration of a `no_mangle` static",
      .                               );
      .                           }
    196 ( 0.00%)                  if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {
      .                               self.report_overriden_symbol_name(
      .                                   cx,
      .                                   attr.span,
      .                                   "declaration of a static with `export_name`",
      .                               );
      .                           }
      .                       }
      .           
      .                       _ => {}
      .                   }
    238 ( 0.00%)      }
      .           
    168 ( 0.00%)      fn check_impl_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {
     56 ( 0.00%)          if let ast::AssocItemKind::Fn(..) = it.kind {
    196 ( 0.00%)              if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::no_mangle) {
      .                           self.report_overriden_symbol_name(
      .                               cx,
      .                               attr.span,
      .                               "declaration of a `no_mangle` method",
      .                           );
      .                       }
    196 ( 0.00%)              if let Some(attr) = cx.sess().find_by_name(&it.attrs, sym::export_name) {
      .                           self.report_overriden_symbol_name(
      .                               cx,
      .                               attr.span,
      .                               "declaration of a method with `export_name`",
      .                           );
      .                       }
      .                   }
    196 ( 0.00%)      }
      .           
      .               fn check_fn(&mut self, cx: &EarlyContext<'_>, fk: FnKind<'_>, span: Span, _: ast::NodeId) {
    256 ( 0.00%)          if let FnKind::Fn(
      .                       ctxt,
      .                       _,
      .                       ast::FnSig { header: ast::FnHeader { unsafety: ast::Unsafe::Yes(_), .. }, .. },
      .                       _,
      .                       body,
      .                   ) = fk
      .                   {
      .                       let msg = match ctxt {
-- line 447 ----------------------------------------
-- line 487 ----------------------------------------
      .           
      .               /// Private traits or trait items that leaked through. Don't check their methods.
      .               private_traits: FxHashSet<hir::HirId>,
      .           }
      .           
      .           impl_lint_pass!(MissingDoc => [MISSING_DOCS]);
      .           
      .           fn has_doc(attr: &ast::Attribute) -> bool {
    144 ( 0.00%)      if attr.is_doc_comment() {
      .                   return true;
      .               }
      .           
      .               if !attr.has_name(sym::doc) {
      .                   return false;
      .               }
      .           
      .               if attr.value_str().is_some() {
-- line 503 ----------------------------------------
-- line 512 ----------------------------------------
      .                   }
      .               }
      .           
      .               false
      .           }
      .           
      .           impl MissingDoc {
      .               pub fn new() -> MissingDoc {
      4 ( 0.00%)          MissingDoc { doc_hidden_stack: vec![false], private_traits: FxHashSet::default() }
      .               }
      .           
      .               fn doc_hidden(&self) -> bool {
 29,864 ( 0.00%)          *self.doc_hidden_stack.last().expect("empty doc_hidden_stack")
      .               }
      .           
    871 ( 0.00%)      fn check_missing_docs_attrs(
      .                   &self,
      .                   cx: &LateContext<'_>,
      .                   def_id: LocalDefId,
      .                   sp: Span,
      .                   article: &'static str,
      .                   desc: &'static str,
      .               ) {
      .                   // If we're building a test harness, then warning about
      .                   // documentation is probably not really relevant right now.
    134 ( 0.00%)          if cx.sess().opts.test {
      .                       return;
      .                   }
      .           
      .                   // `#[doc(hidden)]` disables missing_docs check.
     67 ( 0.00%)          if self.doc_hidden() {
      .                       return;
      .                   }
      .           
      .                   // Only check publicly-visible items, using the result from the privacy pass.
      .                   // It's an option so the crate root can also use this function (it doesn't
      .                   // have a `NodeId`).
     67 ( 0.00%)          if def_id != CRATE_DEF_ID {
    234 ( 0.00%)              if !cx.access_levels.is_exported(def_id) {
      .                           return;
      .                       }
      .                   }
      .           
    147 ( 0.00%)          let attrs = cx.tcx.get_attrs(def_id.to_def_id());
      .                   let has_doc = attrs.iter().any(has_doc);
      .                   if !has_doc {
      7 ( 0.00%)              cx.struct_span_lint(
      .                           MISSING_DOCS,
      4 ( 0.00%)                  cx.tcx.sess.source_map().guess_head_span(sp),
      .                           |lint| {
      .                               lint.build(&format!("missing documentation for {} {}", article, desc)).emit()
      .                           },
      .                       );
      .                   }
    536 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MissingDoc {
208,579 ( 0.02%)      fn enter_lint_attrs(&mut self, _cx: &LateContext<'_>, attrs: &[ast::Attribute]) {
 29,797 ( 0.00%)          let doc_hidden = self.doc_hidden()
      .                       || attrs.iter().any(|attr| {
     90 ( 0.00%)                  attr.has_name(sym::doc)
      .                               && match attr.meta_item_list() {
      .                                   None => false,
      .                                   Some(l) => attr::list_contains_name(&l, sym::hidden),
      .                               }
      .                       });
      .                   self.doc_hidden_stack.push(doc_hidden);
238,376 ( 0.03%)      }
      .           
      .               fn exit_lint_attrs(&mut self, _: &LateContext<'_>, _attrs: &[ast::Attribute]) {
      .                   self.doc_hidden_stack.pop().expect("empty doc_hidden_stack");
      .               }
      .           
      6 ( 0.00%)      fn check_crate(&mut self, cx: &LateContext<'_>) {
     10 ( 0.00%)          self.check_missing_docs_attrs(
      .                       cx,
      .                       CRATE_DEF_ID,
      1 ( 0.00%)              cx.tcx.def_span(CRATE_DEF_ID),
      .                       "the",
      .                       "crate",
      .                   );
      4 ( 0.00%)      }
      .           
    204 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    104 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           // Issue #11592: traits are always considered exported, even when private.
      2 ( 0.00%)                  if let hir::VisibilityKind::Inherited = it.vis.node {
      .                               self.private_traits.insert(it.hir_id());
      .                               for trait_item_ref in trait_item_refs {
      .                                   self.private_traits.insert(trait_item_ref.id.hir_id());
      .                               }
      .                               return;
      .                           }
      .                       }
      2 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), items, .. }) => {
      .                           // If the trait is private, add the impl items to `private_traits` so they don't get
      .                           // reported for missing docs.
      3 ( 0.00%)                  let real_trait = trait_ref.path.res.def_id();
      1 ( 0.00%)                  let Some(def_id) = real_trait.as_local() else { return };
      4 ( 0.00%)                  let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(def_id) else { return };
      2 ( 0.00%)                  if let hir::VisibilityKind::Inherited = item.vis.node {
      .                               for impl_item_ref in items {
      .                                   self.private_traits.insert(impl_item_ref.id.hir_id());
      .                               }
      .                           }
      .                           return;
      .                       }
      .           
      .                       hir::ItemKind::TyAlias(..)
-- line 622 ----------------------------------------
-- line 627 ----------------------------------------
      .                       | hir::ItemKind::Struct(..)
      .                       | hir::ItemKind::Union(..)
      .                       | hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..) => {}
      .           
      .                       _ => return,
      .                   };
      .           
    279 ( 0.00%)          let (article, desc) = cx.tcx.article_and_description(it.def_id.to_def_id());
      .           
    186 ( 0.00%)          self.check_missing_docs_attrs(cx, it.def_id, it.span, article, desc);
    238 ( 0.00%)      }
      .           
      .               fn check_trait_item(&mut self, cx: &LateContext<'_>, trait_item: &hir::TraitItem<'_>) {
    175 ( 0.00%)          if self.private_traits.contains(&trait_item.hir_id()) {
      .                       return;
      .                   }
      .           
    280 ( 0.00%)          let (article, desc) = cx.tcx.article_and_description(trait_item.def_id.to_def_id());
      .           
    210 ( 0.00%)          self.check_missing_docs_attrs(cx, trait_item.def_id, trait_item.span, article, desc);
      .               }
      .           
    280 ( 0.00%)      fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {
      .                   // If the method is an impl for a trait, don't doc.
    168 ( 0.00%)          if method_context(cx, impl_item.hir_id()) == MethodLateContext::TraitImpl {
      .                       return;
      .                   }
      .           
      .                   // If the method is an impl for an item with docs_hidden, don't doc.
      .                   if method_context(cx, impl_item.hir_id()) == MethodLateContext::PlainImpl {
      .                       let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());
      .                       let impl_ty = cx.tcx.type_of(parent);
      .                       let outerdef = match impl_ty.kind() {
-- line 660 ----------------------------------------
-- line 668 ----------------------------------------
      .                       };
      .                       if is_hidden {
      .                           return;
      .                       }
      .                   }
      .           
      .                   let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());
      .                   self.check_missing_docs_attrs(cx, impl_item.def_id, impl_item.span, article, desc);
    224 ( 0.00%)      }
      .           
      .               fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'_>) {
      .                   let (article, desc) = cx.tcx.article_and_description(foreign_item.def_id.to_def_id());
      .                   self.check_missing_docs_attrs(cx, foreign_item.def_id, foreign_item.span, article, desc);
      .               }
      .           
      .               fn check_field_def(&mut self, cx: &LateContext<'_>, sf: &hir::FieldDef<'_>) {
      .                   if !sf.is_positional() {
-- line 684 ----------------------------------------
-- line 724 ----------------------------------------
      .               pub MISSING_COPY_IMPLEMENTATIONS,
      .               Allow,
      .               "detects potentially-forgotten implementations of `Copy`"
      .           }
      .           
      .           declare_lint_pass!(MissingCopyImplementations => [MISSING_COPY_IMPLEMENTATIONS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MissingCopyImplementations {
    306 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
    138 ( 0.00%)          if !cx.access_levels.is_reachable(item.def_id) {
      .                       return;
      .                   }
     14 ( 0.00%)          let (def, ty) = match item.kind {
      .                       hir::ItemKind::Struct(_, ref ast_generics) => {
      .                           if !ast_generics.params.is_empty() {
      .                               return;
      .                           }
      .                           let def = cx.tcx.adt_def(item.def_id);
      .                           (def, cx.tcx.mk_adt(def, cx.tcx.intern_substs(&[])))
      .                       }
      .                       hir::ItemKind::Union(_, ref ast_generics) => {
-- line 744 ----------------------------------------
-- line 768 ----------------------------------------
      .                       cx.struct_span_lint(MISSING_COPY_IMPLEMENTATIONS, item.span, |lint| {
      .                           lint.build(
      .                               "type could implement `Copy`; consider adding `impl \
      .                                     Copy`",
      .                           )
      .                           .emit()
      .                       })
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `missing_debug_implementations` lint detects missing
      .               /// implementations of [`fmt::Debug`].
      .               ///
      .               /// [`fmt::Debug`]: https://doc.rust-lang.org/std/fmt/trait.Debug.html
      .               ///
-- line 784 ----------------------------------------
-- line 811 ----------------------------------------
      .           #[derive(Default)]
      .           pub struct MissingDebugImplementations {
      .               impling_types: Option<LocalDefIdSet>,
      .           }
      .           
      .           impl_lint_pass!(MissingDebugImplementations => [MISSING_DEBUG_IMPLEMENTATIONS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MissingDebugImplementations {
    238 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
    138 ( 0.00%)          if !cx.access_levels.is_reachable(item.def_id) {
      .                       return;
      .                   }
      .           
      8 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) | hir::ItemKind::Enum(..) => {}
      .                       _ => return,
      .                   }
      .           
      .                   let Some(debug) = cx.tcx.get_diagnostic_item(sym::Debug) else {
      .                       return
      .                   };
      .           
-- line 832 ----------------------------------------
-- line 849 ----------------------------------------
      .                           lint.build(&format!(
      .                               "type does not implement `{}`; consider adding `#[derive(Debug)]` \
      .                                or a manual implementation",
      .                               cx.tcx.def_path_str(debug)
      .                           ))
      .                           .emit()
      .                       });
      .                   }
    170 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `anonymous_parameters` lint detects anonymous parameters in trait
      .               /// definitions.
      .               ///
      .               /// ### Example
      .               ///
-- line 865 ----------------------------------------
-- line 907 ----------------------------------------
      .           
      .           declare_lint_pass!(
      .               /// Checks for use of anonymous parameters (RFC 1685).
      .               AnonymousParameters => [ANONYMOUS_PARAMETERS]
      .           );
      .           
      .           impl EarlyLintPass for AnonymousParameters {
      .               fn check_trait_item(&mut self, cx: &EarlyContext<'_>, it: &ast::AssocItem) {
    140 ( 0.00%)          if cx.sess().edition() != Edition::Edition2015 {
      .                       // This is a hard error in future editions; avoid linting and erroring
      .                       return;
      .                   }
     35 ( 0.00%)          if let ast::AssocItemKind::Fn(box Fn { ref sig, .. }) = it.kind {
      .                       for arg in sig.decl.inputs.iter() {
    350 ( 0.00%)                  if let ast::PatKind::Ident(_, ident, None) = arg.pat.kind {
     35 ( 0.00%)                      if ident.name == kw::Empty {
      .                                   cx.struct_span_lint(ANONYMOUS_PARAMETERS, arg.pat.span, |lint| {
      .                                       let ty_snip = cx.sess().source_map().span_to_snippet(arg.ty.span);
      .           
      .                                       let (ty_snip, appl) = if let Ok(ref snip) = ty_snip {
      .                                           (snip.as_str(), Applicability::MachineApplicable)
      .                                       } else {
      .                                           ("<type>", Applicability::HasPlaceholders)
      .                                       };
-- line 930 ----------------------------------------
-- line 956 ----------------------------------------
      .               // compute it for every attribute.
      .               depr_attrs: Vec<&'static BuiltinAttribute>,
      .           }
      .           
      .           impl_lint_pass!(DeprecatedAttr => []);
      .           
      .           impl DeprecatedAttr {
      .               pub fn new() -> DeprecatedAttr {
      1 ( 0.00%)          DeprecatedAttr { depr_attrs: deprecated_attributes() }
      .               }
      .           }
      .           
      .           fn lint_deprecated_attr(
      .               cx: &EarlyContext<'_>,
      .               attr: &ast::Attribute,
      .               msg: &str,
      .               suggestion: Option<&str>,
-- line 972 ----------------------------------------
-- line 979 ----------------------------------------
      .                           String::new(),
      .                           Applicability::MachineApplicable,
      .                       )
      .                       .emit();
      .               })
      .           }
      .           
      .           impl EarlyLintPass for DeprecatedAttr {
  1,143 ( 0.00%)      fn check_attribute(&mut self, cx: &EarlyContext<'_>, attr: &ast::Attribute) {
    635 ( 0.00%)          for BuiltinAttribute { name, gate, .. } in &self.depr_attrs {
    582 ( 0.00%)              if attr.ident().map(|ident| ident.name) == Some(*name) {
      .                           if let &AttributeGate::Gated(
      .                               Stability::Deprecated(link, suggestion),
      .                               name,
      .                               reason,
      .                               _,
      .                           ) = gate
      .                           {
      .                               let msg =
      .                                   format!("use of deprecated attribute `{}`: {}. See {}", name, reason, link);
      .                               lint_deprecated_attr(cx, attr, &msg, suggestion);
      .                           }
      .                           return;
      .                       }
      .                   }
    148 ( 0.00%)          if attr.has_name(sym::no_start) || attr.has_name(sym::crate_id) {
      .                       let path_str = pprust::path_to_string(&attr.get_normal_item().path);
      .                       let msg = format!("use of deprecated attribute `{}`: no longer used.", path_str);
      .                       lint_deprecated_attr(cx, attr, &msg, None);
      .                   }
  1,016 ( 0.00%)      }
      .           }
      .           
354,144 ( 0.04%)  fn warn_if_doc(cx: &EarlyContext<'_>, node_span: Span, node_kind: &str, attrs: &[ast::Attribute]) {
      .               use rustc_ast::token::CommentKind;
      .           
      .               let mut attrs = attrs.iter().peekable();
      .           
      .               // Accumulate a single span for sugared doc comments.
      .               let mut sugared_span: Option<Span> = None;
      .           
      .               while let Some(attr) = attrs.next() {
-- line 1020 ----------------------------------------
-- line 1044 ----------------------------------------
      .                               AttrKind::DocComment(CommentKind::Block, _) => {
      .                                   err.help("use `/* */` for a plain comment");
      .                               }
      .                           }
      .                           err.emit();
      .                       });
      .                   }
      .               }
236,096 ( 0.02%)  }
      .           
      .           impl EarlyLintPass for UnusedDocComment {
      .               fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {
    108 ( 0.00%)          let kind = match stmt.kind {
      .                       ast::StmtKind::Local(..) => "statements",
      .                       // Disabled pending discussion in #78306
      .                       ast::StmtKind::Item(..) => return,
      .                       // expressions will be reported by `check_expr`.
      .                       ast::StmtKind::Empty
      .                       | ast::StmtKind::Semi(_)
      .                       | ast::StmtKind::Expr(_)
      .                       | ast::StmtKind::MacCall(_) => return,
      .                   };
      .           
      .                   warn_if_doc(cx, stmt.span, kind, stmt.kind.attrs());
      .               }
      .           
     91 ( 0.00%)      fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {
     91 ( 0.00%)          let arm_span = arm.pat.span.with_hi(arm.body.span.hi());
    130 ( 0.00%)          warn_if_doc(cx, arm_span, "match arms", &arm.attrs);
      .               }
      .           
      .               fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {
235,992 ( 0.02%)          warn_if_doc(cx, expr.span, "expressions", &expr.attrs);
      .               }
      .           
      .               fn check_generic_param(&mut self, cx: &EarlyContext<'_>, param: &ast::GenericParam) {
      .                   warn_if_doc(cx, param.ident.span, "generic parameters", &param.attrs);
      .               }
      .           }
      .           
      .           declare_lint! {
-- line 1084 ----------------------------------------
-- line 1133 ----------------------------------------
      .               NO_MANGLE_GENERIC_ITEMS,
      .               Warn,
      .               "generic items must be mangled"
      .           }
      .           
      .           declare_lint_pass!(InvalidNoMangleItems => [NO_MANGLE_CONST_ITEMS, NO_MANGLE_GENERIC_ITEMS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for InvalidNoMangleItems {
    306 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    238 ( 0.00%)          let attrs = cx.tcx.hir().attrs(it.hir_id());
      .                   let check_no_mangle_on_generic_fn = |no_mangle_attr: &ast::Attribute,
      .                                                        impl_generics: Option<&hir::Generics<'_>>,
      .                                                        generics: &hir::Generics<'_>,
      .                                                        span| {
      .                       for param in
      .                           generics.params.iter().chain(impl_generics.map(|g| g.params).into_iter().flatten())
      .                       {
      .                           match param.kind {
-- line 1150 ----------------------------------------
-- line 1162 ----------------------------------------
      .                                           )
      .                                           .emit();
      .                                   });
      .                                   break;
      .                               }
      .                           }
      .                       }
      .                   };
    236 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Fn(.., ref generics, _) => {
      5 ( 0.00%)                  if let Some(no_mangle_attr) = cx.sess().find_by_name(attrs, sym::no_mangle) {
      .                               check_no_mangle_on_generic_fn(no_mangle_attr, None, generics, it.span);
      .                           }
      .                       }
      .                       hir::ItemKind::Const(..) => {
      .                           if cx.sess().contains_name(attrs, sym::no_mangle) {
      .                               // Const items do not refer to a particular location in memory, and therefore
      .                               // don't have anything to attach a symbol to
      .                               cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, |lint| {
-- line 1180 ----------------------------------------
-- line 1196 ----------------------------------------
      .                                       "try a static value",
      .                                       "pub static".to_owned(),
      .                                       Applicability::MachineApplicable,
      .                                   );
      .                                   err.emit();
      .                               });
      .                           }
      .                       }
      1 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { ref generics, items, .. }) => {
      .                           for it in items {
    166 ( 0.00%)                      if let hir::AssocItemKind::Fn { .. } = it.kind {
    168 ( 0.00%)                          if let Some(no_mangle_attr) = cx
      .                                       .sess()
    140 ( 0.00%)                              .find_by_name(cx.tcx.hir().attrs(it.id.hir_id()), sym::no_mangle)
      .                                   {
      .                                       check_no_mangle_on_generic_fn(
      .                                           no_mangle_attr,
      .                                           Some(generics),
      .                                           cx.tcx.hir().get_generics(it.id.def_id).unwrap(),
      .                                           it.span,
      .                                       );
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       _ => {}
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `mutable_transmutes` lint catches transmuting from `&T` to `&mut
      .               /// T` because it is [undefined behavior].
      .               ///
      .               /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html
      .               ///
-- line 1231 ----------------------------------------
-- line 1248 ----------------------------------------
      .               MUTABLE_TRANSMUTES,
      .               Deny,
      .               "transmuting &T to &mut T is undefined behavior, even if the reference is unused"
      .           }
      .           
      .           declare_lint_pass!(MutableTransmutes => [MUTABLE_TRANSMUTES]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for MutableTransmutes {
206,745 ( 0.02%)      fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {
      .                   use rustc_target::spec::abi::Abi::RustIntrinsic;
      .                   if let Some((&ty::Ref(_, _, from_mt), &ty::Ref(_, _, to_mt))) =
      .                       get_transmute_from_to(cx, expr).map(|(ty1, ty2)| (ty1.kind(), ty2.kind()))
      .                   {
      .                       if to_mt == hir::Mutability::Mut && from_mt == hir::Mutability::Not {
      .                           let msg = "transmuting &T to &mut T is undefined behavior, \
      .                               even if the reference is unused, consider instead using an UnsafeCell";
      .                           cx.struct_span_lint(MUTABLE_TRANSMUTES, expr.span, |lint| lint.build(msg).emit());
      .                       }
      .                   }
      .           
      .                   fn get_transmute_from_to<'tcx>(
      .                       cx: &LateContext<'tcx>,
      .                       expr: &hir::Expr<'_>,
      .                   ) -> Option<(Ty<'tcx>, Ty<'tcx>)> {
 59,187 ( 0.01%)              let def = if let hir::ExprKind::Path(ref qpath) = expr.kind {
    468 ( 0.00%)                  cx.qpath_res(qpath, expr.hir_id)
      .                       } else {
      .                           return None;
      .                       };
    402 ( 0.00%)              if let Res::Def(DefKind::Fn, did) = def {
      .                           if !def_id_is_transmute(cx, did) {
      .                               return None;
      .                           }
      .                           let sig = cx.typeck_results().node_type(expr.hir_id).fn_sig(cx.tcx);
      .                           let from = sig.inputs().skip_binder()[0];
      .                           let to = sig.output().skip_binder();
      .                           return Some((from, to));
      .                       }
      .                       None
      .                   }
      .           
      .                   fn def_id_is_transmute(cx: &LateContext<'_>, def_id: DefId) -> bool {
    112 ( 0.00%)              cx.tcx.fn_sig(def_id).abi() == RustIntrinsic
      .                           && cx.tcx.item_name(def_id) == sym::transmute
      .                   }
236,280 ( 0.02%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `unstable_features` is deprecated and should no longer be used.
      .               UNSTABLE_FEATURES,
      .               Allow,
      .               "enabling unstable features (deprecated. do not use)"
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Forbids using the `#[feature(...)]` attribute
      .               UnstableFeatures => [UNSTABLE_FEATURES]
      .           );
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnstableFeatures {
    889 ( 0.00%)      fn check_attribute(&mut self, cx: &LateContext<'_>, attr: &ast::Attribute) {
     37 ( 0.00%)          if attr.has_name(sym::feature) {
      .                       if let Some(items) = attr.meta_item_list() {
      .                           for item in items {
      .                               cx.struct_span_lint(UNSTABLE_FEATURES, item.span(), |lint| {
      .                                   lint.build("unstable feature").emit()
      .                               });
      .                           }
      .                       }
      .                   }
  1,016 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `unreachable_pub` lint triggers for `pub` items not reachable from
      .               /// the crate root.
      .               ///
      .               /// ### Example
      .               ///
-- line 1327 ----------------------------------------
-- line 1352 ----------------------------------------
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Lint for items marked `pub` that aren't reachable from other crates.
      .               UnreachablePub => [UNREACHABLE_PUB]
      .           );
      .           
      .           impl UnreachablePub {
    496 ( 0.00%)      fn perform_lint(
      .                   &self,
      .                   cx: &LateContext<'_>,
      .                   what: &str,
      .                   def_id: LocalDefId,
      .                   vis: &hir::Visibility<'_>,
      .                   span: Span,
      .                   exportable: bool,
      .               ) {
     62 ( 0.00%)          let mut applicability = Applicability::MachineApplicable;
    124 ( 0.00%)          match vis.node {
     88 ( 0.00%)              hir::VisibilityKind::Public if !cx.access_levels.is_reachable(def_id) => {
     54 ( 0.00%)                  if span.from_expansion() {
      .                               applicability = Applicability::MaybeIncorrect;
      .                           }
    140 ( 0.00%)                  let def_span = cx.tcx.sess.source_map().guess_head_span(span);
    336 ( 0.00%)                  cx.struct_span_lint(UNREACHABLE_PUB, def_span, |lint| {
      .                               let mut err = lint.build(&format!("unreachable `pub` {}", what));
      .                               let replacement = if cx.tcx.features().crate_visibility_modifier {
      .                                   "crate"
      .                               } else {
      .                                   "pub(crate)"
      .                               }
      .                               .to_owned();
      .           
-- line 1384 ----------------------------------------
-- line 1391 ----------------------------------------
      .                               if exportable {
      .                                   err.help("or consider exporting it for use by other crates");
      .                               }
      .                               err.emit();
      .                           });
      .                       }
      .                       _ => {}
      .                   }
    310 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnreachablePub {
      .               fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
    272 ( 0.00%)          self.perform_lint(cx, "item", item.def_id, &item.vis, item.span, true);
      .               }
      .           
      .               fn check_foreign_item(&mut self, cx: &LateContext<'_>, foreign_item: &hir::ForeignItem<'tcx>) {
      .                   self.perform_lint(
      .                       cx,
      .                       "item",
      .                       foreign_item.def_id,
      .                       &foreign_item.vis,
-- line 1412 ----------------------------------------
-- line 1416 ----------------------------------------
      .               }
      .           
      .               fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {
      .                   let def_id = cx.tcx.hir().local_def_id(field.hir_id);
      .                   self.perform_lint(cx, "field", def_id, &field.vis, field.span, false);
      .               }
      .           
      .               fn check_impl_item(&mut self, cx: &LateContext<'_>, impl_item: &hir::ImplItem<'_>) {
    280 ( 0.00%)          self.perform_lint(cx, "item", impl_item.def_id, &impl_item.vis, impl_item.span, false);
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `type_alias_bounds` lint detects bounds in type aliases.
      .               ///
      .               /// ### Example
      .               ///
-- line 1432 ----------------------------------------
-- line 1493 ----------------------------------------
      .           
      .                   // Let's go for a walk!
      .                   let mut visitor = WalkAssocTypes { err };
      .                   visitor.visit_ty(ty);
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for TypeAliasBounds {
    238 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {
     68 ( 0.00%)          let hir::ItemKind::TyAlias(ty, type_alias_generics) = &item.kind else {
      .                       return
      .                   };
      .                   if let hir::TyKind::OpaqueDef(..) = ty.kind {
      .                       // Bounds are respected for `type X = impl Trait`
      .                       return;
      .                   }
      .                   let mut suggested_changing_assoc_types = false;
      .                   // There must not be a where clause
-- line 1510 ----------------------------------------
-- line 1554 ----------------------------------------
      .                               if !suggested_changing_assoc_types {
      .                                   TypeAliasBounds::suggest_changing_assoc_types(ty, &mut err);
      .                                   suggested_changing_assoc_types = true;
      .                               }
      .                               err.emit();
      .                           });
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Lint constants that are erroneous.
      .               /// Without this lint, we might not get any diagnostic if the constant is
      .               /// unused within this crate, even though downstream crates can't use it
      .               /// without producing an error.
      .               UnusedBrokenConst => []
      .           );
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnusedBrokenConst {
      .               fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
    170 ( 0.00%)          match it.kind {
      .                       hir::ItemKind::Const(_, body_id) => {
      .                           let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();
      .                           // trigger the query once for all constants since that will already report the errors
      .                           // FIXME: Use ensure here
      .                           let _ = cx.tcx.const_eval_poly(def_id);
      .                       }
     56 ( 0.00%)              hir::ItemKind::Static(_, _, body_id) => {
    112 ( 0.00%)                  let def_id = cx.tcx.hir().body_owner_def_id(body_id).to_def_id();
      .                           // FIXME: Use ensure here
    140 ( 0.00%)                  let _ = cx.tcx.eval_static_initializer(def_id);
      .                       }
      .                       _ => {}
      .                   }
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `trivial_bounds` lint detects trait bounds that don't depend on
-- line 1593 ----------------------------------------
-- line 1626 ----------------------------------------
      .           
      .           declare_lint_pass!(
      .               /// Lint for trait and lifetime bounds that don't depend on type parameters
      .               /// which either do nothing, or stop the item from being used.
      .               TrivialConstraints => [TRIVIAL_BOUNDS]
      .           );
      .           
      .           impl<'tcx> LateLintPass<'tcx> for TrivialConstraints {
    306 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {
      .                   use rustc_middle::ty::fold::TypeFoldable;
      .                   use rustc_middle::ty::PredicateKind::*;
      .           
    136 ( 0.00%)          if cx.tcx.features().trivial_bounds {
      .                       let predicates = cx.tcx.predicates_of(item.def_id);
      .                       for &(predicate, span) in predicates.predicates {
      .                           let predicate_kind_name = match predicate.kind().skip_binder() {
      .                               Trait(..) => "trait",
      .                               TypeOutlives(..) |
      .                               RegionOutlives(..) => "lifetime",
      .           
      .                               // Ignore projections, as they can only be global
-- line 1646 ----------------------------------------
-- line 1663 ----------------------------------------
      .                                           or lifetime parameters",
      .                                       predicate_kind_name, predicate
      .                                   ))
      .                                   .emit()
      .                               });
      .                           }
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           declare_lint_pass!(
      .               /// Does nothing as a lint pass, but registers some `Lint`s
      .               /// which are used by other parts of the compiler.
      .               SoftLints => [
      .                   WHILE_TRUE,
      .                   BOX_POINTERS,
-- line 1679 ----------------------------------------
-- line 1732 ----------------------------------------
      .               /// If `Some(_)`, suppress all subsequent pattern
      .               /// warnings for better diagnostics.
      .               node_id: Option<ast::NodeId>,
      .           }
      .           
      .           impl_lint_pass!(EllipsisInclusiveRangePatterns => [ELLIPSIS_INCLUSIVE_RANGE_PATTERNS]);
      .           
      .           impl EarlyLintPass for EllipsisInclusiveRangePatterns {
    546 ( 0.00%)      fn check_pat(&mut self, cx: &EarlyContext<'_>, pat: &ast::Pat) {
     78 ( 0.00%)          if self.node_id.is_some() {
      .                       // Don't recursively warn about patterns inside range endpoints.
      .                       return;
      .                   }
      .           
      .                   use self::ast::{PatKind, RangeSyntax::DotDotDot};
      .           
      .                   /// If `pat` is a `...` pattern, return the start and end of the range, as well as the span
      .                   /// corresponding to the ellipsis.
      .                   fn matches_ellipsis_pat(pat: &ast::Pat) -> Option<(Option<&Expr>, &Expr, Span)> {
    222 ( 0.00%)              match &pat.kind {
      .                           PatKind::Range(
      .                               a,
      .                               Some(b),
      .                               Spanned { span, node: RangeEnd::Included(DotDotDot) },
      .                           ) => Some((a.as_deref(), b, *span)),
      .                           _ => None,
      .                       }
      .                   }
      .           
    245 ( 0.00%)          let (parenthesise, endpoints) = match &pat.kind {
      .                       PatKind::Ref(subpat, _) => (true, matches_ellipsis_pat(&subpat)),
      .                       _ => (false, matches_ellipsis_pat(pat)),
      .                   };
      .           
     11 ( 0.00%)          if let Some((start, end, join)) = endpoints {
     33 ( 0.00%)              let msg = "`...` range patterns are deprecated";
      .                       let suggestion = "use `..=` for an inclusive range";
     11 ( 0.00%)              if parenthesise {
      .                           self.node_id = Some(pat.id);
      .                           let end = expr_to_string(&end);
      .                           let replace = match start {
      .                               Some(start) => format!("&({}..={})", expr_to_string(&start), end),
      .                               None => format!("&(..={})", end),
      .                           };
      .                           if join.edition() >= Edition::Edition2021 {
      .                               let mut err =
-- line 1777 ----------------------------------------
-- line 1792 ----------------------------------------
      .                                           replace,
      .                                           Applicability::MachineApplicable,
      .                                       )
      .                                       .emit();
      .                               });
      .                           }
      .                       } else {
      .                           let replace = "..=".to_owned();
     33 ( 0.00%)                  if join.edition() >= Edition::Edition2021 {
      .                               let mut err =
      .                                   rustc_errors::struct_span_err!(cx.sess(), pat.span, E0783, "{}", msg,);
      .                               err.span_suggestion_short(
      .                                   join,
      .                                   suggestion,
      .                                   replace,
      .                                   Applicability::MachineApplicable,
      .                               )
      .                               .emit();
      .                           } else {
    187 ( 0.00%)                      cx.struct_span_lint(ELLIPSIS_INCLUSIVE_RANGE_PATTERNS, join, |lint| {
     99 ( 0.00%)                          lint.build(msg)
      .                                       .span_suggestion_short(
     22 ( 0.00%)                                  join,
     22 ( 0.00%)                                  suggestion,
     66 ( 0.00%)                                  replace,
      .                                           Applicability::MachineApplicable,
      .                                       )
      .                                       .emit();
      .                               });
      .                           }
      .                       };
      .                   }
    624 ( 0.00%)      }
      .           
      .               fn check_pat_post(&mut self, _cx: &EarlyContext<'_>, pat: &ast::Pat) {
    234 ( 0.00%)          if let Some(node_id) = self.node_id {
      .                       if pat.id == node_id {
      .                           self.node_id = None
      .                       }
      .                   }
      .               }
      .           }
      .           
      .           declare_lint! {
-- line 1835 ----------------------------------------
-- line 1880 ----------------------------------------
      .           
      .           impl UnnameableTestItems {
      .               pub fn new() -> Self {
      .                   Self { boundary: None, items_nameable: true }
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for UnnameableTestItems {
    170 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {
     68 ( 0.00%)          if self.items_nameable {
     68 ( 0.00%)              if let hir::ItemKind::Mod(..) = it.kind {
      .                       } else {
     33 ( 0.00%)                  self.items_nameable = false;
     99 ( 0.00%)                  self.boundary = Some(it.def_id);
      .                       }
      .                       return;
      .                   }
      .           
      .                   let attrs = cx.tcx.hir().attrs(it.hir_id());
      .                   if let Some(attr) = cx.sess().find_by_name(attrs, sym::rustc_test_marker) {
      .                       cx.struct_span_lint(UNNAMEABLE_TEST_ITEMS, attr.span, |lint| {
      .                           lint.build("cannot test inner items").emit()
      .                       });
      .                   }
    204 ( 0.00%)      }
      .           
      .               fn check_item_post(&mut self, _cx: &LateContext<'_>, it: &hir::Item<'_>) {
    200 ( 0.00%)          if !self.items_nameable && self.boundary == Some(it.def_id) {
     33 ( 0.00%)              self.items_nameable = true;
      .                   }
      .               }
      .           }
      .           
      .           declare_lint! {
      .               /// The `keyword_idents` lint detects edition keywords being used as an
      .               /// identifier.
      .               ///
-- line 1916 ----------------------------------------
-- line 1958 ----------------------------------------
      .           declare_lint_pass!(
      .               /// Check for uses of edition keywords used as an identifier.
      .               KeywordIdents => [KEYWORD_IDENTS]
      .           );
      .           
      .           struct UnderMacro(bool);
      .           
      .           impl KeywordIdents {
    192 ( 0.00%)      fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: TokenStream) {
    967 ( 0.00%)          for tt in tokens.into_trees() {
    106 ( 0.00%)              match tt {
      .                           // Only report non-raw idents.
    164 ( 0.00%)                  TokenTree::Token(token) => {
    200 ( 0.00%)                      if let Some((ident, false)) = token.ident() {
     48 ( 0.00%)                          self.check_ident_token(cx, UnderMacro(true), ident);
      .                               }
      .                           }
     24 ( 0.00%)                  TokenTree::Delimited(_, _, tts) => self.check_tokens(cx, tts),
      .                       }
      .                   }
    192 ( 0.00%)      }
      .           
  5,616 ( 0.00%)      fn check_ident_token(
      .                   &mut self,
      .                   cx: &EarlyContext<'_>,
      .                   UnderMacro(under_macro): UnderMacro,
      .                   ident: Ident,
      .               ) {
  1,872 ( 0.00%)          let next_edition = match cx.sess().edition() {
      .                       Edition::Edition2015 => {
  3,276 ( 0.00%)                  match ident.name {
      .                               kw::Async | kw::Await | kw::Try => Edition::Edition2018,
      .           
      .                               // rust-lang/rust#56327: Conservatively do not
      .                               // attempt to report occurrences of `dyn` within
      .                               // macro definitions or invocations, because `dyn`
      .                               // can legitimately occur as a contextual keyword
      .                               // in 2015 code denoting its 2018 meaning, and we
      .                               // do not want rustfix to inject bugs into working
      .                               // code by rewriting such occurrences.
      .                               //
      .                               // But if we see `dyn` outside of a macro, we know
      .                               // its precise role in the parsed AST and thus are
      .                               // assured this is truly an attempt to use it as
      .                               // an identifier.
    936 ( 0.00%)                      kw::Dyn if !under_macro => Edition::Edition2018,
      .           
      .                               _ => return,
      .                           }
      .                       }
      .           
      .                       // There are no new keywords yet for the 2018 edition and beyond.
      .                       _ => return,
      .                   };
-- line 2011 ----------------------------------------
-- line 2020 ----------------------------------------
      .                           .span_suggestion(
      .                               ident.span,
      .                               "you can use a raw identifier to stay compatible",
      .                               format!("r#{}", ident),
      .                               Applicability::MachineApplicable,
      .                           )
      .                           .emit()
      .                   });
  3,276 ( 0.00%)      }
      .           }
      .           
      .           impl EarlyLintPass for KeywordIdents {
      .               fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {
      .                   self.check_tokens(cx, mac_def.body.inner_tokens());
      .               }
      .               fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {
     60 ( 0.00%)          self.check_tokens(cx, mac.args.inner_tokens());
      .               }
      .               fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {
    912 ( 0.00%)          self.check_ident_token(cx, UnderMacro(false), ident);
      .               }
      .           }
      .           
      2 ( 0.00%)  declare_lint_pass!(ExplicitOutlivesRequirements => [EXPLICIT_OUTLIVES_REQUIREMENTS]);
      .           
      .           impl ExplicitOutlivesRequirements {
      .               fn lifetimes_outliving_lifetime<'tcx>(
      .                   inferred_outlives: &'tcx [(ty::Predicate<'tcx>, Span)],
      .                   index: u32,
      .               ) -> Vec<ty::Region<'tcx>> {
      .                   inferred_outlives
      .                       .iter()
-- line 2051 ----------------------------------------
-- line 2179 ----------------------------------------
      .                           }
      .                       }
      .                       merged
      .                   }
      .               }
      .           }
      .           
      .           impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {
    306 ( 0.00%)      fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {
      .                   use rustc_middle::middle::resolve_lifetime::Region;
      .           
    136 ( 0.00%)          let infer_static = cx.tcx.features().infer_static_outlives_requirements;
     34 ( 0.00%)          let def_id = item.def_id;
    238 ( 0.00%)          if let hir::ItemKind::Struct(_, ref hir_generics)
      .                   | hir::ItemKind::Enum(_, ref hir_generics)
      .                   | hir::ItemKind::Union(_, ref hir_generics) = item.kind
      .                   {
      .                       let inferred_outlives = cx.tcx.inferred_outlives_of(def_id);
      .                       if inferred_outlives.is_empty() {
      .                           return;
      .                       }
      .           
-- line 2200 ----------------------------------------
-- line 2338 ----------------------------------------
      .                                           .map(|span| (span, "".to_owned()))
      .                                           .collect::<Vec<_>>(),
      .                                       Applicability::MachineApplicable,
      .                                   )
      .                                   .emit();
      .                           });
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `incomplete_features` lint detects unstable features enabled with
      .               /// the [`feature` attribute] that may function improperly in some or all
      .               /// cases.
      .               ///
      .               /// [`feature` attribute]: https://doc.rust-lang.org/nightly/unstable-book/
-- line 2354 ----------------------------------------
-- line 2448 ----------------------------------------
      .               pub INVALID_VALUE,
      .               Warn,
      .               "an invalid value is being created (such as a null reference)"
      .           }
      .           
      .           declare_lint_pass!(InvalidValue => [INVALID_VALUE]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for InvalidValue {
206,745 ( 0.02%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) {
      .                   #[derive(Debug, Copy, Clone, PartialEq)]
      .                   enum InitKind {
      .                       Zeroed,
      .                       Uninit,
      .                   }
      .           
      .                   /// Information about why a type cannot be initialized this way.
      .                   /// Contains an error message and optionally a span to point at.
-- line 2464 ----------------------------------------
-- line 2478 ----------------------------------------
      .                           }
      .                           Tup(tup) => tup.iter().all(is_zero),
      .                           _ => false,
      .                       }
      .                   }
      .           
      .                   /// Determine if this expression is a "dangerous initialization".
      .                   fn is_dangerous_init(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<InitKind> {
147,613 ( 0.02%)              if let hir::ExprKind::Call(ref path_expr, ref args) = expr.kind {
      .                           // Find calls to `mem::{uninitialized,zeroed}` methods.
    112 ( 0.00%)                  if let hir::ExprKind::Path(ref qpath) = path_expr.kind {
    252 ( 0.00%)                      let def_id = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;
    224 ( 0.00%)                      match cx.tcx.get_diagnostic_name(def_id) {
      .                                   Some(sym::mem_zeroed) => return Some(InitKind::Zeroed),
      .                                   Some(sym::mem_uninitialized) => return Some(InitKind::Uninit),
      .                                   Some(sym::transmute) if is_zero(&args[0]) => return Some(InitKind::Zeroed),
      .                                   _ => {}
      .                               }
      .                           }
      .                       } else if let hir::ExprKind::MethodCall(_, ref args, _) = expr.kind {
      .                           // Find problematic calls to `MaybeUninit::assume_init`.
    155 ( 0.00%)                  let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id)?;
    186 ( 0.00%)                  if cx.tcx.is_diagnostic_item(sym::assume_init, def_id) {
      .                               // This is a call to *some* method named `assume_init`.
      .                               // See if the `self` parameter is one of the dangerous constructors.
      .                               if let hir::ExprKind::Call(ref path_expr, _) = args[0].kind {
      .                                   if let hir::ExprKind::Path(ref qpath) = path_expr.kind {
      .                                       let def_id = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id()?;
      .                                       match cx.tcx.get_diagnostic_name(def_id) {
      .                                           Some(sym::maybe_uninit_zeroed) => return Some(InitKind::Zeroed),
      .                                           Some(sym::maybe_uninit_uninit) => return Some(InitKind::Uninit),
-- line 2508 ----------------------------------------
-- line 2655 ----------------------------------------
      .                                   err.span_note(span, &msg);
      .                               } else {
      .                                   err.note(&msg);
      .                               }
      .                               err.emit();
      .                           });
      .                       }
      .                   }
177,210 ( 0.02%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `clashing_extern_declarations` lint detects when an `extern fn`
      .               /// has been declared with the same name but different types.
      .               ///
      .               /// ### Example
      .               ///
-- line 2671 ----------------------------------------
-- line 3078 ----------------------------------------
      .               pub DEREF_NULLPTR,
      .               Warn,
      .               "detects when an null pointer is dereferenced"
      .           }
      .           
      .           declare_lint_pass!(DerefNullPtr => [DEREF_NULLPTR]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for DerefNullPtr {
 88,605 ( 0.01%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) {
      .                   /// test if expression is a null ptr
      .                   fn is_null_ptr(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {
      .                       match &expr.kind {
      .                           rustc_hir::ExprKind::Cast(ref expr, ref ty) => {
      .                               if let rustc_hir::TyKind::Ptr(_) = ty.kind {
      .                                   return is_zero(expr) || is_null_ptr(cx, expr);
      .                               }
      .                           }
-- line 3094 ----------------------------------------
-- line 3116 ----------------------------------------
      .                                   return a == 0;
      .                               }
      .                           }
      .                           _ => {}
      .                       }
      .                       false
      .                   }
      .           
 59,070 ( 0.01%)          if let rustc_hir::ExprKind::Unary(rustc_hir::UnOp::Deref, expr_deref) = expr.kind {
      .                       if is_null_ptr(cx, expr_deref) {
      .                           cx.struct_span_lint(DEREF_NULLPTR, expr.span, |lint| {
      .                               let mut err = lint.build("dereferencing a null pointer");
      .                               err.span_label(expr.span, "this code causes undefined behavior when executed");
      .                               err.emit();
      .                           });
      .                       }
      .                   }
118,140 ( 0.01%)      }
      .           }
      .           
      .           declare_lint! {
      .               /// The `named_asm_labels` lint detects the use of named labels in the
      .               /// inline `asm!` macro.
      .               ///
      .               /// ### Example
      .               ///
-- line 3141 ----------------------------------------
-- line 3162 ----------------------------------------
      .               pub NAMED_ASM_LABELS,
      .               Deny,
      .               "named labels in inline assembly",
      .           }
      .           
      .           declare_lint_pass!(NamedAsmLabels => [NAMED_ASM_LABELS]);
      .           
      .           impl<'tcx> LateLintPass<'tcx> for NamedAsmLabels {
206,745 ( 0.02%)      fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {
 59,070 ( 0.01%)          if let hir::Expr {
      .                       kind: hir::ExprKind::InlineAsm(hir::InlineAsm { template_strs, .. }),
      .                       ..
      .                   } = expr
      .                   {
      .                       for (template_sym, template_snippet, template_span) in template_strs.iter() {
      .                           let template_str = template_sym.as_str();
      .                           let find_label_span = |needle: &str| -> Option<Span> {
      .                               if let Some(template_snippet) = template_snippet {
-- line 3179 ----------------------------------------
-- line 3242 ----------------------------------------
      .                                       BuiltinLintDiagnostics::NamedAsmLabel(
      .                                           "only local labels of the form `<number>:` should be used in inline asm"
      .                                               .to_string(),
      .                                       ),
      .                                   );
      .                           }
      .                       }
      .                   }
236,280 ( 0.02%)      }
      .           }

 30,959 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/builtin.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 159 ----------------------------------------
      .               /// let s = "not empty";
      .               /// assert!(!s.is_empty());
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "const_str_is_empty", since = "1.39.0")]
      .               #[must_use]
      .               #[inline]
      .               pub const fn is_empty(&self) -> bool {
141,143 ( 0.01%)          self.len() == 0
      .               }
      .           
      .               /// Checks that `index`-th byte is the first byte in a UTF-8 code point
      .               /// sequence or the end of the string.
      .               ///
      .               /// The start and end of the string (when `index == self.len()`) are
      .               /// considered to be boundaries.
      .               ///
-- line 175 ----------------------------------------
-- line 193 ----------------------------------------
      .               #[must_use]
      .               #[stable(feature = "is_char_boundary", since = "1.9.0")]
      .               #[inline]
      .               pub fn is_char_boundary(&self, index: usize) -> bool {
      .                   // 0 is always ok.
      .                   // Test for 0 explicitly so that it can optimize out the check
      .                   // easily and skip reading string data for that case.
      .                   // Note that optimizing `self.get(..index)` relies on this.
847,040 ( 0.09%)          if index == 0 {
      .                       return true;
      .                   }
      .           
424,775 ( 0.04%)          match self.as_bytes().get(index) {
      .                       // For `None` we have two options:
      .                       //
      .                       // - index == self.len()
      .                       //   Empty strings are valid, so return true
      .                       // - index > self.len()
      .                       //   In this case return false
      .                       //
      .                       // The check is placed exactly here, because it improves generated
      .                       // code on higher opt-levels. See PR #84751 for more details.
150,973 ( 0.02%)              None => index == self.len(),
      .           
      .                       // This is bit magic equivalent to: b < 128 || b >= 192
276,096 ( 0.03%)              Some(&b) => (b as i8) >= -0x40,
      .                   }
      .               }
      .           
      .               /// Converts a string slice to a byte slice. To convert the byte slice back
      .               /// into a string slice, use the [`from_utf8`] function.
      .               ///
      .               /// # Examples
      .               ///
-- line 226 ----------------------------------------
-- line 306 ----------------------------------------
      .               /// let s = "Hello";
      .               /// let ptr = s.as_ptr();
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[rustc_const_stable(feature = "rustc_str_as_ptr", since = "1.32.0")]
      .               #[must_use]
      .               #[inline]
      .               pub const fn as_ptr(&self) -> *const u8 {
      6 ( 0.00%)          self as *const str as *const u8
      .               }
      .           
      .               /// Converts a mutable string slice to a raw pointer.
      .               ///
      .               /// As string slices are a slice of bytes, the raw pointer points to a
      .               /// [`u8`]. This pointer will be pointing to the first byte of the string
      .               /// slice.
      .               ///
-- line 322 ----------------------------------------
-- line 808 ----------------------------------------
      .               ///
      .               /// assert_eq!(None, iter.next());
      .               /// ```
      .               #[must_use = "this returns the split string as an iterator, \
      .                             without modifying the original"]
      .               #[stable(feature = "split_whitespace", since = "1.1.0")]
      .               #[inline]
      .               pub fn split_whitespace(&self) -> SplitWhitespace<'_> {
      9 ( 0.00%)          SplitWhitespace { inner: self.split(IsWhitespace).filter(IsNotEmpty) }
      .               }
      .           
      .               /// Splits a string slice by ASCII whitespace.
      .               ///
      .               /// The iterator returned will return string slices that are sub-slices of
      .               /// the original string slice, separated by any amount of ASCII whitespace.
      .               ///
      .               /// To split by Unicode `Whitespace` instead, use [`split_whitespace`].
-- line 824 ----------------------------------------
-- line 1056 ----------------------------------------
      .               /// ```
      .               /// let s = "Löwe 老虎 Léopard";
      .               /// let x: &[_] = &['1', '2'];
      .               ///
      .               /// assert_eq!(s.find(x), None);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      6 ( 0.00%)      pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {
      1 ( 0.00%)          pat.into_searcher(self).next_match().map(|(i, _)| i)
      2 ( 0.00%)      }
      .           
      .               /// Returns the byte index for the first character of the rightmost match of the pattern in
      .               /// this string slice.
      .               ///
      .               /// Returns [`None`] if the pattern doesn't match.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
-- line 1074 ----------------------------------------
-- line 1102 ----------------------------------------
      .               /// ```
      .               /// let s = "Löwe 老虎 Léopard";
      .               /// let x: &[_] = &['1', '2'];
      .               ///
      .               /// assert_eq!(s.rfind(x), None);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
  1,312 ( 0.00%)      pub fn rfind<'a, P>(&'a self, pat: P) -> Option<usize>
      .               where
      .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
      .               {
      .                   pat.into_searcher(self).next_match_back().map(|(i, _)| i)
  1,312 ( 0.00%)      }
      .           
      .               /// An iterator over substrings of this string slice, separated by
      .               /// characters matched by a pattern.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
      .               ///
      .               /// [`char`]: prim@char
-- line 1123 ----------------------------------------
-- line 1225 ----------------------------------------
      .               /// ```
      .               ///
      .               /// Use [`split_whitespace`] for this behavior.
      .               ///
      .               /// [`split_whitespace`]: str::split_whitespace
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {
    696 ( 0.00%)          Split(SplitInternal {
      .                       start: 0,
      .                       end: self.len(),
      .                       matcher: pat.into_searcher(self),
      .                       allow_trailing_empty: true,
      .                       finished: false,
      .                   })
      .               }
      .           
-- line 1241 ----------------------------------------
-- line 1472 ----------------------------------------
      .               ///
      .               /// ```
      .               /// let v: Vec<&str> = "abc1defXghi".splitn(2, |c| c == '1' || c == 'X').collect();
      .               /// assert_eq!(v, ["abc", "defXghi"]);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
      .               pub fn splitn<'a, P: Pattern<'a>>(&'a self, n: usize, pat: P) -> SplitN<'a, P> {
    166 ( 0.00%)          SplitN(SplitNInternal { iter: self.split(pat).0, count: n })
      .               }
      .           
      .               /// An iterator over substrings of this string slice, separated by a
      .               /// pattern, starting from the end of the string, restricted to returning
      .               /// at most `n` items.
      .               ///
      .               /// If `n` substrings are returned, the last substring (the `n`th substring)
      .               /// will contain the remainder of the string.
-- line 1488 ----------------------------------------
-- line 1540 ----------------------------------------
      .               /// ```
      .               /// assert_eq!("cfg".split_once('='), None);
      .               /// assert_eq!("cfg=foo".split_once('='), Some(("cfg", "foo")));
      .               /// assert_eq!("cfg=foo=bar".split_once('='), Some(("cfg", "foo=bar")));
      .               /// ```
      .               #[stable(feature = "str_split_once", since = "1.52.0")]
      .               #[inline]
      .               pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {
     20 ( 0.00%)          let (start, end) = delimiter.into_searcher(self).next_match()?;
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { Some((self.get_unchecked(..start), self.get_unchecked(end..))) }
      .               }
      .           
      .               /// Splits the string on the last occurrence of the specified delimiter and
      .               /// returns prefix before delimiter and suffix after delimiter.
      .               ///
      .               /// # Examples
-- line 1556 ----------------------------------------
-- line 1749 ----------------------------------------
      .               ///
      .               /// assert_eq!("Hello\tworld", s.trim());
      .               /// ```
      .               #[inline]
      .               #[must_use = "this returns the trimmed string as a slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn trim(&self) -> &str {
     43 ( 0.00%)          self.trim_matches(|c: char| c.is_whitespace())
      .               }
      .           
      .               /// Returns a string slice with leading whitespace removed.
      .               ///
      .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
      .               /// Core Property `White_Space`.
      .               ///
      .               /// # Text directionality
-- line 1765 ----------------------------------------
-- line 1825 ----------------------------------------
      .               /// let s = "  עברית  ";
      .               /// assert!(Some('ת') == s.trim_end().chars().rev().next());
      .               /// ```
      .               #[inline]
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "trim_direction", since = "1.30.0")]
      .               pub fn trim_end(&self) -> &str {
     58 ( 0.00%)          self.trim_end_matches(|c: char| c.is_whitespace())
      .               }
      .           
      .               /// Returns a string slice with leading whitespace removed.
      .               ///
      .               /// 'Whitespace' is defined according to the terms of the Unicode Derived
      .               /// Core Property `White_Space`.
      .               ///
      .               /// # Text directionality
-- line 1841 ----------------------------------------
-- line 1945 ----------------------------------------
      .               /// A more complex pattern, using a closure:
      .               ///
      .               /// ```
      .               /// assert_eq!("1foo1barXX".trim_matches(|c| c == '1' || c == 'X'), "foo1bar");
      .               /// ```
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "rust1", since = "1.0.0")]
  1,016 ( 0.00%)      pub fn trim_matches<'a, P>(&'a self, pat: P) -> &'a str
      .               where
      .                   P: Pattern<'a, Searcher: DoubleEndedSearcher<'a>>,
      .               {
      .                   let mut i = 0;
      .                   let mut j = 0;
      .                   let mut matcher = pat.into_searcher(self);
      .                   if let Some((a, b)) = matcher.next_reject() {
      .                       i = a;
-- line 1961 ----------------------------------------
-- line 1962 ----------------------------------------
      .                       j = b; // Remember earliest known match, correct it below if
      .                       // last match is different
      .                   }
      .                   if let Some((_, b)) = matcher.next_reject_back() {
      .                       j = b;
      .                   }
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { self.get_unchecked(i..j) }
  1,016 ( 0.00%)      }
      .           
      .               /// Returns a string slice with all prefixes that match a pattern
      .               /// repeatedly removed.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
      .               ///
      .               /// [`char`]: prim@char
-- line 1978 ----------------------------------------
-- line 1994 ----------------------------------------
      .               /// assert_eq!("123foo1bar123".trim_start_matches(char::is_numeric), "foo1bar123");
      .               ///
      .               /// let x: &[_] = &['1', '2'];
      .               /// assert_eq!("12foo1bar12".trim_start_matches(x), "foo1bar12");
      .               /// ```
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "trim_direction", since = "1.30.0")]
    618 ( 0.00%)      pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {
      .                   let mut i = self.len();
      .                   let mut matcher = pat.into_searcher(self);
      .                   if let Some((a, _)) = matcher.next_reject() {
      .                       i = a;
      .                   }
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { self.get_unchecked(i..self.len()) }
    618 ( 0.00%)      }
      .           
      .               /// Returns a string slice with the prefix removed.
      .               ///
      .               /// If the string starts with the pattern `prefix`, returns substring after the prefix, wrapped
      .               /// in `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.
      .               ///
      .               /// If the string does not start with `prefix`, returns `None`.
      .               ///
-- line 2018 ----------------------------------------
-- line 2098 ----------------------------------------
      .               /// A more complex pattern, using a closure:
      .               ///
      .               /// ```
      .               /// assert_eq!("1fooX".trim_end_matches(|c| c == '1' || c == 'X'), "1foo");
      .               /// ```
      .               #[must_use = "this returns the trimmed string as a new slice, \
      .                             without modifying the original"]
      .               #[stable(feature = "trim_direction", since = "1.30.0")]
    522 ( 0.00%)      pub fn trim_end_matches<'a, P>(&'a self, pat: P) -> &'a str
      .               where
      .                   P: Pattern<'a, Searcher: ReverseSearcher<'a>>,
      .               {
      .                   let mut j = 0;
      .                   let mut matcher = pat.into_searcher(self);
      .                   if let Some((_, b)) = matcher.next_reject_back() {
      .                       j = b;
      .                   }
      .                   // SAFETY: `Searcher` is known to return valid indices.
      .                   unsafe { self.get_unchecked(0..j) }
    580 ( 0.00%)      }
      .           
      .               /// Returns a string slice with all prefixes that match a pattern
      .               /// repeatedly removed.
      .               ///
      .               /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a
      .               /// function or closure that determines if a character matches.
      .               ///
      .               /// [`char`]: prim@char
-- line 2125 ----------------------------------------
-- line 2240 ----------------------------------------
      .               /// ```
      .               /// let nope = "j".parse::<u32>();
      .               ///
      .               /// assert!(nope.is_err());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {
     18 ( 0.00%)          FromStr::from_str(self)
      .               }
      .           
      .               /// Checks if all characters in this string are within the ASCII range.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// let ascii = "hello!\n";
-- line 2256 ----------------------------------------
-- line 2496 ----------------------------------------
      .               }
      .           }
      .           
      .           impl_fn_for_zst! {
      .               /// A nameable, cloneable fn type
      .               #[derive(Clone)]
      .               struct LinesAnyMap impl<'a> Fn = |line: &'a str| -> &'a str {
      .                   let l = line.len();
     72 ( 0.00%)          if l > 0 && line.as_bytes()[l - 1] == b'\r' { &line[0 .. l - 1] }
      .                   else { line }
      .               };
      .           
      .               #[derive(Clone)]
      .               struct CharEscapeDebugContinue impl Fn = |c: char| -> char::EscapeDebug {
      .                   c.escape_debug_ext(EscapeDebugExtArgs {
      .                       escape_grapheme_extended: false,
      .                       escape_single_quote: true,
-- line 2512 ----------------------------------------

  2,044 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir               

-- line 8 ----------------------------------------
      .           };
      .           use rustc_ast_pretty::pprust::token_to_string;
      .           use rustc_data_structures::fx::FxHashMap;
      .           use rustc_errors::PResult;
      .           use rustc_span::Span;
      .           
      .           impl<'a> StringReader<'a> {
      .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
     38 ( 0.00%)          let mut tt_reader = TokenTreesReader {
      .                       string_reader: self,
      2 ( 0.00%)              token: Token::dummy(),
      .                       open_braces: Vec::new(),
      .                       unmatched_braces: Vec::new(),
      .                       matching_delim_spans: Vec::new(),
      .                       last_unclosed_found_span: None,
      .                       last_delim_empty_block_spans: FxHashMap::default(),
      .                       matching_block_spans: Vec::new(),
      .                   };
      2 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
     12 ( 0.00%)          (res, tt_reader.unmatched_braces)
      .               }
      .           }
      .           
      .           struct TokenTreesReader<'a> {
      .               string_reader: StringReader<'a>,
      .               token: Token,
      .               /// Stack of open delimiters and their spans. Used for error message.
      .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
      .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
      .               /// Collect the spans of braces (Open, Close). Used only
      .               /// for detecting if blocks are empty and only braces.
      .               matching_block_spans: Vec<(Span, Span)>,
      .           }
      .           
      .           impl<'a> TokenTreesReader<'a> {
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
     16 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
      .                   let mut buf = TokenStreamBuilder::default();
      .           
      .                   self.bump();
    712 ( 0.00%)          while self.token != token::Eof {
  2,832 ( 0.00%)              buf.push(self.parse_token_tree()?);
      .                   }
      .           
      .                   Ok(buf.into_token_stream())
     18 ( 0.00%)      }
      .           
      .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
      .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
      .                   let mut buf = TokenStreamBuilder::default();
      .                   loop {
120,128 ( 0.01%)              if let token::CloseDelim(..) = self.token.kind {
      .                           return buf.into_token_stream();
      .                       }
      .           
298,820 ( 0.03%)              match self.parse_token_tree() {
537,876 ( 0.06%)                  Ok(tree) => buf.push(tree),
      .                           Err(mut e) => {
      .                               e.emit();
      .                               return buf.into_token_stream();
      .                           }
      .                       }
      .                   }
      .               }
      .           
541,062 ( 0.06%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
120,236 ( 0.01%)          let sm = self.string_reader.sess.source_map();
      .           
539,862 ( 0.06%)          match self.token.kind {
      .                       token::Eof => {
      .                           let msg = "this file contains an unclosed delimiter";
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
      .                           for &(_, sp) in &self.open_braces {
      .                               err.span_label(sp, "unclosed delimiter");
      .                               self.unmatched_braces.push(UnmatchedBrace {
      .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
      .                                   err.span_label(
      .                                       *close_sp,
      .                                       "...as it matches this but it has different indentation",
      .                                   );
      .                               }
      .                           }
      .                           Err(err)
      .                       }
    300 ( 0.00%)              token::OpenDelim(delim) => {
      .                           // The span for beginning of the delimited section
    300 ( 0.00%)                  let pre_span = self.token.span;
      .           
      .                           // Parse the open delimiter.
  2,100 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
      .                           self.bump();
      .           
      .                           // Parse the token trees within the delimiters.
      .                           // We stop at any delimiter so we can try to recover if the user
      .                           // uses an incorrect delimiter.
    300 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
      .           
      .                           // Expand to cover the entire delimited token tree
  1,500 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
      .           
    600 ( 0.00%)                  match self.token.kind {
      .                               // Correct delimiter.
    600 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
      .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
    600 ( 0.00%)                          let close_brace_span = self.token.span;
      .           
    900 ( 0.00%)                          if tts.is_empty() {
    144 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
    192 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
      .                                           // Only track if the block is in the form of `{}`, otherwise it is
      .                                           // likely that it was written on purpose.
      .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
      .                                       }
      .                                   }
      .           
      .                                   //only add braces
  1,200 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
      .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
      .                                   }
      .           
    300 ( 0.00%)                          if self.open_braces.is_empty() {
      .                                       // Clear up these spans to avoid suggesting them as we've found
      .                                       // properly matched delimiters so far for an entire block.
      .                                       self.matching_delim_spans.clear();
      .                                   } else {
      .                                       self.matching_delim_spans.push((
      .                                           open_brace,
      .                                           open_brace_span,
      .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
      .                               token::Eof => {
      .                                   // Silently recover, the EOF token will be seen again
      .                                   // and an error emitted then. Thus we don't pop from
      .                                   // self.open_braces here.
      .                               }
      .                               _ => {}
      .                           }
      .           
  2,100 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
      .                       }
      .                       token::CloseDelim(delim) => {
      .                           // An unexpected closing delimiter (i.e., there is no
      .                           // matching opening delimiter).
      .                           let token_str = token_to_string(&self.token);
      .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
      .                           let mut err =
      .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
      .                                   err.span_label(parent.1, "...matches this closing brace");
      .                               }
      .                           }
      .           
      .                           err.span_label(self.token.span, "unexpected closing delimiter");
      .                           Err(err)
      .                       }
      .                       _ => {
299,090 ( 0.03%)                  let tt = TokenTree::Token(self.token.take());
      .                           let mut spacing = self.bump();
119,636 ( 0.01%)                  if !self.token.is_op() {
      .                               spacing = Alone;
      .                           }
358,908 ( 0.04%)                  Ok((tt, spacing))
      .                       }
      .                   }
480,944 ( 0.05%)      }
      .           
      .               fn bump(&mut self) -> Spacing {
542,274 ( 0.06%)          let (spacing, token) = self.string_reader.next_token();
300,608 ( 0.03%)          self.token = token;
      .                   spacing
      .               }
      .           }
      .           
    300 ( 0.00%)  #[derive(Default)]
      .           struct TokenStreamBuilder {
      .               buf: Vec<TreeAndSpacing>,
      .           }
      .           
      .           impl TokenStreamBuilder {
781,534 ( 0.08%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
476,940 ( 0.05%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
 58,994 ( 0.01%)              if let TokenTree::Token(token) = &tree {
 89,091 ( 0.01%)                  if let Some(glued) = prev_token.glue(token) {
      .                               self.buf.pop();
  1,800 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
      .                               return;
      .                           }
      .                       }
      .                   }
299,840 ( 0.03%)          self.buf.push((tree, joint))
480,944 ( 0.05%)      }
      .           
      .               fn into_token_stream(self) -> TokenStream {
  3,018 ( 0.00%)          TokenStream::new(self.buf)
      .               }
      .           }

123,351 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs
--------------------------------------------------------------------------------
Ir               

-- line 30 ----------------------------------------
      .           // the final TypeckResults since all of the types should have been
      .           // inferred once typeck is done.
      .           // When type inference is running however, having to update the typeck
      .           // typeck results every time a new type is inferred would be unreasonably slow,
      .           // so instead all of the replacement happens at the end in
      .           // resolve_type_vars_in_body, which creates a new TypeTables which
      .           // doesn't contain any inference types.
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
    576 ( 0.00%)      pub fn resolve_type_vars_in_body(
      .                   &self,
      .                   body: &'tcx hir::Body<'tcx>,
      .               ) -> &'tcx ty::TypeckResults<'tcx> {
    640 ( 0.00%)          let item_id = self.tcx.hir().body_owner(body.id());
    384 ( 0.00%)          let item_def_id = self.tcx.hir().local_def_id(item_id);
      .           
      .                   // This attribute causes us to dump some writeback information
      .                   // in the form of errors, which is used for unit tests.
      .                   let rustc_dump_user_substs =
    384 ( 0.00%)              self.tcx.has_attr(item_def_id.to_def_id(), sym::rustc_dump_user_substs);
      .           
      .                   let mut wbcx = WritebackCx::new(self, body, rustc_dump_user_substs);
    256 ( 0.00%)          for param in body.params {
    333 ( 0.00%)              wbcx.visit_node_id(param.pat.span, param.hir_id);
      .                   }
      .                   // Type only exists for constants and statics, not functions.
    704 ( 0.00%)          match self.tcx.hir().body_owner_kind(item_id) {
      .                       hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {
    140 ( 0.00%)                  wbcx.visit_node_id(body.value.span, item_id);
      .                       }
      .                       hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => (),
      .                   }
      .                   wbcx.visit_body(body);
     64 ( 0.00%)          wbcx.visit_min_capture_map();
     64 ( 0.00%)          wbcx.eval_closure_size();
     64 ( 0.00%)          wbcx.visit_fake_reads_map();
     64 ( 0.00%)          wbcx.visit_closures();
     64 ( 0.00%)          wbcx.visit_liberated_fn_sigs();
     64 ( 0.00%)          wbcx.visit_fru_field_types();
    192 ( 0.00%)          wbcx.visit_opaque_types(body.value.span);
     64 ( 0.00%)          wbcx.visit_coercion_casts();
     64 ( 0.00%)          wbcx.visit_user_provided_tys();
     64 ( 0.00%)          wbcx.visit_user_provided_sigs();
     64 ( 0.00%)          wbcx.visit_generator_interior_types();
      .           
      .                   let used_trait_imports =
    128 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().used_trait_imports);
      .                   debug!("used_trait_imports({:?}) = {:?}", item_def_id, used_trait_imports);
    128 ( 0.00%)          wbcx.typeck_results.used_trait_imports = used_trait_imports;
      .           
    320 ( 0.00%)          wbcx.typeck_results.treat_byte_string_as_slice =
     64 ( 0.00%)              mem::take(&mut self.typeck_results.borrow_mut().treat_byte_string_as_slice);
      .           
    192 ( 0.00%)          if self.is_tainted_by_errors() {
      .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
      .                       wbcx.typeck_results.tainted_by_errors = Some(ErrorReported);
      .                   }
      .           
      .                   debug!("writeback: typeck results for {:?} are {:#?}", item_def_id, wbcx.typeck_results);
      .           
    128 ( 0.00%)          self.tcx.arena.alloc(wbcx.typeck_results)
    576 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // The Writeback context. This visitor walks the HIR, checking the
      .           // fn-specific typeck results to find references to types or regions. It
      .           // resolves those regions to remove inference variables and writes the
      .           // final result back into the master typeck results in the tcx. Here and
      .           // there, it applies a few ad-hoc checks that were not convenient to
-- line 98 ----------------------------------------
-- line 109 ----------------------------------------
      .           }
      .           
      .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
      .               fn new(
      .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
      .                   body: &'tcx hir::Body<'tcx>,
      .                   rustc_dump_user_substs: bool,
      .               ) -> WritebackCx<'cx, 'tcx> {
    128 ( 0.00%)          let owner = body.id().hir_id.owner;
      .           
    576 ( 0.00%)          WritebackCx {
      .                       fcx,
    256 ( 0.00%)              typeck_results: ty::TypeckResults::new(owner),
      .                       body,
      .                       rustc_dump_user_substs,
      .                   }
      .               }
      .           
      .               fn tcx(&self) -> TyCtxt<'tcx> {
     37 ( 0.00%)          self.fcx.tcx
      .               }
      .           
      .               fn write_ty_to_typeck_results(&mut self, hir_id: hir::HirId, ty: Ty<'tcx>) {
      .                   debug!("write_ty_to_typeck_results({:?}, {:?})", hir_id, ty);
 89,058 ( 0.01%)          assert!(!ty.needs_infer() && !ty.has_placeholders() && !ty.has_free_regions());
118,744 ( 0.01%)          self.typeck_results.node_types_mut().insert(hir_id, ty);
      .               }
      .           
      .               // Hacky hack: During type-checking, we treat *all* operators
      .               // as potentially overloaded. But then, during writeback, if
      .               // we observe that something like `a+b` is (known to be)
      .               // operating on scalars, we clear the overload.
      .               fn fix_scalar_builtin_expr(&mut self, e: &hir::Expr<'_>) {
206,701 ( 0.02%)          match e.kind {
      .                       hir::ExprKind::Unary(hir::UnOp::Neg | hir::UnOp::Not, inner) => {
      .                           let inner_ty = self.fcx.node_ty(inner.hir_id);
      .                           let inner_ty = self.fcx.resolve_vars_if_possible(inner_ty);
      .           
      .                           if inner_ty.is_scalar() {
      .                               let mut typeck_results = self.fcx.typeck_results.borrow_mut();
      .                               typeck_results.type_dependent_defs_mut().remove(e.hir_id);
      .                               typeck_results.node_substs_mut().remove(e.hir_id);
      .                           }
      .                       }
      .                       hir::ExprKind::Binary(ref op, lhs, rhs) | hir::ExprKind::AssignOp(ref op, lhs, rhs) => {
    110 ( 0.00%)                  let lhs_ty = self.fcx.node_ty(lhs.hir_id);
      .                           let lhs_ty = self.fcx.resolve_vars_if_possible(lhs_ty);
      .           
     88 ( 0.00%)                  let rhs_ty = self.fcx.node_ty(rhs.hir_id);
      .                           let rhs_ty = self.fcx.resolve_vars_if_possible(rhs_ty);
      .           
      .                           if lhs_ty.is_scalar() && rhs_ty.is_scalar() {
     22 ( 0.00%)                      let mut typeck_results = self.fcx.typeck_results.borrow_mut();
    110 ( 0.00%)                      typeck_results.type_dependent_defs_mut().remove(e.hir_id);
     22 ( 0.00%)                      typeck_results.node_substs_mut().remove(e.hir_id);
      .           
     44 ( 0.00%)                      match e.kind {
      .                                   hir::ExprKind::Binary(..) => {
     88 ( 0.00%)                              if !op.node.is_by_value() {
      .                                           let mut adjustments = typeck_results.adjustments_mut();
      .                                           if let Some(a) = adjustments.get_mut(lhs.hir_id) {
      .                                               a.pop();
      .                                           }
      .                                           if let Some(a) = adjustments.get_mut(rhs.hir_id) {
      .                                               a.pop();
      .                                           }
      .                                       }
-- line 175 ----------------------------------------
-- line 187 ----------------------------------------
      .                   }
      .               }
      .           
      .               // Similar to operators, indexing is always assumed to be overloaded
      .               // Here, correct cases where an indexing expression can be simplified
      .               // to use builtin indexing because the index type is known to be
      .               // usize-ish
      .               fn fix_index_builtin_expr(&mut self, e: &hir::Expr<'_>) {
 59,092 ( 0.01%)          if let hir::ExprKind::Index(ref base, ref index) = e.kind {
      .                       let mut typeck_results = self.fcx.typeck_results.borrow_mut();
      .           
      .                       // All valid indexing looks like this; might encounter non-valid indexes at this point.
      .                       let base_ty = typeck_results
      .                           .expr_ty_adjusted_opt(base)
      .                           .map(|t| self.fcx.resolve_vars_if_possible(t).kind());
      .                       if base_ty.is_none() {
      .                           // When encountering `return [0][0]` outside of a `fn` body we can encounter a base
-- line 203 ----------------------------------------
-- line 248 ----------------------------------------
      .           // Impl of Visitor for Resolver
      .           //
      .           // This is the master code which walks the AST. It delegates most of
      .           // the heavy lifting to the generic visit and resolve functions
      .           // below. In general, a function is made into a `visitor` if it must
      .           // traffic in node-ids or update typeck results in the type context etc.
      .           
      .           impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {
265,815 ( 0.03%)      fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
 29,535 ( 0.00%)          self.fix_scalar_builtin_expr(e);
      .                   self.fix_index_builtin_expr(e);
      .           
147,675 ( 0.02%)          self.visit_node_id(e.span, e.hir_id);
      .           
118,140 ( 0.01%)          match e.kind {
      .                       hir::ExprKind::Closure(_, _, body, _, _) => {
      .                           let body = self.fcx.tcx.hir().body(body);
      .                           for param in body.params {
      .                               self.visit_node_id(e.span, param.hir_id);
      .                           }
      .           
      .                           self.visit_body(body);
      .                       }
-- line 270 ----------------------------------------
-- line 280 ----------------------------------------
      .                           self.visit_node_id(e.span, anon_const.hir_id);
      .           
      .                           let body = self.tcx().hir().body(anon_const.body);
      .                           self.visit_body(body);
      .                       }
      .                       _ => {}
      .                   }
      .           
 88,605 ( 0.01%)          intravisit::walk_expr(self, e);
236,280 ( 0.02%)      }
      .           
    324 ( 0.00%)      fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
    144 ( 0.00%)          self.visit_node_id(b.span, b.hir_id);
      .                   intravisit::walk_block(self, b);
      .               }
      .           
    450 ( 0.00%)      fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {
    176 ( 0.00%)          match p.kind {
      .                       hir::PatKind::Binding(..) => {
     74 ( 0.00%)                  let typeck_results = self.fcx.typeck_results.borrow();
    111 ( 0.00%)                  if let Some(bm) =
    296 ( 0.00%)                      typeck_results.extract_binding_mode(self.tcx().sess, p.hir_id, p.span)
      .                           {
    111 ( 0.00%)                      self.typeck_results.pat_binding_modes_mut().insert(p.hir_id, bm);
      .                           }
      .                       }
      .                       hir::PatKind::Struct(_, fields, _) => {
      .                           for field in fields {
      .                               self.visit_field_id(field.hir_id);
      .                           }
      .                       }
      .                       _ => {}
      .                   };
      .           
    200 ( 0.00%)          self.visit_pat_adjustments(p.span, p.hir_id);
      .           
    250 ( 0.00%)          self.visit_node_id(p.span, p.hir_id);
    150 ( 0.00%)          intravisit::walk_pat(self, p);
    400 ( 0.00%)      }
      .           
      .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      .                   intravisit::walk_local(self, l);
      .                   let var_ty = self.fcx.local_ty(l.span, l.hir_id).decl_ty;
      .                   let var_ty = self.resolve(var_ty, &l.span);
      .                   self.write_ty_to_typeck_results(l.hir_id, var_ty);
      .               }
      .           
-- line 326 ----------------------------------------
-- line 337 ----------------------------------------
      .                   if let Some(ty) = self.fcx.node_ty_opt(inf.hir_id) {
      .                       let ty = self.resolve(ty, &inf.span);
      .                       self.write_ty_to_typeck_results(inf.hir_id, ty);
      .                   }
      .               }
      .           }
      .           
      .           impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {
    448 ( 0.00%)      fn eval_closure_size(&mut self) {
      .                   let mut res: FxHashMap<DefId, ClosureSizeProfileData<'tcx>> = Default::default();
    192 ( 0.00%)          for (closure_def_id, data) in self.fcx.typeck_results.borrow().closure_size_eval.iter() {
      .                       let closure_hir_id =
      .                           self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
      .           
      .                       let data = self.resolve(*data, &closure_hir_id);
      .           
      .                       res.insert(*closure_def_id, data);
      .                   }
      .           
    640 ( 0.00%)          self.typeck_results.closure_size_eval = res;
    512 ( 0.00%)      }
    448 ( 0.00%)      fn visit_min_capture_map(&mut self) {
      .                   let mut min_captures_wb = ty::MinCaptureInformationMap::with_capacity_and_hasher(
    128 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.len(),
      .                       Default::default(),
      .                   );
      .                   for (closure_def_id, root_min_captures) in
    128 ( 0.00%)              self.fcx.typeck_results.borrow().closure_min_captures.iter()
      .                   {
      .                       let mut root_var_map_wb = ty::RootVariableMinCaptureList::with_capacity_and_hasher(
      .                           root_min_captures.len(),
      .                           Default::default(),
      .                       );
      .                       for (var_hir_id, min_list) in root_min_captures.iter() {
      .                           let min_list_wb = min_list
      .                               .iter()
-- line 372 ----------------------------------------
-- line 378 ----------------------------------------
      .                                   self.resolve(captured_place.clone(), &locatable)
      .                               })
      .                               .collect();
      .                           root_var_map_wb.insert(*var_hir_id, min_list_wb);
      .                       }
      .                       min_captures_wb.insert(*closure_def_id, root_var_map_wb);
      .                   }
      .           
    576 ( 0.00%)          self.typeck_results.closure_min_captures = min_captures_wb;
    512 ( 0.00%)      }
      .           
    448 ( 0.00%)      fn visit_fake_reads_map(&mut self) {
      .                   let mut resolved_closure_fake_reads: FxHashMap<
      .                       DefId,
      .                       Vec<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>,
      .                   > = Default::default();
      .                   for (closure_def_id, fake_reads) in
    128 ( 0.00%)              self.fcx.typeck_results.borrow().closure_fake_reads.iter()
      .                   {
      .                       let mut resolved_fake_reads = Vec::<(HirPlace<'tcx>, FakeReadCause, hir::HirId)>::new();
      .                       for (place, cause, hir_id) in fake_reads.iter() {
      .                           let locatable =
      .                               self.tcx().hir().local_def_id_to_hir_id(closure_def_id.expect_local());
      .           
      .                           let resolved_fake_read = self.resolve(place.clone(), &locatable);
      .                           resolved_fake_reads.push((resolved_fake_read, *cause, *hir_id));
      .                       }
      .                       resolved_closure_fake_reads.insert(*closure_def_id, resolved_fake_reads);
      .                   }
    576 ( 0.00%)          self.typeck_results.closure_fake_reads = resolved_closure_fake_reads;
    512 ( 0.00%)      }
      .           
    448 ( 0.00%)      fn visit_closures(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    192 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
     64 ( 0.00%)          for (id, origin) in fcx_typeck_results.closure_kind_origins().iter() {
      .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id: *id };
      .                       let place_span = origin.0;
      .                       let place = self.resolve(origin.1.clone(), &place_span);
      .                       self.typeck_results.closure_kind_origins_mut().insert(hir_id, (place_span, place));
      .                   }
    512 ( 0.00%)      }
      .           
    448 ( 0.00%)      fn visit_coercion_casts(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
     64 ( 0.00%)          let fcx_coercion_casts = fcx_typeck_results.coercion_casts();
    128 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .           
      .                   for local_id in fcx_coercion_casts {
      .                       self.typeck_results.set_coercion_cast(*local_id);
      .                   }
    512 ( 0.00%)      }
      .           
    512 ( 0.00%)      fn visit_user_provided_tys(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    256 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
      .                   let mut errors_buffer = Vec::new();
     64 ( 0.00%)          for (&local_id, c_ty) in fcx_typeck_results.user_provided_types().iter() {
      .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
      .           
      .                       if cfg!(debug_assertions) && c_ty.needs_infer() {
      .                           span_bug!(
      .                               hir_id.to_span(self.fcx.tcx),
      .                               "writeback: `{:?}` has inference variables",
      .                               c_ty
      .                           );
-- line 447 ----------------------------------------
-- line 459 ----------------------------------------
      .                                   .tcx()
      .                                   .sess
      .                                   .struct_span_err(span, &format!("user substs: {:?}", user_substs));
      .                               err.buffer(&mut errors_buffer);
      .                           }
      .                       }
      .                   }
      .           
     64 ( 0.00%)          if !errors_buffer.is_empty() {
      .                       errors_buffer.sort_by_key(|diag| diag.span.primary_span());
      .                       for diag in errors_buffer.drain(..) {
      .                           self.tcx().sess.diagnostic().emit_diagnostic(&diag);
      .                       }
      .                   }
    512 ( 0.00%)      }
      .           
    448 ( 0.00%)      fn visit_user_provided_sigs(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    128 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .           
      .                   for (&def_id, c_sig) in fcx_typeck_results.user_provided_sigs.iter() {
      .                       if cfg!(debug_assertions) && c_sig.needs_infer() {
      .                           span_bug!(
      .                               self.fcx.tcx.hir().span_if_local(def_id).unwrap(),
      .                               "writeback: `{:?}` has inference variables",
      .                               c_sig
      .                           );
      .                       };
      .           
      .                       self.typeck_results.user_provided_sigs.insert(def_id, *c_sig);
      .                   }
    512 ( 0.00%)      }
      .           
    320 ( 0.00%)      fn visit_generator_interior_types(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    128 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
    384 ( 0.00%)          self.typeck_results.generator_interior_types =
    128 ( 0.00%)              fcx_typeck_results.generator_interior_types.clone();
    384 ( 0.00%)      }
      .           
  1,024 ( 0.00%)      #[instrument(skip(self, span), level = "debug")]
      .               fn visit_opaque_types(&mut self, span: Span) {
     64 ( 0.00%)          let opaque_types = self.fcx.infcx.inner.borrow().opaque_types.clone();
    256 ( 0.00%)          for (opaque_type_key, opaque_defn) in opaque_types {
      .                       let hir_id =
      .                           self.tcx().hir().local_def_id_to_hir_id(opaque_type_key.def_id.expect_local());
      .                       let instantiated_ty = self.resolve(opaque_defn.concrete_ty, &hir_id);
      .           
      .                       debug_assert!(!instantiated_ty.has_escaping_bound_vars());
      .           
      .                       let opaque_type_key = self.fcx.fully_resolve(opaque_type_key).unwrap();
      .           
-- line 510 ----------------------------------------
-- line 559 ----------------------------------------
      .           
      .               fn visit_field_id(&mut self, hir_id: hir::HirId) {
      .                   if let Some(index) = self.fcx.typeck_results.borrow_mut().field_indices_mut().remove(hir_id)
      .                   {
      .                       self.typeck_results.field_indices_mut().insert(hir_id, index);
      .                   }
      .               }
      .           
534,348 ( 0.06%)      #[instrument(skip(self, span), level = "debug")]
      .               fn visit_node_id(&mut self, span: Span, hir_id: hir::HirId) {
      .                   // Export associated path extensions and method resolutions.
118,744 ( 0.01%)          if let Some(def) =
 89,058 ( 0.01%)              self.fcx.typeck_results.borrow_mut().type_dependent_defs_mut().remove(hir_id)
      .                   {
     62 ( 0.00%)              self.typeck_results.type_dependent_defs_mut().insert(hir_id, def);
      .                   }
      .           
      .                   // Resolve any borrowings for the node with id `node_id`
      .                   self.visit_adjustments(span, hir_id);
      .           
      .                   // Resolve the type of the node with id `node_id`
118,744 ( 0.01%)          let n_ty = self.fcx.node_ty(hir_id);
      .                   let n_ty = self.resolve(n_ty, &span);
      .                   self.write_ty_to_typeck_results(hir_id, n_ty);
      .                   debug!(?n_ty);
      .           
      .                   // Resolve any substitutions
178,116 ( 0.02%)          if let Some(substs) = self.fcx.typeck_results.borrow().node_substs_opt(hir_id) {
      .                       let substs = self.resolve(substs, &span);
      .                       debug!("write_substs_to_tcx({:?}, {:?})", hir_id, substs);
      .                       assert!(!substs.needs_infer() && !substs.has_placeholders());
     62 ( 0.00%)              self.typeck_results.node_substs_mut().insert(hir_id, substs);
      .                   }
      .               }
      .           
      .               #[instrument(skip(self, span), level = "debug")]
      .               fn visit_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
 89,058 ( 0.01%)          let adjustment = self.fcx.typeck_results.borrow_mut().adjustments_mut().remove(hir_id);
148,430 ( 0.02%)          match adjustment {
      .                       None => {
      .                           debug!("no adjustments for node");
      .                       }
      .           
      .                       Some(adjustment) => {
     62 ( 0.00%)                  let resolved_adjustment = self.resolve(adjustment, &span);
      .                           debug!(?resolved_adjustment);
    186 ( 0.00%)                  self.typeck_results.adjustments_mut().insert(hir_id, resolved_adjustment);
      .                       }
      .                   }
      .               }
      .           
      .               #[instrument(skip(self, span), level = "debug")]
      .               fn visit_pat_adjustments(&mut self, span: Span, hir_id: hir::HirId) {
    150 ( 0.00%)          let adjustment = self.fcx.typeck_results.borrow_mut().pat_adjustments_mut().remove(hir_id);
    100 ( 0.00%)          match adjustment {
      .                       None => {
      .                           debug!("no pat_adjustments for node");
      .                       }
      .           
      .                       Some(adjustment) => {
      .                           let resolved_adjustment = self.resolve(adjustment, &span);
      .                           debug!(?resolved_adjustment);
      .                           self.typeck_results.pat_adjustments_mut().insert(hir_id, resolved_adjustment);
      .                       }
      .                   }
      .               }
      .           
    512 ( 0.00%)      fn visit_liberated_fn_sigs(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    256 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
    208 ( 0.00%)          for (&local_id, &fn_sig) in fcx_typeck_results.liberated_fn_sigs().iter() {
    108 ( 0.00%)              let hir_id = hir::HirId { owner: common_hir_owner, local_id };
      .                       let fn_sig = self.resolve(fn_sig, &hir_id);
    108 ( 0.00%)              self.typeck_results.liberated_fn_sigs_mut().insert(hir_id, fn_sig);
      .                   }
    512 ( 0.00%)      }
      .           
    512 ( 0.00%)      fn visit_fru_field_types(&mut self) {
    128 ( 0.00%)          let fcx_typeck_results = self.fcx.typeck_results.borrow();
    256 ( 0.00%)          assert_eq!(fcx_typeck_results.hir_owner, self.typeck_results.hir_owner);
      .                   let common_hir_owner = fcx_typeck_results.hir_owner;
      .           
     64 ( 0.00%)          for (&local_id, ftys) in fcx_typeck_results.fru_field_types().iter() {
      .                       let hir_id = hir::HirId { owner: common_hir_owner, local_id };
      .                       let ftys = self.resolve(ftys.clone(), &hir_id);
      .                       self.typeck_results.fru_field_types_mut().insert(hir_id, ftys);
      .                   }
    512 ( 0.00%)      }
      .           
      .               fn resolve<T>(&mut self, x: T, span: &dyn Locatable) -> T
      .               where
      .                   T: TypeFoldable<'tcx>,
      .               {
 59,537 ( 0.01%)          let mut resolver = Resolver::new(self.fcx, span, self.body);
     62 ( 0.00%)          let x = x.fold_with(&mut resolver);
      .                   if cfg!(debug_assertions) && x.needs_infer() {
      .                       span_bug!(span.to_span(self.fcx.tcx), "writeback: `{:?}` has inference variables", x);
      .                   }
      .           
      .                   // We may have introduced e.g. `ty::Error`, if inference failed, make sure
      .                   // to mark the `TypeckResults` as tainted in that case, so that downstream
      .                   // users of the typeck results don't produce extra errors, or worse, ICEs.
 59,754 ( 0.01%)          if resolver.replaced_with_error {
      .                       // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.
      .                       self.typeck_results.tainted_by_errors = Some(ErrorReported);
      .                   }
      .           
      .                   x
      .               }
      .           }
      .           
-- line 671 ----------------------------------------
-- line 698 ----------------------------------------
      .           }
      .           
      .           impl<'cx, 'tcx> Resolver<'cx, 'tcx> {
      .               fn new(
      .                   fcx: &'cx FnCtxt<'cx, 'tcx>,
      .                   span: &'cx dyn Locatable,
      .                   body: &'tcx hir::Body<'tcx>,
      .               ) -> Resolver<'cx, 'tcx> {
297,711 ( 0.03%)          Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }
      .               }
      .           
      .               fn report_type_error(&self, t: Ty<'tcx>) {
      .                   if !self.tcx.sess.has_errors() {
      .                       self.infcx
      .                           .emit_inference_failure_err(
      .                               Some(self.body.id()),
      .                               self.span.to_span(self.tcx),
-- line 714 ----------------------------------------
-- line 736 ----------------------------------------
      .           }
      .           
      .           struct EraseEarlyRegions<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .           }
      .           
      .           impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {
      .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
     60 ( 0.00%)          self.tcx
      .               }
      .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
 29,940 ( 0.00%)          if ty.has_type_flags(ty::TypeFlags::HAS_FREE_REGIONS) {
    120 ( 0.00%)              ty.super_fold_with(self)
      .                   } else {
      .                       ty
      .                   }
      .               }
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
    240 ( 0.00%)          if let ty::ReLateBound(..) = r { r } else { self.tcx.lifetimes.re_erased }
      .               }
      .           }
      .           
      .           impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {
      .               fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {
      3 ( 0.00%)          self.tcx
      .               }
      .           
268,920 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
 89,640 ( 0.01%)          match self.infcx.fully_resolve(t) {
      .                       Ok(t) => {
      .                           // Do not anonymize late-bound regions
      .                           // (e.g. keep `for<'a>` named `for<'a>`).
      .                           // This allows NLL to generate error messages that
      .                           // refer to the higher-ranked lifetime names written by the user.
 59,760 ( 0.01%)                  EraseEarlyRegions { tcx: self.infcx.tcx }.fold_ty(t)
      .                       }
      .                       Err(_) => {
      .                           debug!("Resolver::fold_ty: input type `{:?}` not fully resolvable", t);
      .                           self.report_type_error(t);
      .                           self.replaced_with_error = true;
      .                           self.tcx().ty_error()
      .                       }
      .                   }
239,040 ( 0.03%)      }
      .           
      .               fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
      .                   debug_assert!(!r.is_late_bound(), "Should not be resolving bound region.");
    124 ( 0.00%)          self.tcx.lifetimes.re_erased
      .               }
      .           
      .               fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      .                   match self.infcx.fully_resolve(ct) {
      .                       Ok(ct) => self.infcx.tcx.erase_regions(ct),
      .                       Err(_) => {
      .                           debug!("Resolver::fold_const: input const `{:?}` not fully resolvable", ct);
      .                           self.report_const_error(ct);
-- line 791 ----------------------------------------

387,314 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/writeback.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_lowering/src/expr.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .           use rustc_hir::def::Res;
      .           use rustc_hir::definitions::DefPathData;
      .           use rustc_span::hygiene::ExpnId;
      .           use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};
      .           use rustc_span::symbol::{sym, Ident};
      .           use rustc_span::DUMMY_SP;
      .           
      .           impl<'hir> LoweringContext<'_, 'hir> {
    609 ( 0.00%)      fn lower_exprs(&mut self, exprs: &[AstP<Expr>]) -> &'hir [hir::Expr<'hir>] {
     87 ( 0.00%)          self.arena.alloc_from_iter(exprs.iter().map(|x| self.lower_expr_mut(x)))
    870 ( 0.00%)      }
      .           
    412 ( 0.00%)      pub(super) fn lower_expr(&mut self, e: &Expr) -> &'hir hir::Expr<'hir> {
    312 ( 0.00%)          self.arena.alloc(self.lower_expr_mut(e))
    412 ( 0.00%)      }
      .           
      .               pub(super) fn lower_expr_mut(&mut self, e: &Expr) -> hir::Expr<'hir> {
 88,248 ( 0.01%)          ensure_sufficient_stack(|| {
147,495 ( 0.02%)              let kind = match e.kind {
      .                           ExprKind::Box(ref inner) => hir::ExprKind::Box(self.lower_expr(inner)),
    168 ( 0.00%)                  ExprKind::Array(ref exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),
      .                           ExprKind::ConstBlock(ref anon_const) => {
      .                               let anon_const = self.lower_anon_const(anon_const);
      .                               hir::ExprKind::ConstBlock(anon_const)
      .                           }
      .                           ExprKind::Repeat(ref expr, ref count) => {
      .                               let expr = self.lower_expr(expr);
      .                               let count = self.lower_array_length(count);
      .                               hir::ExprKind::Repeat(expr, count)
      .                           }
      .                           ExprKind::Tup(ref elts) => hir::ExprKind::Tup(self.lower_exprs(elts)),
      .                           ExprKind::Call(ref f, ref args) => {
    140 ( 0.00%)                      if let Some(legacy_args) = self.resolver.legacy_const_generic_args(f) {
      .                                   self.lower_legacy_const_generics((**f).clone(), args.clone(), &legacy_args)
      .                               } else {
     84 ( 0.00%)                          let f = self.lower_expr(f);
    196 ( 0.00%)                          hir::ExprKind::Call(f, self.lower_exprs(args))
      .                               }
      .                           }
     93 ( 0.00%)                  ExprKind::MethodCall(ref seg, ref args, span) => {
    341 ( 0.00%)                      let hir_seg = self.arena.alloc(self.lower_path_segment(
     31 ( 0.00%)                          e.span,
      .                                   seg,
      .                                   ParamMode::Optional,
      .                                   0,
      .                                   ParenthesizedGenericArgs::Err,
      .                                   ImplTraitContext::disallowed(),
      .                               ));
    124 ( 0.00%)                      let args = self.lower_exprs(args);
    186 ( 0.00%)                      hir::ExprKind::MethodCall(hir_seg, args, self.lower_span(span))
      .                           }
     44 ( 0.00%)                  ExprKind::Binary(binop, ref lhs, ref rhs) => {
     88 ( 0.00%)                      let binop = self.lower_binop(binop);
     66 ( 0.00%)                      let lhs = self.lower_expr(lhs);
     44 ( 0.00%)                      let rhs = self.lower_expr(rhs);
    132 ( 0.00%)                      hir::ExprKind::Binary(binop, lhs, rhs)
      .                           }
      .                           ExprKind::Unary(op, ref ohs) => {
      .                               let op = self.lower_unop(op);
      .                               let ohs = self.lower_expr(ohs);
      .                               hir::ExprKind::Unary(op, ohs)
      .                           }
      .                           ExprKind::Lit(ref l) => {
292,420 ( 0.03%)                      hir::ExprKind::Lit(respan(self.lower_span(l.span), l.kind.clone()))
      .                           }
      .                           ExprKind::Cast(ref expr, ref ty) => {
      .                               let expr = self.lower_expr(expr);
      .                               let ty = self.lower_ty(ty, ImplTraitContext::disallowed());
      .                               hir::ExprKind::Cast(expr, ty)
      .                           }
      .                           ExprKind::Type(ref expr, ref ty) => {
      .                               let expr = self.lower_expr(expr);
      .                               let ty = self.lower_ty(ty, ImplTraitContext::disallowed());
      .                               hir::ExprKind::Type(expr, ty)
      .                           }
     29 ( 0.00%)                  ExprKind::AddrOf(k, m, ref ohs) => {
     58 ( 0.00%)                      let ohs = self.lower_expr(ohs);
    116 ( 0.00%)                      hir::ExprKind::AddrOf(k, m, ohs)
      .                           }
      .                           ExprKind::Let(ref pat, ref scrutinee, span) => {
      .                               hir::ExprKind::Let(self.arena.alloc(hir::Let {
      .                                   hir_id: self.next_id(),
      .                                   span: self.lower_span(span),
      .                                   pat: self.lower_pat(pat),
      .                                   ty: None,
      .                                   init: self.lower_expr(scrutinee),
-- line 95 ----------------------------------------
-- line 109 ----------------------------------------
      .                               hir::ExprKind::Loop(
      .                                   this.lower_block(body, false),
      .                                   this.lower_label(opt_label),
      .                                   hir::LoopSource::Loop,
      .                                   DUMMY_SP,
      .                               )
      .                           }),
      .                           ExprKind::TryBlock(ref body) => self.lower_expr_try_block(body),
     10 ( 0.00%)                  ExprKind::Match(ref expr, ref arms) => hir::ExprKind::Match(
      6 ( 0.00%)                      self.lower_expr(expr),
     56 ( 0.00%)                      self.arena.alloc_from_iter(arms.iter().map(|x| self.lower_arm(x))),
      .                               hir::MatchSource::Normal,
      .                           ),
      .                           ExprKind::Async(capture_clause, closure_node_id, ref block) => self
      .                               .make_async_expr(
      .                                   capture_clause,
      .                                   closure_node_id,
      .                                   None,
      .                                   block.span,
-- line 127 ----------------------------------------
-- line 192 ----------------------------------------
      .                                   .struct_span_err(
      .                                       e.span,
      .                                       "in expressions, `_` can only be used on the left-hand side of an assignment",
      .                                   )
      .                                   .span_label(e.span, "`_` not allowed here")
      .                                   .emit();
      .                               hir::ExprKind::Err
      .                           }
    234 ( 0.00%)                  ExprKind::Path(ref qself, ref path) => {
    702 ( 0.00%)                      let qpath = self.lower_qpath(
    234 ( 0.00%)                          e.id,
      .                                   qself,
      .                                   path,
      .                                   ParamMode::Optional,
      .                                   ImplTraitContext::disallowed(),
      .                               );
    702 ( 0.00%)                      hir::ExprKind::Path(qpath)
      .                           }
      .                           ExprKind::Break(opt_label, ref opt_expr) => {
      .                               let opt_expr = opt_expr.as_ref().map(|x| self.lower_expr(x));
      .                               hir::ExprKind::Break(self.lower_jump_destination(e.id, opt_label), opt_expr)
      .                           }
      .                           ExprKind::Continue(opt_label) => {
      .                               hir::ExprKind::Continue(self.lower_jump_destination(e.id, opt_label))
      .                           }
-- line 216 ----------------------------------------
-- line 275 ----------------------------------------
      .                           // Desugar `ExprForLoop`
      .                           // from: `[opt_ident]: for <pat> in <head> <body>`
      .                           ExprKind::ForLoop(ref pat, ref head, ref body, opt_label) => {
      .                               return self.lower_expr_for(e, pat, head, body, opt_label);
      .                           }
      .                           ExprKind::MacCall(_) => panic!("{:?} shouldn't exist here", e.span),
      .                       };
      .           
 88,497 ( 0.01%)              let hir_id = self.lower_node_id(e.id);
117,996 ( 0.01%)              self.lower_attrs(hir_id, &e.attrs);
471,984 ( 0.05%)              hir::Expr { hir_id, kind, span: self.lower_span(e.span) }
      .                   })
      .               }
      .           
      .               fn lower_unop(&mut self, u: UnOp) -> hir::UnOp {
      .                   match u {
      .                       UnOp::Deref => hir::UnOp::Deref,
      .                       UnOp::Not => hir::UnOp::Not,
      .                       UnOp::Neg => hir::UnOp::Neg,
      .                   }
      .               }
      .           
     66 ( 0.00%)      fn lower_binop(&mut self, b: BinOp) -> hir::BinOp {
      .                   Spanned {
      .                       node: match b.node {
      .                           BinOpKind::Add => hir::BinOpKind::Add,
      .                           BinOpKind::Sub => hir::BinOpKind::Sub,
      .                           BinOpKind::Mul => hir::BinOpKind::Mul,
      .                           BinOpKind::Div => hir::BinOpKind::Div,
      .                           BinOpKind::Rem => hir::BinOpKind::Rem,
      .                           BinOpKind::And => hir::BinOpKind::And,
-- line 305 ----------------------------------------
-- line 313 ----------------------------------------
      .                           BinOpKind::Lt => hir::BinOpKind::Lt,
      .                           BinOpKind::Le => hir::BinOpKind::Le,
      .                           BinOpKind::Ne => hir::BinOpKind::Ne,
      .                           BinOpKind::Ge => hir::BinOpKind::Ge,
      .                           BinOpKind::Gt => hir::BinOpKind::Gt,
      .                       },
      .                       span: self.lower_span(b.span),
      .                   }
     66 ( 0.00%)      }
      .           
      .               fn lower_legacy_const_generics(
      .                   &mut self,
      .                   mut f: Expr,
      .                   args: Vec<AstP<Expr>>,
      .                   legacy_args_idx: &[usize],
      .               ) -> hir::ExprKind<'hir> {
      .                   let path = match f.kind {
-- line 329 ----------------------------------------
-- line 494 ----------------------------------------
      .                       method_span,
      .                       lang_item,
      .                       ThinVec::new(),
      .                       None,
      .                   ));
      .                   self.expr_call(overall_span, constructor, std::slice::from_ref(expr))
      .               }
      .           
    130 ( 0.00%)      fn lower_arm(&mut self, arm: &Arm) -> hir::Arm<'hir> {
      .                   let pat = self.lower_pat(&arm.pat);
      .                   let guard = arm.guard.as_ref().map(|cond| {
      .                       if let ExprKind::Let(ref pat, ref scrutinee, _) = cond.kind {
      .                           hir::Guard::IfLet(self.lower_pat(pat), self.lower_expr(scrutinee))
      .                       } else {
      .                           hir::Guard::If(self.lower_expr(cond))
      .                       }
      .                   });
      .                   let hir_id = self.next_id();
     39 ( 0.00%)          self.lower_attrs(hir_id, &arm.attrs);
    156 ( 0.00%)          hir::Arm {
      .                       hir_id,
      .                       pat,
      .                       guard,
      .                       body: self.lower_expr(&arm.body),
     13 ( 0.00%)              span: self.lower_span(arm.span),
      .                   }
    117 ( 0.00%)      }
      .           
      .               /// Lower an `async` construct to a generator that is then wrapped so it implements `Future`.
      .               ///
      .               /// This results in:
      .               ///
      .               /// ```text
      .               /// std::future::from_generator(static move? |_task_context| -> <ret_ty> {
      .               ///     <body>
-- line 528 ----------------------------------------
-- line 1713 ----------------------------------------
      .                   self.arena.alloc(expr)
      .               }
      .           
      .               pub(super) fn expr_block(
      .                   &mut self,
      .                   b: &'hir hir::Block<'hir>,
      .                   attrs: AttrVec,
      .               ) -> hir::Expr<'hir> {
    288 ( 0.00%)          self.expr(b.span, hir::ExprKind::Block(b, None), attrs)
      .               }
      .           
    468 ( 0.00%)      pub(super) fn expr(
      .                   &mut self,
      .                   span: Span,
      .                   kind: hir::ExprKind<'hir>,
      .                   attrs: AttrVec,
      .               ) -> hir::Expr<'hir> {
      .                   let hir_id = self.next_id();
    108 ( 0.00%)          self.lower_attrs(hir_id, &attrs);
    540 ( 0.00%)          hir::Expr { hir_id, kind, span: self.lower_span(span) }
    288 ( 0.00%)      }
      .           
      .               fn expr_field(
      .                   &mut self,
      .                   ident: Ident,
      .                   expr: &'hir hir::Expr<'hir>,
      .                   span: Span,
      .               ) -> hir::ExprField<'hir> {
      .                   hir::ExprField {
-- line 1741 ----------------------------------------

 59,065 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_lowering/src/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs
--------------------------------------------------------------------------------
Ir               

-- line 125 ----------------------------------------
      .               /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }
      .               /// ```
      .               ///
      .               /// we can assume in the caller's body that `'b: 'a` and that `T:
      .               /// 'b` (and hence, transitively, that `T: 'a`). This method would
      .               /// add those assumptions into the outlives-environment.
      .               ///
      .               /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`
  2,328 ( 0.00%)      fn add_implied_bounds<'a>(
      .                   &mut self,
      .                   infcx: &InferCtxt<'a, 'tcx>,
      .                   fn_sig_tys: FxHashSet<Ty<'tcx>>,
      .                   body_id: hir::HirId,
      .                   span: Span,
      .               ) {
      .                   debug!("add_implied_bounds()");
      .           
  3,962 ( 0.00%)          for ty in fn_sig_tys {
      .                       let ty = infcx.resolve_vars_if_possible(ty);
      .                       debug!("add_implied_bounds: ty = {}", ty);
  2,988 ( 0.00%)              let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);
      .                       self.add_outlives_bounds(Some(infcx), implied_bounds)
      .                   }
  1,552 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // PUBLIC ENTRY POINTS
      .           
      .           impl<'a, 'tcx> FnCtxt<'a, 'tcx> {
    252 ( 0.00%)      pub fn regionck_expr(&self, body: &'tcx hir::Body<'tcx>) {
    196 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
     56 ( 0.00%)          let id = body.value.hir_id;
    196 ( 0.00%)          let mut rcx = RegionCtxt::new(self, id, Subject(subject), self.param_env);
      .           
      .                   // There are no add'l implied bounds when checking a
      .                   // standalone expr (e.g., the `E` in a type like `[u32; E]`).
    140 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(id);
      .           
     28 ( 0.00%)          if !self.errors_reported_since_creation() {
      .                       // regionck assumes typeck succeeded
      .                       rcx.visit_body(body);
      .                       rcx.visit_region_obligations(id);
      .                   }
     56 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
    252 ( 0.00%)      }
      .           
      .               /// Region checking during the WF phase for items. `wf_tys` are the
      .               /// types from which we should derive implied bounds, if any.
  1,464 ( 0.00%)      pub fn regionck_item(&self, item_id: hir::HirId, span: Span, wf_tys: FxHashSet<Ty<'tcx>>) {
      .                   debug!("regionck_item(item.id={:?}, wf_tys={:?})", item_id, wf_tys);
    488 ( 0.00%)          let subject = self.tcx.hir().local_def_id(item_id);
    854 ( 0.00%)          let mut rcx = RegionCtxt::new(self, item_id, Subject(subject), self.param_env);
  1,342 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, item_id, span);
    488 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(item_id);
      .                   rcx.visit_region_obligations(item_id);
      .                   rcx.resolve_regions_and_report_errors(RegionckMode::default());
  1,098 ( 0.00%)      }
      .           
      .               /// Region check a function body. Not invoked on closures, but
      .               /// only on the "root" fn item (in which closures may be
      .               /// embedded). Walks the function body and adds various add'l
      .               /// constraints that are needed for region inference. This is
      .               /// separated both to isolate "pure" region constraints from the
      .               /// rest of type check and because sometimes we need type
      .               /// inference to have completed before we can determine which
      .               /// constraints to add.
    468 ( 0.00%)      pub(crate) fn regionck_fn(
      .                   &self,
      .                   fn_id: hir::HirId,
      .                   body: &'tcx hir::Body<'tcx>,
      .                   span: Span,
      .                   wf_tys: FxHashSet<Ty<'tcx>>,
      .               ) {
      .                   debug!("regionck_fn(id={})", fn_id);
    216 ( 0.00%)          let subject = self.tcx.hir().body_owner_def_id(body.id());
     72 ( 0.00%)          let hir_id = body.value.hir_id;
    180 ( 0.00%)          let mut rcx = RegionCtxt::new(self, hir_id, Subject(subject), self.param_env);
      .                   // We need to add the implied bounds from the function signature
    432 ( 0.00%)          rcx.outlives_environment.add_implied_bounds(self, wf_tys, fn_id, span);
    144 ( 0.00%)          rcx.outlives_environment.save_implied_bounds(fn_id);
      .           
     36 ( 0.00%)          if !self.errors_reported_since_creation() {
      .                       // regionck assumes typeck succeeded
    396 ( 0.00%)              rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));
      .                   }
      .           
     72 ( 0.00%)          rcx.resolve_regions_and_report_errors(RegionckMode::for_item_body(self.tcx));
    324 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // INTERNALS
      .           
      .           pub struct RegionCtxt<'a, 'tcx> {
      .               pub fcx: &'a FnCtxt<'a, 'tcx>,
      .           
-- line 221 ----------------------------------------
-- line 229 ----------------------------------------
      .           
      .               // id of AST node being analyzed (the subject of the analysis).
      .               subject_def_id: LocalDefId,
      .           }
      .           
      .           impl<'a, 'tcx> Deref for RegionCtxt<'a, 'tcx> {
      .               type Target = FnCtxt<'a, 'tcx>;
      .               fn deref(&self) -> &Self::Target {
 89,541 ( 0.01%)          self.fcx
      .               }
      .           }
      .           
      .           pub struct Subject(LocalDefId);
      .           
      .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
  2,046 ( 0.00%)      pub fn new(
      .                   fcx: &'a FnCtxt<'a, 'tcx>,
      .                   initial_body_id: hir::HirId,
      .                   Subject(subject): Subject,
      .                   param_env: ty::ParamEnv<'tcx>,
      .               ) -> RegionCtxt<'a, 'tcx> {
    186 ( 0.00%)          let region_scope_tree = fcx.tcx.region_scope_tree(subject);
    372 ( 0.00%)          let outlives_environment = OutlivesEnvironment::new(param_env);
  1,302 ( 0.00%)          RegionCtxt {
      .                       fcx,
      .                       region_scope_tree,
      .                       body_id: initial_body_id,
      .                       body_owner: subject,
      .                       subject_def_id: subject,
    744 ( 0.00%)              outlives_environment,
      .                   }
  1,674 ( 0.00%)      }
      .           
      .               /// Try to resolve the type for the given node, returning `t_err` if an error results. Note that
      .               /// we never care about the details of the error, the same error will be detected and reported
      .               /// in the writeback phase.
      .               ///
      .               /// Note one important point: we do not attempt to resolve *region variables* here. This is
      .               /// because regionck is essentially adding constraints to those region variables and so may yet
      .               /// influence how they are resolved.
-- line 268 ----------------------------------------
-- line 283 ----------------------------------------
      .               /// of b will be `&<R0>.i32` and then `*b` will require that `<R0>` be bigger than the let and
      .               /// the `*b` expression, so we will effectively resolve `<R0>` to be the block B.
      .               pub fn resolve_type(&self, unresolved_ty: Ty<'tcx>) -> Ty<'tcx> {
      .                   self.resolve_vars_if_possible(unresolved_ty)
      .               }
      .           
      .               /// Try to resolve the type for the given node.
      .               fn resolve_node_type(&self, id: hir::HirId) -> Ty<'tcx> {
     29 ( 0.00%)          let t = self.node_ty(id);
     29 ( 0.00%)          self.resolve_type(t)
      .               }
      .           
      .               /// This is the "main" function when region-checking a function item or a
      .               /// closure within a function item. It begins by updating various fields
      .               /// (e.g., `outlives_environment`) to be appropriate to the function and
      .               /// then adds constraints derived from the function body.
      .               ///
      .               /// Note that it does **not** restore the state of the fields that
      .               /// it updates! This is intentional, since -- for the main
      .               /// function -- we wish to be able to read the final
      .               /// `outlives_environment` and other fields from the caller. For
      .               /// closures, however, we save and restore any "scoped state"
      .               /// before we invoke this function. (See `visit_fn` in the
      .               /// `intravisit::Visitor` impl below.)
    504 ( 0.00%)      fn visit_fn_body(
      .                   &mut self,
      .                   id: hir::HirId, // the id of the fn itself
      .                   body: &'tcx hir::Body<'tcx>,
      .                   span: Span,
      .               ) {
      .                   // When we enter a function, we can derive
      .                   debug!("visit_fn_body(id={:?})", id);
      .           
    144 ( 0.00%)          let body_id = body.id();
     72 ( 0.00%)          self.body_id = body_id.hir_id;
    252 ( 0.00%)          self.body_owner = self.tcx.hir().body_owner_def_id(body_id);
      .           
      .                   let fn_sig = {
    360 ( 0.00%)              match self.typeck_results.borrow().liberated_fn_sigs().get(id) {
     72 ( 0.00%)                  Some(f) => *f,
      .                           None => {
      .                               bug!("No fn-sig entry for id={:?}", id);
      .                           }
      .                       }
      .                   };
      .           
      .                   // Collect the types from which we create inferred bounds.
      .                   // For the return type, if diverging, substitute `bool` just
      .                   // because it will have no effect.
      .                   //
      .                   // FIXME(#27579) return types should not be implied bounds
      .                   let fn_sig_tys: FxHashSet<_> =
    180 ( 0.00%)              fn_sig.inputs().iter().cloned().chain(Some(fn_sig.output())).collect();
      .           
    468 ( 0.00%)          self.outlives_environment.add_implied_bounds(self.fcx, fn_sig_tys, body_id.hir_id, span);
    180 ( 0.00%)          self.outlives_environment.save_implied_bounds(body_id.hir_id);
     72 ( 0.00%)          self.link_fn_params(body.params);
      .                   self.visit_body(body);
      .                   self.visit_region_obligations(body_id.hir_id);
    288 ( 0.00%)      }
      .           
      .               fn visit_inline_const(&mut self, id: hir::HirId, body: &'tcx hir::Body<'tcx>) {
      .                   debug!("visit_inline_const(id={:?})", id);
      .           
      .                   // Save state of current function. We will restore afterwards.
      .                   let old_body_id = self.body_id;
      .                   let old_body_owner = self.body_owner;
      .                   let env_snapshot = self.outlives_environment.push_snapshot_pre_typeck_child();
-- line 350 ----------------------------------------
-- line 365 ----------------------------------------
      .               }
      .           
      .               fn visit_region_obligations(&mut self, hir_id: hir::HirId) {
      .                   debug!("visit_region_obligations: hir_id={:?}", hir_id);
      .           
      .                   // region checking can introduce new pending obligations
      .                   // which, when processed, might generate new region
      .                   // obligations. So make sure we process those.
    186 ( 0.00%)          self.select_all_obligations_or_error();
      .               }
      .           
      .               fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {
    558 ( 0.00%)          self.infcx.process_registered_region_obligations(
    372 ( 0.00%)              self.outlives_environment.region_bound_pairs_map(),
    372 ( 0.00%)              Some(self.tcx.lifetimes.re_root_empty),
    186 ( 0.00%)              self.param_env,
      .                   );
      .           
    930 ( 0.00%)          self.fcx.resolve_regions_and_report_errors(
    186 ( 0.00%)              self.subject_def_id.to_def_id(),
      .                       &self.outlives_environment,
      .                       mode,
      .                   );
      .               }
      .           
      .               fn constrain_bindings_in_pat(&mut self, pat: &hir::Pat<'_>) {
      .                   debug!("regionck::visit_pat(pat={:?})", pat);
      .                   pat.each_binding(|_, hir_id, span, _| {
-- line 392 ----------------------------------------
-- line 433 ----------------------------------------
      .                   self.body_id = old_body_id;
      .                   self.body_owner = old_body_owner;
      .               }
      .           
      .               //visit_pat: visit_pat, // (..) see above
      .           
      .               fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {
      .                   // see above
     91 ( 0.00%)          self.constrain_bindings_in_pat(arm.pat);
      .                   intravisit::walk_arm(self, arm);
      .               }
      .           
      .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      .                   // see above
      .                   self.constrain_bindings_in_pat(l.pat);
      .                   self.link_local(l);
      .                   intravisit::walk_local(self, l);
      .               }
      .           
236,280 ( 0.02%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
      .                   // Check any autoderefs or autorefs that appear.
      .                   let cmt_result = self.constrain_adjustments(expr);
      .           
      .                   // If necessary, constrain destructors in this expression. This will be
      .                   // the adjusted form if there is an adjustment.
 59,101 ( 0.01%)          match cmt_result {
265,815 ( 0.03%)              Ok(head_cmt) => {
      .                           self.check_safety_of_rvalue_destructor_if_necessary(&head_cmt, expr.span);
      .                       }
      .                       Err(..) => {
      .                           self.tcx.sess.delay_span_bug(expr.span, "cat_expr Errd");
      .                       }
      .                   }
      .           
206,799 ( 0.02%)          match expr.kind {
      .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref base) => {
      .                           self.link_addr_of(expr, m, base);
      .           
      .                           intravisit::walk_expr(self, expr);
      .                       }
      .           
      .                       hir::ExprKind::Match(ref discr, arms, _) => {
      .                           self.link_match(discr, arms);
-- line 475 ----------------------------------------
-- line 479 ----------------------------------------
      .           
      .                       hir::ExprKind::ConstBlock(anon_const) => {
      .                           let body = self.tcx.hir().body(anon_const.body);
      .                           self.visit_inline_const(anon_const.hir_id, body);
      .                       }
      .           
      .                       _ => intravisit::walk_expr(self, expr),
      .                   }
236,280 ( 0.02%)      }
      .           }
      .           
      .           impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {
      .               /// Creates a temporary `MemCategorizationContext` and pass it to the closure.
      .               fn with_mc<F, R>(&self, f: F) -> R
      .               where
      .                   F: for<'b> FnOnce(mc::MemCategorizationContext<'b, 'tcx>) -> R,
      .               {
298,093 ( 0.03%)          f(mc::MemCategorizationContext::new(
      .                       &self.infcx,
      .                       self.outlives_environment.param_env,
      .                       self.body_owner,
 29,742 ( 0.00%)              &self.typeck_results.borrow(),
      .                   ))
      .               }
      .           
      .               /// Invoked on any adjustments that occur. Checks that if this is a region pointer being
      .               /// dereferenced, the lifetime of the pointer includes the deref expr.
      .               fn constrain_adjustments(
      .                   &mut self,
      .                   expr: &hir::Expr<'_>,
      .               ) -> mc::McResult<PlaceWithHirId<'tcx>> {
      .                   debug!("constrain_adjustments(expr={:?})", expr);
      .           
 59,070 ( 0.01%)          let mut place = self.with_mc(|mc| mc.cat_expr_unadjusted(expr))?;
      .           
 29,535 ( 0.00%)          let typeck_results = self.typeck_results.borrow();
 29,535 ( 0.00%)          let adjustments = typeck_results.expr_adjustments(expr);
 29,535 ( 0.00%)          if adjustments.is_empty() {
265,536 ( 0.03%)              return Ok(place);
      .                   }
      .           
      .                   debug!("constrain_adjustments: adjustments={:?}", adjustments);
      .           
      .                   // If necessary, constrain destructors in the unadjusted form of this
      .                   // expression.
      .                   self.check_safety_of_rvalue_destructor_if_necessary(&place, expr.span);
      .           
      .                   for adjustment in adjustments {
      .                       debug!("constrain_adjustments: adjustment={:?}, place={:?}", adjustment, place);
      .           
    357 ( 0.00%)              if let adjustment::Adjust::Deref(Some(deref)) = adjustment.kind {
      .                           self.link_region(
      .                               expr.span,
      .                               deref.region,
      .                               ty::BorrowKind::from_mutbl(deref.mutbl),
      .                               &place,
      .                           );
      .                       }
      .           
    118 ( 0.00%)              if let adjustment::Adjust::Borrow(ref autoref) = adjustment.kind {
      .                           self.link_autoref(expr, &place, autoref);
      .                       }
      .           
  1,335 ( 0.00%)              place = self.with_mc(|mc| mc.cat_expr_adjusted(expr, place, adjustment))?;
      .                   }
      .           
    310 ( 0.00%)          Ok(place)
      .               }
      .           
      .               fn check_safety_of_rvalue_destructor_if_necessary(
      .                   &mut self,
      .                   place_with_id: &PlaceWithHirId<'tcx>,
      .                   span: Span,
      .               ) {
 59,132 ( 0.01%)          if let PlaceBase::Rvalue = place_with_id.place.base {
 29,477 ( 0.00%)              if place_with_id.place.projections.is_empty() {
 29,537 ( 0.00%)                  let typ = self.resolve_type(place_with_id.place.ty());
 58,954 ( 0.01%)                  let body_id = self.body_id;
117,908 ( 0.01%)                  dropck::check_drop_obligations(self, typ, span, body_id);
      .                       }
      .                   }
      .               }
      .               /// Adds constraints to inference such that `T: 'a` holds (or
      .               /// reports an error if it cannot).
      .               ///
      .               /// # Parameters
      .               ///
-- line 565 ----------------------------------------
-- line 567 ----------------------------------------
      .               /// - `ty`, the type `T`
      .               /// - `region`, the region `'a`
      .               pub fn type_must_outlive(
      .                   &self,
      .                   origin: infer::SubregionOrigin<'tcx>,
      .                   ty: Ty<'tcx>,
      .                   region: ty::Region<'tcx>,
      .               ) {
    180 ( 0.00%)          self.infcx.register_region_obligation(
    180 ( 0.00%)              self.body_id,
    480 ( 0.00%)              RegionObligation { sub_region: region, sup_type: ty, origin },
      .                   );
      .               }
      .           
      .               /// Computes the guarantor for an expression `&base` and then ensures that the lifetime of the
      .               /// resulting pointer is linked to the lifetime of its guarantor (if any).
      .               fn link_addr_of(
      .                   &mut self,
      .                   expr: &hir::Expr<'_>,
      .                   mutability: hir::Mutability,
      .                   base: &hir::Expr<'_>,
      .               ) {
      .                   debug!("link_addr_of(expr={:?}, base={:?})", expr, base);
      .           
    319 ( 0.00%)          let cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(base)));
      .           
      .                   debug!("link_addr_of: cmt={:?}", cmt);
      .           
     87 ( 0.00%)          self.link_region_from_node_type(expr.span, expr.hir_id, mutability, &cmt);
      .               }
      .           
      .               /// Computes the guarantors for any ref bindings in a `let` and
      .               /// then ensures that the lifetime of the resulting pointer is
      .               /// linked to the lifetime of the initialization expression.
      .               fn link_local(&self, local: &hir::Local<'_>) {
      .                   debug!("regionck::for_local()");
      .                   let init_expr = match local.init {
-- line 603 ----------------------------------------
-- line 610 ----------------------------------------
      .                   self.link_pattern(discr_cmt, local.pat);
      .               }
      .           
      .               /// Computes the guarantors for any ref bindings in a match and
      .               /// then ensures that the lifetime of the resulting pointer is
      .               /// linked to the lifetime of its guarantor (if any).
      .               fn link_match(&self, discr: &hir::Expr<'_>, arms: &[hir::Arm<'_>]) {
      .                   debug!("regionck::for_match()");
     20 ( 0.00%)          let discr_cmt = ignore_err!(self.with_mc(|mc| mc.cat_expr(discr)));
      .                   debug!("discr_cmt={:?}", discr_cmt);
      .                   for arm in arms {
     52 ( 0.00%)              self.link_pattern(discr_cmt.clone(), arm.pat);
      .                   }
      .               }
      .           
      .               /// Computes the guarantors for any ref bindings in a match and
      .               /// then ensures that the lifetime of the resulting pointer is
      .               /// linked to the lifetime of its guarantor (if any).
      .               fn link_fn_params(&self, params: &[hir::Param<'_>]) {
      .                   for param in params {
    148 ( 0.00%)              let param_ty = self.node_ty(param.hir_id);
      .                       let param_cmt =
     74 ( 0.00%)                  self.with_mc(|mc| mc.cat_rvalue(param.hir_id, param.pat.span, param_ty));
      .                       debug!("param_ty={:?} param_cmt={:?} param={:?}", param_ty, param_cmt, param);
    444 ( 0.00%)              self.link_pattern(param_cmt, param.pat);
      .                   }
      .               }
      .           
      .               /// Link lifetimes of any ref bindings in `root_pat` to the pointers found
      .               /// in the discriminant, if needed.
    300 ( 0.00%)      fn link_pattern(&self, discr_cmt: PlaceWithHirId<'tcx>, root_pat: &hir::Pat<'_>) {
      .                   debug!("link_pattern(discr_cmt={:?}, root_pat={:?})", discr_cmt, root_pat);
      .                   ignore_err!(self.with_mc(|mc| {
    150 ( 0.00%)              mc.cat_pattern(discr_cmt, root_pat, |sub_cmt, hir::Pat { kind, span, hir_id, .. }| {
      .                           // `ref x` pattern
    100 ( 0.00%)                  if let PatKind::Binding(..) = kind {
    148 ( 0.00%)                      if let Some(ty::BindByReference(mutbl)) =
    518 ( 0.00%)                          mc.typeck_results.extract_binding_mode(self.tcx.sess, *hir_id, *span)
      .                               {
      .                                   self.link_region_from_node_type(*span, *hir_id, mutbl, sub_cmt);
      .                               }
      .                           }
      .                       })
      .                   }));
    300 ( 0.00%)      }
      .           
      .               /// Link lifetime of borrowed pointer resulting from autoref to lifetimes in the value being
      .               /// autoref'd.
      .               fn link_autoref(
      .                   &self,
      .                   expr: &hir::Expr<'_>,
      .                   expr_cmt: &PlaceWithHirId<'tcx>,
      .                   autoref: &adjustment::AutoBorrow<'tcx>,
      .               ) {
      .                   debug!("link_autoref(autoref={:?}, expr_cmt={:?})", autoref, expr_cmt);
      .           
     62 ( 0.00%)          match *autoref {
     62 ( 0.00%)              adjustment::AutoBorrow::Ref(r, m) => {
    310 ( 0.00%)                  self.link_region(expr.span, r, ty::BorrowKind::from_mutbl(m.into()), expr_cmt);
      .                       }
      .           
      .                       adjustment::AutoBorrow::RawPtr(_) => {}
      .                   }
      .               }
      .           
      .               /// Like `link_region()`, except that the region is extracted from the type of `id`,
      .               /// which must be some reference (`&T`, `&str`, etc).
-- line 676 ----------------------------------------
-- line 682 ----------------------------------------
      .                   cmt_borrowed: &PlaceWithHirId<'tcx>,
      .               ) {
      .                   debug!(
      .                       "link_region_from_node_type(id={:?}, mutbl={:?}, cmt_borrowed={:?})",
      .                       id, mutbl, cmt_borrowed
      .                   );
      .           
      .                   let rptr_ty = self.resolve_node_type(id);
     58 ( 0.00%)          if let ty::Ref(r, _, _) = rptr_ty.kind() {
      .                       debug!("rptr_ty={}", rptr_ty);
    203 ( 0.00%)              self.link_region(span, r, ty::BorrowKind::from_mutbl(mutbl), cmt_borrowed);
      .                   }
      .               }
      .           
      .               /// Informs the inference engine that `borrow_cmt` is being borrowed with
      .               /// kind `borrow_kind` and lifetime `borrow_region`.
      .               /// In order to ensure borrowck is satisfied, this may create constraints
      .               /// between regions, as explained in `link_reborrowed_region()`.
    660 ( 0.00%)      fn link_region(
      .                   &self,
      .                   span: Span,
      .                   borrow_region: ty::Region<'tcx>,
      .                   borrow_kind: ty::BorrowKind,
      .                   borrow_place: &PlaceWithHirId<'tcx>,
      .               ) {
    180 ( 0.00%)          let origin = infer::DataBorrowed(borrow_place.place.ty(), span);
    360 ( 0.00%)          self.type_must_outlive(origin, borrow_place.place.ty(), borrow_region);
      .           
    330 ( 0.00%)          for pointer_ty in borrow_place.place.deref_tys() {
      .                       debug!(
      .                           "link_region(borrow_region={:?}, borrow_kind={:?}, pointer_ty={:?})",
      .                           borrow_region, borrow_kind, borrow_place
      .                       );
     90 ( 0.00%)              match *pointer_ty.kind() {
      .                           ty::RawPtr(_) => return,
    270 ( 0.00%)                  ty::Ref(ref_region, _, ref_mutability) => {
     30 ( 0.00%)                      if self.link_reborrowed_region(span, borrow_region, ref_region, ref_mutability)
      .                               {
      .                                   return;
      .                               }
      .                           }
      .                           _ => assert!(pointer_ty.is_box(), "unexpected built-in deref type {}", pointer_ty),
      .                       }
      .                   }
     60 ( 0.00%)          if let PlaceBase::Upvar(upvar_id) = borrow_place.place.base {
      .                       self.link_upvar_region(span, borrow_region, upvar_id);
      .                   }
    480 ( 0.00%)      }
      .           
      .               /// This is the most complicated case: the path being borrowed is
      .               /// itself the referent of a borrowed pointer. Let me give an
      .               /// example fragment of code to make clear(er) the situation:
      .               ///
      .               /// ```ignore (incomplete Rust code)
      .               /// let r: &'a mut T = ...;  // the original reference "r" has lifetime 'a
      .               /// ...
-- line 737 ----------------------------------------
-- line 764 ----------------------------------------
      .               fn link_reborrowed_region(
      .                   &self,
      .                   span: Span,
      .                   borrow_region: ty::Region<'tcx>,
      .                   ref_region: ty::Region<'tcx>,
      .                   ref_mutability: hir::Mutability,
      .               ) -> bool {
      .                   debug!("link_reborrowed_region: {:?} <= {:?}", borrow_region, ref_region);
    150 ( 0.00%)          self.sub_regions(infer::Reborrow(span), borrow_region, ref_region);
      .           
      .                   // Decide whether we need to recurse and link any regions within
      .                   // the `ref_cmt`. This is concerned for the case where the value
      .                   // being reborrowed is in fact a borrowed pointer found within
      .                   // another borrowed pointer. For example:
      .                   //
      .                   //    let p: &'b &'a mut T = ...;
      .                   //    ...
-- line 780 ----------------------------------------

237,877 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_typeck/src/check/regionck.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ptr.rs
--------------------------------------------------------------------------------
Ir               

-- line 47 ----------------------------------------
      .               where
      .                   F: FnOnce(T) -> U,
      .               {
      .                   f(*self.ptr)
      .               }
      .           
      .               /// Equivalent to `and_then(|x| x)`.
      .               pub fn into_inner(self) -> T {
     12 ( 0.00%)          *self.ptr
      .               }
      .           
      .               /// Produce a new `P<T>` from `self` without reallocating.
234,944 ( 0.02%)      pub fn map<F>(mut self, f: F) -> P<T>
      .               where
      .                   F: FnOnce(T) -> T,
      .               {
528,624 ( 0.06%)          let x = f(*self.ptr);
205,609 ( 0.02%)          *self.ptr = x;
      .           
      .                   self
264,312 ( 0.03%)      }
      .           
      .               /// Optionally produce a new `P<T>` from `self` without reallocating.
      .               pub fn filter_map<F>(mut self, f: F) -> Option<P<T>>
      .               where
      .                   F: FnOnce(T) -> Option<T>,
      .               {
      .                   *self.ptr = f(*self.ptr)?;
      .                   Some(self)
      .               }
      .           }
      .           
      .           impl<T: ?Sized> Deref for P<T> {
      .               type Target = T;
      .           
      .               fn deref(&self) -> &T {
362,169 ( 0.04%)          &self.ptr
      .               }
      .           }
      .           
      .           impl<T: ?Sized> DerefMut for P<T> {
      .               fn deref_mut(&mut self) -> &mut T {
    762 ( 0.00%)          &mut self.ptr
      .               }
      .           }
      .           
      .           impl<T: 'static + Clone> Clone for P<T> {
      .               fn clone(&self) -> P<T> {
      .                   P((**self).clone())
      .               }
      .           }
-- line 97 ----------------------------------------
-- line 111 ----------------------------------------
      .           impl<T> fmt::Pointer for P<T> {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   fmt::Pointer::fmt(&self.ptr, f)
      .               }
      .           }
      .           
      .           impl<D: Decoder, T: 'static + Decodable<D>> Decodable<D> for P<T> {
      .               fn decode(d: &mut D) -> P<T> {
      2 ( 0.00%)          P(Decodable::decode(d))
      .               }
      .           }
      .           
      .           impl<S: Encoder, T: Encodable<S>> Encodable<S> for P<T> {
      .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
      .                   (**self).encode(s)
      .               }
      .           }
-- line 127 ----------------------------------------

     56 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ptr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs
--------------------------------------------------------------------------------
Ir                 

-- line 55 ----------------------------------------
        .           ///   `ctxt` values depend partly on the crate size and partly on the form of
        .           ///   the code. No crates in `rustc-perf` need more than 15 bits for `ctxt`,
        .           ///   but larger crates might need more than 16 bits.
        .           ///
        .           /// In order to reliably use parented spans in incremental compilation,
        .           /// the dependency to the parent definition's span. This is performed
        .           /// using the callback `SPAN_TRACK` to access the query engine.
        .           ///
   65,483 ( 0.01%)  #[derive(Clone, Copy, Eq, PartialEq, Hash)]
        .           // FIXME(@lcnr): Enable this attribute once the bootstrap
        .           // compiler knows of `rustc_pass_by_value`.
        .           //
        .           // Right now, this lint would only trigger when compiling the
        .           // stage 2 compiler, which is fairly annoying as there are
        .           // a lot of places using `&Span` right now. After the next bootstrap bump,
        .           // the lint will already trigger when using stage 1, which is a lot less annoying.
        .           //
        .           // #[cfg_attr(not(bootstrap), rustc_pass_by_value)]
        .           pub struct Span {
      240 ( 0.00%)      base_or_index: u32,
        4 ( 0.00%)      len_or_tag: u16,
      476 ( 0.00%)      ctxt_or_zero: u16,
        .           }
        .           
        .           const LEN_TAG: u16 = 0b1000_0000_0000_0000;
        .           const MAX_LEN: u32 = 0b0111_1111_1111_1111;
        .           const MAX_CTXT: u32 = 0b1111_1111_1111_1111;
        .           
        .           /// Dummy span, both position and length are zero, syntax context is zero as well.
        .           pub const DUMMY_SP: Span = Span { base_or_index: 0, len_or_tag: 0, ctxt_or_zero: 0 };
-- line 84 ----------------------------------------
-- line 86 ----------------------------------------
        .           impl Span {
        .               #[inline]
        .               pub fn new(
        .                   mut lo: BytePos,
        .                   mut hi: BytePos,
        .                   ctxt: SyntaxContext,
        .                   parent: Option<LocalDefId>,
        .               ) -> Self {
   97,814 ( 0.01%)          if lo > hi {
        .                       std::mem::swap(&mut lo, &mut hi);
        .                   }
        .           
  195,628 ( 0.02%)          let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());
        .           
  577,553 ( 0.06%)          if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {
        .                       // Inline format.
        .                       Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_zero: ctxt2 as u16 }
        .                   } else {
        .                       // Interned format.
        .                       let index =
       85 ( 0.00%)                  with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));
        .                       Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_zero: 0 }
        .                   }
  235,572 ( 0.02%)      }
        .           
        .               #[inline]
        .               pub fn data(self) -> SpanData {
        .                   let data = self.data_untracked();
      144 ( 0.00%)          if let Some(parent) = data.parent {
        .                       (*SPAN_TRACK)(parent);
        .                   }
        .                   data
        .               }
        .           
        .               /// Internal function to translate between an encoded span and the expanded representation.
        .               /// This function must not be used outside the incremental engine.
        .               #[inline]
        .               pub fn data_untracked(self) -> SpanData {
1,144,414 ( 0.12%)          if self.len_or_tag != LEN_TAG {
        .                       // Inline format.
        .                       debug_assert!(self.len_or_tag as u32 <= MAX_LEN);
        .                       SpanData {
        .                           lo: BytePos(self.base_or_index),
  990,897 ( 0.10%)                  hi: BytePos(self.base_or_index + self.len_or_tag as u32),
        .                           ctxt: SyntaxContext::from_u32(self.ctxt_or_zero as u32),
        .                           parent: None,
        .                       }
        .                   } else {
        .                       // Interned format.
        .                       debug_assert!(self.ctxt_or_zero == 0);
   20,018 ( 0.00%)              let index = self.base_or_index;
   40,606 ( 0.00%)              with_span_interner(|interner| interner.spans[index as usize])
        .                   }
  590,063 ( 0.06%)      }
        .           }
        .           
        4 ( 0.00%)  #[derive(Default)]
        .           pub struct SpanInterner {
        .               spans: FxIndexSet<SpanData>,
        .           }
        .           
        .           impl SpanInterner {
       12 ( 0.00%)      fn intern(&mut self, span_data: &SpanData) -> u32 {
       16 ( 0.00%)          let (index, _) = self.spans.insert_full(*span_data);
        .                   index as u32
       16 ( 0.00%)      }
        .           }
        .           
        .           // If an interner exists, return it. Otherwise, prepare a fresh one.
        .           #[inline]
        .           fn with_span_interner<T, F: FnOnce(&mut SpanInterner) -> T>(f: F) -> T {
        .               crate::with_session_globals(|session_globals| f(&mut *session_globals.span_interner.lock()))
        .           }

  780,729 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/span_encoding.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs
--------------------------------------------------------------------------------
Ir               

-- line 32 ----------------------------------------
      .           ///
      .           /// If the syntax extension is an MBE macro, it will attempt to match its
      .           /// LHS token tree against the provided token tree, and if it finds a
      .           /// match, will transcribe the RHS token tree, splicing in any captured
      .           /// `macro_parser::matched_nonterminals` into the `SubstNt`s it finds.
      .           ///
      .           /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.
      .           /// Nothing special happens to misnamed or misplaced `SubstNt`s.
603,584 ( 0.06%)  #[derive(Debug, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub enum TokenTree {
      .               /// A single token.
239,188 ( 0.03%)      Token(Token),
      .               /// A delimited sequence of token trees.
    644 ( 0.00%)      Delimited(DelimSpan, DelimToken, TokenStream),
      .           }
      .           
      .           #[derive(Copy, Clone)]
      .           pub enum CanSynthesizeMissingTokens {
      .               Yes,
      .               No,
      .           }
      .           
-- line 53 ----------------------------------------
-- line 72 ----------------------------------------
      .                       }
      .                       _ => false,
      .                   }
      .               }
      .           
      .               /// Retrieves the `TokenTree`'s span.
      .               pub fn span(&self) -> Span {
      .                   match self {
      2 ( 0.00%)              TokenTree::Token(token) => token.span,
      .                       TokenTree::Delimited(sp, ..) => sp.entire(),
      .                   }
      .               }
      .           
      .               /// Modify the `TokenTree`'s span in-place.
      .               pub fn set_span(&mut self, span: Span) {
      .                   match self {
      .                       TokenTree::Token(token) => token.span = span,
      .                       TokenTree::Delimited(dspan, ..) => *dspan = DelimSpan::from_single(span),
      .                   }
      .               }
      .           
      .               pub fn token(kind: TokenKind, span: Span) -> TokenTree {
  2,432 ( 0.00%)          TokenTree::Token(Token::new(kind, span))
      .               }
      .           
      .               /// Returns the opening delimiter as a token tree.
    305 ( 0.00%)      pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
    915 ( 0.00%)          TokenTree::token(token::OpenDelim(delim), span.open)
    305 ( 0.00%)      }
      .           
      .               /// Returns the closing delimiter as a token tree.
    303 ( 0.00%)      pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {
    909 ( 0.00%)          TokenTree::token(token::CloseDelim(delim), span.close)
    303 ( 0.00%)      }
      .           
     15 ( 0.00%)      pub fn uninterpolate(self) -> TokenTree {
     10 ( 0.00%)          match self {
     45 ( 0.00%)              TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),
      .                       tt => tt,
      .                   }
     20 ( 0.00%)      }
      .           }
      .           
      .           impl<CTX> HashStable<CTX> for TokenStream
      .           where
      .               CTX: crate::HashStableContext,
      .           {
      .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
      .                   for sub_tt in self.trees() {
-- line 120 ----------------------------------------
-- line 188 ----------------------------------------
      .               Delimited(DelimSpan, DelimToken, AttrAnnotatedTokenStream),
      .               /// Stores the attributes for an attribute target,
      .               /// along with the tokens for that attribute target.
      .               /// See `AttributesData` for more information
      .               Attributes(AttributesData),
      .           }
      .           
      .           impl AttrAnnotatedTokenStream {
    604 ( 0.00%)      pub fn new(tokens: Vec<(AttrAnnotatedTokenTree, Spacing)>) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream(Lrc::new(tokens))
    604 ( 0.00%)      }
      .           
      .               /// Converts this `AttrAnnotatedTokenStream` to a plain `TokenStream
      .               /// During conversion, `AttrAnnotatedTokenTree::Attributes` get 'flattened'
      .               /// back to a `TokenStream` of the form `outer_attr attr_target`.
      .               /// If there are inner attributes, they are inserted into the proper
      .               /// place in the attribute target tokens.
      .               pub fn to_tokenstream(&self) -> TokenStream {
      .                   let trees: Vec<_> = self
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
      .           pub struct TokenStream(pub(crate) Lrc<Vec<TreeAndSpacing>>);
      .           
      .           pub type TreeAndSpacing = (TokenTree, Spacing);
      .           
      .           // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           rustc_data_structures::static_assert_size!(TokenStream, 8);
      .           
 60,460 ( 0.01%)  #[derive(Clone, Copy, Debug, PartialEq, Encodable, Decodable)]
      .           pub enum Spacing {
      .               Alone,
      .               Joint,
      .           }
      .           
      .           impl TokenStream {
      .               /// Given a `TokenStream` with a `Stream` of only two arguments, return a new `TokenStream`
      .               /// separating the two arguments with a comma for diagnostic suggestions.
-- line 332 ----------------------------------------
-- line 371 ----------------------------------------
      .           impl From<(AttrAnnotatedTokenTree, Spacing)> for AttrAnnotatedTokenStream {
      .               fn from((tree, spacing): (AttrAnnotatedTokenTree, Spacing)) -> AttrAnnotatedTokenStream {
      .                   AttrAnnotatedTokenStream::new(vec![(tree, spacing)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TokenStream {
      .               fn from(tree: TokenTree) -> TokenStream {
     10 ( 0.00%)          TokenStream::new(vec![(tree, Spacing::Alone)])
      .               }
      .           }
      .           
      .           impl From<TokenTree> for TreeAndSpacing {
      .               fn from(tree: TokenTree) -> TreeAndSpacing {
    908 ( 0.00%)          (tree, Spacing::Alone)
      .               }
      .           }
      .           
      .           impl iter::FromIterator<TokenTree> for TokenStream {
      .               fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {
      .                   TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndSpacing>>())
      .               }
      .           }
-- line 393 ----------------------------------------
-- line 401 ----------------------------------------
      .           }
      .           
      .           impl TokenStream {
      .               pub fn new(streams: Vec<TreeAndSpacing>) -> TokenStream {
      .                   TokenStream(Lrc::new(streams))
      .               }
      .           
      .               pub fn is_empty(&self) -> bool {
    300 ( 0.00%)          self.0.is_empty()
    300 ( 0.00%)      }
      .           
      .               pub fn len(&self) -> usize {
 60,768 ( 0.01%)          self.0.len()
      .               }
      .           
      .               pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {
      .                   match streams.len() {
      .                       0 => TokenStream::default(),
      .                       1 => streams.pop().unwrap(),
      .                       _ => {
      .                           // We are going to extend the first stream in `streams` with
-- line 421 ----------------------------------------
-- line 448 ----------------------------------------
      .           
      .                           // Create the final `TokenStream`.
      .                           TokenStream(first_stream_lrc)
      .                       }
      .                   }
      .               }
      .           
      .               pub fn trees(&self) -> Cursor {
      5 ( 0.00%)          self.clone().into_trees()
     10 ( 0.00%)      }
      .           
    333 ( 0.00%)      pub fn into_trees(self) -> Cursor {
      .                   Cursor::new(self)
    666 ( 0.00%)      }
      .           
      .               /// Compares two `TokenStream`s, checking equality without regarding span information.
      .               pub fn eq_unspanned(&self, other: &TokenStream) -> bool {
      .                   let mut t1 = self.trees();
      .                   let mut t2 = other.trees();
      .                   for (t1, t2) in iter::zip(&mut t1, &mut t2) {
      .                       if !t1.eq_unspanned(&t2) {
      .                           return false;
-- line 469 ----------------------------------------
-- line 572 ----------------------------------------
      .           pub struct Cursor {
      .               pub stream: TokenStream,
      .               index: usize,
      .           }
      .           
      .           impl Iterator for Cursor {
      .               type Item = TokenTree;
      .           
    273 ( 0.00%)      fn next(&mut self) -> Option<TokenTree> {
    459 ( 0.00%)          self.next_with_spacing().map(|(tree, _)| tree)
    364 ( 0.00%)      }
      .           }
      .           
      .           impl Cursor {
      .               fn new(stream: TokenStream) -> Self {
      .                   Cursor { stream, index: 0 }
      .               }
      .           
303,385 ( 0.03%)      pub fn next_with_spacing(&mut self) -> Option<TreeAndSpacing> {
182,304 ( 0.02%)          if self.index < self.stream.len() {
120,234 ( 0.01%)              self.index += 1;
420,385 ( 0.04%)              Some(self.stream.0[self.index - 1].clone())
      .                   } else {
  1,244 ( 0.00%)              None
      .                   }
364,062 ( 0.04%)      }
      .           
      .               pub fn index(&self) -> usize {
      .                   self.index
      .               }
      .           
      .               pub fn append(&mut self, new_stream: TokenStream) {
      .                   if new_stream.is_empty() {
      .                       return;
      .                   }
      .                   let index = self.index;
      .                   let stream = mem::take(&mut self.stream);
      .                   *self = TokenStream::from_streams(smallvec![stream, new_stream]).into_trees();
      .                   self.index = index;
      .               }
      .           
 59,660 ( 0.01%)      pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {
119,320 ( 0.01%)          self.stream.0[self.index..].get(n).map(|(tree, _)| tree)
119,320 ( 0.01%)      }
      .           }
      .           
  1,116 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
      .           pub struct DelimSpan {
      .               pub open: Span,
      .               pub close: Span,
      .           }
      .           
      .           impl DelimSpan {
      .               pub fn from_single(sp: Span) -> Self {
      .                   DelimSpan { open: sp, close: sp }
      .               }
      .           
    600 ( 0.00%)      pub fn from_pair(open: Span, close: Span) -> Self {
      .                   DelimSpan { open, close }
    300 ( 0.00%)      }
      .           
      .               pub fn dummy() -> Self {
      .                   Self::from_single(DUMMY_SP)
     18 ( 0.00%)      }
      .           
     16 ( 0.00%)      pub fn entire(self) -> Span {
      .                   self.open.with_hi(self.close.hi())
     12 ( 0.00%)      }
      .           }

    210 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/tokenstream.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs
--------------------------------------------------------------------------------
Ir               

-- line 38 ----------------------------------------
      .               /// debug assertions are enabled, a panic is guaranteed.
      .               ///
      .               /// # Panics
      .               ///
      .               /// Might panic if the index of the element overflows a `usize`.
      .               #[inline]
      .               #[rustc_inherit_overflow_checks]
      .               fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
183,538 ( 0.02%)          let a = self.iter.next()?;
 61,947 ( 0.01%)          let i = self.count;
527,653 ( 0.06%)          self.count += 1;
982,298 ( 0.10%)          Some((i, a))
      .               }
      .           
      .               #[inline]
      .               fn size_hint(&self) -> (usize, Option<usize>) {
    659 ( 0.00%)          self.iter.size_hint()
      .               }
      .           
      .               #[inline]
      .               #[rustc_inherit_overflow_checks]
      .               fn nth(&mut self, n: usize) -> Option<(usize, I::Item)> {
      .                   let a = self.iter.nth(n)?;
    126 ( 0.00%)          let i = self.count + n;
    189 ( 0.00%)          self.count = i + 1;
      .                   Some((i, a))
      .               }
      .           
      .               #[inline]
      .               fn count(self) -> usize {
      .                   self.iter.count()
      .               }
      .           
-- line 70 ----------------------------------------
-- line 76 ----------------------------------------
      .                   R: Try<Output = Acc>,
      .               {
      .                   #[inline]
      .                   fn enumerate<'a, T, Acc, R>(
      .                       count: &'a mut usize,
      .                       mut fold: impl FnMut(Acc, (usize, T)) -> R + 'a,
      .                   ) -> impl FnMut(Acc, T) -> R + 'a {
      .                       #[rustc_inherit_overflow_checks]
    250 ( 0.00%)              move |acc, item| {
  1,278 ( 0.00%)                  let acc = fold(acc, (*count, item));
  4,948 ( 0.00%)                  *count += 1;
      .                           acc
      .                       }
      .                   }
      .           
    459 ( 0.00%)          self.iter.try_fold(init, enumerate(&mut self.count, fold))
      .               }
      .           
      .               #[inline]
      .               fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
      .               where
      .                   Fold: FnMut(Acc, Self::Item) -> Acc,
      .               {
      .                   #[inline]
      .                   fn enumerate<T, Acc>(
      .                       mut count: usize,
      .                       mut fold: impl FnMut(Acc, (usize, T)) -> Acc,
      .                   ) -> impl FnMut(Acc, T) -> Acc {
      .                       #[rustc_inherit_overflow_checks]
  1,736 ( 0.00%)              move |acc, item| {
    142 ( 0.00%)                  let acc = fold(acc, (count, item));
    898 ( 0.00%)                  count += 1;
      .                           acc
      .                       }
      .                   }
      .           
  7,812 ( 0.00%)          self.iter.fold(init, enumerate(self.count, fold))
      .               }
      .           
      .               #[inline]
      .               #[rustc_inherit_overflow_checks]
      .               fn advance_by(&mut self, n: usize) -> Result<(), usize> {
      .                   match self.iter.advance_by(n) {
      .                       ret @ Ok(_) => {
      .                           self.count += n;
-- line 120 ----------------------------------------
-- line 131 ----------------------------------------
      .               #[doc(hidden)]
      .               unsafe fn __iterator_get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item
      .               where
      .                   Self: TrustedRandomAccessNoCoerce,
      .               {
      .                   // SAFETY: the caller must uphold the contract for
      .                   // `Iterator::__iterator_get_unchecked`.
      .                   let value = unsafe { try_get_unchecked(&mut self.iter, idx) };
     18 ( 0.00%)          (self.count + idx, value)
      .               }
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<I> DoubleEndedIterator for Enumerate<I>
      .           where
      .               I: ExactSizeIterator + DoubleEndedIterator,
      .           {
-- line 147 ----------------------------------------
-- line 172 ----------------------------------------
      .               {
      .                   // Can safely add and subtract the count, as `ExactSizeIterator` promises
      .                   // that the number of elements fits into a `usize`.
      .                   fn enumerate<T, Acc, R>(
      .                       mut count: usize,
      .                       mut fold: impl FnMut(Acc, (usize, T)) -> R,
      .                   ) -> impl FnMut(Acc, T) -> R {
      .                       move |acc, item| {
    728 ( 0.00%)                  count -= 1;
      .                           fold(acc, (count, item))
      .                       }
      .                   }
      .           
    208 ( 0.00%)          let count = self.count + self.iter.len();
      .                   self.iter.try_rfold(init, enumerate(count, fold))
      .               }
      .           
      .               #[inline]
      .               fn rfold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
      .               where
      .                   Fold: FnMut(Acc, Self::Item) -> Acc,
      .               {
-- line 193 ----------------------------------------

 93,222 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/enumerate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir               

-- line 59 ----------------------------------------
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy>;
      .           
      .               /// Not overridden, but used to actually visit types and traits.
      .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
300,423 ( 0.03%)          DefIdVisitorSkeleton {
      .                       def_id_visitor: self,
      .                       visited_opaque_tys: Default::default(),
      .                       dummy: Default::default(),
      .                   }
      .               }
      9 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   ty_fragment.visit_with(&mut self.skeleton())
     15 ( 0.00%)      }
      6 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
      .                   self.skeleton().visit_trait(trait_ref)
      6 ( 0.00%)      }
      .               fn visit_projection_ty(
      .                   &mut self,
      .                   projection: ty::ProjectionTy<'tcx>,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   self.skeleton().visit_projection_ty(projection)
      .               }
      .               fn visit_predicates(
      .                   &mut self,
      .                   predicates: ty::GenericPredicates<'tcx>,
      .               ) -> ControlFlow<Self::BreakTy> {
    223 ( 0.00%)          self.skeleton().visit_predicates(predicates)
      .               }
      .           }
      .           
      .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
      .               def_id_visitor: &'v mut V,
      .               visited_opaque_tys: FxHashSet<DefId>,
      .               dummy: PhantomData<TyCtxt<'tcx>>,
      .           }
      .           
      .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
      .           where
      .               V: DefIdVisitor<'tcx> + ?Sized,
      .           {
      .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
      1 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
    151 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
      1 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
      .               }
      .           
      .               fn visit_projection_ty(
      .                   &mut self,
      .                   projection: ty::ProjectionTy<'tcx>,
      .               ) -> ControlFlow<V::BreakTy> {
      .                   let (trait_ref, assoc_substs) =
      .                       projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
-- line 114 ----------------------------------------
-- line 116 ----------------------------------------
      .                   if self.def_id_visitor.shallow() {
      .                       ControlFlow::CONTINUE
      .                   } else {
      .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
      .                   }
      .               }
      .           
      .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      8 ( 0.00%)          match predicate.kind().skip_binder() {
      .                       ty::PredicateKind::Trait(ty::TraitPredicate {
      .                           trait_ref,
      .                           constness: _,
      .                           polarity: _,
      .                       }) => self.visit_trait(trait_ref),
      .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
      .                           term.visit_with(self)?;
      .                           self.visit_projection_ty(projection_ty)
-- line 132 ----------------------------------------
-- line 157 ----------------------------------------
      .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
      .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
      .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
      .                           ControlFlow::CONTINUE
      .                       }
      .                   })
      .               }
      .           
  1,561 ( 0.00%)      fn visit_predicates(
      .                   &mut self,
      .                   predicates: ty::GenericPredicates<'tcx>,
      .               ) -> ControlFlow<V::BreakTy> {
      .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
      .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
  1,784 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
      .           where
      .               V: DefIdVisitor<'tcx> + ?Sized,
      .           {
      .               type BreakTy = V::BreakTy;
      .           
284,565 ( 0.03%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
 31,565 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
      .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
157,809 ( 0.02%)          match *ty.kind() {
     15 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
      .                       | ty::Foreign(def_id)
      .                       | ty::FnDef(def_id, ..)
      .                       | ty::Closure(def_id, ..)
      .                       | ty::Generator(def_id, ..) => {
  2,294 ( 0.00%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
      .                           if self.def_id_visitor.shallow() {
      .                               return ControlFlow::CONTINUE;
      .                           }
      .                           // Default type visitor doesn't visit signatures of fn types.
      .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
      .                           // `my_func` is public, so we need to visit signatures.
    636 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
      .                               tcx.fn_sig(def_id).visit_with(self)?;
      .                           }
      .                           // Inherent static methods don't have self type in substs.
      .                           // Something like `fn() {my_method}` type of the method
      .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
      .                           // so we need to visit the self type additionally.
  1,396 ( 0.00%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
    612 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
      4 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
      .                               }
      .                           }
      .                       }
      .                       ty::Projection(proj) => {
      .                           if self.def_id_visitor.skip_assoc_tys() {
      .                               // Visitors searching for minimal visibility/reachability want to
      .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
      .                               // as visible/reachable even if both `Type` and `Trait` are private.
-- line 213 ----------------------------------------
-- line 270 ----------------------------------------
      .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
      .                           bug!("unexpected type: {:?}", ty)
      .                       }
      .                   }
      .           
      .                   if self.def_id_visitor.shallow() {
      .                       ControlFlow::CONTINUE
      .                   } else {
 93,817 ( 0.01%)              ty.super_visit_with(self)
      .                   }
283,187 ( 0.03%)      }
      .           
      .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
    672 ( 0.00%)          self.visit_ty(c.ty)?;
    112 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
    784 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
      .                       self.visit_abstract_const_expr(tcx, ct)?;
      .                   }
      .                   ControlFlow::CONTINUE
      .               }
      .           }
      .           
      .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
      1 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
      .           ///
      .           /// This is done so that `private_in_public` warnings can be turned into hard errors
      .           /// in crates that have been updated to use pub(restricted).
      .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               has_pub_restricted: bool,
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    161 ( 0.00%)          self.tcx.hir()
      .               }
      .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
    310 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// Visitor used to determine impl visibility and reachability.
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
      .                   true
      .               }
      .               fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   _kind: &str,
      .                   _descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
     11 ( 0.00%)          self.min = VL::new_min(self, def_id);
      .                   ControlFlow::CONTINUE
      .               }
      .           }
      .           
      .           trait VisibilityLike: Sized {
      .               const MAX: Self;
      .               const SHALLOW: bool = false;
      .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
      .           
      .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
      .               // associated types for which we can't determine visibility precisely.
     21 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
     10 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
      3 ( 0.00%)          find.visit(tcx.type_of(def_id));
      9 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
      1 ( 0.00%)              find.visit_trait(trait_ref);
      .                   }
      2 ( 0.00%)          find.min
     24 ( 0.00%)      }
      .           }
      .           impl VisibilityLike for ty::Visibility {
      .               const MAX: Self = ty::Visibility::Public;
      7 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      3 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
     10 ( 0.00%)      }
      .           }
      .           impl VisibilityLike for Option<AccessLevel> {
      .               const MAX: Self = Some(AccessLevel::Public);
      .               // Type inference is very smart sometimes.
      .               // It can make an impl reachable even some components of its type or trait are unreachable.
      .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
      .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
      .               // and consider an impl reachable if its "shallow" type and trait are reachable.
      .               //
      .               // The assumption we make here is that type-inference won't let you use an impl without knowing
      .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
      .               // (which require reaching the `DefId`s in them).
      .               const SHALLOW: bool = true;
      6 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      .                   cmp::min(
      6 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
      4 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
      .                       } else {
      .                           Self::MAX
      .                       },
      4 ( 0.00%)              find.min,
      .                   )
      8 ( 0.00%)      }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////
      .           /// The embargo visitor, used to determine the exports of the AST.
      .           ////////////////////////////////////////////////////////////////////////////////
      .           
      .           struct EmbargoVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
      .           
      .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
      .               access_level: Option<AccessLevel>,
      .               item_def_id: LocalDefId,
      .               ev: &'a mut EmbargoVisitor<'tcx>,
      .           }
      .           
      .           impl<'tcx> EmbargoVisitor<'tcx> {
    760 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
      .                   self.access_levels.map.get(&def_id).copied()
    760 ( 0.00%)      }
      .           
      .               fn update_with_hir_id(
      .                   &mut self,
      .                   hir_id: hir::HirId,
      .                   level: Option<AccessLevel>,
      .               ) -> Option<AccessLevel> {
      .                   let def_id = self.tcx.hir().local_def_id(hir_id);
      .                   self.update(def_id, level)
      .               }
      .           
      .               /// Updates node level and returns the updated level.
      .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
    650 ( 0.00%)          let old_level = self.get(def_id);
      .                   // Accessibility levels can only grow.
      .                   if level > old_level {
      .                       self.access_levels.map.insert(def_id, level.unwrap());
     29 ( 0.00%)              self.changed = true;
      .                       level
      .                   } else {
      .                       old_level
      .                   }
      .               }
      .           
      .               fn reach(
      .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
      .                   def_id: LocalDefId,
      .                   access_level: Option<AccessLevel>,
      .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
      .                   ReachEverythingInTheInterfaceVisitor {
      .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
      .                       item_def_id: def_id,
      .                       ev: self,
      .                   }
    586 ( 0.00%)      }
      .           
      .               // We have to make sure that the items that macros might reference
      .               // are reachable, since they might be exported transitively.
      .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
      .                   // Non-opaque macros cannot make other items more accessible than they already are.
      .           
      .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
      .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    322 ( 0.00%)          self.tcx.hir()
      .               }
      .           
    612 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    136 ( 0.00%)          let item_level = match item.kind {
      .                       hir::ItemKind::Impl { .. } => {
      .                           let impl_level =
     12 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
      2 ( 0.00%)                  self.update(item.def_id, impl_level)
      .                       }
    264 ( 0.00%)              _ => self.get(item.def_id),
      .                   };
      .           
      .                   // Update levels of nested things.
    341 ( 0.00%)          match item.kind {
      .                       hir::ItemKind::Enum(ref def, _) => {
      .                           for variant in def.variants {
      .                               let variant_level = self.update_with_hir_id(variant.id, item_level);
      .                               if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
      .                                   self.update_with_hir_id(ctor_hir_id, item_level);
      .                               }
      .                               for field in variant.data.fields() {
      .                                   self.update_with_hir_id(field.hir_id, variant_level);
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::Impl(ref impl_) => {
      6 ( 0.00%)                  for impl_item_ref in impl_.items {
     66 ( 0.00%)                      if impl_.of_trait.is_some()
      .                                   || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
      .                               {
    112 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
      .                               }
      .                           }
      .                       }
      6 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
      .                           for trait_item_ref in trait_item_refs {
    140 ( 0.00%)                      self.update(trait_item_ref.id.def_id, item_level);
      .                           }
      .                       }
      .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
      .                           if let Some(ctor_hir_id) = def.ctor_hir_id() {
      .                               self.update_with_hir_id(ctor_hir_id, item_level);
      .                           }
      .                           for field in def.fields() {
      .                               if field.vis.node.is_pub() {
-- line 683 ----------------------------------------
-- line 704 ----------------------------------------
      .                       | hir::ItemKind::TyAlias(..)
      .                       | hir::ItemKind::Mod(..)
      .                       | hir::ItemKind::TraitAlias(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::ExternCrate(..) => {}
      .                   }
      .           
      .                   // Mark all items in interfaces of reachable items as reachable.
    340 ( 0.00%)          match item.kind {
      .                       // The interface is empty.
      .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
      .                       // All nested items are checked by `visit_item`.
      .                       hir::ItemKind::Mod(..) => {}
      .                       // Handled in the access level of in rustc_resolve
      .                       hir::ItemKind::Use(..) => {}
      .                       // The interface is empty.
      .                       hir::ItemKind::GlobalAsm(..) => {}
-- line 720 ----------------------------------------
-- line 732 ----------------------------------------
      .                               self.reach(item.def_id, exist_level).generics().predicates().ty();
      .                           }
      .                       }
      .                       // Visit everything.
      .                       hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..) => {
     58 ( 0.00%)                  if item_level.is_some() {
      .                               self.reach(item.def_id, item_level).generics().predicates().ty();
      .                           }
      .                       }
      4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
      2 ( 0.00%)                  if item_level.is_some() {
     16 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
      .           
      .                               for trait_item_ref in trait_item_refs {
    140 ( 0.00%)                          let mut reach = self.reach(trait_item_ref.id.def_id, item_level);
    280 ( 0.00%)                          reach.generics().predicates();
      .           
     70 ( 0.00%)                          if trait_item_ref.kind == AssocItemKind::Type
      .                                       && !trait_item_ref.defaultness.has_value()
      .                                   {
      .                                       // No type to visit.
      .                                   } else {
    140 ( 0.00%)                              reach.ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => {
      .                           if item_level.is_some() {
      .                               self.reach(item.def_id, item_level).generics().predicates();
      .                           }
      .                       }
      .                       // Visit everything except for private impl items.
      .                       hir::ItemKind::Impl(ref impl_) => {
      2 ( 0.00%)                  if item_level.is_some() {
     20 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
      .           
      2 ( 0.00%)                      for impl_item_ref in impl_.items {
    168 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
     68 ( 0.00%)                          if impl_item_level.is_some() {
    560 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
      .                                           .generics()
      .                                           .predicates()
      .                                           .ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .           
-- line 783 ----------------------------------------
-- line 822 ----------------------------------------
      .                                       self.reach(def_id, field_level).ty();
      .                                   }
      .                               }
      .                           }
      .                       }
      .                   }
      .           
      .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
    204 ( 0.00%)          intravisit::walk_item(self, item);
     68 ( 0.00%)          self.prev_level = orig_level;
    544 ( 0.00%)      }
      .           
      .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
      .                   // Blocks can have public items, for example impls, but they always
      .                   // start as completely private regardless of publicity of a function,
      .                   // constant, type, field, etc., in which this block resides.
      .                   let orig_level = mem::replace(&mut self.prev_level, None);
      .                   intravisit::walk_block(self, b);
      .                   self.prev_level = orig_level;
      .               }
      .           }
      .           
      .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
    910 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    520 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
     20 ( 0.00%)              match param.kind {
      .                           GenericParamDefKind::Lifetime => {}
      2 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      2 ( 0.00%)                      if has_default {
      .                                   self.visit(self.ev.tcx.type_of(param.def_id));
      .                               }
      .                           }
      .                           GenericParamDefKind::Const { has_default, .. } => {
      .                               self.visit(self.ev.tcx.type_of(param.def_id));
      .                               if has_default {
      .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
      .                               }
      .                           }
      .                       }
      .                   }
      .                   self
  1,170 ( 0.00%)      }
      .           
    650 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
    390 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
      .                   self
    780 ( 0.00%)      }
      .           
    640 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    384 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
      .                   self
    768 ( 0.00%)      }
      .           
      .               fn trait_ref(&mut self) -> &mut Self {
     12 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
      .                       self.visit_trait(trait_ref);
      .                   }
      .                   self
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
  1,288 ( 0.00%)          self.ev.tcx
      .               }
    670 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   _kind: &str,
      .                   _descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
    402 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    520 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
    130 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
      .                       {
      .                           self.ev.update(def_id, self.access_level);
      .                       }
      .                   }
      .                   ControlFlow::CONTINUE
    938 ( 0.00%)      }
      .           }
      .           
      .           //////////////////////////////////////////////////////////////////////////////////////
      .           /// Name privacy visitor, checks privacy and reports violations.
      .           /// Most of name privacy checks are performed during the main resolution phase,
      .           /// or later in type checking when field accesses and associated items are resolved.
      .           /// This pass performs remaining checks for fields in struct expressions and patterns.
      .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 964 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
     95 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
      .                   // Don't visit nested modules, since we run a separate visitor walk
      .                   // for each module in `privacy_access_levels`
      .               }
      .           
      .               fn visit_nested_body(&mut self, body: hir::BodyId) {
      .                   let old_maybe_typeck_results =
    321 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    384 ( 0.00%)          let body = self.tcx.hir().body(body);
      .                   self.visit_body(body);
     58 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
      .               }
      .           
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
     34 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
    100 ( 0.00%)          intravisit::walk_item(self, item);
     34 ( 0.00%)          self.current_item = orig_current_item;
      .               }
      .           
265,815 ( 0.03%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
 59,070 ( 0.01%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
      .                       let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
      .                       let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
      .                       let variant = adt.variant_of_res(res);
      .                       if let Some(base) = *base {
      .                           // If the expression uses FRU we need to make sure all the unmentioned fields
      .                           // are checked for privacy (RFC 736). Rather than computing the set of
      .                           // unmentioned fields, just check them all.
      .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
-- line 1003 ----------------------------------------
-- line 1014 ----------------------------------------
      .                           for field in fields {
      .                               let use_ctxt = field.ident.span;
      .                               let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      .                               self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
      .                           }
      .                       }
      .                   }
      .           
295,350 ( 0.03%)          intravisit::walk_expr(self, expr);
      .               }
      .           
    400 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
    100 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
      .                       let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
      .                       let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
      .                       let variant = adt.variant_of_res(res);
      .                       for field in fields {
      .                           let use_ctxt = field.ident.span;
      .                           let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      .                           self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
      .                       }
      .                   }
      .           
    450 ( 0.00%)          intravisit::walk_pat(self, pat);
      .               }
      .           }
      .           
      .           ////////////////////////////////////////////////////////////////////////////////////////////
      .           /// Type privacy visitor, checks types for privacy and reports violations.
      .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
      .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
      .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
      .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
      .               }
      .           
      .               fn item_is_accessible(&self, did: DefId) -> bool {
      .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
      .               }
      .           
      .               // Take node-id of an expression or pattern and check its type for privacy.
207,109 ( 0.02%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
 29,587 ( 0.00%)          self.span = span;
 29,587 ( 0.00%)          let typeck_results = self.typeck_results();
      .                   let result: ControlFlow<()> = try {
118,348 ( 0.01%)              self.visit(typeck_results.node_type(id))?;
236,696 ( 0.02%)              self.visit(typeck_results.node_substs(id))?;
266,283 ( 0.03%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
      .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
      .                       }
      .                   };
      .                   result.is_break()
236,696 ( 0.02%)      }
      .           
      .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
    134 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
      .                   if is_error {
      .                       self.tcx
      .                           .sess
      .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
      .                           .span_label(self.span, &format!("private {}", kind))
      .                           .emit();
      .                   }
      .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
     95 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
      .                   // Don't visit nested modules, since we run a separate visitor walk
      .                   // for each module in `privacy_access_levels`
      .               }
      .           
    640 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
      .                   let old_maybe_typeck_results =
    192 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
    384 ( 0.00%)          let body = self.tcx.hir().body(body);
      .                   self.visit_body(body);
     64 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    512 ( 0.00%)      }
      .           
      .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
      .                   match generic_arg {
      .                       hir::GenericArg::Type(t) => self.visit_ty(t),
      .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
      .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
      .                   }
      .               }
      .           
  1,512 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
    432 ( 0.00%)          self.span = hir_ty.span;
    648 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
      .                       // Types in bodies.
      .                       if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
      .                           return;
      .                       }
      .                   } else {
      .                       // Types in signatures.
      .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
      .                       // into a semantic type only once and the result should be cached somehow.
    648 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
      .                           return;
      .                       }
      .                   }
      .           
    648 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
  1,296 ( 0.00%)      }
      .           
      .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
      .                   self.span = inf.span;
      .                   if let Some(typeck_results) = self.maybe_typeck_results {
      .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
      .                           if self.visit(ty).is_break() {
      .                               return;
      .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
      .                           // We don't do anything for const infers here.
      .                       }
      .                   } else {
      .                       bug!("visit_infer without typeck_results");
      .                   }
      .                   intravisit::walk_inf(self, inf);
      .               }
      .           
     24 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
      9 ( 0.00%)          self.span = trait_ref.path.span;
      3 ( 0.00%)          if self.maybe_typeck_results.is_none() {
      .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
      .                       // The traits' privacy in bodies is already checked as a part of trait object types.
      3 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
      3 ( 0.00%)                  self.tcx,
      .                           trait_ref,
      .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
      .                           // just required by `ty::TraitRef`.
      9 ( 0.00%)                  self.tcx.types.never,
      .                       );
      .           
     27 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
     21 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
      .                               return;
      .                           }
      .                       }
      .           
     18 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
      .                           let pred = poly_predicate.skip_binder();
      .                           let poly_pred_term = self.visit(pred.term);
      .                           if poly_pred_term.is_break()
      .                               || self.visit_projection_ty(pred.projection_ty).is_break()
      .                           {
      .                               return;
      .                           }
      .                       }
      .                   }
      .           
      .                   intravisit::walk_trait_ref(self, trait_ref);
     24 ( 0.00%)      }
      .           
      .               // Check types of expressions
265,815 ( 0.03%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
265,815 ( 0.03%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
      .                       // Do not check nested expressions if the error already happened.
      .                       return;
      .                   }
206,617 ( 0.02%)          match expr.kind {
      2 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
      .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
     14 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
      .                               return;
      .                           }
      .                       }
     31 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
      .                           // Method calls have to be checked specially.
     62 ( 0.00%)                  self.span = segment.ident.span;
    186 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
     93 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
      .                                   return;
      .                               }
      .                           } else {
      .                               self.tcx
      .                                   .sess
      .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
      .                           }
      .                       }
      .                       _ => {}
      .                   }
      .           
 88,605 ( 0.01%)          intravisit::walk_expr(self, expr);
236,280 ( 0.02%)      }
      .           
      .               // Prohibit access to associated items with insufficient nominal visibility.
      .               //
      .               // Additionally, until better reachability analysis for macros 2.0 is available,
      .               // we prohibit access to private statics from other crates, this allows to give
      .               // more code internal visibility at link time. (Access to private functions
      .               // is already prohibited by type privacy for function types.)
  2,750 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
    550 ( 0.00%)          let def = match qpath {
    825 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
    336 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
      .                           _ => None,
      .                       },
      .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
      .                           .maybe_typeck_results
      .                           .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
      .                   };
      .                   let def = def.filter(|(kind, _)| {
    112 ( 0.00%)              matches!(
      .                           kind,
      .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
      .                       )
      .                   });
      .                   if let Some((kind, def_id)) = def {
      .                       let is_local_static =
    112 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
     56 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
      .                           let sess = self.tcx.sess;
      .                           let sm = sess.source_map();
      .                           let name = match qpath {
      .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
      .                                   sm.span_to_snippet(qpath.span()).ok()
      .                               }
      .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
      .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
      .                           };
      .                           sess.struct_span_err(span, &msg)
      .                               .span_label(span, &format!("private {}", kind))
      .                               .emit();
      .                           return;
      .                       }
      .                   }
      .           
  3,025 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
      .               }
      .           
      .               // Check types of patterns.
      .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
    337 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
      .                       // Do not check nested patterns if the error already happened.
      .                       return;
      .                   }
      .           
    187 ( 0.00%)          intravisit::walk_pat(self, pattern);
      .               }
      .           
      .               fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
      .                   if let Some(init) = local.init {
      .                       if self.check_expr_pat_type(init.hir_id, init.span) {
      .                           // Do not report duplicate errors for `let x = y`.
      .                           return;
      .                       }
      .                   }
      .           
      .                   intravisit::walk_local(self, local);
      .               }
      .           
      .               // Check types in item interfaces.
      .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
     34 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
      .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
    100 ( 0.00%)          intravisit::walk_item(self, item);
     34 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
     34 ( 0.00%)          self.current_item = orig_current_item;
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
 61,622 ( 0.01%)          self.tcx
      .               }
  1,005 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   if self.check_def_id(def_id, kind, descr) {
      .                       ControlFlow::BREAK
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
    603 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////////
      .           /// Obsolete visitors for checking for private items in public interfaces.
      .           /// These visitors are supposed to be kept in frozen state and produce an
      .           /// "old error node set". For backward compatibility the new visitor reports
      .           /// warnings instead of hard errors when the erroneous node is not in this old set.
      .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
      .               /// Whether we've recurred at all (i.e., if we're pointing at the
      .               /// first type on which `visit_ty` was called).
      .               at_outer_type: bool,
      .               /// Whether that first type is a public path.
      .               outer_type_is_public_path: bool,
      .           }
      .           
      .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
    101 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
    303 ( 0.00%)          let did = match path.res {
      .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
     12 ( 0.00%)              res => res.def_id(),
      .                   };
      .           
      .                   // A path can only be private if:
      .                   // it's in this crate...
      2 ( 0.00%)          if let Some(did) = did.as_local() {
      .                       // .. and it corresponds to a private type in the AST (this returns
      .                       // `None` for type parameters).
      .                       match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
      .                           Some(Node::Item(item)) => !item.vis.node.is_pub(),
      .                           Some(_) | None => false,
      .                       }
      .                   } else {
      .                       false
      .                   }
    202 ( 0.00%)      }
      .           
      .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
      .                   // FIXME: this would preferably be using `exported_items`, but all
      .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
      .                   self.access_levels.is_public(trait_id)
      .               }
      .           
      .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
      8 ( 0.00%)          if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
     10 ( 0.00%)              if self.path_is_private_type(trait_ref.trait_ref.path) {
      .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
      .                       }
      .                   }
      .               }
      .           
      .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
     62 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
      .               }
      .           }
      .           
      .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
      .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
      .                   match generic_arg {
      .                       hir::GenericArg::Type(t) => self.visit_ty(t),
      .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
      .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
      .                   }
      .               }
      .           
      .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
      5 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
      4 ( 0.00%)              if self.inner.path_is_private_type(path) {
      .                           self.contains_private = true;
      .                           // Found what we're looking for, so let's stop working.
      .                           return;
      .                       }
      .                   }
      .                   if let hir::TyKind::Path(_) = ty.kind {
      .                       if self.at_outer_type {
      1 ( 0.00%)                  self.outer_type_is_public_path = true;
      .                       }
      .                   }
      2 ( 0.00%)          self.at_outer_type = false;
      2 ( 0.00%)          intravisit::walk_ty(self, ty)
      4 ( 0.00%)      }
      .           
      .               // Don't want to recurse into `[, .. expr]`.
      .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
      .           }
      .           
      .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               /// We want to visit items in the context of their containing
      .               /// module and so forth, so supply a crate for doing a deep walk.
      .               fn nested_visit_map(&mut self) -> Self::Map {
    104 ( 0.00%)          self.tcx.hir()
      .               }
      .           
    306 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
    136 ( 0.00%)          match item.kind {
      .                       // Contents of a private mod can be re-exported, so we need
      .                       // to check internals.
      .                       hir::ItemKind::Mod(_) => {}
      .           
      .                       // An `extern {}` doesn't introduce a new privacy
      .                       // namespace (the contents have their own privacies).
      .                       hir::ItemKind::ForeignMod { .. } => {}
      .           
      2 ( 0.00%)              hir::ItemKind::Trait(.., bounds, _) => {
      5 ( 0.00%)                  if !self.trait_is_public(item.def_id) {
      .                               return;
      .                           }
      .           
      .                           for bound in bounds.iter() {
      .                               self.check_generic_bound(bound)
      .                           }
      .                       }
      .           
-- line 1447 ----------------------------------------
-- line 1454 ----------------------------------------
      .                           // `impl [... for] Private` is never visible.
      .                           let self_contains_private;
      .                           // `impl [... for] Public<...>`, but not `impl [... for]
      .                           // Vec<Public>` or `(Public,)`, etc.
      .                           let self_is_public_path;
      .           
      .                           // Check the properties of the `Self` type:
      .                           {
      4 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
      .                                   inner: self,
      .                                   contains_private: false,
      .                                   at_outer_type: true,
      .                                   outer_type_is_public_path: false,
      .                               };
      1 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
      .                               self_contains_private = visitor.contains_private;
      .                               self_is_public_path = visitor.outer_type_is_public_path;
      .                           }
      .           
      .                           // Miscellaneous info about the impl:
      .           
      .                           // `true` iff this is `impl Private for ...`.
      .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
      .                               true, // no trait counts as public trait
      .                               |tr| {
      3 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
      3 ( 0.00%)                              self.trait_is_public(def_id)
      .                                   } else {
      .                                       true // external traits must be public
      .                                   }
      .                               },
      .                           );
      .           
      .                           // `true` iff this is a trait impl or at least one method is public.
      .                           //
-- line 1488 ----------------------------------------
-- line 1498 ----------------------------------------
      .                                   match impl_item.kind {
      .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
      .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
      .                                       }
      .                                       hir::ImplItemKind::TyAlias(_) => false,
      .                                   }
      .                               });
      .           
      2 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
      .                               intravisit::walk_generics(self, &impl_.generics);
      .           
      2 ( 0.00%)                      match impl_.of_trait {
      .                                   None => {
      .                                       for impl_item_ref in impl_.items {
      .                                           // This is where we choose whether to walk down
      .                                           // further into the impl to check its items. We
      .                                           // should only walk into public items so that we
      .                                           // don't erroneously report errors for private
      .                                           // types in private items.
      .                                           let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
-- line 1517 ----------------------------------------
-- line 1538 ----------------------------------------
      .                                       //
      .                                       // Those in 1. can only occur if the trait is in
      .                                       // this crate and will've been warned about on the
      .                                       // trait definition (there's no need to warn twice
      .                                       // so we don't check the methods).
      .                                       //
      .                                       // Those in 2. are warned via walk_generics and this
      .                                       // call here.
      3 ( 0.00%)                              intravisit::walk_path(self, tr.path);
      .           
      .                                       // Those in 3. are warned with this call.
      1 ( 0.00%)                              for impl_item_ref in impl_.items {
    140 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
     63 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
      .                                               self.visit_ty(ty);
      .                                           }
      .                                       }
      .                                   }
      .                               }
      .                           } else if impl_.of_trait.is_none() && self_is_public_path {
      .                               // `impl Public<Private> { ... }`. Any public static
      .                               // methods will be visible as `Public::foo`.
-- line 1559 ----------------------------------------
-- line 1584 ----------------------------------------
      .                           return;
      .                       }
      .           
      .                       // `type ... = ...;` can contain private types, because
      .                       // we're introducing a new name.
      .                       hir::ItemKind::TyAlias(..) => return,
      .           
      .                       // Not at all public, so we don't care.
    189 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
      .                           return;
      .                       }
      .           
      .                       _ => {}
      .                   }
      .           
      .                   // We've carefully constructed it so that if we're here, then
      .                   // any `visit_ty`'s will be called on things that are in
      .                   // public signatures, i.e., things that we're interested in for
      .                   // this visitor.
    300 ( 0.00%)          intravisit::walk_item(self, item);
     32 ( 0.00%)      }
      .           
    288 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
      .                   for param in generics.params {
      .                       for bound in param.bounds {
      .                           self.check_generic_bound(bound);
      .                       }
      .                   }
     36 ( 0.00%)          for predicate in generics.where_clause.predicates {
      .                       match predicate {
      .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
      .                               for bound in bound_pred.bounds.iter() {
      .                                   self.check_generic_bound(bound)
      .                               }
      .                           }
      .                           hir::WherePredicate::RegionPredicate(_) => {}
      .                           hir::WherePredicate::EqPredicate(eq_pred) => {
      .                               self.visit_ty(eq_pred.rhs_ty);
      .                           }
      .                       }
      .                   }
    288 ( 0.00%)      }
      .           
      .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
      .                   if self.access_levels.is_reachable(item.def_id) {
      .                       intravisit::walk_foreign_item(self, item)
      .                   }
      .               }
      .           
      .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
    406 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
    280 ( 0.00%)              if self.path_is_private_type(path) {
      .                           self.old_error_set.insert(t.hir_id);
      .                       }
      .                   }
    574 ( 0.00%)          intravisit::walk_ty(self, t)
      .               }
      .           
      .               fn visit_variant(
      .                   &mut self,
      .                   v: &'tcx hir::Variant<'tcx>,
      .                   g: &'tcx hir::Generics<'tcx>,
      .                   item_id: hir::HirId,
      .               ) {
-- line 1647 ----------------------------------------
-- line 1679 ----------------------------------------
      .               /// The visitor checks that each component type is at least this visible.
      .               required_visibility: ty::Visibility,
      .               has_pub_restricted: bool,
      .               has_old_errors: bool,
      .               in_assoc_ty: bool,
      .           }
      .           
      .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
    651 ( 0.00%)      fn generics(&mut self) -> &mut Self {
    279 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      8 ( 0.00%)              match param.kind {
      .                           GenericParamDefKind::Lifetime => {}
      1 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
      1 ( 0.00%)                      if has_default {
      .                                   self.visit(self.tcx.type_of(param.def_id));
      .                               }
      .                           }
      .                           // FIXME(generic_const_exprs): May want to look inside const here
      .                           GenericParamDefKind::Const { .. } => {
      .                               self.visit(self.tcx.type_of(param.def_id));
      .                           }
      .                       }
      .                   }
      .                   self
    744 ( 0.00%)      }
      .           
    465 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
      .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
      .                   // because we don't want to report privacy errors due to where
      .                   // clauses that the compiler inferred. We only want to
      .                   // consider the ones that the user wrote. This is important
      .                   // for the inferred outlives rules; see
      .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
    186 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
      .                   self
    558 ( 0.00%)      }
      .           
      .               fn bounds(&mut self) -> &mut Self {
      .                   self.visit_predicates(ty::GenericPredicates {
      .                       parent: None,
      .                       predicates: self.tcx.explicit_item_bounds(self.item_def_id),
      .                   });
      .                   self
      .               }
      .           
    460 ( 0.00%)      fn ty(&mut self) -> &mut Self {
    184 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
      .                   self
    460 ( 0.00%)      }
      .           
      .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
    329 ( 0.00%)          if self.leaks_private_dep(def_id) {
      .                       self.tcx.struct_span_lint_hir(
      .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
      .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
      .                           self.tcx.def_span(self.item_def_id.to_def_id()),
      .                           |lint| {
      .                               lint.build(&format!(
      .                                   "{} `{}` from private dependency '{}' in public \
      .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
      .                                   descr,
      .                                   self.tcx.crate_name(def_id.krate)
      .                               ))
      .                               .emit()
      .                           },
      .                       );
      .                   }
      .           
    194 ( 0.00%)          let hir_id = match def_id.as_local() {
     64 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
      .                       None => return false,
      .                   };
      .           
      .                   let vis = self.tcx.visibility(def_id);
    127 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
      .                       let vis_descr = match vis {
      .                           ty::Visibility::Public => "public",
      .                           ty::Visibility::Invisible => "private",
      .                           ty::Visibility::Restricted(vis_def_id) => {
      .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
      .                                   "private"
      .                               } else if vis_def_id.is_top_level_module() {
      .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
      .                   false
      .               }
      .           
      .               /// An item is 'leaked' from a private dependency if all
      .               /// of the following are true:
      .               /// 1. It's contained within a public type
      .               /// 2. It comes from a private crate
      .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
    198 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
      .           
      .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
      .                   ret
      .               }
      .           }
      .           
      .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
    344 ( 0.00%)          self.tcx
      .               }
  1,056 ( 0.00%)      fn visit_def_id(
      .                   &mut self,
      .                   def_id: DefId,
      .                   kind: &str,
      .                   descr: &dyn fmt::Display,
      .               ) -> ControlFlow<Self::BreakTy> {
      .                   if self.check_def_id(def_id, kind, descr) {
      .                       ControlFlow::BREAK
      .                   } else {
      .                       ControlFlow::CONTINUE
      .                   }
    594 ( 0.00%)      }
      .           }
      .           
      .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               tcx: TyCtxt<'tcx>,
      .               has_pub_restricted: bool,
      .               old_error_set_ancestry: LocalDefIdSet,
      .           }
      .           
      .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               fn check(
      .                   &self,
      .                   def_id: LocalDefId,
      .                   required_visibility: ty::Visibility,
      .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
    713 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
     63 ( 0.00%)              tcx: self.tcx,
      .                       item_def_id: def_id,
      .                       required_visibility,
     93 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
      .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
      .                       in_assoc_ty: false,
      .                   }
      .               }
      .           
    819 ( 0.00%)      fn check_assoc_item(
      .                   &self,
      .                   def_id: LocalDefId,
      .                   assoc_item_kind: AssocItemKind,
      .                   defaultness: hir::Defaultness,
      .                   vis: ty::Visibility,
      .               ) {
      .                   let mut check = self.check(def_id, vis);
      .           
    126 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
      .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
      .                       AssocItemKind::Type => (defaultness.has_value(), true),
      .                   };
    126 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
    252 ( 0.00%)          check.generics().predicates();
      .                   if check_ty {
     63 ( 0.00%)              check.ty();
      .                   }
    504 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
      .               type NestedFilter = nested_filter::OnlyBodies;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
     35 ( 0.00%)          self.tcx.hir()
      .               }
      .           
    306 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
     34 ( 0.00%)          let tcx = self.tcx;
     34 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
      .           
    170 ( 0.00%)          match item.kind {
      .                       // Crates are always public.
      .                       hir::ItemKind::ExternCrate(..) => {}
      .                       // All nested items are checked by `visit_item`.
      .                       hir::ItemKind::Mod(..) => {}
      .                       // Checked in resolve.
      .                       hir::ItemKind::Use(..) => {}
      .                       // No subitems.
      .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
      .                       // Subitems of these items have inherited publicity.
      .                       hir::ItemKind::Const(..)
      .                       | hir::ItemKind::Static(..)
      .                       | hir::ItemKind::Fn(..)
      .                       | hir::ItemKind::TyAlias(..) => {
    174 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
      .                       }
      .                       hir::ItemKind::OpaqueTy(..) => {
      .                           // `ty()` for opaque types is the underlying type,
      .                           // it's not a part of interface, so we skip it.
      .                           self.check(item.def_id, item_visibility).generics().bounds();
      .                       }
      4 ( 0.00%)              hir::ItemKind::Trait(.., trait_item_refs) => {
      4 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
      .           
      .                           for trait_item_ref in trait_item_refs {
    210 ( 0.00%)                      self.check_assoc_item(
     35 ( 0.00%)                          trait_item_ref.id.def_id,
      .                                   trait_item_ref.kind,
      .                                   trait_item_ref.defaultness,
      .                                   item_visibility,
      .                               );
      .           
     75 ( 0.00%)                      if let AssocItemKind::Type = trait_item_ref.kind {
      .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
      .                               }
      .                           }
      .                       }
      .                       hir::ItemKind::TraitAlias(..) => {
      .                           self.check(item.def_id, item_visibility).generics().predicates();
      .                       }
      .                       hir::ItemKind::Enum(ref def, _) => {
-- line 1919 ----------------------------------------
-- line 1942 ----------------------------------------
      .                               self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
      .                           }
      .                       }
      .                       // An inherent impl is public when its type is public
      .                       // Subitems of inherent impls have their own publicity.
      .                       // A trait impl is public when both its type and its trait are public
      .                       // Subitems of trait impls have inherited publicity.
      .                       hir::ItemKind::Impl(ref impl_) => {
      4 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
      .                           // check that private components do not appear in the generics or predicates of inherent impls
      .                           // this check is intentionally NOT performed for impls of traits, per #90586
      2 ( 0.00%)                  if impl_.of_trait.is_none() {
      .                               self.check(item.def_id, impl_vis).generics().predicates();
      .                           }
      1 ( 0.00%)                  for impl_item_ref in impl_.items {
      2 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
      .                                   min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
      .                               } else {
      .                                   impl_vis
      .                               };
    168 ( 0.00%)                      self.check_assoc_item(
     28 ( 0.00%)                          impl_item_ref.id.def_id,
      .                                   impl_item_ref.kind,
      .                                   impl_item_ref.defaultness,
      .                                   impl_item_vis,
      .                               );
      .                           }
      .                       }
      .                   }
    272 ( 0.00%)      }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      8 ( 0.00%)      *providers = Providers {
      .                   visibility,
      .                   privacy_access_levels,
      .                   check_private_in_public,
      .                   check_mod_privacy,
      .                   ..*providers
      .               };
      1 ( 0.00%)  }
      .           
    882 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
     98 ( 0.00%)      let def_id = def_id.expect_local();
      .               match tcx.resolutions(()).visibilities.get(&def_id) {
    140 ( 0.00%)          Some(vis) => *vis,
      .                   None => {
      .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
    280 ( 0.00%)              match tcx.hir().get(hir_id) {
      .                           // Unique types created for closures participate in type privacy checking.
      .                           // They have visibilities inherited from the module they are defined in.
      .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
      .                               ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
      .                           }
      .                           // - AST lowering may clone `use` items and the clones don't
      .                           //   get their entries in the resolver's visibility table.
      .                           // - AST lowering also creates opaque type items with inherited visibilies.
-- line 1998 ----------------------------------------
-- line 2001 ----------------------------------------
      .                           Node::Item(hir::Item {
      .                               vis,
      .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
      .                               ..
      .                           }) => ty::Visibility::from_hir(vis, hir_id, tcx),
      .                           // Visibilities of trait impl items are inherited from their traits
      .                           // and are not filled in resolve.
      .                           Node::ImplItem(impl_item) => {
    364 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
      .                                   Node::Item(hir::Item {
      .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
      .                                       ..
     28 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
      .                                       || {
      .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
      .                                           ty::Visibility::Public
      .                                       },
      .                                       |def_id| tcx.visibility(def_id),
      .                                   ),
      .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
      .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
      .                           _ => span_bug!(
      .                               tcx.def_span(def_id),
      .                               "visibility table unexpectedly missing a def-id: {:?}",
      .                               def_id,
      .                           ),
      .                       }
      .                   }
      .               }
    784 ( 0.00%)  }
      .           
     16 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
      .               // Check privacy of names not checked in previous compilation stages.
      .               let mut visitor =
      8 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
     18 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
      .           
      .               intravisit::walk_mod(&mut visitor, module, hir_id);
      .           
      .               // Check privacy of explicitly written types and traits as well as
      .               // inferred types of expressions and patterns.
      .               let mut visitor =
     12 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
      .               intravisit::walk_mod(&mut visitor, module, hir_id);
     16 ( 0.00%)  }
      .           
      7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
      .               // Build up a set of all exported items in the AST. This is a set of all
      .               // items which are reachable from external crates based on visibility.
      9 ( 0.00%)      let mut visitor = EmbargoVisitor {
      .                   tcx,
      .                   access_levels: tcx.resolutions(()).access_levels.clone(),
      .                   macro_reachable: Default::default(),
      .                   prev_level: Some(AccessLevel::Public),
      .                   changed: false,
      .               };
      .           
      .               loop {
      .                   tcx.hir().walk_toplevel_module(&mut visitor);
      4 ( 0.00%)          if visitor.changed {
      3 ( 0.00%)              visitor.changed = false;
      .                   } else {
      .                       break;
      .                   }
      .               }
      .           
      1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
      9 ( 0.00%)  }
      .           
      8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
      .               let access_levels = tcx.privacy_access_levels(());
      .           
      9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
      .                   tcx,
      .                   access_levels,
      .                   in_variant: false,
      .                   old_error_set: Default::default(),
      .               };
      .               tcx.hir().walk_toplevel_module(&mut visitor);
      .           
      .               let has_pub_restricted = {
      5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
      .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
      1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
      .               };
      .           
      .               let mut old_error_set_ancestry = HirIdSet::default();
      9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
      .                   loop {
      .                       if !old_error_set_ancestry.insert(id) {
      .                           break;
      .                       }
      .                       let parent = tcx.hir().get_parent_node(id);
      .                       if parent == id {
      .                           break;
      .                       }
      .                       id = parent;
      .                   }
      .               }
      .           
      .               // Check for private types and traits in public interfaces.
      8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
      .                   tcx,
      .                   has_pub_restricted,
      .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
      .                   // so we can filter away all non-definition IDs at this point.
      .                   old_error_set_ancestry: old_error_set_ancestry
      .                       .into_iter()
      .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
      .                       .collect(),
      .               };
      6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
      8 ( 0.00%)  }

156,308 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs
--------------------------------------------------------------------------------
Ir               

-- line 143 ----------------------------------------
      .           
      .               /// local to drop
      .               local: Local,
      .           
      .               /// Whether this is a value Drop or a StorageDead.
      .               kind: DropKind,
      .           }
      .           
    176 ( 0.00%)  #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
      .           pub(crate) enum DropKind {
      .               Value,
      .               Storage,
      .           }
      .           
      .           #[derive(Debug)]
      .           struct BreakableScope<'tcx> {
      .               /// Region scope of the loop
-- line 159 ----------------------------------------
-- line 218 ----------------------------------------
      .               ///  * clang doesn't emit llvm.lifetime.end for C++ unwinding
      .               ///  * LLVM's memory dependency analysis can't handle it atm
      .               ///  * polluting the cleanup MIR with StorageDead creates
      .               ///    landing pads even though there's no actual destructors
      .               ///  * freeing up stack space has no effect during unwinding
      .               /// Note that for generators we do emit StorageDeads, for the
      .               /// use of optimizations in the MIR generator transform.
      .               fn needs_cleanup(&self) -> bool {
    218 ( 0.00%)          self.drops.iter().any(|drop| match drop.kind {
      .                       DropKind::Value => true,
      .                       DropKind::Storage => false,
      .                   })
      .               }
      .           
      .               fn invalidate_cache(&mut self) {
      .                   self.cached_unwind_block = None;
      .                   self.cached_generator_drop_block = None;
-- line 234 ----------------------------------------
-- line 243 ----------------------------------------
      .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock;
      .           
      .               /// Links a block outside the drop tree, `from`, to the block `to` inside
      .               /// the drop tree.
      .               fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock);
      .           }
      .           
      .           impl DropTree {
     72 ( 0.00%)      fn new() -> Self {
      .                   // The root node of the tree doesn't represent a drop, but instead
      .                   // represents the block in the tree that should be jumped to once all
      .                   // of the required drops have been performed.
      .                   let fake_source_info = SourceInfo::outermost(DUMMY_SP);
      .                   let fake_data =
      .                       DropData { source_info: fake_source_info, local: Local::MAX, kind: DropKind::Storage };
      .                   let drop_idx = DropIdx::MAX;
      .                   let drops = IndexVec::from_elem_n((fake_data, drop_idx), 1);
    144 ( 0.00%)          Self { drops, entry_points: Vec::new(), previous_drops: FxHashMap::default() }
    108 ( 0.00%)      }
      .           
      .               fn add_drop(&mut self, drop: DropData, next: DropIdx) -> DropIdx {
      .                   let drops = &mut self.drops;
      .                   *self
      .                       .previous_drops
      .                       .entry((next, drop.local, drop.kind))
      .                       .or_insert_with(|| drops.push((drop, next)))
      .               }
-- line 269 ----------------------------------------
-- line 272 ----------------------------------------
      .                   debug_assert!(to < self.drops.next_index());
      .                   self.entry_points.push((to, from));
      .               }
      .           
      .               /// Builds the MIR for a given drop tree.
      .               ///
      .               /// `blocks` should have the same length as `self.drops`, and may have its
      .               /// first value set to some already existing block.
    800 ( 0.00%)      fn build_mir<'tcx, T: DropTreeBuilder<'tcx>>(
      .                   &mut self,
      .                   cfg: &mut CFG<'tcx>,
      .                   blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,
      .               ) {
      .                   debug!("DropTree::build_mir(drops = {:#?})", self);
    400 ( 0.00%)          assert_eq!(blocks.len(), self.drops.len());
      .           
      .                   self.assign_blocks::<T>(cfg, blocks);
  1,100 ( 0.00%)          self.link_blocks(cfg, blocks)
      .               }
      .           
      .               /// Assign blocks for all of the drops in the drop tree that need them.
      .               fn assign_blocks<'tcx, T: DropTreeBuilder<'tcx>>(
      .                   &mut self,
      .                   cfg: &mut CFG<'tcx>,
      .                   blocks: &mut IndexVec<DropIdx, Option<BasicBlock>>,
      .               ) {
-- line 297 ----------------------------------------
-- line 307 ----------------------------------------
      .                       Shares(DropIdx),
      .                       // This drop has more than one way of being reached, or it is
      .                       // branched to from outside the tree, or its predecessor is a
      .                       // `Value` drop.
      .                       Own,
      .                   }
      .           
      .                   let mut needs_block = IndexVec::from_elem(Block::None, &self.drops);
    100 ( 0.00%)          if blocks[ROOT_NODE].is_some() {
      .                       // In some cases (such as drops for `continue`) the root node
      .                       // already has a block. In this case, make sure that we don't
      .                       // override it.
      .                       needs_block[ROOT_NODE] = Block::Own;
      .                   }
      .           
      .                   // Sort so that we only need to check the last value.
      .                   let entry_points = &mut self.entry_points;
      .                   entry_points.sort();
      .           
      .                   for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {
     36 ( 0.00%)              if entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {
      .                           let block = *blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));
     72 ( 0.00%)                  needs_block[drop_idx] = Block::Own;
     95 ( 0.00%)                  while entry_points.last().map_or(false, |entry_point| entry_point.0 == drop_idx) {
      .                               let entry_block = entry_points.pop().unwrap().1;
      .                               T::add_entry(cfg, entry_block, block);
      .                           }
      .                       }
    772 ( 0.00%)              match needs_block[drop_idx] {
      .                           Block::None => continue,
      .                           Block::Own => {
      .                               blocks[drop_idx].get_or_insert_with(|| T::make_block(cfg));
      .                           }
      .                           Block::Shares(pred) => {
      .                               blocks[drop_idx] = blocks[pred];
      .                           }
      .                       }
     72 ( 0.00%)              if let DropKind::Value = drop_data.0.kind {
      .                           needs_block[drop_data.1] = Block::Own;
     36 ( 0.00%)              } else if drop_idx != ROOT_NODE {
      .                           match &mut needs_block[drop_data.1] {
      .                               pred @ Block::None => *pred = Block::Shares(drop_idx),
      .                               pred @ Block::Shares(_) => *pred = Block::Own,
      .                               Block::Own => (),
      .                           }
      .                       }
      .                   }
      .           
      .                   debug!("assign_blocks: blocks = {:#?}", blocks);
    100 ( 0.00%)          assert!(entry_points.is_empty());
      .               }
      .           
    700 ( 0.00%)      fn link_blocks<'tcx>(
      .                   &self,
      .                   cfg: &mut CFG<'tcx>,
      .                   blocks: &IndexVec<DropIdx, Option<BasicBlock>>,
      .               ) {
      .                   for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {
    400 ( 0.00%)              let Some(block) = blocks[drop_idx] else { continue };
     72 ( 0.00%)              match drop_data.0.kind {
      .                           DropKind::Value => {
      .                               let terminator = TerminatorKind::Drop {
      .                                   target: blocks[drop_data.1].unwrap(),
      .                                   // The caller will handle this if needed.
      .                                   unwind: None,
      .                                   place: drop_data.0.local.into(),
      .                               };
      .                               cfg.terminate(block, drop_data.0.source_info, terminator);
      .                           }
      .                           // Root nodes don't correspond to a drop.
     36 ( 0.00%)                  DropKind::Storage if drop_idx == ROOT_NODE => {}
      .                           DropKind::Storage => {
      .                               let stmt = Statement {
      .                                   source_info: drop_data.0.source_info,
      .                                   kind: StatementKind::StorageDead(drop_data.0.local),
      .                               };
      .                               cfg.push(block, stmt);
      .                               let target = blocks[drop_data.1].unwrap();
      .                               if target != block {
-- line 385 ----------------------------------------
-- line 389 ----------------------------------------
      .                                   // use `DUMMY_SP`.
      .                                   let source_info = SourceInfo { span: DUMMY_SP, ..drop_data.0.source_info };
      .                                   let terminator = TerminatorKind::Goto { target };
      .                                   cfg.terminate(block, source_info, terminator);
      .                               }
      .                           }
      .                       }
      .                   }
    800 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> Scopes<'tcx> {
    256 ( 0.00%)      pub(crate) fn new() -> Self {
  1,216 ( 0.00%)          Self {
      .                       scopes: Vec::new(),
      .                       breakable_scopes: Vec::new(),
      .                       if_then_scope: None,
      .                       unwind_drops: DropTree::new(),
      .                       generator_drops: DropTree::new(),
      .                   }
    320 ( 0.00%)      }
      .           
      .               fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo), vis_scope: SourceScope) {
      .                   debug!("push_scope({:?})", region_scope);
266,818 ( 0.03%)          self.scopes.push(Scope {
      .                       source_scope: vis_scope,
      .                       region_scope: region_scope.0,
      .                       drops: vec![],
      .                       moved_locals: vec![],
      .                       cached_unwind_block: None,
      .                       cached_generator_drop_block: None,
      .                   });
      .               }
      .           
 89,199 ( 0.01%)      fn pop_scope(&mut self, region_scope: (region::Scope, SourceInfo)) -> Scope {
      .                   let scope = self.scopes.pop().unwrap();
 89,199 ( 0.01%)          assert_eq!(scope.region_scope, region_scope.0);
      .                   scope
148,665 ( 0.02%)      }
      .           
      .               fn scope_index(&self, region_scope: region::Scope, span: Span) -> usize {
      .                   self.scopes
      .                       .iter()
      .                       .rposition(|scope| scope.region_scope == region_scope)
      .                       .unwrap_or_else(|| span_bug!(span, "region_scope {:?} does not enclose", region_scope))
      .               }
      .           
      .               /// Returns the topmost active scope, which is known to be alive until
      .               /// the next scope expression.
      .               fn topmost(&self) -> region::Scope {
  1,037 ( 0.00%)          self.scopes.last().expect("topmost_scope: no scopes present").region_scope
      .               }
      .           }
      .           
      .           impl<'a, 'tcx> Builder<'a, 'tcx> {
      .               // Adding and removing scopes
      .               // ==========================
      .               //  Start a breakable scope, which tracks where `continue`, `break` and
      .               //  `return` should branch to.
-- line 447 ----------------------------------------
-- line 451 ----------------------------------------
      .                   break_destination: Place<'tcx>,
      .                   span: Span,
      .                   f: F,
      .               ) -> BlockAnd<()>
      .               where
      .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> Option<BlockAnd<()>>,
      .               {
      .                   let region_scope = self.scopes.topmost();
    360 ( 0.00%)          let scope = BreakableScope {
      .                       region_scope,
      .                       break_destination,
     36 ( 0.00%)              break_drops: DropTree::new(),
      .                       continue_drops: loop_block.map(|_| DropTree::new()),
      .                   };
    684 ( 0.00%)          self.scopes.breakable_scopes.push(scope);
      .                   let normal_exit_block = f(self);
      .                   let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();
     36 ( 0.00%)          assert!(breakable_scope.region_scope == region_scope);
    540 ( 0.00%)          let break_block = self.build_exit_tree(breakable_scope.break_drops, None);
     72 ( 0.00%)          if let Some(drops) = breakable_scope.continue_drops {
      .                       self.build_exit_tree(drops, loop_block);
      .                   }
     72 ( 0.00%)          match (normal_exit_block, break_block) {
      .                       (Some(block), None) | (None, Some(block)) => block,
      .                       (None, None) => self.cfg.start_new_block().unit(),
      .                       (Some(normal_block), Some(exit_block)) => {
      .                           let target = self.cfg.start_new_block();
      .                           let source_info = self.source_info(span);
      .                           self.cfg.terminate(
      .                               unpack!(normal_block),
      .                               source_info,
-- line 481 ----------------------------------------
-- line 534 ----------------------------------------
      .                   &mut self,
      .                   opt_scope: Option<(region::Scope, SourceInfo)>,
      .                   f: F,
      .               ) -> BlockAnd<R>
      .               where
      .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,
      .               {
      .                   debug!("in_opt_scope(opt_scope={:?})", opt_scope);
     36 ( 0.00%)          if let Some(region_scope) = opt_scope {
      .                       self.push_scope(region_scope);
      .                   }
      .                   let mut block;
      .                   let rv = unpack!(block = f(self));
     36 ( 0.00%)          if let Some(region_scope) = opt_scope {
      .                       unpack!(block = self.pop_scope(region_scope, block));
      .                   }
      .                   debug!("in_scope: exiting opt_scope={:?} block={:?}", opt_scope, block);
      .                   block.and(rv)
      .               }
      .           
      .               /// Convenience wrapper that pushes a scope and then executes `f`
      .               /// to build its contents, popping the scope afterwards.
  2,220 ( 0.00%)      crate fn in_scope<F, R>(
      .                   &mut self,
      .                   region_scope: (region::Scope, SourceInfo),
      .                   lint_level: LintLevel,
      .                   f: F,
      .               ) -> BlockAnd<R>
      .               where
      .                   F: FnOnce(&mut Builder<'a, 'tcx>) -> BlockAnd<R>,
      .               {
      .                   debug!("in_scope(region_scope={:?})", region_scope);
    668 ( 0.00%)          let source_scope = self.source_scope;
      .                   let tcx = self.tcx;
 59,338 ( 0.01%)          if let LintLevel::Explicit(current_hir_id) = lint_level {
      .                       // Use `maybe_lint_level_root_bounded` with `root_lint_level` as a bound
      .                       // to avoid adding Hir dependences on our parents.
      .                       // We estimate the true lint roots here to avoid creating a lot of source scopes.
      .           
177,268 ( 0.02%)              let parent_root = tcx.maybe_lint_level_root_bounded(
 29,588 ( 0.00%)                  self.source_scopes[source_scope].local_data.as_ref().assert_crate_local().lint_root,
 59,052 ( 0.01%)                  self.hir_id,
      .                       );
177,388 ( 0.02%)              let current_root = tcx.maybe_lint_level_root_bounded(current_hir_id, self.hir_id);
      .           
 88,578 ( 0.01%)              if parent_root != current_root {
      .                           self.source_scope = self.new_source_scope(
      .                               region_scope.1.span,
      .                               LintLevel::Explicit(current_root),
      .                               None,
      .                           );
      .                       }
      .                   }
      .                   self.push_scope(region_scope);
      .                   let mut block;
148,484 ( 0.02%)          let rv = unpack!(block = f(self));
267,813 ( 0.03%)          unpack!(block = self.pop_scope(region_scope, block));
 29,893 ( 0.00%)          self.source_scope = source_scope;
      .                   debug!("in_scope: exiting region_scope={:?} block={:?}", region_scope, block);
    217 ( 0.00%)          block.and(rv)
  1,624 ( 0.00%)      }
      .           
      .               /// Push a scope onto the stack. You can then build code in this
      .               /// scope and call `pop_scope` afterwards. Note that these two
      .               /// calls must be paired; using `in_scope` as a convenience
      .               /// wrapper maybe preferable.
      .               crate fn push_scope(&mut self, region_scope: (region::Scope, SourceInfo)) {
    327 ( 0.00%)          self.scopes.push_scope(region_scope, self.source_scope);
      .               }
      .           
      .               /// Pops a scope, which should have region scope `region_scope`,
      .               /// adding any drops onto the end of `block` that are needed.
      .               /// This must match 1-to-1 with `push_scope`.
178,398 ( 0.02%)      crate fn pop_scope(
      .                   &mut self,
      .                   region_scope: (region::Scope, SourceInfo),
      .                   mut block: BasicBlock,
      .               ) -> BlockAnd<()> {
      .                   debug!("pop_scope({:?}, {:?})", region_scope, block);
      .           
      .                   block = self.leave_top_scope(block);
      .           
237,864 ( 0.02%)          self.scopes.pop_scope(region_scope);
      .           
      .                   block.unit()
237,864 ( 0.02%)      }
      .           
      .               /// Sets up the drops for breaking from `block` to `target`.
      .               crate fn break_scope(
      .                   &mut self,
      .                   mut block: BasicBlock,
      .                   value: Option<&Expr<'tcx>>,
      .                   target: BreakableTarget,
      .                   source_info: SourceInfo,
-- line 627 ----------------------------------------
-- line 735 ----------------------------------------
      .                   let temp_place = Place::from(self.local_decls.push(local_decl));
      .                   self.cfg.push_assign_unit(block, source_info, temp_place, self.tcx);
      .               }
      .           
      .               fn leave_top_scope(&mut self, block: BasicBlock) -> BasicBlock {
      .                   // If we are emitting a `drop` statement, we need to have the cached
      .                   // diverge cleanup pads ready in case that drop panics.
      .                   let needs_cleanup = self.scopes.scopes.last().map_or(false, |scope| scope.needs_cleanup());
 59,466 ( 0.01%)          let is_generator = self.generator_kind.is_some();
      .                   let unwind_to = if needs_cleanup { self.diverge_cleanup() } else { DropIdx::MAX };
      .           
      .                   let scope = self.scopes.scopes.last().expect("leave_top_scope called with no scopes");
178,398 ( 0.02%)          unpack!(build_scope_drops(
 29,733 ( 0.00%)              &mut self.cfg,
 29,733 ( 0.00%)              &mut self.scopes.unwind_drops,
      .                       scope,
      .                       block,
      .                       unwind_to,
 29,733 ( 0.00%)              is_generator && needs_cleanup,
 29,733 ( 0.00%)              self.arg_count,
      .                   ))
      .               }
      .           
      .               /// Creates a new source scope, nested in the current one.
    576 ( 0.00%)      crate fn new_source_scope(
      .                   &mut self,
      .                   span: Span,
      .                   lint_level: LintLevel,
      .                   safety: Option<Safety>,
      .               ) -> SourceScope {
     64 ( 0.00%)          let parent = self.source_scope;
      .                   debug!(
      .                       "new_source_scope({:?}, {:?}, {:?}) - parent({:?})={:?}",
      .                       span,
      .                       lint_level,
      .                       safety,
      .                       parent,
      .                       self.source_scopes.get(parent)
      .                   );
      .                   let scope_local_data = SourceScopeLocalData {
    128 ( 0.00%)              lint_root: if let LintLevel::Explicit(lint_root) = lint_level {
      .                           lint_root
      .                       } else {
      .                           self.source_scopes[parent].local_data.as_ref().assert_crate_local().lint_root
      .                       },
     64 ( 0.00%)              safety: safety.unwrap_or_else(|| {
      .                           self.source_scopes[parent].local_data.as_ref().assert_crate_local().safety
      .                       }),
      .                   };
      .                   self.source_scopes.push(SourceScopeData {
      .                       span,
      .                       parent_scope: Some(parent),
      .                       inlined: None,
      .                       inlined_parent_scope: None,
      .                       local_data: ClearCrossCrate::Set(scope_local_data),
      .                   })
    576 ( 0.00%)      }
      .           
      .               /// Given a span and the current source scope, make a SourceInfo.
      .               crate fn source_info(&self, span: Span) -> SourceInfo {
 60,016 ( 0.01%)          SourceInfo { span, scope: self.source_scope }
     92 ( 0.00%)      }
      .           
      .               // Finding scopes
      .               // ==============
      .               /// Returns the scope that we should use as the lifetime of an
      .               /// operand. Basically, an operand must live until it is consumed.
      .               /// This is similar to, but not quite the same as, the temporary
      .               /// scope (which can be larger or smaller).
      .               ///
-- line 804 ----------------------------------------
-- line 831 ----------------------------------------
      .                   self.schedule_drop(span, region_scope, local, DropKind::Storage);
      .                   self.schedule_drop(span, region_scope, local, DropKind::Value);
      .               }
      .           
      .               /// Indicates that `place` should be dropped on exit from `region_scope`.
      .               ///
      .               /// When called with `DropKind::Storage`, `place` shouldn't be the return
      .               /// place, or a function parameter.
  7,568 ( 0.00%)      crate fn schedule_drop(
      .                   &mut self,
      .                   span: Span,
      .                   region_scope: region::Scope,
      .                   local: Local,
      .                   drop_kind: DropKind,
      .               ) {
    946 ( 0.00%)          let needs_drop = match drop_kind {
      .                       DropKind::Value => {
  2,040 ( 0.00%)                  if !self.local_decls[local].ty.needs_drop(self.tcx, self.param_env) {
      .                               return;
      .                           }
      .                           true
      .                       }
      .                       DropKind::Storage => {
    436 ( 0.00%)                  if local.index() <= self.arg_count {
      .                               span_bug!(
      .                                   span,
      .                                   "`schedule_drop` called with local {:?} and arg_count {}",
      .                                   local,
      .                                   self.arg_count,
      .                               )
      .                           }
      .                           false
-- line 862 ----------------------------------------
-- line 906 ----------------------------------------
      .                   // cache of outer scope stays intact.
      .                   //
      .                   // Since we only cache drops for the unwind path and the generator drop
      .                   // path, we only need to invalidate the cache for drops that happen on
      .                   // the unwind or generator drop paths. This means that for
      .                   // non-generators we don't need to invalidate caches for `DropKind::Storage`.
      .                   let invalidate_caches = needs_drop || self.generator_kind.is_some();
      .                   for scope in self.scopes.scopes.iter_mut().rev() {
    436 ( 0.00%)              if invalidate_caches {
      .                           scope.invalidate_cache();
      .                       }
      .           
    218 ( 0.00%)              if scope.region_scope == region_scope {
  1,308 ( 0.00%)                  let region_scope_span = region_scope.span(self.tcx, &self.region_scope_tree);
      .                           // Attribute scope exit drops to scope's closing brace.
    872 ( 0.00%)                  let scope_end = self.tcx.sess.source_map().end_point(region_scope_span);
      .           
      .                           scope.drops.push(DropData {
    218 ( 0.00%)                      source_info: SourceInfo { span: scope_end, scope: scope.source_scope },
      .                               local,
      .                               kind: drop_kind,
      .                           });
      .           
      .                           return;
      .                       }
      .                   }
      .           
      .                   span_bug!(span, "region scope {:?} not in scope to drop {:?}", region_scope, local);
  3,784 ( 0.00%)      }
      .           
      .               /// Indicates that the "local operand" stored in `local` is
      .               /// *moved* at some point during execution (see `local_scope` for
      .               /// more information about what a "local operand" is -- in short,
      .               /// it's an intermediate operand created as part of preparing some
      .               /// MIR instruction). We use this information to suppress
      .               /// redundant drops on the non-unwind paths. This results in less
      .               /// MIR, but also avoids spurious borrow check errors
-- line 942 ----------------------------------------
-- line 965 ----------------------------------------
      .               /// However, `_X` is still registered to be dropped, and so if we
      .               /// do nothing else, we would generate a `DROP(_X)` that occurs
      .               /// after the call. This will later be optimized out by the
      .               /// drop-elaboation code, but in the meantime it can lead to
      .               /// spurious borrow-check errors -- the problem, ironically, is
      .               /// not the `DROP(_X)` itself, but the (spurious) unwind pathways
      .               /// that it creates. See #64391 for an example.
      .               crate fn record_operands_moved(&mut self, operands: &[Operand<'tcx>]) {
    118 ( 0.00%)          let local_scope = self.local_scope();
      .                   let scope = self.scopes.scopes.last_mut().unwrap();
      .           
    177 ( 0.00%)          assert_eq!(scope.region_scope, local_scope, "local scope is not the topmost scope!",);
      .           
      .                   // look for moves of a local variable, like `MOVE(_X)`
    176 ( 0.00%)          let locals_moved = operands.iter().flat_map(|operand| match operand {
      .                       Operand::Copy(_) | Operand::Constant(_) => None,
      .                       Operand::Move(place) => place.as_local(),
      .                   });
      .           
    295 ( 0.00%)          for local in locals_moved {
      .                       // check if we have a Drop for this operand and -- if so
      .                       // -- add it to the list of moved operands. Note that this
      .                       // local might not have been an operand created for this
      .                       // call, it could come from other places too.
      .                       if scope.drops.iter().any(|drop| drop.local == local && drop.kind == DropKind::Value) {
      .                           scope.moved_locals.push(local);
      .                       }
      .                   }
      .               }
      .           
      .               // Other
      .               // =====
      .               /// Returns the [DropIdx] for the innermost drop if the function unwound at
      .               /// this point. The `DropIdx` will be created if it doesn't already exist.
    472 ( 0.00%)      fn diverge_cleanup(&mut self) -> DropIdx {
     59 ( 0.00%)          let is_generator = self.generator_kind.is_some();
      .                   let (uncached_scope, mut cached_drop) = self
      .                       .scopes
      .                       .scopes
      .                       .iter()
      .                       .enumerate()
      .                       .rev()
      .                       .find_map(|(scope_idx, scope)| {
    358 ( 0.00%)                  scope.cached_unwind_block.map(|cached_block| (scope_idx + 1, cached_block))
      .                       })
      .                       .unwrap_or((0, ROOT_NODE));
      .           
      .                   for scope in &mut self.scopes.scopes[uncached_scope..] {
      .                       for drop in &scope.drops {
    846 ( 0.00%)                  if is_generator || drop.kind == DropKind::Value {
      .                               cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);
      .                           }
      .                       }
    289 ( 0.00%)              scope.cached_unwind_block = Some(cached_drop);
      .                   }
      .           
      .                   cached_drop
    531 ( 0.00%)      }
      .           
      .               /// Prepares to create a path that performs all required cleanup for a
      .               /// terminator that can unwind at the given basic block.
      .               ///
      .               /// This path terminates in Resume. The path isn't created until after all
      .               /// of the non-unwind paths in this item have been lowered.
      .               crate fn diverge_from(&mut self, start: BasicBlock) {
      .                   debug_assert!(
-- line 1030 ----------------------------------------
-- line 1034 ----------------------------------------
      .                               | TerminatorKind::Call { .. }
      .                               | TerminatorKind::DropAndReplace { .. }
      .                               | TerminatorKind::FalseUnwind { .. }
      .                               | TerminatorKind::InlineAsm { .. }
      .                       ),
      .                       "diverge_from called on block with terminator that cannot unwind."
      .                   );
      .           
    177 ( 0.00%)          let next_drop = self.diverge_cleanup();
      .                   self.scopes.unwind_drops.add_entry(start, next_drop);
      .               }
      .           
      .               /// Sets up a path that performs all required cleanup for dropping a
      .               /// generator, starting from the given block that ends in
      .               /// [TerminatorKind::Yield].
      .               ///
      .               /// This path terminates in GeneratorDrop.
-- line 1050 ----------------------------------------
-- line 1132 ----------------------------------------
      .                   assert_eq!(top_scope.region_scope, region_scope);
      .           
      .                   top_scope.drops.clear();
      .                   top_scope.invalidate_cache();
      .               }
      .           }
      .           
      .           /// Builds drops for `pop_scope` and `leave_top_scope`.
327,063 ( 0.03%)  fn build_scope_drops<'tcx>(
      .               cfg: &mut CFG<'tcx>,
      .               unwind_drops: &mut DropTree,
      .               scope: &Scope,
      .               mut block: BasicBlock,
      .               mut unwind_to: DropIdx,
      .               storage_dead_on_unwind: bool,
      .               arg_count: usize,
      .           ) -> BlockAnd<()> {
-- line 1148 ----------------------------------------
-- line 1163 ----------------------------------------
      .               // another set of arrows).
      .               //
      .               // For generators, we unwind from a drop on a local to its StorageDead
      .               // statement. For other functions we don't worry about StorageDead. The
      .               // drops for the unwind path should have already been generated by
      .               // `diverge_cleanup_gen`.
      .           
      .               for drop_data in scope.drops.iter().rev() {
    436 ( 0.00%)          let source_info = drop_data.source_info;
    218 ( 0.00%)          let local = drop_data.local;
      .           
    436 ( 0.00%)          match drop_data.kind {
      .                       DropKind::Value => {
      .                           // `unwind_to` should drop the value that we're about to
      .                           // schedule. If dropping this value panics, then we continue
      .                           // with the *next* value on the unwind path.
      .                           debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);
      .                           debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);
      .                           unwind_to = unwind_drops.drops[unwind_to].1;
      .           
-- line 1182 ----------------------------------------
-- line 1194 ----------------------------------------
      .                           cfg.terminate(
      .                               block,
      .                               source_info,
      .                               TerminatorKind::Drop { place: local.into(), target: next, unwind: None },
      .                           );
      .                           block = next;
      .                       }
      .                       DropKind::Storage => {
    436 ( 0.00%)                  if storage_dead_on_unwind {
      .                               debug_assert_eq!(unwind_drops.drops[unwind_to].0.local, drop_data.local);
      .                               debug_assert_eq!(unwind_drops.drops[unwind_to].0.kind, drop_data.kind);
      .                               unwind_to = unwind_drops.drops[unwind_to].1;
      .                           }
      .                           // Only temps and vars need their storage dead.
    436 ( 0.00%)                  assert!(local.index() > arg_count);
  2,180 ( 0.00%)                  cfg.push(block, Statement { source_info, kind: StatementKind::StorageDead(local) });
      .                       }
      .                   }
      .               }
      .               block.unit()
267,597 ( 0.03%)  }
      .           
      .           impl<'a, 'tcx: 'a> Builder<'a, 'tcx> {
      .               /// Build a drop tree for a breakable scope.
      .               ///
      .               /// If `continue_block` is `Some`, then the tree is for `continue` inside a
      .               /// loop. Otherwise this is for `break` or `return`.
    360 ( 0.00%)      fn build_exit_tree(
      .                   &mut self,
      .                   mut drops: DropTree,
      .                   continue_block: Option<BasicBlock>,
      .               ) -> Option<BlockAnd<()>> {
     72 ( 0.00%)          let mut blocks = IndexVec::from_elem(None, &drops.drops);
     36 ( 0.00%)          blocks[ROOT_NODE] = continue_block;
      .           
    144 ( 0.00%)          drops.build_mir::<ExitScopes>(&mut self.cfg, &mut blocks);
      .           
      .                   // Link the exit drop tree to unwind drop tree.
      .                   if drops.drops.iter().any(|(drop, _)| drop.kind == DropKind::Value) {
      .                       let unwind_target = self.diverge_cleanup();
      .                       let mut unwind_indices = IndexVec::from_elem_n(unwind_target, 1);
      .                       for (drop_idx, drop_data) in drops.drops.iter_enumerated().skip(1) {
      .                           match drop_data.0.kind {
      .                               DropKind::Storage => {
-- line 1237 ----------------------------------------
-- line 1253 ----------------------------------------
      .                                   self.scopes
      .                                       .unwind_drops
      .                                       .add_entry(blocks[drop_idx].unwrap(), unwind_indices[drop_data.1]);
      .                                   unwind_indices.push(unwind_drop);
      .                               }
      .                           }
      .                       }
      .                   }
     36 ( 0.00%)          blocks[ROOT_NODE].map(BasicBlock::unit)
    396 ( 0.00%)      }
      .           
      .               /// Build the unwind and generator drop trees.
    512 ( 0.00%)      crate fn build_drop_trees(&mut self) {
     64 ( 0.00%)          if self.generator_kind.is_some() {
      .                       self.build_generator_drop_trees();
      .                   } else {
    192 ( 0.00%)              Self::build_unwind_tree(
     64 ( 0.00%)                  &mut self.cfg,
     64 ( 0.00%)                  &mut self.scopes.unwind_drops,
     64 ( 0.00%)                  self.fn_span,
    128 ( 0.00%)                  &mut None,
      .                       );
      .                   }
    512 ( 0.00%)      }
      .           
      .               fn build_generator_drop_trees(&mut self) {
      .                   // Build the drop tree for dropping the generator while it's suspended.
      .                   let drops = &mut self.scopes.generator_drops;
      .                   let cfg = &mut self.cfg;
      .                   let fn_span = self.fn_span;
      .                   let mut blocks = IndexVec::from_elem(None, &drops.drops);
      .                   drops.build_mir::<GeneratorDrop>(cfg, &mut blocks);
-- line 1284 ----------------------------------------
-- line 1306 ----------------------------------------
      .                       if let DropKind::Value = drop_data.0.kind {
      .                           debug_assert!(drop_data.1 < drops.drops.next_index());
      .                           drops.entry_points.push((drop_data.1, blocks[drop_idx].unwrap()));
      .                       }
      .                   }
      .                   Self::build_unwind_tree(cfg, drops, fn_span, resume_block);
      .               }
      .           
    640 ( 0.00%)      fn build_unwind_tree(
      .                   cfg: &mut CFG<'tcx>,
      .                   drops: &mut DropTree,
      .                   fn_span: Span,
      .                   resume_block: &mut Option<BasicBlock>,
      .               ) {
    128 ( 0.00%)          let mut blocks = IndexVec::from_elem(None, &drops.drops);
    192 ( 0.00%)          blocks[ROOT_NODE] = *resume_block;
    192 ( 0.00%)          drops.build_mir::<Unwind>(cfg, &mut blocks);
    256 ( 0.00%)          if let (None, Some(resume)) = (*resume_block, blocks[ROOT_NODE]) {
      .                       cfg.terminate(resume, SourceInfo::outermost(fn_span), TerminatorKind::Resume);
      .           
     72 ( 0.00%)              *resume_block = blocks[ROOT_NODE];
      .                   }
    448 ( 0.00%)      }
      .           }
      .           
      .           // DropTreeBuilder implementations.
      .           
      .           struct ExitScopes;
      .           
      .           impl<'tcx> DropTreeBuilder<'tcx> for ExitScopes {
      .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {
-- line 1336 ----------------------------------------
-- line 1364 ----------------------------------------
      .           struct Unwind;
      .           
      .           impl<'tcx> DropTreeBuilder<'tcx> for Unwind {
      .               fn make_block(cfg: &mut CFG<'tcx>) -> BasicBlock {
      .                   cfg.start_new_cleanup_block()
      .               }
      .               fn add_entry(cfg: &mut CFG<'tcx>, from: BasicBlock, to: BasicBlock) {
      .                   let term = &mut cfg.block_data_mut(from).terminator_mut();
    295 ( 0.00%)          match &mut term.kind {
      .                       TerminatorKind::Drop { unwind, .. }
      .                       | TerminatorKind::DropAndReplace { unwind, .. }
      .                       | TerminatorKind::FalseUnwind { unwind, .. }
    118 ( 0.00%)              | TerminatorKind::Call { cleanup: unwind, .. }
      .                       | TerminatorKind::Assert { cleanup: unwind, .. }
      .                       | TerminatorKind::InlineAsm { cleanup: unwind, .. } => {
     59 ( 0.00%)                  *unwind = Some(to);
      .                       }
      .                       TerminatorKind::Goto { .. }
      .                       | TerminatorKind::SwitchInt { .. }
      .                       | TerminatorKind::Resume
      .                       | TerminatorKind::Abort
      .                       | TerminatorKind::Return
      .                       | TerminatorKind::Unreachable
      .                       | TerminatorKind::Yield { .. }
-- line 1387 ----------------------------------------

 93,024 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/build/scope.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                 

-- line 346 ----------------------------------------
        .               ///
        .               /// let c = Cell::new(5);
        .               ///
        .               /// c.set(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn set(&self, val: T) {
       88 ( 0.00%)          let old = self.replace(val);
      264 ( 0.00%)          drop(old);
        .               }
        .           
        .               /// Swaps the values of two `Cell`s.
        .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
        .               ///
        .               /// let five = c.get();
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self) -> T {
        .                   // SAFETY: This can cause data races if called from a separate thread,
        .                   // but `Cell` is `!Sync` so this won't happen.
    8,867 ( 0.00%)          unsafe { *self.value.get() }
        .               }
        .           
        .               /// Updates the contained value using a function and returns the new value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
        .           
        .           #[inline(always)]
        .           fn is_writing(x: BorrowFlag) -> bool {
        .               x < UNUSED
        .           }
        .           
        .           #[inline(always)]
        .           fn is_reading(x: BorrowFlag) -> bool {
  159,495 ( 0.02%)      x > UNUSED
        .           }
        .           
        .           impl<T> RefCell<T> {
        .               /// Creates a new `RefCell` containing `value`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
        .               /// use std::cell::RefCell;
        .               ///
        .               /// let c = RefCell::new(5);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
        .               #[inline]
        .               pub const fn new(value: T) -> RefCell<T> {
    5,470 ( 0.00%)          RefCell {
    5,544 ( 0.00%)              value: UnsafeCell::new(value),
        .                       borrow: Cell::new(UNUSED),
        .                       #[cfg(feature = "debug_refcell")]
        .                       borrowed_at: Cell::new(None),
        .                   }
        .               }
        .           
        .               /// Consumes the `RefCell`, returning the wrapped value.
        .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
        .               /// let five = c.into_inner();
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
        .               #[inline]
        .               pub const fn into_inner(self) -> T {
        .                   // Since this function takes `self` (the `RefCell`) by value, the
        .                   // compiler statically verifies that it is not currently borrowed.
      292 ( 0.00%)          self.value.into_inner()
        .               }
        .           
        .               /// Replaces the wrapped value with a new one, returning the old value,
        .               /// without deinitializing either one.
        .               ///
        .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
        .               ///
        .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               ///
        .               /// let m = c.borrow_mut();
        .               /// let b = c.borrow(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
      193 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
        .                   self.try_borrow().expect("already mutably borrowed")
      579 ( 0.00%)      }
        .           
        .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
        .               /// borrowed.
        .               ///
        .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
        .               /// taken out at the same time.
        .               ///
        .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// let c = RefCell::new(5);
        .               /// let m = c.borrow();
        .               ///
        .               /// let b = c.borrow_mut(); // this causes a panic
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
      462 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
        .                   self.try_borrow_mut().expect("already borrowed")
    1,386 ( 0.00%)      }
        .           
        .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
        .               ///
        .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
        .               /// from it exit scope. The value cannot be borrowed while this borrow is
        .               /// active.
        .               ///
        .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 975 ----------------------------------------
        .                   match BorrowRefMut::new(&self.borrow) {
        .                       Some(b) => {
        .                           #[cfg(feature = "debug_refcell")]
        .                           {
        .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
        .                           }
        .           
        .                           // SAFETY: `BorrowRef` guarantees unique access.
       84 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
        .                       }
        .                       None => Err(BorrowMutError {
        .                           // If a borrow occurred, then we must already have an outstanding borrow,
        .                           // so `borrowed_at` will be `Some`
        .                           #[cfg(feature = "debug_refcell")]
        .                           location: self.borrowed_at.get().unwrap(),
        .                       }),
        .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
        .           
        .           struct BorrowRef<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl<'b> BorrowRef<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
  194,875 ( 0.02%)          let b = borrow.get().wrapping_add(1);
  128,556 ( 0.01%)          if !is_reading(b) {
        .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
        .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
        .                       //    due to Rust's reference aliasing rules
        .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
        .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
        .                       //    an additional read borrow because isize can't represent so many read borrows
        .                       //    (this can only happen if you mem::forget more than a small constant amount of
        .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
        .                       Some(BorrowRef { borrow })
        .                   }
        .               }
        .           }
        .           
        .           impl Drop for BorrowRef<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
  125,121 ( 0.01%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_reading(borrow));
  250,403 ( 0.03%)          self.borrow.set(borrow - 1);
        .               }
        .           }
        .           
        .           impl Clone for BorrowRef<'_> {
        .               #[inline]
        .               fn clone(&self) -> Self {
        .                   // Since this Ref exists, we know the borrow flag
        .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
        .           
        .           struct BorrowRefMut<'b> {
        .               borrow: &'b Cell<BorrowFlag>,
        .           }
        .           
        .           impl Drop for BorrowRefMut<'_> {
        .               #[inline]
        .               fn drop(&mut self) {
  844,696 ( 0.09%)          let borrow = self.borrow.get();
        .                   debug_assert!(is_writing(borrow));
1,685,420 ( 0.18%)          self.borrow.set(borrow + 1);
        .               }
        .           }
        .           
        .           impl<'b> BorrowRefMut<'b> {
        .               #[inline]
        .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
        .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
        .                   // mutable reference, and so there must currently be no existing
        .                   // references. Thus, while clone increments the mutable refcount, here
        .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
1,987,054 ( 0.21%)          match borrow.get() {
        .                       UNUSED => {
        .                           borrow.set(UNUSED - 1);
        .                           Some(BorrowRefMut { borrow })
        .                       }
        .                       _ => None,
        .                   }
        .               }
        .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
        .                   self.value
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut T {
       64 ( 0.00%)          self.value
        .               }
        .           }
        .           
        .           #[unstable(feature = "coerce_unsized", issue = "27732")]
        .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
        .           
        .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
        .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
        .               /// ```
        .               #[inline(always)]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
        .               pub const fn get(&self) -> *mut T {
        .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        .                   // #[repr(transparent)]. This exploits libstd's special status, there is
        .                   // no guarantee for user code that this will work in future versions of the compiler!
1,158,786 ( 0.12%)          self as *const UnsafeCell<T> as *const T as *mut T
        .               }
        .           
        .               /// Returns a mutable reference to the underlying data.
        .               ///
        .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
        .               /// guarantees that we possess the only reference.
        .               ///
        .               /// # Examples
-- line 1925 ----------------------------------------

1,751,468 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs
--------------------------------------------------------------------------------
Ir               

-- line 270 ----------------------------------------
      .               ///
      .               /// let s = RandomState::new();
      .               /// let mut map = HashMap::with_hasher(s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
      .               pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {
123,099 ( 0.01%)          HashMap { base: base::HashMap::with_hasher(hash_builder) }
      .               }
      .           
      .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
      .               /// to hash the keys.
      .               ///
      .               /// The hash map will be able to hold at least `capacity` elements without
      .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
      .               ///
-- line 286 ----------------------------------------
-- line 300 ----------------------------------------
      .               ///
      .               /// let s = RandomState::new();
      .               /// let mut map = HashMap::with_capacity_and_hasher(10, s);
      .               /// map.insert(1, 2);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
      .               pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {
    124 ( 0.00%)          HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }
      .               }
      .           
      .               /// Returns the number of elements the map can hold without reallocating.
      .               ///
      .               /// This number is a lower bound; the `HashMap<K, V>` might be able to hold
      .               /// more, but is guaranteed to be able to hold at least this many.
      .               ///
      .               /// # Examples
-- line 316 ----------------------------------------
-- line 468 ----------------------------------------
      .               /// ]);
      .               ///
      .               /// for (key, val) in map.iter() {
      .               ///     println!("key: {} val: {}", key, val);
      .               /// }
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn iter(&self) -> Iter<'_, K, V> {
    980 ( 0.00%)          Iter { base: self.base.iter() }
      .               }
      .           
      .               /// An iterator visiting all key-value pairs in arbitrary order,
      .               /// with mutable references to the values.
      .               /// The iterator element type is `(&'a K, &'a mut V)`.
      .               ///
      .               /// # Examples
      .               ///
-- line 484 ----------------------------------------
-- line 643 ----------------------------------------
      .               /// let mut a = HashMap::new();
      .               /// a.insert(1, "a");
      .               /// a.clear();
      .               /// assert!(a.is_empty());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn clear(&mut self) {
      1 ( 0.00%)          self.base.clear();
      .               }
      .           
      .               /// Returns a reference to the map's [`BuildHasher`].
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
      .               /// use std::collections::HashMap;
-- line 659 ----------------------------------------
-- line 688 ----------------------------------------
      .               /// ```
      .               /// use std::collections::HashMap;
      .               /// let mut map: HashMap<&str, i32> = HashMap::new();
      .               /// map.reserve(10);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn reserve(&mut self, additional: usize) {
      1 ( 0.00%)          self.base.reserve(additional)
      .               }
      .           
      .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
      .               /// in the given `HashMap<K, V>`. The collection may reserve more space to avoid
      .               /// frequent reallocations.
      .               ///
      .               /// # Errors
      .               ///
-- line 704 ----------------------------------------
-- line 784 ----------------------------------------
      .               /// assert_eq!(letters[&'s'], 2);
      .               /// assert_eq!(letters[&'t'], 3);
      .               /// assert_eq!(letters[&'u'], 1);
      .               /// assert_eq!(letters.get(&'y'), None);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {
447,740 ( 0.05%)          map_entry(self.base.rustc_entry(key))
      .               }
      .           
      .               /// Returns a reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 800 ----------------------------------------
-- line 805 ----------------------------------------
      .               ///
      .               /// let mut map = HashMap::new();
      .               /// map.insert(1, "a");
      .               /// assert_eq!(map.get(&1), Some(&"a"));
      .               /// assert_eq!(map.get(&2), None);
      .               /// ```
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               #[inline]
536,787 ( 0.06%)      pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      .                   self.base.get(k)
717,056 ( 0.08%)      }
      .           
      .               /// Returns the key-value pair corresponding to the supplied key.
      .               ///
      .               /// The supplied key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
      .               /// # Examples
-- line 827 ----------------------------------------
-- line 862 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
    966 ( 0.00%)          self.base.contains_key(k)
      .               }
      .           
      .               /// Returns a mutable reference to the value corresponding to the key.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
      .               ///
-- line 878 ----------------------------------------
-- line 890 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
      3 ( 0.00%)          self.base.get_mut(k)
      .               }
      .           
      .               /// Inserts a key-value pair into the map.
      .               ///
      .               /// If the map did not have this key present, [`None`] is returned.
      .               ///
      .               /// If the map did have this key present, the value is updated, and the old
      .               /// value is returned. The key is not updated, though; this matters for
-- line 906 ----------------------------------------
-- line 920 ----------------------------------------
      .               ///
      .               /// map.insert(37, "b");
      .               /// assert_eq!(map.insert(37, "c"), Some("b"));
      .               /// assert_eq!(map[&37], "c");
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn insert(&mut self, k: K, v: V) -> Option<V> {
926,983 ( 0.10%)          self.base.insert(k, v)
      .               }
      .           
      .               /// Tries to insert a key-value pair into the map, and returns
      .               /// a mutable reference to the value in the entry.
      .               ///
      .               /// If the map already had this key present, nothing is updated, and
      .               /// an error containing the occupied entry and the value is returned.
      .               ///
-- line 936 ----------------------------------------
-- line 978 ----------------------------------------
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
149,671 ( 0.02%)          self.base.remove(k)
      .               }
      .           
      .               /// Removes a key from the map, returning the stored key and value if the
      .               /// key was previously in the map.
      .               ///
      .               /// The key may be any borrowed form of the map's key type, but
      .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
      .               /// the key type.
-- line 994 ----------------------------------------
-- line 1083 ----------------------------------------
      .           impl<K, V, S> Clone for HashMap<K, V, S>
      .           where
      .               K: Clone,
      .               V: Clone,
      .               S: Clone,
      .           {
      .               #[inline]
      .               fn clone(&self) -> Self {
      3 ( 0.00%)          Self { base: self.base.clone() }
      .               }
      .           
      .               #[inline]
      .               fn clone_from(&mut self, other: &Self) {
      .                   self.base.clone_from(&other.base);
      .               }
      .           }
      .           
-- line 1099 ----------------------------------------
-- line 1155 ----------------------------------------
      .               type Output = V;
      .           
      .               /// Returns a reference to the value corresponding to the supplied key.
      .               ///
      .               /// # Panics
      .               ///
      .               /// Panics if the key is not present in the `HashMap`.
      .               #[inline]
     51 ( 0.00%)      fn index(&self, key: &Q) -> &V {
      .                   self.get(key).expect("no entry found for key")
     86 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "std_collections_from_array", since = "1.56.0")]
      .           // Note: as what is currently the most convenient built-in way to construct
      .           // a HashMap, a simple usage of this function must not *require* the user
      .           // to provide a type annotation in order to infer the third type parameter
      .           // (the hasher parameter, conventionally "S").
      .           // To that end, this impl is defined using RandomState as the concrete
-- line 1173 ----------------------------------------
-- line 1557 ----------------------------------------
      .               /// Creates a `RawEntryMut` from the given key and its hash.
      .               #[inline]
      .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Eq,
      .               {
131,651 ( 0.01%)          map_raw_entry(self.map.base.raw_entry_mut().from_key_hashed_nocheck(hash, k))
      .               }
      .           
      .               /// Creates a `RawEntryMut` from the given hash.
      .               #[inline]
      .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
      .               pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>
      .               where
      .                   for<'b> F: FnMut(&'b K) -> bool,
-- line 1573 ----------------------------------------
-- line 1594 ----------------------------------------
      .               /// Access an entry by a key and its hash.
      .               #[inline]
      .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
      .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
      .               where
      .                   K: Borrow<Q>,
      .                   Q: Hash + Eq,
      .               {
996,610 ( 0.10%)          self.map.base.raw_entry().from_key_hashed_nocheck(hash, k)
      .               }
      .           
      .               /// Access an entry by hash.
      .               #[inline]
      .               #[unstable(feature = "hash_raw_entry", issue = "56167")]
      .               pub fn from_hash<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>
      .               where
      .                   F: FnMut(&K) -> bool,
-- line 1610 ----------------------------------------
-- line 2338 ----------------------------------------
      .               /// assert_eq!(map["poneyland"], 3);
      .               ///
      .               /// *map.entry("poneyland").or_insert(10) *= 2;
      .               /// assert_eq!(map["poneyland"], 6);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn or_insert(self, default: V) -> &'a mut V {
  1,602 ( 0.00%)          match self {
      .                       Occupied(entry) => entry.into_mut(),
      .                       Vacant(entry) => entry.insert(default),
      .                   }
      .               }
      .           
      .               /// Ensures a value is in the entry by inserting the result of the default function if empty,
      .               /// and returns a mutable reference to the value in the entry.
      .               ///
-- line 2354 ----------------------------------------
-- line 2362 ----------------------------------------
      .               ///
      .               /// map.entry("poneyland").or_insert_with(|| s);
      .               ///
      .               /// assert_eq!(map["poneyland"], "hoho".to_string());
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V {
  2,866 ( 0.00%)          match self {
      .                       Occupied(entry) => entry.into_mut(),
      .                       Vacant(entry) => entry.insert(default()),
      .                   }
      .               }
      .           
      .               /// Ensures a value is in the entry by inserting, if empty, the result of the default function.
      .               /// This method allows for generating key-derived values for insertion by providing the default
      .               /// function a reference to the key that was moved during the `.entry(key)` method call.
-- line 2378 ----------------------------------------
-- line 2496 ----------------------------------------
      .               /// map.entry("poneyland").or_default();
      .               ///
      .               /// assert_eq!(map["poneyland"], None);
      .               /// # }
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "entry_or_default", since = "1.28.0")]
      .               pub fn or_default(self) -> &'a mut V {
  2,290 ( 0.00%)          match self {
      .                       Occupied(entry) => entry.into_mut(),
      .                       Vacant(entry) => entry.insert(Default::default()),
      .                   }
      .               }
      .           }
      .           
      .           impl<'a, K, V> OccupiedEntry<'a, K, V> {
      .               /// Gets a reference to the key in the entry.
-- line 2512 ----------------------------------------
-- line 2790 ----------------------------------------
      .               /// if let Entry::Vacant(o) = map.entry("poneyland") {
      .               ///     o.insert(37);
      .               /// }
      .               /// assert_eq!(map["poneyland"], 37);
      .               /// ```
      .               #[inline]
      .               #[stable(feature = "rust1", since = "1.0.0")]
      .               pub fn insert(self, value: V) -> &'a mut V {
  4,611 ( 0.00%)          self.base.insert(value)
      .               }
      .           
      .               /// Sets the value of the entry with the `VacantEntry`'s key,
      .               /// and returns an `OccupiedEntry`.
      .               ///
      .               /// # Examples
      .               ///
      .               /// ```
-- line 2806 ----------------------------------------
-- line 2823 ----------------------------------------
      .           }
      .           
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<K, V, S> FromIterator<(K, V)> for HashMap<K, V, S>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher + Default,
      .           {
      4 ( 0.00%)      fn from_iter<T: IntoIterator<Item = (K, V)>>(iter: T) -> HashMap<K, V, S> {
      .                   let mut map = HashMap::with_hasher(Default::default());
      .                   map.extend(iter);
      .                   map
      5 ( 0.00%)      }
      .           }
      .           
      .           /// Inserts all new key-values from the iterator and replaces values with existing
      .           /// keys with new values returned from the iterator.
      .           #[stable(feature = "rust1", since = "1.0.0")]
      .           impl<K, V, S> Extend<(K, V)> for HashMap<K, V, S>
      .           where
      .               K: Eq + Hash,
      .               S: BuildHasher,
      .           {
      .               #[inline]
      .               fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
  2,722 ( 0.00%)          self.base.extend(iter)
      .               }
      .           
      .               #[inline]
      .               fn extend_one(&mut self, (k, v): (K, V)) {
      .                   self.base.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 2856 ----------------------------------------
-- line 2863 ----------------------------------------
      .           impl<'a, K, V, S> Extend<(&'a K, &'a V)> for HashMap<K, V, S>
      .           where
      .               K: Eq + Hash + Copy,
      .               V: Copy,
      .               S: BuildHasher,
      .           {
      .               #[inline]
      .               fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {
     33 ( 0.00%)          self.base.extend(iter)
      .               }
      .           
      .               #[inline]
      .               fn extend_one(&mut self, (&k, &v): (&'a K, &'a V)) {
      .                   self.base.insert(k, v);
      .               }
      .           
      .               #[inline]
-- line 2879 ----------------------------------------
-- line 2928 ----------------------------------------
      .                   // many hash maps are created on a thread. To solve this performance
      .                   // trap we cache the first set of randomly generated keys per-thread.
      .                   //
      .                   // Later in #36481 it was discovered that exposing a deterministic
      .                   // iteration order allows a form of DOS attack. To counter that we
      .                   // increment one of the seeds on every RandomState creation, giving
      .                   // every corresponding HashMap a different iteration order.
      .                   thread_local!(static KEYS: Cell<(u64, u64)> = {
      1 ( 0.00%)              Cell::new(sys::hashmap_random_keys())
      .                   });
      .           
      .                   KEYS.with(|keys| {
      3 ( 0.00%)              let (k0, k1) = keys.get();
      .                       keys.set((k0.wrapping_add(1), k1));
      .                       RandomState { k0, k1 }
      .                   })
      .               }
      .           }
      .           
      .           #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
      .           impl BuildHasher for RandomState {
-- line 2948 ----------------------------------------
-- line 2967 ----------------------------------------
      .               /// Creates a new `DefaultHasher`.
      .               ///
      .               /// This hasher is not guaranteed to be the same as all other
      .               /// `DefaultHasher` instances, but is the same as all other `DefaultHasher`
      .               /// instances created through `new` or `default`.
      .               #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
      .               #[allow(deprecated)]
      .               #[must_use]
      3 ( 0.00%)      pub fn new() -> DefaultHasher {
     12 ( 0.00%)          DefaultHasher(SipHasher13::new_with_keys(0, 0))
      3 ( 0.00%)      }
      .           }
      .           
      .           #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
      .           impl Default for DefaultHasher {
      .               /// Creates a new `DefaultHasher` using [`new`].
      .               /// See its documentation for more.
      .               ///
      .               /// [`new`]: DefaultHasher::new
-- line 2985 ----------------------------------------
-- line 2986 ----------------------------------------
      .               fn default() -> DefaultHasher {
      .                   DefaultHasher::new()
      .               }
      .           }
      .           
      .           #[stable(feature = "hashmap_default_hasher", since = "1.13.0")]
      .           impl Hasher for DefaultHasher {
      .               #[inline]
  1,076 ( 0.00%)      fn write(&mut self, msg: &[u8]) {
      .                   self.0.write(msg)
  1,076 ( 0.00%)      }
      .           
      .               #[inline]
      .               fn finish(&self) -> u64 {
      .                   self.0.finish()
      .               }
      .           }
      .           
      .           #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
-- line 3004 ----------------------------------------
-- line 3014 ----------------------------------------
      .           impl fmt::Debug for RandomState {
      .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   f.debug_struct("RandomState").finish_non_exhaustive()
      .               }
      .           }
      .           
      .           #[inline]
      .           fn map_entry<'a, K: 'a, V: 'a>(raw: base::RustcEntry<'a, K, V>) -> Entry<'a, K, V> {
 30,162 ( 0.00%)      match raw {
     95 ( 0.00%)          base::RustcEntry::Occupied(base) => Entry::Occupied(OccupiedEntry { base }),
     92 ( 0.00%)          base::RustcEntry::Vacant(base) => Entry::Vacant(VacantEntry { base }),
      .               }
      .           }
      .           
      .           #[inline]
      .           pub(super) fn map_try_reserve_error(err: hashbrown::TryReserveError) -> TryReserveError {
      .               match err {
      .                   hashbrown::TryReserveError::CapacityOverflow => {
      .                       TryReserveErrorKind::CapacityOverflow.into()
-- line 3032 ----------------------------------------
-- line 3036 ----------------------------------------
      .                   }
      .               }
      .           }
      .           
      .           #[inline]
      .           fn map_raw_entry<'a, K: 'a, V: 'a, S: 'a>(
      .               raw: base::RawEntryMut<'a, K, V, S>,
      .           ) -> RawEntryMut<'a, K, V, S> {
 91,028 ( 0.01%)      match raw {
      .                   base::RawEntryMut::Occupied(base) => RawEntryMut::Occupied(RawOccupiedEntryMut { base }),
      .                   base::RawEntryMut::Vacant(base) => RawEntryMut::Vacant(RawVacantEntryMut { base }),
      .               }
      .           }
      .           
      .           #[allow(dead_code)]
      .           fn assert_covariance() {
      .               fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {
-- line 3052 ----------------------------------------

301,840 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/collections/hash/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs
--------------------------------------------------------------------------------
Ir                 

-- line 73 ----------------------------------------
        .                       EscapeError::UnskippedWhitespaceWarning | EscapeError::MultipleSkippedLinesWarning
        .                   )
        .               }
        .           }
        .           
        .           /// Takes a contents of a literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           /// Values are returned through invoking of the provided callback.
  409,402 ( 0.04%)  pub fn unescape_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
        .               match mode {
        .                   Mode::Char | Mode::Byte => {
   87,729 ( 0.01%)              let mut chars = literal_text.chars();
   29,243 ( 0.00%)              let result = unescape_char_or_byte(&mut chars, mode);
        .                       // The Chars iterator moved forward.
  204,701 ( 0.02%)              callback(0..(literal_text.len() - chars.as_str().len()), result);
        .                   }
        .                   Mode::Str | Mode::ByteStr => unescape_str_or_byte_str(literal_text, mode, callback),
        .                   // NOTE: Raw strings do not perform any explicit character escaping, here we
        .                   // only translate CRLF to LF and produce errors on bare CR.
        .                   Mode::RawStr | Mode::RawByteStr => {
        .                       unescape_raw_str_or_byte_str(literal_text, mode, callback)
        .                   }
        .               }
  233,944 ( 0.02%)  }
        .           
        .           /// Takes a contents of a byte, byte string or raw byte string (without quotes)
        .           /// and produces a sequence of bytes or errors.
        .           /// Values are returned through invoking of the provided callback.
        .           pub fn unescape_byte_literal<F>(literal_text: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<u8, EscapeError>),
        .           {
-- line 107 ----------------------------------------
-- line 108 ----------------------------------------
        .               assert!(mode.is_bytes());
        .               unescape_literal(literal_text, mode, &mut |range, result| {
        .                   callback(range, result.map(byte_from_char));
        .               })
        .           }
        .           
        .           /// Takes a contents of a char literal (without quotes), and returns an
        .           /// unescaped char or an error
  175,386 ( 0.02%)  pub fn unescape_char(literal_text: &str) -> Result<char, (usize, EscapeError)> {
  116,924 ( 0.01%)      let mut chars = literal_text.chars();
   58,462 ( 0.01%)      unescape_char_or_byte(&mut chars, Mode::Char)
        .                   .map_err(|err| (literal_text.len() - chars.as_str().len(), err))
  175,386 ( 0.02%)  }
        .           
        .           /// Takes a contents of a byte literal (without quotes), and returns an
        .           /// unescaped byte or an error.
        .           pub fn unescape_byte(literal_text: &str) -> Result<u8, (usize, EscapeError)> {
        .               let mut chars = literal_text.chars();
        .               unescape_char_or_byte(&mut chars, Mode::Byte)
        .                   .map(byte_from_char)
        .                   .map_err(|err| (literal_text.len() - chars.as_str().len(), err))
-- line 128 ----------------------------------------
-- line 154 ----------------------------------------
        .               pub fn is_bytes(self) -> bool {
        .                   match self {
        .                       Mode::Byte | Mode::ByteStr | Mode::RawByteStr => true,
        .                       Mode::Char | Mode::Str | Mode::RawStr => false,
        .                   }
        .               }
        .           }
        .           
  584,740 ( 0.06%)  fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
  292,370 ( 0.03%)      if first_char != '\\' {
        .                   // Previous character was not a slash, and we don't expect it to be
        .                   // an escape-only character.
        .                   return match first_char {
        .                       '\t' | '\n' => Err(EscapeError::EscapeOnlyChar),
        .                       '\r' => Err(EscapeError::BareCarriageReturn),
        .                       '\'' if mode.in_single_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       '"' if mode.in_double_quotes() => Err(EscapeError::EscapeOnlyChar),
        .                       _ => {
        9 ( 0.00%)                  if mode.is_bytes() && !first_char.is_ascii() {
        .                               // Byte literal can't be a non-ascii character.
        .                               return Err(EscapeError::NonAsciiCharInByte);
        .                           }
        .                           Ok(first_char)
        .                       }
        .                   };
        .               }
        .           
        .               // Previous character is '\\', try to unescape it.
        .           
  175,395 ( 0.02%)      let second_char = chars.next().ok_or(EscapeError::LoneSlash)?;
        .           
        .               let res = match second_char {
        .                   '"' => '"',
        .                   'n' => '\n',
        .                   'r' => '\r',
        .                   't' => '\t',
        .                   '\\' => '\\',
        .                   '\'' => '\'',
-- line 191 ----------------------------------------
-- line 209 ----------------------------------------
        .                       let value = value as u8;
        .           
        .                       value as char
        .                   }
        .           
        .                   'u' => {
        .                       // We've parsed '\u', now we have to parse '{..}'.
        .           
  233,856 ( 0.02%)              if chars.next() != Some('{') {
        .                           return Err(EscapeError::NoBraceInUnicodeEscape);
        .                       }
        .           
        .                       // First character must be a hexadecimal digit.
        .                       let mut n_digits = 1;
  467,712 ( 0.05%)              let mut value: u32 = match chars.next().ok_or(EscapeError::UnclosedUnicodeEscape)? {
        .                           '_' => return Err(EscapeError::LeadingUnderscoreUnicodeEscape),
        .                           '}' => return Err(EscapeError::EmptyUnicodeEscape),
    9,731 ( 0.00%)                  c => c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?,
        .                       };
        .           
        .                       // First character is valid, now parse the rest of the number
        .                       // and closing brace.
        .                       loop {
1,957,792 ( 0.21%)                  match chars.next() {
        .                               None => return Err(EscapeError::UnclosedUnicodeEscape),
        .                               Some('_') => continue,
        .                               Some('}') => {
  116,928 ( 0.01%)                          if n_digits > 6 {
        .                                       return Err(EscapeError::OverlongUnicodeEscape);
        .                                   }
        .           
        .                                   // Incorrect syntax has higher priority for error reporting
        .                                   // than unallowed value for a literal.
        .                                   if mode.is_bytes() {
        .                                       return Err(EscapeError::UnicodeEscapeInByte);
        .                                   }
        .           
  175,392 ( 0.02%)                          break std::char::from_u32(value).ok_or_else(|| {
        .                                       if value > 0x10FFFF {
        .                                           EscapeError::OutOfRangeUnicodeEscape
        .                                       } else {
        .                                           EscapeError::LoneSurrogateUnicodeEscape
        .                                       }
        .                                   })?;
        .                               }
        .                               Some(c) => {
        .                                   let digit =
   65,443 ( 0.01%)                              c.to_digit(16).ok_or(EscapeError::InvalidCharInUnicodeEscape)?;
  401,752 ( 0.04%)                          n_digits += 1;
  401,752 ( 0.04%)                          if n_digits > 6 {
        .                                       // Stop updating value since we're sure that it's is incorrect already.
        .                                       continue;
        .                                   }
        .                                   let digit = digit as u32;
1,406,132 ( 0.15%)                          value = value * 16 + digit;
        .                               }
        .                           };
        .                       }
        .                   }
        .                   _ => return Err(EscapeError::InvalidEscape),
        .               };
        .               Ok(res)
  701,688 ( 0.07%)  }
        .           
   58,474 ( 0.01%)  fn unescape_char_or_byte(chars: &mut Chars<'_>, mode: Mode) -> Result<char, EscapeError> {
        .               let first_char = chars.next().ok_or(EscapeError::ZeroChars)?;
  292,370 ( 0.03%)      let res = scan_escape(first_char, chars, mode)?;
        .               if chars.next().is_some() {
        .                   return Err(EscapeError::MoreThanOneChar);
        .               }
        .               Ok(res)
  292,370 ( 0.03%)  }
        .           
        .           /// Takes a contents of a string literal (without quotes) and produces a
        .           /// sequence of escaped characters or errors.
        .           fn unescape_str_or_byte_str<F>(src: &str, mode: Mode, callback: &mut F)
        .           where
        .               F: FnMut(Range<usize>, Result<char, EscapeError>),
        .           {
        .               assert!(mode.in_double_quotes());
-- line 288 ----------------------------------------

1,315,540 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/unescape.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs
--------------------------------------------------------------------------------
Ir                 

-- line 86 ----------------------------------------
        .           }
        .           
        .           /// A "Path" is essentially Rust's notion of a name.
        .           ///
        .           /// It's represented as a sequence of identifiers,
        .           /// along with a bunch of supporting information.
        .           ///
        .           /// E.g., `std::cmp::PartialEq`.
    1,183 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct Path {
        .               pub span: Span,
        .               /// The segments in the path: the things separated by `::`.
        .               /// Global paths begin with `kw::PathRoot`.
      149 ( 0.00%)      pub segments: Vec<PathSegment>,
        .               pub tokens: Option<LazyTokenStream>,
        .           }
        .           
        .           impl PartialEq<Symbol> for Path {
        .               #[inline]
        .               fn eq(&self, symbol: &Symbol) -> bool {
    3,833 ( 0.00%)          self.segments.len() == 1 && { self.segments[0].ident.name == *symbol }
        .               }
        .           }
        .           
        .           impl<CTX> HashStable<CTX> for Path {
        .               fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {
        .                   self.segments.len().hash_stable(hcx, hasher);
        .                   for segment in &self.segments {
        .                       segment.ident.name.hash_stable(hcx, hasher);
-- line 114 ----------------------------------------
-- line 115 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Path {
        .               // Convert a span and an identifier to the corresponding
        .               // one-segment path.
        .               pub fn from_ident(ident: Ident) -> Path {
       50 ( 0.00%)          Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }
        .               }
        .           
        .               pub fn is_global(&self) -> bool {
        .                   !self.segments.is_empty() && self.segments[0].ident.name == kw::PathRoot
        .               }
        .           }
        .           
        .           /// A segment of a path: an identifier, an optional lifetime, and a set of types.
        .           ///
        .           /// E.g., `std`, `String` or `Box<T>`.
      111 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct PathSegment {
        .               /// The identifier portion of this path segment.
        .               pub ident: Ident,
        .           
       98 ( 0.00%)      pub id: NodeId,
        .           
        .               /// Type/lifetime parameters attached to this path. They come in
        .               /// two flavors: `Path<A,B,C>` and `Path(A,B) -> C`.
        .               /// `None` means that no parameter list is supplied (`Path`),
        .               /// `Some` means that parameter list is supplied (`Path<X, Y>`)
        .               /// but it can be empty (`Path<>`).
        .               /// `P` is used as a size optimization for the common case with no parameters.
        .               pub args: Option<P<GenericArgs>>,
        .           }
        .           
        .           impl PathSegment {
      334 ( 0.00%)      pub fn from_ident(ident: Ident) -> Self {
    1,336 ( 0.00%)          PathSegment { ident, id: DUMMY_NODE_ID, args: None }
      334 ( 0.00%)      }
        .           
        .               pub fn path_root(span: Span) -> Self {
        .                   PathSegment::from_ident(Ident::new(kw::PathRoot, span))
        .               }
        .           
        .               pub fn span(&self) -> Span {
      645 ( 0.00%)          match &self.args {
        .                       Some(args) => self.ident.span.to(args.span()),
        .                       None => self.ident.span,
        .                   }
      430 ( 0.00%)      }
        .           }
        .           
        .           /// The arguments of a path segment.
        .           ///
        .           /// E.g., `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`.
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub enum GenericArgs {
        .               /// The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`.
-- line 172 ----------------------------------------
-- line 420 ----------------------------------------
        .           pub struct Generics {
        .               pub params: Vec<GenericParam>,
        .               pub where_clause: WhereClause,
        .               pub span: Span,
        .           }
        .           
        .           impl Default for Generics {
        .               /// Creates an instance of `Generics`.
        1 ( 0.00%)      fn default() -> Generics {
        5 ( 0.00%)          Generics {
        .                       params: Vec::new(),
        .                       where_clause: WhereClause {
        .                           has_where_token: false,
        .                           predicates: Vec::new(),
        .                           span: DUMMY_SP,
        .                       },
        .                       span: DUMMY_SP,
        .                   }
        1 ( 0.00%)      }
        .           }
        .           
        .           /// A where-clause in a definition.
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct WhereClause {
        .               /// `true` if we ate a `where` token: this can happen
        .               /// if we parsed no predicates (e.g. `struct Foo where {}`).
        .               /// This allows us to accurately pretty-print
-- line 446 ----------------------------------------
-- line 515 ----------------------------------------
        .               /// expansion placeholders or an unassigned value (`DUMMY_NODE_ID`) before that.
        .               pub id: NodeId,
        .               pub is_placeholder: bool,
        .           }
        .           
        .           /// Possible values inside of compile-time attribute lists.
        .           ///
        .           /// E.g., the '..' in `#[name(..)]`.
      147 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum NestedMetaItem {
        .               /// A full MetaItem, for recursive meta items.
        .               MetaItem(MetaItem),
        .               /// A literal.
        .               ///
        .               /// E.g., `"foo"`, `64`, `true`.
        .               Literal(Lit),
        .           }
        .           
        .           /// A spanned compile-time attribute item.
        .           ///
        .           /// E.g., `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = "foo"]`.
      739 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct MetaItem {
        .               pub path: Path,
        .               pub kind: MetaItemKind,
        .               pub span: Span,
        .           }
        .           
        .           /// A compile-time attribute item.
        .           ///
        .           /// E.g., `#[test]`, `#[derive(..)]` or `#[feature = "foo"]`.
      468 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum MetaItemKind {
        .               /// Word meta item.
        .               ///
        .               /// E.g., `test` as in `#[test]`.
        .               Word,
        .               /// List meta item.
        .               ///
        .               /// E.g., `derive(..)` as in `#[derive(..)]`.
        .               List(Vec<NestedMetaItem>),
        .               /// Name value meta item.
        .               ///
        .               /// E.g., `feature = "foo"` as in `#[feature = "foo"]`.
       30 ( 0.00%)      NameValue(Lit),
        .           }
        .           
        .           /// A block (`{ .. }`).
        .           ///
        .           /// E.g., `{ .. }` as in `fn foo() { .. }`.
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct Block {
        .               /// The statements in the block.
-- line 567 ----------------------------------------
-- line 626 ----------------------------------------
        .                   };
        .           
        .                   Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))
        .               }
        .           
        .               /// Walk top-down and call `it` in each place where a pattern occurs
        .               /// starting with the root pattern `walk` is called on. If `it` returns
        .               /// false then we will descend no further but siblings will be processed.
    1,200 ( 0.00%)      pub fn walk(&self, it: &mut impl FnMut(&Pat) -> bool) {
        .                   if !it(self) {
        .                       return;
        .                   }
        .           
      585 ( 0.00%)          match &self.kind {
        .                       // Walk into the pattern associated with `Ident` (if any).
        .                       PatKind::Ident(_, _, Some(p)) => p.walk(it),
        .           
        .                       // Walk into each field of struct.
        .                       PatKind::Struct(_, _, fields, _) => fields.iter().for_each(|field| field.pat.walk(it)),
        .           
        .                       // Sequence of patterns.
        .                       PatKind::TupleStruct(_, _, s)
-- line 647 ----------------------------------------
-- line 656 ----------------------------------------
        .                       PatKind::Wild
        .                       | PatKind::Rest
        .                       | PatKind::Lit(_)
        .                       | PatKind::Range(..)
        .                       | PatKind::Ident(..)
        .                       | PatKind::Path(..)
        .                       | PatKind::MacCall(_) => {}
        .                   }
      700 ( 0.00%)      }
        .           
        .               /// Is this a `..` pattern?
        .               pub fn is_rest(&self) -> bool {
        .                   matches!(self.kind, PatKind::Rest)
        .               }
        .           }
        .           
        .           /// A single field in a struct pattern.
-- line 672 ----------------------------------------
-- line 682 ----------------------------------------
        .               pub pat: P<Pat>,
        .               pub is_shorthand: bool,
        .               pub attrs: AttrVec,
        .               pub id: NodeId,
        .               pub span: Span,
        .               pub is_placeholder: bool,
        .           }
        .           
       37 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy)]
        .           pub enum BindingMode {
        .               ByRef(Mutability),
        .               ByValue(Mutability),
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub enum RangeEnd {
        .               /// `..=` or `...`
-- line 698 ----------------------------------------
-- line 772 ----------------------------------------
        .           
        .               /// Parentheses in patterns used for grouping (i.e., `(PAT)`).
        .               Paren(P<Pat>),
        .           
        .               /// A macro pattern; pre-expansion.
        .               MacCall(MacCall),
        .           }
        .           
  102,025 ( 0.01%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Copy)]
    1,612 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub enum Mutability {
        .               Mut,
        .               Not,
        .           }
        .           
        .           impl Mutability {
        .               pub fn invert(self) -> Self {
        .                   match self {
        .                       Mutability::Mut => Mutability::Not,
        .                       Mutability::Not => Mutability::Mut,
        .                   }
        .               }
        .           
        .               pub fn prefix_str(&self) -> &'static str {
       24 ( 0.00%)          match self {
        .                       Mutability::Mut => "mut ",
        .                       Mutability::Not => "",
        .                   }
        8 ( 0.00%)      }
        .           }
        .           
        .           /// The kind of borrow in an `AddrOf` expression,
        .           /// e.g., `&place` or `&raw const place`.
        .           #[derive(Clone, Copy, PartialEq, Eq, Debug)]
        .           #[derive(Encodable, Decodable, HashStable_Generic)]
        .           pub enum BorrowKind {
        .               /// A normal borrow, `&$expr` or `&mut $expr`.
-- line 808 ----------------------------------------
-- line 948 ----------------------------------------
        .           
        .               /// Converts a parsed `Stmt` to a `Stmt` with
        .               /// a trailing semicolon.
        .               ///
        .               /// This only modifies the parsed AST struct, not the attached
        .               /// `LazyTokenStream`. The parser is responsible for calling
        .               /// `CreateTokenStream::add_trailing_semi` when there is actually
        .               /// a semicolon in the tokenstream.
       11 ( 0.00%)      pub fn add_trailing_semicolon(mut self) -> Self {
       55 ( 0.00%)          self.kind = match self.kind {
        .                       StmtKind::Expr(expr) => StmtKind::Semi(expr),
       11 ( 0.00%)              StmtKind::MacCall(mac) => {
        .                           StmtKind::MacCall(mac.map(|MacCallStmt { mac, style: _, attrs, tokens }| {
        .                               MacCallStmt { mac, style: MacStmtStyle::Semicolon, attrs, tokens }
        .                           }))
        .                       }
        .                       kind => kind,
        .                   };
        .           
       66 ( 0.00%)          self
       11 ( 0.00%)      }
        .           
        .               pub fn is_item(&self) -> bool {
        .                   matches!(self.kind, StmtKind::Item(_))
        .               }
        .           
        .               pub fn is_expr(&self) -> bool {
       72 ( 0.00%)          matches!(self.kind, StmtKind::Expr(_))
       36 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub enum StmtKind {
        .               /// A local (let) binding.
        .               Local(P<Local>),
        .               /// An item definition.
        .               Item(P<Item>),
-- line 984 ----------------------------------------
-- line 1521 ----------------------------------------
        .           
        .           impl MacCall {
        .               pub fn span(&self) -> Span {
        .                   self.path.span.to(self.args.span().unwrap_or(self.path.span))
        .               }
        .           }
        .           
        .           /// Arguments passed to an attribute or a function-like macro.
    1,573 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
       14 ( 0.00%)  pub enum MacArgs {
        .               /// No arguments - `#[attr]`.
        .               Empty,
        .               /// Delimited arguments - `#[attr()/[]/{}]` or `mac!()/[]/{}`.
        .               Delimited(DelimSpan, MacDelimiter, TokenStream),
        .               /// Arguments of a key-value attribute - `#[attr = "value"]`.
        .               Eq(
        .                   /// Span of the `=` token.
        .                   Span,
        .                   /// "value" as a nonterminal token.
        .                   Token,
        .               ),
        .           }
        .           
        .           impl MacArgs {
        .               pub fn delim(&self) -> DelimToken {
       48 ( 0.00%)          match self {
        .                       MacArgs::Delimited(_, delim, _) => delim.to_token(),
        .                       MacArgs::Empty | MacArgs::Eq(..) => token::NoDelim,
        .                   }
       12 ( 0.00%)      }
        .           
        .               pub fn span(&self) -> Option<Span> {
        .                   match self {
        .                       MacArgs::Empty => None,
        .                       MacArgs::Delimited(dspan, ..) => Some(dspan.entire()),
        .                       MacArgs::Eq(eq_span, token) => Some(eq_span.to(token.span)),
        .                   }
        .               }
        .           
        .               /// Tokens inside the delimiters or after `=`.
        .               /// Proc macros see these tokens, for example.
       91 ( 0.00%)      pub fn inner_tokens(&self) -> TokenStream {
       65 ( 0.00%)          match self {
        .                       MacArgs::Empty => TokenStream::default(),
       13 ( 0.00%)              MacArgs::Delimited(.., tokens) => tokens.clone(),
        .                       MacArgs::Eq(.., token) => TokenTree::Token(token.clone()).into(),
        .                   }
      104 ( 0.00%)      }
        .           
        .               /// Whether a macro with these arguments needs a semicolon
        .               /// when used as a standalone item or statement.
        .               pub fn need_semicolon(&self) -> bool {
        .                   !matches!(self, MacArgs::Delimited(_, MacDelimiter::Brace, _))
        .               }
        .           }
        .           
       60 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum MacDelimiter {
        .               Parenthesis,
        .               Bracket,
        .               Brace,
        .           }
        .           
        .           impl MacDelimiter {
        .               pub fn to_token(self) -> DelimToken {
        .                   match self {
        .                       MacDelimiter::Parenthesis => DelimToken::Paren,
        .                       MacDelimiter::Bracket => DelimToken::Bracket,
        .                       MacDelimiter::Brace => DelimToken::Brace,
        .                   }
        .               }
        .           
       13 ( 0.00%)      pub fn from_token(delim: DelimToken) -> Option<MacDelimiter> {
        .                   match delim {
        .                       token::Paren => Some(MacDelimiter::Parenthesis),
        .                       token::Bracket => Some(MacDelimiter::Bracket),
        .                       token::Brace => Some(MacDelimiter::Brace),
        .                       token::NoDelim => None,
        .                   }
       13 ( 0.00%)      }
        .           }
        .           
        .           /// Represents a macro definition.
       12 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct MacroDef {
        .               pub body: P<MacArgs>,
        .               /// `true` if macro was defined with `macro_rules`.
        .               pub macro_rules: bool,
        .           }
        .           
       30 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, Copy, Hash, Eq, PartialEq)]
        .           #[derive(HashStable_Generic)]
        .           pub enum StrStyle {
        .               /// A regular string, like `"foo"`.
        .               Cooked,
        .               /// A raw string, like `r##"foo"##`.
        .               ///
        .               /// The value is the number of `#` symbols used.
        .               Raw(u16),
        .           }
        .           
        .           /// An AST literal.
      321 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct Lit {
        .               /// The original literal token as written in source code.
        .               pub token: token::Lit,
        .               /// The "semantic" representation of the literal lowered from the original tokens.
        .               /// Strings are unescaped, hexadecimal forms are eliminated, etc.
        .               /// FIXME: Remove this and only create the semantic representation during lowering to HIR.
        .               pub kind: LitKind,
        .               pub span: Span,
-- line 1631 ----------------------------------------
-- line 1678 ----------------------------------------
        .               Suffixed(FloatTy),
        .               /// A float literal without a suffix (`1.0 or 1.0E10`).
        .               Unsuffixed,
        .           }
        .           
        .           /// Literal kind.
        .           ///
        .           /// E.g., `"foo"`, `42`, `12.34`, or `bool`.
1,492,509 ( 0.16%)  #[derive(Clone, Encodable, Decodable, Debug, Hash, Eq, PartialEq, HashStable_Generic)]
        .           pub enum LitKind {
        .               /// A string literal (`"foo"`).
       45 ( 0.00%)      Str(Symbol, StrStyle),
        .               /// A byte string (`b"foo"`).
        .               ByteStr(Lrc<[u8]>),
        .               /// A byte char (`b'f'`).
        .               Byte(u8),
        .               /// A character literal (`'a'`).
   29,231 ( 0.00%)      Char(char),
        .               /// An integer literal (`1`).
        .               Int(u128, LitIntType),
        .               /// A float literal (`1f64` or `1E10f64`).
        .               Float(Symbol, LitFloatType),
        .               /// A boolean literal.
       56 ( 0.00%)      Bool(bool),
        .               /// Placeholder for a literal that wasn't well-formed in some way.
        .               Err(Symbol),
        .           }
        .           
        .           impl LitKind {
        .               /// Returns `true` if this literal is a string.
        .               pub fn is_str(&self) -> bool {
        .                   matches!(self, LitKind::Str(..))
-- line 1709 ----------------------------------------
-- line 1780 ----------------------------------------
        .                   match self {
        .                       FloatTy::F32 => sym::f32,
        .                       FloatTy::F64 => sym::f64,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
       18 ( 0.00%)  #[derive(Encodable, Decodable, HashStable_Generic)]
        .           pub enum IntTy {
        .               Isize,
        .               I8,
        .               I16,
        .               I32,
        .               I64,
        .               I128,
        .           }
-- line 1796 ----------------------------------------
-- line 1815 ----------------------------------------
        .                       IntTy::I32 => sym::i32,
        .                       IntTy::I64 => sym::i64,
        .                       IntTy::I128 => sym::i128,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy, Debug)]
        4 ( 0.00%)  #[derive(Encodable, Decodable, HashStable_Generic)]
        .           pub enum UintTy {
        .               Usize,
        .               U8,
        .               U16,
        .               U32,
        .               U64,
        .               U128,
        .           }
-- line 1831 ----------------------------------------
-- line 1897 ----------------------------------------
        .           pub struct Ty {
        .               pub id: NodeId,
        .               pub kind: TyKind,
        .               pub span: Span,
        .               pub tokens: Option<LazyTokenStream>,
        .           }
        .           
        .           impl Clone for Ty {
        2 ( 0.00%)      fn clone(&self) -> Self {
       22 ( 0.00%)          ensure_sufficient_stack(|| Self {
        1 ( 0.00%)              id: self.id,
        .                       kind: self.kind.clone(),
        1 ( 0.00%)              span: self.span,
        .                       tokens: self.tokens.clone(),
        .                   })
        3 ( 0.00%)      }
        .           }
        .           
        .           impl Ty {
        .               pub fn peel_refs(&self) -> &Self {
        .                   let mut final_ty = self;
        .                   while let TyKind::Rptr(_, MutTy { ty, .. }) = &final_ty.kind {
        .                       final_ty = &ty;
        .                   }
-- line 1920 ----------------------------------------
-- line 1926 ----------------------------------------
        .           pub struct BareFnTy {
        .               pub unsafety: Unsafe,
        .               pub ext: Extern,
        .               pub generic_params: Vec<GenericParam>,
        .               pub decl: P<FnDecl>,
        .           }
        .           
        .           /// The various kinds of type recognized by the compiler.
       14 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub enum TyKind {
        .               /// A variable-length slice (`[T]`).
        .               Slice(P<Ty>),
        .               /// A fixed length array (`[T; n]`).
        .               Array(P<Ty>, AnonConst),
        .               /// A raw pointer (`*const T` or `*mut T`).
        .               Ptr(MutTy),
        .               /// A reference (`&'a T` or `&'a mut T`).
-- line 1942 ----------------------------------------
-- line 1946 ----------------------------------------
        .               /// The never type (`!`).
        .               Never,
        .               /// A tuple (`(A, B, C, D,...)`).
        .               Tup(Vec<P<Ty>>),
        .               /// A path (`module::module::...::Type`), optionally
        .               /// "qualified", e.g., `<Vec<T> as SomeTrait>::SomeType`.
        .               ///
        .               /// Type parameters are stored in the `Path` itself.
        1 ( 0.00%)      Path(Option<QSelf>, Path),
        .               /// A trait object type `Bound1 + Bound2 + Bound3`
        .               /// where `Bound` is a trait or a lifetime.
        .               TraitObject(GenericBounds, TraitObjectSyntax),
        .               /// An `impl Bound1 + Bound2 + Bound3` type
        .               /// where `Bound` is a trait or a lifetime.
        .               ///
        .               /// The `NodeId` exists to prevent lowering from having to
        .               /// generate `NodeId`s on the fly, which would complicate
-- line 1962 ----------------------------------------
-- line 2152 ----------------------------------------
        .                           };
        .                       }
        .                   }
        .                   None
        .               }
        .           
        .               /// Returns `true` if parameter is `self`.
        .               pub fn is_self(&self) -> bool {
      495 ( 0.00%)          if let PatKind::Ident(_, ident, _) = self.pat.kind {
        .                       ident.name == kw::SelfLower
        .                   } else {
        .                       false
        .                   }
        1 ( 0.00%)      }
        .           
        .               /// Builds a `Param` object from `ExplicitSelf`.
      756 ( 0.00%)      pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {
      315 ( 0.00%)          let span = eself.span.to(eself_ident.span);
        .                   let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span, tokens: None });
      126 ( 0.00%)          let param = |mutbl, ty| Param {
        .                       attrs,
        .                       pat: P(Pat {
        .                           id: DUMMY_NODE_ID,
        .                           kind: PatKind::Ident(BindingMode::ByValue(mutbl), eself_ident, None),
        .                           span,
        .                           tokens: None,
        .                       }),
        .                       span,
        .                       ty,
        .                       id: DUMMY_NODE_ID,
        .                       is_placeholder: false,
        .                   };
      252 ( 0.00%)          match eself.node {
        .                       SelfKind::Explicit(ty, mutbl) => param(mutbl, ty),
       63 ( 0.00%)              SelfKind::Value(mutbl) => param(mutbl, infer_ty),
        .                       SelfKind::Region(lt, mutbl) => param(
        .                           Mutability::Not,
        .                           P(Ty {
        .                               id: DUMMY_NODE_ID,
        .                               kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),
        .                               span,
        .                               tokens: None,
        .                           }),
        .                       ),
        .                   }
      567 ( 0.00%)      }
        .           }
        .           
        .           /// A signature (not the body) of a function declaration.
        .           ///
        .           /// E.g., `fn foo(bar: baz)`.
        .           ///
        .           /// Please note that it's different from `FnHeader` structure
        .           /// which contains metadata about function safety, asyncness, constness and ABI.
-- line 2205 ----------------------------------------
-- line 2207 ----------------------------------------
        .           pub struct FnDecl {
        .               pub inputs: Vec<Param>,
        .               pub output: FnRetTy,
        .           }
        .           
        .           impl FnDecl {
        .               pub fn has_self(&self) -> bool {
        .                   self.inputs.get(0).map_or(false, Param::is_self)
       98 ( 0.00%)      }
        .               pub fn c_variadic(&self) -> bool {
      312 ( 0.00%)          self.inputs.last().map_or(false, |arg| matches!(arg.ty.kind, TyKind::CVarArgs))
      156 ( 0.00%)      }
        .           }
        .           
        .           /// Is the trait definition an auto trait?
        3 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum IsAuto {
        .               Yes,
        .               No,
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
        .           #[derive(HashStable_Generic)]
        .           pub enum Unsafe {
-- line 2230 ----------------------------------------
-- line 2239 ----------------------------------------
        .           }
        .           
        .           impl Async {
        .               pub fn is_async(self) -> bool {
        .                   matches!(self, Async::Yes { .. })
        .               }
        .           
        .               /// In this case this is an `async` return, the `NodeId` for the generated `impl Trait` item.
       72 ( 0.00%)      pub fn opt_return_id(self) -> Option<NodeId> {
        .                   match self {
        .                       Async::Yes { return_impl_trait_id, .. } => Some(return_impl_trait_id),
        .                       Async::No => None,
        .                   }
       36 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Encodable, Decodable, Debug)]
        .           #[derive(HashStable_Generic)]
        .           pub enum Const {
        .               Yes(Span),
        .               No,
        .           }
-- line 2260 ----------------------------------------
-- line 2262 ----------------------------------------
        .           /// Item defaultness.
        .           /// For details see the [RFC #2532](https://github.com/rust-lang/rfcs/pull/2532).
        .           #[derive(Copy, Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum Defaultness {
        .               Default(Span),
        .               Final,
        .           }
        .           
        4 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Encodable, Decodable, HashStable_Generic)]
        .           pub enum ImplPolarity {
        .               /// `impl Trait for Type`
        .               Positive,
        .               /// `impl !Trait for Type`
        .               Negative(Span),
        .           }
        .           
        .           impl fmt::Debug for ImplPolarity {
-- line 2278 ----------------------------------------
-- line 2393 ----------------------------------------
        .                       _ => panic!("`UseTree::ident` can only be used on a simple import"),
        .                   }
        .               }
        .           }
        .           
        .           /// Distinguishes between `Attribute`s that decorate items and Attributes that
        .           /// are contained as statements within items. These two cases need to be
        .           /// distinguished for pretty-printing.
    1,459 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, Copy, HashStable_Generic)]
        .           pub enum AttrStyle {
        .               Outer,
        .               Inner,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               pub struct AttrId {
        .                   ENCODABLE = custom
-- line 2409 ----------------------------------------
-- line 2415 ----------------------------------------
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_unit()
        .               }
        .           }
        .           
        .           impl<D: Decoder> rustc_serialize::Decodable<D> for AttrId {
        .               fn decode(d: &mut D) -> AttrId {
        .                   d.read_unit();
      410 ( 0.00%)          crate::attr::mk_attr_id()
        .               }
        .           }
        .           
    1,609 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub struct AttrItem {
        .               pub path: Path,
        .               pub args: MacArgs,
        .               pub tokens: Option<LazyTokenStream>,
        .           }
        .           
        .           /// A list of attributes.
        .           pub type AttrVec = ThinVec<Attribute>;
        .           
        .           /// Metadata associated with an item.
   15,706 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct Attribute {
        .               pub kind: AttrKind,
       18 ( 0.00%)      pub id: AttrId,
        .               /// Denotes if the attribute decorates the following construct (outer)
        .               /// or the construct this attribute is contained within (inner).
        .               pub style: AttrStyle,
        .               pub span: Span,
        .           }
        .           
    5,454 ( 0.00%)  #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub enum AttrKind {
        .               /// A normal attribute.
        .               Normal(AttrItem, Option<LazyTokenStream>),
        .           
        .               /// A doc comment (e.g. `/// ...`, `//! ...`, `/** ... */`, `/*! ... */`).
        .               /// Doc attributes (e.g. `#[doc="..."]`) are represented with the `Normal`
        .               /// variant (which is much less compact and thus more expensive).
       36 ( 0.00%)      DocComment(CommentKind, Symbol),
        .           }
        .           
        .           /// `TraitRef`s appear in impls.
        .           ///
        .           /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all
        .           /// that the `ref_id` is for. The `impl_id` maps to the "self type" of this impl.
        .           /// If this impl is an `ItemKind::Impl`, the `impl_id` is redundant (it could be the
        .           /// same as the impl's `NodeId`).
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct TraitRef {
        .               pub path: Path,
        1 ( 0.00%)      pub ref_id: NodeId,
        .           }
        .           
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct PolyTraitRef {
        .               /// The `'a` in `<'a> Foo<&'a T>`.
        .               pub bound_generic_params: Vec<GenericParam>,
        .           
        .               /// The `Foo<&'a T>` in `<'a> Foo<&'a T>`.
        .               pub trait_ref: TraitRef,
        .           
        .               pub span: Span,
        .           }
        .           
        .           impl PolyTraitRef {
        2 ( 0.00%)      pub fn new(generic_params: Vec<GenericParam>, path: Path, span: Span) -> Self {
        4 ( 0.00%)          PolyTraitRef {
        8 ( 0.00%)              bound_generic_params: generic_params,
       12 ( 0.00%)              trait_ref: TraitRef { path, ref_id: DUMMY_NODE_ID },
        .                       span,
        .                   }
        2 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Clone, Encodable, Decodable, Debug, HashStable_Generic)]
        .           pub enum CrateSugar {
        .               /// Source is `pub(crate)`.
        .               PubCrate,
        .           
        .               /// Source is (just) `crate`.
-- line 2497 ----------------------------------------
-- line 2510 ----------------------------------------
        .               Public,
        .               Crate(CrateSugar),
        .               Restricted { path: P<Path>, id: NodeId },
        .               Inherited,
        .           }
        .           
        .           impl VisibilityKind {
        .               pub fn is_pub(&self) -> bool {
      144 ( 0.00%)          matches!(self, VisibilityKind::Public)
       72 ( 0.00%)      }
        .           }
        .           
        .           /// Field definition in a struct, variant or union.
        .           ///
        .           /// E.g., `bar: usize` as in `struct Foo { bar: usize }`.
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub struct FieldDef {
        .               pub attrs: AttrVec,
-- line 2527 ----------------------------------------
-- line 2589 ----------------------------------------
        .               ///
        .               /// Note that the tokens here do not include the outer attributes, but will
        .               /// include inner attributes.
        .               pub tokens: Option<LazyTokenStream>,
        .           }
        .           
        .           impl Item {
        .               /// Return the span that encompasses the attributes.
      185 ( 0.00%)      pub fn span_with_attributes(&self) -> Span {
       52 ( 0.00%)          self.attrs.iter().fold(self.span, |acc, attr| acc.to(attr.span))
      222 ( 0.00%)      }
        .           }
        .           
        .           impl<K: Into<ItemKind>> Item<K> {
        .               pub fn into_item(self) -> Item {
        .                   let Item { attrs, id, span, vis, ident, kind, tokens } = self;
        .                   Item { attrs, id, span, vis, ident, kind: kind.into(), tokens }
        .               }
        .           }
-- line 2607 ----------------------------------------
-- line 2837 ----------------------------------------
        .               MacCall(MacCall),
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(AssocItemKind, 72);
        .           
        .           impl AssocItemKind {
        .               pub fn defaultness(&self) -> Defaultness {
      924 ( 0.00%)          match *self {
        .                       Self::Const(defaultness, ..)
      616 ( 0.00%)              | Self::Fn(box Fn { defaultness, .. })
        .                       | Self::TyAlias(box TyAlias { defaultness, .. }) => defaultness,
        .                       Self::MacCall(..) => Defaultness::Final,
        .                   }
      924 ( 0.00%)      }
        .           }
        .           
        .           impl From<AssocItemKind> for ItemKind {
        .               fn from(assoc_item_kind: AssocItemKind) -> ItemKind {
        .                   match assoc_item_kind {
        .                       AssocItemKind::Const(a, b, c) => ItemKind::Const(a, b, c),
        .                       AssocItemKind::Fn(fn_kind) => ItemKind::Fn(fn_kind),
        .                       AssocItemKind::TyAlias(ty_alias_kind) => ItemKind::TyAlias(ty_alias_kind),
-- line 2859 ----------------------------------------
-- line 2860 ----------------------------------------
        .                       AssocItemKind::MacCall(a) => ItemKind::MacCall(a),
        .                   }
        .               }
        .           }
        .           
        .           impl TryFrom<ItemKind> for AssocItemKind {
        .               type Error = ItemKind;
        .           
      126 ( 0.00%)      fn try_from(item_kind: ItemKind) -> Result<AssocItemKind, ItemKind> {
      945 ( 0.00%)          Ok(match item_kind {
        .                       ItemKind::Const(a, b, c) => AssocItemKind::Const(a, b, c),
      189 ( 0.00%)              ItemKind::Fn(fn_kind) => AssocItemKind::Fn(fn_kind),
        .                       ItemKind::TyAlias(ty_alias_kind) => AssocItemKind::TyAlias(ty_alias_kind),
        .                       ItemKind::MacCall(a) => AssocItemKind::MacCall(a),
        .                       _ => return Err(item_kind),
        .                   })
      126 ( 0.00%)      }
        .           }
        .           
        .           /// An item in `extern` block.
        .           #[derive(Clone, Encodable, Decodable, Debug)]
        .           pub enum ForeignItemKind {
        .               /// A foreign static item (`static FOO: u8`).
        .               Static(P<Ty>, Mutability, Option<P<Expr>>),
        .               /// An foreign function.
-- line 2884 ----------------------------------------

  348,259 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/ast.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,022,686 ( 0.11%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
    39,612 ( 0.00%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
13,117,968 ( 1.38%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
 3,650,392 ( 0.38%)          self.stride += Group::WIDTH;
 3,650,392 ( 0.38%)          self.pos += self.stride;
 2,785,226 ( 0.29%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    11,896 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
    22,405 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
     8,802 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
    30,156 ( 0.00%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    13,470 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
    24,507 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
    32,553 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
         3 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        10 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
       432 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
       868 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
       868 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
     1,736 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
        74 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     1,662 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   540,046 ( 0.06%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       152 ( 0.00%)          match self.find(hash, eq) {
       232 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   182,347 ( 0.02%)              None => None,
         .                   }
   737,712 ( 0.08%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     1,240 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
    83,956 ( 0.01%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    19,292 ( 0.00%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
    48,322 ( 0.01%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
    28,000 ( 0.00%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,158,180 ( 0.12%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
       587 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
   947,912 ( 0.10%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
   865,412 ( 0.09%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   265,784 ( 0.03%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
         4 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   199,338 ( 0.02%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
         2 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   118,451 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    29,445 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   267,433 ( 0.03%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   166,714 ( 0.02%)          self.table.items += 1;
         .                   bucket
         4 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
     1,184 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    68,710 ( 0.01%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    10,196 ( 0.00%)              eq(self.bucket(index).as_ref())
    13,112 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
        55 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
     1,352 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       689 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
        28 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
       909 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
        32 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   948,327 ( 0.10%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   183,782 ( 0.02%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     1,288 ( 0.00%)          let allocation = self.into_allocation();
       966 ( 0.00%)          RawIntoIter {
     1,610 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
       516 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       103 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   429,281 ( 0.05%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
    41,761 ( 0.00%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    10,580 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    24,168 ( 0.00%)          Ok(Self {
         .                       ctrl,
     9,978 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
    30,526 ( 0.00%)      }
         .           
         .               #[inline]
     2,752 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
       736 ( 0.00%)          if capacity == 0 {
       441 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
    19,277 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
     1,602 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
     2,752 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
    39,610 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
    39,610 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
    79,220 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,494,866 ( 0.16%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 1,876,305 ( 0.20%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
   862,402 ( 0.09%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
     2,484 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 3,002,610 ( 0.32%)              for bit in group.match_byte(h2_hash) {
 3,540,968 ( 0.37%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 1,947,096 ( 0.20%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,751,300 ( 0.18%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 2,752,408 ( 0.29%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
11,349,962 ( 1.19%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 1,184,938 ( 0.12%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
   947,912 ( 0.10%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 1,862,011 ( 0.20%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
   620,641 ( 0.07%)          *self.ctrl(index) = ctrl;
   620,665 ( 0.07%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   289,829 ( 0.03%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
    20,815 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
   594,183 ( 0.06%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
       732 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
    12,510 ( 0.00%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
     5,925 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    11,850 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    11,850 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    24,431 ( 0.00%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
     5,925 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     1,831 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   397,262 ( 0.04%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
     5,925 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
     3,171 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
       513 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
       878 ( 0.00%)          self.items = 0;
       513 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    38,650 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   154,600 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   193,250 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   154,600 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
        24 ( 0.00%)      fn clone(&self) -> Self {
         3 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
        27 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
         4 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   261,740 ( 0.03%)      fn drop(&mut self) {
   245,900 ( 0.03%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   295,032 ( 0.03%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,288 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     1,610 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   162,599 ( 0.02%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    30,870 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    56,456 ( 0.01%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   202,500 ( 0.02%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     2,747 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     5,190 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     2,896 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
       335 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    31,627 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    63,574 ( 0.01%)          if let Some(b) = self.iter.next() {
   160,318 ( 0.02%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    63,254 ( 0.01%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
       702 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
     2,374 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       382 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
        89 ( 0.00%)      fn next(&mut self) -> Option<T> {
         6 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
       227 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         2 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
         1 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

 7,744,449 ( 0.81%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 90 ----------------------------------------
      .                   &self.local_decls
      .               }
      .           }
      .           
      .           /// A streamlined trait that you can implement to create a pass; the
      .           /// pass will be named after the type, and it will consist of a main
      .           /// loop that goes over each available MIR and applies `run_pass`.
      .           pub trait MirPass<'tcx> {
 11,200 ( 0.00%)      fn name(&self) -> Cow<'_, str> {
      .                   let name = std::any::type_name::<Self>();
    252 ( 0.00%)          if let Some(tail) = name.rfind(':') {
  1,376 ( 0.00%)              Cow::from(&name[tail + 1..])
      .                   } else {
      .                       Cow::from(name)
      .                   }
  7,416 ( 0.00%)      }
      .           
      .               /// Returns `true` if this pass is enabled with the current combination of compiler flags.
      .               fn is_enabled(&self, _sess: &Session) -> bool {
      .                   true
  2,984 ( 0.00%)      }
      .           
      .               fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);
      .           
      .               /// If this pass causes the MIR to enter a new phase, return that phase.
      .               fn phase_change(&self) -> Option<MirPhase> {
      .                   None
  3,744 ( 0.00%)      }
      .           
      .               fn is_mir_dump_enabled(&self) -> bool {
      .                   true
  4,304 ( 0.00%)      }
      .           }
      .           
      .           /// The various "big phases" that MIR goes through.
      .           ///
      .           /// These phases all describe dialects of MIR. Since all MIR uses the same datastructures, the
      .           /// dialects forbid certain variants or values in certain phases.
      .           ///
      .           /// Note: Each phase's validation checks all invariants of the *previous* phases' dialects. A phase
      .           /// that changes the dialect documents what invariants must be upheld *after* that phase finishes.
      .           ///
      .           /// Warning: ordering of variants is significant.
  1,820 ( 0.00%)  #[derive(Copy, Clone, TyEncodable, TyDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]
      .           #[derive(HashStable)]
      .           pub enum MirPhase {
      .               Build = 0,
      .               // FIXME(oli-obk): it's unclear whether we still need this phase (and its corresponding query).
      .               // We used to have this for pre-miri MIR based const eval.
      .               Const = 1,
      .               /// This phase checks the MIR for promotable elements and takes them out of the main MIR body
      .               /// by creating a new MIR body per promoted element. After this phase (and thus the termination
-- line 141 ----------------------------------------
-- line 157 ----------------------------------------
      .           impl MirPhase {
      .               /// Gets the index of the current MirPhase within the set of all `MirPhase`s.
      .               pub fn phase_index(&self) -> usize {
      .                   *self as usize
      .               }
      .           }
      .           
      .           /// Where a specific `mir::Body` comes from.
    600 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq)]
    534 ( 0.00%)  #[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable)]
      .           pub struct MirSource<'tcx> {
      .               pub instance: InstanceDef<'tcx>,
      .           
      .               /// If `Some`, this is a promoted rvalue within the parent function.
      .               pub promoted: Option<Promoted>,
      .           }
      .           
      .           impl<'tcx> MirSource<'tcx> {
     64 ( 0.00%)      pub fn item(def_id: DefId) -> Self {
    320 ( 0.00%)          MirSource {
      .                       instance: InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),
      .                       promoted: None,
      .                   }
     64 ( 0.00%)      }
      .           
      .               pub fn from_instance(instance: InstanceDef<'tcx>) -> Self {
      .                   MirSource { instance, promoted: None }
      .               }
      .           
      .               pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {
    156 ( 0.00%)          self.instance.with_opt_param()
    156 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn def_id(&self) -> DefId {
  6,931 ( 0.00%)          self.instance.def_id()
      .               }
      .           }
      .           
      .           #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]
      .           pub struct GeneratorInfo<'tcx> {
      .               /// The yield type of the function, if it is a generator.
      .               pub yield_ty: Option<Ty<'tcx>>,
      .           
-- line 200 ----------------------------------------
-- line 205 ----------------------------------------
      .               pub generator_layout: Option<GeneratorLayout<'tcx>>,
      .           
      .               /// If this is a generator then record the type of source expression that caused this generator
      .               /// to be created.
      .               pub generator_kind: GeneratorKind,
      .           }
      .           
      .           /// The lowered representation of a single function.
 11,141 ( 0.00%)  #[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]
      .           pub struct Body<'tcx> {
      .               /// A list of basic blocks. References to basic block use a newtyped index type [`BasicBlock`]
      .               /// that indexes into this vector.
      .               basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,
      .           
      .               /// Records how far through the "desugaring and optimization" process this particular
      .               /// MIR has traversed. This is particularly useful when inlining, since in that context
      .               /// we instantiate the promoted constants and add them to our promoted vector -- but those
      .               /// promoted items have already been optimized, whereas ours have not. This field allows
      .               /// us to see the difference and forego optimization on the inlined promoted items.
    212 ( 0.00%)      pub phase: MirPhase,
      .           
      .               pub source: MirSource<'tcx>,
      .           
      .               /// A list of source scopes; these are referenced by statements
      .               /// and used for debuginfo. Indexed by a `SourceScope`.
    240 ( 0.00%)      pub source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,
      .           
    240 ( 0.00%)      pub generator: Option<Box<GeneratorInfo<'tcx>>>,
      .           
      .               /// Declarations of locals.
      .               ///
      .               /// The first local is the return value pointer, followed by `arg_count`
      .               /// locals for the function arguments, followed by any user-declared
      .               /// variables and temporaries.
      .               pub local_decls: LocalDecls<'tcx>,
      .           
-- line 240 ----------------------------------------
-- line 242 ----------------------------------------
      .               pub user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,
      .           
      .               /// The number of arguments this function takes.
      .               ///
      .               /// Starting at local 1, `arg_count` locals will be provided by the caller
      .               /// and can be assumed to be initialized.
      .               ///
      .               /// If this MIR was built for a constant, this will be 0.
    120 ( 0.00%)      pub arg_count: usize,
      .           
      .               /// Mark an argument local (which must be a tuple) as getting passed as
      .               /// its individual components at the LLVM level.
      .               ///
      .               /// This is used for the "rust-call" ABI.
    240 ( 0.00%)      pub spread_arg: Option<Local>,
      .           
      .               /// Debug information pertaining to user variables, including captures.
    120 ( 0.00%)      pub var_debug_info: Vec<VarDebugInfo<'tcx>>,
      .           
      .               /// A span representing this MIR, for error reporting.
      .               pub span: Span,
      .           
      .               /// Constants that are required to evaluate successfully for this MIR to be well-formed.
      .               /// We hold in this field all the constants we are not able to evaluate yet.
      .               pub required_consts: Vec<Constant<'tcx>>,
      .           
-- line 267 ----------------------------------------
-- line 275 ----------------------------------------
      .               /// fn test<T>() {
      .               ///     let _ = [0; std::mem::size_of::<*mut T>()];
      .               /// }
      .               /// ```
      .               ///
      .               /// **WARNING**: Do not change this flags after the MIR was originally created, even if an optimization
      .               /// removed the last mention of all generic params. We do not want to rely on optimizations and
      .               /// potentially allow things like `[u8; std::mem::size_of::<T>() * 0]` due to this.
    120 ( 0.00%)      pub is_polymorphic: bool,
      .           
      .               predecessor_cache: PredecessorCache,
      .               is_cyclic: GraphIsCyclicCache,
      .           }
      .           
      .           impl<'tcx> Body<'tcx> {
  1,536 ( 0.00%)      pub fn new(
      .                   source: MirSource<'tcx>,
      .                   basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,
      .                   source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,
      .                   local_decls: LocalDecls<'tcx>,
      .                   user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,
      .                   arg_count: usize,
      .                   var_debug_info: Vec<VarDebugInfo<'tcx>>,
      .                   span: Span,
      .                   generator_kind: Option<GeneratorKind>,
      .               ) -> Self {
      .                   // We need `arg_count` locals, and one for the return place.
    128 ( 0.00%)          assert!(
    128 ( 0.00%)              local_decls.len() > arg_count,
      .                       "expected at least {} locals, got {}",
      .                       arg_count + 1,
      .                       local_decls.len()
      .                   );
      .           
  2,560 ( 0.00%)          let mut body = Body {
      .                       phase: MirPhase::Build,
      .                       source,
      .                       basic_blocks,
      .                       source_scopes,
      .                       generator: generator_kind.map(|generator_kind| {
      .                           Box::new(GeneratorInfo {
      .                               yield_ty: None,
      .                               generator_drop: None,
      .                               generator_layout: None,
      .                               generator_kind,
      .                           })
      .                       }),
    512 ( 0.00%)              local_decls,
    512 ( 0.00%)              user_type_annotations,
      .                       arg_count,
      .                       spread_arg: None,
    512 ( 0.00%)              var_debug_info,
      .                       span,
      .                       required_consts: Vec::new(),
      .                       is_polymorphic: false,
      .                       predecessor_cache: PredecessorCache::new(),
      .                       is_cyclic: GraphIsCyclicCache::new(),
      .                   };
    128 ( 0.00%)          body.is_polymorphic = body.has_param_types_or_consts();
      .                   body
  1,152 ( 0.00%)      }
      .           
      .               /// Returns a partially initialized MIR body containing only a list of basic blocks.
      .               ///
      .               /// The returned MIR contains no `LocalDecl`s (even for the return place) or source scopes. It
      .               /// is only useful for testing but cannot be `#[cfg(test)]` because it is used in a different
      .               /// crate.
      .               pub fn new_cfg_only(basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>) -> Self {
      .                   let mut body = Body {
-- line 343 ----------------------------------------
-- line 368 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {
      .                   // Because the user could mutate basic block terminators via this reference, we need to
      .                   // invalidate the caches.
      .                   //
      .                   // FIXME: Use a finer-grained API for this, so only transformations that alter terminators
      .                   // invalidate the caches.
    624 ( 0.00%)          self.predecessor_cache.invalidate();
      .                   self.is_cyclic.invalidate();
      .                   &mut self.basic_blocks
      .               }
      .           
      .               #[inline]
      .               pub fn basic_blocks_and_local_decls_mut(
      .                   &mut self,
      .               ) -> (&mut IndexVec<BasicBlock, BasicBlockData<'tcx>>, &mut LocalDecls<'tcx>) {
-- line 384 ----------------------------------------
-- line 397 ----------------------------------------
      .               ) {
      .                   self.predecessor_cache.invalidate();
      .                   self.is_cyclic.invalidate();
      .                   (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)
      .               }
      .           
      .               /// Returns `true` if a cycle exists in the control-flow graph that is reachable from the
      .               /// `START_BLOCK`.
  1,136 ( 0.00%)      pub fn is_cfg_cyclic(&self) -> bool {
      .                   self.is_cyclic.is_cyclic(self)
  1,704 ( 0.00%)      }
      .           
      .               #[inline]
      .               pub fn local_kind(&self, local: Local) -> LocalKind {
      .                   let index = local.as_usize();
  2,939 ( 0.00%)          if index == 0 {
      .                       debug_assert!(
      .                           self.local_decls[local].mutability == Mutability::Mut,
      .                           "return place should be mutable"
      .                       );
      .           
      .                       LocalKind::ReturnPointer
  9,570 ( 0.00%)          } else if index < self.arg_count + 1 {
      .                       LocalKind::Arg
      .                   } else if self.local_decls[local].is_user_variable() {
      .                       LocalKind::Var
      .                   } else {
      .                       LocalKind::Temp
      .                   }
      .               }
      .           
      .               /// Returns an iterator over all user-declared mutable locals.
      .               #[inline]
      .               pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {
    192 ( 0.00%)          (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {
      .                       let local = Local::new(index);
      .                       let decl = &self.local_decls[local];
     28 ( 0.00%)              if decl.is_user_variable() && decl.mutability == Mutability::Mut {
      .                           Some(local)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               /// Returns an iterator over all user-declared mutable arguments and locals.
      .               #[inline]
      .               pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {
      .                   (1..self.local_decls.len()).filter_map(move |index| {
      .                       let local = Local::new(index);
      .                       let decl = &self.local_decls[local];
  1,582 ( 0.00%)              if (decl.is_user_variable() || index < self.arg_count + 1)
      .                           && decl.mutability == Mutability::Mut
      .                       {
      .                           Some(local)
      .                       } else {
      .                           None
      .                       }
      .                   })
      .               }
      .           
      .               /// Returns an iterator over all function arguments.
      .               #[inline]
      .               pub fn args_iter(&self) -> impl Iterator<Item = Local> + ExactSizeIterator {
  2,213 ( 0.00%)          (1..self.arg_count + 1).map(Local::new)
      .               }
      .           
      .               /// Returns an iterator over all user-defined variables and compiler-generated temporaries (all
      .               /// locals that are neither arguments nor the return place).
      .               #[inline]
      .               pub fn vars_and_temps_iter(
      .                   &self,
      .               ) -> impl DoubleEndedIterator<Item = Local> + ExactSizeIterator {
     39 ( 0.00%)          (self.arg_count + 1..self.local_decls.len()).map(Local::new)
      .               }
      .           
      .               #[inline]
      .               pub fn drain_vars_and_temps<'a>(&'a mut self) -> impl Iterator<Item = LocalDecl<'tcx>> + 'a {
      .                   self.local_decls.drain(self.arg_count + 1..)
      .               }
      .           
      .               /// Changes a statement to a nop. This is both faster than deleting instructions and avoids
-- line 478 ----------------------------------------
-- line 479 ----------------------------------------
      .               /// invalidating statement indices in `Location`s.
      .               pub fn make_statement_nop(&mut self, location: Location) {
      .                   let block = &mut self.basic_blocks[location.block];
      .                   debug_assert!(location.statement_index < block.statements.len());
      .                   block.statements[location.statement_index].make_nop()
      .               }
      .           
      .               /// Returns the source info associated with `location`.
 59,730 ( 0.01%)      pub fn source_info(&self, location: Location) -> &SourceInfo {
      .                   let block = &self[location.block];
      .                   let stmts = &block.statements;
 29,865 ( 0.00%)          let idx = location.statement_index;
149,325 ( 0.02%)          if idx < stmts.len() {
 88,680 ( 0.01%)              &stmts[idx].source_info
      .                   } else {
    610 ( 0.00%)              assert_eq!(idx, stmts.len());
    610 ( 0.00%)              &block.terminator().source_info
      .                   }
 59,730 ( 0.01%)      }
      .           
      .               /// Returns the return type; it always return first element from `local_decls` array.
      .               #[inline]
      .               pub fn return_ty(&self) -> Ty<'tcx> {
    636 ( 0.00%)          self.local_decls[RETURN_PLACE].ty
      .               }
      .           
      .               /// Gets the location of the terminator for the given block.
      .               #[inline]
      .               pub fn terminator_loc(&self, bb: BasicBlock) -> Location {
  1,746 ( 0.00%)          Location { block: bb, statement_index: self[bb].statements.len() }
      .               }
      .           
      .               pub fn stmt_at(&self, location: Location) -> Either<&Statement<'tcx>, &Terminator<'tcx>> {
      .                   let Location { block, statement_index } = location;
      .                   let block_data = &self.basic_blocks[block];
      .                   block_data
      .                       .statements
      .                       .get(statement_index)
-- line 516 ----------------------------------------
-- line 520 ----------------------------------------
      .           
      .               #[inline]
      .               pub fn predecessors(&self) -> &Predecessors {
      .                   self.predecessor_cache.compute(&self.basic_blocks)
      .               }
      .           
      .               #[inline]
      .               pub fn dominators(&self) -> Dominators<BasicBlock> {
    282 ( 0.00%)          dominators(self)
      .               }
      .           
      .               #[inline]
      .               pub fn yield_ty(&self) -> Option<Ty<'tcx>> {
      .                   self.generator.as_ref().and_then(|generator| generator.yield_ty)
      .               }
      .           
      .               #[inline]
-- line 536 ----------------------------------------
-- line 571 ----------------------------------------
      .           
      .           impl<'tcx> IndexMut<BasicBlock> for Body<'tcx> {
      .               #[inline]
      .               fn index_mut(&mut self, index: BasicBlock) -> &mut BasicBlockData<'tcx> {
      .                   &mut self.basic_blocks_mut()[index]
      .               }
      .           }
      .           
  2,428 ( 0.00%)  #[derive(Copy, Clone, Debug, HashStable, TypeFoldable)]
      .           pub enum ClearCrossCrate<T> {
      .               Clear,
      .               Set(T),
      .           }
      .           
      .           impl<T> ClearCrossCrate<T> {
      .               pub fn as_ref(&self) -> ClearCrossCrate<&T> {
118,151 ( 0.01%)          match self {
      .                       ClearCrossCrate::Clear => ClearCrossCrate::Clear,
      .                       ClearCrossCrate::Set(v) => ClearCrossCrate::Set(v),
      .                   }
      .               }
      .           
      .               pub fn assert_crate_local(self) -> T {
 29,594 ( 0.00%)          match self {
      .                       ClearCrossCrate::Clear => bug!("unwrapping cross-crate data"),
      .                       ClearCrossCrate::Set(v) => v,
      .                   }
     62 ( 0.00%)      }
      .           }
      .           
      .           const TAG_CLEAR_CROSS_CRATE_CLEAR: u8 = 0;
      .           const TAG_CLEAR_CROSS_CRATE_SET: u8 = 1;
      .           
      .           impl<'tcx, E: TyEncoder<'tcx>, T: Encodable<E>> Encodable<E> for ClearCrossCrate<T> {
      .               #[inline]
      .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
-- line 606 ----------------------------------------
-- line 637 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Grouped information about the source code origin of a MIR entity.
      .           /// Intended to be inspected by diagnostics and debuginfo.
      .           /// Most passes can work with it as a whole, within a single function.
      .           // The unofficial Cranelift backend, at least as of #65828, needs `SourceInfo` to implement `Eq` and
      .           // `Hash`. Please ping @bjorn3 if removing them.
 12,826 ( 0.00%)  #[derive(Copy, Clone, Debug, Eq, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub struct SourceInfo {
      .               /// The source span for the AST pertaining to this MIR entity.
      .               pub span: Span,
      .           
      .               /// The source scope, keeping track of which bindings can be
      .               /// seen by debuginfo, active lint levels, `unsafe {...}`, etc.
      .               pub scope: SourceScope,
      .           }
-- line 653 ----------------------------------------
-- line 657 ----------------------------------------
      .               pub fn outermost(span: Span) -> Self {
      .                   SourceInfo { span, scope: OUTERMOST_SOURCE_SCOPE }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Borrow kinds
      .           
  1,814 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, TyEncodable, TyDecodable)]
      .           #[derive(Hash, HashStable)]
      .           pub enum BorrowKind {
      .               /// Data must be immutable and is aliasable.
      .               Shared,
      .           
      .               /// The immediately borrowed place must be immutable, but projections from
      .               /// it don't need to be. For example, a shallow borrow of `a.b` doesn't
      .               /// conflict with a mutable borrow of `a.b.c`.
-- line 673 ----------------------------------------
-- line 731 ----------------------------------------
      .                   /// `true` if this borrow arose from method-call auto-ref
      .                   /// (i.e., `adjustment::Adjust::Borrow`).
      .                   allow_two_phase_borrow: bool,
      .               },
      .           }
      .           
      .           impl BorrowKind {
      .               pub fn allows_two_phase_borrow(&self) -> bool {
     10 ( 0.00%)          match *self {
      .                       BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => false,
      .                       BorrowKind::Mut { allow_two_phase_borrow } => allow_two_phase_borrow,
      .                   }
      2 ( 0.00%)      }
      .           
      .               pub fn describe_mutability(&self) -> String {
      .                   match *self {
      .                       BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => {
      .                           "immutable".to_string()
      .                       }
      .                       BorrowKind::Mut { .. } => "mutable".to_string(),
      .                   }
-- line 751 ----------------------------------------
-- line 777 ----------------------------------------
      .               /// Compiler-introduced temporary.
      .               Temp,
      .               /// Function argument.
      .               Arg,
      .               /// Location of function's return value.
      .               ReturnPointer,
      .           }
      .           
     24 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
      .           pub struct VarBindingForm<'tcx> {
      .               /// Is variable bound via `x`, `mut x`, `ref x`, or `ref mut x`?
      6 ( 0.00%)      pub binding_mode: ty::BindingMode,
      .               /// If an explicit type was provided for this variable binding,
      .               /// this holds the source Span of that type.
      .               ///
      .               /// NOTE: if you want to change this to a `HirId`, be wary that
      .               /// doing so breaks incremental compilation (as of this writing),
      .               /// while a `Span` does not cause our tests to fail.
      .               pub opt_ty_info: Option<Span>,
      .               /// Place of the RHS of the =, or the subject of the `match` where this
-- line 796 ----------------------------------------
-- line 799 ----------------------------------------
      .               /// (a) the right-hand side isn't evaluated as a place expression.
      .               /// (b) it gives a way to separate this case from the remaining cases
      .               ///     for diagnostics.
      .               pub opt_match_place: Option<(Option<Place<'tcx>>, Span)>,
      .               /// The span of the pattern in which this variable was bound.
      .               pub pat_span: Span,
      .           }
      .           
    432 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable)]
      .           pub enum BindingForm<'tcx> {
      .               /// This is a binding for a non-`self` binding, or a `self` that has an explicit type.
      .               Var(VarBindingForm<'tcx>),
      .               /// Binding for a `self`/`&self`/`&mut self` binding where the type is implicit.
    315 ( 0.00%)      ImplicitSelf(ImplicitSelfKind),
      .               /// Reference used in a guard expression to ensure immutability.
      .               RefForGuard,
      .           }
      .           
      .           /// Represents what type of implicit self a function has, if any.
      .           #[derive(Clone, Copy, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]
      .           pub enum ImplicitSelfKind {
      .               /// Represents a `fn x(self);`.
-- line 820 ----------------------------------------
-- line 853 ----------------------------------------
      .           /// `BlockTailInfo` is attached to the `LocalDecl` for temporaries
      .           /// created during evaluation of expressions in a block tail
      .           /// expression; that is, a block like `{ STMT_1; STMT_2; EXPR }`.
      .           ///
      .           /// It is used to improve diagnostics when such temporaries are
      .           /// involved in borrow_check errors, e.g., explanations of where the
      .           /// temporaries come from, when their destructors are run, and/or how
      .           /// one might revise the code to satisfy the borrow checker's rules.
  1,727 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
      .           pub struct BlockTailInfo {
      .               /// If `true`, then the value resulting from evaluating this tail
      .               /// expression is ignored by the block's expression context.
      .               ///
      .               /// Examples include `{ ...; tail };` and `let _ = { ...; tail };`
      .               /// but not e.g., `let _x = { ...; tail };`
      .               pub tail_result_is_ignored: bool,
      .           
-- line 869 ----------------------------------------
-- line 870 ----------------------------------------
      .               /// `Span` of the tail expression.
      .               pub span: Span,
      .           }
      .           
      .           /// A MIR local.
      .           ///
      .           /// This can be a binding declared by the user, a temporary inserted by the compiler, a function
      .           /// argument, or the return place.
  9,197 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct LocalDecl<'tcx> {
      .               /// Whether this is a mutable binding (i.e., `let x` or `let mut x`).
      .               ///
      .               /// Temporaries and the return place are always mutable.
  2,214 ( 0.00%)      pub mutability: Mutability,
      .           
      .               // FIXME(matthewjasper) Don't store in this in `Body`
      .               pub local_info: Option<Box<LocalInfo<'tcx>>>,
      .           
      .               /// `true` if this is an internal local.
      .               ///
      .               /// These locals are not based on types in the source code and are only used
      .               /// for a few desugarings at the moment.
-- line 891 ----------------------------------------
-- line 894 ----------------------------------------
      .               /// across a suspension point against the type components of the generator
      .               /// which type checking knows are live across a suspension point. We need to
      .               /// flag drop flags to avoid triggering this check as they are introduced
      .               /// after typeck.
      .               ///
      .               /// This should be sound because the drop flags are fully algebraic, and
      .               /// therefore don't affect the auto-trait or outlives properties of the
      .               /// generator.
  1,761 ( 0.00%)      pub internal: bool,
      .           
      .               /// If this local is a temporary and `is_block_tail` is `Some`,
      .               /// then it is a temporary created for evaluation of some
      .               /// subexpression of some block's tail expression (with no
      .               /// intervening statement context).
      .               // FIXME(matthewjasper) Don't store in this in `Body`
      .               pub is_block_tail: Option<BlockTailInfo>,
      .           
      .               /// The type of this local.
  1,761 ( 0.00%)      pub ty: Ty<'tcx>,
      .           
      .               /// If the user manually ascribed a type to this variable,
      .               /// e.g., via `let x: T`, then we carry that type here. The MIR
      .               /// borrow checker needs this information since it can affect
      .               /// region inference.
      .               // FIXME(matthewjasper) Don't store in this in `Body`
      .               pub user_ty: Option<Box<UserTypeProjections>>,
      .           
-- line 920 ----------------------------------------
-- line 1005 ----------------------------------------
      .           static_assert_size!(LocalDecl<'_>, 56);
      .           
      .           /// Extra information about a some locals that's used for diagnostics and for
      .           /// classifying variables into local variables, statics, etc, which is needed e.g.
      .           /// for unsafety checking.
      .           ///
      .           /// Not used for non-StaticRef temporaries, the return place, or anonymous
      .           /// function parameters.
  3,679 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub enum LocalInfo<'tcx> {
      .               /// A user-defined local variable or function parameter
      .               ///
      .               /// The `BindingForm` is solely used for local diagnostics when generating
      .               /// warnings/errors when compiling the current crate, and therefore it need
      .               /// not be visible across crates.
      .               User(ClearCrossCrate<BindingForm<'tcx>>),
      .               /// A temporary created that references the static with the given `DefId`.
    168 ( 0.00%)      StaticRef { def_id: DefId, is_thread_local: bool },
      .               /// A temporary created that references the const with the given `DefId`
      .               ConstRef { def_id: DefId },
      .               /// A temporary created during the creation of an aggregate
      .               /// (e.g. a temporary for `foo` in `MyStruct { my_field: foo }`)
      .               AggregateTemp,
      .           }
      .           
      .           impl<'tcx> LocalDecl<'tcx> {
-- line 1030 ----------------------------------------
-- line 1064 ----------------------------------------
      .                       )))
      .                   )
      .               }
      .           
      .               /// Returns `true` if this variable is a named variable or function
      .               /// parameter declared by the user.
      .               #[inline]
      .               pub fn is_user_variable(&self) -> bool {
  4,537 ( 0.00%)          matches!(self.local_info, Some(box LocalInfo::User(_)))
      .               }
      .           
      .               /// Returns `true` if this is a reference to a variable bound in a `match`
      .               /// expression that is used to access said variable for the guard of the
      .               /// match arm.
      .               pub fn is_ref_for_guard(&self) -> bool {
      .                   matches!(
      .                       self.local_info,
      .                       Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::RefForGuard)))
      .                   )
      .               }
      .           
      .               /// Returns `Some` if this is a reference to a static item that is used to
      .               /// access that static.
      .               pub fn is_ref_to_static(&self) -> bool {
  3,104 ( 0.00%)          matches!(self.local_info, Some(box LocalInfo::StaticRef { .. }))
    960 ( 0.00%)      }
      .           
      .               /// Returns `Some` if this is a reference to a thread-local static item that is used to
      .               /// access that static.
      .               pub fn is_ref_to_thread_local(&self) -> bool {
    528 ( 0.00%)          match self.local_info {
      .                       Some(box LocalInfo::StaticRef { is_thread_local, .. }) => is_thread_local,
      .                       _ => false,
      .                   }
    174 ( 0.00%)      }
      .           
      .               /// Returns `true` is the local is from a compiler desugaring, e.g.,
      .               /// `__next` from a `for` loop.
      .               #[inline]
      .               pub fn from_compiler_desugaring(&self) -> bool {
      .                   self.source_info.span.desugaring_kind().is_some()
      .               }
      .           
-- line 1106 ----------------------------------------
-- line 1108 ----------------------------------------
      .               #[inline]
      .               pub fn new(ty: Ty<'tcx>, span: Span) -> Self {
      .                   Self::with_source_info(ty, SourceInfo::outermost(span))
      .               }
      .           
      .               /// Like `LocalDecl::new`, but takes a `SourceInfo` instead of a `Span`.
      .               #[inline]
      .               pub fn with_source_info(ty: Ty<'tcx>, source_info: SourceInfo) -> Self {
  1,946 ( 0.00%)          LocalDecl {
      .                       mutability: Mutability::Mut,
      .                       local_info: None,
      .                       internal: false,
      .                       is_block_tail: None,
      .                       ty,
      .                       user_ty: None,
      .                       source_info,
      .                   }
-- line 1124 ----------------------------------------
-- line 1136 ----------------------------------------
      .               pub fn immutable(mut self) -> Self {
      .                   self.mutability = Mutability::Not;
      .                   self
      .               }
      .           
      .               /// Converts `self` into same `LocalDecl` except tagged as internal temporary.
      .               #[inline]
      .               pub fn block_tail(mut self, info: BlockTailInfo) -> Self {
    162 ( 0.00%)          assert!(self.is_block_tail.is_none());
    486 ( 0.00%)          self.is_block_tail = Some(info);
  2,268 ( 0.00%)          self
      .               }
      .           }
      .           
    645 ( 0.00%)  #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub enum VarDebugInfoContents<'tcx> {
      .               /// NOTE(eddyb) There's an unenforced invariant that this `Place` is
      .               /// based on a `Local`, not a `Static`, and contains no indexing.
      .               Place(Place<'tcx>),
      .               Const(Constant<'tcx>),
      .           }
      .           
      .           impl<'tcx> Debug for VarDebugInfoContents<'tcx> {
-- line 1158 ----------------------------------------
-- line 1160 ----------------------------------------
      .                   match self {
      .                       VarDebugInfoContents::Const(c) => write!(fmt, "{}", c),
      .                       VarDebugInfoContents::Place(p) => write!(fmt, "{:?}", p),
      .                   }
      .               }
      .           }
      .           
      .           /// Debug information pertaining to a user variable.
  1,577 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct VarDebugInfo<'tcx> {
      .               pub name: Symbol,
      .           
      .               /// Source info of the user variable, including the scope
      .               /// within which the variable is visible (to debuginfo)
      .               /// (see `LocalDecl`'s `source_info` field for more details).
      .               pub source_info: SourceInfo,
      .           
-- line 1176 ----------------------------------------
-- line 1209 ----------------------------------------
      .                   DEBUG_FORMAT = "bb{}",
      .                   const START_BLOCK = 0,
      .               }
      .           }
      .           
      .           impl BasicBlock {
      .               pub fn start_location(self) -> Location {
      .                   Location { block: self, statement_index: 0 }
  1,581 ( 0.00%)      }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // BasicBlockData and Terminator
      .           
      .           /// See [`BasicBlock`] for documentation on what basic blocks are at a high level.
 17,374 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct BasicBlockData<'tcx> {
      .               /// List of statements in this block.
    224 ( 0.00%)      pub statements: Vec<Statement<'tcx>>,
      .           
      .               /// Terminator for this block.
      .               ///
      .               /// N.B., this should generally ONLY be `None` during construction.
      .               /// Therefore, you should generally access it via the
      .               /// `terminator()` or `terminator_mut()` methods. The only
      .               /// exception is that certain passes, such as `simplify_cfg`, swap
      .               /// out the terminator temporarily with `None` while they continue
-- line 1235 ----------------------------------------
-- line 1239 ----------------------------------------
      .               /// If true, this block lies on an unwind path. This is used
      .               /// during codegen where distinct kinds of basic blocks may be
      .               /// generated (particularly for MSVC cleanup). Unwind blocks must
      .               /// only branch to other unwind blocks.
      .               pub is_cleanup: bool,
      .           }
      .           
      .           /// Information about an assertion failure.
     81 ( 0.00%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]
      .           pub enum AssertKind<O> {
      .               BoundsCheck { len: O, index: O },
      .               Overflow(BinOp, O, O),
      .               OverflowNeg(O),
      .               DivisionByZero(O),
      .               RemainderByZero(O),
      .               ResumedAfterReturn(GeneratorKind),
      .               ResumedAfterPanic(GeneratorKind),
-- line 1255 ----------------------------------------
-- line 1287 ----------------------------------------
      .           pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;
      .           
      .           pub type Successors<'a> =
      .               iter::Chain<option::IntoIter<&'a BasicBlock>, slice::Iter<'a, BasicBlock>>;
      .           pub type SuccessorsMut<'a> =
      .               iter::Chain<option::IntoIter<&'a mut BasicBlock>, slice::IterMut<'a, BasicBlock>>;
      .           
      .           impl<'tcx> BasicBlockData<'tcx> {
    271 ( 0.00%)      pub fn new(terminator: Option<Terminator<'tcx>>) -> BasicBlockData<'tcx> {
  4,336 ( 0.00%)          BasicBlockData { statements: vec![], terminator, is_cleanup: false }
    271 ( 0.00%)      }
      .           
      .               /// Accessor for terminator.
      .               ///
      .               /// Terminator may not be None after construction of the basic block is complete. This accessor
      .               /// provides a convenience way to reach the terminator.
      .               #[inline]
      .               pub fn terminator(&self) -> &Terminator<'tcx> {
  6,024 ( 0.00%)          self.terminator.as_ref().expect("invalid terminator state")
      .               }
      .           
      .               #[inline]
      .               pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> {
  2,874 ( 0.00%)          self.terminator.as_mut().expect("invalid terminator state")
      .               }
      .           
      .               pub fn retain_statements<F>(&mut self, mut f: F)
      .               where
      .                   F: FnMut(&mut Statement<'_>) -> bool,
      .               {
      .                   for s in &mut self.statements {
      .                       if !f(s) {
      .                           s.make_nop();
      .                       }
      .                   }
      .               }
      .           
  2,520 ( 0.00%)      pub fn expand_statements<F, I>(&mut self, mut f: F)
      .               where
      .                   F: FnMut(&mut Statement<'tcx>) -> Option<I>,
      .                   I: iter::TrustedLen<Item = Statement<'tcx>>,
      .               {
      .                   // Gather all the iterators we'll need to splice in, and their positions.
      .                   let mut splices: Vec<(usize, I)> = vec![];
      .                   let mut extra_stmts = 0;
      .                   for (i, s) in self.statements.iter_mut().enumerate() {
-- line 1332 ----------------------------------------
-- line 1348 ----------------------------------------
      .                   }
      .           
      .                   // Splice in the new statements, from the end of the block.
      .                   // FIXME(eddyb) This could be more efficient with a "gap buffer"
      .                   // where a range of elements ("gap") is left uninitialized, with
      .                   // splicing adding new elements to the end of that gap and moving
      .                   // existing elements from before the gap to the end of the gap.
      .                   // For now, this is safe code, emulating a gap but initializing it.
    754 ( 0.00%)          let mut gap = self.statements.len()..self.statements.len() + extra_stmts;
    756 ( 0.00%)          self.statements.resize(
      .                       gap.end,
  1,008 ( 0.00%)              Statement { source_info: SourceInfo::outermost(DUMMY_SP), kind: StatementKind::Nop },
      .                   );
      .                   for (splice_start, new_stmts) in splices.into_iter().rev() {
      .                       let splice_end = splice_start + new_stmts.size_hint().0;
      .                       while gap.end > splice_end {
      .                           gap.start -= 1;
      .                           gap.end -= 1;
      .                           self.statements.swap(gap.start, gap.end);
      .                       }
      .                       self.statements.splice(splice_start..splice_end, new_stmts);
      .                       gap.end = splice_start;
      .                   }
  2,016 ( 0.00%)      }
      .           
      .               pub fn visitable(&self, index: usize) -> &dyn MirVisitable<'tcx> {
      .                   if index < self.statements.len() { &self.statements[index] } else { &self.terminator }
      .               }
      .           }
      .           
      .           impl<O> AssertKind<O> {
      .               /// Getting a description does not require `O` to be printable, and does not
      .               /// require allocation.
      .               /// The caller is expected to handle `BoundsCheck` separately.
      3 ( 0.00%)      pub fn description(&self) -> &'static str {
      .                   use AssertKind::*;
     30 ( 0.00%)          match self {
      .                       Overflow(BinOp::Add, _, _) => "attempt to add with overflow",
      .                       Overflow(BinOp::Sub, _, _) => "attempt to subtract with overflow",
      .                       Overflow(BinOp::Mul, _, _) => "attempt to multiply with overflow",
      .                       Overflow(BinOp::Div, _, _) => "attempt to divide with overflow",
      .                       Overflow(BinOp::Rem, _, _) => "attempt to calculate the remainder with overflow",
      .                       OverflowNeg(_) => "attempt to negate with overflow",
      .                       Overflow(BinOp::Shr, _, _) => "attempt to shift right with overflow",
      .                       Overflow(BinOp::Shl, _, _) => "attempt to shift left with overflow",
-- line 1392 ----------------------------------------
-- line 1394 ----------------------------------------
      .                       DivisionByZero(_) => "attempt to divide by zero",
      .                       RemainderByZero(_) => "attempt to calculate the remainder with a divisor of zero",
      .                       ResumedAfterReturn(GeneratorKind::Gen) => "generator resumed after completion",
      .                       ResumedAfterReturn(GeneratorKind::Async(_)) => "`async fn` resumed after completion",
      .                       ResumedAfterPanic(GeneratorKind::Gen) => "generator resumed after panicking",
      .                       ResumedAfterPanic(GeneratorKind::Async(_)) => "`async fn` resumed after panicking",
      .                       BoundsCheck { .. } => bug!("Unexpected AssertKind"),
      .                   }
      6 ( 0.00%)      }
      .           
      .               /// Format the message arguments for the `assert(cond, msg..)` terminator in MIR printing.
      .               pub fn fmt_assert_args<W: Write>(&self, f: &mut W) -> fmt::Result
      .               where
      .                   O: Debug,
      .               {
      .                   use AssertKind::*;
      .                   match self {
-- line 1410 ----------------------------------------
-- line 1501 ----------------------------------------
      .                       _ => write!(f, "{}", self.description()),
      .                   }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Statements
      .           
 18,932 ( 0.00%)  #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct Statement<'tcx> {
      .               pub source_info: SourceInfo,
      .               pub kind: StatementKind<'tcx>,
      .           }
      .           
      .           // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Statement<'_>, 32);
      .           
      .           impl Statement<'_> {
      .               /// Changes a statement to a nop. This is both faster than deleting instructions and avoids
      .               /// invalidating statement indices in `Location`s.
      4 ( 0.00%)      pub fn make_nop(&mut self) {
      4 ( 0.00%)          self.kind = StatementKind::Nop
      4 ( 0.00%)      }
      .           
      .               /// Changes a statement to a nop and returns the original statement.
      .               #[must_use = "If you don't need the statement, use `make_nop` instead"]
      .               pub fn replace_nop(&mut self) -> Self {
      .                   Statement {
      .                       source_info: self.source_info,
      .                       kind: mem::replace(&mut self.kind, StatementKind::Nop),
      .                   }
      .               }
      .           }
      .           
 24,903 ( 0.00%)  #[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]
      .           pub enum StatementKind<'tcx> {
      .               /// Write the RHS Rvalue to the LHS Place.
    668 ( 0.00%)      Assign(Box<(Place<'tcx>, Rvalue<'tcx>)>),
      .           
      .               /// This represents all the reading that a pattern match may do
      .               /// (e.g., inspecting constants and discriminant values), and the
      .               /// kind of pattern it comes from. This is in order to adapt potential
      .               /// error messages to these specific patterns.
      .               ///
      .               /// Note that this also is emitted for regular `let` bindings to ensure that locals that are
      .               /// never accessed still get some sanity checks for, e.g., `let x: ! = ..;`
      2 ( 0.00%)      FakeRead(Box<(FakeReadCause, Place<'tcx>)>),
      .           
      .               /// Write the discriminant for a variant to the enum Place.
      .               SetDiscriminant { place: Box<Place<'tcx>>, variant_index: VariantIdx },
      .           
      .               /// Start a live range for the storage of the local.
    822 ( 0.00%)      StorageLive(Local),
      .           
      .               /// End the current live range for the storage of the local.
    822 ( 0.00%)      StorageDead(Local),
      .           
      .               /// Retag references in the given place, ensuring they got fresh tags. This is
      .               /// part of the Stacked Borrows model. These statements are currently only interpreted
      .               /// by miri and only generated when "-Z mir-emit-retag" is passed.
      .               /// See <https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/>
      .               /// for more details.
      .               Retag(RetagKind, Box<Place<'tcx>>),
      .           
-- line 1565 ----------------------------------------
-- line 1732 ----------------------------------------
      .               pub count: Operand<'tcx>,
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Places
      .           
      .           /// A path to a value; something that can be evaluated without
      .           /// changing or disturbing program state.
  2,025 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, HashStable)]
      .           pub struct Place<'tcx> {
    133 ( 0.00%)      pub local: Local,
      .           
      .               /// projection out of a place (access a field, deref a pointer, etc)
      .               pub projection: &'tcx List<PlaceElem<'tcx>>,
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Place<'_>, 16);
      .           
  2,738 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
  1,830 ( 0.00%)  #[derive(TyEncodable, TyDecodable, HashStable)]
      .           pub enum ProjectionElem<V, T> {
      .               Deref,
     46 ( 0.00%)      Field(Field, T),
      .               Index(V),
      .           
      .               /// These indices are generated by slice patterns. Easiest to explain
      .               /// by example:
      .               ///
      .               /// ```
      .               /// [X, _, .._, _, _] => { offset: 0, min_length: 4, from_end: false },
      .               /// [_, X, .._, _, _] => { offset: 1, min_length: 4, from_end: false },
-- line 1763 ----------------------------------------
-- line 1788 ----------------------------------------
      .                   from_end: bool,
      .               },
      .           
      .               /// "Downcast" to a variant of an ADT. Currently, we only introduce
      .               /// this for ADTs with more than one variant. It may be better to
      .               /// just introduce it always, or always for enums.
      .               ///
      .               /// The included Symbol is the name of the variant, used for printing MIR.
      2 ( 0.00%)      Downcast(Option<Symbol>, VariantIdx),
      .           }
      .           
      .           impl<V, T> ProjectionElem<V, T> {
      .               /// Returns `true` if the target of this projection may refer to a different region of memory
      .               /// than the base.
      .               fn is_indirect(&self) -> bool {
      .                   match self {
      .                       Self::Deref => true,
-- line 1804 ----------------------------------------
-- line 1838 ----------------------------------------
      .               pub struct Field {
      .                   derive [HashStable]
      .                   DEBUG_FORMAT = "field[{}]"
      .               }
      .           }
      .           
      .           #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
      .           pub struct PlaceRef<'tcx> {
    352 ( 0.00%)      pub local: Local,
     88 ( 0.00%)      pub projection: &'tcx [PlaceElem<'tcx>],
      .           }
      .           
      .           impl<'tcx> Place<'tcx> {
      .               // FIXME change this to a const fn by also making List::empty a const fn.
      .               pub fn return_place() -> Place<'tcx> {
      .                   Place { local: RETURN_PLACE, projection: List::empty() }
    339 ( 0.00%)      }
      .           
      .               /// Returns `true` if this `Place` contains a `Deref` projection.
      .               ///
      .               /// If `Place::is_indirect` returns false, the caller knows that the `Place` refers to the
      .               /// same region of memory as its base.
      .               pub fn is_indirect(&self) -> bool {
    194 ( 0.00%)          self.projection.iter().any(|elem| elem.is_indirect())
    194 ( 0.00%)      }
      .           
      .               /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or
      .               /// a single deref of a local.
      .               #[inline(always)]
      .               pub fn local_or_deref_local(&self) -> Option<Local> {
      .                   self.as_ref().local_or_deref_local()
      .               }
      .           
-- line 1870 ----------------------------------------
-- line 1872 ----------------------------------------
      .               /// projections, return `Some(_X)`.
      .               #[inline(always)]
      .               pub fn as_local(&self) -> Option<Local> {
      .                   self.as_ref().as_local()
      .               }
      .           
      .               #[inline]
      .               pub fn as_ref(&self) -> PlaceRef<'tcx> {
 15,956 ( 0.00%)          PlaceRef { local: self.local, projection: &self.projection }
      .               }
      .           
      .               /// Iterate over the projections in evaluation order, i.e., the first element is the base with
      .               /// its projection and then subsequently more projections are added.
      .               /// As a concrete example, given the place a.b.c, this would yield:
      .               /// - (a, .b)
      .               /// - (a.b, .c)
      .               ///
-- line 1888 ----------------------------------------
-- line 1896 ----------------------------------------
      .                       (base, proj)
      .                   })
      .               }
      .           }
      .           
      .           impl From<Local> for Place<'_> {
      .               fn from(local: Local) -> Self {
      .                   Place { local, projection: List::empty() }
  8,412 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> PlaceRef<'tcx> {
      .               /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or
      .               /// a single deref of a local.
      .               pub fn local_or_deref_local(&self) -> Option<Local> {
      .                   match *self {
      .                       PlaceRef { local, projection: [] }
-- line 1912 ----------------------------------------
-- line 1915 ----------------------------------------
      .                   }
      .               }
      .           
      .               /// If this place represents a local variable like `_X` with no
      .               /// projections, return `Some(_X)`.
      .               #[inline]
      .               pub fn as_local(&self) -> Option<Local> {
      .                   match *self {
  4,343 ( 0.00%)              PlaceRef { local, projection: [] } => Some(local),
      .                       _ => None,
      .                   }
      .               }
      .           
      .               #[inline]
      .               pub fn last_projection(&self) -> Option<(PlaceRef<'tcx>, PlaceElem<'tcx>)> {
  5,202 ( 0.00%)          if let &[ref proj_base @ .., elem] = self.projection {
     54 ( 0.00%)              Some((PlaceRef { local: self.local, projection: proj_base }, elem))
      .                   } else {
      .                       None
      .                   }
      .               }
      .           }
      .           
      .           impl Debug for Place<'_> {
      .               fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {
-- line 1939 ----------------------------------------
-- line 2024 ----------------------------------------
      .                   trace!(?data);
      .                   match &data.local_data {
      .                       ClearCrossCrate::Set(data) => Some(data.lint_root),
      .                       ClearCrossCrate::Clear => None,
      .                   }
      .               }
      .           }
      .           
  3,147 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct SourceScopeData<'tcx> {
     28 ( 0.00%)      pub span: Span,
      .               pub parent_scope: Option<SourceScope>,
      .           
      .               /// Whether this scope is the root of a scope tree of another body,
      .               /// inlined into this body by the MIR inliner.
      .               /// `ty::Instance` is the callee, and the `Span` is the call site.
      .               pub inlined: Option<(ty::Instance<'tcx>, Span)>,
      .           
      .               /// Nearest (transitive) parent scope (if any) which is inlined.
      .               /// This is an optimization over walking up `parent_scope`
      .               /// until a scope with `inlined: Some(...)` is found.
     84 ( 0.00%)      pub inlined_parent_scope: Option<SourceScope>,
      .           
      .               /// Crate-local information for this source scope, that can't (and
      .               /// needn't) be tracked across crates.
      .               pub local_data: ClearCrossCrate<SourceScopeLocalData>,
      .           }
      .           
    632 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
      .           pub struct SourceScopeLocalData {
      .               /// An `HirId` with lint levels equivalent to this scope's lint levels.
      .               pub lint_root: hir::HirId,
      .               /// The unsafe block that contains this node.
      .               pub safety: Safety,
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           // Operands
      .           
      .           /// These are values that can appear inside an rvalue. They are intentionally
      .           /// limited to prevent rvalues from being nested in one another.
772,761 ( 0.08%)  #[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum Operand<'tcx> {
      .               /// Copy: The value must be available for use afterwards.
      .               ///
      .               /// This implies that the type of the place must be `Copy`; this is true
      .               /// by construction during build, but also checked by the MIR type checker.
  1,099 ( 0.00%)      Copy(Place<'tcx>),
      .           
      .               /// Move: The value (including old borrows of it) will not be used again.
      .               ///
      .               /// Safe for values of all types (modulo future developments towards `?Move`).
      .               /// Correct usage patterns are enforced by the borrow checker for safe code.
      .               /// `Copy` may be converted to `Move` to enable "last-use" optimizations.
  1,622 ( 0.00%)      Move(Place<'tcx>),
      .           
      .               /// Synthesizes a constant value.
 29,549 ( 0.00%)      Constant(Box<Constant<'tcx>>),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Operand<'_>, 24);
      .           
      .           impl<'tcx> Debug for Operand<'tcx> {
      .               fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {
      .                   use self::Operand::*;
-- line 2089 ----------------------------------------
-- line 2109 ----------------------------------------
      .                   Operand::Constant(Box::new(Constant {
      .                       span,
      .                       user_ty: None,
      .                       literal: ConstantKind::Ty(ty::Const::zero_sized(tcx, ty)),
      .                   }))
      .               }
      .           
      .               pub fn is_move(&self) -> bool {
     88 ( 0.00%)          matches!(self, Operand::Move(..))
     44 ( 0.00%)      }
      .           
      .               /// Convenience helper to make a literal-like constant from a given scalar value.
      .               /// Since this is used to synthesize MIR, assumes `user_ty` is None.
      .               pub fn const_from_scalar(
      .                   tcx: TyCtxt<'tcx>,
      .                   ty: Ty<'tcx>,
      .                   val: Scalar,
      .                   span: Span,
-- line 2126 ----------------------------------------
-- line 2149 ----------------------------------------
      .                       Operand::Copy(_) | Operand::Constant(_) => self.clone(),
      .                       Operand::Move(place) => Operand::Copy(place),
      .                   }
      .               }
      .           
      .               /// Returns the `Place` that is the target of this `Operand`, or `None` if this `Operand` is a
      .               /// constant.
      .               pub fn place(&self) -> Option<Place<'tcx>> {
  1,000 ( 0.00%)          match self {
      .                       Operand::Copy(place) | Operand::Move(place) => Some(*place),
      .                       Operand::Constant(_) => None,
      .                   }
    250 ( 0.00%)      }
      .           
      .               /// Returns the `Constant` that is the target of this `Operand`, or `None` if this `Operand` is a
      .               /// place.
      .               pub fn constant(&self) -> Option<&Constant<'tcx>> {
      .                   match self {
      .                       Operand::Constant(x) => Some(&**x),
      .                       Operand::Copy(_) | Operand::Move(_) => None,
      .                   }
      .               }
      .           }
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           /// Rvalues
      .           
 13,640 ( 0.00%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
      .           pub enum Rvalue<'tcx> {
      .               /// x (either a move or copy, depending on type of x)
      .               Use(Operand<'tcx>),
      .           
      .               /// [x; 32]
      .               Repeat(Operand<'tcx>, &'tcx ty::Const<'tcx>),
      .           
      .               /// &x or &mut x
    788 ( 0.00%)      Ref(Region<'tcx>, BorrowKind, Place<'tcx>),
      .           
      .               /// Accessing a thread local static. This is inherently a runtime operation, even if llvm
      .               /// treats it as an access to a static. This `Rvalue` yields a reference to the thread local
      .               /// static.
      .               ThreadLocalRef(DefId),
      .           
      .               /// Create a raw pointer to the given place
      .               /// Can be generated by raw address of expressions (`&raw const x`),
      .               /// or when casting a reference to a raw pointer.
      .               AddressOf(Mutability, Place<'tcx>),
      .           
      .               /// length of a `[X]` or `[X;n]` value
      .               Len(Place<'tcx>),
      .           
    168 ( 0.00%)      Cast(CastKind, Operand<'tcx>, Ty<'tcx>),
      .           
    156 ( 0.00%)      BinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),
     12 ( 0.00%)      CheckedBinaryOp(BinOp, Box<(Operand<'tcx>, Operand<'tcx>)>),
      .           
      .               NullaryOp(NullOp, Ty<'tcx>),
      .               UnaryOp(UnOp, Operand<'tcx>),
      .           
      .               /// Read the discriminant of an ADT.
      .               ///
      .               /// Undefined (i.e., no effort is made to make it defined, but there’s no reason why it cannot
      .               /// be defined to return, say, a 0) if ADT is not an enum.
      .               Discriminant(Place<'tcx>),
      .           
      .               /// Creates an aggregate value, like a tuple or struct. This is
      .               /// only needed because we want to distinguish `dest = Foo { x:
      .               /// ..., y: ... }` from `dest.x = ...; dest.y = ...;` in the case
      .               /// that `Foo` has a destructor. These rvalues can be optimized
      .               /// away after type-checking and before lowering.
    112 ( 0.00%)      Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),
      .           
      .               /// Transmutes a `*mut u8` into shallow-initialized `Box<T>`.
      .               ///
      .               /// This is different a normal transmute because dataflow analysis will treat the box
      .               /// as initialized but its content as uninitialized.
      .               ShallowInitBox(Operand<'tcx>, Ty<'tcx>),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(Rvalue<'_>, 40);
      .           
    340 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum CastKind {
      .               Misc,
      .               Pointer(PointerCast),
      .           }
      .           
    628 ( 0.00%)  #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum AggregateKind<'tcx> {
      .               /// The type is of the element
     84 ( 0.00%)      Array(Ty<'tcx>),
      .               Tuple,
      .           
      .               /// The second field is the variant index. It's equal to 0 for struct
      .               /// and union expressions. The fourth field is
      .               /// active field number and is present only for union expressions
      .               /// -- e.g., for a union expression `SomeUnion { c: .. }`, the
      .               /// active field index would identity the field `c`
      .               Adt(DefId, VariantIdx, SubstsRef<'tcx>, Option<UserTypeAnnotationIndex>, Option<usize>),
-- line 2248 ----------------------------------------
-- line 2249 ----------------------------------------
      .           
      .               Closure(DefId, SubstsRef<'tcx>),
      .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
      .           }
      .           
      .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
      .           static_assert_size!(AggregateKind<'_>, 48);
      .           
    178 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, PartialOrd, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub enum BinOp {
      .               /// The `+` operator (addition)
      .               Add,
      .               /// The `-` operator (subtraction)
      .               Sub,
      .               /// The `*` operator (multiplication)
      .               Mul,
      .               /// The `/` operator (division)
-- line 2265 ----------------------------------------
-- line 2485 ----------------------------------------
      .           
      .           ///////////////////////////////////////////////////////////////////////////
      .           /// Constants
      .           ///
      .           /// Two constants are equal if they are the same constant. Note that
      .           /// this does not necessarily mean that they are `==` in Rust. In
      .           /// particular, one must be wary of `NaN`!
      .           
118,723 ( 0.01%)  #[derive(Clone, Copy, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]
      .           pub struct Constant<'tcx> {
      .               pub span: Span,
      .           
      .               /// Optional user-given type: for something like
      .               /// `collect::<Vec<_>>`, this would be present and would
      .               /// indicate that `Vec<_>` was explicitly specified.
      .               ///
      .               /// Needed for NLL to impose user-given type constraints.
      .               pub user_ty: Option<UserTypeAnnotationIndex>,
      .           
      .               pub literal: ConstantKind<'tcx>,
      .           }
      .           
353,394 ( 0.04%)  #[derive(Clone, Copy, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable, Debug)]
      .           #[derive(Lift)]
      .           pub enum ConstantKind<'tcx> {
      .               /// This constant came from the type system
    524 ( 0.00%)      Ty(&'tcx ty::Const<'tcx>),
      .               /// This constant cannot go back into the type system, as it represents
      .               /// something the type system cannot handle (e.g. pointers).
      .               Val(interpret::ConstValue<'tcx>, Ty<'tcx>),
      .           }
      .           
      .           impl<'tcx> Constant<'tcx> {
584,890 ( 0.06%)      pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {
584,890 ( 0.06%)          match self.literal.const_for_ty()?.val.try_to_scalar() {
      .                       Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {
      .                           GlobalAlloc::Static(def_id) => {
    168 ( 0.00%)                      assert!(!tcx.is_thread_local_static(def_id));
      .                               Some(def_id)
      .                           }
      .                           _ => None,
      .                       },
      .                       _ => None,
      .                   }
935,824 ( 0.10%)      }
      .               #[inline]
      .               pub fn ty(&self) -> Ty<'tcx> {
     75 ( 0.00%)          self.literal.ty()
      .               }
      .           }
      .           
      .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {
      .               #[inline]
      .               fn from(ct: &'tcx ty::Const<'tcx>) -> Self {
      .                   Self::Ty(ct)
      .               }
      .           }
      .           
      .           impl<'tcx> ConstantKind<'tcx> {
      .               /// Returns `None` if the constant is not trivially safe for use in the type system.
      .               pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {
526,330 ( 0.06%)          match self {
      .                       ConstantKind::Ty(c) => Some(c),
      .                       ConstantKind::Val(..) => None,
      .                   }
146,187 ( 0.02%)      }
      .           
      .               pub fn ty(&self) -> Ty<'tcx> {
411,290 ( 0.04%)          match self {
      .                       ConstantKind::Ty(c) => c.ty,
      .                       ConstantKind::Val(_, ty) => ty,
      .                   }
205,645 ( 0.02%)      }
      .           
      .               #[inline]
      .               pub fn try_to_value(self) -> Option<interpret::ConstValue<'tcx>> {
      .                   match self {
      .                       ConstantKind::Ty(c) => c.val.try_to_value(),
      .                       ConstantKind::Val(val, _) => Some(val),
      .                   }
      .               }
-- line 2565 ----------------------------------------
-- line 2652 ----------------------------------------
      .           /// inferred region `'1`). The second will lead to the constraint `w:
      .           /// &'static str`.
      .           #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]
      .           pub struct UserTypeProjections {
      .               pub contents: Vec<(UserTypeProjection, Span)>,
      .           }
      .           
      .           impl<'tcx> UserTypeProjections {
     13 ( 0.00%)      pub fn none() -> Self {
     13 ( 0.00%)          UserTypeProjections { contents: vec![] }
     13 ( 0.00%)      }
      .           
      .               pub fn is_empty(&self) -> bool {
      .                   self.contents.is_empty()
      .               }
      .           
      .               pub fn projections_and_spans(
      .                   &self,
      .               ) -> impl Iterator<Item = &(UserTypeProjection, Span)> + ExactSizeIterator {
-- line 2670 ----------------------------------------
-- line 2870 ----------------------------------------
      .               fn start_node(&self) -> Self::Node {
      .                   START_BLOCK
      .               }
      .           }
      .           
      .           impl<'tcx> graph::WithSuccessors for Body<'tcx> {
      .               #[inline]
      .               fn successors(&self, node: Self::Node) -> <Self as GraphSuccessors<'_>>::Iter {
    749 ( 0.00%)          self.basic_blocks[node].terminator().successors().cloned()
      .               }
      .           }
      .           
      .           impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {
      .               type Item = BasicBlock;
      .               type Iter = iter::Cloned<Successors<'b>>;
      .           }
      .           
-- line 2886 ----------------------------------------
-- line 2897 ----------------------------------------
      .           }
      .           
      .           /// `Location` represents the position of the start of the statement; or, if
      .           /// `statement_index` equals the number of statements, then the start of the
      .           /// terminator.
      .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Ord, PartialOrd, HashStable)]
      .           pub struct Location {
      .               /// The block that the location is within.
     72 ( 0.00%)      pub block: BasicBlock,
      .           
     36 ( 0.00%)      pub statement_index: usize,
      .           }
      .           
      .           impl fmt::Debug for Location {
      .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
      .                   write!(fmt, "{:?}[{}]", self.block, self.statement_index)
      .               }
      .           }
      .           
-- line 2915 ----------------------------------------
-- line 2952 ----------------------------------------
      .                           return true;
      .                       }
      .                   }
      .           
      .                   false
      .               }
      .           
      .               pub fn dominates(&self, other: Location, dominators: &Dominators<BasicBlock>) -> bool {
    252 ( 0.00%)          if self.block == other.block {
    184 ( 0.00%)              self.statement_index <= other.statement_index
      .                   } else {
    136 ( 0.00%)              dominators.is_dominated_by(other.block, self.block)
      .                   }
     92 ( 0.00%)      }
      .           }

878,457 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
        .           use rustc_span::def_id::DefId;
        .           use rustc_span::Span;
        .           use rustc_target::abi::VariantIdx;
        .           
        .           impl<'tcx> Cx<'tcx> {
        .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
        .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
    1,092 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
        .               }
        .           
       56 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
   87,891 ( 0.01%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
      112 ( 0.00%)      }
        .           
  265,617 ( 0.03%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
  206,591 ( 0.02%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
        .                   let expr_scope =
        .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
        .           
        .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
        .           
  118,052 ( 0.01%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
        .           
  177,078 ( 0.02%)          let adjustment_span = match self.adjustment_span {
      225 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
        .                       _ => None,
        .                   };
        .           
        .                   // Now apply adjustments, if any.
  118,052 ( 0.01%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
        .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
      124 ( 0.00%)              let span = expr.span;
      623 ( 0.00%)              expr =
    1,602 ( 0.00%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
        .                   }
        .           
        .                   // Next, wrap this up in the expr's scope.
  383,669 ( 0.04%)          expr = Expr {
        .                       temp_lifetime,
   29,482 ( 0.00%)              ty: expr.ty,
   29,513 ( 0.00%)              span: hir_expr.span,
        .                       kind: ExprKind::Scope {
        .                           region_scope: expr_scope,
  531,234 ( 0.06%)                  value: self.thir.exprs.push(expr),
   59,026 ( 0.01%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
        .                       },
        .                   };
        .           
        .                   // Finally, create a destruction scope, if any.
   88,539 ( 0.01%)          if let Some(region_scope) =
   59,026 ( 0.01%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
        .                   {
    1,188 ( 0.00%)              expr = Expr {
        .                           temp_lifetime,
        .                           ty: expr.ty,
       99 ( 0.00%)                  span: hir_expr.span,
        .                           kind: ExprKind::Scope {
        .                               region_scope,
    1,386 ( 0.00%)                      value: self.thir.exprs.push(expr),
        .                               lint_level: LintLevel::Inherited,
        .                           },
        .                       };
        .                   }
        .           
        .                   // OK, all done!
  649,286 ( 0.07%)          self.thir.exprs.push(expr)
  265,617 ( 0.03%)      }
        .           
        .               fn apply_adjustment(
        .                   &mut self,
        .                   hir_expr: &'tcx hir::Expr<'tcx>,
        .                   mut expr: Expr<'tcx>,
        .                   adjustment: &Adjustment<'tcx>,
        .                   mut span: Span,
        .               ) -> Expr<'tcx> {
      178 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
        .           
        .                   // Adjust the span from the block, to the last expression of the
        .                   // block. This is a better span when returning a mutable reference
        .                   // with too short a lifetime. The error message will use the span
        .                   // from the assignment to the return place, which should only point
        .                   // at the returned value, not the entire function body.
        .                   //
        .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
        .                   //      x
        .                   //   // ^ error message points at this expression.
        .                   // }
        .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
      116 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
        .                           if let Some(last_expr) = body.expr {
        .                               span = self.thir[last_expr].span;
        .                               expr.span = span;
        .                           }
        .                       }
        .                   };
        .           
      829 ( 0.00%)          let kind = match adjustment.kind {
        .                       Adjust::Pointer(PointerCast::Unsize) => {
        .                           adjust_span(&mut expr);
      476 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
        .                       }
        .                       Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
        .                       Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
        .                       Adjust::Deref(None) => {
        .                           adjust_span(&mut expr);
      510 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
        .                       }
        .                       Adjust::Deref(Some(deref)) => {
        .                           // We don't need to do call adjust_span here since
        .                           // deref coercions always start with a built-in deref.
        .                           let call = deref.method_call(self.tcx(), expr.ty);
        .           
        .                           expr = Expr {
        .                               temp_lifetime,
-- line 132 ----------------------------------------
-- line 139 ----------------------------------------
        .                                   arg: self.thir.exprs.push(expr),
        .                               },
        .                           };
        .           
        .                           let expr = Box::new([self.thir.exprs.push(expr)]);
        .           
        .                           self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
        .                       }
      124 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
        .                           borrow_kind: m.to_borrow_kind(),
      434 ( 0.00%)                  arg: self.thir.exprs.push(expr),
        .                       },
        .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
        .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
        .                       }
        .                   };
        .           
    1,691 ( 0.00%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
        .               }
        .           
  295,130 ( 0.03%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
  118,052 ( 0.01%)          let expr_ty = self.typeck_results().expr_ty(expr);
   29,513 ( 0.00%)          let expr_span = expr.span;
  147,565 ( 0.02%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
        .           
  177,136 ( 0.02%)          let kind = match expr.kind {
        .                       // Here comes the interesting stuff:
       93 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
        .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
      217 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
        .                           // When we apply adjustments to the receiver, use the span of
        .                           // the overall method call for better diagnostics. args[0]
        .                           // is guaranteed to exist, since a method call always has a receiver.
      124 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
        .                           tracing::info!("Using method span: {:?}", expr.span);
       31 ( 0.00%)                  let args = self.mirror_exprs(args);
       62 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
      217 ( 0.00%)                  ExprKind::Call {
       31 ( 0.00%)                      ty: expr.ty,
      434 ( 0.00%)                      fun: self.thir.exprs.push(expr),
        .                               args,
        .                               from_hir_call: true,
        .                               fn_span,
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Call(ref fun, ref args) => {
      112 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               // The callee is something implementing Fn, FnMut, or FnOnce.
        .                               // Find the actual method implementation being called and
        .                               // build the appropriate UFCS call expression with the
        .                               // callee-object as expr parameter.
        .           
        .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
        .           
        .                               let method = self.method_callee(expr, fun.span, None);
-- line 194 ----------------------------------------
-- line 206 ----------------------------------------
        .                                   ty: method.ty,
        .                                   fun: self.thir.exprs.push(method),
        .                                   args: Box::new([self.mirror_expr(fun), tupled_args]),
        .                                   from_hir_call: true,
        .                                   fn_span: expr.span,
        .                               }
        .                           } else {
        .                               let adt_data =
      140 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
        .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
       56 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
        .                                           Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
        .                                               Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
        .                                           }
        .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
        .                                           _ => None,
        .                                       })
        .                                   } else {
        .                                       None
        .                                   };
       56 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
        .                                   let substs = self.typeck_results().node_substs(fun.hir_id);
        .                                   let user_provided_types = self.typeck_results().user_provided_types();
        .                                   let user_ty =
        .                                       user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
        .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
        .                                               *did = adt_def.did;
        .                                           }
        .                                           u_ty
-- line 234 ----------------------------------------
-- line 247 ----------------------------------------
        .                                       adt_def,
        .                                       substs,
        .                                       variant_index: index,
        .                                       fields: field_refs,
        .                                       user_ty,
        .                                       base: None,
        .                                   }))
        .                               } else {
      112 ( 0.00%)                          ExprKind::Call {
      168 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
       28 ( 0.00%)                              fun: self.mirror_expr(fun),
      112 ( 0.00%)                              args: self.mirror_exprs(args),
        .                                       from_hir_call: true,
       28 ( 0.00%)                              fn_span: expr.span,
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
      145 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
        .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
        .                       }
        .           
      504 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
        .           
        .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
        .                           ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
        .                       }
        .           
        .                       hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
        .                           if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
-- line 282 ----------------------------------------
-- line 286 ----------------------------------------
        .                               ExprKind::AssignOp {
        .                                   op: bin_op(op.node),
        .                                   lhs: self.mirror_expr(lhs),
        .                                   rhs: self.mirror_expr(rhs),
        .                               }
        .                           }
        .                       }
        .           
   29,220 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  116,880 ( 0.01%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
        .                           user_ty: None,
        .                           const_id: None,
        .                       },
        .           
       22 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
       88 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
        .                               // FIXME overflow
       88 ( 0.00%)                      match op.node {
        .                                   hir::BinOpKind::And => ExprKind::LogicalOp {
        .                                       op: LogicalOp::And,
        .                                       lhs: self.mirror_expr(lhs),
        .                                       rhs: self.mirror_expr(rhs),
        .                                   },
       88 ( 0.00%)                          hir::BinOpKind::Or => ExprKind::LogicalOp {
        .                                       op: LogicalOp::Or,
       22 ( 0.00%)                              lhs: self.mirror_expr(lhs),
       22 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
        .                                   _ => {
        .                                       let op = bin_op(op.node);
        .                                       ExprKind::Binary {
        .                                           op,
        .                                           lhs: self.mirror_expr(lhs),
        .                                           rhs: self.mirror_expr(rhs),
        .                                       }
-- line 324 ----------------------------------------
-- line 454 ----------------------------------------
        .                                   })
        .                                   .collect(),
        .                               None => Vec::new(),
        .                           };
        .           
        .                           ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
        .                       }
        .           
      117 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
      468 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
      468 ( 0.00%)                  self.convert_path_expr(expr, res)
        .                       }
        .           
        .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
        .                           template: asm.template,
        .                           operands: asm
        .                               .operands
        .                               .iter()
        .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 609 ----------------------------------------
        .                           if_then_scope: region::Scope {
        .                               id: then.hir_id.local_id,
        .                               data: region::ScopeData::IfThen,
        .                           },
        .                           cond: self.mirror_expr(cond),
        .                           then: self.mirror_expr(then),
        .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
        .                       },
       10 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
        2 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
       41 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
        .                       },
        .                       hir::ExprKind::Loop(ref body, ..) => {
        .                           let block_ty = self.typeck_results().node_type(body.hir_id);
        .                           let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
        .                           let block = self.mirror_block(body);
        .                           let body = self.thir.exprs.push(Expr {
        .                               ty: block_ty,
        .                               temp_lifetime,
-- line 627 ----------------------------------------
-- line 761 ----------------------------------------
        .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
        .                           }
        .                       }
        .                       hir::ExprKind::DropTemps(ref source) => {
        .                           ExprKind::Use { source: self.mirror_expr(source) }
        .                       }
        .                       hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
        .                       hir::ExprKind::Array(ref fields) => {
      140 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
        .                       }
        .                       hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
        .           
        .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
        .                       hir::ExprKind::Err => unreachable!(),
        .                   };
        .           
1,003,442 ( 0.11%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
  236,104 ( 0.02%)      }
        .           
      531 ( 0.00%)      fn user_substs_applied_to_res(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   res: Res,
        .               ) -> Option<ty::CanonicalUserType<'tcx>> {
        .                   debug!("user_substs_applied_to_res: res={:?}", res);
      354 ( 0.00%)          let user_provided_type = match res {
        .                       // A reference to something callable -- e.g., a fn, method, or
        .                       // a tuple-struct or tuple-variant. This has the type of a
        .                       // `Fn` but with the user-given substitutions.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::Def(DefKind::Const, _)
        .                       | Res::Def(DefKind::AssocConst, _) => {
      413 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
        .                       }
        .           
        .                       // A unit struct/variant which is used as a value (e.g.,
        .                       // `None`). This has the type of the enum/struct that defines
        .                       // this variant -- but with the substitutions given by the
        .                       // user.
        .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
        .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
        .           
        .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
        .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
        .           
        .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
        .                   };
        .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
        .                   user_provided_type
      354 ( 0.00%)      }
        .           
      403 ( 0.00%)      fn method_callee(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   span: Span,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .               ) -> Expr<'tcx> {
      186 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      248 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
        .                       Some((def_id, substs)) => (def_id, substs, None),
        .                       None => {
        .                           let (kind, def_id) =
      279 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
        .                                   span_bug!(expr.span, "no type-dependent def for method callee")
        .                               });
      465 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
        .                           debug!("method_callee: user_ty={:?}", user_ty);
      465 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
        .                       }
        .                   };
        .                   let ty = self.tcx().mk_fn_def(def_id, substs);
      403 ( 0.00%)          Expr {
        .                       temp_lifetime,
        .                       ty,
        .                       span,
        .                       kind: ExprKind::Literal {
        .                           literal: ty::Const::zero_sized(self.tcx(), ty),
      186 ( 0.00%)                  user_ty,
        .                           const_id: None,
        .                       },
        .                   }
      248 ( 0.00%)      }
        .           
      117 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
      104 ( 0.00%)          let arm = Arm {
       39 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
        .                       guard: arm.guard.as_ref().map(|g| match g {
        .                           hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
        .                           hir::Guard::IfLet(ref pat, ref e) => {
        .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
        .                           }
        .                       }),
       13 ( 0.00%)              body: self.mirror_expr(arm.body),
       26 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
        .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
       13 ( 0.00%)              span: arm.span,
        .                   };
      195 ( 0.00%)          self.thir.arms.push(arm)
      117 ( 0.00%)      }
        .           
        .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
      819 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
      819 ( 0.00%)          match res {
        .                       // A regular function, constructor function or a constant.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::SelfCtor(..) => {
      280 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
       28 ( 0.00%)                  ExprKind::Literal {
        .                               literal: ty::Const::zero_sized(
       56 ( 0.00%)                          self.tcx,
       84 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
        .                               ),
      224 ( 0.00%)                      user_ty,
        .                               const_id: None,
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::ConstParam, def_id) => {
        .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
        .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
        .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 932 ----------------------------------------
        .                                   base: None,
        .                               })),
        .                               _ => bug!("unexpected ty: {:?}", ty),
        .                           }
        .                       }
        .           
        .                       // We encode uses of statics as a `*&STATIC` where the `&STATIC` part is
        .                       // a constant reference (or constant raw pointer for `static mut`) in MIR
       56 ( 0.00%)              Res::Def(DefKind::Static, id) => {
      168 ( 0.00%)                  let ty = self.tcx.static_ptr_ty(id);
      168 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      168 ( 0.00%)                  let kind = if self.tcx.is_thread_local_static(id) {
        .                               ExprKind::ThreadLocalRef(id)
        .                           } else {
      112 ( 0.00%)                      let ptr = self.tcx.create_static_alloc(id);
        .                               ExprKind::StaticRef {
        .                                   literal: ty::Const::from_scalar(
        .                                       self.tcx,
        .                                       Scalar::from_pointer(ptr.into(), &self.tcx),
        .                                       ty,
        .                                   ),
        .                                   def_id: id,
        .                               }
        .                           };
       84 ( 0.00%)                  ExprKind::Deref {
      308 ( 0.00%)                      arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
        .                           }
        .                       }
        .           
      488 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
        .           
        .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
        .                   }
        .               }
        .           
      610 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
        .                   // We want upvars here not captures.
        .                   // Captures will be handled in MIR.
        .                   let is_upvar = self
        .                       .tcx
        .                       .upvars_mentioned(self.body_owner)
        .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
        .           
        .                   debug!(
        .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
        .                       var_hir_id, is_upvar, self.body_owner
        .                   );
        .           
        .                   if is_upvar {
        .                       ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
        .                   } else {
      183 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
        .                   }
      488 ( 0.00%)      }
        .           
        .               fn overloaded_operator(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   args: Box<[ExprId]>,
        .               ) -> ExprKind<'tcx> {
        .                   let fun = self.method_callee(expr, expr.span, None);
        .                   let fun = self.thir.exprs.push(fun);
-- line 993 ----------------------------------------
-- line 1135 ----------------------------------------
        .           
        .           trait ToBorrowKind {
        .               fn to_borrow_kind(&self) -> BorrowKind;
        .           }
        .           
        .           impl ToBorrowKind for AutoBorrowMutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
        .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
      217 ( 0.00%)          match *self {
        .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
        .                           allow_two_phase_borrow: match allow_two_phase_borrow {
        .                               AllowTwoPhase::Yes => true,
        .                               AllowTwoPhase::No => false,
        .                           },
        .                       },
        .                       AutoBorrowMutability::Not => BorrowKind::Shared,
        .                   }
-- line 1151 ----------------------------------------

  441,881 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
1,003,709 ( 0.11%)      pub fn rustc_entry(&mut self, key: K) -> RustcEntry<'_, K, V, A> {
        .                   let hash = make_insert_hash(&self.hash_builder, &key);
      137 ( 0.00%)          if let Some(elem) = self.table.find(hash, |q| q.0.eq(&key)) {
  183,050 ( 0.02%)              RustcEntry::Occupied(RustcOccupiedEntry {
      981 ( 0.00%)                  key: Some(key),
        .                           elem,
        .                           table: &mut self.table,
        .                       })
        .                   } else {
        .                       // Ideally we would put this in VacantEntry::insert, but Entry is not
        .                       // generic over the BuildHasher and adding a generic parameter would be
        .                       // a breaking change.
        .                       self.reserve(1);
        .           
   97,777 ( 0.01%)              RustcEntry::Vacant(RustcVacantEntry {
        .                           hash,
  183,408 ( 0.02%)                  key,
        .                           table: &mut self.table,
        .                       })
        .                   }
  805,365 ( 0.08%)      }
        .           }
        .           
        .           /// A view into a single entry in a map, which may either be vacant or occupied.
        .           ///
        .           /// This `enum` is constructed from the [`entry`] method on [`HashMap`].
        .           ///
        .           /// [`HashMap`]: struct.HashMap.html
        .           /// [`entry`]: struct.HashMap.html#method.rustc_entry
-- line 62 ----------------------------------------
-- line 405 ----------------------------------------
        .               /// if let RustcEntry::Occupied(o) = map.rustc_entry("poneyland") {
        .               ///     *o.into_mut() += 10;
        .               /// }
        .               ///
        .               /// assert_eq!(map["poneyland"], 22);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn into_mut(self) -> &'a mut V {
      769 ( 0.00%)          unsafe { &mut self.elem.as_mut().1 }
        .               }
        .           
        .               /// Sets the value of the entry, and returns the entry's old value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 421 ----------------------------------------
-- line 568 ----------------------------------------
        .               /// let mut map: HashMap<&str, u32> = HashMap::new();
        .               ///
        .               /// if let RustcEntry::Vacant(o) = map.rustc_entry("poneyland") {
        .               ///     o.insert(37);
        .               /// }
        .               /// assert_eq!(map["poneyland"], 37);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      330 ( 0.00%)      pub fn insert(self, value: V) -> &'a mut V {
        .                   unsafe {
    2,343 ( 0.00%)              let bucket = self.table.insert_no_grow(self.hash, (self.key, value));
      414 ( 0.00%)              &mut bucket.as_mut().1
        .                   }
      417 ( 0.00%)      }
        .           
        .               /// Sets the value of the entry with the RustcVacantEntry's key,
        .               /// and returns a RustcOccupiedEntry.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 589 ----------------------------------------

  293,350 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/rustc_entry.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs
--------------------------------------------------------------------------------
Ir               

-- line 19 ----------------------------------------
      .               InvalidFloatSuffix,
      .               NonDecimalFloat(u32),
      .               IntTooLarge,
      .           }
      .           
      .           impl LitKind {
      .               /// Converts literal token into a semantic literal.
      .               fn from_lit_token(lit: token::Lit) -> Result<LitKind, LitError> {
 29,247 ( 0.00%)          let token::Lit { kind, symbol, suffix } = lit;
 29,247 ( 0.00%)          if suffix.is_some() && !kind.may_have_suffix() {
      .                       return Err(LitError::InvalidSuffix);
      .                   }
      .           
146,363 ( 0.02%)          Ok(match kind {
      .                       token::Bool => {
     44 ( 0.00%)                  assert!(symbol.is_bool_lit());
      .                           LitKind::Bool(symbol == kw::True)
      .                       }
      .                       token::Byte => {
      .                           return unescape_byte(symbol.as_str())
      .                               .map(LitKind::Byte)
      .                               .map_err(|_| LitError::LexerError);
      .                       }
      .                       token::Char => {
116,924 ( 0.01%)                  return unescape_char(symbol.as_str())
      .                               .map(LitKind::Char)
      .                               .map_err(|_| LitError::LexerError);
      .                       }
      .           
      .                       // There are some valid suffixes for integer and float literals,
      .                       // so all the handling is done internally.
      .                       token::Integer => return integer_lit(symbol, suffix),
      .                       token::Float => return float_lit(symbol, suffix),
      .           
      .                       token::Str => {
      .                           // If there are no characters requiring special treatment we can
      .                           // reuse the symbol from the token. Otherwise, we must generate a
      .                           // new symbol because the string in the LitKind is different to the
      .                           // string in the token.
     15 ( 0.00%)                  let s = symbol.as_str();
      .                           let symbol =
      .                               if s.contains(&['\\', '\r']) {
      .                                   let mut buf = String::with_capacity(s.len());
      .                                   let mut error = Ok(());
      .                                   unescape_literal(&s, Mode::Str, &mut |_, unescaped_char| {
      .                                       match unescaped_char {
      .                                           Ok(c) => buf.push(c),
      .                                           Err(err) => {
-- line 66 ----------------------------------------
-- line 68 ----------------------------------------
      .                                                   error = Err(LitError::LexerError);
      .                                               }
      .                                           }
      .                                       }
      .                                   });
      .                                   error?;
      .                                   Symbol::intern(&buf)
      .                               } else {
     10 ( 0.00%)                          symbol
      .                               };
     25 ( 0.00%)                  LitKind::Str(symbol, ast::StrStyle::Cooked)
      .                       }
      .                       token::StrRaw(n) => {
      .                           // Ditto.
      .                           let s = symbol.as_str();
      .                           let symbol =
      .                               if s.contains('\r') {
      .                                   let mut buf = String::with_capacity(s.len());
      .                                   let mut error = Ok(());
-- line 86 ----------------------------------------
-- line 138 ----------------------------------------
      .                           } else {
      .                               symbol.to_string().into_bytes()
      .                           };
      .           
      .                           LitKind::ByteStr(bytes.into())
      .                       }
      .                       token::Err => LitKind::Err(symbol),
      .                   })
 29,231 ( 0.00%)      }
      .           
      .               /// Attempts to recover a token from semantic literal.
      .               /// This function is used when the original token doesn't exist (e.g. the literal is created
      .               /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).
      .               pub fn to_lit_token(&self) -> token::Lit {
      .                   let (kind, symbol, suffix) = match *self {
      .                       LitKind::Str(symbol, ast::StrStyle::Cooked) => {
      .                           // Don't re-intern unless the escaped string is different.
-- line 154 ----------------------------------------
-- line 198 ----------------------------------------
      .                   };
      .           
      .                   token::Lit::new(kind, symbol, suffix)
      .               }
      .           }
      .           
      .           impl Lit {
      .               /// Converts literal token into an AST literal.
409,458 ( 0.04%)      pub fn from_lit_token(token: token::Lit, span: Span) -> Result<Lit, LitError> {
175,482 ( 0.02%)          Ok(Lit { token, kind: LitKind::from_lit_token(token)?, span })
263,223 ( 0.03%)      }
      .           
      .               /// Converts arbitrary token into an AST literal.
      .               ///
      .               /// Keep this in sync with `Token::can_begin_literal_or_bool` excluding unary negation.
263,277 ( 0.03%)      pub fn from_token(token: &Token) -> Result<Lit, LitError> {
 87,878 ( 0.01%)          let lit = match token.uninterpolate().kind {
    135 ( 0.00%)              token::Ident(name, false) if name.is_bool_lit() => {
      .                           token::Lit::new(token::Bool, name, None)
      .                       }
116,944 ( 0.01%)              token::Literal(lit) => lit,
      .                       token::Interpolated(ref nt) => {
      .                           if let token::NtExpr(expr) | token::NtLiteral(expr) = &**nt {
      .                               if let ast::ExprKind::Lit(lit) = &expr.kind {
      .                                   return Ok(lit.clone());
      .                               }
      .                           }
      .                           return Err(LitError::NotLiteral);
      .                       }
      .                       _ => return Err(LitError::NotLiteral),
      .                   };
      .           
 87,741 ( 0.01%)          Lit::from_lit_token(lit, token.span)
263,277 ( 0.03%)      }
      .           
      .               /// Attempts to recover an AST literal from semantic literal.
      .               /// This function is used when the original token doesn't exist (e.g. the literal is created
      .               /// by an AST-based macro) or unavailable (e.g. from HIR pretty-printing).
      .               pub fn from_lit_kind(kind: LitKind, span: Span) -> Lit {
      .                   Lit { token: kind.to_lit_token(), kind, span }
      .               }
      .           
-- line 239 ----------------------------------------

116,962 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/util/literal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir               

-- line 27 ----------------------------------------
      .           impl CacheEntry {
      .               #[inline]
      .               fn update(
      .                   &mut self,
      .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
      .                   pos: BytePos,
      .                   time_stamp: usize,
      .               ) {
  4,463 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    122 ( 0.00%)              self.file = file;
    184 ( 0.00%)              self.file_index = file_idx;
      .                   }
      .           
  4,075 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
      .                   let line_bounds = self.file.line_bounds(line_index);
  8,354 ( 0.00%)          self.line_number = line_index + 1;
 12,398 ( 0.00%)          self.line = line_bounds;
      .                   self.touch(time_stamp);
      .               }
      .           
      .               #[inline]
      .               fn touch(&mut self, time_stamp: usize) {
118,631 ( 0.01%)          self.time_stamp = time_stamp;
      .               }
      .           }
      .           
      .           #[derive(Clone)]
      .           pub struct CachingSourceMapView<'sm> {
      .               source_map: &'sm SourceMap,
      .               line_cache: [CacheEntry; 3],
      .               time_stamp: usize,
      .           }
      .           
      .           impl<'sm> CachingSourceMapView<'sm> {
    262 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
      .                   let files = source_map.files();
    131 ( 0.00%)          let first_file = files[0].clone();
      .                   let entry = CacheEntry {
      .                       time_stamp: 0,
      .                       line_number: 0,
      .                       line: BytePos(0)..BytePos(0),
      .                       file: first_file,
      .                       file_index: 0,
      .                   };
      .           
    655 ( 0.00%)          CachingSourceMapView {
      .                       source_map,
    917 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
      .                       time_stamp: 0,
      .                   }
    524 ( 0.00%)      }
      .           
      .               pub fn byte_pos_to_line_and_col(
      .                   &mut self,
      .                   pos: BytePos,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
      .                   self.time_stamp += 1;
      .           
      .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
      .                   };
      .           
      .                   let cache_entry = &mut self.line_cache[oldest];
      .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
      .           
      .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
      .               }
      .           
429,758 ( 0.05%)      pub fn span_data_to_lines_and_cols(
      .                   &mut self,
      .                   span_data: &SpanData,
      .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
245,576 ( 0.03%)          self.time_stamp += 1;
      .           
      .                   // Check if lo and hi are in the cached lines.
 61,394 ( 0.01%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
 61,394 ( 0.01%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
      .           
114,474 ( 0.01%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
      .                       // Cache hit for span lo and hi. Check if they belong to the same file.
      .                       let result = {
114,474 ( 0.01%)                  let lo = &self.line_cache[lo_cache_idx as usize];
      .                           let hi = &self.line_cache[hi_cache_idx as usize];
      .           
343,422 ( 0.04%)                  if lo.file_index != hi.file_index {
      .                               return None;
      .                           }
      .           
      .                           (
114,474 ( 0.01%)                      lo.file.clone(),
      .                               lo.line_number,
      .                               span_data.lo - lo.line.start,
 57,237 ( 0.01%)                      hi.line_number,
      .                               span_data.hi - hi.line.start,
      .                           )
      .                       };
      .           
 57,237 ( 0.01%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
 57,237 ( 0.01%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
      .           
228,948 ( 0.02%)              return Some(result);
      .                   }
      .           
      .                   // No cache hit or cache hit for only one of span lo and hi.
  8,314 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
      .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
      .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
      .                   } else {
      .                       self.oldest_cache_entry_index()
      .                   };
      .           
      .                   // If the entry doesn't point to the correct file, get the new file and index.
      .                   // Return early if the file containing beginning of span doesn't contain end of span.
 33,256 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    410 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    492 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
      .                           return None;
      .                       }
      .           
    328 ( 0.00%)              Some(new_file_and_idx)
      .                   } else {
      .                       let file = &self.line_cache[oldest].file;
 12,225 ( 0.00%)              if !file_contains(&file, span_data.hi) {
      .                           return None;
      .                       }
      .           
 12,225 ( 0.00%)              None
      .                   };
      .           
      .                   // Update the cache entries.
 20,785 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
      .                       // Oldest cache entry is for span_data.lo line.
      .                       (-1, -1) => {
      .                           let lo = &mut self.line_cache[oldest];
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .           
 12,012 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
      .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
      .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
      .                               let hi = &mut self.line_cache[next_oldest];
      .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      .                               (oldest, next_oldest)
      .                           } else {
      .                               (oldest, oldest)
      .                           }
-- line 190 ----------------------------------------
-- line 195 ----------------------------------------
      .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
      .                           let hi = &mut self.line_cache[hi_cache_idx as usize];
      .                           hi.touch(self.time_stamp);
      .                           (oldest, hi_cache_idx as usize)
      .                       }
      .                       // Oldest cache entry is for span_data.hi line.
      .                       (_, -1) => {
      .                           let hi = &mut self.line_cache[oldest];
    153 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
    306 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    612 ( 0.00%)                  lo.touch(self.time_stamp);
      .                           (lo_cache_idx as usize, oldest)
      .                       }
      .                       _ => {
      .                           panic!();
      .                       }
      .                   };
      .           
      .                   let lo = &self.line_cache[lo_idx];
      .                   let hi = &self.line_cache[hi_idx];
      .           
      .                   // Span lo and hi may equal line end when last line doesn't
      .                   // end in newline, hence the inclusive upper bounds below.
  8,314 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
  4,157 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
  8,314 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
  4,157 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
 20,785 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
 12,471 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
 12,471 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
      .           
 12,471 ( 0.00%)          Some((
  4,157 ( 0.00%)              lo.file.clone(),
      .                       lo.line_number,
      .                       span_data.lo - lo.line.start,
  4,157 ( 0.00%)              hi.line_number,
      .                       span_data.hi - hi.line.start,
      .                   ))
552,546 ( 0.06%)      }
      .           
      .               fn cache_entry_index(&self, pos: BytePos) -> isize {
      .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
750,775 ( 0.08%)              if cache_entry.line.contains(&pos) {
      .                           return idx as isize;
      .                       }
      .                   }
      .           
      .                   -1
      .               }
      .           
      .               fn oldest_cache_entry_index(&self) -> usize {
      .                   let mut oldest = 0;
      .           
      .                   for idx in 1..self.line_cache.len() {
 24,024 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
      .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
      .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
      .           
      .                   for idx in 0..self.line_cache.len() {
  1,079 ( 0.00%)              if idx != avoid_idx
    433 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
      .                       {
      .                           oldest = idx;
      .                       }
      .                   }
      .           
      .                   oldest
      .               }
      .           
    410 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
     82 ( 0.00%)          if !self.source_map.files().is_empty() {
    164 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
      .                       let file = &self.source_map.files()[file_idx];
      .           
    656 ( 0.00%)              if file_contains(file, pos) {
      .                           return Some((file.clone(), file_idx));
      .                       }
      .                   }
      .           
      .                   None
    410 ( 0.00%)      }
      .           }
      .           
      .           #[inline]
      .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
      .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
      .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
      .               // purposes of converting a byte position to a line and column number, we can't come up with a
      .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

682,273 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs
--------------------------------------------------------------------------------
Ir               

-- line 159 ----------------------------------------
      .           /// // byte 100 is outside the string
      .           /// // &s[3 .. 100];
      .           /// ```
      .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
      .           unsafe impl SliceIndex<str> for ops::Range<usize> {
      .               type Output = str;
      .               #[inline]
      .               fn get(self, slice: &str) -> Option<&Self::Output> {
842,134 ( 0.09%)          if self.start <= self.end
      .                       && slice.is_char_boundary(self.start)
      .                       && slice.is_char_boundary(self.end)
      .                   {
      .                       // SAFETY: just checked that `start` and `end` are on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       // We also checked char boundaries, so this is valid UTF-8.
      .                       Some(unsafe { &*self.get_unchecked(slice) })
      .                   } else {
-- line 175 ----------------------------------------
-- line 190 ----------------------------------------
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
      .                   let slice = slice as *const [u8];
      .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
      .                   // which satisfies all the conditions for `add`.
      .                   let ptr = unsafe { slice.as_ptr().add(self.start) };
425,299 ( 0.04%)          let len = self.end - self.start;
      .                   ptr::slice_from_raw_parts(ptr, len) as *const str
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   let slice = slice as *mut [u8];
      .                   // SAFETY: see comments for `get_unchecked`.
      .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
      .                   let len = self.end - self.start;
-- line 206 ----------------------------------------
-- line 316 ----------------------------------------
      .           ///
      .           /// Panics if `begin` does not point to the starting byte offset of
      .           /// a character (as defined by `is_char_boundary`), or if `begin > len`.
      .           #[stable(feature = "str_checked_slicing", since = "1.20.0")]
      .           unsafe impl SliceIndex<str> for ops::RangeFrom<usize> {
      .               type Output = str;
      .               #[inline]
      .               fn get(self, slice: &str) -> Option<&Self::Output> {
  1,972 ( 0.00%)          if slice.is_char_boundary(self.start) {
      .                       // SAFETY: just checked that `start` is on a char boundary,
      .                       // and we are passing in a safe reference, so the return value will also be one.
      .                       Some(unsafe { &*self.get_unchecked(slice) })
      .                   } else {
      .                       None
      .                   }
      .               }
      .               #[inline]
-- line 332 ----------------------------------------
-- line 340 ----------------------------------------
      .                   }
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked(self, slice: *const str) -> *const Self::Output {
      .                   let slice = slice as *const [u8];
      .                   // SAFETY: the caller guarantees that `self` is in bounds of `slice`
      .                   // which satisfies all the conditions for `add`.
      .                   let ptr = unsafe { slice.as_ptr().add(self.start) };
  3,914 ( 0.00%)          let len = slice.len() - self.start;
      .                   ptr::slice_from_raw_parts(ptr, len) as *const str
      .               }
      .               #[inline]
      .               unsafe fn get_unchecked_mut(self, slice: *mut str) -> *mut Self::Output {
      .                   let slice = slice as *mut [u8];
      .                   // SAFETY: identical to `get_unchecked`.
      .                   let ptr = unsafe { slice.as_mut_ptr().add(self.start) };
      .                   let len = slice.len() - self.start;
-- line 356 ----------------------------------------

 63,349 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/traits.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/pointer.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           // Pointer arithmetic
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           pub trait PointerArithmetic: HasDataLayout {
        .               // These are not supposed to be overridden.
        .           
        .               #[inline(always)]
        .               fn pointer_size(&self) -> Size {
      354 ( 0.00%)          self.data_layout().pointer_size
        .               }
        .           
        .               #[inline]
        .               fn machine_usize_max(&self) -> u64 {
        .                   self.pointer_size().unsigned_int_max().try_into().unwrap()
        .               }
        .           
        .               #[inline]
-- line 26 ----------------------------------------
-- line 49 ----------------------------------------
        .               }
        .           
        .               /// Helper function: truncate given value-"overflowed flag" pair to pointer size and
        .               /// update "overflowed flag" if there was an overflow.
        .               /// This should be called by all the other methods before returning!
        .               #[inline]
        .               fn truncate_to_ptr(&self, (val, over): (u64, bool)) -> (u64, bool) {
        .                   let val = u128::from(val);
1,053,747 ( 0.11%)          let max_ptr_plus_1 = 1u128 << self.pointer_size().bits();
       45 ( 0.00%)          (u64::try_from(val % max_ptr_plus_1).unwrap(), over || val >= max_ptr_plus_1)
        .               }
        .           
        .               #[inline]
        .               fn overflowing_offset(&self, val: u64, i: u64) -> (u64, bool) {
        .                   // We do not need to check if i fits in a machine usize. If it doesn't,
        .                   // either the wrapping_add will wrap or res will not fit in a pointer.
        .                   let res = val.overflowing_add(i);
        .                   self.truncate_to_ptr(res)
-- line 66 ----------------------------------------
-- line 78 ----------------------------------------
        .                       let (val, over) = self.truncate_to_ptr(res);
        .                       (val, over || i < self.machine_isize_min())
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn offset<'tcx>(&self, val: u64, i: u64) -> InterpResult<'tcx, u64> {
        .                   let (res, over) = self.overflowing_offset(val, i);
  585,388 ( 0.06%)          if over { throw_ub!(PointerArithOverflow) } else { Ok(res) }
        .               }
        .           
        .               #[inline]
        .               fn signed_offset<'tcx>(&self, val: u64, i: i64) -> InterpResult<'tcx, u64> {
        .                   let (res, over) = self.overflowing_signed_offset(val, i);
        .                   if over { throw_ub!(PointerArithOverflow) } else { Ok(res) }
        .               }
        .           }
-- line 94 ----------------------------------------
-- line 137 ----------------------------------------
        .                   }
        .                   // Print offset only if it is non-zero.
        .                   if ptr.offset.bytes() > 0 {
        .                       write!(f, "+0x{:x}", ptr.offset.bytes())?;
        .                   }
        .                   Ok(())
        .               }
        .           
       56 ( 0.00%)      fn get_alloc_id(self) -> AllocId {
        .                   self
       56 ( 0.00%)      }
        .           }
        .           
        .           /// Represents a pointer in the Miri engine.
        .           ///
        .           /// Pointers are "tagged" with provenance information; typically the `AllocId` they belong to.
       28 ( 0.00%)  #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, TyEncodable, TyDecodable, Hash)]
        .           #[derive(HashStable)]
        .           pub struct Pointer<Tag = AllocId> {
        .               pub(super) offset: Size, // kept private to avoid accidental misinterpretation (meaning depends on `Tag` type)
        2 ( 0.00%)      pub provenance: Tag,
        .           }
        .           
        .           static_assert_size!(Pointer, 16);
        .           
        .           // We want the `Debug` output to be readable as it is used by `derive(Debug)` for
        .           // all the Miri types.
        .           impl<Tag: Provenance> fmt::Debug for Pointer<Tag> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-- line 165 ----------------------------------------
-- line 189 ----------------------------------------
        .               fn from(ptr: Pointer<Tag>) -> Self {
        .                   let (tag, offset) = ptr.into_parts();
        .                   Pointer::new(Some(tag), offset)
        .               }
        .           }
        .           
        .           impl<Tag> Pointer<Option<Tag>> {
        .               pub fn into_pointer_or_addr(self) -> Result<Pointer<Tag>, Size> {
   88,205 ( 0.01%)          match self.provenance {
        .                       Some(tag) => Ok(Pointer::new(tag, self.offset)),
        .                       None => Err(self.offset),
        .                   }
        .               }
        .           }
        .           
        .           impl<Tag> Pointer<Option<Tag>> {
        .               #[inline(always)]
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .           
        .               pub fn map_provenance(self, f: impl FnOnce(Tag) -> Tag) -> Self {
        .                   Pointer { provenance: f(self.provenance), ..self }
        .               }
        .           
        .               #[inline]
        .               pub fn offset(self, i: Size, cx: &impl HasDataLayout) -> InterpResult<'tcx, Self> {
        .                   Ok(Pointer {
   29,254 ( 0.00%)              offset: Size::from_bytes(cx.data_layout().offset(self.offset.bytes(), i.bytes())?),
        .                       ..self
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn overflowing_offset(self, i: Size, cx: &impl HasDataLayout) -> (Self, bool) {
        .                   let (res, over) = cx.data_layout().overflowing_offset(self.offset.bytes(), i.bytes());
        .                   let ptr = Pointer { offset: Size::from_bytes(res), ..self };
-- line 240 ----------------------------------------

  497,818 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/interpret/pointer.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 26 ----------------------------------------
      .           pub struct UnmatchedBrace {
      .               pub expected_delim: token::DelimToken,
      .               pub found_delim: Option<token::DelimToken>,
      .               pub found_span: Span,
      .               pub unclosed_span: Option<Span>,
      .               pub candidate_span: Option<Span>,
      .           }
      .           
     28 ( 0.00%)  crate fn parse_token_trees<'a>(
      .               sess: &'a ParseSess,
      .               src: &'a str,
      .               start_pos: BytePos,
      .               override_span: Option<Span>,
      .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
      .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
      .                   .into_token_trees()
     18 ( 0.00%)  }
      .           
      .           struct StringReader<'a> {
      .               sess: &'a ParseSess,
      .               /// Initial position, read-only.
      .               start_pos: BytePos,
      .               /// The absolute offset within the source_map of the current character.
      .               pos: BytePos,
      .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
      .               end_src_index: usize,
      .               /// Source text to tokenize.
      .               src: &'a str,
      .               override_span: Option<Span>,
      .           }
      .           
      .           impl<'a> StringReader<'a> {
      .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
 61,079 ( 0.01%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
      .               }
      .           
      .               /// Returns the next token, and info about preceding whitespace, if any.
422,940 ( 0.04%)      fn next_token(&mut self) -> (Spacing, Token) {
      .                   let mut spacing = Spacing::Joint;
      .           
      .                   // Skip `#!` at the start of the file
120,840 ( 0.01%)          let start_src_index = self.src_index(self.pos);
181,260 ( 0.02%)          let text: &str = &self.src[start_src_index..self.end_src_index];
      .                   let is_beginning_of_file = self.pos == self.start_pos;
 60,420 ( 0.01%)          if is_beginning_of_file {
      8 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
      .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
      .                           spacing = Spacing::Alone;
      .                       }
      .                   }
      .           
      .                   // Skip trivial (whitespace & comments) tokens
      .                   loop {
120,686 ( 0.01%)              let start_src_index = self.src_index(self.pos);
271,659 ( 0.03%)              let text: &str = &self.src[start_src_index..self.end_src_index];
      .           
 90,553 ( 0.01%)              if text.is_empty() {
      .                           let span = self.mk_sp(self.pos, self.pos);
     10 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
      .                       }
      .           
271,653 ( 0.03%)              let token = rustc_lexer::first_token(text);
      .           
181,102 ( 0.02%)              let start = self.pos;
 90,551 ( 0.01%)              self.pos = self.pos + BytePos::from_usize(token.len);
      .           
      .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
      .           
724,768 ( 0.08%)              match self.cook_lexer_token(token.kind, start) {
483,344 ( 0.05%)                  Some(kind) => {
      .                               let span = self.mk_sp(start, self.pos);
362,508 ( 0.04%)                      return (spacing, Token::new(kind, span));
      .                           }
      .                           None => spacing = Spacing::Alone,
      .                       }
      .                   }
543,780 ( 0.06%)      }
      .           
      .               /// Report a fatal lexical error with a given span.
      .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
      .                   self.sess.span_diagnostic.span_fatal(sp, m)
      .               }
      .           
      .               /// Report a lexical error with a given span.
      .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
      .               ) -> DiagnosticBuilder<'a> {
      .                   self.sess
      .                       .span_diagnostic
      .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
      .               }
      .           
      .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
      .               /// complain about it.
     84 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
      .                   // Opening delimiter of the length 2 is not included into the comment text.
      .                   let content_start = start + BytePos(2);
      .                   let content = self.str_from(content_start);
      .                   if contains_text_flow_control_chars(content) {
      .                       let span = self.mk_sp(start, self.pos);
      .                       self.sess.buffer_lint_with_diagnostic(
      .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
      .                           span,
      .                           ast::CRATE_NODE_ID,
      .                           "unicode codepoint changing visible direction of text present in comment",
      .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
      .                       );
      .                   }
     96 ( 0.00%)      }
      .           
      .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
      .               /// `rustc_ast::TokenKind`. This turns strings into interned
      .               /// symbols and runs additional validation.
      .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
452,755 ( 0.05%)          Some(match token {
    102 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
      .                           // Skip non-doc comments
    474 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
      .                               doc_style
      .                           } else {
      .                               self.lint_unicode_text_flow(start);
      .                               return None;
      .                           };
      .           
      .                           // Opening delimiter of the length 3 is not included into the symbol.
      .                           let content_start = start + BytePos(3);
      .                           let content = self.str_from(content_start);
    450 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
      .                           if !terminated {
      .                               let msg = match doc_style {
      .                                   Some(_) => "unterminated block doc-comment",
      .                                   None => "unterminated block comment",
      .                               };
      .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
      .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
      .                           let content = self.str_from_to(content_start, content_end);
      .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
      .                       }
      .                       rustc_lexer::TokenKind::Whitespace => return None,
      .                       rustc_lexer::TokenKind::Ident
      .                       | rustc_lexer::TokenKind::RawIdent
      .                       | rustc_lexer::TokenKind::UnknownPrefix => {
  2,628 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
  3,285 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
      .                           let mut ident_start = start;
  1,314 ( 0.00%)                  if is_raw_ident {
      .                               ident_start = ident_start + BytePos(2);
      .                           }
  1,971 ( 0.00%)                  if is_unknown_prefix {
      .                               self.report_unknown_prefix(start);
      .                           }
  3,285 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
      .                           let span = self.mk_sp(start, self.pos);
  2,628 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
  1,314 ( 0.00%)                  if is_raw_ident {
      .                               if !sym.can_be_raw() {
      .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
      .                               }
      .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
      .                           }
  4,599 ( 0.00%)                  token::Ident(sym, is_raw_ident)
      .                       }
      .                       rustc_lexer::TokenKind::InvalidIdent
      .                           // Do not recover an identifier with emoji if the codepoint is a confusable
      .                           // with a recoverable substitution token, like `➖`.
      .                           if UNICODE_ARRAY
      .                               .iter()
      .                               .find(|&&(c, _, _)| {
      .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
      .                               })
      .                               .is_none() =>
      .                       {
      .                           let sym = nfc_normalize(self.str_from(start));
      .                           let span = self.mk_sp(start, self.pos);
      .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
      .                           token::Ident(sym, false)
      .                       }
467,888 ( 0.05%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
      .                           let suffix_start = start + BytePos(suffix_start as u32);
      .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
 87,729 ( 0.01%)                  let suffix = if suffix_start < self.pos {
      .                               let string = self.str_from(suffix_start);
      .                               if string == "_" {
      .                                   self.sess
      .                                       .span_diagnostic
      .                                       .struct_span_warn(
      .                                           self.mk_sp(suffix_start, self.pos),
      .                                           "underscore literal suffix is not allowed",
      .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
      .                                       .emit();
      .                                   None
      .                               } else {
      .                                   Some(Symbol::intern(string))
      .                               }
      .                           } else {
      .                               None
      .                           };
233,944 ( 0.02%)                  token::Literal(token::Lit { kind, symbol, suffix })
      .                       }
     58 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
      .                           // Include the leading `'` in the real identifier, for macro
      .                           // expansion purposes. See #12512 for the gory details of why
      .                           // this is necessary.
      .                           let lifetime_name = self.str_from(start);
     29 ( 0.00%)                  if starts_with_number {
      .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
      .                           }
     87 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
    116 ( 0.00%)                  token::Lifetime(ident)
      .                       }
      .                       rustc_lexer::TokenKind::Semi => token::Semi,
      .                       rustc_lexer::TokenKind::Comma => token::Comma,
      .                       rustc_lexer::TokenKind::Dot => token::Dot,
      .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
      .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
      .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
      .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
      .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
      .                           }
      .                           err.emit();
      .                           token?
      .                       }
      .                   })
      .               }
      .           
  1,080 ( 0.00%)      fn cook_doc_comment(
      .                   &self,
      .                   content_start: BytePos,
      .                   content: &str,
      .                   comment_kind: CommentKind,
      .                   doc_style: DocStyle,
      .               ) -> TokenKind {
     90 ( 0.00%)          if content.contains('\r') {
      .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
      .                           self.err_span_(
      .                               content_start + BytePos(idx as u32),
      .                               content_start + BytePos(idx as u32 + 1),
      .                               match comment_kind {
      .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
      .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
      .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   let attr_style = match doc_style {
      .                       DocStyle::Outer => AttrStyle::Outer,
      .                       DocStyle::Inner => AttrStyle::Inner,
      .                   };
      .           
    270 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
  1,350 ( 0.00%)      }
      .           
      .               fn cook_lexer_literal(
      .                   &self,
      .                   start: BytePos,
      .                   suffix_start: BytePos,
      .                   kind: rustc_lexer::LiteralKind,
      .               ) -> (token::LitKind, Symbol) {
      .                   // prefix means `"` or `br"` or `r###"`, ...
      .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
 29,243 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
 29,243 ( 0.00%)                  if !terminated {
      .                               self.sess.span_diagnostic.span_fatal_with_code(
      .                                   self.mk_sp(start, suffix_start),
      .                                   "unterminated character literal",
      .                                   error_code!(E0762),
      .                               )
      .                           }
      .                           (token::Char, Mode::Char, 1, 1) // ' '
      .                       }
-- line 377 ----------------------------------------
-- line 452 ----------------------------------------
      .                           }
      .           
      .                           let id = self.symbol_from_to(start, suffix_start);
      .                           return (token::Float, id);
      .                       }
      .                   };
      .                   let content_start = start + BytePos(prefix_len);
      .                   let content_end = suffix_start - BytePos(postfix_len);
 87,729 ( 0.01%)          let id = self.symbol_from_to(content_start, content_end);
      .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
      .                   (lit_kind, id)
      .               }
      .           
      .               #[inline]
      .               fn src_index(&self, pos: BytePos) -> usize {
      .                   (pos - self.start_pos).to_usize()
      .               }
      .           
      .               /// Slice of the source text from `start` up to but excluding `self.pos`,
      .               /// meaning the slice does not include the character `self.ch`.
      .               fn str_from(&self, start: BytePos) -> &str {
  4,948 ( 0.00%)          self.str_from_to(start, self.pos)
      .               }
      .           
      .               /// As symbol_from, with an explicit endpoint.
      .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
      .                   debug!("taking an ident from {:?} to {:?}", start, end);
350,916 ( 0.04%)          Symbol::intern(self.str_from_to(start, end))
      .               }
      .           
      .               /// Slice of the source text spanning from `start` up to but excluding `end`.
 59,274 ( 0.01%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
      .                   &self.src[self.src_index(start)..self.src_index(end)]
237,096 ( 0.02%)      }
      .           
      .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
      .                   match opt_err {
      .                       Some(RawStrError::InvalidStarter { bad_char }) => {
      .                           self.report_non_started_raw_string(start, bad_char)
      .                       }
      .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
      .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
      .               fn validate_literal_escape(
      .                   &self,
      .                   mode: Mode,
      .                   content_start: BytePos,
      .                   content_end: BytePos,
      .                   prefix_len: u32,
      .                   postfix_len: u32,
      .               ) {
175,458 ( 0.02%)          let lit_content = self.str_from_to(content_start, content_end);
877,290 ( 0.09%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
      .                       // Here we only check for errors. The actual unescaping is done later.
 58,486 ( 0.01%)              if let Err(err) = result {
      .                           let span_with_quotes = self
      .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
      .                           let (start, end) = (range.start as u32, range.end as u32);
      .                           let lo = content_start + BytePos(start);
      .                           let hi = lo + BytePos(end - start);
      .                           let span = self.mk_sp(lo, hi);
      .                           emit_unescape_error(
      .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
      .                               lit_content,
      .                               span_with_quotes,
      .                               span,
      .                               mode,
      .                               range,
      .                               err,
      .                           );
      .                       }
263,187 ( 0.03%)          });
      .               }
      .           
      .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
      .                   let base = match base {
      .                       Base::Binary => 2,
      .                       Base::Octal => 8,
      .                       _ => return,
      .                   };
-- line 645 ----------------------------------------
-- line 650 ----------------------------------------
      .                           let lo = content_start + BytePos(2 + idx);
      .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
      .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
      .                       }
      .                   }
      .               }
      .           }
      .           
  5,913 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
      .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
  1,314 ( 0.00%)      match is_nfc_quick(string.chars()) {
  6,570 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
      .                   _ => {
      .                       let normalized_str: String = string.chars().nfc().collect();
      .                       Symbol::intern(&normalized_str)
      .                   }
      .               }
      .           }

535,129 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs
--------------------------------------------------------------------------------
Ir               

-- line 72 ----------------------------------------
      .               /// it might do things like invoke `sub_regions`, which would be
      .               /// bad, because it would create subregion relationships that are
      .               /// not captured in the return value.
      .               fn perform_query(
      .                   tcx: TyCtxt<'tcx>,
      .                   canonicalized: Canonicalized<'tcx, ParamEnvAnd<'tcx, Self>>,
      .               ) -> Fallible<CanonicalizedQueryResponse<'tcx, Self::QueryResponse>>;
      .           
282,818 ( 0.03%)      fn fully_perform_into(
      .                   query_key: ParamEnvAnd<'tcx, Self>,
      .                   infcx: &InferCtxt<'_, 'tcx>,
      .                   output_query_region_constraints: &mut QueryRegionConstraints<'tcx>,
      .               ) -> Fallible<(
      .                   Self::QueryResponse,
      .                   Option<Canonical<'tcx, ParamEnvAnd<'tcx, Self>>>,
      .                   PredicateObligations<'tcx>,
      .                   Certainty,
      .               )> {
 35,090 ( 0.00%)          if let Some(result) = QueryTypeOp::try_fast_path(infcx.tcx, &query_key) {
153,552 ( 0.02%)              return Ok((result, None, vec![], Certainty::Proven));
      .                   }
      .           
      .                   // FIXME(#33684) -- We need to use
      .                   // `canonicalize_query_keep_static` here because of things
      .                   // like the subtype query, which go awry around
      .                   // `'static` otherwise.
  1,000 ( 0.00%)          let mut canonical_var_values = OriginalQueryValues::default();
      .                   let old_param_env = query_key.param_env;
      .                   let canonical_self =
    500 ( 0.00%)              infcx.canonicalize_query_keep_static(query_key, &mut canonical_var_values);
  5,000 ( 0.00%)          let canonical_result = Self::perform_query(infcx.tcx, canonical_self)?;
      .           
  6,808 ( 0.00%)          let InferOk { value, obligations } = infcx
      .                       .instantiate_nll_query_response_and_region_obligations(
      .                           &ObligationCause::dummy(),
      .                           old_param_env,
      .                           &canonical_var_values,
      .                           canonical_result,
      .                           output_query_region_constraints,
      .                       )?;
      .           
  8,313 ( 0.00%)          Ok((value, Some(canonical_self), obligations, canonical_result.value.certainty))
279,828 ( 0.03%)      }
      .           }
      .           
      .           impl<'tcx, Q> TypeOp<'tcx> for ParamEnvAnd<'tcx, Q>
      .           where
      .               Q: QueryTypeOp<'tcx>,
      .           {
      .               type Output = Q::QueryResponse;
      .           
249,560 ( 0.03%)      fn fully_perform(self, infcx: &InferCtxt<'_, 'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {
      .                   let mut region_constraints = QueryRegionConstraints::default();
187,600 ( 0.02%)          let (output, canonicalized_query, mut obligations, _) =
 31,667 ( 0.00%)              Q::fully_perform_into(self, infcx, &mut region_constraints)?;
      .           
      .                   // Typically, instantiating NLL query results does not
      .                   // create obligations. However, in some cases there
      .                   // are unresolved type variables, and unify them *can*
      .                   // create obligations. In that case, we have to go
      .                   // fulfill them. We do this via a (recursive) query.
 31,195 ( 0.00%)          while !obligations.is_empty() {
      .                       trace!("{:#?}", obligations);
      .                       let mut progress = false;
      .                       for obligation in std::mem::take(&mut obligations) {
      .                           let obligation = infcx.resolve_vars_if_possible(obligation);
      .                           match ProvePredicate::fully_perform_into(
      .                               obligation.param_env.and(ProvePredicate::new(obligation.predicate)),
      .                               infcx,
      .                               &mut region_constraints,
-- line 141 ----------------------------------------
-- line 153 ----------------------------------------
      .                       if !progress {
      .                           return Err(NoSolution);
      .                       }
      .                   }
      .           
      .                   // Promote the final query-region-constraints into a
      .                   // (optional) ref-counted vector:
      .                   let region_constraints =
124,780 ( 0.01%)              if region_constraints.is_empty() { None } else { Some(Rc::new(region_constraints)) };
      .           
404,301 ( 0.04%)          Ok(TypeOpOutput { output, constraints: region_constraints, canonicalized_query })
311,950 ( 0.03%)      }
      .           }

219,001 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/query/type_op/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs
--------------------------------------------------------------------------------
Ir               

-- line 20 ----------------------------------------
      .               Level, Lint, LintId,
      .           };
      .           use rustc_session::parse::feature_err;
      .           use rustc_session::Session;
      .           use rustc_span::symbol::{sym, Symbol};
      .           use rustc_span::{source_map::MultiSpan, Span, DUMMY_SP};
      .           use tracing::debug;
      .           
      9 ( 0.00%)  fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {
      .               let store = unerased_lint_store(tcx);
      .               let levels =
      6 ( 0.00%)          LintLevelsBuilder::new(tcx.sess, false, &store, &tcx.resolutions(()).registered_tools);
     13 ( 0.00%)      let mut builder = LintLevelMapBuilder { levels, tcx };
      3 ( 0.00%)      let krate = tcx.hir().krate();
      .           
      2 ( 0.00%)      builder.levels.id_to_set.reserve(krate.owners.len() + 1);
      .           
      8 ( 0.00%)      let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), true);
      .               builder.levels.register_id(hir::CRATE_HIR_ID);
      .               tcx.hir().walk_toplevel_module(&mut builder);
      .               builder.levels.pop(push);
      .           
     16 ( 0.00%)      builder.levels.build_map()
      9 ( 0.00%)  }
      .           
      .           pub struct LintLevelsBuilder<'s> {
      .               sess: &'s Session,
      .               sets: LintLevelSets,
      .               id_to_set: FxHashMap<HirId, LintStackIndex>,
      .               cur: LintStackIndex,
      .               warn_about_weird_lints: bool,
      .               store: &'s LintStore,
-- line 51 ----------------------------------------
-- line 53 ----------------------------------------
      .           }
      .           
      .           pub struct BuilderPush {
      .               prev: LintStackIndex,
      .               pub changed: bool,
      .           }
      .           
      .           impl<'s> LintLevelsBuilder<'s> {
     52 ( 0.00%)      pub fn new(
      .                   sess: &'s Session,
      .                   warn_about_weird_lints: bool,
      .                   store: &'s LintStore,
      .                   registered_tools: &'s RegisteredTools,
      .               ) -> Self {
     44 ( 0.00%)          let mut builder = LintLevelsBuilder {
      .                       sess,
      4 ( 0.00%)              sets: LintLevelSets::new(),
      .                       cur: COMMAND_LINE,
      .                       id_to_set: Default::default(),
      .                       warn_about_weird_lints,
      .                       store,
      .                       registered_tools,
      .                   };
      .                   builder.process_command_line(sess, store);
     12 ( 0.00%)          assert_eq!(builder.sets.list.len(), 1);
      .                   builder
     36 ( 0.00%)      }
      .           
      .               pub(crate) fn sess(&self) -> &Session {
    564 ( 0.00%)          self.sess
      .               }
      .           
      .               pub(crate) fn lint_store(&self) -> &LintStore {
      .                   self.store
      .               }
      .           
      .               fn process_command_line(&mut self, sess: &Session, store: &LintStore) {
      .                   let mut specs = FxHashMap::default();
      8 ( 0.00%)          self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);
      .           
      8 ( 0.00%)          for &(ref lint_name, level) in &sess.opts.lint_opts {
     40 ( 0.00%)              store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);
      .                       let orig_level = level;
     16 ( 0.00%)              let lint_flag_val = Symbol::intern(lint_name);
      .           
     40 ( 0.00%)              let ids = match store.find_lints(&lint_name) {
     32 ( 0.00%)                  Ok(ids) => ids,
      .                           Err(_) => continue, // errors handled in check_lint_name_cmdline above
      .                       };
     24 ( 0.00%)              for id in ids {
      .                           // ForceWarn and Forbid cannot be overriden
      .                           if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {
      .                               continue;
      .                           }
      .           
     32 ( 0.00%)                  self.check_gated_lint(id, DUMMY_SP);
      .                           let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);
     16 ( 0.00%)                  specs.insert(id, (level, src));
      .                       }
      .                   }
      .           
     32 ( 0.00%)          self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });
      .               }
      .           
      .               /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful
      .               /// (e.g. if a forbid was already inserted on the same scope), then emits a
      .               /// diagnostic with no change to `specs`.
      .               fn insert_spec(
      .                   &mut self,
      .                   specs: &mut FxHashMap<LintId, LevelAndSource>,
-- line 122 ----------------------------------------
-- line 220 ----------------------------------------
      .               ///
      .               /// * It'll validate all lint-related attributes in `attrs`
      .               /// * It'll mark all lint-related attributes as used
      .               /// * Lint levels will be updated based on the attributes provided
      .               /// * Lint attributes are validated, e.g., a `#[forbid]` can't be switched to
      .               ///   `#[allow]`
      .               ///
      .               /// Don't forget to call `pop`!
713,000 ( 0.07%)      pub(crate) fn push(&mut self, attrs: &[ast::Attribute], is_crate_node: bool) -> BuilderPush {
      .                   let mut specs = FxHashMap::default();
178,250 ( 0.02%)          let sess = self.sess;
 89,125 ( 0.01%)          let bad_attr = |span| struct_span_err!(sess, span, E0452, "malformed lint attribute input");
      .                   for attr in attrs {
  2,702 ( 0.00%)              let Some(level) = Level::from_symbol(attr.name_or_empty()) else {
      .                           continue
      .                       };
      .           
      .                       let Some(mut metas) = attr.meta_item_list() else {
      .                           continue
      .                       };
      .           
      .                       if metas.is_empty() {
-- line 241 ----------------------------------------
-- line 472 ----------------------------------------
      .                                   }
      .                               } else {
      .                                   panic!("renamed lint does not exist: {}", new_name);
      .                               }
      .                           }
      .                       }
      .                   }
      .           
178,250 ( 0.02%)          if !is_crate_node {
      .                       for (id, &(level, ref src)) in specs.iter() {
      .                           if !id.lint.crate_level_only {
      .                               continue;
      .                           }
      .           
      .                           let LintLevelSource::Node(lint_attr_name, lint_attr_span, _) = *src else {
      .                               continue
      .                           };
-- line 488 ----------------------------------------
-- line 505 ----------------------------------------
      .                                   db.emit();
      .                               },
      .                           );
      .                           // don't set a separate error for every lint in the group
      .                           break;
      .                       }
      .                   }
      .           
 89,125 ( 0.01%)          let prev = self.cur;
 89,125 ( 0.01%)          if !specs.is_empty() {
      .                       self.cur = self.sets.list.push(LintSet { specs, parent: prev });
      .                   }
      .           
      .                   BuilderPush { prev, changed: prev != self.cur }
802,125 ( 0.08%)      }
      .           
      .               /// Checks if the lint is gated on a feature that is not enabled.
     56 ( 0.00%)      fn check_gated_lint(&self, lint_id: LintId, span: Span) {
     24 ( 0.00%)          if let Some(feature) = lint_id.lint.feature_gate {
      .                       if !self.sess.features_untracked().enabled(feature) {
      .                           feature_err(
      .                               &self.sess.parse_sess,
      .                               feature,
      .                               span,
      .                               &format!("the `{}` lint is unstable", lint_id.lint.name_lower()),
      .                           )
      .                           .emit();
      .                       }
      .                   }
     64 ( 0.00%)      }
      .           
      .               /// Called after `push` when the scope of a set of attributes are exited.
      .               pub fn pop(&mut self, push: BuilderPush) {
118,396 ( 0.01%)          self.cur = push.prev;
 59,442 ( 0.01%)      }
      .           
      .               /// Find the lint level for a lint.
      .               pub fn lint_level(&self, lint: &'static Lint) -> (Level, LintLevelSource) {
    109 ( 0.00%)          self.sets.get_lint_level(lint, self.cur, None, self.sess)
      .               }
      .           
      .               /// Used to emit a lint-related diagnostic based on the current state of
      .               /// this lint context.
    121 ( 0.00%)      pub fn struct_lint(
      .                   &self,
      .                   lint: &'static Lint,
      .                   span: Option<MultiSpan>,
      .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
      .               ) {
     55 ( 0.00%)          let (level, src) = self.lint_level(lint);
     11 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, span, decorate)
     88 ( 0.00%)      }
      .           
      .               /// Registers the ID provided with the current set of lints stored in
      .               /// this context.
      .               pub fn register_id(&mut self, id: HirId) {
      1 ( 0.00%)          self.id_to_set.insert(id, self.cur);
      .               }
      .           
      .               pub fn build_map(self) -> LintLevelMap {
      8 ( 0.00%)          LintLevelMap { sets: self.sets, id_to_set: self.id_to_set }
      .               }
      .           }
      .           
      .           struct LintLevelMapBuilder<'tcx> {
      .               levels: LintLevelsBuilder<'tcx>,
      .               tcx: TyCtxt<'tcx>,
      .           }
      .           
      .           impl LintLevelMapBuilder<'_> {
      .               fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)
      .               where
      .                   F: FnOnce(&mut Self),
      .               {
      .                   let is_crate_hir = id == hir::CRATE_HIR_ID;
177,623 ( 0.02%)          let attrs = self.tcx.hir().attrs(id);
177,720 ( 0.02%)          let push = self.levels.push(attrs, is_crate_hir);
 29,626 ( 0.00%)          if push.changed {
      .                       self.levels.register_id(id);
      .                   }
      .                   f(self);
      .                   self.levels.pop(push);
      .               }
      .           }
      .           
      .           impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'tcx> {
      .               type NestedFilter = nested_filter::All;
      .           
      .               fn nested_visit_map(&mut self) -> Self::Map {
    161 ( 0.00%)          self.tcx.hir()
      .               }
      .           
      .               fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {
     74 ( 0.00%)          self.with_lint_attrs(param.hir_id, |builder| {
      .                       intravisit::walk_param(builder, param);
      .                   });
      .               }
      .           
      .               fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {
     34 ( 0.00%)          self.with_lint_attrs(it.hir_id(), |builder| {
    102 ( 0.00%)              intravisit::walk_item(builder, it);
      .                   });
      .               }
      .           
      .               fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {
      .                   self.with_lint_attrs(it.hir_id(), |builder| {
      .                       intravisit::walk_foreign_item(builder, it);
      .                   })
      .               }
-- line 613 ----------------------------------------
-- line 615 ----------------------------------------
      .               fn visit_stmt(&mut self, e: &'tcx hir::Stmt<'tcx>) {
      .                   // We will call `with_lint_attrs` when we walk
      .                   // the `StmtKind`. The outer statement itself doesn't
      .                   // define the lint levels.
      .                   intravisit::walk_stmt(self, e);
      .               }
      .           
      .               fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {
 58,946 ( 0.01%)          self.with_lint_attrs(e.hir_id, |builder| {
117,716 ( 0.01%)              intravisit::walk_expr(builder, e);
      .                   })
      .               }
      .           
      .               fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
      .                   self.with_lint_attrs(s.hir_id, |builder| {
      .                       intravisit::walk_field_def(builder, s);
      .                   })
      .               }
-- line 632 ----------------------------------------
-- line 644 ----------------------------------------
      .           
      .               fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {
      .                   self.with_lint_attrs(l.hir_id, |builder| {
      .                       intravisit::walk_local(builder, l);
      .                   })
      .               }
      .           
      .               fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {
     26 ( 0.00%)          self.with_lint_attrs(a.hir_id, |builder| {
     52 ( 0.00%)              intravisit::walk_arm(builder, a);
      .                   })
      .               }
      .           
      .               fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {
     35 ( 0.00%)          self.with_lint_attrs(trait_item.hir_id(), |builder| {
    105 ( 0.00%)              intravisit::walk_trait_item(builder, trait_item);
      .                   });
      .               }
      .           
      .               fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {
     28 ( 0.00%)          self.with_lint_attrs(impl_item.hir_id(), |builder| {
     84 ( 0.00%)              intravisit::walk_impl_item(builder, impl_item);
      .                   });
      .               }
      .           }
      .           
      .           pub fn provide(providers: &mut Providers) {
      2 ( 0.00%)      providers.lint_levels = lint_levels;
      .           }

 89,149 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lint/src/levels.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs
--------------------------------------------------------------------------------
Ir                 

-- line 154 ----------------------------------------
        .           
        .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
        .           unsafe impl<T> SliceIndex<[T]> for usize {
        .               type Output = T;
        .           
        .               #[inline]
        .               fn get(self, slice: &[T]) -> Option<&T> {
        .                   // SAFETY: `self` is checked to be in bounds.
  735,160 ( 0.08%)          if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
        .               }
        .           
        .               #[inline]
        .               fn get_mut(self, slice: &mut [T]) -> Option<&mut T> {
        .                   // SAFETY: `self` is checked to be in bounds.
    2,667 ( 0.00%)          if self < slice.len() { unsafe { Some(&mut *self.get_unchecked_mut(slice)) } } else { None }
        .               }
        .           
        .               #[inline]
        .               unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
        .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
        .                   // cannot be longer than `isize::MAX`. They also guarantee that
        .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
        .                   // so the call to `add` is safe.
-- line 176 ----------------------------------------
-- line 181 ----------------------------------------
        .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
        .                   // SAFETY: see comments for `get_unchecked` above.
        .                   unsafe { slice.as_mut_ptr().add(self) }
        .               }
        .           
        .               #[inline]
        .               fn index(self, slice: &[T]) -> &T {
        .                   // N.B., use intrinsic indexing
1,314,342 ( 0.14%)          &(*slice)[self]
        .               }
        .           
        .               #[inline]
        .               fn index_mut(self, slice: &mut [T]) -> &mut T {
        .                   // N.B., use intrinsic indexing
  556,663 ( 0.06%)          &mut (*slice)[self]
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
        .           unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {
        .               type Output = [T];
        .           
        .               #[inline]
        .               fn get(self, slice: &[T]) -> Option<&[T]> {
    8,775 ( 0.00%)          if self.start > self.end || self.end > slice.len() {
        .                       None
        .                   } else {
        .                       // SAFETY: `self` is checked to be valid and in bounds above.
        .                       unsafe { Some(&*self.get_unchecked(slice)) }
        .                   }
        .               }
        .           
        .               #[inline]
-- line 213 ----------------------------------------
-- line 221 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
        .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
        .                   // cannot be longer than `isize::MAX`. They also guarantee that
        .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
        .                   // so the call to `add` is safe.
  598,276 ( 0.06%)          unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
        .               }
        .           
        .               #[inline]
        .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
        .                   // SAFETY: see comments for `get_unchecked` above.
        .                   unsafe {
   60,478 ( 0.01%)              ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn index(self, slice: &[T]) -> &[T] {
  412,381 ( 0.04%)          if self.start > self.end {
        .                       slice_index_order_fail(self.start, self.end);
  608,927 ( 0.06%)          } else if self.end > slice.len() {
        .                       slice_end_index_len_fail(self.end, slice.len());
        .                   }
        .                   // SAFETY: `self` is checked to be valid and in bounds above.
        .                   unsafe { &*self.get_unchecked(slice) }
        .               }
        .           
        .               #[inline]
        .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
      693 ( 0.00%)          if self.start > self.end {
        .                       slice_index_order_fail(self.start, self.end);
   60,448 ( 0.01%)          } else if self.end > slice.len() {
        .                       slice_end_index_len_fail(self.end, slice.len());
        .                   }
        .                   // SAFETY: `self` is checked to be valid and in bounds above.
        .                   unsafe { &mut *self.get_unchecked_mut(slice) }
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 263 ----------------------------------------
-- line 320 ----------------------------------------
        .               #[inline]
        .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
        .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
        .                   unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
        .               }
        .           
        .               #[inline]
        .               fn index(self, slice: &[T]) -> &[T] {
  190,029 ( 0.02%)          if self.start > slice.len() {
        .                       slice_start_index_len_fail(self.start, slice.len());
        .                   }
        .                   // SAFETY: `self` is checked to be valid and in bounds above.
        .                   unsafe { &*self.get_unchecked(slice) }
        .               }
        .           
        .               #[inline]
        .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
      197 ( 0.00%)          if self.start > slice.len() {
        .                       slice_start_index_len_fail(self.start, slice.len());
        .                   }
        .                   // SAFETY: `self` is checked to be valid and in bounds above.
        .                   unsafe { &mut *self.get_unchecked_mut(slice) }
        .               }
        .           }
        .           
        .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 345 ----------------------------------------
-- line 539 ----------------------------------------
        .               let end = match end {
        .                   ops::Bound::Included(end) => {
        .                       end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
        .                   }
        .                   ops::Bound::Excluded(&end) => end,
        .                   ops::Bound::Unbounded => len,
        .               };
        .           
      630 ( 0.00%)      if start > end {
        .                   slice_index_order_fail(start, end);
        .               }
      104 ( 0.00%)      if end > len {
        .                   slice_end_index_len_fail(end, len);
        .               }
        .           
        .               ops::Range { start, end }
        .           }
        .           
        .           /// Convert pair of `ops::Bound`s into `ops::Range` without performing any bounds checking and (in debug) overflow checking
        .           fn into_range_unchecked(
-- line 558 ----------------------------------------

  174,629 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/intravisit.rs
--------------------------------------------------------------------------------
Ir                 

-- line 48 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>
        .           where
        .               V: Visitor<'hir>,
        .           {
        .               fn visit_item(&mut self, item: &'hir Item<'hir>) {
      408 ( 0.00%)          self.visitor.visit_item(item);
        .               }
        .           
        .               fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {
      105 ( 0.00%)          self.visitor.visit_trait_item(trait_item);
        .               }
        .           
        .               fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {
      168 ( 0.00%)          self.visitor.visit_impl_item(impl_item);
        .               }
        .           
        .               fn visit_foreign_item(&mut self, foreign_item: &'hir ForeignItem<'hir>) {
        .                   self.visitor.visit_foreign_item(foreign_item);
        .               }
        .           }
        .           
        .           pub trait IntoVisitor<'hir> {
-- line 72 ----------------------------------------
-- line 106 ----------------------------------------
        .               Method(Ident, &'a FnSig<'a>, Option<&'a Visibility<'a>>),
        .           
        .               /// `|x, y| {}`
        .               Closure,
        .           }
        .           
        .           impl<'a> FnKind<'a> {
        .               pub fn header(&self) -> Option<&FnHeader> {
      178 ( 0.00%)          match *self {
        1 ( 0.00%)              FnKind::ItemFn(_, _, ref header, _) => Some(header),
      105 ( 0.00%)              FnKind::Method(_, ref sig, _) => Some(&sig.header),
        .                       FnKind::Closure => None,
        .                   }
        .               }
        .           
        .               pub fn constness(self) -> Constness {
       72 ( 0.00%)          self.header().map_or(Constness::NotConst, |header| header.constness)
       36 ( 0.00%)      }
        .           
        .               pub fn asyncness(self) -> IsAsync {
        .                   self.header().map_or(IsAsync::NotAsync, |header| header.asyncness)
        .               }
        .           }
        .           
        .           /// An abstract representation of the HIR `rustc_middle::hir::map::Map`.
        .           pub trait Map<'hir> {
-- line 131 ----------------------------------------
-- line 248 ----------------------------------------
        .               /// Invoked when a nested item is encountered. By default does
        .               /// nothing unless you override `nested_visit_map` to return other than
        .               /// `None`, in which case it will walk the item. **You probably
        .               /// don't want to override this method** -- instead, override
        .               /// `nested_visit_map` or use the "shallow" or "deep" visit
        .               /// patterns described on `itemlikevisit::ItemLikeVisitor`. The only
        .               /// reason to override this method is if you want a nested pattern
        .               /// but cannot supply a `Map`; see `nested_visit_map` for advice.
      544 ( 0.00%)      fn visit_nested_item(&mut self, id: ItemId) {
        .                   if Self::NestedFilter::INTER {
    1,326 ( 0.00%)              let item = self.nested_visit_map().item(id);
      612 ( 0.00%)              self.visit_item(item);
        .                   }
      544 ( 0.00%)      }
        .           
        .               /// Like `visit_nested_item()`, but for trait items. See
        .               /// `visit_nested_item()` for advice on when to override this
        .               /// method.
      805 ( 0.00%)      fn visit_nested_trait_item(&mut self, id: TraitItemId) {
        .                   if Self::NestedFilter::INTER {
    1,470 ( 0.00%)              let item = self.nested_visit_map().trait_item(id);
      210 ( 0.00%)              self.visit_trait_item(item);
        .                   }
      805 ( 0.00%)      }
        .           
        .               /// Like `visit_nested_item()`, but for impl items. See
        .               /// `visit_nested_item()` for advice on when to override this
        .               /// method.
      448 ( 0.00%)      fn visit_nested_impl_item(&mut self, id: ImplItemId) {
        .                   if Self::NestedFilter::INTER {
    1,092 ( 0.00%)              let item = self.nested_visit_map().impl_item(id);
      252 ( 0.00%)              self.visit_impl_item(item);
        .                   }
      448 ( 0.00%)      }
        .           
        .               /// Like `visit_nested_item()`, but for foreign items. See
        .               /// `visit_nested_item()` for advice on when to override this
        .               /// method.
        .               fn visit_nested_foreign_item(&mut self, id: ForeignItemId) {
        .                   if Self::NestedFilter::INTER {
        .                       let item = self.nested_visit_map().foreign_item(id);
        .                       self.visit_foreign_item(item);
        .                   }
        .               }
        .           
        .               /// Invoked to visit the body of a function, method or closure. Like
        .               /// visit_nested_item, does nothing by default unless you override
        .               /// `nested_visit_map` to return other than `None`, in which case it will walk
        .               /// the body.
      616 ( 0.00%)      fn visit_nested_body(&mut self, id: BodyId) {
        .                   if Self::NestedFilter::INTRA {
    5,780 ( 0.00%)              let body = self.nested_visit_map().body(id);
      220 ( 0.00%)              self.visit_body(body);
        .                   }
      616 ( 0.00%)      }
        .           
        .               fn visit_param(&mut self, param: &'v Param<'v>) {
        .                   walk_param(self, param)
        .               }
        .           
        .               /// Visits the top-level item and (optionally) nested items / impl items. See
        .               /// `visit_nested_item` for details.
        .               fn visit_item(&mut self, i: &'v Item<'v>) {
      856 ( 0.00%)          walk_item(self, i)
        .               }
        .           
        .               fn visit_body(&mut self, b: &'v Body<'v>) {
      712 ( 0.00%)          walk_body(self, b);
        .               }
        .           
        .               /// When invoking `visit_all_item_likes()`, you need to supply an
        .               /// item-like visitor. This method converts an "intra-visit"
        .               /// visitor into an item-like visitor that walks the entire tree.
        .               /// If you use this, you probably don't want to process the
        .               /// contents of nested item-like things, since the outer loop will
        .               /// visit them as well.
-- line 323 ----------------------------------------
-- line 332 ----------------------------------------
        .               }
        .               fn visit_name(&mut self, _span: Span, _name: Symbol) {
        .                   // Nothing to do.
        .               }
        .               fn visit_ident(&mut self, ident: Ident) {
        .                   walk_ident(self, ident)
        .               }
        .               fn visit_mod(&mut self, m: &'v Mod<'v>, _s: Span, n: HirId) {
       11 ( 0.00%)          walk_mod(self, m, n)
        .               }
        .               fn visit_foreign_item(&mut self, i: &'v ForeignItem<'v>) {
        .                   walk_foreign_item(self, i)
        .               }
        .               fn visit_local(&mut self, l: &'v Local<'v>) {
        .                   walk_local(self, l)
        .               }
        .               fn visit_block(&mut self, b: &'v Block<'v>) {
        .                   walk_block(self, b)
        .               }
        .               fn visit_stmt(&mut self, s: &'v Stmt<'v>) {
        .                   walk_stmt(self, s)
        .               }
        .               fn visit_arm(&mut self, a: &'v Arm<'v>) {
      156 ( 0.00%)          walk_arm(self, a)
        .               }
        .               fn visit_pat(&mut self, p: &'v Pat<'v>) {
    2,767 ( 0.00%)          walk_pat(self, p)
        .               }
        .               fn visit_array_length(&mut self, len: &'v ArrayLen) {
        .                   walk_array_len(self, len)
        .               }
        .               fn visit_anon_const(&mut self, c: &'v AnonConst) {
        .                   walk_anon_const(self, c)
        .               }
        .               fn visit_expr(&mut self, ex: &'v Expr<'v>) {
1,119,970 ( 0.12%)          walk_expr(self, ex)
        .               }
        .               fn visit_let_expr(&mut self, lex: &'v Let<'v>) {
        .                   walk_let_expr(self, lex)
        .               }
        .               fn visit_ty(&mut self, t: &'v Ty<'v>) {
    6,606 ( 0.00%)          walk_ty(self, t)
        .               }
        .               fn visit_generic_param(&mut self, p: &'v GenericParam<'v>) {
        .                   walk_generic_param(self, p)
        .               }
        .               fn visit_const_param_default(&mut self, _param: HirId, ct: &'v AnonConst) {
        .                   walk_const_param_default(self, ct)
        .               }
        .               fn visit_generics(&mut self, g: &'v Generics<'v>) {
      251 ( 0.00%)          walk_generics(self, g)
        .               }
        .               fn visit_where_predicate(&mut self, predicate: &'v WherePredicate<'v>) {
        .                   walk_where_predicate(self, predicate)
        .               }
        .               fn visit_fn_decl(&mut self, fd: &'v FnDecl<'v>) {
      718 ( 0.00%)          walk_fn_decl(self, fd)
        .               }
        .               fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl<'v>, b: BodyId, s: Span, id: HirId) {
    6,371 ( 0.00%)          walk_fn(self, fk, fd, b, s, id)
        .               }
        .               fn visit_use(&mut self, path: &'v Path<'v>, hir_id: HirId) {
        .                   walk_use(self, path, hir_id)
        .               }
        .               fn visit_trait_item(&mut self, ti: &'v TraitItem<'v>) {
    1,750 ( 0.00%)          walk_trait_item(self, ti)
        .               }
        .               fn visit_trait_item_ref(&mut self, ii: &'v TraitItemRef) {
      105 ( 0.00%)          walk_trait_item_ref(self, ii)
        .               }
        .               fn visit_impl_item(&mut self, ii: &'v ImplItem<'v>) {
    1,400 ( 0.00%)          walk_impl_item(self, ii)
        .               }
        .               fn visit_foreign_item_ref(&mut self, ii: &'v ForeignItemRef) {
        .                   walk_foreign_item_ref(self, ii)
        .               }
        .               fn visit_impl_item_ref(&mut self, ii: &'v ImplItemRef) {
      112 ( 0.00%)          walk_impl_item_ref(self, ii)
        .               }
       11 ( 0.00%)      fn visit_trait_ref(&mut self, t: &'v TraitRef<'v>) {
       62 ( 0.00%)          walk_trait_ref(self, t)
        8 ( 0.00%)      }
        .               fn visit_param_bound(&mut self, bounds: &'v GenericBound<'v>) {
      222 ( 0.00%)          walk_param_bound(self, bounds)
        .               }
        .               fn visit_poly_trait_ref(&mut self, t: &'v PolyTraitRef<'v>, m: TraitBoundModifier) {
        .                   walk_poly_trait_ref(self, t, m)
        .               }
        .               fn visit_variant_data(
        .                   &mut self,
        .                   s: &'v VariantData<'v>,
        .                   _: Symbol,
-- line 423 ----------------------------------------
-- line 455 ----------------------------------------
        .                       GenericArg::Const(ct) => self.visit_anon_const(&ct.value),
        .                       GenericArg::Infer(inf) => self.visit_infer(inf),
        .                   }
        .               }
        .               fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {
        .                   walk_lifetime(self, lifetime)
        .               }
        .               fn visit_qpath(&mut self, qpath: &'v QPath<'v>, id: HirId, span: Span) {
   68,233 ( 0.01%)          walk_qpath(self, qpath, id, span)
        .               }
      106 ( 0.00%)      fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {
    5,885 ( 0.00%)          walk_path(self, path)
      124 ( 0.00%)      }
      465 ( 0.00%)      fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment<'v>) {
        .                   walk_path_segment(self, path_span, path_segment)
      525 ( 0.00%)      }
        .               fn visit_generic_args(&mut self, path_span: Span, generic_args: &'v GenericArgs<'v>) {
        .                   walk_generic_args(self, path_span, generic_args)
        .               }
        .               fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding<'v>) {
        .                   walk_assoc_type_binding(self, type_binding)
        .               }
        .               fn visit_attribute(&mut self, _id: HirId, _attr: &'v Attribute) {}
        .               fn visit_vis(&mut self, vis: &'v Visibility<'v>) {
      288 ( 0.00%)          walk_vis(self, vis)
        .               }
        .               fn visit_associated_item_kind(&mut self, kind: &'v AssocItemKind) {
        .                   walk_associated_item_kind(self, kind);
        .               }
        .               fn visit_defaultness(&mut self, defaultness: &'v Defaultness) {
        .                   walk_defaultness(self, defaultness);
        .               }
        .           }
        .           
       14 ( 0.00%)  pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod<'v>, mod_hir_id: HirId) {
        .               visitor.visit_id(mod_hir_id);
      472 ( 0.00%)      for &item_id in module.item_ids {
      136 ( 0.00%)          visitor.visit_nested_item(item_id);
        .               }
       16 ( 0.00%)  }
        .           
    2,496 ( 0.00%)  pub fn walk_body<'v, V: Visitor<'v>>(visitor: &mut V, body: &'v Body<'v>) {
    2,511 ( 0.00%)      walk_list!(visitor, visit_param, body.params);
    5,133 ( 0.00%)      visitor.visit_expr(&body.value);
    1,248 ( 0.00%)  }
        .           
        .           pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local<'v>) {
        .               // Intentionally visiting the expr first - the initialization expr
        .               // dominates the local's definition.
        .               walk_list!(visitor, visit_expr, &local.init);
        .               visitor.visit_id(local.hir_id);
        .               visitor.visit_pat(&local.pat);
        .               walk_list!(visitor, visit_ty, &local.ty);
-- line 507 ----------------------------------------
-- line 511 ----------------------------------------
        .               visitor.visit_name(ident.span, ident.name);
        .           }
        .           
        .           pub fn walk_label<'v, V: Visitor<'v>>(visitor: &mut V, label: &'v Label) {
        .               visitor.visit_ident(label.ident);
        .           }
        .           
        .           pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {
      116 ( 0.00%)      visitor.visit_id(lifetime.hir_id);
       58 ( 0.00%)      match lifetime.name {
        .                   LifetimeName::Param(ParamName::Plain(ident)) => {
        .                       visitor.visit_ident(ident);
        .                   }
        .                   LifetimeName::Param(ParamName::Fresh(_))
        .                   | LifetimeName::Param(ParamName::Error)
        .                   | LifetimeName::Static
        .                   | LifetimeName::Error
        .                   | LifetimeName::Implicit(_)
-- line 528 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           pub fn walk_poly_trait_ref<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               trait_ref: &'v PolyTraitRef<'v>,
        .               _modifier: TraitBoundModifier,
        .           ) {
        .               walk_list!(visitor, visit_generic_param, trait_ref.bound_generic_params);
       46 ( 0.00%)      visitor.visit_trait_ref(&trait_ref.trait_ref);
        .           }
        .           
       49 ( 0.00%)  pub fn walk_trait_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_ref: &'v TraitRef<'v>) {
       37 ( 0.00%)      visitor.visit_id(trait_ref.hir_ref_id);
      169 ( 0.00%)      visitor.visit_path(&trait_ref.path, trait_ref.hir_ref_id)
       56 ( 0.00%)  }
        .           
        .           pub fn walk_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v Param<'v>) {
      148 ( 0.00%)      visitor.visit_id(param.hir_id);
    1,557 ( 0.00%)      visitor.visit_pat(&param.pat);
        .           }
        .           
    8,530 ( 0.00%)  pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item<'v>) {
      204 ( 0.00%)      visitor.visit_vis(&item.vis);
      102 ( 0.00%)      visitor.visit_ident(item.ident);
    4,751 ( 0.00%)      match item.kind {
        1 ( 0.00%)          ItemKind::ExternCrate(orig_name) => {
        .                       visitor.visit_id(item.hir_id());
        2 ( 0.00%)              if let Some(orig_name) = orig_name {
        .                           visitor.visit_name(item.span, orig_name);
        .                       }
        .                   }
        .                   ItemKind::Use(ref path, _) => {
       35 ( 0.00%)              visitor.visit_use(path, item.hir_id());
        .                   }
        .                   ItemKind::Static(ref typ, _, body) | ItemKind::Const(ref typ, body) => {
       84 ( 0.00%)              visitor.visit_id(item.hir_id());
    1,092 ( 0.00%)              visitor.visit_ty(typ);
    2,072 ( 0.00%)              visitor.visit_nested_body(body);
        .                   }
       99 ( 0.00%)          ItemKind::Fn(ref sig, ref generics, body_id) => visitor.visit_fn(
      109 ( 0.00%)              FnKind::ItemFn(item.ident, generics, sig.header, &item.vis),
       27 ( 0.00%)              &sig.decl,
        .                       body_id,
        4 ( 0.00%)              item.span,
       12 ( 0.00%)              item.hir_id(),
        .                   ),
        .                   ItemKind::Macro(_) => {
        .                       visitor.visit_id(item.hir_id());
        .                   }
        1 ( 0.00%)          ItemKind::Mod(ref module) => {
        .                       // `visit_mod()` takes care of visiting the `Item`'s `HirId`.
        .                       visitor.visit_mod(module, item.span, item.hir_id())
        .                   }
        .                   ItemKind::ForeignMod { abi: _, items } => {
        .                       visitor.visit_id(item.hir_id());
        .                       walk_list!(visitor, visit_foreign_item_ref, items);
        .                   }
        .                   ItemKind::GlobalAsm(asm) => {
-- line 589 ----------------------------------------
-- line 606 ----------------------------------------
        .                       visitor.visit_enum_def(enum_definition, generics, item.hir_id(), item.span)
        .                   }
        .                   ItemKind::Impl(Impl {
        .                       unsafety: _,
        .                       defaultness: _,
        .                       polarity: _,
        .                       constness: _,
        .                       defaultness_span: _,
        7 ( 0.00%)              ref generics,
        2 ( 0.00%)              ref of_trait,
        .                       ref self_ty,
       36 ( 0.00%)              items,
        .                   }) => {
        3 ( 0.00%)              visitor.visit_id(item.hir_id());
        6 ( 0.00%)              visitor.visit_generics(generics);
       36 ( 0.00%)              walk_list!(visitor, visit_trait_ref, of_trait);
       35 ( 0.00%)              visitor.visit_ty(self_ty);
        .                       walk_list!(visitor, visit_impl_item_ref, items);
        .                   }
        .                   ItemKind::Struct(ref struct_definition, ref generics)
        .                   | ItemKind::Union(ref struct_definition, ref generics) => {
        .                       visitor.visit_generics(generics);
        .                       visitor.visit_id(item.hir_id());
        .                       visitor.visit_variant_data(
        .                           struct_definition,
        .                           item.ident.name,
        .                           generics,
        .                           item.hir_id(),
        .                           item.span,
        .                       );
        .                   }
      136 ( 0.00%)          ItemKind::Trait(.., ref generics, bounds, trait_item_refs) => {
        3 ( 0.00%)              visitor.visit_id(item.hir_id());
       10 ( 0.00%)              visitor.visit_generics(generics);
       16 ( 0.00%)              walk_list!(visitor, visit_param_bound, bounds);
        .                       walk_list!(visitor, visit_trait_item_ref, trait_item_refs);
        .                   }
        .                   ItemKind::TraitAlias(ref generics, bounds) => {
        .                       visitor.visit_id(item.hir_id());
        .                       visitor.visit_generics(generics);
        .                       walk_list!(visitor, visit_param_bound, bounds);
        .                   }
        .               }
    4,656 ( 0.00%)  }
        .           
        .           fn walk_inline_asm<'v, V: Visitor<'v>>(visitor: &mut V, asm: &'v InlineAsm<'v>) {
        .               for (op, _op_sp) in asm.operands {
        .                   match op {
        .                       InlineAsmOperand::In { expr, .. }
        .                       | InlineAsmOperand::InOut { expr, .. }
        .                       | InlineAsmOperand::Sym { expr, .. } => visitor.visit_expr(expr),
        .                       InlineAsmOperand::Out { expr, .. } => {
-- line 657 ----------------------------------------
-- line 667 ----------------------------------------
        .                       }
        .                       InlineAsmOperand::Const { anon_const } => visitor.visit_anon_const(anon_const),
        .                   }
        .               }
        .           }
        .           
        .           pub fn walk_use<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>, hir_id: HirId) {
        .               visitor.visit_id(hir_id);
       70 ( 0.00%)      visitor.visit_path(path, hir_id);
        .           }
        .           
        .           pub fn walk_enum_def<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               enum_definition: &'v EnumDef<'v>,
        .               generics: &'v Generics<'v>,
        .               item_id: HirId,
        .           ) {
-- line 683 ----------------------------------------
-- line 698 ----------------------------------------
        .                   variant.ident.name,
        .                   generics,
        .                   parent_item_id,
        .                   variant.span,
        .               );
        .               walk_list!(visitor, visit_anon_const, &variant.disr_expr);
        .           }
        .           
   46,348 ( 0.00%)  pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty<'v>) {
    8,642 ( 0.00%)      visitor.visit_id(typ.hir_id);
        .           
   30,287 ( 0.00%)      match typ.kind {
      608 ( 0.00%)          TyKind::Slice(ref ty) => visitor.visit_ty(ty),
        .                   TyKind::Ptr(ref mutable_type) => visitor.visit_ty(&mutable_type.ty),
      727 ( 0.00%)          TyKind::Rptr(ref lifetime, ref mutable_type) => {
       60 ( 0.00%)              visitor.visit_lifetime(lifetime);
      179 ( 0.00%)              visitor.visit_ty(&mutable_type.ty)
        .                   }
        .                   TyKind::Never => {}
        .                   TyKind::Tup(tuple_element_types) => {
        .                       walk_list!(visitor, visit_ty, tuple_element_types);
        .                   }
        .                   TyKind::BareFn(ref function_declaration) => {
        .                       walk_list!(visitor, visit_generic_param, function_declaration.generic_params);
        .                       visitor.visit_fn_decl(&function_declaration.decl);
        .                   }
    4,363 ( 0.00%)          TyKind::Path(ref qpath) => {
    5,943 ( 0.00%)              visitor.visit_qpath(qpath, typ.hir_id, typ.span);
        .                   }
        .                   TyKind::OpaqueDef(item_id, lifetimes) => {
        .                       visitor.visit_nested_item(item_id);
        .                       walk_list!(visitor, visit_generic_arg, lifetimes);
        .                   }
        .                   TyKind::Array(ref ty, ref length) => {
        .                       visitor.visit_ty(ty);
        .                       visitor.visit_array_length(length)
-- line 733 ----------------------------------------
-- line 736 ----------------------------------------
        .                       for bound in bounds {
        .                           visitor.visit_poly_trait_ref(bound, TraitBoundModifier::None);
        .                       }
        .                       visitor.visit_lifetime(lifetime);
        .                   }
        .                   TyKind::Typeof(ref expression) => visitor.visit_anon_const(expression),
        .                   TyKind::Infer | TyKind::Err => {}
        .               }
    4,784 ( 0.00%)  }
        .           
        .           pub fn walk_inf<'v, V: Visitor<'v>>(visitor: &mut V, inf: &'v InferArg) {
        .               visitor.visit_id(inf.hir_id);
        .           }
        .           
   69,087 ( 0.01%)  pub fn walk_qpath<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               qpath: &'v QPath<'v>,
        .               id: HirId,
        .               span: Span,
        .           ) {
   26,859 ( 0.00%)      match *qpath {
        .                   QPath::Resolved(ref maybe_qself, ref path) => {
    8,953 ( 0.00%)              walk_list!(visitor, visit_ty, maybe_qself);
   11,978 ( 0.00%)              visitor.visit_path(path, id)
        .                   }
        .                   QPath::TypeRelative(ref qself, ref segment) => {
        .                       visitor.visit_ty(qself);
        .                       visitor.visit_path_segment(span, segment);
        .                   }
        .                   QPath::LangItem(..) => {}
        .               }
   58,946 ( 0.01%)  }
        .           
    4,496 ( 0.00%)  pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path<'v>) {
        .               for segment in path.segments {
    1,280 ( 0.00%)          visitor.visit_path_segment(path.span, segment);
        .               }
    5,238 ( 0.00%)  }
        .           
        5 ( 0.00%)  pub fn walk_path_segment<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               path_span: Span,
        .               segment: &'v PathSegment<'v>,
        .           ) {
    1,028 ( 0.00%)      visitor.visit_ident(segment.ident);
    1,857 ( 0.00%)      walk_list!(visitor, visit_id, segment.hir_id);
   33,057 ( 0.00%)      if let Some(ref args) = segment.args {
        .                   visitor.visit_generic_args(path_span, args);
        .               }
        6 ( 0.00%)  }
        .           
        .           pub fn walk_generic_args<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               _path_span: Span,
        .               generic_args: &'v GenericArgs<'v>,
        .           ) {
        .               walk_list!(visitor, visit_generic_arg, generic_args.args);
        .               walk_list!(visitor, visit_assoc_type_binding, generic_args.bindings);
-- line 793 ----------------------------------------
-- line 804 ----------------------------------------
        .                   TypeBindingKind::Equality { ref term } => match term {
        .                       Term::Ty(ref ty) => visitor.visit_ty(ty),
        .                       Term::Const(ref c) => visitor.visit_anon_const(c),
        .                   },
        .                   TypeBindingKind::Constraint { bounds } => walk_list!(visitor, visit_param_bound, bounds),
        .               }
        .           }
        .           
   16,377 ( 0.00%)  pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat<'v>) {
    1,000 ( 0.00%)      visitor.visit_id(pattern.hir_id);
    9,015 ( 0.00%)      match pattern.kind {
        .                   PatKind::TupleStruct(ref qpath, children, _) => {
        .                       visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);
        .                       walk_list!(visitor, visit_pat, children);
        .                   }
        .                   PatKind::Path(ref qpath) => {
        .                       visitor.visit_qpath(qpath, pattern.hir_id, pattern.span);
        .                   }
        .                   PatKind::Struct(ref qpath, fields, _) => {
-- line 822 ----------------------------------------
-- line 829 ----------------------------------------
        .                   }
        .                   PatKind::Or(pats) => walk_list!(visitor, visit_pat, pats),
        .                   PatKind::Tuple(tuple_elements, _) => {
        .                       walk_list!(visitor, visit_pat, tuple_elements);
        .                   }
        .                   PatKind::Box(ref subpattern) | PatKind::Ref(ref subpattern, _) => {
        .                       visitor.visit_pat(subpattern)
        .                   }
      148 ( 0.00%)          PatKind::Binding(_, _hir_id, ident, ref optional_subpattern) => {
        .                       visitor.visit_ident(ident);
    1,224 ( 0.00%)              walk_list!(visitor, visit_pat, optional_subpattern);
        .                   }
        .                   PatKind::Lit(ref expression) => visitor.visit_expr(expression),
        .                   PatKind::Range(ref lower_bound, ref upper_bound, _) => {
      770 ( 0.00%)              walk_list!(visitor, visit_expr, lower_bound);
      121 ( 0.00%)              walk_list!(visitor, visit_expr, upper_bound);
        .                   }
        .                   PatKind::Wild => (),
        .                   PatKind::Slice(prepatterns, ref slice_pattern, postpatterns) => {
        .                       walk_list!(visitor, visit_pat, prepatterns);
        .                       walk_list!(visitor, visit_pat, slice_pattern);
        .                       walk_list!(visitor, visit_pat, postpatterns);
        .                   }
        .               }
   11,520 ( 0.00%)  }
        .           
        .           pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem<'v>) {
        .               visitor.visit_id(foreign_item.hir_id());
        .               visitor.visit_vis(&foreign_item.vis);
        .               visitor.visit_ident(foreign_item.ident);
        .           
        .               match foreign_item.kind {
        .                   ForeignItemKind::Fn(ref function_declaration, param_names, ref generics) => {
-- line 861 ----------------------------------------
-- line 865 ----------------------------------------
        .                           visitor.visit_ident(param_name);
        .                       }
        .                   }
        .                   ForeignItemKind::Static(ref typ, _) => visitor.visit_ty(typ),
        .                   ForeignItemKind::Type => (),
        .               }
        .           }
        .           
      482 ( 0.00%)  pub fn walk_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v GenericBound<'v>) {
      176 ( 0.00%)      match *bound {
        6 ( 0.00%)          GenericBound::Trait(ref typ, modifier) => {
       40 ( 0.00%)              visitor.visit_poly_trait_ref(typ, modifier);
        .                   }
        .                   GenericBound::LangItemTrait(_, span, hir_id, args) => {
        .                       visitor.visit_id(hir_id);
        .                       visitor.visit_generic_args(span, args);
        .                   }
        .                   GenericBound::Outlives(ref lifetime) => visitor.visit_lifetime(lifetime),
        .               }
      308 ( 0.00%)  }
        .           
        .           pub fn walk_generic_param<'v, V: Visitor<'v>>(visitor: &mut V, param: &'v GenericParam<'v>) {
        .               visitor.visit_id(param.hir_id);
        .               match param.name {
        .                   ParamName::Plain(ident) => visitor.visit_ident(ident),
        .                   ParamName::Error | ParamName::Fresh(_) => {}
        .               }
        .               match param.kind {
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               }
        .               walk_list!(visitor, visit_param_bound, param.bounds);
        .           }
        .           
        .           pub fn walk_const_param_default<'v, V: Visitor<'v>>(visitor: &mut V, ct: &'v AnonConst) {
        .               visitor.visit_anon_const(ct)
        .           }
        .           
    1,782 ( 0.00%)  pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics<'v>) {
      582 ( 0.00%)      walk_list!(visitor, visit_generic_param, generics.params);
    1,846 ( 0.00%)      walk_list!(visitor, visit_where_predicate, generics.where_clause.predicates);
    1,584 ( 0.00%)  }
        .           
        .           pub fn walk_where_predicate<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               predicate: &'v WherePredicate<'v>,
        .           ) {
        .               match *predicate {
        .                   WherePredicate::BoundPredicate(WhereBoundPredicate {
        .                       ref bounded_ty,
-- line 920 ----------------------------------------
-- line 936 ----------------------------------------
        .                       visitor.visit_id(hir_id);
        .                       visitor.visit_ty(lhs_ty);
        .                       visitor.visit_ty(rhs_ty);
        .                   }
        .               }
        .           }
        .           
        .           pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FnRetTy<'v>) {
    3,583 ( 0.00%)      if let FnRetTy::Return(ref output_ty) = *ret_ty {
    1,972 ( 0.00%)          visitor.visit_ty(output_ty)
        .               }
        .           }
        .           
    1,467 ( 0.00%)  pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl<'v>) {
    1,727 ( 0.00%)      for ty in function_declaration.inputs {
      390 ( 0.00%)          visitor.visit_ty(ty)
        .               }
        .               walk_fn_ret_ty(visitor, &function_declaration.output)
      512 ( 0.00%)  }
        .           
        .           pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'v>) {
    1,440 ( 0.00%)      match function_kind {
        .                   FnKind::ItemFn(_, generics, ..) => {
        7 ( 0.00%)              visitor.visit_generics(generics);
        .                   }
        .                   FnKind::Method(..) | FnKind::Closure => {}
        .               }
        .           }
        .           
    7,596 ( 0.00%)  pub fn walk_fn<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               function_kind: FnKind<'v>,
        .               function_declaration: &'v FnDecl<'v>,
        .               body_id: BodyId,
        .               _span: Span,
        .               id: HirId,
        .           ) {
        .               visitor.visit_id(id);
        .               visitor.visit_fn_decl(function_declaration);
        .               walk_fn_kind(visitor, function_kind);
    1,431 ( 0.00%)      visitor.visit_nested_body(body_id)
    4,320 ( 0.00%)  }
        .           
    8,645 ( 0.00%)  pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem<'v>) {
      105 ( 0.00%)      visitor.visit_ident(trait_item.ident);
      140 ( 0.00%)      visitor.visit_generics(&trait_item.generics);
    6,860 ( 0.00%)      match trait_item.kind {
        .                   TraitItemKind::Const(ref ty, default) => {
        .                       visitor.visit_id(trait_item.hir_id());
        .                       visitor.visit_ty(ty);
        .                       walk_list!(visitor, visit_nested_body, default);
        .                   }
      112 ( 0.00%)          TraitItemKind::Fn(ref sig, TraitFn::Required(param_names)) => {
       84 ( 0.00%)              visitor.visit_id(trait_item.hir_id());
      784 ( 0.00%)              visitor.visit_fn_decl(&sig.decl);
       84 ( 0.00%)              for &param_name in param_names {
        .                           visitor.visit_ident(param_name);
        .                       }
        .                   }
      371 ( 0.00%)          TraitItemKind::Fn(ref sig, TraitFn::Provided(body_id)) => {
      126 ( 0.00%)              visitor.visit_fn(
      651 ( 0.00%)                  FnKind::Method(trait_item.ident, sig, None),
      196 ( 0.00%)                  &sig.decl,
        .                           body_id,
       28 ( 0.00%)                  trait_item.span,
       77 ( 0.00%)                  trait_item.hir_id(),
        .                       );
        .                   }
        .                   TraitItemKind::Type(bounds, ref default) => {
        .                       visitor.visit_id(trait_item.hir_id());
        .                       walk_list!(visitor, visit_param_bound, bounds);
        .                       walk_list!(visitor, visit_ty, default);
        .                   }
        .               }
    1,589 ( 0.00%)  }
        .           
      280 ( 0.00%)  pub fn walk_trait_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, trait_item_ref: &'v TraitItemRef) {
        .               // N.B., deliberately force a compilation error if/when new fields are added.
      525 ( 0.00%)      let TraitItemRef { id, ident, ref kind, span: _, ref defaultness } = *trait_item_ref;
      245 ( 0.00%)      visitor.visit_nested_trait_item(id);
        .               visitor.visit_ident(ident);
        .               visitor.visit_associated_item_kind(kind);
        .               visitor.visit_defaultness(defaultness);
      280 ( 0.00%)  }
        .           
    6,608 ( 0.00%)  pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplItem<'v>) {
        .               // N.B., deliberately force a compilation error if/when new fields are added.
      280 ( 0.00%)      let ImplItem { def_id: _, ident, ref vis, ref defaultness, ref generics, ref kind, span: _ } =
        .                   *impl_item;
        .           
        .               visitor.visit_ident(ident);
       28 ( 0.00%)      visitor.visit_vis(vis);
        .               visitor.visit_defaultness(defaultness);
      252 ( 0.00%)      visitor.visit_generics(generics);
    3,780 ( 0.00%)      match *kind {
        .                   ImplItemKind::Const(ref ty, body) => {
        .                       visitor.visit_id(impl_item.hir_id());
        .                       visitor.visit_ty(ty);
        .                       visitor.visit_nested_body(body);
        .                   }
    1,988 ( 0.00%)          ImplItemKind::Fn(ref sig, body_id) => {
      448 ( 0.00%)              visitor.visit_fn(
    2,604 ( 0.00%)                  FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis)),
      756 ( 0.00%)                  &sig.decl,
        .                           body_id,
      112 ( 0.00%)                  impl_item.span,
      336 ( 0.00%)                  impl_item.hir_id(),
        .                       );
        .                   }
        .                   ImplItemKind::TyAlias(ref ty) => {
        .                       visitor.visit_id(impl_item.hir_id());
        .                       visitor.visit_ty(ty);
        .                   }
        .               }
    5,068 ( 0.00%)  }
        .           
        .           pub fn walk_foreign_item_ref<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               foreign_item_ref: &'v ForeignItemRef,
        .           ) {
        .               // N.B., deliberately force a compilation error if/when new fields are added.
        .               let ForeignItemRef { id, ident, span: _ } = *foreign_item_ref;
        .               visitor.visit_nested_foreign_item(id);
        .               visitor.visit_ident(ident);
        .           }
        .           
      224 ( 0.00%)  pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'v ImplItemRef) {
        .               // N.B., deliberately force a compilation error if/when new fields are added.
      392 ( 0.00%)      let ImplItemRef { id, ident, ref kind, span: _, ref defaultness, trait_item_def_id: _ } =
        .                   *impl_item_ref;
      140 ( 0.00%)      visitor.visit_nested_impl_item(id);
        .               visitor.visit_ident(ident);
        .               visitor.visit_associated_item_kind(kind);
        .               visitor.visit_defaultness(defaultness);
      224 ( 0.00%)  }
        .           
        .           pub fn walk_struct_def<'v, V: Visitor<'v>>(
        .               visitor: &mut V,
        .               struct_definition: &'v VariantData<'v>,
        .           ) {
        .               walk_list!(visitor, visit_id, struct_definition.ctor_hir_id());
        .               walk_list!(visitor, visit_field_def, struct_definition.fields());
        .           }
-- line 1078 ----------------------------------------
-- line 1079 ----------------------------------------
        .           
        .           pub fn walk_field_def<'v, V: Visitor<'v>>(visitor: &mut V, field: &'v FieldDef<'v>) {
        .               visitor.visit_id(field.hir_id);
        .               visitor.visit_vis(&field.vis);
        .               visitor.visit_ident(field.ident);
        .               visitor.visit_ty(&field.ty);
        .           }
        .           
    4,671 ( 0.00%)  pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block<'v>) {
      144 ( 0.00%)      visitor.visit_id(block.hir_id);
    1,258 ( 0.00%)      walk_list!(visitor, visit_stmt, block.stmts);
    3,841 ( 0.00%)      walk_list!(visitor, visit_expr, &block.expr);
      864 ( 0.00%)  }
        .           
        .           pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt<'v>) {
        .               visitor.visit_id(statement.hir_id);
        .               match statement.kind {
        .                   StmtKind::Local(ref local) => visitor.visit_local(local),
        .                   StmtKind::Item(item) => visitor.visit_nested_item(item),
        .                   StmtKind::Expr(ref expression) | StmtKind::Semi(ref expression) => {
        .                       visitor.visit_expr(expression)
-- line 1099 ----------------------------------------
-- line 1116 ----------------------------------------
        .           pub fn walk_let_expr<'v, V: Visitor<'v>>(visitor: &mut V, let_expr: &'v Let<'v>) {
        .               // match the visit order in walk_local
        .               visitor.visit_expr(let_expr.init);
        .               visitor.visit_id(let_expr.hir_id);
        .               visitor.visit_pat(let_expr.pat);
        .               walk_list!(visitor, visit_ty, let_expr.ty);
        .           }
        .           
9,150,084 ( 0.96%)  pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {
1,949,940 ( 0.20%)      visitor.visit_id(expression.hir_id);
5,022,495 ( 0.53%)      match expression.kind {
        .                   ExprKind::Box(ref subexpression) => visitor.visit_expr(subexpression),
        .                   ExprKind::Array(subexpressions) => {
1,402,032 ( 0.15%)              walk_list!(visitor, visit_expr, subexpressions);
        .                   }
        .                   ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),
        .                   ExprKind::Repeat(ref element, ref count) => {
        .                       visitor.visit_expr(element);
        .                       visitor.visit_array_length(count)
        .                   }
        .                   ExprKind::Struct(ref qpath, fields, ref optional_base) => {
        .                       visitor.visit_qpath(qpath, expression.hir_id, expression.span);
-- line 1137 ----------------------------------------
-- line 1140 ----------------------------------------
        .                           visitor.visit_ident(field.ident);
        .                           visitor.visit_expr(&field.expr)
        .                       }
        .                       walk_list!(visitor, visit_expr, optional_base);
        .                   }
        .                   ExprKind::Tup(subexpressions) => {
        .                       walk_list!(visitor, visit_expr, subexpressions);
        .                   }
    2,156 ( 0.00%)          ExprKind::Call(ref callee_expression, arguments) => {
    1,960 ( 0.00%)              visitor.visit_expr(callee_expression);
    3,808 ( 0.00%)              walk_list!(visitor, visit_expr, arguments);
        .                   }
    2,224 ( 0.00%)          ExprKind::MethodCall(ref segment, arguments, _) => {
    1,391 ( 0.00%)              visitor.visit_path_segment(expression.span, segment);
    2,164 ( 0.00%)              walk_list!(visitor, visit_expr, arguments);
        .                   }
      374 ( 0.00%)          ExprKind::Binary(_, ref left_expression, ref right_expression) => {
    1,936 ( 0.00%)              visitor.visit_expr(left_expression);
      902 ( 0.00%)              visitor.visit_expr(right_expression)
        .                   }
        .                   ExprKind::AddrOf(_, _, ref subexpression) | ExprKind::Unary(_, ref subexpression) => {
      116 ( 0.00%)              visitor.visit_expr(subexpression)
        .                   }
        .                   ExprKind::Cast(ref subexpression, ref typ) | ExprKind::Type(ref subexpression, ref typ) => {
        .                       visitor.visit_expr(subexpression);
        .                       visitor.visit_ty(typ)
        .                   }
        .                   ExprKind::DropTemps(ref subexpression) => {
        .                       visitor.visit_expr(subexpression);
        .                   }
-- line 1169 ----------------------------------------
-- line 1172 ----------------------------------------
        .                       visitor.visit_expr(cond);
        .                       visitor.visit_expr(then);
        .                       walk_list!(visitor, visit_expr, else_opt);
        .                   }
        .                   ExprKind::Loop(ref block, ref opt_label, _, _) => {
        .                       walk_list!(visitor, visit_label, opt_label);
        .                       visitor.visit_block(block);
        .                   }
      102 ( 0.00%)          ExprKind::Match(ref subexpression, arms, _) => {
      142 ( 0.00%)              visitor.visit_expr(subexpression);
      208 ( 0.00%)              walk_list!(visitor, visit_arm, arms);
        .                   }
        .                   ExprKind::Closure(_, ref function_declaration, body, _fn_decl_span, _gen) => visitor
        .                       .visit_fn(
        .                           FnKind::Closure,
        .                           function_declaration,
        .                           body,
        .                           expression.span,
        .                           expression.hir_id,
        .                       ),
        .                   ExprKind::Block(ref block, ref opt_label) => {
       36 ( 0.00%)              walk_list!(visitor, visit_label, opt_label);
    1,402 ( 0.00%)              visitor.visit_block(block);
        .                   }
        .                   ExprKind::Assign(ref lhs, ref rhs, _) => {
        .                       visitor.visit_expr(rhs);
        .                       visitor.visit_expr(lhs)
        .                   }
        .                   ExprKind::AssignOp(_, ref left_expression, ref right_expression) => {
        .                       visitor.visit_expr(right_expression);
        .                       visitor.visit_expr(left_expression);
-- line 1202 ----------------------------------------
-- line 1204 ----------------------------------------
        .                   ExprKind::Field(ref subexpression, ident) => {
        .                       visitor.visit_expr(subexpression);
        .                       visitor.visit_ident(ident);
        .                   }
        .                   ExprKind::Index(ref main_expression, ref index_expression) => {
        .                       visitor.visit_expr(main_expression);
        .                       visitor.visit_expr(index_expression)
        .                   }
    3,742 ( 0.00%)          ExprKind::Path(ref qpath) => {
   12,380 ( 0.00%)              visitor.visit_qpath(qpath, expression.hir_id, expression.span);
        .                   }
        .                   ExprKind::Break(ref destination, ref opt_expr) => {
        .                       walk_list!(visitor, visit_label, &destination.label);
        .                       walk_list!(visitor, visit_expr, opt_expr);
        .                   }
        .                   ExprKind::Continue(ref destination) => {
        .                       walk_list!(visitor, visit_label, &destination.label);
        .                   }
-- line 1221 ----------------------------------------
-- line 1225 ----------------------------------------
        .                   ExprKind::InlineAsm(ref asm) => {
        .                       walk_inline_asm(visitor, asm);
        .                   }
        .                   ExprKind::Yield(ref subexpression, _) => {
        .                       visitor.visit_expr(subexpression);
        .                   }
        .                   ExprKind::Lit(_) | ExprKind::Err => {}
        .               }
7,981,592 ( 0.84%)  }
        .           
      767 ( 0.00%)  pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm<'v>) {
       52 ( 0.00%)      visitor.visit_id(arm.hir_id);
      884 ( 0.00%)      visitor.visit_pat(&arm.pat);
    2,469 ( 0.00%)      if let Some(ref g) = arm.guard {
        .                   match g {
        .                       Guard::If(ref e) => visitor.visit_expr(e),
        .                       Guard::IfLet(ref pat, ref e) => {
        .                           visitor.visit_pat(pat);
        .                           visitor.visit_expr(e);
        .                       }
        .                   }
        .               }
    1,066 ( 0.00%)      visitor.visit_expr(&arm.body);
      312 ( 0.00%)  }
        .           
    1,054 ( 0.00%)  pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility<'v>) {
    3,152 ( 0.00%)      if let VisibilityKind::Restricted { ref path, hir_id } = vis.node {
        .                   visitor.visit_id(hir_id);
        .                   visitor.visit_path(path, hir_id)
        .               }
    1,240 ( 0.00%)  }
        .           
        .           pub fn walk_associated_item_kind<'v, V: Visitor<'v>>(_: &mut V, _: &'v AssocItemKind) {
        .               // No visitable content here: this fn exists so you can call it if
        .               // the right thing to do, should content be added in the future,
        .               // would be to walk it.
        .           }
        .           
        .           pub fn walk_defaultness<'v, V: Visitor<'v>>(_: &mut V, _: &'v Defaultness) {
-- line 1263 ----------------------------------------

  133,823 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_hir/src/intravisit.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs
--------------------------------------------------------------------------------
Ir               

-- line 685 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<(T, U), F::Error> {
      4 ( 0.00%)          Ok((self.0.try_fold_with(folder)?, self.1.try_fold_with(folder)?))
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    186 ( 0.00%)          self.0.visit_with(visitor)?;
      2 ( 0.00%)          self.1.visit_with(visitor)
      .               }
      .           }
      .           
      .           impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>
      .               for (A, B, C)
      .           {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
-- line 706 ----------------------------------------
-- line 826 ----------------------------------------
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   self.try_map_id(|value| value.try_fold_with(folder))
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    736 ( 0.00%)          (**self).visit_with(visitor)
      .               }
      .           }
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Vec<T> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
  1,430 ( 0.00%)          self.try_map_id(|t| t.try_fold_with(folder))
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Box<[T]> {
-- line 851 ----------------------------------------
-- line 857 ----------------------------------------
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {
    664 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
 14,391 ( 0.00%)          self.try_map_bound(|ty| ty.try_fold_with(folder))
    830 ( 0.00%)      }
      .           
      .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
  6,466 ( 0.00%)          folder.try_fold_binder(self)
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      9 ( 0.00%)          self.as_ref().skip_binder().visit_with(visitor)
      .               }
      .           
      .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   visitor.visit_binder(self)
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
-- line 885 ----------------------------------------
-- line 895 ----------------------------------------
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
  1,023 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_type_list(v))
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {
-- line 911 ----------------------------------------
-- line 949 ----------------------------------------
      .                           }
      .                       },
      .                   })
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   use crate::ty::InstanceDef::*;
      .                   self.substs.visit_with(visitor)?;
  1,585 ( 0.00%)          match self.def {
      .                       Item(def) => def.visit_with(visitor),
      .                       VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {
      .                           did.visit_with(visitor)
      .                       }
      .                       FnPtrShim(did, ty) | CloneShim(did, ty) => {
      .                           did.visit_with(visitor)?;
      .                           ty.visit_with(visitor)
      .                       }
-- line 965 ----------------------------------------
-- line 976 ----------------------------------------
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   Ok(Self { instance: self.instance.try_fold_with(folder)?, promoted: self.promoted })
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    492 ( 0.00%)          self.instance.visit_with(visitor)
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {
  1,076 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
170,560 ( 0.02%)          let kind = match *self.kind() {
    582 ( 0.00%)              ty::RawPtr(tm) => ty::RawPtr(tm.try_fold_with(folder)?),
  1,831 ( 0.00%)              ty::Array(typ, sz) => ty::Array(typ.try_fold_with(folder)?, sz.try_fold_with(folder)?),
  1,708 ( 0.00%)              ty::Slice(typ) => ty::Slice(typ.try_fold_with(folder)?),
    352 ( 0.00%)              ty::Adt(tid, substs) => ty::Adt(tid, substs.try_fold_with(folder)?),
      .                       ty::Dynamic(trait_ty, region) => {
      .                           ty::Dynamic(trait_ty.try_fold_with(folder)?, region.try_fold_with(folder)?)
      .                       }
    192 ( 0.00%)              ty::Tuple(ts) => ty::Tuple(ts.try_fold_with(folder)?),
  1,312 ( 0.00%)              ty::FnDef(def_id, substs) => ty::FnDef(def_id, substs.try_fold_with(folder)?),
     60 ( 0.00%)              ty::FnPtr(f) => ty::FnPtr(f.try_fold_with(folder)?),
  6,333 ( 0.00%)              ty::Ref(r, ty, mutbl) => {
 10,570 ( 0.00%)                  ty::Ref(r.try_fold_with(folder)?, ty.try_fold_with(folder)?, mutbl)
      .                       }
      .                       ty::Generator(did, substs, movability) => {
      .                           ty::Generator(did, substs.try_fold_with(folder)?, movability)
      .                       }
      .                       ty::GeneratorWitness(types) => ty::GeneratorWitness(types.try_fold_with(folder)?),
     96 ( 0.00%)              ty::Closure(did, substs) => ty::Closure(did, substs.try_fold_with(folder)?),
    192 ( 0.00%)              ty::Projection(data) => ty::Projection(data.try_fold_with(folder)?),
      .                       ty::Opaque(did, substs) => ty::Opaque(did, substs.try_fold_with(folder)?),
      .           
      .                       ty::Bool
      .                       | ty::Char
      .                       | ty::Str
      .                       | ty::Int(_)
      .                       | ty::Uint(_)
      .                       | ty::Float(_)
-- line 1020 ----------------------------------------
-- line 1022 ----------------------------------------
      .                       | ty::Infer(_)
      .                       | ty::Param(..)
      .                       | ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Never
      .                       | ty::Foreign(..) => return Ok(self),
      .                   };
      .           
 13,876 ( 0.00%)          Ok(if *self.kind() == kind { self } else { folder.tcx().mk_ty(kind) })
  1,596 ( 0.00%)      }
      .           
      .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
 61,109 ( 0.01%)          folder.try_fold_ty(self)
      .               }
      .           
225,353 ( 0.02%)      fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
224,609 ( 0.02%)          match self.kind() {
      .                       ty::RawPtr(ref tm) => tm.visit_with(visitor),
    112 ( 0.00%)              ty::Array(typ, sz) => {
    224 ( 0.00%)                  typ.visit_with(visitor)?;
  1,008 ( 0.00%)                  sz.visit_with(visitor)
      .                       }
      .                       ty::Slice(typ) => typ.visit_with(visitor),
      .                       ty::Adt(_, substs) => substs.visit_with(visitor),
      .                       ty::Dynamic(ref trait_ty, ref reg) => {
      .                           trait_ty.visit_with(visitor)?;
      .                           reg.visit_with(visitor)
      .                       }
      .                       ty::Tuple(ts) => ts.visit_with(visitor),
      .                       ty::FnDef(_, substs) => substs.visit_with(visitor),
      .                       ty::FnPtr(ref f) => f.visit_with(visitor),
      .                       ty::Ref(r, ty, _) => {
    468 ( 0.00%)                  r.visit_with(visitor)?;
      .                           ty.visit_with(visitor)
      .                       }
      .                       ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),
      .                       ty::GeneratorWitness(ref types) => types.visit_with(visitor),
      .                       ty::Closure(_did, ref substs) => substs.visit_with(visitor),
      .                       ty::Projection(ref data) => data.visit_with(visitor),
      .                       ty::Opaque(_, ref substs) => substs.visit_with(visitor),
      .           
-- line 1062 ----------------------------------------
-- line 1069 ----------------------------------------
      .                       | ty::Error(_)
      .                       | ty::Infer(_)
      .                       | ty::Bound(..)
      .                       | ty::Placeholder(..)
      .                       | ty::Param(..)
      .                       | ty::Never
      .                       | ty::Foreign(..) => ControlFlow::CONTINUE,
      .                   }
222,285 ( 0.02%)      }
      .           
      .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
 71,979 ( 0.01%)          visitor.visit_ty(self)
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for ty::Region<'tcx> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   _folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   Ok(self)
      .               }
      .           
      .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
    267 ( 0.00%)          folder.try_fold_region(self)
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, _visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   ControlFlow::CONTINUE
      .               }
      .           
      .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    797 ( 0.00%)          visitor.visit_region(*self)
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {
    996 ( 0.00%)      fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
      .                   folder.try_fold_predicate(self)
    830 ( 0.00%)      }
      .           
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
  1,614 ( 0.00%)          let new = self.inner.kind.try_fold_with(folder)?;
 16,194 ( 0.00%)          Ok(folder.tcx().reuse_or_mk_predicate(self, new))
    498 ( 0.00%)      }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   self.inner.kind.visit_with(visitor)
      .               }
      .           
      .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  2,650 ( 0.00%)          visitor.visit_predicate(*self)
      .               }
      .           
      .               fn has_vars_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {
    639 ( 0.00%)          self.inner.outer_exclusive_binder > binder
    639 ( 0.00%)      }
      .           
      .               fn has_type_flags(&self, flags: ty::TypeFlags) -> bool {
  2,773 ( 0.00%)          self.inner.flags.intersects(flags)
  2,773 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
    939 ( 0.00%)          ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   self.iter().try_for_each(|p| p.visit_with(visitor))
      .               }
      .           }
      .           
      .           impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> TypeFoldable<'tcx> for IndexVec<I, T> {
-- line 1148 ----------------------------------------
-- line 1154 ----------------------------------------
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
      .                   self.iter().try_for_each(|t| t.visit_with(visitor))
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {
    288 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
 59,128 ( 0.01%)          let ty = self.ty.try_fold_with(folder)?;
826,374 ( 0.09%)          let val = self.val.try_fold_with(folder)?;
265,429 ( 0.03%)          if ty != self.ty || val != self.val {
  1,144 ( 0.00%)              Ok(folder.tcx().mk_const(ty::Const { ty, val }))
      .                   } else {
      .                       Ok(self)
      .                   }
    288 ( 0.00%)      }
      .           
      .               fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {
    164 ( 0.00%)          folder.try_fold_const(self)
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     31 ( 0.00%)          self.ty.visit_with(visitor)?;
      .                   self.val.visit_with(visitor)
      .               }
      .           
    672 ( 0.00%)      fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    143 ( 0.00%)          visitor.visit_const(self)
    784 ( 0.00%)      }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for ty::ConstKind<'tcx> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
325,189 ( 0.03%)          Ok(match self {
      .                       ty::ConstKind::Infer(ic) => ty::ConstKind::Infer(ic.try_fold_with(folder)?),
      .                       ty::ConstKind::Param(p) => ty::ConstKind::Param(p.try_fold_with(folder)?),
    190 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => ty::ConstKind::Unevaluated(uv.try_fold_with(folder)?),
      .                       ty::ConstKind::Value(_)
      .                       | ty::ConstKind::Bound(..)
      .                       | ty::ConstKind::Placeholder(..)
234,984 ( 0.02%)              | ty::ConstKind::Error(_) => self,
      .                   })
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     62 ( 0.00%)          match *self {
      .                       ty::ConstKind::Infer(ic) => ic.visit_with(visitor),
      .                       ty::ConstKind::Param(p) => p.visit_with(visitor),
      .                       ty::ConstKind::Unevaluated(uv) => uv.visit_with(visitor),
      .                       ty::ConstKind::Value(_)
      .                       | ty::ConstKind::Bound(..)
      .                       | ty::ConstKind::Placeholder(_)
      .                       | ty::ConstKind::Error(_) => ControlFlow::CONTINUE,
      .                   }
-- line 1214 ----------------------------------------
-- line 1230 ----------------------------------------
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
      .                   Ok(ty::Unevaluated {
      .                       def: self.def,
    506 ( 0.00%)              substs: self.substs.try_fold_with(folder)?,
      .                       promoted: self.promoted,
      .                   })
      .               }
      .           
      .               fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
    155 ( 0.00%)          visitor.visit_unevaluated_const(*self)
      .               }
      .           
      .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
     62 ( 0.00%)          self.substs.visit_with(visitor)
      .               }
      .           }
      .           
      .           impl<'tcx> TypeFoldable<'tcx> for ty::Unevaluated<'tcx, ()> {
      .               fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
      .                   self,
      .                   folder: &mut F,
      .               ) -> Result<Self, F::Error> {
-- line 1256 ----------------------------------------

274,658 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/structural_impls.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
584,103,063 (61.38%)  events annotated

