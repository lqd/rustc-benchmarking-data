--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name wast --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="wasm-module" -C metadata=4dcab3fe997d8ee4 -C extra-filename=-4dcab3fe997d8ee4 --out-dir /usr/home/liquid/tmp/.tmpWmFrFh/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpWmFrFh/target/debug/deps --extern leb128=/usr/home/liquid/tmp/.tmpWmFrFh/target/debug/deps/libleb128-6c4ab1da08ada30d.rmeta --extern memchr=/usr/home/liquid/tmp/.tmpWmFrFh/target/debug/deps/libmemchr-051150136306d02d.rmeta --extern unicode_width=/usr/home/liquid/tmp/.tmpWmFrFh/target/debug/deps/libunicode_width-fb275ef0b0e4657a.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-wast-39.0.0-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                      
--------------------------------------------------------------------------------
39,065,820,955 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
1,625,990,982 ( 4.16%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
  927,870,078 ( 2.38%)  ./malloc/malloc.c:_int_free
  914,488,867 ( 2.34%)  ./malloc/malloc.c:_int_malloc
  839,591,279 ( 2.15%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
  553,069,561 ( 1.42%)  ./malloc/malloc.c:malloc
  410,761,364 ( 1.05%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
  406,685,750 ( 1.04%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
  391,929,319 ( 1.00%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  363,170,589 ( 0.93%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
  358,391,231 ( 0.92%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
  356,047,198 ( 0.91%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
  355,338,363 ( 0.91%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
  345,609,971 ( 0.88%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  322,483,024 ( 0.83%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
  316,026,786 ( 0.81%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  306,491,793 ( 0.78%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
  281,442,944 ( 0.72%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
  267,934,943 ( 0.69%)  ./malloc/malloc.c:free
  253,827,624 ( 0.65%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
  222,933,801 ( 0.57%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  221,703,267 ( 0.57%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  211,712,791 ( 0.54%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<ena::unify::UnificationTable<ena::unify::backing_vec::InPlace<rustc_infer::infer::type_variable::TyVidEqKey, &mut alloc::vec::Vec<ena::unify::VarValue<rustc_infer::infer::type_variable::TyVidEqKey>>, &mut rustc_infer::infer::undo_log::InferCtxtUndoLogs>>>::uninlined_get_root_key
  210,594,648 ( 0.54%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  200,013,898 ( 0.51%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
  182,317,731 ( 0.47%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
  179,144,391 ( 0.46%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
  175,495,540 ( 0.45%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  165,125,372 ( 0.42%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
  161,155,997 ( 0.41%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  152,973,188 ( 0.39%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  144,885,696 ( 0.37%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
  142,438,694 ( 0.36%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
  137,793,700 ( 0.35%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
  135,928,306 ( 0.35%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
  135,772,742 ( 0.35%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
  133,940,929 ( 0.34%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  133,107,315 ( 0.34%)  ./malloc/malloc.c:malloc_consolidate
  132,760,844 ( 0.34%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
  131,703,804 ( 0.34%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
  130,754,939 ( 0.33%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
  126,822,754 ( 0.32%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
  123,563,070 ( 0.32%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
  123,208,902 ( 0.32%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
  122,934,943 ( 0.31%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
  121,939,356 ( 0.31%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
  120,322,954 ( 0.31%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
  118,675,618 ( 0.30%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
  111,286,442 ( 0.28%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
  109,545,705 ( 0.28%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  104,752,287 ( 0.27%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
  104,721,712 ( 0.27%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
  103,380,137 ( 0.26%)  ???:llvm::DAGTypeLegalizer::run()
  102,846,350 ( 0.26%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
  102,716,498 ( 0.26%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
  102,407,990 ( 0.26%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
  101,644,706 ( 0.26%)  ./malloc/malloc.c:unlink_chunk.constprop.0
  101,433,873 ( 0.26%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  101,170,487 ( 0.26%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
   93,041,338 ( 0.24%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
   90,514,168 ( 0.23%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
   89,328,977 ( 0.23%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
   89,019,138 ( 0.23%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
   88,185,548 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::apply_rewrites
   88,062,419 ( 0.23%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
   86,855,095 ( 0.22%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
   86,069,696 ( 0.22%)  ???:llvm::SelectionDAG::Legalize()
   85,608,385 ( 0.22%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
   80,348,442 ( 0.21%)  ./stdlib/msort.c:msort_with_tmp.part.0
   78,206,203 ( 0.20%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
   76,513,456 ( 0.20%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
   74,347,481 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   74,051,596 ( 0.19%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
   73,627,978 ( 0.19%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::compress::<<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>::{closure#0}>
   72,490,492 ( 0.19%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
   70,843,184 ( 0.18%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
   70,749,433 ( 0.18%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
   70,633,716 ( 0.18%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
   70,021,891 ( 0.18%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
   67,449,649 ( 0.17%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
   67,288,337 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
   66,210,808 ( 0.17%)  ./malloc/malloc.c:realloc
   66,100,031 ( 0.17%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
   65,286,831 ( 0.17%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
   64,110,970 ( 0.16%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
   62,286,034 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
   61,277,378 ( 0.16%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
   61,175,337 ( 0.16%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
   60,174,958 ( 0.15%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
   60,157,075 ( 0.15%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
   60,152,229 ( 0.15%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
   59,150,760 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
   58,808,591 ( 0.15%)  ???:llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&)
   58,140,540 ( 0.15%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
   57,634,165 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
   57,503,690 ( 0.15%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
   57,253,049 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
   56,688,789 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
   56,337,441 ( 0.14%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
   55,621,453 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   55,482,135 ( 0.14%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
   55,400,418 ( 0.14%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
   54,906,494 ( 0.14%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
   52,363,994 ( 0.13%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitMemModRMByte(llvm::MCInst const&, unsigned int, unsigned int, unsigned long, bool, unsigned long, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&, bool) const
   52,071,907 ( 0.13%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
   51,214,160 ( 0.13%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
   51,069,095 ( 0.13%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
   50,988,908 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::apply_rewrites
   50,655,124 ( 0.13%)  ???:llvm::MachineFunctionPass::runOnFunction(llvm::Function&)
   50,358,323 ( 0.13%)  ???:llvm::MCELFStreamer::emitInstToData(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   50,282,308 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[&rustc_mir_build::thir::pattern::deconstruct_pat::DeconstructedPat; 2]>>::try_reserve
   50,127,323 ( 0.13%)  ???:llvm::AsmPrinter::emitFunctionBody()
   49,920,174 ( 0.13%)  ???:llvm::MCELFStreamer::emitLabel(llvm::MCSymbol*, llvm::SMLoc)
   48,807,405 ( 0.12%)  ???:llvm::X86RegisterInfo::eliminateFrameIndex(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>, int, unsigned int, llvm::RegScavenger*) const
   47,314,466 ( 0.12%)  ???:llvm::MCObjectStreamer::emitInstruction(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
   47,145,200 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
   47,031,695 ( 0.12%)  ???:(anonymous namespace)::VarLocBasedLDV::collectIDsForRegs(llvm::SmallSet<unsigned int, 32u, std::less<unsigned int> >&, llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> > const&, llvm::CoalescingBitVector<unsigned long> const&, (anonymous namespace)::VarLocBasedLDV::VarLocMap const&)
   46,938,199 ( 0.12%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
   46,464,664 ( 0.12%)  ???:llvm::MCDwarfLineAddr::Encode(llvm::MCContext&, llvm::MCDwarfLineTableParams, long, unsigned long, llvm::raw_ostream&)
   46,380,311 ( 0.12%)  ./malloc/malloc.c:_int_realloc
   46,363,142 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   45,861,303 ( 0.12%)  ???:llvm::MDString::get(llvm::LLVMContext&, llvm::StringRef)
   44,860,654 ( 0.11%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
   44,363,608 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
   43,778,572 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs:<rustc_data_structures::obligation_forest::ObligationForest<rustc_trait_selection::traits::fulfill::PendingPredicateObligation>>::process_obligations::<rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome<rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode>>
   43,421,797 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::SourceFile>::line_begin_pos
   43,421,797 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_line
   43,397,672 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   43,054,892 ( 0.11%)  ???:???
   42,841,880 ( 0.11%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
   42,596,415 ( 0.11%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
   42,429,304 ( 0.11%)  ???:(anonymous namespace)::X86AsmBackend::applyFixup(llvm::MCAssembler const&, llvm::MCFixup const&, llvm::MCValue const&, llvm::MutableArrayRef<char>, unsigned long, bool, llvm::MCSubtargetInfo const*) const
   41,924,681 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
   41,416,449 ( 0.11%)  ???:llvm::LazyCallGraph::Node::populateSlow()
   40,910,100 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
   40,823,979 ( 0.10%)  ???:(anonymous namespace)::RegAllocFast::setPhysReg(llvm::MachineInstr&, llvm::MachineOperand&, unsigned short)
   40,664,612 ( 0.10%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy@GLIBC_2.2.5
   39,702,526 ( 0.10%)  ???:llvm::MCAssembler::layoutSectionOnce(llvm::MCAsmLayout&, llvm::MCSection&)
   39,210,747 ( 0.10%)  ???:llvm::TargetLoweringBase::ArgListEntry::setAttributes(llvm::CallBase const*, unsigned int)
   39,069,469 ( 0.10%)  ???:llvm::CoalescingBitVector<unsigned long>::find(unsigned long) const

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                   

-- line 21 ----------------------------------------
          .           use rustc_target::spec::abi;
          .           use std::borrow::Cow;
          .           use std::cmp::Ordering;
          .           use std::marker::PhantomData;
          .           use std::ops::Range;
          .           use ty::util::IntTypeExt;
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          7 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
          .           pub struct TypeAndMut<'tcx> {
     47,765 ( 0.00%)      pub ty: Ty<'tcx>,
    238,825 ( 0.00%)      pub mutbl: hir::Mutability,
          .           }
          .           
          .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
          .           #[derive(HashStable)]
          .           /// A "free" region `fr` can be interpreted as "some region
          .           /// at least as big as the scope `fr.scope`".
          .           pub struct FreeRegion {
    413,762 ( 0.00%)      pub scope: DefId,
    380,008 ( 0.00%)      pub bound_region: BoundRegionKind,
          .           }
          .           
  2,549,416 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
     10,239 ( 0.00%)  #[derive(HashStable)]
          .           pub enum BoundRegionKind {
          .               /// An anonymous region parameter for a given fn (&T)
     64,367 ( 0.00%)      BrAnon(u32),
          .           
          .               /// Named region parameters for functions (a in &'a T)
          .               ///
          .               /// The `DefId` is needed to distinguish free regions in
          .               /// the event of shadowing.
     19,836 ( 0.00%)      BrNamed(DefId, Symbol),
          .           
          .               /// Anonymous region for the implicit env pointer parameter
          .               /// to a closure
          .               BrEnv,
          .           }
          .           
     21,823 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
          .           #[derive(HashStable)]
          .           pub struct BoundRegion {
    460,351 ( 0.00%)      pub var: BoundVar,
    388,391 ( 0.00%)      pub kind: BoundRegionKind,
          .           }
          .           
          .           impl BoundRegionKind {
          .               pub fn is_named(&self) -> bool {
          .                   match *self {
          .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
          .                       _ => false,
          .                   }
          .               }
          .           }
          .           
          .           /// Defines the kinds of types.
          .           ///
          .           /// N.B., if you change this, you'll probably want to change the corresponding
          .           /// AST structure in `rustc_ast/src/ast.rs` as well.
 80,058,877 ( 0.20%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
  1,069,051 ( 0.00%)  #[derive(HashStable)]
          .           #[rustc_diagnostic_item = "TyKind"]
          .           pub enum TyKind<'tcx> {
          .               /// The primitive boolean type. Written as `bool`.
          .               Bool,
          .           
          .               /// The primitive character type; holds a Unicode scalar value
          .               /// (a non-surrogate code point). Written as `char`.
          .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
          .               Float(ty::FloatTy),
          .           
          .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
          .               ///
          .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
          .               /// That is, even after substitution it is possible that there are type
          .               /// variables. This happens when the `Adt` corresponds to an ADT
          .               /// definition and not a concrete use of it.
 15,002,054 ( 0.04%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
          .           
          .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
          .               Foreign(DefId),
          .           
          .               /// The pointee of a string slice. Written as `str`.
          .               Str,
          .           
          .               /// An array with the given length. Written as `[T; n]`.
     60,960 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
          .           
          .               /// The pointee of an array slice. Written as `[T]`.
          .               Slice(Ty<'tcx>),
          .           
          .               /// A raw pointer. Written as `*mut T` or `*const T`
          .               RawPtr(TypeAndMut<'tcx>),
          .           
          .               /// A reference; a pointer with an associated lifetime. Written as
          .               /// `&'a mut T` or `&'a T`.
  6,031,425 ( 0.02%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
          .           
          .               /// The anonymous type of a function declaration/definition. Each
          .               /// function has a unique type, which is output (for a function
          .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
          .               ///
          .               /// For example the type of `bar` here:
          .               ///
          .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
          .               ///
          .               /// ```rust
          .               /// fn foo() -> i32 { 1 }
          .               /// let bar: fn() -> i32 = foo;
          .               /// ```
          .               FnPtr(PolyFnSig<'tcx>),
          .           
          .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    149,372 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
          .           
          .               /// The anonymous type of a closure. Used to represent the type of
          .               /// `|a| a`.
          .               Closure(DefId, SubstsRef<'tcx>),
          .           
          .               /// The anonymous type of a generator. Used to represent the type of
          .               /// `|a| yield a`.
          .               Generator(DefId, SubstsRef<'tcx>, hir::Movability),
-- line 159 ----------------------------------------
-- line 180 ----------------------------------------
          .               /// The substitutions are for the generics of the function in question.
          .               /// After typeck, the concrete type can be found in the `types` map.
          .               Opaque(DefId, SubstsRef<'tcx>),
          .           
          .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
          .               Param(ParamTy),
          .           
          .               /// Bound type variable, used only when preparing a trait query.
     16,880 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
          .           
          .               /// A placeholder type - universally quantified higher-ranked type.
          .               Placeholder(ty::PlaceholderType),
          .           
          .               /// A type variable used during type checking.
          .               Infer(InferTy),
          .           
          .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
          .               pub closure_kind_ty: T,
          .               pub closure_sig_as_fn_ptr_ty: T,
          .               pub tupled_upvars_ty: T,
          .           }
          .           
          .           impl<'tcx> ClosureSubsts<'tcx> {
          .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
          .               /// for the closure parent, alongside additional closure-specific components.
        247 ( 0.00%)      pub fn new(
          .                   tcx: TyCtxt<'tcx>,
          .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
          .               ) -> ClosureSubsts<'tcx> {
          .                   ClosureSubsts {
          .                       substs: tcx.mk_substs(
        494 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        988 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
          .                                   .iter()
          .                                   .map(|&ty| ty.into()),
          .                           ),
          .                       ),
          .                   }
        494 ( 0.00%)      }
          .           
          .               /// Divides the closure substs into their respective components.
          .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
      9,074 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
          .                   match self.substs[..] {
     61,334 ( 0.00%)              [
     17,040 ( 0.00%)                  ref parent_substs @ ..,
     17,879 ( 0.00%)                  closure_kind_ty,
      8,010 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     13,854 ( 0.00%)                  tupled_upvars_ty,
     36,296 ( 0.00%)              ] => ClosureSubstsParts {
          .                           parent_substs,
          .                           closure_kind_ty,
          .                           closure_sig_as_fn_ptr_ty,
          .                           tupled_upvars_ty,
          .                       },
          .                       _ => bug!("closure substs missing synthetics"),
          .                   }
     27,222 ( 0.00%)      }
          .           
          .               /// Returns `true` only if enough of the synthetic types are known to
          .               /// allow using all of the methods on `ClosureSubsts` without panicking.
          .               ///
          .               /// Used primarily by `ty::print::pretty` to be able to handle closure
          .               /// types that haven't had their synthetic types substituted in.
          2 ( 0.00%)      pub fn is_valid(self) -> bool {
          4 ( 0.00%)          self.substs.len() >= 3
          4 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
          4 ( 0.00%)      }
          .           
          .               /// Returns the substitutions of the closure's parent.
          .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
          .                   self.split().parent_substs
          .               }
          .           
          .               /// Returns an iterator over the list of types of captured paths by the closure.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
      6,618 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
      7,911 ( 0.00%)          match self.tupled_upvars_ty().kind() {
          .                       TyKind::Error(_) => None,
      4,068 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
      4,412 ( 0.00%)      }
          .           
          .               /// Returns the tuple type representing the upvars for this closure.
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     43,591 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
          .               }
          .           
          .               /// Returns the closure kind for this closure; may return a type
          .               /// variable during inference. To get the closure kind during
          .               /// inference, use `infcx.closure_kind(substs)`.
      3,358 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
          .                   self.split().closure_kind_ty.expect_ty()
      6,716 ( 0.00%)      }
          .           
          .               /// Returns the `fn` pointer type representing the closure signature for this
          .               /// closure.
          .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
          .               // type is known at the time of the creation of `ClosureSubsts`,
          .               // see `rustc_typeck::check::closure`.
          .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
          .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
          .               }
          .           
          .               /// Returns the closure kind for this closure; only usable outside
          .               /// of an inference context, because in that context we know that
          .               /// there are no type variables.
          .               ///
          .               /// If you have an inference context, use `infcx.closure_kind()`.
         38 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        521 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
         76 ( 0.00%)      }
          .           
          .               /// Extracts the signature from the closure.
      4,027 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
          .                   let ty = self.sig_as_fn_ptr_ty();
      8,054 ( 0.00%)          match ty.kind() {
     16,108 ( 0.00%)              ty::FnPtr(sig) => *sig,
          .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
          .                   }
     12,081 ( 0.00%)      }
          .           }
          .           
          .           /// Similar to `ClosureSubsts`; see the above documentation for more.
          .           #[derive(Copy, Clone, Debug, TypeFoldable)]
          .           pub struct GeneratorSubsts<'tcx> {
          .               pub substs: SubstsRef<'tcx>,
          .           }
          .           
-- line 448 ----------------------------------------
-- line 676 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> UpvarSubsts<'tcx> {
          .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
          .               /// In case there was a type error in figuring out the types of the captured path, an
          .               /// empty iterator is returned.
          .               #[inline]
          .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
        570 ( 0.00%)          let tupled_tys = match self {
        817 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
          .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
          .                   };
          .           
      1,349 ( 0.00%)          match tupled_tys.kind() {
          .                       TyKind::Error(_) => None,
      1,102 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
          .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
          .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
          .                   }
          .                   .into_iter()
          .                   .flatten()
          .               }
          .           
          .               #[inline]
          .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      1,064 ( 0.00%)          match self {
      1,131 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
          .                       UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
          .                   }
          .               }
          .           }
          .           
          .           /// An inline const is modeled like
          .           ///
          .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
-- line 710 ----------------------------------------
-- line 760 ----------------------------------------
          .               }
          .           
          .               /// Returns the type of this inline const.
          .               pub fn ty(self) -> Ty<'tcx> {
          .                   self.split().ty.expect_ty()
          .               }
          .           }
          .           
    110,776 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
    123,138 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub enum ExistentialPredicate<'tcx> {
          .               /// E.g., `Iterator`.
          .               Trait(ExistentialTraitRef<'tcx>),
          .               /// E.g., `Iterator::Item = T`.
          .               Projection(ExistentialProjection<'tcx>),
          .               /// E.g., `Send`.
         30 ( 0.00%)      AutoTrait(DefId),
          .           }
          .           
          .           impl<'tcx> ExistentialPredicate<'tcx> {
          .               /// Compares via an ordering that will not change if modules are reordered or other changes are
          .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
        700 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
          .                   use self::ExistentialPredicate::*;
        592 ( 0.00%)          match (*self, *other) {
          .                       (Trait(_), Trait(_)) => Ordering::Equal,
          .                       (Projection(ref a), Projection(ref b)) => {
          .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
          .                       }
          .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
          .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
          .                       }
          .                       (Trait(_), _) => Ordering::Less,
          .                       (Projection(_), Trait(_)) => Ordering::Greater,
          .                       (Projection(_), _) => Ordering::Less,
          .                       (AutoTrait(_), _) => Ordering::Greater,
          .                   }
        840 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     13,563 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
          .                   use crate::ty::ToPredicate;
      7,535 ( 0.00%)          match self.skip_binder() {
          .                       ExistentialPredicate::Trait(tr) => {
          .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
          .                       }
          .                       ExistentialPredicate::Projection(p) => {
          .                           self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
          .                       }
          .                       ExistentialPredicate::AutoTrait(did) => {
          .                           let trait_ref = self.rebind(ty::TraitRef {
          .                               def_id: did,
          .                               substs: tcx.mk_substs_trait(self_ty, &[]),
          .                           });
          .                           trait_ref.without_const().to_predicate(tcx)
          .                       }
          .                   }
     12,056 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
          .               /// Returns the "principal `DefId`" of this set of existential predicates.
          .               ///
          .               /// A Rust trait object type consists (in addition to a lifetime bound)
          .               /// of a set of trait bounds, which are separated into any number
          .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
          .               /// are the set `{Sync}`.
          .               ///
          .               /// It is also possible to have a "trivial" trait object that
          .               /// consists only of auto traits, with no principal - for example,
          .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
          .               /// is `{Send, Sync}`, while there is no principal. These trait objects
          .               /// have a "trivial" vtable consisting of just the size, alignment,
          .               /// and destructor.
      1,663 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     11,229 ( 0.00%)          self[0]
      6,242 ( 0.00%)              .map_bound(|this| match this {
          .                           ExistentialPredicate::Trait(tr) => Some(tr),
          .                           _ => None,
      6,652 ( 0.00%)              })
          .                       .transpose()
      4,989 ( 0.00%)      }
          .           
      1,509 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
          .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
      3,018 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn projection_bounds<'a>(
          .                   &'a self,
          .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
          .                   self.iter().filter_map(|predicate| {
         36 ( 0.00%)              predicate
        256 ( 0.00%)                  .map_bound(|pred| match pred {
         20 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
          .                               _ => None,
          .                           })
          .                           .transpose()
          .                   })
          .               }
          .           
          .               #[inline]
          .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
-- line 875 ----------------------------------------
-- line 886 ----------------------------------------
          .           ///     T: Foo<U>
          .           ///
          .           /// This would be represented by a trait-reference where the `DefId` is the
          .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
          .           /// and `U` as parameter 1.
          .           ///
          .           /// Trait references also appear in object types like `Foo<U>`, but in
          .           /// that case the `Self` parameter is absent from the substitutions.
     35,440 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  3,763,809 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct TraitRef<'tcx> {
      8,168 ( 0.00%)      pub def_id: DefId,
  2,777,883 ( 0.01%)      pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           impl<'tcx> TraitRef<'tcx> {
      5,596 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
          .                   TraitRef { def_id, substs }
     22,384 ( 0.00%)      }
          .           
          .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
          .               /// are the parameters defined on trait.
        945 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
        420 ( 0.00%)          ty::Binder::dummy(TraitRef {
          .                       def_id,
        630 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
          .                   })
        840 ( 0.00%)      }
          .           
          .               #[inline]
         27 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
          .                   self.substs.type_at(0)
         18 ( 0.00%)      }
          .           
     30,952 ( 0.00%)      pub fn from_method(
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_id: DefId,
          .                   substs: SubstsRef<'tcx>,
          .               ) -> ty::TraitRef<'tcx> {
          .                   let defs = tcx.generics_of(trait_id);
          .           
      3,869 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     42,559 ( 0.00%)      }
          .           }
          .           
          .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
          .           
          .           impl<'tcx> PolyTraitRef<'tcx> {
          .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
          .                   self.map_bound_ref(|tr| tr.self_ty())
          .               }
          .           
          .               pub fn def_id(&self) -> DefId {
      4,785 ( 0.00%)          self.skip_binder().def_id
      1,595 ( 0.00%)      }
          .           
     11,896 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     23,792 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
          .                       trait_ref,
          .                       constness: ty::BoundConstness::NotConst,
          .                       polarity: ty::ImplPolarity::Positive,
          .                   })
     11,896 ( 0.00%)      }
          .           }
          .           
          .           /// An existential reference to a trait, where `Self` is erased.
          .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
          .           ///
          .           ///     exists T. T: Trait<'a, 'b, X, Y>
          .           ///
          .           /// The substitutions don't include the erased `Self`, only trait
          .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
        176 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
     61,745 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ExistentialTraitRef<'tcx> {
      8,164 ( 0.00%)      pub def_id: DefId,
     72,877 ( 0.00%)      pub substs: SubstsRef<'tcx>,
          .           }
          .           
          .           impl<'tcx> ExistentialTraitRef<'tcx> {
      1,212 ( 0.00%)      pub fn erase_self_ty(
          .                   tcx: TyCtxt<'tcx>,
          .                   trait_ref: ty::TraitRef<'tcx>,
          .               ) -> ty::ExistentialTraitRef<'tcx> {
          .                   // Assert there is a Self.
          .                   trait_ref.substs.type_at(0);
          .           
          .                   ty::ExistentialTraitRef {
          .                       def_id: trait_ref.def_id,
          .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
          .                   }
      1,212 ( 0.00%)      }
          .           
          .               /// Object types don't have a self type specified. Therefore, when
          .               /// we convert the principal trait-ref into a normal trait-ref,
          .               /// you must give *some* self type. A common choice is `mk_err()`
          .               /// or some placeholder type.
         46 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
          .                   // otherwise the escaping vars would be captured by the binder
          .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
          .           
         23 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
        115 ( 0.00%)      }
          .           }
          .           
          .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
          .           
          .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
          .               pub fn def_id(&self) -> DefId {
          .                   self.skip_binder().def_id
          .               }
          .           
          .               /// Object types don't have a self type specified. Therefore, when
          .               /// we convert the principal trait-ref into a normal trait-ref,
          .               /// you must give *some* self type. A common choice is `mk_err()`
          .               /// or some placeholder type.
      3,444 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      4,396 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      4,592 ( 0.00%)      }
          .           }
          .           
    277,981 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
     15,535 ( 0.00%)  #[derive(HashStable)]
          .           pub enum BoundVariableKind {
          .               Ty(BoundTyKind),
          .               Region(BoundRegionKind),
          .               Const,
          .           }
          .           
          .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
          .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
          .           /// (which would be represented by the type `PolyTraitRef ==
          .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
          .           /// erase, or otherwise "discharge" these bound vars, we change the
          .           /// type from `Binder<'tcx, T>` to just `T` (see
          .           /// e.g., `liberate_late_bound_regions`).
          .           ///
          .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
    155,051 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  2,062,385 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
          .           
          .           impl<'tcx, T> Binder<'tcx, T>
          .           where
          .               T: TypeFoldable<'tcx>,
          .           {
          .               /// Wraps `value` in a binder, asserting that `value` does not
          .               /// contain any bound vars that would be bound by the
          .               /// binder. This is commonly used to 'inject' a value T into a
          .               /// different binding level.
    153,925 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    663,104 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
  1,555,898 ( 0.00%)          Binder(value, ty::List::empty())
    153,107 ( 0.00%)      }
          .           
          .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(vars);
          .                       value.visit_with(&mut validator);
          .                   }
     78,719 ( 0.00%)          Binder(value, vars)
          .               }
          .           }
          .           
          .           impl<'tcx, T> Binder<'tcx, T> {
          .               /// Skips the binder and returns the "bound" value. This is a
          .               /// risky thing to do because it's easy to get confused about
          .               /// De Bruijn indices and the like. It is usually better to
          .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
          .               /// accounting.
          .               ///
          .               /// Some examples where `skip_binder` is reasonable:
          .               ///
          .               /// - extracting the `DefId` from a PolyTraitRef;
          .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
          .               ///   a type parameter `X`, since the type `X` does not reference any regions
          .               pub fn skip_binder(self) -> T {
  5,258,319 ( 0.01%)          self.0
          .               }
          .           
          .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      3,571 ( 0.00%)          self.1
          .               }
          .           
          .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     13,228 ( 0.00%)          Binder(&self.0, self.1)
          .               }
          .           
          .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(&T) -> U,
          .               {
          .                   let value = f(&self.0);
          .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
          .           
          .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(&T) -> U,
          .               {
          .                   self.as_ref().map_bound(f)
          .               }
          .           
      2,240 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
          .               where
          .                   F: FnOnce(T) -> U,
          .               {
    146,016 ( 0.00%)          let value = f(self.0);
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.1);
          .                       value.visit_with(&mut validator);
          .                   }
  1,092,882 ( 0.00%)          Binder(value, self.1)
      2,264 ( 0.00%)      }
          .           
          .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
          .               where
          .                   F: FnOnce(T) -> Result<U, E>,
          .               {
          .                   let value = f(self.0)?;
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.1);
          .                       value.visit_with(&mut validator);
          .                   }
     48,189 ( 0.00%)          Ok(Binder(value, self.1))
          .               }
          .           
          .               /// Wraps a `value` in a binder, using the same bound variables as the
          .               /// current `Binder`. This should not be used if the new value *changes*
          .               /// the bound variables. Note: the (old or new) value itself does not
          .               /// necessarily need to *name* all the bound variables.
          .               ///
          .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
          .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
          .               where
          .                   U: TypeFoldable<'tcx>,
          .               {
          .                   if cfg!(debug_assertions) {
          .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
          .                       value.visit_with(&mut validator);
          .                   }
     70,012 ( 0.00%)          Binder(value, self.1)
          .               }
          .           
          .               /// Unwraps and returns the value within, but only if it contains
          .               /// no bound vars at all. (In other words, if this binder --
          .               /// and indeed any enclosing binder -- doesn't bind anything at
          .               /// all.) Otherwise, returns `None`.
          .               ///
          .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
          .               /// binder, but permits late-bound vars bound by enclosing
          .               /// binders, but that would require adjusting the debruijn
          .               /// indices, and given the shallow binding structure we often use,
          .               /// would not be that useful.)
          .               pub fn no_bound_vars(self) -> Option<T>
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
    869,246 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
     23,640 ( 0.00%)      }
          .           
          .               /// Splits the contents into two things that share the same binder
          .               /// level as the original, returning two distinct binders.
          .               ///
          .               /// `f` should consider bound regions at depth 1 to be free, and
          .               /// anything it produces with bound regions at depth 1 will be
          .               /// bound in the resulting return values.
          .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
          .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
          .                   let bound_vars = self.1;
          .                   self.0.map(|v| Binder(v, bound_vars))
          .               }
          .           }
          .           
          .           /// Represents the projection of an associated type. In explicit UFCS
          .           /// form this would be written `<T as Trait<..>>::N`.
      2,555 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    191,269 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ProjectionTy<'tcx> {
          .               /// The parameters of the associated item.
    111,177 ( 0.00%)      pub substs: SubstsRef<'tcx>,
          .           
          .               /// The `DefId` of the `TraitItem` for the associated type `N`.
          .               ///
          .               /// Note that this is not the `DefId` of the `TraitRef` containing this
          .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    119,331 ( 0.00%)      pub item_def_id: DefId,
          .           }
          .           
          .           impl<'tcx> ProjectionTy<'tcx> {
     67,004 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     19,144 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
     76,576 ( 0.00%)      }
          .           
          .               /// Extracts the underlying trait reference and own substs from this projection.
          .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
          .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     15,204 ( 0.00%)      pub fn trait_ref_and_own_substs(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      6,516 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
          .                   let trait_generics = tcx.generics_of(def_id);
     10,860 ( 0.00%)          (
          .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
          .                       &self.substs[trait_generics.count()..],
          .                   )
     19,548 ( 0.00%)      }
          .           
          .               /// Extracts the underlying trait reference from this projection.
          .               /// For example, if this is a projection of `<T as Iterator>::Item`,
          .               /// then this function would return a `T: Iterator` trait reference.
          .               ///
          .               /// WARNING: This will drop the substs for generic associated types
          .               /// consider calling [Self::trait_ref_and_own_substs] to get those
          .               /// as well.
     83,952 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      9,328 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      9,328 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    102,608 ( 0.00%)      }
          .           
     17,939 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
     53,817 ( 0.00%)          self.substs.type_at(0)
     35,878 ( 0.00%)      }
          .           }
          .           
          .           #[derive(Copy, Clone, Debug, TypeFoldable)]
          .           pub struct GenSig<'tcx> {
          .               pub resume_ty: Ty<'tcx>,
          .               pub yield_ty: Ty<'tcx>,
          .               pub return_ty: Ty<'tcx>,
          .           }
-- line 1233 ----------------------------------------
-- line 1235 ----------------------------------------
          .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
          .           
          .           /// Signature of a function type, which we have arbitrarily
          .           /// decided to use to refer to the input/output types.
          .           ///
          .           /// - `inputs`: is the list of arguments and their modes.
          .           /// - `output`: is the return type.
          .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    353,851 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    260,438 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct FnSig<'tcx> {
     80,818 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    556,940 ( 0.00%)      pub c_variadic: bool,
    111,753 ( 0.00%)      pub unsafety: hir::Unsafety,
    461,463 ( 0.00%)      pub abi: abi::Abi,
          .           }
          .           
          .           impl<'tcx> FnSig<'tcx> {
    215,501 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    962,930 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    431,002 ( 0.00%)      }
          .           
    118,978 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
    959,438 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    237,956 ( 0.00%)      }
          .           
          .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
          .               // method.
          .               fn fake() -> FnSig<'tcx> {
          .                   FnSig {
          .                       inputs_and_output: List::empty(),
          .                       c_variadic: false,
          .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
          .               }
          .           }
          .           
          .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
          .           
          .           impl<'tcx> PolyFnSig<'tcx> {
          .               #[inline]
          .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     46,407 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
          .               }
          .               #[inline]
          .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
     68,411 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
          .               }
          .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
          .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
      2,588 ( 0.00%)      }
          .               #[inline]
          .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     46,678 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
          .               }
          .               pub fn c_variadic(&self) -> bool {
      5,170 ( 0.00%)          self.skip_binder().c_variadic
      2,585 ( 0.00%)      }
          .               pub fn unsafety(&self) -> hir::Unsafety {
     27,106 ( 0.00%)          self.skip_binder().unsafety
     13,553 ( 0.00%)      }
          .               pub fn abi(&self) -> abi::Abi {
    288,016 ( 0.00%)          self.skip_binder().abi
     72,004 ( 0.00%)      }
          .           }
          .           
          .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
          .           
         88 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      1,860 ( 0.00%)  #[derive(HashStable)]
          .           pub struct ParamTy {
        136 ( 0.00%)      pub index: u32,
          .               pub name: Symbol,
          .           }
          .           
          .           impl<'tcx> ParamTy {
        146 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
          .                   ParamTy { index, name }
         73 ( 0.00%)      }
          .           
          .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
         52 ( 0.00%)          ParamTy::new(def.index, def.name)
         26 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
          .                   tcx.mk_ty_param(self.index, self.name)
          .               }
          .           }
          .           
          .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         23 ( 0.00%)  #[derive(HashStable)]
          .           pub struct ParamConst {
        266 ( 0.00%)      pub index: u32,
        266 ( 0.00%)      pub name: Symbol,
          .           }
          .           
          .           impl ParamConst {
          .               pub fn new(index: u32, name: Symbol) -> ParamConst {
          .                   ParamConst { index, name }
          .               }
          .           
          .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
          .           /// the inference variable is supposed to satisfy the relation
          .           /// *for every value of the placeholder region*. To ensure that doesn't
          .           /// happen, you can use `leak_check`. This is more clearly explained
          .           /// by the [rustc dev guide].
          .           ///
          .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
          .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
          .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 22,583,638 ( 0.06%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
      4,178 ( 0.00%)  pub enum RegionKind {
          .               /// Region bound in a type or fn declaration which will be
          .               /// substituted 'early' -- that is, at the same time when type
          .               /// parameters are substituted.
          .               ReEarlyBound(EarlyBoundRegion),
          .           
          .               /// Region bound in a function scope, which will be substituted when the
          .               /// function is called.
    772,378 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
          .           
          .               /// When checking a function body, the types of all arguments and so forth
          .               /// that refer to bound region parameters are modified to refer to free
          .               /// region parameters.
          .               ReFree(FreeRegion),
          .           
          .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
          .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
          .               /// regions visible from `U`, but not less than regions not visible
          .               /// from `U`.
          .               ReEmpty(ty::UniverseIndex),
          .           
          .               /// Erased region, used by trait selection, in MIR and during codegen.
          .               ReErased,
          .           }
          .           
     51,168 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
          .           pub struct EarlyBoundRegion {
    268,806 ( 0.00%)      pub def_id: DefId,
    211,717 ( 0.00%)      pub index: u32,
    394,263 ( 0.00%)      pub name: Symbol,
          .           }
          .           
          .           /// A **`const`** **v**ariable **ID**.
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
          .           pub struct ConstVid<'tcx> {
      6,547 ( 0.00%)      pub index: u32,
      1,930 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
          .           }
          .           
          .           rustc_index::newtype_index! {
          .               /// A **region** (lifetime) **v**ariable **ID**.
          .               pub struct RegionVid {
          .                   DEBUG_FORMAT = custom,
          .               }
          .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
          .           rustc_index::newtype_index! {
          .               pub struct BoundVar { .. }
          .           }
          .           
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub struct BoundTy {
          .               pub var: BoundVar,
     16,880 ( 0.00%)      pub kind: BoundTyKind,
          .           }
          .           
    287,266 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
          .           #[derive(HashStable)]
          .           pub enum BoundTyKind {
          .               Anon,
          .               Param(Symbol),
          .           }
          .           
          .           impl From<BoundVar> for BoundTy {
          .               fn from(var: BoundVar) -> Self {
          .                   BoundTy { var, kind: BoundTyKind::Anon }
          .               }
          .           }
          .           
          .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
          .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        523 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
          .           pub struct ExistentialProjection<'tcx> {
        228 ( 0.00%)      pub item_def_id: DefId,
        540 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        135 ( 0.00%)      pub term: Term<'tcx>,
          .           }
          .           
          .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
          .           
          .           impl<'tcx> ExistentialProjection<'tcx> {
          .               /// Extracts the underlying existential trait reference from this projection.
          .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
          .               /// then this function would return an `exists T. T: Iterator` existential trait
-- line 1551 ----------------------------------------
-- line 1585 ----------------------------------------
          .                       item_def_id: projection_predicate.projection_ty.item_def_id,
          .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
          .                       term: projection_predicate.term,
          .                   }
          .               }
          .           }
          .           
          .           impl<'tcx> PolyExistentialProjection<'tcx> {
         30 ( 0.00%)      pub fn with_self_ty(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   self_ty: Ty<'tcx>,
          .               ) -> ty::PolyProjectionPredicate<'tcx> {
         30 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
         36 ( 0.00%)      }
          .           
          .               pub fn item_def_id(&self) -> DefId {
         12 ( 0.00%)          self.skip_binder().item_def_id
          6 ( 0.00%)      }
          .           }
          .           
          .           /// Region utilities
          .           impl RegionKind {
          .               /// Is this region named by the user?
          .               pub fn has_name(&self) -> bool {
          .                   match *self {
          .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
          .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
          .                       RegionKind::ReEmpty(_) => false,
          .                       RegionKind::ReErased => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_late_bound(&self) -> bool {
     32,964 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_placeholder(&self) -> bool {
          .                   matches!(*self, ty::RePlaceholder(..))
          .               }
          .           
          .               #[inline]
          .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    763,043 ( 0.00%)          match *self {
          .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
          .                       _ => false,
          .                   }
          .               }
          .           
          .               pub fn type_flags(&self) -> TypeFlags {
          .                   let mut flags = TypeFlags::empty();
          .           
  1,282,541 ( 0.00%)          match *self {
          .                       ty::ReVar(..) => {
          .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
          .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
          .                           flags = flags | TypeFlags::HAS_RE_INFER;
          .                       }
          .                       ty::RePlaceholder(..) => {
          .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
          .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
          .                       ty::ReErased => {
          .                           flags = flags | TypeFlags::HAS_RE_ERASED;
          .                       }
          .                   }
          .           
          .                   debug!("type_flags({:?}) = {:?}", self, flags);
          .           
          .                   flags
    106,918 ( 0.00%)      }
          .           
          .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
          .               /// For example, consider the regions in this snippet of code:
          .               ///
          .               /// ```
          .               /// impl<'a> Foo {
          .               ///      ^^ -- early bound, declared on an impl
          .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
          .           
          .               #[inline(always)]
          .               pub fn flags(&self) -> TypeFlags {
          .                   self.flags
          .               }
          .           
          .               #[inline]
          .               pub fn is_unit(&self) -> bool {
     21,002 ( 0.00%)          match self.kind() {
      5,942 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_never(&self) -> bool {
    206,338 ( 0.00%)          matches!(self.kind(), Never)
          .               }
          .           
          .               #[inline]
          .               pub fn is_primitive(&self) -> bool {
          .                   self.kind().is_primitive()
          .               }
          .           
          .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn is_ref(&self) -> bool {
          .                   matches!(self.kind(), Ref(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_ty_var(&self) -> bool {
    290,027 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    216,820 ( 0.00%)          match self.kind() {
     36,615 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_ty_infer(&self) -> bool {
        741 ( 0.00%)          matches!(self.kind(), Infer(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_phantom_data(&self) -> bool {
          2 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
          .               }
          .           
          .               #[inline]
          .               pub fn is_bool(&self) -> bool {
          .                   *self.kind() == Bool
          .               }
          .           
          .               /// Returns `true` if this type is a `str`.
          .               #[inline]
          .               pub fn is_str(&self) -> bool {
          .                   *self.kind() == Str
          .               }
          .           
          .               #[inline]
          .               pub fn is_param(&self, index: u32) -> bool {
        323 ( 0.00%)          match self.kind() {
          .                       ty::Param(ref data) => data.index == index,
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_slice(&self) -> bool {
          .                   match self.kind() {
          .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_array(&self) -> bool {
        447 ( 0.00%)          matches!(self.kind(), Array(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_simd(&self) -> bool {
         18 ( 0.00%)          match self.kind() {
          8 ( 0.00%)              Adt(def, _) => def.repr.simd(),
          .                       _ => false,
          .                   }
          .               }
          .           
        822 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      1,644 ( 0.00%)          match self.kind() {
          .                       Array(ty, _) | Slice(ty) => ty,
          .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
          .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
          .                   }
        822 ( 0.00%)      }
          .           
         35 ( 0.00%)      pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         10 ( 0.00%)          match self.kind() {
          .                       Adt(def, substs) => {
         10 ( 0.00%)                  assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
          .                           let variant = def.non_enum_variant();
         20 ( 0.00%)                  let f0_ty = variant.fields[0].ty(tcx, substs);
          .           
         10 ( 0.00%)                  match f0_ty.kind() {
          .                               // If the first field is an array, we assume it is the only field and its
          .                               // elements are the SIMD components.
          .                               Array(f0_elem_ty, f0_len) => {
          .                                   // FIXME(repr_simd): https://github.com/rust-lang/rust/pull/78863#discussion_r522784112
          .                                   // The way we evaluate the `N` in `[T; N]` here only works since we use
          .                                   // `simd_size_and_type` post-monomorphization. It will probably start to ICE
          .                                   // if we use it in generic code. See the `simd-array-trait` ui test.
          .                                   (f0_len.eval_usize(tcx, ParamEnv::empty()) as u64, f0_elem_ty)
          .                               }
          .                               // Otherwise, the fields of this Adt are the SIMD components (and we assume they
          .                               // all have the same type).
         10 ( 0.00%)                      _ => (variant.fields.len() as u64, f0_ty),
          .                           }
          .                       }
          .                       _ => bug!("`simd_size_and_type` called on invalid type"),
          .                   }
         45 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn is_region_ptr(&self) -> bool {
         80 ( 0.00%)          matches!(self.kind(), Ref(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_mutable_ptr(&self) -> bool {
         21 ( 0.00%)          matches!(
         14 ( 0.00%)              self.kind(),
          .                       RawPtr(TypeAndMut { mutbl: hir::Mutability::Mut, .. })
          .                           | Ref(_, _, hir::Mutability::Mut)
          .                   )
          .               }
          .           
          .               /// Get the mutability of the reference or `None` when not a reference
          .               #[inline]
          .               pub fn ref_mutability(&self) -> Option<hir::Mutability> {
-- line 1860 ----------------------------------------
-- line 1861 ----------------------------------------
          .                   match self.kind() {
          .                       Ref(_, _, mutability) => Some(*mutability),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn is_unsafe_ptr(&self) -> bool {
     33,825 ( 0.00%)          matches!(self.kind(), RawPtr(_))
          .               }
          .           
          .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
          .               #[inline]
          .               pub fn is_any_ptr(&self) -> bool {
         78 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
          .               }
          .           
          .               #[inline]
          .               pub fn is_box(&self) -> bool {
    293,004 ( 0.00%)          match self.kind() {
     79,673 ( 0.00%)              Adt(def, _) => def.is_box(),
          .                       _ => false,
          .                   }
          .               }
          .           
          .               /// Panics if called on any type other than `Box<T>`.
      6,158 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      6,158 ( 0.00%)          match self.kind() {
     15,395 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
          .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
          .                   }
      6,158 ( 0.00%)      }
          .           
          .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
          .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
          .               /// contents are abstract to rustc.)
          .               #[inline]
          .               pub fn is_scalar(&self) -> bool {
      2,726 ( 0.00%)          matches!(
      6,659 ( 0.00%)              self.kind(),
          .                       Bool | Char
          .                           | Int(_)
          .                           | Float(_)
          .                           | Uint(_)
          .                           | FnDef(..)
          .                           | FnPtr(_)
          .                           | RawPtr(_)
          .                           | Infer(IntVar(_) | FloatVar(_))
          .                   )
          .               }
          .           
          .               /// Returns `true` if this type is a floating point type.
          .               #[inline]
          .               pub fn is_floating_point(&self) -> bool {
      8,624 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_trait(&self) -> bool {
      3,351 ( 0.00%)          matches!(self.kind(), Dynamic(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_enum(&self) -> bool {
     10,446 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
          .               }
          .           
          .               #[inline]
          .               pub fn is_union(&self) -> bool {
     51,822 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
          .               }
          .           
          .               #[inline]
          .               pub fn is_closure(&self) -> bool {
      9,802 ( 0.00%)          matches!(self.kind(), Closure(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_generator(&self) -> bool {
     19,747 ( 0.00%)          matches!(self.kind(), Generator(..))
          .               }
          .           
          .               #[inline]
          .               pub fn is_integral(&self) -> bool {
     45,914 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fresh_ty(&self) -> bool {
          .                   matches!(self.kind(), Infer(FreshTy(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fresh(&self) -> bool {
     11,723 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
          .               }
          .           
          .               #[inline]
          .               pub fn is_char(&self) -> bool {
          .                   matches!(self.kind(), Char)
          .               }
          .           
          .               #[inline]
          .               pub fn is_numeric(&self) -> bool {
          .                   self.is_integral() || self.is_floating_point()
          .               }
          .           
          .               #[inline]
          .               pub fn is_signed(&self) -> bool {
      2,224 ( 0.00%)          matches!(self.kind(), Int(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_ptr_sized_integral(&self) -> bool {
      2,631 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
          .               }
          .           
          .               #[inline]
          .               pub fn has_concrete_skeleton(&self) -> bool {
          .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
          .               }
          .           
          .               /// Returns the type and mutability of `*ty`.
          .               ///
          .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
          .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     66,845 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    432,242 ( 0.00%)          match self.kind() {
      5,568 ( 0.00%)              Adt(def, _) if def.is_box() => {
      5,614 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
          .                       }
    243,778 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     15,616 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
          .                       _ => None,
          .                   }
    133,690 ( 0.00%)      }
          .           
          .               /// Returns the type of `ty[i]`.
          .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
      3,269 ( 0.00%)          match self.kind() {
          .                       Array(ty, _) | Slice(ty) => Some(ty),
          .                       _ => None,
          .                   }
        263 ( 0.00%)      }
          .           
    800,784 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    400,392 ( 0.00%)          match self.kind() {
    300,033 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
        435 ( 0.00%)              FnPtr(f) => *f,
          .                       Error(_) => {
          .                           // ignore errors (#54954)
          .                           ty::Binder::dummy(FnSig::fake())
          .                       }
          .                       Closure(..) => bug!(
          .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
          .                       ),
          .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
          .                   }
    900,882 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn is_fn(&self) -> bool {
     56,667 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_fn_ptr(&self) -> bool {
          .                   matches!(self.kind(), FnPtr(_))
          .               }
          .           
          .               #[inline]
          .               pub fn is_impl_trait(&self) -> bool {
          .                   matches!(self.kind(), Opaque(..))
          .               }
          .           
          .               #[inline]
          .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     20,265 ( 0.00%)          match self.kind() {
          .                       Adt(adt, _) => Some(adt),
          .                       _ => None,
          .                   }
          .               }
          .           
          .               /// Iterates over tuple fields.
          .               /// Panics when called on anything but a tuple.
      2,821 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     15,082 ( 0.00%)          match self.kind() {
     10,859 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
          .                       _ => bug!("tuple_fields called on non-tuple"),
          .                   }
      5,642 ( 0.00%)      }
          .           
          .               /// Get the `i`-th element of a tuple.
          .               /// Panics when called on anything but a tuple.
        185 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
        370 ( 0.00%)          match self.kind() {
        370 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
          .                       _ => bug!("tuple_fields called on non-tuple"),
          .                   }
        370 ( 0.00%)      }
          .           
          .               /// If the type contains variants, returns the valid range of variant indices.
          .               //
          .               // FIXME: This requires the optimized MIR in the case of generators.
          .               #[inline]
          .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
          .                   match self.kind() {
          .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// If the type contains variants, returns the variant for `variant_index`.
          .               /// Panics if `variant_index` is out of range.
          .               //
          .               // FIXME: This requires the optimized MIR in the case of generators.
          .               #[inline]
     94,860 ( 0.00%)      pub fn discriminant_for_variant(
          .                   &self,
          .                   tcx: TyCtxt<'tcx>,
          .                   variant_index: VariantIdx,
          .               ) -> Option<Discr<'tcx>> {
    143,896 ( 0.00%)          match self.kind() {
     64,644 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
          .                           // This can actually happen during CTFE, see
          .                           // https://github.com/rust-lang/rust/issues/89765.
          .                           None
          .                       }
     32,322 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
          .                           Some(adt.discriminant_for_variant(tcx, variant_index))
          .                       }
          .                       TyKind::Generator(def_id, substs, _) => {
          .                           Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
          .                       }
          .                       _ => None,
          .                   }
     75,888 ( 0.00%)      }
          .           
          .               /// Returns the type of the discriminant of this type.
     89,860 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     44,930 ( 0.00%)          match self.kind() {
     71,888 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
          .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
          .           
          .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
          .                           let assoc_items = tcx.associated_item_def_ids(
          .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
          .                           );
          .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
          .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
          .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
          .           
          .                       ty::Bound(..)
          .                       | ty::Placeholder(_)
          .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
          .                       }
          .                   }
     71,888 ( 0.00%)      }
          .           
          .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        918 ( 0.00%)      pub fn ptr_metadata_ty(
          .                   &'tcx self,
          .                   tcx: TyCtxt<'tcx>,
          .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
          .               ) -> Ty<'tcx> {
        918 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
        510 ( 0.00%)          match tail.kind() {
          .                       // Sized types
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
          .                       | ty::Foreign(..)
          .                       // If returned by `struct_tail_without_normalization` this is a unit struct
          .                       // without any fields, or not a struct, and therefore is Sized.
          .                       | ty::Adt(..)
          .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
          .                       // a.k.a. unit type, which is Sized
          .                       | ty::Tuple(..) => tcx.types.unit,
          .           
        204 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
          .                       ty::Dynamic(..) => {
          .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
          .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
          .                       },
          .           
          .                       ty::Projection(_)
          .                       | ty::Param(_)
          .                       | ty::Opaque(..)
          .                       | ty::Infer(ty::TyVar(_))
          .                       | ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
          .                       }
          .                   }
        816 ( 0.00%)      }
          .           
          .               /// When we create a closure, we record its kind (i.e., what trait
          .               /// it implements) into its `ClosureSubsts` using a type
          .               /// parameter. This is kind of a phantom type, except that the
          .               /// most convenient thing for us to are the integral types. This
          .               /// function converts such a special type into the closure
          .               /// kind. To go the other way, use
          .               /// `tcx.closure_kind_ty(closure_kind)`.
          .               ///
          .               /// Note that during type checking, we use an inference variable
          .               /// to represent the closure kind, because it has not yet been
          .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
          .               /// is complete, that type variable will be unified.
      9,638 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     19,276 ( 0.00%)          match self.kind() {
     19,212 ( 0.00%)              Int(int_ty) => match int_ty {
          .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
          .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
          .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
          .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
          .                       },
          .           
          .                       // "Bound" types appear in canonical queries when the
          .                       // closure type is not yet known
          .                       Bound(..) | Infer(_) => None,
          .           
          .                       Error(_) => Some(ty::ClosureKind::Fn),
          .           
          .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
          .                   }
      9,638 ( 0.00%)      }
          .           
          .               /// Fast path helper for testing if a type is `Sized`.
          .               ///
          .               /// Returning true means the type is known to be sized. Returning
          .               /// `false` means nothing -- could be sized, might not be.
          .               ///
          .               /// Note that we could never rely on the fact that a type such as `[_]` is
          .               /// trivially `!Sized` because we could be in a type environment with a
          .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
          .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
          .               /// this method doesn't return `Option<bool>`.
  1,481,994 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    987,996 ( 0.00%)          match self.kind() {
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Array(..)
          .                       | ty::Closure(..)
          .                       | ty::Never
          .                       | ty::Error(_) => true,
          .           
          .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
          .           
     33,822 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
          .           
    195,264 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
          .           
          .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
          .           
          .                       ty::Infer(ty::TyVar(_)) => false,
          .           
          .                       ty::Bound(..)
          .                       | ty::Placeholder(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
          .                       }
          .                   }
  1,481,994 ( 0.00%)      }
          .           }
          .           
          .           /// Extra information about why we ended up with a particular variance.
          .           /// This is only used to add more information to error messages, and
          .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
          .           /// may lead to confusing notes in error messages, it will never cause
          .           /// a miscompilation or unsoundness.
          .           ///
          .           /// When in doubt, use `VarianceDiagInfo::default()`
      6,765 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
          .           pub enum VarianceDiagInfo<'tcx> {
          .               /// No additional information - this is the default.
          .               /// We will not add any additional information to error messages.
          .               #[default]
          .               None,
          .               /// We switched our variance because a generic argument occurs inside
          .               /// the invariant generic argument of another type.
          .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
          .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
          .                   param_index: u32,
          .               },
          .           }
          .           
          .           impl<'tcx> VarianceDiagInfo<'tcx> {
          .               /// Mirrors `Variance::xform` - used to 'combine' the existing
          .               /// and new `VarianceDiagInfo`s when our variance changes.
    363,030 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
          .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    544,545 ( 0.00%)          match self {
          .                       VarianceDiagInfo::None => other,
          .                       VarianceDiagInfo::Invariant { .. } => self,
          .                   }
    181,515 ( 0.00%)      }
          .           }

100,658,054 ( 0.26%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 111 ----------------------------------------
          .           const EMPTY: u8 = 0b1111_1111;
          .           
          .           /// Control byte value for a deleted bucket.
          .           const DELETED: u8 = 0b1000_0000;
          .           
          .           /// Checks whether a control byte represents a full bucket (top bit is clear).
          .           #[inline]
          .           fn is_full(ctrl: u8) -> bool {
 13,147,257 ( 0.03%)      ctrl & 0x80 == 0
          .           }
          .           
          .           /// Checks whether a control byte represents a special value (top bit is set).
          .           #[inline]
          .           fn is_special(ctrl: u8) -> bool {
          .               ctrl & 0x80 != 0
          .           }
          .           
          .           /// Checks whether a special control value is EMPTY (just check 1 bit).
          .           #[inline]
          .           fn special_is_empty(ctrl: u8) -> bool {
          .               debug_assert!(is_special(ctrl));
    786,032 ( 0.00%)      ctrl & 0x01 != 0
          .           }
          .           
          .           /// Primary hash function, used to select the initial bucket to probe from.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h1(hash: u64) -> usize {
          .               // On 32-bit platforms we simply ignore the higher hash bits.
          .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
          .           /// Secondary hash function, saved in the low 7 bits of the control byte.
          .           #[inline]
          .           #[allow(clippy::cast_possible_truncation)]
          .           fn h2(hash: u64) -> u8 {
          .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
          .               // value, some hash functions (such as FxHash) produce a usize result
          .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
          .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
284,046,334 ( 0.73%)      let top7 = hash >> (hash_len * 8 - 7);
          .               (top7 & 0x7f) as u8 // truncation
          .           }
          .           
          .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
          .           /// table size is a power of two) to visit every group of elements exactly once.
          .           ///
          .           /// A triangular probe has us jump by 1 more group every time. So first we
          .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
          .               #[inline]
          .               fn move_next(&mut self, bucket_mask: usize) {
          .                   // We should have found an empty bucket by now and ended the probe.
          .                   debug_assert!(
          .                       self.stride <= bucket_mask,
          .                       "Went past end of probe sequence"
          .                   );
          .           
  2,453,640 ( 0.01%)          self.stride += Group::WIDTH;
  2,453,640 ( 0.01%)          self.pos += self.stride;
  2,093,933 ( 0.01%)          self.pos &= bucket_mask;
          .               }
          .           }
          .           
          .           /// Returns the number of buckets needed to hold the given number of items,
          .           /// taking the maximum load factor into account.
          .           ///
          .           /// Returns `None` if an overflow occurs.
          .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
          .           #[cfg_attr(target_os = "emscripten", inline(never))]
          .           #[cfg_attr(not(target_os = "emscripten"), inline)]
          .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
          .               debug_assert_ne!(cap, 0);
          .           
          .               // For small tables we require at least 1 empty bucket so that lookups are
          .               // guaranteed to terminate if an element doesn't exist in the table.
    849,812 ( 0.00%)      if cap < 8 {
          .                   // We don't bother with a table size of 2 buckets since that can only
          .                   // hold a single element. Instead we skip directly to a 4 bucket table
          .                   // which can hold 3 elements.
  1,815,395 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
          .               }
          .           
          .               // Otherwise require 1/8 buckets to be empty (87.5% load)
          .               //
          .               // Be careful when modifying this, calculate_layout relies on the
          .               // overflow check here.
    370,962 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
          .           
          .               // Any overflows will have been caught by the checked_mul. Also, any
          .               // rounding errors from the division above will be cleaned up by
          .               // next_power_of_two (which can't overflow because of the previous division).
          .               Some(adjusted_cap.next_power_of_two())
          .           }
          .           
          .           /// Returns the maximum effective capacity for the given bucket mask, taking
          .           /// the maximum load factor into account.
          .           #[inline]
          .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
  2,355,929 ( 0.01%)      if bucket_mask < 8 {
          .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
          .                   // Keep in mind that the bucket mask is one less than the bucket count.
          .                   bucket_mask
          .               } else {
          .                   // For larger tables we reserve 12.5% of the slots as empty.
    539,589 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
          .               }
          .           }
          .           
          .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
          .           /// while keeping the rest of `calculate_layout_for` independent of `T`
          .           #[derive(Copy, Clone)]
          .           struct TableLayout {
          .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
          .           
          .               #[inline]
          .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   let TableLayout { size, ctrl_align } = self;
          .                   // Manual layout calculation since Layout methods are not yet stable.
          .                   let ctrl_offset =
  1,707,502 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
  2,299,221 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
          .           
          .                   Some((
          .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
          .                       ctrl_offset,
          .                   ))
          .               }
          .           }
          .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
          .                   }
          .               }
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub unsafe fn drop(&self) {
          .                   self.as_ptr().drop_in_place();
          .               }
          .               #[inline]
          .               pub unsafe fn read(&self) -> T {
      8,526 ( 0.00%)          self.as_ptr().read()
          .               }
          .               #[inline]
          .               pub unsafe fn write(&self, val: T) {
          .                   self.as_ptr().write(val);
          .               }
          .               #[inline]
          .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
          .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
          .               /// Creates a new empty hash table without allocating any memory, using the
          .               /// given allocator.
          .               ///
          .               /// In effect this returns a table with exactly 1 bucket. However we can
          .               /// leave the data pointer dangling since that bucket is never written to
          .               /// due to our load factor forcing us to always have at least 1 free bucket.
          .               #[inline]
          .               pub fn new_in(alloc: A) -> Self {
     77,268 ( 0.00%)          Self {
          .                       table: RawTableInner::new_in(alloc),
          .                       marker: PhantomData,
          .                   }
          .               }
          .           
          .               /// Allocates a new hash table with the given number of buckets.
          .               ///
          .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
          .               unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   Ok(Self {
        545 ( 0.00%)              table: RawTableInner::new_uninitialized(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           buckets,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
          .               /// Attempts to allocate a new hash table with at least enough capacity
          .               /// for inserting the given number of elements without reallocating.
          .               fn fallible_with_capacity(
          .                   alloc: A,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   Ok(Self {
     44,795 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
          .                           alloc,
          .                           TableLayout::new::<T>(),
          .                           capacity,
          .                           fallibility,
          .                       )?,
          .                       marker: PhantomData,
          .                   })
          .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
          .                   debug_assert_ne!(self.table.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               /// Erases an element from the table without dropping it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    173,516 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    173,516 ( 0.00%)          let index = self.bucket_index(item);
          .                   self.table.erase(index);
    347,032 ( 0.00%)      }
          .           
          .               /// Erases an element from the table, dropping it in place.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
          .                   // Erase the element from the table first since drop might panic.
     99,712 ( 0.00%)          self.erase_no_drop(&item);
          .                   item.drop();
          .               }
          .           
          .               /// Finds and erases an element from the table, dropping it in place.
          .               /// Returns true if an element was found.
          .               #[cfg(feature = "raw")]
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
          .                   }
          .               }
          .           
          .               /// Removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[allow(clippy::needless_pass_by_value)]
          .               #[allow(deprecated)]
          .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    247,320 ( 0.00%)          self.erase_no_drop(&item);
      1,583 ( 0.00%)          item.read()
          .               }
          .           
          .               /// Finds and removes an element from the table, returning it.
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,299,878 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
     11,738 ( 0.00%)          match self.find(hash, eq) {
     69,106 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    908,644 ( 0.00%)              None => None,
          .                   }
  5,711,834 ( 0.01%)      }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear_no_drop(&mut self) {
          .                   self.table.clear_no_drop();
          .               }
          .           
          .               /// Removes all elements from the table without freeing the backing memory.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn clear(&mut self) {
          .                   // Ensure that the table is reset even if one of the drops panic
          .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
          .                   unsafe {
          1 ( 0.00%)              self_.drop_elements();
          .                   }
          .               }
          .           
          7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     98,314 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
          .                       for item in self.iter() {
          .                           item.drop();
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
          .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
          .                   // Calculate the minimal number of elements that we need to reserve
          .                   // space for.
          .                   let min_size = usize::max(self.table.items, min_size);
          .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Ensures that at least `additional` items can be inserted into the table
          .               /// without reallocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
  2,268,256 ( 0.01%)          if additional > self.table.growth_left {
          .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
  1,500,422 ( 0.00%)              if self
          .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
          .                           .is_err()
          .                       {
          .                           unsafe { hint::unreachable_unchecked() }
          .                       }
          .                   }
          .               }
          .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
          .                   } else {
          .                       Ok(())
          .                   }
          .               }
          .           
          .               /// Out-of-line slow path for `reserve` and `try_reserve`.
          .               #[cold]
          .               #[inline(never)]
  3,403,278 ( 0.01%)      fn reserve_rehash(
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
          .               ) -> Result<(), TryReserveError> {
          .                   unsafe {
          .                       self.table.reserve_rehash_inner(
          .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
          .                           TableLayout::new::<T>(),
          .                           if mem::needs_drop::<T>() {
          .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
          .                           } else {
          .                               None
          .                           },
          .                       )
          .                   }
  2,466,176 ( 0.01%)      }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
          .               /// current table into it.
          .               fn resize(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: impl Fn(&T) -> u64,
          .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
          .                       )
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns its raw bucket.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
 15,715,150 ( 0.04%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
          .                   unsafe {
          .                       let mut index = self.table.find_insert_slot(hash);
          .           
          .                       // We can avoid growing the table once we have reached our load
          .                       // factor if we are replacing a tombstone. This works since the
          .                       // number of EMPTY slots does not change in this case.
     42,839 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 12,766,337 ( 0.03%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
          .                           self.reserve(1, hasher);
          .                           index = self.table.find_insert_slot(hash);
          .                       }
          .           
          .                       self.table.record_item_insert_at(index, old_ctrl, hash);
          .           
          .                       let bucket = self.bucket(index);
          2 ( 0.00%)              bucket.write(value);
          .                       bucket
          .                   }
 11,600,480 ( 0.03%)      }
          .           
          .               /// Attempts to insert a new element without growing the table and return its raw bucket.
          .               ///
          .               /// Returns an `Err` containing the given element if inserting it would require growing the
          .               /// table.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
          .                       }
          .                   }
          .               }
          .           
          .               /// Inserts a new element into the table, and returns a mutable reference to it.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
  6,282,480 ( 0.02%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
      1,196 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
  4,711,860 ( 0.01%)      }
          .           
          .               /// Inserts a new element into the table, without growing the table.
          .               ///
          .               /// There must be enough space in the table to insert the new element.
          .               ///
          .               /// This does not check if the given element already exists in the table.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     27,711 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
  2,122,567 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
    101,794 ( 0.00%)          let bucket = self.table.bucket(index);
          .           
          .                   // If we are replacing a DELETED entry then we don't need to update
          .                   // the load counter.
  4,499,166 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
          .           
          .                   bucket.write(value);
  3,579,566 ( 0.01%)          self.table.items += 1;
          .                   bucket
     55,413 ( 0.00%)      }
          .           
          .               /// Temporary removes a bucket, applying the given function to the removed
          .               /// element and optionally put back the returned value in the same bucket.
          .               ///
          .               /// Returns `true` if the bucket still contains an element
          .               ///
          .               /// This does not check if the given bucket is actually occupied.
          .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
          .                       true
          .                   } else {
          .                       false
          .                   }
          .               }
          .           
          .               /// Searches for an element in the table.
          .               #[inline]
    457,288 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     70,458 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    157,530 ( 0.00%)              eq(self.bucket(index).as_ref())
     25,614 ( 0.00%)          });
          .           
          .                   // Avoid `Option::map` because it bloats LLVM IR.
          .                   match result {
      7,307 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
          .                       None => None,
          .                   }
    516,520 ( 0.00%)      }
          .           
          .               /// Gets a reference to an element in the table.
          .               #[inline]
          .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    231,756 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
          .                       None => None,
          .                   }
          .               }
          .           
          .               /// Gets a mutable reference to an element in the table.
          .               #[inline]
     71,155 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
          .                   // Avoid `Option::map` because it bloats LLVM IR.
    236,343 ( 0.00%)          match self.find(hash, eq) {
          .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
          .                       None => None,
          .                   }
     81,320 ( 0.00%)      }
          .           
          .               /// Attempts to get mutable references to `N` entries in the table at once.
          .               ///
          .               /// Returns an array of length `N` with the results of each query.
          .               ///
          .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
          .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
          .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
          .               #[inline]
          .               pub fn len(&self) -> usize {
          .                   self.table.items
          .               }
          .           
          .               /// Returns `true` if the table contains no elements.
          .               #[inline]
          .               pub fn is_empty(&self) -> bool {
  6,478,043 ( 0.02%)          self.len() == 0
          .               }
          .           
          .               /// Returns the number of buckets in the table.
          .               #[inline]
          .               pub fn buckets(&self) -> usize {
          .                   self.table.bucket_mask + 1
          .               }
          .           
          .               /// Returns an iterator over every element in the table. It is up to
          .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
          .               /// Because we cannot make the `next` method unsafe on the `RawIter`
          .               /// struct, we have to make the `iter` method unsafe.
          .               #[inline]
          .               pub unsafe fn iter(&self) -> RawIter<T> {
        100 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
          .                   RawIter {
          .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    710,577 ( 0.00%)              items: self.table.items,
          .                   }
          .               }
          .           
          .               /// Returns an iterator over occupied buckets that could match a given hash.
          .               ///
          .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
          .               /// return items that have a hash value different than the one provided. You
          .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
          .               /// Iteration starts at the provided iterator's current location.
          .               ///
          .               /// It is up to the caller to ensure that the iterator is valid for this
          .               /// `RawTable` and covers all items that remain in the table.
          .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
          .                   debug_assert_eq!(iter.len(), self.len());
          .           
          .                   let alloc = self.table.alloc.clone();
     51,500 ( 0.00%)          let allocation = self.into_allocation();
     38,625 ( 0.00%)          RawIntoIter {
     64,375 ( 0.00%)              iter,
          .                       allocation,
          .                       marker: PhantomData,
          .                       alloc,
          .                   }
          .               }
          .           
          .               /// Converts the table into a raw allocation. The contents of the table
          .               /// should be dropped using a `RawIter` before freeing the allocation.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     22,493 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
          .                       None
          .                   } else {
          .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
          .                           Some(lco) => lco,
          .                           None => unsafe { hint::unreachable_unchecked() },
          .                       };
          .                       Some((
      5,909 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
          .                           layout,
          .                       ))
          .                   };
          .                   mem::forget(self);
          .                   alloc
          .               }
          .           }
          .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<A> RawTableInner<A> {
          .               #[inline]
          .               const fn new_in(alloc: A) -> Self {
  4,713,774 ( 0.01%)          Self {
          .                       // Be careful to cast the entire slice to a raw pointer.
          .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
          .                       bucket_mask: 0,
          .                       items: 0,
          .                       growth_left: 0,
          .                       alloc,
          .                   }
          .               }
          .           }
          .           
          .           impl<A: Allocator + Clone> RawTableInner<A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  3,039,367 ( 0.01%)      unsafe fn new_uninitialized(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   buckets: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
          .                   debug_assert!(buckets.is_power_of_two());
          .           
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
          .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
          .                   // such allocations will never succeed anyways.
          .                   //
          .                   // This mirrors what Vec does in the standard library.
          .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
          .                       return Err(fallibility.capacity_overflow());
          .                   }
          .           
    720,186 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
          .                       Ok(block) => block.cast(),
          .                       Err(_) => return Err(fallibility.alloc_err(layout)),
          .                   };
          .           
          .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
  1,670,754 ( 0.00%)          Ok(Self {
          .                       ctrl,
    703,474 ( 0.00%)              bucket_mask: buckets - 1,
          .                       items: 0,
          .                       growth_left: bucket_mask_to_capacity(buckets - 1),
          .                       alloc,
          .                   })
  2,211,884 ( 0.01%)      }
          .           
          .               #[inline]
    164,957 ( 0.00%)      fn fallible_with_capacity(
          .                   alloc: A,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<Self, TryReserveError> {
     43,010 ( 0.00%)          if capacity == 0 {
     21,318 ( 0.00%)              Ok(Self::new_in(alloc))
          .                   } else {
          .                       unsafe {
          .                           let buckets =
          .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
          .           
  1,377,746 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
          .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
          .           
    100,622 ( 0.00%)                  Ok(result)
          .                       }
          .                   }
    164,957 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element and sets the hash for that slot.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
    758,329 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
          .                   let index = self.find_insert_slot(hash);
    758,329 ( 0.00%)          let old_ctrl = *self.ctrl(index);
          .                   self.set_ctrl_h2(index, hash);
          .                   (index, old_ctrl)
  1,516,658 ( 0.00%)      }
          .           
          .               /// Searches for an empty or deleted bucket which is suitable for inserting
          .               /// a new element.
          .               ///
          .               /// There must be at least 1 empty bucket in the table.
          .               #[inline]
          .               fn find_insert_slot(&self, hash: u64) -> usize {
          .                   let mut probe_seq = self.probe_seq(hash);
          .                   loop {
          .                       unsafe {
          .                           let group = Group::load(self.ctrl(probe_seq.pos));
  8,550,046 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 24,723,919 ( 0.06%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
          .           
          .                               // In tables smaller than the group width, trailing control
          .                               // bytes outside the range of the table are filled with
          .                               // EMPTY entries. These will unfortunately trigger a
          .                               // match, but once masked may point to a full bucket that
          .                               // is already occupied. We detect this situation here and
          .                               // perform a second scan starting at the beginning of the
          .                               // table. This second scan is guaranteed to find an empty
          .                               // slot (due to the load factor) before hitting the trailing
          .                               // control bytes (containing EMPTY).
 11,428,466 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
          .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
          .                                   debug_assert_ne!(probe_seq.pos, 0);
          .                                   return Group::load_aligned(self.ctrl(0))
          .                                       .match_empty_or_deleted()
          .                                       .lowest_set_bit_nonzero();
          .                               }
          .           
          .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
          .           
          .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
          .               /// code generated, but it is eliminated by LLVM optimizations.
          .               #[inline]
          .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
          .                   let h2_hash = h2(hash);
          .                   let mut probe_seq = self.probe_seq(hash);
          .           
    914,872 ( 0.00%)          loop {
          .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
          .           
 29,461,537 ( 0.08%)              for bit in group.match_byte(h2_hash) {
 59,565,341 ( 0.15%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
          .           
 39,128,785 ( 0.10%)                  if likely(eq(index)) {
          .                               return Some(index);
          .                           }
          .                       }
          .           
  8,217,894 ( 0.02%)              if likely(group.match_empty().any_bit_set()) {
          .                           return None;
          .                       }
          .           
          .                       probe_seq.move_next(self.bucket_mask);
          .                   }
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_rehash_in_place(&mut self) {
          .                   // Bulk convert all full control bytes to DELETED, and all DELETED
          .                   // control bytes to EMPTY. This effectively frees up all buckets
          .                   // containing a DELETED entry.
         12 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
          .                       let group = Group::load_aligned(self.ctrl(i));
          .                       let group = group.convert_special_to_empty_and_full_to_deleted();
          .                       group.store_aligned(self.ctrl(i));
          .                   }
          .           
          .                   // Fix up the trailing control bytes. See the comments in set_ctrl
          .                   // for the handling of tables smaller than the group width.
         12 ( 0.00%)          if self.buckets() < Group::WIDTH {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
          .                   } else {
          .                       self.ctrl(0)
          .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
          .                   }
          .               }
          .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
          .                   Bucket::from_base_index(self.data_end(), index)
          .               }
          .           
          .               #[inline]
          .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
          .                   debug_assert_ne!(self.bucket_mask, 0);
          .                   debug_assert!(index < self.buckets());
          .                   let base: *mut u8 = self.data_end().as_ptr();
 31,986,296 ( 0.08%)          base.sub((index + 1) * size_of)
          .               }
          .           
          .               #[inline]
          .               unsafe fn data_end<T>(&self) -> NonNull<T> {
          .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
          .               }
          .           
          .               /// Returns an iterator-like object for a probe sequence on the table.
          .               ///
          .               /// This iterator never terminates, but is guaranteed to visit each bucket
          .               /// group exactly once. The loop using `probe_seq` must terminate upon
          .               /// reaching a group containing an empty bucket.
          .               #[inline]
          .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
          .                   ProbeSeq {
159,948,411 ( 0.41%)              pos: h1(hash) & self.bucket_mask,
          .                       stride: 0,
          .                   }
          .               }
          .           
          .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
          .               /// in the table, otherwise returns error
          .               #[cfg(feature = "raw")]
          .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
          .                   } else {
          .                       self.record_item_insert_at(index, old_ctrl, hash);
          .                       Ok(index)
          .                   }
          .               }
          .           
          .               #[inline]
          .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 15,983,059 ( 0.04%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
          .                   self.set_ctrl_h2(index, hash);
 12,761,576 ( 0.03%)          self.items += 1;
          .               }
          .           
          .               #[inline]
          .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
          .                   let probe_seq_pos = self.probe_seq(hash).pos;
          .                   let probe_index =
          .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         87 ( 0.00%)          probe_index(i) == probe_index(new_i)
          .               }
          .           
          .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
          .               /// the end of the array.
          .               #[inline]
          .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
          .                   self.set_ctrl(index, h2(hash));
          .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
          .                   // replicate the buckets at the end of the trailing group. For example
          .                   // with 2 buckets and a group size of 4, the control bytes will look
          .                   // like this:
          .                   //
          .                   //     Real    |             Replicated
          .                   // ---------------------------------------------
          .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
          .                   // ---------------------------------------------
 23,944,539 ( 0.06%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
          .           
  7,974,713 ( 0.02%)          *self.ctrl(index) = ctrl;
  7,975,792 ( 0.02%)          *self.ctrl(index2) = ctrl;
          .               }
          .           
          .               /// Returns a pointer to a control byte.
          .               #[inline]
          .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
          .                   debug_assert!(index < self.num_ctrl_bytes());
          .                   self.ctrl.as_ptr().add(index)
          .               }
          .           
          .               #[inline]
          .               fn buckets(&self) -> usize {
  2,120,296 ( 0.01%)          self.bucket_mask + 1
          .               }
          .           
          .               #[inline]
          .               fn num_ctrl_bytes(&self) -> usize {
  2,001,589 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
          .               }
          .           
          .               #[inline]
          .               fn is_empty_singleton(&self) -> bool {
  8,706,772 ( 0.02%)          self.bucket_mask == 0
          .               }
          .           
          .               #[allow(clippy::mut_mut)]
          .               #[inline]
          .               unsafe fn prepare_resize(
          .                   &self,
          .                   table_layout: TableLayout,
          .                   capacity: usize,
          .                   fallibility: Fallibility,
          .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
          .                   debug_assert!(self.items <= capacity);
          .           
          .                   // Allocate and initialize the new table.
     29,148 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
          .                       self.alloc.clone(),
          .                       table_layout,
          .                       capacity,
          .                       fallibility,
          .                   )?;
    935,757 ( 0.00%)          new_table.growth_left -= self.items;
          .                   new_table.items = self.items;
          .           
          .                   // The hash function may panic, in which case we simply free the new
          .                   // table without dropping any elements that may have been copied into
          .                   // it.
          .                   //
          .                   // This guard is also used to free the old table on success, see
          .                   // the comment at the bottom of this function.
          .                   Ok(guard(new_table, move |self_| {
    417,846 ( 0.00%)              if !self_.is_empty_singleton() {
          .                           self_.free_buckets(table_layout);
          .                       }
          .                   }))
          .               }
          .           
          .               /// Reserves or rehashes to make room for `additional` more elements.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
          .                   &mut self,
          .                   additional: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .                   drop: Option<fn(*mut u8)>,
          .               ) -> Result<(), TryReserveError> {
          .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    835,701 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
          .                       Some(new_items) => new_items,
          .                       None => return Err(fallibility.capacity_overflow()),
          .                   };
    835,700 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
  1,776,161 ( 0.00%)          if new_items <= full_capacity / 2 {
          .                       // Rehash in-place without re-allocating if we have plenty of spare
          .                       // capacity that is locked up due to DELETED entries.
          .                       self.rehash_in_place(hasher, layout.size, drop);
          8 ( 0.00%)              Ok(())
          .                   } else {
          .                       // Otherwise, conservatively resize to at least the next size up
          .                       // to avoid churning deletes into frequent rehashes.
          .                       self.resize_inner(
    417,846 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
          .                           hasher,
          .                           fallibility,
          .                           layout,
          .                       )
          .                   }
          .               }
          .           
          .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
          .               #[inline(always)]
          .               unsafe fn resize_inner(
          .                   &mut self,
          .                   capacity: usize,
          .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
          .                   fallibility: Fallibility,
          .                   layout: TableLayout,
          .               ) -> Result<(), TryReserveError> {
     72,877 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
          .           
          .                   // Copy all elements to the new table.
          .                   for i in 0..self.buckets() {
  4,909,185 ( 0.01%)              if !is_full(*self.ctrl(i)) {
          .                           continue;
          .                       }
          .           
          .                       // This may panic.
          .                       let hash = hasher(self, i);
          .           
          .                       // We can use a simpler version of insert() here since:
          .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
          .                   }
          .           
          .                   // We successfully copied all elements without panicking. Now replace
          .                   // self with the new table. The old table will have its memory freed but
          .                   // the items will not be dropped (since they have been moved into the
          .                   // new table).
          .                   mem::swap(self, &mut new_table);
          .           
    417,846 ( 0.00%)          Ok(())
          .               }
          .           
          .               /// Rehashes the contents of the table in place (i.e. without changing the
          .               /// allocation).
          .               ///
          .               /// If `hasher` panics then some the table's contents may be lost.
          .               ///
          .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
          .                       }
          .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
          .                   });
          .           
          .                   // At this point, DELETED elements are elements that we haven't
          .                   // rehashed yet. Find them and re-insert them at their ideal
          .                   // position.
          .                   'outer: for i in 0..guard.buckets() {
        256 ( 0.00%)              if *guard.ctrl(i) != DELETED {
          .                           continue;
          .                       }
          .           
          .                       let i_p = guard.bucket_ptr(i, size_of);
          .           
          .                       'inner: loop {
          .                           // Hash the current item
          .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
          .                           let new_i = guard.find_insert_slot(hash);
          .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
          .           
          .                           // Probing works by scanning through all of the control
          .                           // bytes in groups, which may not be aligned to the group
          .                           // size. If both the new and old position fall within the
          .                           // same unaligned group, then there is no benefit in moving
          .                           // it and we can just continue to the next item.
         29 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
          .                               guard.set_ctrl_h2(i, hash);
          .                               continue 'outer;
          .                           }
          .           
          .                           // We are moving the current item to a new position. Write
          .                           // our H2 to the control byte of the new position.
          .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
          .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
          .                               // swapped into the old slot.
          .                               debug_assert_eq!(prev_ctrl, DELETED);
          .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
          .                               continue 'inner;
          .                           }
          .                       }
          .                   }
          .           
         12 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
          .           
          .                   mem::forget(guard);
          .               }
          .           
          .               #[inline]
          .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
          .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
          .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
          .                       Some(lco) => lco,
          .                       None => hint::unreachable_unchecked(),
          .                   };
          .                   self.alloc.deallocate(
    289,501 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
          .                       layout,
          .                   );
          .               }
          .           
          .               /// Marks all table buckets as empty without dropping their contents.
          .               #[inline]
          .               fn clear_no_drop(&mut self) {
    120,140 ( 0.00%)          if !self.is_empty_singleton() {
          .                       unsafe {
          .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
          .                       }
          .                   }
    142,504 ( 0.00%)          self.items = 0;
    120,607 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
          .               }
          .           
          .               #[inline]
          .               unsafe fn erase(&mut self, index: usize) {
          .                   debug_assert!(is_full(*self.ctrl(index)));
    641,451 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
          .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
          .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
          .           
          .                   // If we are inside a continuous block of Group::WIDTH full or deleted
          .                   // cells then a probe window may have seen a full block when trying to
          .                   // insert. We therefore need to keep that block non-empty so that
          .                   // lookups will continue searching to the next probe window.
          .                   //
          .                   // Note that in this context `leading_zeros` refers to the bytes at the
          .                   // end of a group, while `trailing_zeros` refers to the bytes at the
          .                   // beginning of a group.
  2,565,804 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
          .                       DELETED
          .                   } else {
  3,061,995 ( 0.01%)              self.growth_left += 1;
          .                       EMPTY
          .                   };
          .                   self.set_ctrl(index, ctrl);
  2,565,804 ( 0.01%)          self.items -= 1;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
    206,064 ( 0.00%)      fn clone(&self) -> Self {
     25,979 ( 0.00%)          if self.table.is_empty_singleton() {
          .                       Self::new_in(self.table.alloc.clone())
          .                   } else {
          .                       unsafe {
          .                           let mut new_table = ManuallyDrop::new(
          .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
          .                               match Self::new_uninitialized(
          .                                   self.table.alloc.clone(),
          .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
          .                               // We need to free the memory allocated for the new table.
          .                               new_table.free_buckets();
          .                           });
          .           
          .                           // Return the newly created table.
          .                           ManuallyDrop::into_inner(new_table)
          .                       }
          .                   }
    231,822 ( 0.00%)      }
          .           
          .               fn clone_from(&mut self, source: &Self) {
          .                   if source.table.is_empty_singleton() {
          .                       *self = Self::new_in(self.table.alloc.clone());
          .                   } else {
          .                       unsafe {
          .                           // First, drop all our elements without clearing the control bytes.
          .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
          .                       .table
          .                       .ctrl(0)
          .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
          .                   source
          .                       .data_start()
          .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
          .           
          .                   self.table.items = source.table.items;
        218 ( 0.00%)          self.table.growth_left = source.table.growth_left;
          .               }
          .           }
          .           
          .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
          .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
          .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
          .               fn default() -> Self {
          .                   Self::new_in(Default::default())
          .               }
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
  4,166,256 ( 0.01%)      fn drop(&mut self) {
  3,697,140 ( 0.01%)          if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
          .                           self.free_buckets();
          .                       }
          .                   }
  4,427,174 ( 0.01%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   if !self.table.is_empty_singleton() {
          .                       unsafe {
          .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
          .               type Item = T;
          .               type IntoIter = RawIntoIter<T, A>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     51,500 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
          .                   unsafe {
          .                       let iter = self.iter();
          .                       self.into_iter_from(iter)
          .                   }
     64,375 ( 0.00%)      }
          .           }
          .           
          .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
          .           /// not track an item count.
          .           pub(crate) struct RawIterRange<T> {
          .               // Mask of full buckets in the current group. Bits are cleared from this
          .               // mask as each element is processed.
          .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
          .           
          .           impl<T> Iterator for RawIterRange<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<Bucket<T>> {
          .                   unsafe {
          .                       loop {
  2,365,227 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    300,798 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    502,567 ( 0.00%)                      return Some(self.data.next_n(index));
          .                           }
          .           
  2,707,493 ( 0.01%)                  if self.next_ctrl >= self.end {
          .                               return None;
          .                           }
          .           
          .                           // We might read past self.end up to the next group boundary,
          .                           // but this is fine because it only occurs on tables smaller
          .                           // than the group size where the trailing control bytes are all
          .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
          .                           // to the group size (since tables are power-of-two sized).
     40,808 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     49,291 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     62,965 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
          .                       }
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   // We don't have an item count, so just guess based on the range size.
          .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
          .                           }
          .                       } else {
          .                           // We must have already iterated past the removed item.
          .                       }
          .                   }
          .               }
          .           
          .               unsafe fn drop_elements(&mut self) {
     15,764 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
          .                       for item in self {
          .                           item.drop();
          .                       }
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T> Iterator for RawIter<T> {
          .               type Item = Bucket<T>;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
    324,624 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    768,954 ( 0.00%)          if let Some(b) = self.iter.next() {
 14,182,890 ( 0.04%)              self.items -= 1;
          .                       Some(b)
          .                   } else {
          .                       // We don't check against items == 0 here to allow the
          .                       // compiler to optimize away the item count entirely if the
          .                       // iterator length is never queried.
          .                       debug_assert_eq!(self.items, 0);
          .                       None
          .                   }
    649,248 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          .                   (self.items, Some(self.items))
          .               }
          .           }
          .           
          .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           #[cfg(feature = "nightly")]
          .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     19,560 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
          .           
          .                       // Free the table
    106,924 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
          .                           self.alloc.deallocate(ptr, layout);
          .                       }
          .                   }
        374 ( 0.00%)      }
          .           }
          .           #[cfg(not(feature = "nightly"))]
          .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements
          .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
          .                   }
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
     17,622 ( 0.00%)      fn next(&mut self) -> Option<T> {
      4,131 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     45,621 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn size_hint(&self) -> (usize, Option<usize>) {
          4 ( 0.00%)          self.iter.size_hint()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
          .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
          .           
          .           /// Iterator which consumes elements without freeing the table storage.
          .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
          .           where
          .               T: Sync,
          .               A: Sync,
          .           {
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
          .               #[cfg_attr(feature = "inline-more", inline)]
     22,288 ( 0.00%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // Drop all remaining elements. Note that this may panic.
          .                       self.iter.drop_elements();
          .           
          .                       // Reset the contents of the table now that all elements have been
          .                       // dropped.
          .                       self.table.clear_no_drop();
          .           
          .                       // Move the now empty table back to its original location.
      2,786 ( 0.00%)              self.orig_table
          .                           .as_ptr()
          .                           .copy_from_nonoverlapping(&*self.table, 1);
          .                   }
     22,288 ( 0.00%)      }
          .           }
          .           
          .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
          .               type Item = T;
          .           
          .               #[cfg_attr(feature = "inline-more", inline)]
          .               fn next(&mut self) -> Option<T> {
          .                   unsafe {
-- line 2289 ----------------------------------------

123,700,856 ( 0.32%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                  

-- line 186 ----------------------------------------
         .           /// // use the values stored in map
         .           /// ```
         .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
         .               pub(crate) hash_builder: S,
         .               pub(crate) table: RawTable<(K, V), A>,
         .           }
         .           
         .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
     1,768 ( 0.00%)      fn clone(&self) -> Self {
   126,662 ( 0.00%)          HashMap {
         .                       hash_builder: self.hash_builder.clone(),
    25,757 ( 0.00%)              table: self.table.clone(),
         .                   }
     1,989 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   self.table.clone_from(&source.table);
         .           
         .                   // Update hash_builder only if we successfully cloned all elements.
         .                   self.hash_builder.clone_from(&source.hash_builder);
         .               }
         .           }
-- line 207 ----------------------------------------
-- line 210 ----------------------------------------
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash,
         .               S: BuildHasher,
         .           {
   793,068 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 2,537,714 ( 0.01%)      move |x| k.eq(x.0.borrow())
         .           }
         .           
         .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
         .           /// instances of any functions like RawTable::reserve from being generated
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
         .           where
         .               K: Borrow<Q>,
         .               Q: ?Sized + Eq,
         .           {
 3,273,458 ( 0.01%)      move |x| k.eq(x.borrow())
         .           }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
         .               use core::hash::Hasher;
         .               let mut state = hash_builder.build_hasher();
         .               val.hash(&mut state);
         .               state.finish()
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           #[cfg_attr(feature = "inline-more", inline)]
         2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
         .           where
         .               K: Borrow<Q>,
         .               Q: Hash + ?Sized,
         .               S: BuildHasher,
         .           {
         .               hash_builder.hash_one(val)
         4 ( 0.00%)  }
         .           
         .           #[cfg(not(feature = "nightly"))]
         .           #[cfg_attr(feature = "inline-more", inline)]
         .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
         .           where
         .               K: Hash,
         .               S: BuildHasher,
         .           {
-- line 274 ----------------------------------------
-- line 367 ----------------------------------------
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               ///
         .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub const fn with_hasher(hash_builder: S) -> Self {
 1,285,876 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new(),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys.
         .               ///
-- line 383 ----------------------------------------
-- line 437 ----------------------------------------
         .               /// use hashbrown::hash_map::DefaultHashBuilder;
         .               ///
         .               /// let s = DefaultHashBuilder::default();
         .               /// let mut map = HashMap::with_hasher(s);
         .               /// map.insert(1, 2);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
     1,378 ( 0.00%)          Self {
         .                       hash_builder,
         .                       table: RawTable::new_in(alloc),
         .                   }
         .               }
         .           
         .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
         .               /// to hash the keys. It will be allocated with the given allocator.
         .               ///
-- line 453 ----------------------------------------
-- line 527 ----------------------------------------
         .               /// map.insert("c", 3);
         .               ///
         .               /// for key in map.keys() {
         .               ///     println!("{}", key);
         .               /// }
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn keys(&self) -> Keys<'_, K, V> {
         6 ( 0.00%)          Keys { inner: self.iter() }
         .               }
         .           
         .               /// An iterator visiting all values in arbitrary order.
         .               /// The iterator element type is `&'a V`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 543 ----------------------------------------
-- line 663 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert_eq!(a.len(), 0);
         .               /// a.insert(1, "a");
         .               /// assert_eq!(a.len(), 1);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn len(&self) -> usize {
    97,818 ( 0.00%)          self.table.len()
         .               }
         .           
         .               /// Returns `true` if the map contains no elements.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
-- line 679 ----------------------------------------
-- line 680 ----------------------------------------
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// assert!(a.is_empty());
         .               /// a.insert(1, "a");
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn is_empty(&self) -> bool {
   486,551 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
         .               /// allocated memory for reuse.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 696 ----------------------------------------
-- line 790 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut a = HashMap::new();
         .               /// a.insert(1, "a");
         .               /// a.clear();
         .               /// assert!(a.is_empty());
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         6 ( 0.00%)      pub fn clear(&mut self) {
         .                   self.table.clear();
         6 ( 0.00%)      }
         .           
         .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
         .               /// The map cannot be used after calling this.
         .               /// The iterator element type is `K`.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
-- line 808 ----------------------------------------
-- line 963 ----------------------------------------
         .               /// }
         .               ///
         .               /// assert_eq!(letters[&'s'], 2);
         .               /// assert_eq!(letters[&'t'], 3);
         .               /// assert_eq!(letters[&'u'], 1);
         .               /// assert_eq!(letters.get(&'y'), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     6,284 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
         .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
     4,510 ( 0.00%)              Entry::Occupied(OccupiedEntry {
         .                           hash,
         .                           key: Some(key),
         .                           elem,
         .                           table: self,
         .                       })
         .                   } else {
     3,345 ( 0.00%)              Entry::Vacant(VacantEntry {
         .                           hash,
         .                           key,
         .                           table: self,
         .                       })
         .                   }
     7,855 ( 0.00%)      }
         .           
         .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// use hashbrown::HashMap;
         .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 5,369,739 ( 0.01%)          match self.get_inner(k) {
         .                       Some(&(_, ref v)) => Some(v),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1091 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
 6,412,536 ( 0.02%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
         .                       self.table.get(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
         .               ///
         .               /// The supplied key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
-- line 1110 ----------------------------------------
-- line 1155 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.contains_key(&1), true);
         .               /// assert_eq!(map.contains_key(&2), false);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,193,209 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   self.get_inner(k).is_some()
 2,764,330 ( 0.01%)      }
         .           
         .               /// Returns a mutable reference to the value corresponding to the key.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
         .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// if let Some(x) = map.get_mut(&1) {
         .               ///     *x = "b";
         .               /// }
         .               /// assert_eq!(map[&1], "b");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,124 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    33,867 ( 0.00%)          match self.get_inner_mut(k) {
         .                       Some(&mut (_, ref mut v)) => Some(v),
         .                       None => None,
         .                   }
     2,248 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
    11,289 ( 0.00%)          if self.table.is_empty() {
         .                       None
         .                   } else {
         .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
    20,330 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
         .                   }
         .               }
         .           
         .               /// Attempts to get mutable references to `N` values in the map at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
         .               /// mutable reference will be returned to any value. `None` will be returned if any of the
         .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
         .               /// assert_eq!(map.insert(37, "a"), None);
         .               /// assert_eq!(map.is_empty(), false);
         .               ///
         .               /// map.insert(37, "b");
         .               /// assert_eq!(map.insert(37, "c"), Some("b"));
         .               /// assert_eq!(map[&37], "c");
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
18,180,283 ( 0.05%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
         .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    51,872 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
         6 ( 0.00%)              Some(mem::replace(item, v))
         .                   } else {
 7,534,580 ( 0.02%)              self.table
 7,663,688 ( 0.02%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
   833,475 ( 0.00%)              None
         .                   }
16,723,990 ( 0.04%)      }
         .           
         .               /// Insert a key-value pair into the map without checking
         .               /// if the key already exists in the map.
         .               ///
         .               /// Returns a reference to the key and value just inserted.
         .               ///
         .               /// This operation is safe if a key does not exist in the map.
         .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
         .               /// use hashbrown::HashMap;
         .               ///
         .               /// let mut map = HashMap::new();
         .               /// map.insert(1, "a");
         .               /// assert_eq!(map.remove(&1), Some("a"));
         .               /// assert_eq!(map.remove(&1), None);
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
   466,667 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 3,342,680 ( 0.01%)          match self.remove_entry(k) {
   250,504 ( 0.00%)              Some((_, v)) => Some(v),
   377,832 ( 0.00%)              None => None,
         .                   }
 1,078,246 ( 0.00%)      }
         .           
         .               /// Removes a key from the map, returning the stored key and value if the
         .               /// key was previously in the map.
         .               ///
         .               /// The key may be any borrowed form of the map's key type, but
         .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
         .               /// the key type.
         .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Hash + Eq,
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
 1,330,007 ( 0.00%)          self.table.remove_entry(hash, equivalent_key(k))
         .               }
         .           }
         .           
         .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
         .               /// Creates a raw entry builder for the HashMap.
         .               ///
         .               /// Raw entries provide the lowest level of control for searching and
         .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 2209 ----------------------------------------
         .               /// Creates a `RawEntryMut` from the given key and its hash.
         .               #[inline]
         .               #[allow(clippy::wrong_self_convention)]
         .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
18,555,872 ( 0.05%)          self.from_hash(hash, equivalent(k))
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
         .               /// Creates a `RawEntryMut` from the given hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
46,715,302 ( 0.12%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
         .                   self.search(hash, is_match)
50,695,137 ( 0.13%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
         .               where
         .                   for<'b> F: FnMut(&'b K) -> bool,
         .               {
 5,744,110 ( 0.01%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
29,490,513 ( 0.08%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
         .                           elem,
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
 2,690,341 ( 0.01%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
         .                           table: &mut self.map.table,
         .                           hash_builder: &self.map.hash_builder,
         .                       }),
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
         .               {
         .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
         .                   self.from_key_hashed_nocheck(hash, k)
         .               }
         .           
         .               /// Access an entry by a key and its hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
10,114,619 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
         .               where
         .                   K: Borrow<Q>,
         .                   Q: Eq,
         .               {
10,656,680 ( 0.03%)          self.from_hash(hash, equivalent(k))
18,060,181 ( 0.05%)      }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
         .               where
         .                   F: FnMut(&K) -> bool,
         .               {
14,739,500 ( 0.04%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
         .                       Some(&(ref key, ref value)) => Some((key, value)),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Access an entry by hash.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
         .               /// and returns a mutable reference to it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::shadow_unrelated)]
         .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
 4,420,585 ( 0.01%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
         .                       hash,
         .                       (key, value),
         .                       make_hasher::<K, _, V, S>(self.hash_builder),
         .                   );
         .                   (k, v)
         .               }
         .           
         .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
         .               /// map.insert("a", 1);
         .               /// map.insert("b", 2);
         .               /// map.insert("c", 3);
         .               ///
         .               /// // Not possible with .iter()
         .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
     9,618 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   198,117 ( 0.00%)          IntoIter {
   109,918 ( 0.00%)              inner: self.table.into_iter(),
         .                   }
    28,854 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
         .               type Item = (&'a K, &'a V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
 1,039,275 ( 0.00%)          match self.inner.next() {
         .                       Some(x) => unsafe {
         .                           let r = x.as_ref();
     8,960 ( 0.00%)                  Some((&r.0, &r.1))
         .                       },
         .                       None => None,
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
     1,957 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
         .                   self.inner.len()
         .               }
         .           }
-- line 3013 ----------------------------------------
-- line 3051 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
         .               type Item = (K, V);
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<(K, V)> {
    45,617 ( 0.00%)          self.inner.next()
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3067 ----------------------------------------
-- line 3076 ----------------------------------------
         .                   f.debug_list().entries(self.iter()).finish()
         .               }
         .           }
         .           
         .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
         .               type Item = &'a K;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
       593 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match self.inner.next() {
         .                       Some((k, _)) => Some(k),
         .                       None => None,
         .                   }
     1,186 ( 0.00%)      }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   self.inner.size_hint()
         .               }
         .           }
         .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
         .               /// ```
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn insert(self, value: V) -> &'a mut V
         .               where
         .                   K: Hash,
         .                   S: BuildHasher,
         .               {
         .                   let table = &mut self.table.table;
       221 ( 0.00%)          let entry = table.insert_entry(
         .                       self.hash,
         .                       (self.key, value),
         .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
         .                   );
         .                   &mut entry.1
         .               }
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
         .           /// keys with new values returned from the iterator.
         .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
         .           where
         .               K: Eq + Hash,
         .               S: BuildHasher,
         .               A: Allocator + Clone,
         .           {
         .               #[cfg_attr(feature = "inline-more", inline)]
   197,631 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
         .                   // Keys may be already present or show multiple times in the iterator.
         .                   // Reserve the entire hint lower bound if the map is empty.
         .                   // Otherwise reserve half the hint (rounded up), so the map
         .                   // will only resize twice in the worst case.
   157,902 ( 0.00%)          let iter = iter.into_iter();
   149,147 ( 0.00%)          let reserve = if self.is_empty() {
         .                       iter.size_hint().0
         .                   } else {
     9,555 ( 0.00%)              (iter.size_hint().0 + 1) / 2
         .                   };
         .                   self.reserve(reserve);
         .                   iter.for_each(move |(k, v)| {
   575,948 ( 0.00%)              self.insert(k, v);
         .                   });
   132,747 ( 0.00%)      }
         .           
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               fn extend_one(&mut self, (k, v): (K, V)) {
         .                   self.insert(k, v);
         .               }
         .           
         .               #[inline]
-- line 4588 ----------------------------------------

35,577,413 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                  

-- line 293 ----------------------------------------
         .           
         .           #[allow(deprecated)]
         .           impl From<LayoutErr> for CollectionAllocErr {
         .               fn from(_: LayoutErr) -> Self {
         .                   CollectionAllocErr::CapacityOverflow
         .               }
         .           }
         .           
       315 ( 0.00%)  fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
 5,443,316 ( 0.01%)      match result {
         .                   Ok(x) => x,
         .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
         .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
         .               }
       630 ( 0.00%)  }
         .           
         .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
         .           /// https://github.com/rust-lang/rust/issues/55724
         .           fn layout_array<T>(n: usize) -> Result<Layout, CollectionAllocErr> {
         .               let size = mem::size_of::<T>()
         .                   .checked_mul(n)
         .                   .ok_or(CollectionAllocErr::CapacityOverflow)?;
         .               let align = mem::align_of::<T>();
-- line 315 ----------------------------------------
-- line 422 ----------------------------------------
         .           #[cfg(feature = "union")]
         .           impl<A: Array> SmallVecData<A> {
         .               #[inline]
         .               unsafe fn inline(&self) -> *const A::Item {
         .                   self.inline.as_ptr() as *const A::Item
         .               }
         .               #[inline]
         .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
   471,430 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
         .               }
         .               #[inline]
         .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
         .                   SmallVecData {
         .                       inline: core::mem::ManuallyDrop::new(inline),
         .                   }
         .               }
         .               #[inline]
         .               unsafe fn into_inline(self) -> MaybeUninit<A> {
         .                   core::mem::ManuallyDrop::into_inner(self.inline)
         .               }
         .               #[inline]
         .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
   124,295 ( 0.00%)          self.heap
         .               }
         .               #[inline]
         .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
         .                   &mut self.heap
         .               }
         .               #[inline]
         .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
         .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
         .               #[inline]
         .               pub fn new() -> SmallVec<A> {
         .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
         .                   // this check should be optimized away entirely for valid ones.
         .                   assert!(
         .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
         .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
         .                   );
 3,542,371 ( 0.01%)          SmallVec {
         .                       capacity: 0,
         .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
         .                   }
         .               }
         .           
         .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
         .               /// elements.
         .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
         .               ///
         .               /// let vec = vec![1, 2, 3, 4, 5];
         .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
    17,030 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
         .                       unsafe {
         .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
         .                           let len = vec.len();
         .                           vec.set_len(0);
         .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
         .           
         .                           SmallVec {
         .                               capacity: len,
         .                               data,
         .                           }
         .                       }
         .                   } else {
         .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
         .                       mem::forget(vec);
         .           
    26,118 ( 0.00%)              SmallVec {
         .                           capacity: cap,
         .                           data: SmallVecData::from_heap(ptr, len),
         .                       }
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf(buf: A) -> SmallVec<A> {
         .                   SmallVec {
         .                       capacity: A::size(),
    50,274 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
         .                   }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length, which must be less or
         .               /// equal to the size of `buf`.
         .               ///
         .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
         .               ///
         .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
         .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
   164,476 ( 0.00%)          assert!(len <= A::size());
   493,428 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
         .               }
         .           
         .               /// Constructs a new `SmallVec` on the stack from an `A` without
         .               /// copying elements. Also sets the length. The user is responsible
         .               /// for ensuring that `len <= A::size()`.
         .               ///
         .               /// ```rust
         .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
         .               /// let small_vec: SmallVec<_> = unsafe {
         .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
         .               /// };
         .               ///
         .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
         .               /// ```
         .               #[inline]
         .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
    82,238 ( 0.00%)          SmallVec {
         .                       capacity: len,
         .                       data: SmallVecData::from_inline(buf),
         .                   }
         .               }
         .           
         .               /// Sets the length of a vector.
         .               ///
         .               /// This will explicitly set the size of the vector, without actually
         .               /// modifying its buffers, so it is up to the caller to ensure that the
         .               /// vector is actually the specified size.
         .               pub unsafe fn set_len(&mut self, new_len: usize) {
         .                   let (_, len_ptr, _) = self.triple_mut();
 1,635,308 ( 0.00%)          *len_ptr = new_len;
         .               }
         .           
         .               /// The maximum number of elements this vector can hold inline
         .               #[inline]
         .               fn inline_capacity() -> usize {
         .                   if mem::size_of::<A::Item>() > 0 {
       400 ( 0.00%)              A::size()
         .                   } else {
         .                       // For zero-size items code like `ptr.add(offset)` always returns the same pointer.
         .                       // Therefore all items are at the same address,
         .                       // and any array size has capacity for infinitely many items.
         .                       // The capacity is limited by the bit width of the length field.
         .                       //
         .                       // `Vec` also does this:
         .                       // https://github.com/rust-lang/rust/blob/1.44.0/src/liballoc/raw_vec.rs#L186
-- line 710 ----------------------------------------
-- line 725 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.triple().1
         .               }
         .           
         .               /// Returns `true` if the vector is empty
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 1,352,158 ( 0.00%)          self.len() == 0
         .               }
         .           
         .               /// The number of items the vector can hold without reallocating
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.triple().2
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len, capacity)
         .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
         .               #[inline]
         .               fn triple(&self) -> (*const A::Item, usize, usize) {
         .                   unsafe {
49,020,331 ( 0.13%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           (ptr, len, self.capacity)
         .                       } else {
         .                           (self.data.inline(), self.capacity, Self::inline_capacity())
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns a tuple with (data ptr, len ptr, capacity)
         .               #[inline]
         .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
         .                   unsafe {
51,944,389 ( 0.13%)              if self.spilled() {
   206,361 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
         .                           (ptr, len_ptr, self.capacity)
         .                       } else {
         .                           (
         .                               self.data.inline_mut(),
         .                               &mut self.capacity,
         .                               Self::inline_capacity(),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
         .               #[inline]
         .               pub fn spilled(&self) -> bool {
65,109,555 ( 0.17%)          self.capacity > Self::inline_capacity()
         .               }
         .           
         .               /// Creates a draining iterator that removes the specified range in the vector
         .               /// and yields the removed items.
         .               ///
         .               /// Note 1: The element range is removed even if the iterator is only
         .               /// partially consumed or not consumed at all.
         .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
         .                           iter: range_slice.iter(),
         .                           vec: NonNull::from(self),
         .                       }
         .                   }
         .               }
         .           
         .               /// Append an item to the vector.
         .               #[inline]
   592,175 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
         .                   unsafe {
         .                       let (mut ptr, mut len, cap) = self.triple_mut();
 5,790,426 ( 0.01%)              if *len == cap {
     3,591 ( 0.00%)                  self.reserve(1);
    58,478 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
         .                           ptr = heap_ptr;
         .                           len = heap_len;
         .                       }
    51,128 ( 0.00%)              ptr::write(ptr.add(*len), value);
10,962,689 ( 0.03%)              *len += 1;
         .                   }
   473,740 ( 0.00%)      }
         .           
         .               /// Remove an item from the end of the vector and return it, or None if empty.
         .               #[inline]
         .               pub fn pop(&mut self) -> Option<A::Item> {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
 2,520,437 ( 0.01%)              if *len_ptr == 0 {
         .                           return None;
         .                       }
   640,916 ( 0.00%)              let last_index = *len_ptr - 1;
   652,277 ( 0.00%)              *len_ptr = last_index;
   501,642 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
         .                   }
       699 ( 0.00%)      }
         .           
         .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
         .               ///
         .               /// # Example
         .               ///
         .               /// ```
         .               /// # use smallvec::{SmallVec, smallvec};
         .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
         .               /// or if the capacity computation overflows `usize`.
         .               pub fn grow(&mut self, new_cap: usize) {
         .                   infallible(self.try_grow(new_cap))
         .               }
         .           
         .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
         .               ///
         .               /// Panics if `new_cap` is less than the vector's length
    19,930 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
         .                   unsafe {
     1,526 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
         .                       let unspilled = !self.spilled();
   104,534 ( 0.00%)              assert!(new_cap >= len);
   104,534 ( 0.00%)              if new_cap <= self.inline_size() {
         .                           if unspilled {
         .                               return Ok(());
         .                           }
         .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
         .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
         .                           self.capacity = len;
         .                           deallocate(ptr, cap);
   104,534 ( 0.00%)              } else if new_cap != cap {
    96,366 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
         .                           debug_assert!(layout.size() > 0);
         .                           let new_alloc;
    52,267 ( 0.00%)                  if unspilled {
         .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
         .                           } else {
         .                               // This should never fail since the same succeeded
         .                               // when previously allocating `ptr`.
    18,156 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
         .           
         .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
         .                               new_alloc = NonNull::new(new_ptr)
         .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
         .                                   .cast()
         .                                   .as_ptr();
         .                           }
   104,534 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
   142,371 ( 0.00%)                  self.capacity = new_cap;
         .                       }
         .                       Ok(())
         .                   }
    21,456 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
         .               ///
         .               /// Panics if the capacity computation overflows `usize`.
         .               #[inline]
 1,159,162 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
 6,477,935 ( 0.02%)          infallible(self.try_reserve(additional))
 1,304,416 ( 0.00%)      }
         .           
         .               /// Reserve capacity for `additional` more elements to be inserted.
         .               ///
         .               /// May reserve more space to avoid frequent reallocations.
20,437,859 ( 0.05%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   // prefer triple_mut() even if triple() would work
         .                   // so that the optimizer removes duplicated calls to it
         .                   // from callers like insert()
    48,585 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
16,892,415 ( 0.04%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .and_then(usize::checked_next_power_of_two)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
     4,039 ( 0.00%)          self.try_grow(new_cap)
24,484,023 ( 0.06%)      }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               ///
         .               /// Panics if the new capacity overflows `usize`.
         .               pub fn reserve_exact(&mut self, additional: usize) {
         .                   infallible(self.try_reserve_exact(additional))
         .               }
         .           
         .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
         .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
         .                   let (_, &mut len, cap) = self.triple_mut();
   646,460 ( 0.00%)          if cap - len >= additional {
         .                       return Ok(());
         .                   }
         .                   let new_cap = len
         .                       .checked_add(additional)
         .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
       649 ( 0.00%)          self.try_grow(new_cap)
       649 ( 0.00%)      }
         .           
         .               /// Shrink the capacity of the vector as much as possible.
         .               ///
         .               /// When possible, this will move data from an external heap buffer to the vector's inline
         .               /// storage.
         .               pub fn shrink_to_fit(&mut self) {
         .                   if !self.spilled() {
         .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
         .               /// If `len` is greater than or equal to the vector's current length, this has no
         .               /// effect.
         .               ///
         .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
         .               /// `shrink_to_fit` after truncating.
         .               pub fn truncate(&mut self, len: usize) {
         .                   unsafe {
         .                       let (ptr, len_ptr, _) = self.triple_mut();
   278,732 ( 0.00%)              while len < *len_ptr {
         .                           let last_index = *len_ptr - 1;
         .                           *len_ptr = last_index;
         .                           ptr::drop_in_place(ptr.add(last_index));
         .                       }
         .                   }
         .               }
         .           
         .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
         .               pub fn clear(&mut self) {
         .                   self.truncate(0);
         .               }
         .           
         .               /// Remove and return the element at position `index`, shifting all elements after it to the
         .               /// left.
         .               ///
         .               /// Panics if `index` is out of bounds.
     3,056 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    42,828 ( 0.00%)              let len = *len_ptr;
   146,409 ( 0.00%)              assert!(index < len);
   174,967 ( 0.00%)              *len_ptr = len - 1;
         .                       ptr = ptr.add(index);
         .                       let item = ptr::read(ptr);
    97,606 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
         .                       item
         .                   }
     3,820 ( 0.00%)      }
         .           
         .               /// Insert an element at position `index`, shifting all elements after it to the right.
         .               ///
         .               /// Panics if `index` is out of bounds.
   661,571 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
         .                   self.reserve(1);
         .           
         .                   unsafe {
         .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    61,673 ( 0.00%)              let len = *len_ptr;
   121,816 ( 0.00%)              assert!(index <= len);
   243,632 ( 0.00%)              *len_ptr = len + 1;
         .                       ptr = ptr.add(index);
   121,816 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
         .                       ptr::write(ptr, element);
         .                   }
   421,002 ( 0.00%)      }
         .           
         .               /// Insert multiple elements at position `index`, shifting all following elements toward the
         .               /// back.
         .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
         .                   let mut iter = iterable.into_iter();
         .                   if index == self.len() {
         .                       return self.extend(iter);
         .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Retains only the elements specified by the predicate.
         .               ///
         .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
         .               /// This method operates in place and preserves the order of the retained
         .               /// elements.
   669,015 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
         .                   let mut del = 0;
         .                   let len = self.len();
         .                   for i in 0..len {
   405,796 ( 0.00%)              if !f(&mut self[i]) {
       970 ( 0.00%)                  del += 1;
   120,998 ( 0.00%)              } else if del > 0 {
       276 ( 0.00%)                  self.swap(i - del, i);
         .                       }
         .                   }
   148,670 ( 0.00%)          self.truncate(len - del);
   594,680 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements.
        56 ( 0.00%)      pub fn dedup(&mut self)
         .               where
         .                   A::Item: PartialEq<A::Item>,
         .               {
         .                   self.dedup_by(|a, b| a == b);
        64 ( 0.00%)      }
         .           
         .               /// Removes consecutive duplicate elements using the given equality relation.
         .               pub fn dedup_by<F>(&mut self, mut same_bucket: F)
         .               where
         .                   F: FnMut(&mut A::Item, &mut A::Item) -> bool,
         .               {
         .                   // See the implementation of Vec::dedup_by in the
         .                   // standard library for an explanation of this algorithm.
         .                   let len = self.len();
        16 ( 0.00%)          if len <= 1 {
         .                       return;
         .                   }
         .           
         .                   let ptr = self.as_mut_ptr();
         .                   let mut w: usize = 1;
         .           
         .                   unsafe {
         .                       for r in 1..len {
-- line 1246 ----------------------------------------
-- line 1418 ----------------------------------------
         .                           capacity: len,
         .                           data: SmallVecData::from_inline(unsafe {
         .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
         .                               ptr::copy_nonoverlapping(
         .                                   slice.as_ptr(),
         .                                   data.as_mut_ptr() as *mut A::Item,
         .                                   len,
         .                               );
     4,002 ( 0.00%)                      data
         .                           }),
         .                       }
         .                   } else {
         .                       let mut b = slice.to_vec();
         .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
         .                       mem::forget(b);
         .                       SmallVec {
         .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Copy elements from a slice into the vector at position `index`, shifting any following
         .               /// elements toward the back.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `insert`.
12,494,651 ( 0.03%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
         .                   self.reserve(slice.len());
         .           
         .                   let len = self.len();
 3,271,680 ( 0.01%)          assert!(index <= len);
         .           
         .                   unsafe {
         .                       let slice_ptr = slice.as_ptr();
         .                       let ptr = self.as_mut_ptr().add(index);
         .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
         .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
 2,181,120 ( 0.01%)              self.set_len(len + slice.len());
         .                   }
 8,724,480 ( 0.02%)      }
         .           
         .               /// Copy elements from a slice and append them to the vector.
         .               ///
         .               /// For slices of `Copy` types, this is more efficient than `extend`.
         .               #[inline]
         .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
         .                   let len = self.len();
 2,341,097 ( 0.01%)          self.insert_from_slice(len, slice);
         .               }
         .           }
         .           
         .           impl<A: Array> SmallVec<A>
         .           where
         .               A::Item: Clone,
         .           {
         .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
         .               /// Creates a `SmallVec` with `n` copies of `elem`.
         .               /// ```
         .               /// use smallvec::SmallVec;
         .               ///
         .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
         .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
         .               /// ```
         .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
    44,394 ( 0.00%)          if n > Self::inline_capacity() {
         .                       vec![elem; n].into()
         .                   } else {
         .                       let mut v = SmallVec::<A>::new();
         .                       unsafe {
         .                           let (ptr, len_ptr, _) = v.triple_mut();
         .                           let mut local_len = SetLenOnDrop::new(len_ptr);
         .           
         .                           for i in 0..n {
         .                               ::core::ptr::write(ptr.add(i), elem.clone());
         .                               local_len.increment_len(1);
         .                           }
         .                       }
    66,018 ( 0.00%)              v
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::Deref for SmallVec<A> {
         .               type Target = [A::Item];
         .               #[inline]
         .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> ops::DerefMut for SmallVec<A> {
         .               #[inline]
         .               fn deref_mut(&mut self) -> &mut [A::Item] {
         .                   unsafe {
   398,033 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
         .                       slice::from_raw_parts_mut(ptr, len)
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
         .               #[inline]
         .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
         .                   SmallVec::extend_from_slice(self, other)
         .               }
         .           }
         .           
         .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
         .                   let mut v = SmallVec::new();
 6,174,546 ( 0.02%)          v.extend(iterable);
         .                   v
         .               }
         .           }
         .           
         .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
20,856,362 ( 0.05%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
 1,188,385 ( 0.00%)          let mut iter = iterable.into_iter();
         .                   let (lower_size_bound, _) = iter.size_hint();
   235,063 ( 0.00%)          self.reserve(lower_size_bound);
         .           
         .                   unsafe {
         .                       let (ptr, len_ptr, cap) = self.triple_mut();
         .                       let mut len = SetLenOnDrop::new(len_ptr);
14,609,668 ( 0.04%)              while len.get() < cap {
 1,364,496 ( 0.00%)                  if let Some(out) = iter.next() {
     2,954 ( 0.00%)                      ptr::write(ptr.add(len.get()), out);
         .                               len.increment_len(1);
         .                           } else {
         .                               return;
         .                           }
         .                       }
         .                   }
         .           
   932,982 ( 0.00%)          for elem in iter {
   282,173 ( 0.00%)              self.push(elem);
         .                   }
17,521,047 ( 0.04%)      }
         .           }
         .           
         .           impl<A: Array> fmt::Debug for SmallVec<A>
         .           where
         .               A::Item: fmt::Debug,
         .           {
         .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
         .               #[inline]
         .               fn default() -> SmallVec<A> {
         .                   SmallVec::new()
         .               }
         .           }
         .           
         .           #[cfg(feature = "may_dangle")]
         .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
 6,310,912 ( 0.02%)      fn drop(&mut self) {
         .                   unsafe {
10,564,688 ( 0.03%)              if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
         .                           Vec::from_raw_parts(ptr, len, self.capacity);
         .                       } else {
         .                           ptr::drop_in_place(&mut self[..]);
         .                       }
         .                   }
 6,765,510 ( 0.02%)      }
         .           }
         .           
         .           #[cfg(not(feature = "may_dangle"))]
         .           impl<A: Array> Drop for SmallVec<A> {
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       if self.spilled() {
         .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
         .               A::Item: Clone,
         .           {
         .               fn clone(&self) -> IntoIter<A> {
         .                   SmallVec::from(self.as_slice()).into_iter()
         .               }
         .           }
         .           
         .           impl<A: Array> Drop for IntoIter<A> {
     6,782 ( 0.00%)      fn drop(&mut self) {
   546,163 ( 0.00%)          for _ in self {}
     6,512 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Array> Iterator for IntoIter<A> {
         .               type Item = A::Item;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A::Item> {
 3,869,857 ( 0.01%)          if self.current == self.end {
       243 ( 0.00%)              None
         .                   } else {
         .                       unsafe {
         .                           let current = self.current;
 2,066,569 ( 0.01%)                  self.current += 1;
    63,264 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    81,291 ( 0.00%)          let size = self.end - self.current;
         .                   (size, Some(size))
         .               }
         .           }
         .           
         .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A::Item> {
         .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
         .           impl<A: Array> IntoIterator for SmallVec<A> {
         .               type IntoIter = IntoIter<A>;
         .               type Item = A::Item;
         .               fn into_iter(mut self) -> Self::IntoIter {
         .                   unsafe {
         .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
         .                       let len = self.len();
         .                       self.set_len(0);
   196,010 ( 0.00%)              IntoIter {
 1,858,099 ( 0.00%)                  data: self,
         .                           current: 0,
         .                           end: len,
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
         .               len: &'a mut usize,
         .               local_len: usize,
         .           }
         .           
         .           impl<'a> SetLenOnDrop<'a> {
         .               #[inline]
         .               fn new(len: &'a mut usize) -> Self {
         .                   SetLenOnDrop {
 2,257,469 ( 0.01%)              local_len: *len,
         .                       len,
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn get(&self) -> usize {
         .                   self.local_len
         .               }
         .           
         .               #[inline]
         .               fn increment_len(&mut self, increment: usize) {
 2,826,076 ( 0.01%)          self.local_len += increment;
         .               }
         .           }
         .           
         .           impl<'a> Drop for SetLenOnDrop<'a> {
         .               #[inline]
         .               fn drop(&mut self) {
 2,360,932 ( 0.01%)          *self.len = self.local_len;
         .               }
         .           }
         .           
         .           #[cfg(feature = "const_new")]
         .           impl<T, const N: usize> SmallVec<[T; N]> {
         .               /// Construct an empty vector.
         .               ///
         .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

33,523,591 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 108 ----------------------------------------
          .                   suppress_errors: bool,
          .               },
          .           }
          .           
          .           impl RegionckMode {
          .               /// Indicates that the MIR borrowck will repeat these region
          .               /// checks, so we should ignore errors if NLL is (unconditionally)
          .               /// enabled.
      2,361 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
          .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
          .                   // this always `true` and then proceed to eliminate the dead code.
      2,361 ( 0.00%)          match tcx.borrowck_mode() {
          .                       // If we're on Migrate mode, report AST region errors
          .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
          .           
          .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
          .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
          .                   }
      4,722 ( 0.00%)      }
          .           }
          .           
          .           /// This type contains all the things within `InferCtxt` that sit within a
          .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
          .           /// operations are hot enough that we want only one call to `borrow_mut` per
          .           /// call to `start_snapshot` and `rollback_to`.
          .           pub struct InferCtxtInner<'tcx> {
          .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
          .               /// type instantiations (`ty::Infer`) to the actual opaque
          .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
          .               /// opaque type inference variables to their corresponding
          .               /// opaque type.
          .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
          .           }
          .           
          .           impl<'tcx> InferCtxtInner<'tcx> {
    353,570 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  2,404,276 ( 0.01%)          InferCtxtInner {
          .                       projection_cache: Default::default(),
          .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
          .                       undo_log: InferCtxtUndoLogs::default(),
          .                       const_unification_storage: ut::UnificationTableStorage::new(),
          .                       int_unification_storage: ut::UnificationTableStorage::new(),
          .                       float_unification_storage: ut::UnificationTableStorage::new(),
    212,142 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
          .                       region_obligations: vec![],
          .                       opaque_types: Default::default(),
          .                       opaque_types_vars: Default::default(),
          .                   }
    424,284 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
          .                   &self.region_obligations
          .               }
          .           
          .               #[inline]
          .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
     24,217 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
 37,102,773 ( 0.09%)          self.type_variable_storage.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn int_unification_table(
          .                   &mut self,
          .               ) -> ut::UnificationTable<
          .                   ut::InPlace<
          .                       ty::IntVid,
          .                       &mut ut::UnificationStorage<ty::IntVid>,
          .                       &mut InferCtxtUndoLogs<'tcx>,
          .                   >,
          .               > {
     83,238 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn float_unification_table(
          .                   &mut self,
          .               ) -> ut::UnificationTable<
          .                   ut::InPlace<
          .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
          .                   &mut self,
          .               ) -> ut::UnificationTable<
          .                   ut::InPlace<
          .                       ty::ConstVid<'tcx>,
          .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
          .                       &mut InferCtxtUndoLogs<'tcx>,
          .                   >,
          .               > {
     14,119 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
          .               }
          .           
          .               #[inline]
          .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
    536,413 ( 0.00%)          self.region_constraint_storage
          .                       .as_mut()
          .                       .expect("region constraints already solved")
    687,869 ( 0.00%)              .with_log(&mut self.undo_log)
          .               }
          .           }
          .           
          .           pub struct InferCtxt<'a, 'tcx> {
          .               pub tcx: TyCtxt<'tcx>,
          .           
          .               /// The `DefId` of the item in whose context we are performing inference or typeck.
          .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
          .               /// item we are type-checking, and just consider those names as
          .               /// part of the root universe. So this would only get incremented
          .               /// when we enter into a higher-ranked (`for<..>`) type or trait
          .               /// bound.
          .               universe: Cell<ty::UniverseIndex>,
          .           }
          .           
          .           /// See the `error_reporting` module for more details.
  1,153,608 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
          .           pub enum ValuePairs<'tcx> {
          .               Types(ExpectedFound<Ty<'tcx>>),
          .               Regions(ExpectedFound<ty::Region<'tcx>>),
          .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
          .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
          .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
          .           }
          .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
          .           pub struct TypeTrace<'tcx> {
          .               cause: ObligationCause<'tcx>,
          .               values: ValuePairs<'tcx>,
          .           }
          .           
          .           /// The origin of a `r1 <= r2` constraint.
          .           ///
          .           /// See `error_reporting` module for more details
    899,288 ( 0.00%)  #[derive(Clone, Debug)]
          .           pub enum SubregionOrigin<'tcx> {
          .               /// Arose from a subtyping relation
     46,475 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
          .           
          .               /// When casting `&'a T` to an `&'b Trait` object,
          .               /// relating `'a` to `'b`
          .               RelateObjectBound(Span),
          .           
          .               /// Some type parameter was instantiated with the given type,
          .               /// and that type must outlive some region.
     11,995 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
          .           
          .               /// The given region parameter was instantiated with a region
          .               /// that must outlive some other region.
          .               RelateRegionParamBound(Span),
          .           
          .               /// Creating a pointer `b` to contents of another reference
          .               Reborrow(Span),
          .           
          .               /// Creating a pointer `b` to contents of an upvar
          .               ReborrowUpvar(Span, ty::UpvarId),
          .           
          .               /// Data with type `Ty<'tcx>` was borrowed
     11,866 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
          .           
          .               /// (&'a &'b T) where a >= b
      9,086 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
          .           
          .               /// Comparing the signature and requirements of an impl method against
          .               /// the containing trait.
          .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
          .           
          .               /// Comparing the signature and requirements of an impl associated type
          .               /// against the containing trait
          .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
          .               defining_use_anchor: Option<LocalDefId>,
          .           }
          .           
          .           pub trait TyCtxtInferExt<'tcx> {
          .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
          .           }
          .           
          .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
     70,714 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
    212,142 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
     70,714 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> InferCtxtBuilder<'tcx> {
          .               /// Used only by `rustc_typeck` during body type-checking/inference,
          .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
          .               /// Will also change the scope for opaque type defining use checks to the given owner.
     54,270 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
     66,330 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
     30,150 ( 0.00%)          self.with_opaque_type_inference(table_owner)
     42,210 ( 0.00%)      }
          .           
          .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
          .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
          .               ///
          .               /// It is only meant to be called in two places, for typeck
          .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
          .               /// in mir borrowck.
      5,218 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      2,609 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
     17,278 ( 0.00%)          self
      7,827 ( 0.00%)      }
          .           
          .               /// Given a canonical value `C` as a starting point, create an
          .               /// inference context that contains each of the bound values
          .               /// within instantiated as a fresh variable. The `f` closure is
          .               /// invoked with the new infcx, along with the instantiated value
          .               /// `V` and a substitution `S`. This substitution `S` maps from
          .               /// the bound values in `C` to their instantiated values in `V`
          .               /// (in other words, `S(C) = V`).
    109,039 ( 0.00%)      pub fn enter_with_canonical<T, R>(
          .                   &mut self,
          .                   span: Span,
          .                   canonical: &Canonical<'tcx, T>,
          .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
          .               ) -> R
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   self.enter(|infcx| {
    132,830 ( 0.00%)              let (value, subst) =
      7,078 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
    199,808 ( 0.00%)              f(infcx, value, subst)
          .                   })
    118,730 ( 0.00%)      }
          .           
    420,197 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
    199,283 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
          .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  3,026,871 ( 0.01%)          f(InferCtxt {
          .                       tcx,
          .                       defining_use_anchor,
          .                       in_progress_typeck_results,
     70,714 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
          .                       lexical_region_resolutions: RefCell::new(None),
          .                       selection_cache: Default::default(),
          .                       evaluation_cache: Default::default(),
          .                       reported_trait_errors: Default::default(),
          .                       reported_closure_mismatch: Default::default(),
          .                       tainted_by_errors_flag: Cell::new(false),
     70,714 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
          .                       in_snapshot: Cell::new(false),
          .                       skip_leak_check: Cell::new(false),
          .                       universe: Cell::new(ty::UniverseIndex::ROOT),
          .                   })
    452,858 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx, T> InferOk<'tcx, T> {
          .               pub fn unit(self) -> InferOk<'tcx, ()> {
          .                   InferOk { value: (), obligations: self.obligations }
          .               }
          .           
          .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
          .               pub fn into_value_registering_obligations(
          .                   self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
          .               ) -> T {
      2,572 ( 0.00%)          let InferOk { value, obligations } = self;
      9,264 ( 0.00%)          for obligation in obligations {
        273 ( 0.00%)              fulfill_cx.register_predicate_obligation(infcx, obligation);
          .                   }
          .                   value
          .               }
          .           }
          .           
          .           impl<'tcx> InferOk<'tcx, ()> {
     88,802 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
    355,208 ( 0.00%)          self.obligations
     88,802 ( 0.00%)      }
          .           }
          .           
          .           #[must_use = "once you start a snapshot, you should always consume it"]
          .           pub struct CombinedSnapshot<'a, 'tcx> {
          .               undo_snapshot: Snapshot<'tcx>,
          .               region_constraints_snapshot: RegionSnapshot,
          .               universe: ty::UniverseIndex,
          .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
          .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
          .                   debug!("canonical consts: {:?}", &canonical.value);
          .           
          .                   self.tcx.try_unify_abstract_consts(canonical.value)
          .               }
          .           
          .               pub fn is_in_snapshot(&self) -> bool {
          .                   self.in_snapshot.get()
    135,965 ( 0.00%)      }
          .           
  1,023,352 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  1,151,271 ( 0.00%)          t.fold_with(&mut self.freshener())
  1,151,271 ( 0.00%)      }
          .           
          .               /// Returns the origin of the type variable identified by `vid`, or `None`
          .               /// if this is not a type variable.
          .               ///
          .               /// No attempt is made to resolve `ty`.
        884 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      1,768 ( 0.00%)          match *ty.kind() {
        417 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      1,668 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
          .                       }
         25 ( 0.00%)              _ => None,
          .                   }
      1,768 ( 0.00%)      }
          .           
    127,919 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
          .                   freshen::TypeFreshener::new(self, false)
    127,919 ( 0.00%)      }
          .           
          .               /// Like `freshener`, but does not replace `'static` regions.
    429,650 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
          .                   freshen::TypeFreshener::new(self, true)
    429,650 ( 0.00%)      }
          .           
     10,328 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      5,164 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      5,164 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
          .                       .type_variables()
          .                       .unsolved_variables()
          .                       .into_iter()
        833 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
          .                       .collect();
          .                   vars.extend(
          .                       (0..inner.int_unification_table().len())
          .                           .map(|i| ty::IntVid { index: i as u32 })
      1,228 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
         25 ( 0.00%)                  .map(|v| self.tcx.mk_int_var(v)),
          .                   );
          .                   vars.extend(
          .                       (0..inner.float_unification_table().len())
          .                           .map(|i| ty::FloatVid { index: i as u32 })
          .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
          .                           .map(|v| self.tcx.mk_float_var(v)),
          .                   );
          .                   vars
     18,074 ( 0.00%)      }
          .           
    221,281 ( 0.00%)      fn combine_fields(
          .                   &'a self,
          .                   trace: TypeTrace<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .               ) -> CombineFields<'a, 'tcx> {
    900,324 ( 0.00%)          CombineFields {
          .                       infcx: self,
  2,250,810 ( 0.01%)              trace,
          .                       cause: None,
          .                       param_env,
          .                       obligations: PredicateObligations::new(),
          .                   }
    221,281 ( 0.00%)      }
          .           
          .               /// Clear the "currently in a snapshot" flag, invoke the closure,
          .               /// then restore the flag to its original value. This flag is a
          .               /// debugging measure designed to detect cases where we start a
          .               /// snapshot, create type variables, and register obligations
          .               /// which may involve those type variables in the fulfillment cx,
          .               /// potentially leaving "dangling type variables" behind.
          .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
          .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
          .               ///
          .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
          .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
          .               /// obligations. As long as this fulfillment cx is fully drained
          .               /// before we return, this is not a problem, as there won't be any
          .               /// escaping obligations in the main cx. In those cases, you can
          .               /// use this function.
        128 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
          .               where
          .                   F: FnOnce(&Self) -> R,
          .               {
          .                   let flag = self.in_snapshot.replace(false);
     59,202 ( 0.00%)          let result = func(self);
          .                   self.in_snapshot.set(flag);
          .                   result
        144 ( 0.00%)      }
          .           
  1,111,678 ( 0.00%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
          .                   debug!("start_snapshot()");
          .           
          .                   let in_snapshot = self.in_snapshot.replace(true);
          .           
          .                   let mut inner = self.inner.borrow_mut();
          .           
  3,335,034 ( 0.01%)          CombinedSnapshot {
          .                       undo_snapshot: inner.undo_log.start_snapshot(),
          .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
          .                       universe: self.universe(),
          .                       was_in_snapshot: in_snapshot,
          .                       // Borrow typeck results "in progress" (i.e., during typeck)
          .                       // to ban writes from within a snapshot to them.
    555,839 ( 0.00%)              _in_progress_typeck_results: self
          .                           .in_progress_typeck_results
          .                           .map(|typeck_results| typeck_results.borrow()),
          .                   }
  2,223,356 ( 0.01%)      }
          .           
  1,458,281 ( 0.00%)      #[instrument(skip(self, snapshot), level = "debug")]
          .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
          .                   let CombinedSnapshot {
    132,571 ( 0.00%)              undo_snapshot,
    132,571 ( 0.00%)              region_constraints_snapshot,
    132,571 ( 0.00%)              universe,
    132,571 ( 0.00%)              was_in_snapshot,
    265,142 ( 0.00%)              _in_progress_typeck_results,
          .                   } = snapshot;
          .           
          .                   self.in_snapshot.set(was_in_snapshot);
          .                   self.universe.set(universe);
          .           
          .                   let mut inner = self.inner.borrow_mut();
    132,571 ( 0.00%)          inner.rollback_to(undo_snapshot);
          .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
          .               }
          .           
  6,349,020 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
          .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
          .                   let CombinedSnapshot {
    423,268 ( 0.00%)              undo_snapshot,
          .                       region_constraints_snapshot: _,
          .                       universe: _,
    423,268 ( 0.00%)              was_in_snapshot,
    846,536 ( 0.00%)              _in_progress_typeck_results,
          .                   } = snapshot;
          .           
          .                   self.in_snapshot.set(was_in_snapshot);
          .           
          .                   self.inner.borrow_mut().commit(undo_snapshot);
          .               }
          .           
          .               /// Executes `f` and commit the bindings.
    319,249 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    396,803 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
          .               {
     36,073 ( 0.00%)          let snapshot = self.start_snapshot();
    135,238 ( 0.00%)          let r = f(&snapshot);
    252,511 ( 0.00%)          self.commit_from(snapshot);
    211,126 ( 0.00%)          r
          .               }
          .           
          .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  2,456,486 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  3,035,243 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
          .               {
    474,725 ( 0.00%)          let snapshot = self.start_snapshot();
  1,409,829 ( 0.00%)          let r = f(&snapshot);
          .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
    474,129 ( 0.00%)          match r {
          .                       Ok(_) => {
  2,763,288 ( 0.01%)                  self.commit_from(snapshot);
          .                       }
          .                       Err(_) => {
    457,157 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
          .                       }
          .                   }
  2,633,264 ( 0.01%)          r
          .               }
          .           
          .               /// Execute `f` then unroll any bindings it creates.
    593,618 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
    695,007 ( 0.00%)      pub fn probe<R, F>(&self, f: F) -> R
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
          .               {
    162,408 ( 0.00%)          let snapshot = self.start_snapshot();
    264,674 ( 0.00%)          let r = f(&snapshot);
    782,244 ( 0.00%)          self.rollback_to("probe", snapshot);
    201,186 ( 0.00%)          r
          .               }
          .           
          .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
        396 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
        528 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
          .               where
          .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
          .               {
         88 ( 0.00%)          let snapshot = self.start_snapshot();
         44 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
         88 ( 0.00%)          if should_skip {
          .                       self.skip_leak_check.set(true);
          .                   }
        176 ( 0.00%)          let r = f(&snapshot);
        396 ( 0.00%)          self.rollback_to("probe", snapshot);
          .                   self.skip_leak_check.set(was_skip_leak_check);
        528 ( 0.00%)          r
          .               }
          .           
          .               /// Scan the constraints produced since `snapshot` began and returns:
          .               ///
          .               /// - `None` -- if none of them involve "region outlives" constraints
          .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
          .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
     45,422 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
          .                   &self,
          .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
          .               ) -> Option<bool> {
     90,844 ( 0.00%)          self.inner
          .                       .borrow_mut()
          .                       .unwrap_region_constraints()
          .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
     68,133 ( 0.00%)      }
          .           
          6 ( 0.00%)      pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
         12 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
          9 ( 0.00%)      }
          .           
      3,336 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
          .               where
          .                   T: at::ToTrace<'tcx>,
          .               {
          .                   let origin = &ObligationCause::dummy();
          .                   self.probe(|_| {
          .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
          .                           // Ignore obligations, since we are unrolling
          .                           // everything anyway.
          .                       })
          .                   })
      2,502 ( 0.00%)      }
          .           
     15,792 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
          .               where
          .                   T: at::ToTrace<'tcx>,
          .               {
          .                   let origin = &ObligationCause::dummy();
          .                   self.probe(|_| {
          .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
          .                           // Ignore obligations, since we are unrolling
          .                           // everything anyway.
          .                       })
          .                   })
     11,844 ( 0.00%)      }
          .           
    470,840 ( 0.00%)      #[instrument(skip(self), level = "debug")]
          .               pub fn sub_regions(
          .                   &self,
          .                   origin: SubregionOrigin<'tcx>,
          .                   a: ty::Region<'tcx>,
          .                   b: ty::Region<'tcx>,
          .               ) {
    423,756 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
          .               }
          .           
          .               /// Require that the region `r` be equal to one of the regions in
          .               /// the set `regions`.
          5 ( 0.00%)      #[instrument(skip(self), level = "debug")]
          .               pub fn member_constraint(
          .                   &self,
          .                   opaque_type_def_id: DefId,
          .                   definition_span: Span,
          .                   hidden_ty: Ty<'tcx>,
          .                   region: ty::Region<'tcx>,
          .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
          .               ) {
          5 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
          .                       opaque_type_def_id,
          .                       definition_span,
          .                       hidden_ty,
          .                       region,
          .                       in_regions,
          .                   );
          .               }
          .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
          .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
          .               /// actually requiring `a <: b`. This is of course a valid coercion,
          .               /// but it's not as flexible as `FnCtxt::coerce` would be.
          .               ///
          .               /// (We may refactor this in the future, but there are a number of
          .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
          .               /// records adjustments that are required on the HIR in order to perform
          .               /// the coercion, and we don't currently have a way to manage that.)
      1,950 ( 0.00%)      pub fn coerce_predicate(
          .                   &self,
          .                   cause: &ObligationCause<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   predicate: ty::PolyCoercePredicate<'tcx>,
          .               ) -> Option<InferResult<'tcx, ()>> {
      1,300 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
          .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
          .                       a: p.a,
          .                       b: p.b,
          .                   });
      3,250 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
      2,600 ( 0.00%)      }
          .           
    136,716 ( 0.00%)      pub fn subtype_predicate(
          .                   &self,
          .                   cause: &ObligationCause<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   predicate: ty::PolySubtypePredicate<'tcx>,
          .               ) -> Option<InferResult<'tcx, ()>> {
          .                   // Check for two unresolved inference variables, in which case we can
          .                   // make no progress. This is partly a micro-optimization, but it's
          .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
          .                   // earlier that they are sub-unified).
          .                   //
          .                   // Note that we can just skip the binders here because
          .                   // type variables can't (at present, at
          .                   // least) capture any of the things bound by this binder.
          .                   //
          .                   // Note that this sub here is not just for diagnostics - it has semantic
          .                   // effects as well.
     11,393 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
     11,393 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
     73,684 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
     15,274 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
          .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
     15,274 ( 0.00%)                  return None;
          .                       }
          .                       _ => {}
          .                   }
          .           
          .                   Some(self.commit_if_ok(|_snapshot| {
      3,756 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
          .                           self.replace_bound_vars_with_placeholders(predicate);
          .           
      7,512 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
          .           
          .                       Ok(ok.unit())
          .                   }))
    102,537 ( 0.00%)      }
          .           
    157,272 ( 0.00%)      pub fn region_outlives_predicate(
          .                   &self,
          .                   cause: &traits::ObligationCause<'tcx>,
          .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
          .               ) -> UnitResult<'tcx> {
          .                   self.commit_if_ok(|_snapshot| {
          .                       let ty::OutlivesPredicate(r_a, r_b) =
          .                           self.replace_bound_vars_with_placeholders(predicate);
          .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
          .                           RelateRegionParamBound(cause.span)
          .                       });
    131,060 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
          .                       Ok(())
          .                   })
    104,848 ( 0.00%)      }
          .           
          .               /// Number of type variables created so far.
        221 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
          .                   self.inner.borrow_mut().type_variables().num_vars()
        442 ( 0.00%)      }
          .           
    106,518 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
    532,590 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
    159,777 ( 0.00%)      }
          .           
     90,976 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
    367,554 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
    136,464 ( 0.00%)      }
          .           
      5,486 ( 0.00%)      pub fn next_ty_var_in_universe(
          .                   &self,
          .                   origin: TypeVariableOrigin,
          .                   universe: ty::UniverseIndex,
          .               ) -> Ty<'tcx> {
     30,173 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      2,743 ( 0.00%)          self.tcx.mk_ty_var(vid)
      8,229 ( 0.00%)      }
          .           
          .               pub fn next_const_var(
          .                   &self,
          .                   ty: Ty<'tcx>,
          .                   origin: ConstVariableOrigin,
          .               ) -> &'tcx ty::Const<'tcx> {
          .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
          .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
          .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
          .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
          .                       origin,
          .                       val: ConstVariableValue::Unknown { universe: self.universe() },
          .                   })
          .               }
          .           
          .               fn next_int_var_id(&self) -> IntVid {
      1,660 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
          .               }
          .           
        996 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
          .                   self.tcx.mk_int_var(self.next_int_var_id())
      1,328 ( 0.00%)      }
          .           
          .               fn next_float_var_id(&self) -> FloatVid {
          .                   self.inner.borrow_mut().float_unification_table().new_key(None)
          .               }
          .           
          .               pub fn next_float_var(&self) -> Ty<'tcx> {
          .                   self.tcx.mk_float_var(self.next_float_var_id())
          .               }
          .           
          .               /// Creates a fresh region variable with the next available index.
          .               /// The variable will be created in the maximum universe created
          .               /// thus far, allowing it to name any region created thus far.
     57,064 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
  1,312,029 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    114,128 ( 0.00%)      }
          .           
          .               /// Creates a fresh region variable with the next available index
          .               /// in the given universe; typically, you can use
          .               /// `next_region_var` and just use the maximal universe.
    560,192 ( 0.00%)      pub fn next_region_var_in_universe(
          .                   &self,
          .                   origin: RegionVariableOrigin,
          .                   universe: ty::UniverseIndex,
          .               ) -> ty::Region<'tcx> {
          .                   let region_var =
  3,641,248 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
  1,400,480 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
    840,288 ( 0.00%)      }
          .           
          .               /// Return the universe that the region `r` was created in.  For
          .               /// most regions (e.g., `'static`, named regions from the user,
          .               /// etc) this is the root universe U0. For inference variables or
          .               /// placeholders, however, it will return the universe which which
          .               /// they are associated.
     93,744 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
          .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
    140,616 ( 0.00%)      }
          .           
          .               /// Number of region variables created so far.
     21,358 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
          .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
     32,037 ( 0.00%)      }
          .           
          .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    120,753 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
          .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
    241,506 ( 0.00%)      }
          .           
          .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      1,973 ( 0.00%)      pub fn next_nll_region_var_in_universe(
          .                   &self,
          .                   origin: NllRegionVariableOrigin,
          .                   universe: ty::UniverseIndex,
          .               ) -> ty::Region<'tcx> {
     14,951 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      3,946 ( 0.00%)      }
          .           
    878,720 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    483,462 ( 0.00%)          match param.kind {
          .                       GenericParamDefKind::Lifetime => {
          .                           // Create a region inference variable for the given
          .                           // region parameter definition.
     32,869 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
          .                       }
          .                       GenericParamDefKind::Type { .. } => {
          .                           // Create a type inference variable for the given
          .                           // type parameter definition. The substitutions are
          .                           // for actual parameters that may be referred to by
          .                           // the default of this type parameter, if it exists.
          .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
          .                           // used in a path such as `Foo::<T, U>::new()` will
          .                           // use an inference variable for `C` with `[T, U]`
          .                           // as the substitutions for the default, `(T, U)`.
    305,468 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
          .                               self.universe(),
    381,835 ( 0.00%)                      TypeVariableOrigin {
          .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
     76,367 ( 0.00%)                              param.name,
     76,367 ( 0.00%)                              Some(param.def_id),
          .                                   ),
          .                                   span,
          .                               },
          .                           );
          .           
     76,367 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
          .                       }
          .                       GenericParamDefKind::Const { .. } => {
          .                           let origin = ConstVariableOrigin {
          .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
          .                                   param.name,
          .                                   param.def_id,
          .                               ),
          .                               span,
          .                           };
          .                           let const_var_id =
      6,644 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
          .                                   origin,
          .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
          .                               });
        604 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
          .                       }
          .                   }
      4,832 ( 0.00%)      }
          .           
          .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
          .               /// type/region parameter to a fresh inference variable.
    167,535 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
    835,990 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
    111,690 ( 0.00%)      }
          .           
          .               /// Returns `true` if errors have been reported since this infcx was
          .               /// created. This is sometimes used as a heuristic to skip
          .               /// reporting errors that often occur as a result of earlier
          .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
          .               /// inference variables, regionck errors).
      5,610 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
          .                   debug!(
          .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
          .                        tainted_by_errors_flag={})",
          .                       self.tcx.sess.err_count(),
          .                       self.err_count_on_creation,
          .                       self.tainted_by_errors_flag.get()
          .                   );
          .           
    153,387 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
          .                       return true; // errors reported since this infcx was made
          .                   }
          .                   self.tainted_by_errors_flag.get()
      8,415 ( 0.00%)      }
          .           
          .               /// Set the "tainted by errors" flag to true. We call this when we
          .               /// observe an error from a prior pass.
          .               pub fn set_tainted_by_errors(&self) {
          .                   debug!("set_tainted_by_errors()");
          .                   self.tainted_by_errors_flag.set(true)
          .               }
          .           
          .               /// Process the region constraints and return any any errors that
          .               /// result. After this, no more unification operations should be
          .               /// done -- or the compiler will panic -- but it is legal to use
          .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
    156,044 ( 0.00%)      pub fn resolve_regions(
          .                   &self,
          .                   region_context: DefId,
          .                   outlives_env: &OutlivesEnvironment<'tcx>,
          .                   mode: RegionckMode,
          .               ) -> Vec<RegionResolutionError<'tcx>> {
    423,548 ( 0.00%)          let (var_infos, data) = {
          .                       let mut inner = self.inner.borrow_mut();
          .                       let inner = &mut *inner;
     22,292 ( 0.00%)              assert!(
     66,876 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
          .                           "region_obligations not empty: {:#?}",
          .                           inner.region_obligations
          .                       );
          .                       inner
          .                           .region_constraint_storage
          .                           .take()
          .                           .expect("regions already resolved")
          .                           .with_log(&mut inner.undo_log)
          .                           .into_infos_and_data()
     22,292 ( 0.00%)          };
          .           
          .                   let region_rels =
     22,292 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
          .           
    200,628 ( 0.00%)          let (lexical_region_resolutions, errors) =
    535,008 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
          .           
     89,168 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
     22,292 ( 0.00%)          assert!(old_value.is_none());
          .           
          .                   errors
    200,628 ( 0.00%)      }
          .           
          .               /// Process the region constraints and report any errors that
          .               /// result. After this, no more unification operations should be
          .               /// done -- or the compiler will panic -- but it is legal to use
          .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
    222,920 ( 0.00%)      pub fn resolve_regions_and_report_errors(
          .                   &self,
          .                   region_context: DefId,
          .                   outlives_env: &OutlivesEnvironment<'tcx>,
          .                   mode: RegionckMode,
          .               ) {
     44,584 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
          .           
     66,876 ( 0.00%)          if !self.is_tainted_by_errors() {
          .                       // As a heuristic, just skip reporting region errors
          .                       // altogether if other errors have been reported while
          .                       // this infcx was in use.  This is totally hokey but
          .                       // otherwise we have a hard time separating legit region
          .                       // errors from silly ones.
     44,584 ( 0.00%)              self.report_region_errors(&errors);
          .                   }
    111,460 ( 0.00%)      }
          .           
          .               /// Obtains (and clears) the current set of region
          .               /// constraints. The inference context is still usable: further
          .               /// unifications will simply add new constraints.
          .               ///
          .               /// This method is not meant to be used with normal lexical region
          .               /// resolution. Rather, it is used in the NLL mode as a kind of
          .               /// interim hack: basically we run normal type-check and generate
          .               /// region constraints as normal, but then we take them and
          .               /// translate them into the form that the NLL solver
          .               /// understands. See the NLL module for mode details.
          6 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
          2 ( 0.00%)          assert!(
          .                       self.inner.borrow().region_obligations.is_empty(),
          .                       "region_obligations not empty: {:#?}",
          .                       self.inner.borrow().region_obligations
          .                   );
          .           
          8 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
         10 ( 0.00%)      }
          .           
          .               /// Gives temporary access to the region constraint data.
          .               pub fn with_region_constraints<R>(
          .                   &self,
          .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
          .               ) -> R {
          .                   let mut inner = self.inner.borrow_mut();
     37,820 ( 0.00%)          op(inner.unwrap_region_constraints().data())
          .               }
          .           
          .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
          .                   let mut inner = self.inner.borrow_mut();
          .                   let inner = &mut *inner;
          .                   inner
          .                       .region_constraint_storage
          .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
          .                       .var_origin(vid)
          .               }
          .           
          .               /// Takes ownership of the list of variable regions. This implies
          .               /// that all the region constraints have already been taken, and
          .               /// hence that `resolve_regions_and_report_errors` can never be
          .               /// called. This is used only during NLL processing to "hand off" ownership
          .               /// of the set of region variables into the NLL region context.
     13,040 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
          .                   let mut inner = self.inner.borrow_mut();
     49,552 ( 0.00%)          let (var_infos, data) = inner
          .                       .region_constraint_storage
          .                       .take()
          .                       .expect("regions already resolved")
          .                       .with_log(&mut inner.undo_log)
      2,608 ( 0.00%)              .into_infos_and_data();
      2,608 ( 0.00%)          assert!(data.is_empty());
          .                   var_infos
     20,864 ( 0.00%)      }
          .           
          .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
          .                   self.resolve_vars_if_possible(t).to_string()
          .               }
          .           
          .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
          .               /// universe index of `TyVar(vid)`.
     39,186 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
          .                   use self::type_variable::TypeVariableValue;
          .           
    117,558 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
          .                       TypeVariableValue::Known { value } => Ok(value),
          .                       TypeVariableValue::Unknown { universe } => Err(universe),
          .                   }
    137,151 ( 0.00%)      }
          .           
          .               /// Resolve any type variables found in `value` -- but only one
          .               /// level.  So, if the variable `?X` is bound to some type
          .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
          .               /// itself be bound to a type).
          .               ///
          .               /// Useful when you only need to inspect the outermost level of
          .               /// the type and don't care about nested types (or perhaps you
          .               /// will be resolving them as well, e.g. in a loop).
          .               pub fn shallow_resolve<T>(&self, value: T) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,020,387 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
          .               }
          .           
     72,884 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
          .                   self.inner.borrow_mut().type_variables().root_var(var)
    109,326 ( 0.00%)      }
          .           
          .               /// Where possible, replaces type/const variables in
          .               /// `value` with their final value. Note that region variables
          .               /// are unaffected. If a type/const variable has not been unified, it
          .               /// is left as is. This is an idempotent operation that does
          .               /// not affect inference state in any way and so you can do it
          .               /// at will.
      8,644 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
  1,019,963 ( 0.00%)          if !value.needs_infer() {
    617,268 ( 0.00%)              return value; // Avoid duplicated subst-folding.
          .                   }
  1,140,623 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  1,410,555 ( 0.00%)          value.fold_with(&mut r)
     10,497 ( 0.00%)      }
          .           
          .               /// Returns the first unresolved variable contained in `T`. In the
          .               /// process of visiting `T`, this will resolve (where possible)
          .               /// type variables in `T`, but it never constructs the final,
          .               /// resolved type, so it's more efficient than
          .               /// `resolve_vars_if_possible()`.
          .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
          .               where
-- line 1415 ----------------------------------------
-- line 1490 ----------------------------------------
          .                   expected: &'tcx ty::Const<'tcx>,
          .                   actual: &'tcx ty::Const<'tcx>,
          .                   err: TypeError<'tcx>,
          .               ) -> DiagnosticBuilder<'tcx> {
          .                   let trace = TypeTrace::consts(cause, true, expected, actual);
          .                   self.report_and_explain_type_error(trace, &err)
          .               }
          .           
     85,212 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
          .                   &self,
          .                   span: Span,
          .                   lbrct: LateBoundRegionConversionTime,
          .                   value: ty::Binder<'tcx, T>,
          .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
          .               where
          .                   T: TypeFoldable<'tcx>,
          .               {
          .                   let fld_r =
    547,282 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
          .                   let fld_t = |_| {
          .                       self.next_ty_var(TypeVariableOrigin {
          .                           kind: TypeVariableOriginKind::MiscVariable,
          .                           span,
          .                       })
          .                   };
          .                   let fld_c = |_, ty| {
          .                       self.next_const_var(
          .                           ty,
          .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
          .                       )
          .                   };
    552,550 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
     56,808 ( 0.00%)      }
          .           
          .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
      2,368 ( 0.00%)      pub fn verify_generic_bound(
          .                   &self,
          .                   origin: SubregionOrigin<'tcx>,
          .                   kind: GenericKind<'tcx>,
          .                   a: ty::Region<'tcx>,
          .                   bound: VerifyBound<'tcx>,
          .               ) {
          .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
          .           
        888 ( 0.00%)          self.inner
          .                       .borrow_mut()
          .                       .unwrap_region_constraints()
      5,032 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
      2,072 ( 0.00%)      }
          .           
          .               /// Obtains the latest type of the given closure; this may be a
          .               /// closure in the current function, in which case its
          .               /// `ClosureKind` may not yet be known.
      6,710 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
     13,420 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
          .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
     10,065 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
          .               }
          .           
          .               /// Clears the selection, evaluation, and projection caches. This is useful when
          .               /// repeatedly attempting to select an `Obligation` while changing only
          .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
          .               pub fn clear_caches(&self) {
          .                   self.selection_cache.clear();
          .                   self.evaluation_cache.clear();
          .                   self.inner.borrow_mut().projection_cache().clear();
          .               }
          .           
          .               pub fn universe(&self) -> ty::UniverseIndex {
  1,749,358 ( 0.00%)          self.universe.get()
    590,875 ( 0.00%)      }
          .           
          .               /// Creates and return a fresh universe that extends all previous
          .               /// universes. Updates `self.universe` to that new universe.
        778 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
        936 ( 0.00%)          let u = self.universe.get().next_universe();
          .                   self.universe.set(u);
          .                   u
        778 ( 0.00%)      }
          .           
          .               /// Resolves and evaluates a constant.
          .               ///
          .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
          .               /// substitutions and environment are used to resolve the constant. Alternatively if the
          .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
          .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
          .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
          .                   // variables, thus we don't need to substitute back the original values.
          .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
          .               }
          .           
          .               /// If `typ` is a type variable of some kind, resolve it one level
          .               /// (but do not resolve types found in the result). If `typ` is
          .               /// not a type variable, just return it unmodified.
          .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
 12,493,984 ( 0.03%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  6,653,449 ( 0.02%)          match *typ.kind() {
          .                       ty::Infer(ty::TyVar(v)) => {
          .                           // Not entirely obvious: if `typ` is a type variable,
          .                           // it can be resolved to an int/float variable, which
          .                           // can then be recursively resolved, hence the
          .                           // recursion. Note though that we prevent type
          .                           // variables from unifying to other type variables
          .                           // directly (though they may be embedded
          .                           // structurally), and we prevent cycles in any case,
          .                           // so this recursion should always be of very limited
          .                           // depth.
          .                           //
          .                           // Note: if these two lines are combined into one we get
          .                           // dynamic borrow errors on `self.inner`.
  3,480,820 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
          .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
          .                       }
          .           
     30,048 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
          .                           .inner
          .                           .borrow_mut()
          .                           .int_unification_table()
          .                           .probe_value(v)
      8,994 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
          .                           .unwrap_or(typ),
          .           
          .                       ty::Infer(ty::FloatVar(v)) => self
          .                           .inner
          .                           .borrow_mut()
          .                           .float_unification_table()
          .                           .probe_value(v)
          .                           .map(|v| v.to_type(self.tcx))
          .                           .unwrap_or(typ),
          .           
          .                       _ => typ,
          .                   }
 14,055,732 ( 0.04%)      }
          .           
          .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
          .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
          .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
          .               ///
          .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
          .               /// inlined, despite being large, because it has only two call sites that
          .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
          .               #[inline(always)]
          .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
          .                   match infer_var {
          .                       TyOrConstInferVar::Ty(v) => {
          .                           use self::type_variable::TypeVariableValue;
          .           
          .                           // If `inlined_probe` returns a `Known` value, it never equals
          .                           // `ty::Infer(ty::TyVar(v))`.
175,381,690 ( 0.45%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
          .                               TypeVariableValue::Unknown { .. } => false,
          .                               TypeVariableValue::Known { .. } => true,
          .                           }
          .                       }
          .           
          .                       TyOrConstInferVar::TyInt(v) => {
          .                           // If `inlined_probe_value` returns a value it's always a
          .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
          .                           // `ty::Infer(_)`.
     62,166 ( 0.00%)                  self.inner.borrow_mut().int_unification_table().inlined_probe_value(v).is_some()
          .                       }
          .           
          .                       TyOrConstInferVar::TyFloat(v) => {
          .                           // If `probe_value` returns a value it's always a
          .                           // `ty::Float(_)`, which never matches a `ty::Infer(_)`.
          .                           //
          .                           // Not `inlined_probe_value(v)` because this call site is colder.
          .                           self.inner.borrow_mut().float_unification_table().probe_value(v).is_some()
-- line 1688 ----------------------------------------
-- line 1716 ----------------------------------------
          .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
          .               Const(ConstVid<'tcx>),
          .           }
          .           
          .           impl<'tcx> TyOrConstInferVar<'tcx> {
          .               /// Tries to extract an inference variable from a type or a constant, returns `None`
          .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
          .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
     40,050 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
          .                   match arg.unpack() {
          .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
          .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
          .                       GenericArgKind::Lifetime(_) => None,
          .                   }
     40,050 ( 0.00%)      }
          .           
          .               /// Tries to extract an inference variable from a type, returns `None`
          .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
     15,258 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
    497,003 ( 0.00%)          match *ty.kind() {
    109,972 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        594 ( 0.00%)              ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
          .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
          .                       _ => None,
          .                   }
     15,258 ( 0.00%)      }
          .           
          .               /// Tries to extract an inference variable from a constant, returns `None`
          .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
          .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
          .                   match ct.val {
          .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
          .                       _ => None,
          .                   }
-- line 1749 ----------------------------------------
-- line 1755 ----------------------------------------
          .           }
          .           
          .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
          .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
          .                   self.infcx.tcx
          .               }
          .           
          .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  2,389,227 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
          .               }
          .           
      4,200 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      3,556 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
      3,640 ( 0.00%)              self.infcx
          .                           .inner
          .                           .borrow_mut()
          .                           .const_unification_table()
      2,184 ( 0.00%)                  .probe_value(*vid)
          .                           .val
          .                           .known()
          .                           .unwrap_or(ct)
          .                   } else {
          .                       ct
          .                   }
      5,250 ( 0.00%)      }
          .           }
          .           
          .           impl<'tcx> TypeTrace<'tcx> {
          .               pub fn span(&self) -> Span {
      2,048 ( 0.00%)          self.cause.span
          .               }
          .           
          .               pub fn types(
          .                   cause: &ObligationCause<'tcx>,
          .                   a_is_expected: bool,
          .                   a: Ty<'tcx>,
          .                   b: Ty<'tcx>,
          .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
          .                   b: &'tcx ty::Const<'tcx>,
          .               ) -> TypeTrace<'tcx> {
          .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
          .               }
          .           }
          .           
          .           impl<'tcx> SubregionOrigin<'tcx> {
          .               pub fn span(&self) -> Span {
      5,120 ( 0.00%)          match *self {
      1,024 ( 0.00%)              Subtype(ref a) => a.span(),
          .                       RelateObjectBound(a) => a,
          .                       RelateParamBound(a, ..) => a,
          .                       RelateRegionParamBound(a) => a,
          .                       Reborrow(a) => a,
          .                       ReborrowUpvar(a, _) => a,
          .                       DataBorrowed(_, a) => a,
          .                       ReferenceOutlivesReferent(_, a) => a,
          .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
          .                       CompareImplTypeObligation { span, .. } => span,
          .                   }
          .               }
          .           
          .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
          .               where
          .                   F: FnOnce() -> Self,
          .               {
    149,758 ( 0.00%)          match *cause.code() {
     15,890 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
     79,450 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
          .                       }
          .           
          .                       traits::ObligationCauseCode::CompareImplMethodObligation {
          .                           impl_item_def_id,
          .                           trait_item_def_id,
          .                       } => SubregionOrigin::CompareImplMethodObligation {
          .                           span: cause.span,
          .                           impl_item_def_id,
-- line 1836 ----------------------------------------

114,347,180 ( 0.29%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 208 ----------------------------------------
          .               /// There is no built-in impl. There may be some other
          .               /// candidate (a where-clause or user-defined impl).
          .               None,
          .               /// It is unknown whether there is an impl.
          .               Ambiguous,
          .           }
          .           
          .           impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {
    935,940 ( 0.00%)      pub fn new(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
  5,308,039 ( 0.01%)          SelectionContext {
          .                       infcx,
    756,851 ( 0.00%)              freshener: infcx.freshener_keep_static(),
          .                       intercrate: false,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls: false,
          .                       query_mode: TraitQueryMode::Standard,
          .                   }
    779,950 ( 0.00%)      }
          .           
          .               pub fn intercrate(infcx: &'cx InferCtxt<'cx, 'tcx>) -> SelectionContext<'cx, 'tcx> {
        704 ( 0.00%)          SelectionContext {
          .                       infcx,
         88 ( 0.00%)              freshener: infcx.freshener_keep_static(),
          .                       intercrate: true,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls: false,
          .                       query_mode: TraitQueryMode::Standard,
          .                   }
          .               }
          .           
          .               pub fn with_negative(
-- line 238 ----------------------------------------
-- line 245 ----------------------------------------
          .                       freshener: infcx.freshener_keep_static(),
          .                       intercrate: false,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls,
          .                       query_mode: TraitQueryMode::Standard,
          .                   }
          .               }
          .           
     80,800 ( 0.00%)      pub fn with_query_mode(
          .                   infcx: &'cx InferCtxt<'cx, 'tcx>,
          .                   query_mode: TraitQueryMode,
          .               ) -> SelectionContext<'cx, 'tcx> {
          .                   debug!(?query_mode, "with_query_mode");
    161,600 ( 0.00%)          SelectionContext {
          .                       infcx,
     10,100 ( 0.00%)              freshener: infcx.freshener_keep_static(),
          .                       intercrate: false,
          .                       intercrate_ambiguity_causes: None,
          .                       allow_negative_impls: false,
          .                       query_mode,
          .                   }
     60,600 ( 0.00%)      }
          .           
          .               /// Enables tracking of intercrate ambiguity causes. These are
          .               /// used in coherence to give improved diagnostics. We don't do
          .               /// this until we detect a coherence error because it can lead to
          .               /// false overflow results (#47139) and because it costs
          .               /// computation time.
          .               pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {
          .                   assert!(self.intercrate);
-- line 274 ----------------------------------------
-- line 281 ----------------------------------------
          .               /// was enabled and disables tracking at the same time. If
          .               /// tracking is not enabled, just returns an empty vector.
          .               pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {
          .                   assert!(self.intercrate);
          .                   self.intercrate_ambiguity_causes.take().unwrap_or_default()
          .               }
          .           
          .               pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {
176,890,106 ( 0.45%)          self.infcx
    136,150 ( 0.00%)      }
          .           
          .               pub fn tcx(&self) -> TyCtxt<'tcx> {
  1,722,255 ( 0.00%)          self.infcx.tcx
          .               }
          .           
          .               pub fn is_intercrate(&self) -> bool {
     84,166 ( 0.00%)          self.intercrate
          .               }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // Selection
          .               //
          .               // The selection phase tries to identify *how* an obligation will
          .               // be resolved. For example, it will identify which impl or
          .               // parameter bound is to be used. The process can be inconclusive
-- line 305 ----------------------------------------
-- line 309 ----------------------------------------
          .               // 1. If no applicable impl or parameter bound can be found.
          .               // 2. If the output type parameters in the obligation do not match
          .               //    those specified by the impl/bound. For example, if the obligation
          .               //    is `Vec<Foo>: Iterable<Bar>`, but the impl specifies
          .               //    `impl<T> Iterable<T> for Vec<T>`, than an error would result.
          .           
          .               /// Attempts to satisfy the obligation. If successful, this will affect the surrounding
          .               /// type environment by performing unification.
    818,587 ( 0.00%)      #[instrument(level = "debug", skip(self))]
  1,052,469 ( 0.00%)      pub fn select(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> SelectionResult<'tcx, Selection<'tcx>> {
    855,981 ( 0.00%)          let candidate = match self.select_from_obligation(obligation) {
          .                       Err(SelectionError::Overflow) => {
          .                           // In standard mode, overflow must have been caught and reported
          .                           // earlier.
          .                           assert!(self.query_mode == TraitQueryMode::Canonical);
          .                           return Err(SelectionError::Overflow);
          .                       }
          .                       Err(SelectionError::Ambiguous(_)) => {
          .                           return Ok(None);
          .                       }
          .                       Err(e) => {
    250,236 ( 0.00%)                  return Err(e);
          .                       }
          .                       Ok(None) => {
     69,648 ( 0.00%)                  return Ok(None);
          .                       }
    450,168 ( 0.00%)              Ok(Some(candidate)) => candidate,
          .                   };
          .           
    757,884 ( 0.00%)          match self.confirm_candidate(obligation, candidate) {
          .                       Err(SelectionError::Overflow) => {
          .                           assert!(self.query_mode == TraitQueryMode::Canonical);
          .                           Err(SelectionError::Overflow)
          .                       }
     49,426 ( 0.00%)              Err(e) => Err(e),
          .                       Ok(candidate) => {
          .                           debug!(?candidate, "confirmed");
    854,712 ( 0.00%)                  Ok(Some(candidate))
          .                       }
          .                   }
          .               }
          .           
  1,169,410 ( 0.00%)      crate fn select_from_obligation(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
          .                   debug_assert!(!obligation.predicate.has_escaping_bound_vars());
          .           
          .                   let pec = &ProvisionalEvaluationCache::default();
          .                   let stack = self.push_stack(TraitObligationStackList::empty(pec), obligation);
          .           
    233,882 ( 0.00%)          self.candidate_from_obligation(&stack)
  1,052,469 ( 0.00%)      }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // EVALUATION
          .               //
          .               // Tests whether an obligation can be selected or whether an impl
          .               // can be applied to particular types. It skips the "confirmation"
          .               // step and hence completely ignores output type parameters.
          .               //
-- line 372 ----------------------------------------
-- line 374 ----------------------------------------
          .               // we can be sure it does not.
          .           
          .               /// Evaluates whether the obligation `obligation` can be satisfied (by any means).
          .               pub fn predicate_may_hold_fatal(&mut self, obligation: &PredicateObligation<'tcx>) -> bool {
          .                   debug!(?obligation, "predicate_may_hold_fatal");
          .           
          .                   // This fatal query is a stopgap that should only be used in standard mode,
          .                   // where we do not expect overflow to be propagated.
          4 ( 0.00%)          assert!(self.query_mode == TraitQueryMode::Standard);
          .           
         20 ( 0.00%)          self.evaluate_root_obligation(obligation)
          .                       .expect("Overflow should be caught earlier in standard query mode")
          .                       .may_apply()
          .               }
          .           
          .               /// Evaluates whether the obligation `obligation` can be satisfied
          .               /// and returns an `EvaluationResult`. This is meant for the
          .               /// *initial* call.
     20,200 ( 0.00%)      pub fn evaluate_root_obligation(
          .                   &mut self,
          .                   obligation: &PredicateObligation<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   self.evaluation_probe(|this| {
     30,312 ( 0.00%)              this.evaluate_predicate_recursively(
          .                           TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
          .                           obligation.clone(),
          .                       )
          .                   })
     20,200 ( 0.00%)      }
          .           
          .               fn evaluation_probe(
          .                   &mut self,
          .                   op: impl FnOnce(&mut Self) -> Result<EvaluationResult, OverflowError>,
          .               ) -> Result<EvaluationResult, OverflowError> {
    160,263 ( 0.00%)          self.infcx.probe(|snapshot| -> Result<EvaluationResult, OverflowError> {
     20,208 ( 0.00%)              let result = op(self)?;
          .           
    158,977 ( 0.00%)              match self.infcx.leak_check(true, snapshot) {
          .                           Ok(()) => {}
          .                           Err(_) => return Ok(EvaluatedToErr),
          .                       }
          .           
    113,555 ( 0.00%)              match self.infcx.region_constraints_added_in_snapshot(snapshot) {
          .                           None => Ok(result),
          .                           Some(_) => Ok(result.max(EvaluatedToOkModuloRegions)),
          .                       }
          .                   })
          .               }
          .           
          .               /// Evaluates the predicates in `predicates` recursively. Note that
          .               /// this applies projections in the predicates, and therefore
          .               /// is run within an inference probe.
    230,480 ( 0.00%)      #[instrument(skip(self, stack), level = "debug")]
          .               fn evaluate_predicates_recursively<'o, I>(
          .                   &mut self,
          .                   stack: TraitObligationStackList<'o, 'tcx>,
          .                   predicates: I,
          .               ) -> Result<EvaluationResult, OverflowError>
          .               where
          .                   I: IntoIterator<Item = PredicateObligation<'tcx>> + std::fmt::Debug,
          .               {
          .                   let mut result = EvaluatedToOk;
    140,939 ( 0.00%)          for obligation in predicates {
     37,268 ( 0.00%)              let eval = self.evaluate_predicate_recursively(stack, obligation.clone())?;
     18,634 ( 0.00%)              if let EvaluatedToErr = eval {
          .                           // fast-path - EvaluatedToErr is the top of the lattice,
          .                           // so we don't need to look on the other predicates.
          .                           return Ok(EvaluatedToErr);
          .                       } else {
          .                           result = cmp::max(result, eval);
          .                       }
          .                   }
          .                   Ok(result)
          .               }
          .           
    194,210 ( 0.00%)      #[instrument(
          .                   level = "debug",
          .                   skip(self, previous_stack),
          .                   fields(previous_stack = ?previous_stack.head())
    174,789 ( 0.00%)      )]
          .               fn evaluate_predicate_recursively<'o>(
          .                   &mut self,
          .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
          .                   obligation: PredicateObligation<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   // `previous_stack` stores a `TraitObligation`, while `obligation` is
          .                   // a `PredicateObligation`. These are distinct types, so we can't
          .                   // use any `Option` combinator method that would force them to be
          .                   // the same.
     38,842 ( 0.00%)          match previous_stack.head() {
     18,342 ( 0.00%)              Some(h) => self.check_recursion_limit(&obligation, h.obligation)?,
     10,250 ( 0.00%)              None => self.check_recursion_limit(&obligation, &obligation)?,
          .                   }
          .           
    116,526 ( 0.00%)          let result = ensure_sufficient_stack(|| {
     19,421 ( 0.00%)              let bound_predicate = obligation.predicate.kind();
    194,210 ( 0.00%)              match bound_predicate.skip_binder() {
          .                           ty::PredicateKind::Trait(t) => {
          .                               let t = bound_predicate.rebind(t);
          .                               debug_assert!(!t.has_escaping_bound_vars());
          .                               let obligation = obligation.with(t);
    283,005 ( 0.00%)                      self.evaluate_trait_predicate_recursively(previous_stack, obligation)
          .                           }
          .           
          .                           ty::PredicateKind::Subtype(p) => {
          .                               let p = bound_predicate.rebind(p);
          .                               // Does this code ever run?
        120 ( 0.00%)                      match self.infcx.subtype_predicate(&obligation.cause, obligation.param_env, p) {
          .                                   Some(Ok(InferOk { mut obligations, .. })) => {
          .                                       self.add_depth(obligations.iter_mut(), obligation.recursion_depth);
          .                                       self.evaluate_predicates_recursively(
          .                                           previous_stack,
          .                                           obligations.into_iter(),
          .                                       )
          .                                   }
          .                                   Some(Err(_)) => Ok(EvaluatedToErr),
-- line 489 ----------------------------------------
-- line 522 ----------------------------------------
          .                               None => Ok(EvaluatedToAmbig),
          .                           },
          .           
          .                           ty::PredicateKind::TypeOutlives(pred) => {
          .                               // A global type with no late-bound regions can only
          .                               // contain the "'static" lifetime (any other lifetime
          .                               // would either be late-bound or local), so it is guaranteed
          .                               // to outlive any other lifetime
         45 ( 0.00%)                      if pred.0.is_global() && !pred.0.has_late_bound_regions() {
          .                                   Ok(EvaluatedToOk)
          .                               } else {
          .                                   Ok(EvaluatedToOkModuloRegions)
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::RegionOutlives(..) => {
          .                               // We do not consider region relationships when evaluating trait matches.
-- line 538 ----------------------------------------
-- line 545 ----------------------------------------
          .                               } else {
          .                                   Ok(EvaluatedToErr)
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::Projection(data) => {
          .                               let data = bound_predicate.rebind(data);
          .                               let project_obligation = obligation.with(data);
      1,884 ( 0.00%)                      match project::poly_project_and_unify_type(self, &project_obligation) {
      1,535 ( 0.00%)                          Ok(Ok(Some(mut subobligations))) => {
          .                                       'compute_res: {
          .                                           // If we've previously marked this projection as 'complete', thne
          .                                           // use the final cached result (either `EvaluatedToOk` or
          .                                           // `EvaluatedToOkModuloRegions`), and skip re-evaluating the
          .                                           // sub-obligations.
      1,228 ( 0.00%)                                  if let Some(key) =
      2,763 ( 0.00%)                                      ProjectionCacheKey::from_poly_projection_predicate(self, data)
          .                                           {
      2,392 ( 0.00%)                                      if let Some(cached_res) = self
          .                                                   .infcx
          .                                                   .inner
          .                                                   .borrow_mut()
          .                                                   .projection_cache()
          .                                                   .is_complete(key)
          .                                               {
          .                                                   break 'compute_res Ok(cached_res);
          .                                               }
          .                                           }
          .           
        588 ( 0.00%)                                  self.add_depth(
          .                                               subobligations.iter_mut(),
        588 ( 0.00%)                                      obligation.recursion_depth,
          .                                           );
        588 ( 0.00%)                                  let res = self.evaluate_predicates_recursively(
        882 ( 0.00%)                                      previous_stack,
      1,470 ( 0.00%)                                      subobligations,
          .                                           );
      1,176 ( 0.00%)                                  if let Ok(res) = res {
        588 ( 0.00%)                                      if res == EvaluatedToOk || res == EvaluatedToOkModuloRegions {
      1,140 ( 0.00%)                                          if let Some(key) =
        285 ( 0.00%)                                              ProjectionCacheKey::from_poly_projection_predicate(
      1,995 ( 0.00%)                                                  self, data,
          .                                                       )
          .                                                   {
          .                                                       // If the result is something that we can cache, then mark this
          .                                                       // entry as 'complete'. This will allow us to skip evaluating the
          .                                                       // suboligations at all the next time we evaluate the projection
          .                                                       // predicate.
      1,939 ( 0.00%)                                              self.infcx
          .                                                           .inner
          .                                                           .borrow_mut()
          .                                                           .projection_cache()
          .                                                           .complete(key, res);
          .                                                   }
          .                                               }
          .                                           }
          .                                           res
-- line 601 ----------------------------------------
-- line 603 ----------------------------------------
          .                                   }
          .                                   Ok(Ok(None)) => Ok(EvaluatedToAmbig),
          .                                   Ok(Err(project::InProgress)) => Ok(EvaluatedToRecur),
          .                                   Err(_) => Ok(EvaluatedToErr),
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      1,015 ( 0.00%)                      match self.infcx.closure_kind(closure_substs) {
          .                                   Some(closure_kind) => {
        609 ( 0.00%)                              if closure_kind.extends(kind) {
          .                                           Ok(EvaluatedToOk)
          .                                       } else {
          .                                           Ok(EvaluatedToErr)
          .                                       }
          .                                   }
          .                                   None => Ok(EvaluatedToAmbig),
          .                               }
          .                           }
-- line 621 ----------------------------------------
-- line 693 ----------------------------------------
          .                                       }
          .                                   }
          .                               }
          .                           }
          .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
          .                               bug!("TypeWellFormedFromEnv is only used for chalk")
          .                           }
          .                       }
     19,421 ( 0.00%)          });
          .           
          .                   debug!("finished: {:?} from {:?}", result, obligation);
          .           
          .                   result
          .               }
          .           
    396,207 ( 0.00%)      #[instrument(skip(self, previous_stack), level = "debug")]
          .               fn evaluate_trait_predicate_recursively<'o>(
          .                   &mut self,
          .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
          .                   mut obligation: TraitObligation<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
     37,734 ( 0.00%)          if !self.intercrate
          .                       && obligation.is_global()
          .                       && obligation.param_env.caller_bounds().iter().all(|bound| bound.needs_subst())
          .                   {
          .                       // If a param env has no global bounds, global obligations do not
          .                       // depend on its particular value in order to work, so we can clear
          .                       // out the param env and get better caching.
          .                       debug!("in global");
     27,984 ( 0.00%)              obligation.param_env = obligation.param_env.without_caller_bounds();
          .                   }
          .           
          .                   let stack = self.push_stack(previous_stack, &obligation);
          .                   let mut fresh_trait_pred = stack.fresh_trait_pred;
     37,734 ( 0.00%)          let mut param_env = obligation.param_env;
          .           
          .                   fresh_trait_pred = fresh_trait_pred.map_bound(|mut pred| {
     18,867 ( 0.00%)              pred.remap_constness(self.tcx(), &mut param_env);
    226,404 ( 0.00%)              pred
          .                   });
          .           
          .                   debug!(?fresh_trait_pred);
          .           
     21,974 ( 0.00%)          if let Some(result) = self.check_evaluation_cache(param_env, fresh_trait_pred) {
          .                       debug!(?result, "CACHE HIT");
          .                       return Ok(result);
          .                   }
          .           
          .                   if let Some(result) = stack.cache().get_provisional(fresh_trait_pred) {
          .                       debug!(?result, "PROVISIONAL CACHE HIT");
          .                       stack.update_reached_depth(result.reached_depth);
          .                       return Ok(result.result);
-- line 744 ----------------------------------------
-- line 748 ----------------------------------------
          .                   // stack. If so, we don't want to insert the result into the
          .                   // main cache (it is cycle dependent) nor the provisional
          .                   // cache (which is meant for things that have completed but
          .                   // for a "backedge" -- this result *is* the backedge).
          .                   if let Some(cycle_result) = self.check_evaluation_cycle(&stack) {
          .                       return Ok(cycle_result);
          .                   }
          .           
     98,802 ( 0.00%)          let (result, dep_node) = self.in_task(|this| this.evaluate_stack(&stack));
     10,978 ( 0.00%)          let result = result?;
          .           
     54,890 ( 0.00%)          if !result.must_apply_modulo_regions() {
          .                       stack.cache().on_failure(stack.dfn);
          .                   }
          .           
     10,978 ( 0.00%)          let reached_depth = stack.reached_depth.get();
     21,956 ( 0.00%)          if reached_depth >= stack.depth {
          .                       debug!(?result, "CACHE MISS");
    208,582 ( 0.00%)              self.insert_evaluation_cache(param_env, fresh_trait_pred, dep_node, result);
          .           
          .                       stack.cache().on_completion(
     21,956 ( 0.00%)                  stack.dfn,
          .                           |fresh_trait_pred, provisional_result, provisional_dep_node| {
          .                               // Create a new `DepNode` that has dependencies on:
          .                               // * The `DepNode` for the original evaluation that resulted in a provisional cache
          .                               // entry being crated
          .                               // * The `DepNode` for the *current* evaluation, which resulted in us completing
          .                               // provisional caches entries and inserting them into the evaluation cache
          .                               //
          .                               // This ensures that when a query reads this entry from the evaluation cache,
-- line 777 ----------------------------------------
-- line 835 ----------------------------------------
          .               /// `self.freshener`, we can be sure that (a) this will not
          .               /// affect the inferencer state and (b) that if we see two
          .               /// fresh regions with the same index, they refer to the same
          .               /// unbound type variable.
          .               fn check_evaluation_cycle(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'_, 'tcx>,
          .               ) -> Option<EvaluationResult> {
         16 ( 0.00%)          if let Some(cycle_depth) = stack
          .                       .iter()
          .                       .skip(1) // Skip top-most frame.
          .                       .find(|prev| {
      5,254 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
          .                               && stack.fresh_trait_pred == prev.fresh_trait_pred
          .                       })
          .                       .map(|stack| stack.depth)
          .                   {
          .                       debug!("evaluate_stack --> recursive at depth {}", cycle_depth);
          .           
          .                       // If we have a stack like `A B C D E A`, where the top of
          .                       // the stack is the final `A`, then this will iterate over
          .                       // `A, E, D, C, B` -- i.e., all the participants apart
          .                       // from the cycle head. We mark them as participating in a
          .                       // cycle. This suppresses caching for those nodes. See
          .                       // `in_cycle` field for more details.
         16 ( 0.00%)              stack.update_reached_depth(cycle_depth);
          .           
          .                       // Subtle: when checking for a coinductive cycle, we do
          .                       // not compare using the "freshened trait refs" (which
          .                       // have erased regions) but rather the fully explicit
          .                       // trait refs. This is important because it's only a cycle
          .                       // if the regions match exactly.
          9 ( 0.00%)              let cycle = stack.iter().skip(1).take_while(|s| s.depth >= cycle_depth);
          8 ( 0.00%)              let tcx = self.tcx();
         56 ( 0.00%)              let cycle = cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));
         88 ( 0.00%)              if self.coinductive_match(cycle) {
          .                           debug!("evaluate_stack --> recursive, coinductive");
          .                           Some(EvaluatedToOk)
          .                       } else {
          .                           debug!("evaluate_stack --> recursive, inductive");
          .                           Some(EvaluatedToRecur)
          .                       }
          .                   } else {
          .                       None
          .                   }
          .               }
          .           
     98,802 ( 0.00%)      fn evaluate_stack<'o>(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'o, 'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   // In intercrate mode, whenever any of the generics are unbound,
          .                   // there can always be an impl. Even if there are no impls in
          .                   // this crate, perhaps the type would be unified with
          .                   // something from another crate that does provide an impl.
          .                   //
-- line 890 ----------------------------------------
-- line 903 ----------------------------------------
          .                   // imagine, this is just where we started. To avoid that, we
          .                   // check for unbound variables and return an ambiguous (hence possible)
          .                   // match if we've seen this trait before.
          .                   //
          .                   // This suffices to allow chains like `FnMut` implemented in
          .                   // terms of `Fn` etc, but we could probably make this more
          .                   // precise still.
          .                   let unbound_input_types =
     10,978 ( 0.00%)              stack.fresh_trait_pred.skip_binder().trait_ref.substs.types().any(|ty| ty.is_fresh());
          .           
     32,934 ( 0.00%)          if stack.obligation.polarity() != ty::ImplPolarity::Negative {
          .                       // This check was an imperfect workaround for a bug in the old
          .                       // intercrate mode; it should be removed when that goes away.
     54,890 ( 0.00%)              if unbound_input_types && self.intercrate {
          .                           debug!("evaluate_stack --> unbound argument, intercrate -->  ambiguous",);
          .                           // Heuristics: show the diagnostics when there are no candidates in crate.
          .                           if self.intercrate_ambiguity_causes.is_some() {
          .                               debug!("evaluate_stack: intercrate_ambiguity_causes is some");
          .                               if let Ok(candidate_set) = self.assemble_candidates(stack) {
          .                                   if !candidate_set.ambiguous && candidate_set.vec.is_empty() {
          .                                       let trait_ref = stack.obligation.predicate.skip_binder().trait_ref;
          .                                       let self_ty = trait_ref.self_ty();
-- line 924 ----------------------------------------
-- line 937 ----------------------------------------
          .                                       self.intercrate_ambiguity_causes.as_mut().unwrap().push(cause);
          .                                   }
          .                               }
          .                           }
          .                           return Ok(EvaluatedToAmbig);
          .                       }
          .                   }
          .           
     21,956 ( 0.00%)          if unbound_input_types
          .                       && stack.iter().skip(1).any(|prev| {
        213 ( 0.00%)                  stack.obligation.param_env == prev.obligation.param_env
          .                               && self.match_fresh_trait_refs(
        284 ( 0.00%)                          stack.fresh_trait_pred,
        284 ( 0.00%)                          prev.fresh_trait_pred,
          .                                   prev.obligation.param_env,
          .                               )
          .                       })
          .                   {
          .                       debug!("evaluate_stack --> unbound argument, recursive --> giving up",);
          .                       return Ok(EvaluatedToUnknown);
          .                   }
          .           
    101,880 ( 0.00%)          match self.candidate_from_obligation(stack) {
     55,002 ( 0.00%)              Ok(Some(c)) => self.evaluate_candidate(stack, &c),
          .                       Err(SelectionError::Ambiguous(_)) => Ok(EvaluatedToAmbig),
          .                       Ok(None) => Ok(EvaluatedToAmbig),
          .                       Err(Overflow) => Err(OverflowError::Canonical),
          .                       Err(ErrorReporting) => Err(OverflowError::ErrorReporting),
          .                       Err(..) => Ok(EvaluatedToErr),
          .                   }
    109,780 ( 0.00%)      }
          .           
          .               /// For defaulted traits, we use a co-inductive strategy to solve, so
          .               /// that recursion is ok. This routine returns `true` if the top of the
          .               /// stack (`cycle[0]`):
          .               ///
          .               /// - is a defaulted trait,
          .               /// - it also appears in the backtrace at some position `X`,
          .               /// - all the predicates at positions `X..` between `X` and the top are
-- line 975 ----------------------------------------
-- line 977 ----------------------------------------
          .               pub fn coinductive_match<I>(&mut self, mut cycle: I) -> bool
          .               where
          .                   I: Iterator<Item = ty::Predicate<'tcx>>,
          .               {
          .                   cycle.all(|predicate| self.coinductive_predicate(predicate))
          .               }
          .           
          .               fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {
         16 ( 0.00%)          let result = match predicate.kind().skip_binder() {
         72 ( 0.00%)              ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),
          .                       _ => false,
          .                   };
          .                   debug!(?predicate, ?result, "coinductive_predicate");
          .                   result
          .               }
          .           
          .               /// Further evaluates `candidate` to decide whether all type parameters match and whether nested
          .               /// obligations are met. Returns whether `candidate` remains viable after this further
-- line 994 ----------------------------------------
-- line 998 ----------------------------------------
          .                   skip(self, stack),
          .                   fields(depth = stack.obligation.recursion_depth)
          .               )]
          .               fn evaluate_candidate<'o>(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'o, 'tcx>,
          .                   candidate: &SelectionCandidate<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
     21,522 ( 0.00%)          let mut result = self.evaluation_probe(|this| {
          .                       let candidate = (*candidate).clone();
    172,328 ( 0.00%)              match this.confirm_candidate(stack.obligation, candidate) {
          .                           Ok(selection) => {
          .                               debug!(?selection);
     43,044 ( 0.00%)                      this.evaluate_predicates_recursively(
          .                                   stack.list(),
    139,893 ( 0.00%)                          selection.nested_obligations().into_iter(),
          .                               )
          .                           }
          .                           Err(..) => Ok(EvaluatedToErr),
          .                       }
          .                   })?;
          .           
          .                   // If we erased any lifetimes, then we want to use
          .                   // `EvaluatedToOkModuloRegions` instead of `EvaluatedToOk`
-- line 1021 ----------------------------------------
-- line 1037 ----------------------------------------
          .                   &self,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
          .               ) -> Option<EvaluationResult> {
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
     37,734 ( 0.00%)          if self.intercrate {
          .                       return None;
          .                   }
          .           
          .                   let tcx = self.tcx();
          .                   if self.can_use_global_caches(param_env) {
    125,888 ( 0.00%)              if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_pred), tcx) {
          .                           return Some(res);
          .                       }
          .                   }
     43,948 ( 0.00%)          self.infcx.evaluation_cache.get(&param_env.and(trait_pred), tcx)
          .               }
          .           
    131,736 ( 0.00%)      fn insert_evaluation_cache(
          .                   &mut self,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   trait_pred: ty::PolyTraitPredicate<'tcx>,
          .                   dep_node: DepNodeIndex,
          .                   result: EvaluationResult,
          .               ) {
          .                   // Avoid caching results that depend on more than just the trait-ref
          .                   // - the stack can create recursion.
     43,912 ( 0.00%)          if result.is_stack_dependent() {
          .                       return;
          .                   }
          .           
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
     21,956 ( 0.00%)          if self.intercrate {
          .                       return;
          .                   }
          .           
          .                   if self.can_use_global_caches(param_env) {
          .                       if !trait_pred.needs_infer() {
          .                           debug!(?trait_pred, ?result, "insert_evaluation_cache global");
          .                           // This may overwrite the cache with the same value
          .                           // FIXME: Due to #50507 this overwrites the different values
          .                           // This should be changed to use HashMapExt::insert_same
          .                           // when that is fixed
     10,100 ( 0.00%)                  self.tcx().evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
          .                           return;
          .                       }
          .                   }
          .           
          .                   debug!(?trait_pred, ?result, "insert_evaluation_cache");
      3,496 ( 0.00%)          self.infcx.evaluation_cache.insert(param_env.and(trait_pred), dep_node, result);
     87,824 ( 0.00%)      }
          .           
          .               /// For various reasons, it's possible for a subobligation
          .               /// to have a *lower* recursion_depth than the obligation used to create it.
          .               /// Projection sub-obligations may be returned from the projection cache,
          .               /// which results in obligations with an 'old' `recursion_depth`.
          .               /// Additionally, methods like `InferCtxt.subtype_predicate` produce
          .               /// subobligations without taking in a 'parent' depth, causing the
          .               /// generated subobligations to have a `recursion_depth` of `0`.
          .               ///
          .               /// To ensure that obligation_depth never decreases, we force all subobligations
          .               /// to have at least the depth of the original obligation.
        294 ( 0.00%)      fn add_depth<T: 'cx, I: Iterator<Item = &'cx mut Obligation<'tcx, T>>>(
          .                   &self,
          .                   it: I,
          .                   min_depth: usize,
          .               ) {
      3,440 ( 0.00%)          it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);
        588 ( 0.00%)      }
          .           
          .               fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(
          .                   &self,
          .                   depth: usize,
          .                   error_obligation: &Obligation<'tcx, T>,
          .               ) -> Result<(), OverflowError> {
    589,360 ( 0.00%)          if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {
          .                       match self.query_mode {
          .                           TraitQueryMode::Standard => {
          .                               if self.infcx.is_tainted_by_errors() {
          .                                   return Err(OverflowError::ErrorReporting);
          .                               }
          .                               self.infcx.report_overflow_error(error_obligation, true);
          .                           }
          .                           TraitQueryMode::Canonical => {
-- line 1126 ----------------------------------------
-- line 1143 ----------------------------------------
          .               ) -> Result<(), OverflowError> {
          .                   self.check_recursion_depth(obligation.recursion_depth, error_obligation)
          .               }
          .           
          .               fn in_task<OP, R>(&mut self, op: OP) -> (R, DepNodeIndex)
          .               where
          .                   OP: FnOnce(&mut Self) -> R,
          .               {
    268,359 ( 0.00%)          let (result, dep_node) =
    211,682 ( 0.00%)              self.tcx().dep_graph.with_anon_task(self.tcx(), DepKind::TraitSelect, || op(self));
          .                   self.tcx().dep_graph.read_index(dep_node);
    247,716 ( 0.00%)          (result, dep_node)
          .               }
          .           
          .               /// filter_impls filters constant trait obligations and candidates that have a positive impl
          .               /// for a negative goal and a negative impl for a positive goal
          .               #[instrument(level = "debug", skip(self))]
          .               fn filter_impls(
          .                   &mut self,
          .                   candidates: Vec<SelectionCandidate<'tcx>>,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> Vec<SelectionCandidate<'tcx>> {
          .                   let tcx = self.tcx();
          .                   let mut result = Vec::with_capacity(candidates.len());
          .           
    298,241 ( 0.00%)          for candidate in candidates {
          .                       // Respect const trait obligations
     53,688 ( 0.00%)              if obligation.is_const() {
         30 ( 0.00%)                  match candidate {
          .                               // const impl
          .                               ImplCandidate(def_id)
          .                                   if tcx.impl_constness(def_id) == hir::Constness::Const => {}
          .                               // const param
          .                               ParamCandidate(trait_pred)
          .                                   if trait_pred.skip_binder().constness
          .                                       == ty::BoundConstness::ConstIfConst => {}
          .                               // auto trait impl
-- line 1179 ----------------------------------------
-- line 1186 ----------------------------------------
          .                               ConstDropCandidate(_) => {}
          .                               _ => {
          .                                   // reject all other types of candidates
          .                                   continue;
          .                               }
          .                           }
          .                       }
          .           
     35,772 ( 0.00%)              if let ImplCandidate(def_id) = candidate {
     19,634 ( 0.00%)                  if ty::ImplPolarity::Reservation == tcx.impl_polarity(def_id)
      9,814 ( 0.00%)                      || obligation.polarity() == tcx.impl_polarity(def_id)
          .                               || self.allow_negative_impls
          .                           {
          .                               result.push(candidate);
          .                           }
          .                       } else {
          .                           result.push(candidate);
          .                       }
          .                   }
          .           
     81,108 ( 0.00%)          result
          .               }
          .           
          .               /// filter_reservation_impls filter reservation impl for any goal as ambiguous
    279,888 ( 0.00%)      #[instrument(level = "debug", skip(self))]
          .               fn filter_reservation_impls(
          .                   &mut self,
          .                   candidate: SelectionCandidate<'tcx>,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {
          .                   let tcx = self.tcx();
          .                   // Treat reservation impls as ambiguity.
     49,692 ( 0.00%)          if let ImplCandidate(def_id) = candidate {
     16,764 ( 0.00%)              if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {
          .                           if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {
          .                               let attrs = tcx.get_attrs(def_id);
          .                               let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);
          .                               let value = attr.and_then(|a| a.value_str());
          .                               if let Some(value) = value {
          .                                   debug!(
          .                                       "filter_reservation_impls: \
          .                                            reservation impl ambiguity on {:?}",
-- line 1227 ----------------------------------------
-- line 1232 ----------------------------------------
          .                                           message: value.to_string(),
          .                                       },
          .                                   );
          .                               }
          .                           }
          .                           return Ok(None);
          .                       }
          .                   }
     98,784 ( 0.00%)          Ok(Some(candidate))
          .               }
          .           
          .               fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {
          .                   debug!("is_knowable(intercrate={:?})", self.intercrate);
          .           
     61,941 ( 0.00%)          if !self.intercrate || stack.obligation.polarity() == ty::ImplPolarity::Negative {
          .                       return None;
          .                   }
          .           
          .                   let obligation = &stack.obligation;
         12 ( 0.00%)          let predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
          .           
          .                   // Okay to skip binder because of the nature of the
          .                   // trait-ref-is-knowable check, which does not care about
          .                   // bound regions.
          .                   let trait_ref = predicate.skip_binder().trait_ref;
          .           
         12 ( 0.00%)          coherence::trait_ref_is_knowable(self.tcx(), trait_ref)
          .               }
          .           
          .               /// Returns `true` if the global caches can be used.
          .               fn can_use_global_caches(&self, param_env: ty::ParamEnv<'tcx>) -> bool {
          .                   // If there are any inference variables in the `ParamEnv`, then we
          .                   // always use a cache local to this particular scope. Otherwise, we
          .                   // switch to a global cache.
          .                   if param_env.needs_infer() {
-- line 1266 ----------------------------------------
-- line 1286 ----------------------------------------
          .                   &mut self,
          .                   mut param_env: ty::ParamEnv<'tcx>,
          .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
          .               ) -> Option<SelectionResult<'tcx, SelectionCandidate<'tcx>>> {
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
    255,838 ( 0.00%)          if self.intercrate {
          4 ( 0.00%)              return None;
          .                   }
          .                   let tcx = self.tcx();
          .                   let mut pred = cache_fresh_trait_pred.skip_binder();
    255,830 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
          .           
    127,915 ( 0.00%)          if self.can_use_global_caches(param_env) {
  1,266,970 ( 0.00%)              if let Some(res) = tcx.selection_cache.get(&param_env.and(pred), tcx) {
  1,394,575 ( 0.00%)                  return Some(res);
          .                       }
          .                   }
    225,822 ( 0.00%)          self.infcx.selection_cache.get(&param_env.and(pred), tcx)
          .               }
          .           
          .               /// Determines whether can we safely cache the result
          .               /// of selecting an obligation. This is almost always `true`,
          .               /// except when dealing with certain `ParamCandidate`s.
          .               ///
          .               /// Ordinarily, a `ParamCandidate` will contain no inference variables,
          .               /// since it was usually produced directly from a `DefId`. However,
-- line 1314 ----------------------------------------
-- line 1325 ----------------------------------------
          .               fn can_cache_candidate(
          .                   &self,
          .                   result: &SelectionResult<'tcx, SelectionCandidate<'tcx>>,
          .               ) -> bool {
          .                   // Neither the global nor local cache is aware of intercrate
          .                   // mode, so don't do any caching. In particular, we might
          .                   // re-use the same `InferCtxt` with both an intercrate
          .                   // and non-intercrate `SelectionContext`
     41,286 ( 0.00%)          if self.intercrate {
          .                       return false;
          .                   }
     61,917 ( 0.00%)          match result {
          .                       Ok(Some(SelectionCandidate::ParamCandidate(trait_ref))) => !trait_ref.needs_infer(),
          .                       _ => true,
          .                   }
          .               }
          .           
          .               fn insert_candidate_cache(
          .                   &mut self,
          .                   mut param_env: ty::ParamEnv<'tcx>,
          .                   cache_fresh_trait_pred: ty::PolyTraitPredicate<'tcx>,
          .                   dep_node: DepNodeIndex,
          .                   candidate: SelectionResult<'tcx, SelectionCandidate<'tcx>>,
          .               ) {
          .                   let tcx = self.tcx();
          .                   let mut pred = cache_fresh_trait_pred.skip_binder();
          .           
     41,286 ( 0.00%)          pred.remap_constness(tcx, &mut param_env);
          .           
          .                   if !self.can_cache_candidate(&candidate) {
          .                       debug!(?pred, ?candidate, "insert_candidate_cache - candidate is not cacheable");
          .                       return;
          .                   }
          .           
     20,607 ( 0.00%)          if self.can_use_global_caches(param_env) {
     45,980 ( 0.00%)              if let Err(Overflow) = candidate {
          .                           // Don't cache overflow globally; we only produce this in certain modes.
          .                       } else if !pred.needs_infer() {
     77,688 ( 0.00%)                  if !candidate.needs_infer() {
          .                               debug!(?pred, ?candidate, "insert_candidate_cache global");
          .                               // This may overwrite the cache with the same value.
    524,394 ( 0.00%)                      tcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
          .                               return;
          .                           }
          .                       }
          .                   }
          .           
          .                   debug!(?pred, ?candidate, "insert_candidate_cache local");
     27,255 ( 0.00%)          self.infcx.selection_cache.insert(param_env.and(pred), dep_node, candidate);
          .               }
          .           
          .               /// Matches a predicate against the bounds of its self type.
          .               ///
          .               /// Given an obligation like `<T as Foo>::Bar: Baz` where the self type is
          .               /// a projection, look at the bounds of `T::Bar`, see if we can find a
          .               /// `Baz` bound. We return indexes into the list returned by
          .               /// `tcx.item_bounds` for any applicable bounds.
        162 ( 0.00%)      fn match_projection_obligation_against_definition_bounds(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> smallvec::SmallVec<[usize; 2]> {
        234 ( 0.00%)          let poly_trait_predicate = self.infcx().resolve_vars_if_possible(obligation.predicate);
          .                   let placeholder_trait_predicate =
        306 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(poly_trait_predicate);
          .                   debug!(
          .                       ?placeholder_trait_predicate,
          .                       "match_projection_obligation_against_definition_bounds"
          .                   );
          .           
         18 ( 0.00%)          let tcx = self.infcx.tcx;
        114 ( 0.00%)          let (def_id, substs) = match *placeholder_trait_predicate.trait_ref.self_ty().kind() {
         45 ( 0.00%)              ty::Projection(ref data) => (data.item_def_id, data.substs),
         15 ( 0.00%)              ty::Opaque(def_id, substs) => (def_id, substs),
          .                       _ => {
          .                           span_bug!(
          .                               obligation.cause.span,
          .                               "match_projection_obligation_against_definition_bounds() called \
          .                                but self-ty is not a projection: {:?}",
          .                               placeholder_trait_predicate.trait_ref.self_ty()
          .                           );
          .                       }
-- line 1405 ----------------------------------------
-- line 1411 ----------------------------------------
          .                   // unnecessary ambiguity.
          .                   let mut distinct_normalized_bounds = FxHashSet::default();
          .           
          .                   let matching_bounds = bounds
          .                       .iter()
          .                       .enumerate()
          .                       .filter_map(|(idx, bound)| {
          .                           let bound_predicate = bound.kind();
        150 ( 0.00%)                  if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {
          .                               let bound = bound_predicate.rebind(pred.trait_ref);
        630 ( 0.00%)                      if self.infcx.probe(|_| {
        246 ( 0.00%)                          match self.match_normalize_trait_ref(
          .                                       obligation,
        168 ( 0.00%)                              bound,
        168 ( 0.00%)                              placeholder_trait_predicate.trait_ref,
          .                                   ) {
          .                                       Ok(None) => true,
          .                                       Ok(Some(normalized_trait))
          .                                           if distinct_normalized_bounds.insert(normalized_trait) =>
          .                                       {
          .                                           true
          .                                       }
          .                                       _ => false,
-- line 1433 ----------------------------------------
-- line 1437 ----------------------------------------
          .                               }
          .                           }
          .                           None
          .                       })
          .                       .collect();
          .           
          .                   debug!(?matching_bounds, "match_projection_obligation_against_definition_bounds");
          .                   matching_bounds
        162 ( 0.00%)      }
          .           
          .               /// Equates the trait in `obligation` with trait bound. If the two traits
          .               /// can be equated and the normalized trait bound doesn't contain inference
          .               /// variables or placeholders, the normalized bound is returned.
        819 ( 0.00%)      fn match_normalize_trait_ref(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   trait_bound: ty::PolyTraitRef<'tcx>,
          .                   placeholder_trait_ref: ty::TraitRef<'tcx>,
          .               ) -> Result<Option<ty::PolyTraitRef<'tcx>>, ()> {
          .                   debug_assert!(!placeholder_trait_ref.has_escaping_bound_vars());
        229 ( 0.00%)          if placeholder_trait_ref.def_id != trait_bound.def_id() {
          .                       // Avoid unnecessary normalization
         86 ( 0.00%)              return Err(());
          .                   }
          .           
        240 ( 0.00%)          let Normalized { value: trait_bound, obligations: _ } = ensure_sufficient_stack(|| {
          .                       project::normalize_with_depth(
          .                           self,
         20 ( 0.00%)                  obligation.param_env,
          .                           obligation.cause.clone(),
         60 ( 0.00%)                  obligation.recursion_depth + 1,
         80 ( 0.00%)                  trait_bound,
          .                       )
          .                   });
         60 ( 0.00%)          self.infcx
         40 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
          .                       .sup(ty::Binder::dummy(placeholder_trait_ref), trait_bound)
          .                       .map(|InferOk { obligations: _, value: () }| {
          .                           // This method is called within a probe, so we can't have
          .                           // inference variables and placeholders escape.
          .                           if !trait_bound.needs_infer() && !trait_bound.has_placeholders() {
         80 ( 0.00%)                      Some(trait_bound)
          .                           } else {
          .                               None
          .                           }
          .                       })
          .                       .map_err(|_| ())
        567 ( 0.00%)      }
          .           
          .               fn evaluate_where_clause<'o>(
          .                   &mut self,
          .                   stack: &TraitObligationStack<'o, 'tcx>,
          .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
          .               ) -> Result<EvaluationResult, OverflowError> {
          .                   self.evaluation_probe(|this| {
     20,306 ( 0.00%)              match this.match_where_clause_trait_ref(stack.obligation, where_clause_trait_ref) {
      3,752 ( 0.00%)                  Ok(obligations) => this.evaluate_predicates_recursively(stack.list(), obligations),
          .                           Err(()) => Ok(EvaluatedToErr),
          .                       }
          .                   })
          .               }
          .           
        459 ( 0.00%)      pub(super) fn match_projection_projections(
          .                   &mut self,
          .                   obligation: &ProjectionTyObligation<'tcx>,
          .                   env_predicate: PolyProjectionPredicate<'tcx>,
          .                   potentially_unnormalized_candidates: bool,
          .               ) -> bool {
          .                   let mut nested_obligations = Vec::new();
        255 ( 0.00%)          let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(
        153 ( 0.00%)              obligation.cause.span,
          .                       LateBoundRegionConversionTime::HigherRankedType,
          .                       env_predicate,
          .                   );
        102 ( 0.00%)          let infer_projection = if potentially_unnormalized_candidates {
          .                       ensure_sufficient_stack(|| {
          .                           project::normalize_with_depth_to(
          .                               self,
          .                               obligation.param_env,
          .                               obligation.cause.clone(),
          .                               obligation.recursion_depth + 1,
          .                               infer_predicate.projection_ty,
          .                               &mut nested_obligations,
          .                           )
          .                       })
          .                   } else {
        102 ( 0.00%)              infer_predicate.projection_ty
          .                   };
          .           
         51 ( 0.00%)          self.infcx
        102 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
        102 ( 0.00%)              .sup(obligation.predicate, infer_projection)
        354 ( 0.00%)              .map_or(false, |InferOk { obligations, value: () }| {
          .                           self.evaluate_predicates_recursively(
          .                               TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),
          .                               nested_obligations.into_iter().chain(obligations),
          .                           )
         66 ( 0.00%)                  .map_or(false, |res| res.may_apply())
          .                       })
        459 ( 0.00%)      }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // WINNOW
          .               //
          .               // Winnowing is the process of attempting to resolve ambiguity by
          .               // probing further. During the winnowing process, we unify all
          .               // type variables and then we also attempt to evaluate recursive
          .               // bounds to see if they are satisfied.
-- line 1544 ----------------------------------------
-- line 1550 ----------------------------------------
          .               /// See the comment for "SelectionCandidate" for more details.
          .               fn candidate_should_be_dropped_in_favor_of(
          .                   &mut self,
          .                   sized_predicate: bool,
          .                   victim: &EvaluatedCandidate<'tcx>,
          .                   other: &EvaluatedCandidate<'tcx>,
          .                   needs_infer: bool,
          .               ) -> bool {
      2,429 ( 0.00%)          if victim.candidate == other.candidate {
          .                       return true;
          .                   }
          .           
          .                   // Check if a bound would previously have been removed when normalizing
          .                   // the param_env so that it can be given the lowest priority. See
          .                   // #50825 for the motivation for this.
          .                   let is_global = |cand: &ty::PolyTraitPredicate<'tcx>| {
          .                       cand.is_global() && !cand.has_late_bound_regions()
          .                   };
          .           
          .                   // (*) Prefer `BuiltinCandidate { has_nested: false }`, `PointeeCandidate`,
          .                   // `DiscriminantKindCandidate`, and `ConstDropCandidate` to anything else.
          .                   //
          .                   // This is a fix for #53123 and prevents winnowing from accidentally extending the
          .                   // lifetime of a variable.
     43,722 ( 0.00%)          match (&other.candidate, &victim.candidate) {
          .                       (_, AutoImplCandidate(..)) | (AutoImplCandidate(..), _) => {
          .                           bug!(
          .                               "default implementations shouldn't be recorded \
          .                               when there are other valid candidates"
          .                           );
          .                       }
          .           
          .                       // (*)
-- line 1582 ----------------------------------------
-- line 1674 ----------------------------------------
          .                       }
          .                       (ObjectCandidate(_), ProjectionCandidate(_))
          .                       | (ProjectionCandidate(_), ObjectCandidate(_)) => {
          .                           bug!("Have both object and projection candidate")
          .                       }
          .           
          .                       // Arbitrarily give projection and object candidates priority.
          .                       (
      4,858 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
          .                           ImplCandidate(..)
          .                           | ClosureCandidate
          .                           | GeneratorCandidate
          .                           | FnPointerCandidate { .. }
          .                           | BuiltinObjectCandidate
          .                           | BuiltinUnsizeCandidate
          .                           | TraitUpcastingUnsizeCandidate(_)
          .                           | BuiltinCandidate { .. }
-- line 1690 ----------------------------------------
-- line 1696 ----------------------------------------
          .                           | ClosureCandidate
          .                           | GeneratorCandidate
          .                           | FnPointerCandidate { .. }
          .                           | BuiltinObjectCandidate
          .                           | BuiltinUnsizeCandidate
          .                           | TraitUpcastingUnsizeCandidate(_)
          .                           | BuiltinCandidate { .. }
          .                           | TraitAliasCandidate(..),
      9,716 ( 0.00%)                  ObjectCandidate(_) | ProjectionCandidate(_),
          .                       ) => false,
          .           
     24,290 ( 0.00%)              (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {
          .                           // See if we can toss out `victim` based on specialization.
          .                           // This requires us to know *for sure* that the `other` impl applies
          .                           // i.e., `EvaluatedToOk`.
          .                           //
          .                           // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary
          .                           // to me but is required for `std` to compile, so I didn't change it
          .                           // for now.
          .                           let tcx = self.tcx();
      9,716 ( 0.00%)                  if other.evaluation.must_apply_modulo_regions() {
     19,200 ( 0.00%)                      if tcx.specializes((other_def, victim_def)) {
          .                                   return true;
          .                               }
          .                           }
          .           
     11,905 ( 0.00%)                  if other.evaluation.must_apply_considering_regions() {
      9,212 ( 0.00%)                      match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {
          .                                   Some(ty::ImplOverlapKind::Permitted { marker: true }) => {
          .                                       // Subtle: If the predicate we are evaluating has inference
          .                                       // variables, do *not* allow discarding candidates due to
          .                                       // marker trait impls.
          .                                       //
          .                                       // Without this restriction, we could end up accidentally
          .                                       // constrainting inference variables based on an arbitrarily
          .                                       // chosen trait impl.
-- line 1731 ----------------------------------------
-- line 1790 ----------------------------------------
          .                           | BuiltinUnsizeCandidate
          .                           | TraitUpcastingUnsizeCandidate(_)
          .                           | BuiltinCandidate { has_nested: true }
          .                           | TraitAliasCandidate(..),
          .                       ) => false,
          .                   }
          .               }
          .           
     84,380 ( 0.00%)      fn sized_conditions(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> BuiltinImplConditions<'tcx> {
          .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
          .           
          .                   // NOTE: binder moved to (*)
     25,314 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
          .           
     42,202 ( 0.00%)          match self_ty.kind() {
          .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
          .                       | ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::RawPtr(..)
-- line 1815 ----------------------------------------
-- line 1817 ----------------------------------------
          .                       | ty::Ref(..)
          .                       | ty::Generator(..)
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Array(..)
          .                       | ty::Closure(..)
          .                       | ty::Never
          .                       | ty::Error(_) => {
          .                           // safe for everything
      1,139 ( 0.00%)                  Where(ty::Binder::dummy(Vec::new()))
          .                       }
          .           
          .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => None,
          .           
          .                       ty::Tuple(tys) => Where(
          .                           obligation
          .                               .predicate
      9,640 ( 0.00%)                      .rebind(tys.last().into_iter().map(|k| k.expect_ty()).collect()),
          .                       ),
          .           
          .                       ty::Adt(def, substs) => {
      4,248 ( 0.00%)                  let sized_crit = def.sized_constraint(self.tcx());
          .                           // (*) binder moved here
     10,620 ( 0.00%)                  Where(
          .                               obligation.predicate.rebind({
      2,124 ( 0.00%)                          sized_crit.iter().map(|ty| ty.subst(self.tcx(), substs)).collect()
          .                               }),
          .                           )
          .                       }
          .           
          .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,
          .                       ty::Infer(ty::TyVar(_)) => Ambiguous,
          .           
          .                       ty::Placeholder(..)
          .                       | ty::Bound(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
          .                       }
          .                   }
     67,504 ( 0.00%)      }
          .           
     50,592 ( 0.00%)      fn copy_clone_conditions(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> BuiltinImplConditions<'tcx> {
          .                   // NOTE: binder moved to (*)
     12,648 ( 0.00%)          let self_ty = self.infcx.shallow_resolve(obligation.predicate.skip_binder().self_ty());
          .           
          .                   use self::BuiltinImplConditions::{Ambiguous, None, Where};
          .           
     32,104 ( 0.00%)          match *self_ty.kind() {
          .                       ty::Infer(ty::IntVar(_))
          .                       | ty::Infer(ty::FloatVar(_))
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
      3,216 ( 0.00%)              | ty::Error(_) => Where(ty::Binder::dummy(Vec::new())),
          .           
          .                       ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::Char
          .                       | ty::RawPtr(..)
          .                       | ty::Never
-- line 1879 ----------------------------------------
-- line 1886 ----------------------------------------
          .                       ty::Dynamic(..)
          .                       | ty::Str
          .                       | ty::Slice(..)
          .                       | ty::Generator(..)
          .                       | ty::GeneratorWitness(..)
          .                       | ty::Foreign(..)
          .                       | ty::Ref(_, _, hir::Mutability::Mut) => None,
          .           
        452 ( 0.00%)              ty::Tuple(tys) => {
          .                           // (*) binder moved here
      2,745 ( 0.00%)                  Where(obligation.predicate.rebind(tys.iter().map(|k| k.expect_ty()).collect()))
          .                       }
          .           
        928 ( 0.00%)              ty::Closure(_, substs) => {
          .                           // (*) binder moved here
      2,784 ( 0.00%)                  let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
      1,856 ( 0.00%)                  if let ty::Infer(ty::TyVar(_)) = ty.kind() {
          .                               // Not yet resolved.
          .                               Ambiguous
          .                           } else {
      6,496 ( 0.00%)                      Where(obligation.predicate.rebind(substs.as_closure().upvar_tys().collect()))
          .                           }
          .                       }
          .           
          .                       ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {
          .                           // Fallback to whatever user-defined impls exist in this case.
          .                           None
          .                       }
          .           
-- line 1914 ----------------------------------------
-- line 1920 ----------------------------------------
          .                       }
          .           
          .                       ty::Placeholder(..)
          .                       | ty::Bound(..)
          .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
          .                           bug!("asked to assemble builtin bounds of unexpected type: {:?}", self_ty);
          .                       }
          .                   }
     37,944 ( 0.00%)      }
          .           
          .               /// For default impls, we need to break apart a type into its
          .               /// "constituent types" -- meaning, the types that it contains.
          .               ///
          .               /// Here are some (simple) examples:
          .               ///
          .               /// ```
          .               /// (i32, u32) -> [i32, u32]
-- line 1936 ----------------------------------------
-- line 1937 ----------------------------------------
          .               /// Foo where struct Foo { x: i32, y: u32 } -> [i32, u32]
          .               /// Bar<i32> where struct Bar<T> { x: T, y: u32 } -> [i32, u32]
          .               /// Zed<i32> where enum Zed { A(T), B(u32) } -> [i32, u32]
          .               /// ```
          .               fn constituent_types_for_ty(
          .                   &self,
          .                   t: ty::Binder<'tcx, Ty<'tcx>>,
          .               ) -> ty::Binder<'tcx, Vec<Ty<'tcx>>> {
         60 ( 0.00%)          match *t.skip_binder().kind() {
          .                       ty::Uint(_)
          .                       | ty::Int(_)
          .                       | ty::Bool
          .                       | ty::Float(_)
          .                       | ty::FnDef(..)
          .                       | ty::FnPtr(_)
          .                       | ty::Str
          .                       | ty::Error(_)
-- line 1953 ----------------------------------------
-- line 1968 ----------------------------------------
          .                       ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {
          .                           t.rebind(vec![element_ty])
          .                       }
          .           
          .                       ty::Array(element_ty, _) | ty::Slice(element_ty) => t.rebind(vec![element_ty]),
          .           
          .                       ty::Tuple(ref tys) => {
          .                           // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet
          3 ( 0.00%)                  t.rebind(tys.iter().map(|k| k.expect_ty()).collect())
          .                       }
          .           
          .                       ty::Closure(_, ref substs) => {
          .                           let ty = self.infcx.shallow_resolve(substs.as_closure().tupled_upvars_ty());
          .                           t.rebind(vec![ty])
          .                       }
          .           
          .                       ty::Generator(_, ref substs, _) => {
-- line 1984 ----------------------------------------
-- line 1988 ----------------------------------------
          .                       }
          .           
          .                       ty::GeneratorWitness(types) => {
          .                           debug_assert!(!types.has_escaping_bound_vars());
          .                           types.map_bound(|types| types.to_vec())
          .                       }
          .           
          .                       // For `PhantomData<T>`, we pass `T`.
         10 ( 0.00%)              ty::Adt(def, substs) if def.is_phantom_data() => t.rebind(substs.types().collect()),
          .           
          5 ( 0.00%)              ty::Adt(def, substs) => {
         17 ( 0.00%)                  t.rebind(def.all_fields().map(|f| f.ty(self.tcx(), substs)).collect())
          .                       }
          .           
          .                       ty::Opaque(def_id, substs) => {
          .                           // We can resolve the `impl Trait` to its concrete type,
          .                           // which enforces a DAG between the functions requiring
          .                           // the auto trait bounds in question.
          .                           t.rebind(vec![self.tcx().type_of(def_id).subst(self.tcx(), substs)])
          .                       }
          .                   }
          .               }
          .           
     60,528 ( 0.00%)      fn collect_predicates_for_types(
          .                   &mut self,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   cause: ObligationCause<'tcx>,
          .                   recursion_depth: usize,
          .                   trait_def_id: DefId,
          .                   types: ty::Binder<'tcx, Vec<Ty<'tcx>>>,
          .               ) -> Vec<PredicateObligation<'tcx>> {
          .                   // Because the types were potentially derived from
-- line 2019 ----------------------------------------
-- line 2030 ----------------------------------------
          .                   // 2. Produce something like `&'0 i32 : Copy`
          .                   // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`
          .           
          .                   types
          .                       .as_ref()
          .                       .skip_binder() // binder moved -\
          .                       .iter()
          .                       .flat_map(|ty| {
     16,179 ( 0.00%)                  let ty: ty::Binder<'tcx, Ty<'tcx>> = types.rebind(ty); // <----/
          .           
     64,716 ( 0.00%)                  self.infcx.commit_unconditionally(|_| {
     16,179 ( 0.00%)                      let placeholder_ty = self.infcx.replace_bound_vars_with_placeholders(ty);
     26,965 ( 0.00%)                      let Normalized { value: normalized_ty, mut obligations } =
     53,930 ( 0.00%)                          ensure_sufficient_stack(|| {
          .                                       project::normalize_with_depth(
          .                                           self,
      5,393 ( 0.00%)                                  param_env,
          .                                           cause.clone(),
      5,393 ( 0.00%)                                  recursion_depth,
      5,393 ( 0.00%)                                  placeholder_ty,
          .                                       )
          .                                   });
     59,323 ( 0.00%)                      let placeholder_obligation = predicate_for_trait_def(
          .                                   self.tcx(),
      5,393 ( 0.00%)                          param_env,
          .                                   cause.clone(),
     10,786 ( 0.00%)                          trait_def_id,
          .                                   recursion_depth,
          .                                   normalized_ty,
          .                                   &[],
          .                               );
     32,358 ( 0.00%)                      obligations.push(placeholder_obligation);
          .                               obligations
          .                           })
          .                       })
          .                       .collect()
     30,264 ( 0.00%)      }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // Matching
          .               //
          .               // Matching is a common path used for both evaluation and
          .               // confirmation.  It basically unifies types that appear in impls
          .               // and traits. This does affect the surrounding environment;
          .               // therefore, when used during evaluation, match routines must be
-- line 2074 ----------------------------------------
-- line 2075 ----------------------------------------
          .               // run inside of a `probe()` so that their side-effects are
          .               // contained.
          .           
          .               fn rematch_impl(
          .                   &mut self,
          .                   impl_def_id: DefId,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> Normalized<'tcx, SubstsRef<'tcx>> {
    153,265 ( 0.00%)          match self.match_impl(impl_def_id, obligation) {
    122,612 ( 0.00%)              Ok(substs) => substs,
          .                       Err(()) => {
          .                           bug!(
          .                               "Impl {:?} was matchable against {:?} but now is not",
          .                               impl_def_id,
          .                               obligation
          .                           );
          .                       }
          .                   }
          .               }
          .           
    945,269 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self))]
          .               fn match_impl(
          .                   &mut self,
          .                   impl_def_id: DefId,
          .                   obligation: &TraitObligation<'tcx>,
          .               ) -> Result<Normalized<'tcx, SubstsRef<'tcx>>, ()> {
          .                   let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();
          .           
          .                   // Before we create the substitutions and everything, first
          .                   // consider a "quick reject". This avoids creating more types
          .                   // and so forth that we need to.
          .                   if self.fast_reject_trait_refs(obligation, &impl_trait_ref) {
      7,020 ( 0.00%)              return Err(());
          .                   }
          .           
          .                   let placeholder_obligation =
    323,687 ( 0.00%)              self.infcx().replace_bound_vars_with_placeholders(obligation.predicate);
    138,723 ( 0.00%)          let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;
          .           
    231,205 ( 0.00%)          let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);
          .           
     92,482 ( 0.00%)          let impl_trait_ref = impl_trait_ref.subst(self.tcx(), impl_substs);
          .           
          .                   debug!(?impl_trait_ref);
          .           
    277,446 ( 0.00%)          let Normalized { value: impl_trait_ref, obligations: mut nested_obligations } =
    323,687 ( 0.00%)              ensure_sufficient_stack(|| {
          .                           project::normalize_with_depth(
          .                               self,
     46,241 ( 0.00%)                      obligation.param_env,
          .                               obligation.cause.clone(),
    138,723 ( 0.00%)                      obligation.recursion_depth + 1,
     92,482 ( 0.00%)                      impl_trait_ref,
          .                           )
          .                       });
          .           
          .                   debug!(?impl_trait_ref, ?placeholder_obligation_trait_ref);
          .           
          .                   let cause = ObligationCause::new(
     46,241 ( 0.00%)              obligation.cause.span,
     92,482 ( 0.00%)              obligation.cause.body_id,
    416,169 ( 0.00%)              ObligationCauseCode::MatchImpl(obligation.cause.clone(), impl_def_id),
          .                   );
          .           
     92,482 ( 0.00%)          let InferOk { obligations, .. } = self
          .                       .infcx
     46,241 ( 0.00%)              .at(&cause, obligation.param_env)
          .                       .eq(placeholder_obligation_trait_ref, impl_trait_ref)
          .                       .map_err(|e| debug!("match_impl: failed eq_trait_refs due to `{}`", e))?;
          .                   nested_obligations.extend(obligations);
          .           
    121,413 ( 0.00%)          if !self.intercrate
          .                       && self.tcx().impl_polarity(impl_def_id) == ty::ImplPolarity::Reservation
          .                   {
          .                       debug!("match_impl: reservation impls only apply in intercrate mode");
          .                       return Err(());
          .                   }
          .           
          .                   debug!(?impl_substs, ?nested_obligations, "match_impl: success");
    242,802 ( 0.00%)          Ok(Normalized { value: impl_substs, obligations: nested_obligations })
          .               }
          .           
          .               fn fast_reject_trait_refs(
          .                   &mut self,
          .                   obligation: &TraitObligation<'_>,
          .                   impl_trait_ref: &ty::TraitRef<'_>,
          .               ) -> bool {
          .                   // We can avoid creating type variables and doing the full
          .                   // substitution if we find that any of the input types, when
          .                   // simplified, do not match.
          .           
    149,253 ( 0.00%)          iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs).any(
          .                       |(obligation_arg, impl_arg)| {
    456,340 ( 0.00%)                  match (obligation_arg.unpack(), impl_arg.unpack()) {
          .                               (GenericArgKind::Type(obligation_ty), GenericArgKind::Type(impl_ty)) => {
          .                                   // Note, we simplify parameters for the obligation but not the
          .                                   // impl so that we do not reject a blanket impl but do reject
          .                                   // more concrete impls if we're searching for `T: Trait`.
    595,728 ( 0.00%)                          let simplified_obligation_ty = fast_reject::simplify_type(
          .                                       self.tcx(),
          .                                       obligation_ty,
          .                                       SimplifyParams::Yes,
          .                                       StripReferences::No,
          .                                   );
    446,796 ( 0.00%)                          let simplified_impl_ty = fast_reject::simplify_type(
          .                                       self.tcx(),
          .                                       impl_ty,
          .                                       SimplifyParams::No,
          .                                       StripReferences::No,
          .                                   );
          .           
    223,398 ( 0.00%)                          simplified_obligation_ty.is_some()
          .                                       && simplified_impl_ty.is_some()
          .                                       && simplified_obligation_ty != simplified_impl_ty
          .                               }
          .                               (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => {
          .                                   // Lifetimes can never cause a rejection.
          .                                   false
          .                               }
          .                               (GenericArgKind::Const(_), GenericArgKind::Const(_)) => {
-- line 2194 ----------------------------------------
-- line 2201 ----------------------------------------
          .                           }
          .                       },
          .                   )
          .               }
          .           
          .               /// Normalize `where_clause_trait_ref` and try to match it against
          .               /// `obligation`. If successful, return any predicates that
          .               /// result from the normalization.
     16,614 ( 0.00%)      fn match_where_clause_trait_ref(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   where_clause_trait_ref: ty::PolyTraitRef<'tcx>,
          .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
          .                   self.match_poly_trait_ref(obligation, where_clause_trait_ref)
     14,768 ( 0.00%)      }
          .           
          .               /// Returns `Ok` if `poly_trait_ref` being true implies that the
          .               /// obligation is satisfied.
          .               #[instrument(skip(self), level = "debug")]
          .               fn match_poly_trait_ref(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   poly_trait_ref: ty::PolyTraitRef<'tcx>,
          .               ) -> Result<Vec<PredicateObligation<'tcx>>, ()> {
      2,969 ( 0.00%)          self.infcx
      1,846 ( 0.00%)              .at(&obligation.cause, obligation.param_env)
      8,907 ( 0.00%)              .sup(obligation.predicate.to_poly_trait_ref(), poly_trait_ref)
          .                       .map(|InferOk { obligations, .. }| obligations)
          .                       .map_err(|_| ())
          .               }
          .           
          .               ///////////////////////////////////////////////////////////////////////////
          .               // Miscellany
          .           
          .               fn match_fresh_trait_refs(
          .                   &self,
          .                   previous: ty::PolyTraitPredicate<'tcx>,
          .                   current: ty::PolyTraitPredicate<'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .               ) -> bool {
        213 ( 0.00%)          let mut matcher = ty::_match::Match::new(self.tcx(), param_env);
          .                   matcher.relate(previous, current).is_ok()
          .               }
          .           
          .               fn push_stack<'o>(
          .                   &mut self,
          .                   previous_stack: TraitObligationStackList<'o, 'tcx>,
          .                   obligation: &'o TraitObligation<'tcx>,
          .               ) -> TraitObligationStack<'o, 'tcx> {
    852,582 ( 0.00%)          let fresh_trait_pred = obligation.predicate.fold_with(&mut self.freshener);
          .           
          .                   let dfn = previous_stack.cache.next_dfn();
     37,734 ( 0.00%)          let depth = previous_stack.depth() + 1;
  1,165,671 ( 0.00%)          TraitObligationStack {
          .                       obligation,
    697,907 ( 0.00%)              fresh_trait_pred,
          .                       reached_depth: Cell::new(depth),
          .                       previous: previous_stack,
          .                       dfn,
          .                       depth,
          .                   }
          .               }
          .           
          .               #[instrument(skip(self), level = "debug")]
          .               fn closure_trait_ref_unnormalized(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
          .                   substs: SubstsRef<'tcx>,
          .               ) -> ty::PolyTraitRef<'tcx> {
      6,435 ( 0.00%)          let closure_sig = substs.as_closure().sig();
          .           
          .                   debug!(?closure_sig);
          .           
          .                   // (1) Feels icky to skip the binder here, but OTOH we know
          .                   // that the self-type is an unboxed closure type and hence is
          .                   // in fact unparameterized (or at least does not reference any
          .                   // regions bound in the obligation). Still probably some
          .                   // refactoring could make this nicer.
     21,450 ( 0.00%)          closure_trait_ref_and_return_type(
          .                       self.tcx(),
     12,870 ( 0.00%)              obligation.predicate.def_id(),
      2,145 ( 0.00%)              obligation.predicate.skip_binder().self_ty(), // (1)
      8,580 ( 0.00%)              closure_sig,
          .                       util::TupleArgumentsFlag::No,
          .                   )
          .                   .map_bound(|(trait_ref, _)| trait_ref)
          .               }
          .           
          .               fn generator_trait_ref_unnormalized(
          .                   &mut self,
          .                   obligation: &TraitObligation<'tcx>,
-- line 2291 ----------------------------------------
-- line 2307 ----------------------------------------
          .                   )
          .                   .map_bound(|(trait_ref, ..)| trait_ref)
          .               }
          .           
          .               /// Returns the obligations that are implied by instantiating an
          .               /// impl or trait. The obligations are substituted and fully
          .               /// normalized. This is used when confirming an impl or default
          .               /// impl.
    705,295 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, cause, param_env))]
          .               fn impl_or_trait_obligations(
          .                   &mut self,
          .                   cause: ObligationCause<'tcx>,
          .                   recursion_depth: usize,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   def_id: DefId,           // of impl or trait
          .                   substs: SubstsRef<'tcx>, // for impl or trait
          .               ) -> Vec<PredicateObligation<'tcx>> {
-- line 2323 ----------------------------------------
-- line 2334 ----------------------------------------
          .                   //    V: Iterator, V: Sized,
          .                   //    <U as Iterator>::Item: Copy
          .                   // When we substitute, say, `V => IntoIter<u32>, U => $0`, the last
          .                   // obligation will normalize to `<$0 as Iterator>::Item = $1` and
          .                   // `$1: Copy`, so we must ensure the obligations are emitted in
          .                   // that order.
          .                   let predicates = tcx.predicates_of(def_id);
          .                   debug!(?predicates);
     30,665 ( 0.00%)          assert_eq!(predicates.parent, None);
     91,995 ( 0.00%)          let mut obligations = Vec::with_capacity(predicates.predicates.len());
          .                   for (predicate, _) in predicates.predicates {
          .                       debug!(?predicate);
    246,325 ( 0.00%)              let predicate = normalize_with_depth_to(
          .                           self,
          .                           param_env,
          .                           cause.clone(),
          .                           recursion_depth,
     49,265 ( 0.00%)                  predicate.subst(tcx, substs),
          .                           &mut obligations,
          .                       );
    492,650 ( 0.00%)              obligations.push(Obligation {
          .                           cause: cause.clone(),
          .                           recursion_depth,
          .                           param_env,
          .                           predicate,
          .                       });
          .                   }
          .           
          .                   // We are performing deduplication here to avoid exponential blowups
-- line 2362 ----------------------------------------
-- line 2363 ----------------------------------------
          .                   // (#38528) from happening, but the real cause of the duplication is
          .                   // unknown. What we know is that the deduplication avoids exponential
          .                   // amount of predicates being propagated when processing deeply nested
          .                   // types.
          .                   //
          .                   // This code is hot enough that it's worth avoiding the allocation
          .                   // required for the FxHashSet when possible. Special-casing lengths 0,
          .                   // 1 and 2 covers roughly 75-80% of the cases.
     68,220 ( 0.00%)          if obligations.len() <= 1 {
          .                       // No possibility of duplicates.
     14,999 ( 0.00%)          } else if obligations.len() == 2 {
          .                       // Only two elements. Drop the second if they are equal.
          3 ( 0.00%)              if obligations[0] == obligations[1] {
          9 ( 0.00%)                  obligations.truncate(1);
          .                       }
          .                   } else {
          .                       // Three or more elements. Use a general deduplication process.
          .                       let mut seen = FxHashSet::default();
      6,007 ( 0.00%)              obligations.retain(|i| seen.insert(i.clone()));
          .                   }
          .           
    122,660 ( 0.00%)          obligations
          .               }
          .           }
          .           
          .           trait TraitObligationExt<'tcx> {
          .               fn derived_cause(
          .                   &self,
          .                   variant: fn(DerivedObligationCause<'tcx>) -> ObligationCauseCode<'tcx>,
          .               ) -> ObligationCause<'tcx>;
-- line 2392 ----------------------------------------
-- line 2408 ----------------------------------------
          .                    */
          .           
          .                   let obligation = self;
          .           
          .                   // NOTE(flaper87): As of now, it keeps track of the whole error
          .                   // chain. Ideally, we should have a way to configure this either
          .                   // by using -Z verbose or just a CLI argument.
          .                   let derived_cause = DerivedObligationCause {
    142,876 ( 0.00%)              parent_trait_pred: obligation.predicate,
     66,396 ( 0.00%)              parent_code: obligation.cause.clone_code(),
          .                   };
          .                   let derived_code = variant(derived_cause);
    423,562 ( 0.00%)          ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)
          .               }
          .           }
          .           
          .           impl<'o, 'tcx> TraitObligationStack<'o, 'tcx> {
          .               fn list(&'o self) -> TraitObligationStackList<'o, 'tcx> {
          .                   TraitObligationStackList::with(self)
          .               }
          .           
          .               fn cache(&self) -> &'o ProvisionalEvaluationCache<'tcx> {
     36,474 ( 0.00%)          self.previous.cache
          .               }
          .           
          .               fn iter(&'o self) -> TraitObligationStackList<'o, 'tcx> {
          .                   self.list()
          .               }
          .           
          .               /// Indicates that attempting to evaluate this stack entry
          .               /// required accessing something from the stack at depth `reached_depth`.
         16 ( 0.00%)      fn update_reached_depth(&self, reached_depth: usize) {
          8 ( 0.00%)          assert!(
          8 ( 0.00%)              self.depth >= reached_depth,
          .                       "invoked `update_reached_depth` with something under this stack: \
          .                        self.depth={} reached_depth={}",
          .                       self.depth,
          .                       reached_depth,
          .                   );
          .                   debug!(reached_depth, "update_reached_depth");
          .                   let mut p = self;
         24 ( 0.00%)          while reached_depth < p.depth {
          .                       debug!(?p.fresh_trait_pred, "update_reached_depth: marking as cycle participant");
          8 ( 0.00%)              p.reached_depth.set(p.reached_depth.get().min(reached_depth));
          8 ( 0.00%)              p = p.previous.head.unwrap();
          .                   }
         16 ( 0.00%)      }
          .           }
          .           
          .           /// The "provisional evaluation cache" is used to store intermediate cache results
          .           /// when solving auto traits. Auto traits are unusual in that they can support
          .           /// cycles. So, for example, a "proof tree" like this would be ok:
          .           ///
          .           /// - `Foo<T>: Send` :-
          .           ///   - `Bar<T>: Send` :-
-- line 2462 ----------------------------------------
-- line 2540 ----------------------------------------
          .               /// evaluation. When we create an entry in the evaluation cache using this provisional
          .               /// cache entry (see `on_completion`), we use this `dep_node` to ensure that future reads from
          .               /// the cache will have all of the necessary incr comp dependencies tracked.
          .               dep_node: DepNodeIndex,
          .           }
          .           
          .           impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {
          .               fn default() -> Self {
    157,489 ( 0.00%)          Self { dfn: Cell::new(0), map: Default::default() }
          .               }
          .           }
          .           
          .           impl<'tcx> ProvisionalEvaluationCache<'tcx> {
          .               /// Get the next DFN in sequence (basically a counter).
          .               fn next_dfn(&self) -> usize {
     18,867 ( 0.00%)          let result = self.dfn.get();
     75,468 ( 0.00%)          self.dfn.set(result + 1);
          .                   result
          .               }
          .           
          .               /// Check the provisional cache for any result for
          .               /// `fresh_trait_ref`. If there is a hit, then you must consider
          .               /// it an access to the stack slots at depth
          .               /// `reached_depth` (from the returned value).
          .               fn get_provisional(
-- line 2564 ----------------------------------------
-- line 2663 ----------------------------------------
          .               fn on_completion(
          .                   &self,
          .                   dfn: usize,
          .                   mut op: impl FnMut(ty::PolyTraitPredicate<'tcx>, EvaluationResult, DepNodeIndex),
          .               ) {
          .                   debug!(?dfn, "on_completion");
          .           
          .                   for (fresh_trait_pred, eval) in
     76,846 ( 0.00%)              self.map.borrow_mut().drain_filter(|_k, eval| eval.from_dfn >= dfn)
          .                   {
          .                       debug!(?fresh_trait_pred, ?eval, "on_completion");
          .           
          .                       op(fresh_trait_pred, eval.result, eval.dep_node);
          .                   }
          .               }
          .           }
          .           
-- line 2679 ----------------------------------------
-- line 2692 ----------------------------------------
          .                   TraitObligationStackList { cache: r.cache(), head: Some(r) }
          .               }
          .           
          .               fn head(&self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
          .                   self.head
          .               }
          .           
          .               fn depth(&self) -> usize {
     46,483 ( 0.00%)          if let Some(head) = self.head { head.depth } else { 0 }
          .               }
          .           }
          .           
          .           impl<'o, 'tcx> Iterator for TraitObligationStackList<'o, 'tcx> {
          .               type Item = &'o TraitObligationStack<'o, 'tcx>;
          .           
          .               fn next(&mut self) -> Option<&'o TraitObligationStack<'o, 'tcx>> {
     38,892 ( 0.00%)          let o = self.head?;
      3,005 ( 0.00%)          *self = o.previous;
          .                   Some(o)
          .               }
          .           }
          .           
          .           impl<'o, 'tcx> fmt::Debug for TraitObligationStack<'o, 'tcx> {
          .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   write!(f, "TraitObligationStack({:?})", self.obligation)
          .               }
-- line 2717 ----------------------------------------

  1,430,505 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/select/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 154 ----------------------------------------
         .           /// Value of a unification key. We implement Tarjan's union-find
         .           /// algorithm: when two keys are unified, one of them is converted
         .           /// into a "redirect" pointing at the other. These redirects form a
         .           /// DAG: the roots of the DAG (nodes that are not redirected) are each
         .           /// associated with a value of type `V` and a rank. The rank is used
         .           /// to keep the DAG relatively balanced, which helps keep the running
         .           /// time of the algorithm under control. For more information, see
         .           /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
    87,862 ( 0.00%)  #[derive(PartialEq, Clone, Debug)]
         .           pub struct VarValue<K: UnifyKey> {
   146,282 ( 0.00%)      parent: K,       // if equal to self, this is a root
    11,852 ( 0.00%)      value: K::Value, // value assigned (only relevant to root)
   140,410 ( 0.00%)      rank: u32,       // max depth (only relevant to root)
         .           }
         .           
         .           /// Table of unification keys and their values. You must define a key type K
         .           /// that implements the `UnifyKey` trait. Unification tables can be used in two-modes:
         .           ///
         .           /// - in-place (`UnificationTable<InPlace<K>>` or `InPlaceUnificationTable<K>`):
         .           ///   - This is the standard mutable mode, where the array is modified
         .           ///     in place.
         .           ///   - To do backtracking, you can employ the `snapshot` and `rollback_to`
         .           ///     methods.
         .           /// - persistent (`UnificationTable<Persistent<K>>` or `PersistentUnificationTable<K>`):
         .           ///   - In this mode, we use a persistent vector to store the data, so that
         .           ///     cloning the table is an O(1) operation.
         .           ///   - This implies that ordinary operations are quite a bit slower though.
         .           ///   - Requires the `persistent` feature be selected in your Cargo.toml file.
   353,570 ( 0.00%)  #[derive(Clone, Debug, Default)]
         .           pub struct UnificationTable<S: UnificationStoreBase> {
         .               /// Indicates the current value of each key.
         .               values: S,
         .           }
         .           
         .           pub type UnificationStorage<K> = Vec<VarValue<K>>;
         .           pub type UnificationTableStorage<K> = UnificationTable<InPlace<K, UnificationStorage<K>, ()>>;
         .           
-- line 190 ----------------------------------------
-- line 215 ----------------------------------------
         .               }
         .           
         .               fn new(parent: K, value: K::Value, rank: u32) -> VarValue<K> {
         .                   VarValue {
         .                       parent: parent, // this is a root
         .                       value: value,
         .                       rank: rank,
         .                   }
   563,959 ( 0.00%)      }
         .           
         .               fn redirect(&mut self, to: K) {
    96,001 ( 0.00%)          self.parent = to;
         .               }
         .           
         .               fn root(&mut self, rank: u32, value: K::Value) {
    86,912 ( 0.00%)          self.rank = rank;
    42,512 ( 0.00%)          self.value = value;
         .               }
         .           
         .               fn parent(&self, self_key: K) -> Option<K> {
 5,148,249 ( 0.01%)          self.if_not_self(self.parent, self_key)
         .               }
         .           
         .               fn if_not_self(&self, key: K, self_key: K) -> Option<K> {
         .                   if key == self_key {
         .                       None
         .                   } else {
         .                       Some(key)
         .                   }
-- line 243 ----------------------------------------
-- line 253 ----------------------------------------
         .                   &'a mut self,
         .                   undo_log: L,
         .               ) -> UnificationTable<InPlace<K, &'a mut UnificationStorage<K>, L>>
         .               where
         .                   L: UndoLogs<sv::UndoLog<Delegate<K>>>,
         .               {
         .                   UnificationTable {
         .                       values: InPlace {
         4 ( 0.00%)                  values: self.values.values.with_log(undo_log),
         .                       },
         .                   }
         .               }
         .           }
         .           
         .           // We can't use V:LatticeValue, much as I would like to,
         .           // because frequently the pattern is that V=Option<U> for some
         .           // other type parameter U, and we have no way to say
-- line 269 ----------------------------------------
-- line 311 ----------------------------------------
         .               pub fn len(&self) -> usize {
         .                   self.values.len()
         .               }
         .           }
         .           
         .           impl<S: UnificationStoreMut> UnificationTable<S> {
         .               /// Starts a new snapshot. Each snapshot must be either
         .               /// Creates a fresh key with the given value.
   865,936 ( 0.00%)      pub fn new_key(&mut self, value: S::Value) -> S::Key {
         .                   let len = self.values.len();
 1,419,272 ( 0.00%)          let key: S::Key = UnifyKey::from_index(len as u32);
         .                   self.values.push(VarValue::new_var(key, value));
   568,608 ( 0.00%)          debug!("{}: created new key: {:?}", S::tag(), key);
         .                   key
 1,295,432 ( 0.00%)      }
         .           
         .               /// Reserve memory for `num_new_keys` to be created. Does not
         .               /// actually create the new keys; you must then invoke `new_key`.
         .               pub fn reserve(&mut self, num_new_keys: usize) {
         .                   self.values.reserve(num_new_keys);
         .               }
         .           
         .               /// Clears all unifications that have been performed, resetting to
         .               /// the initial state. The values of each variable are given by
         .               /// the closure.
         .               pub fn reset_unifications(&mut self, mut value: impl FnMut(S::Key) -> S::Value) {
         .                   self.values.reset_unifications(|i| {
        59 ( 0.00%)              let key = UnifyKey::from_index(i as u32);
         .                       let value = value(key);
         .                       VarValue::new_var(key, value)
         .                   });
         .               }
         .           
         .               /// Obtains the current value for a particular key.
         .               /// Not for end-users; they can use `probe_value`.
         .               fn value(&self, key: S::Key) -> &VarValue<S::Key> {
26,323,817 ( 0.07%)          &self.values[key.index() as usize]
         .               }
         .           
         .               /// Find the root node for `vid`. This uses the standard
         .               /// union-find algorithm with path compression:
         .               /// <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.
         .               ///
         .               /// NB. This is a building-block operation and you would probably
         .               /// prefer to call `probe` below.
         .               ///
         .               /// This is an always-inlined version of this function for the hot
         .               /// callsites. `uninlined_get_root_key` is the never-inlined version.
         .               #[inline(always)]
         .               fn inlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
         .                   let redirect = {
95,739,915 ( 0.25%)              match self.value(vid).parent(vid) {
         .                           None => return vid,
         .                           Some(redirect) => redirect,
         .                       }
         .                   };
         .           
34,428,092 ( 0.09%)          let root_key: S::Key = self.uninlined_get_root_key(redirect);
   124,208 ( 0.00%)          if root_key != redirect {
         .                       // Path compression
     3,210 ( 0.00%)              self.update_value(vid, |value| value.parent = root_key);
         .                   }
         .           
         .                   root_key
         .               }
         .           
         .               // This is a never-inlined version of this function for cold callsites.
         .               // 'inlined_get_root_key` is the always-inlined version.
         .               #[inline(never)]
86,843,075 ( 0.22%)      fn uninlined_get_root_key(&mut self, vid: S::Key) -> S::Key {
         .                   self.inlined_get_root_key(vid)
86,297,629 ( 0.22%)      }
         .           
     8,560 ( 0.00%)      fn update_value<OP>(&mut self, key: S::Key, op: OP)
         .               where
         .                   OP: FnOnce(&mut VarValue<S::Key>),
         .               {
   466,060 ( 0.00%)          self.values.update(key.index() as usize, op);
   259,466 ( 0.00%)          debug!("Updated variable {:?} to {:?}", key, self.value(key));
     5,350 ( 0.00%)      }
         .           
         .               /// Either redirects `node_a` to `node_b` or vice versa, depending
         .               /// on the relative rank. The value associated with the new root
         .               /// will be `new_value`.
         .               ///
         .               /// NB: This is the "union" operation of "union-find". It is
         .               /// really more of a building block. If the values associated with
         .               /// your key are non-trivial, you would probably prefer to call
         .               /// `unify_var_var` below.
         .               fn unify_roots(&mut self, key_a: S::Key, key_b: S::Key, new_value: S::Value) {
    55,110 ( 0.00%)          debug!("unify(key_a={:?}, key_b={:?})", key_a, key_b);
         .           
    81,476 ( 0.00%)          let rank_a = self.value(key_a).rank;
   246,752 ( 0.00%)          let rank_b = self.value(key_b).rank;
         .                   if let Some((new_root, redirected)) = S::Key::order_roots(
   149,184 ( 0.00%)              key_a,
         .                       &self.value(key_a).value,
   149,184 ( 0.00%)              key_b,
         .                       &self.value(key_b).value,
         .                   ) {
         .                       // compute the new rank for the new root that they chose;
         .                       // this may not be the optimal choice.
         .                       let new_rank = if new_root == key_a {
         .                           debug_assert!(redirected == key_b);
         .                           if rank_a > rank_b {
         .                               rank_a
-- line 416 ----------------------------------------
-- line 422 ----------------------------------------
         .                           debug_assert!(redirected == key_a);
         .                           if rank_b > rank_a {
         .                               rank_b
         .                           } else {
         .                               rank_a + 1
         .                           }
         .                       };
         .                       self.redirect_root(new_rank, redirected, new_root, new_value);
   110,220 ( 0.00%)          } else if rank_a > rank_b {
         .                       // a has greater rank, so a should become b's parent,
         .                       // i.e., b should redirect to a.
    55,244 ( 0.00%)              self.redirect_root(rank_a, key_b, key_a, new_value);
    37,878 ( 0.00%)          } else if rank_a < rank_b {
         .                       // b has greater rank, so a should redirect to b.
    25,801 ( 0.00%)              self.redirect_root(rank_b, key_a, key_b, new_value);
         .                   } else {
         .                       // If equal, redirect one to the other and increment the
         .                       // other's rank.
   129,082 ( 0.00%)              self.redirect_root(rank_a + 1, key_a, key_b, new_value);
         .                   }
         .               }
         .           
         .               /// Internal method to redirect `old_root_key` (which is currently
         .               /// a root) to a child of `new_root_key` (which will remain a
         .               /// root). The rank and value of `new_root_key` will be updated to
         .               /// `new_rank` and `new_value` respectively.
   685,852 ( 0.00%)      fn redirect_root(
         .                   &mut self,
         .                   new_rank: u32,
         .                   old_root_key: S::Key,
         .                   new_root_key: S::Key,
         .                   new_value: S::Value,
         .               ) {
         .                   self.update_value(old_root_key, |old_root_value| {
         .                       old_root_value.redirect(new_root_key);
         .                   });
       135 ( 0.00%)          self.update_value(new_root_key, |new_root_value| {
     5,382 ( 0.00%)              new_root_value.root(new_rank, new_value);
         .                   });
   373,172 ( 0.00%)      }
         .           }
         .           
         .           /// ////////////////////////////////////////////////////////////////////////
         .           /// Public API
         .           
         .           impl<S, K, V> UnificationTable<S>
         .           where
         .               S: UnificationStoreMut<Key = K, Value = V>,
         .               K: UnifyKey<Value = V>,
         .               V: UnifyValue,
         .           {
         .               /// Unions two keys without the possibility of failure; only
         .               /// applicable when unify values use `NoError` as their error
         .               /// type.
   530,473 ( 0.00%)      pub fn union<K1, K2>(&mut self, a_id: K1, b_id: K2)
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .                   V: UnifyValue<Error = NoError>,
         .               {
         .                   self.unify_var_var(a_id, b_id).unwrap();
   468,876 ( 0.00%)      }
         .           
         .               /// Unions a key and a value without the possibility of failure;
         .               /// only applicable when unify values use `NoError` as their error
         .               /// type.
 1,265,352 ( 0.00%)      pub fn union_value<K1>(&mut self, id: K1, value: V)
         .               where
         .                   K1: Into<K>,
         .                   V: UnifyValue<Error = NoError>,
         .               {
         .                   self.unify_var_value(id, value).unwrap();
   990,796 ( 0.00%)      }
         .           
         .               /// Given two keys, indicates whether they have been unioned together.
         .               pub fn unioned<K1, K2>(&mut self, a_id: K1, b_id: K2) -> bool
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .               {
         .                   self.find(a_id) == self.find(b_id)
-- line 502 ----------------------------------------
-- line 503 ----------------------------------------
         .               }
         .           
         .               /// Given a key, returns the (current) root key.
         .               pub fn find<K1>(&mut self, id: K1) -> K
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let id = id.into();
   794,109 ( 0.00%)          self.uninlined_get_root_key(id)
         .               }
         .           
         .               /// Unions together two variables, merging their values. If
         .               /// merging the values fails, the error is propagated and this
         .               /// method has no effect.
       243 ( 0.00%)      pub fn unify_var_var<K1, K2>(&mut self, a_id: K1, b_id: K2) -> Result<(), V::Error>
         .               where
         .                   K1: Into<K>,
         .                   K2: Into<K>,
         .               {
         .                   let a_id = a_id.into();
         .                   let b_id = b_id.into();
         .           
   187,930 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
   184,926 ( 0.00%)          let root_b = self.uninlined_get_root_key(b_id);
         .           
    23,927 ( 0.00%)          if root_a == root_b {
         .                       return Ok(());
         .                   }
         .           
   297,596 ( 0.00%)          let combined = V::unify_values(&self.value(root_a).value, &self.value(root_b).value)?;
         .           
         .                   Ok(self.unify_roots(root_a, root_b, combined))
       270 ( 0.00%)      }
         .           
         .               /// Sets the value of the key `a_id` to `b`, attempting to merge
         .               /// with the previous value.
    32,672 ( 0.00%)      pub fn unify_var_value<K1>(&mut self, a_id: K1, b: V) -> Result<(), V::Error>
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let a_id = a_id.into();
   207,449 ( 0.00%)          let root_a = self.uninlined_get_root_key(a_id);
   456,042 ( 0.00%)          let value = V::unify_values(&self.value(root_a).value, &b)?;
   300,520 ( 0.00%)          self.update_value(root_a, |node| node.value = value);
         .                   Ok(())
    30,161 ( 0.00%)      }
         .           
         .               /// Returns the current value for the given key. If the key has
         .               /// been union'd, this will give the value from the current root.
    92,288 ( 0.00%)      pub fn probe_value<K1>(&mut self, id: K1) -> V
         .               where
         .                   K1: Into<K>,
         .               {
         .                   self.inlined_probe_value(id)
    87,704 ( 0.00%)      }
         .           
         .               // An always-inlined version of `probe_value`, for hot callsites.
         .               #[inline(always)]
         .               pub fn inlined_probe_value<K1>(&mut self, id: K1) -> V
         .               where
         .                   K1: Into<K>,
         .               {
         .                   let id = id.into();
         .                   let id = self.inlined_get_root_key(id);
    47,789 ( 0.00%)          self.value(id).value.clone()
         .               }
         .           }
         .           
         .           ///////////////////////////////////////////////////////////////////////////
         .           
         .           impl UnifyValue for () {
         .               type Error = NoError;
         .           
         .               fn unify_values(_: &(), _: &()) -> Result<(), NoError> {
         .                   Ok(())
    35,960 ( 0.00%)      }
         .           }
         .           
         .           impl<V: UnifyValue> UnifyValue for Option<V> {
         .               type Error = V::Error;
         .           
         .               fn unify_values(a: &Option<V>, b: &Option<V>) -> Result<Self, V::Error> {
    17,670 ( 0.00%)          match (a, b) {
         .                       (&None, &None) => Ok(None),
         .                       (&Some(ref v), &None) | (&None, &Some(ref v)) => Ok(Some(v.clone())),
         .                       (&Some(ref a), &Some(ref b)) => match V::unify_values(a, b) {
         .                           Ok(v) => Ok(Some(v)),
         .                           Err(err) => Err(err),
         .                       },
         .                   }
         .               }
-- line 593 ----------------------------------------

23,608,199 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/unify/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 141 ----------------------------------------
         .               /// ```
         .               /// let a = [1, 2, 3];
         .               /// assert!(!a.is_empty());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
         .               #[inline]
         .               pub const fn is_empty(&self) -> bool {
 5,200,700 ( 0.01%)          self.len() == 0
         .               }
         .           
         .               /// Returns the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.first());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn first(&self) -> Option<&T> {
    29,315 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
         .               ///     *first = 5;
         .               /// }
         .               /// assert_eq!(x, &[5, 1, 2]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn first_mut(&mut self) -> Option<&mut T> {
    24,220 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
         .               ///     assert_eq!(first, &0);
         .               ///     assert_eq!(elements, &[1, 2]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
        24 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
         .               }
         .           
         .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
         .               ///     assert_eq!(last, &2);
         .               ///     assert_eq!(elements, &[0, 1]);
         .               /// }
         .               /// ```
         .               #[stable(feature = "slice_splits", since = "1.5.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   165,677 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
         .               }
         .           
         .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
         .               ///
         .               /// let w: &[i32] = &[];
         .               /// assert_eq!(None, w.last());
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
         .               #[inline]
         .               pub const fn last(&self) -> Option<&T> {
 1,958,923 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a mutable pointer to the last item in the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
         .               ///     *last = 10;
         .               /// }
         .               /// assert_eq!(x, &[0, 1, 10]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
         .               #[inline]
         .               pub const fn last_mut(&mut self) -> Option<&mut T> {
 6,284,179 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
         .               }
         .           
         .               /// Returns a reference to an element or subslice depending on the type of
         .               /// index.
         .               ///
         .               /// - If given a position, returns a reference to the element at that
         .               ///   position or `None` if out of bounds.
         .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
         .               /// }
         .               /// ```
         .               ///
         .               /// [`as_mut_ptr`]: slice::as_mut_ptr
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
         .               #[inline]
         .               pub const fn as_ptr(&self) -> *const T {
 6,712,388 ( 0.02%)          self as *const [T] as *const T
         .               }
         .           
         .               /// Returns an unsafe mutable pointer to the slice's buffer.
         .               ///
         .               /// The caller must ensure that the slice outlives the pointer this
         .               /// function returns, or else it will end up pointing to garbage.
         .               ///
         .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
         .               ///     }
         .               /// }
         .               /// assert_eq!(x, &[3, 4, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
         .               #[inline]
         .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        29 ( 0.00%)          self as *mut [T] as *mut T
         .               }
         .           
         .               /// Returns the two raw pointers spanning the slice.
         .               ///
         .               /// The returned range is half-open, which means that the end pointer
         .               /// points *one past* the last element of the slice. This way, an empty
         .               /// slice is represented by two equal pointers, and the difference between
         .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
         .               /// v.swap(2, 4);
         .               /// assert!(v == ["a", "b", "e", "d", "c"]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
         .               #[inline]
         .               #[track_caller]
         .               pub const fn swap(&mut self, a: usize, b: usize) {
   247,638 ( 0.00%)          let _ = &self[a];
   706,565 ( 0.00%)          let _ = &self[b];
         .           
         .                   // SAFETY: we just checked that both `a` and `b` are in bounds
         .                   unsafe { self.swap_unchecked(a, b) }
         .               }
         .           
         .               /// Swaps two elements in the slice, without doing bounds checking.
         .               ///
         .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
         .           
         .                       // Because this function is first compiled in isolation,
         .                       // this check tells LLVM that the indexing below is
         .                       // in-bounds.  Then after inlining -- once the actual
         .                       // lengths of the slices are known -- it's removed.
         .                       let (a, b) = (&mut a[..n], &mut b[..n]);
         .           
         .                       for i in 0..n {
    39,992 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
         .                       }
         .                   }
         .               }
         .           
         .               /// Returns an iterator over the slice.
         .               ///
         .               /// # Examples
         .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
         .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
         .               ///     assert_eq!(right, []);
         .               /// }
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
       336 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_unchecked(mid) }
         .               }
         .           
         .               /// Divides one mutable slice into two at an index.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
         .               /// left[1] = 2;
         .               /// right[1] = 4;
         .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               #[track_caller]
         .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   469,624 ( 0.00%)          assert!(mid <= self.len());
         .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
         .                   // fulfills the requirements of `from_raw_parts_mut`.
         .                   unsafe { self.split_at_mut_unchecked(mid) }
         .               }
         .           
         .               /// Divides one slice into two at an index, without doing bounds checking.
         .               ///
         .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
         .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
         .                   let len = self.len();
         .                   let ptr = self.as_mut_ptr();
         .           
         .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
         .                   //
         .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
         .                   // is fine.
    33,105 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
         .               }
         .           
         .               /// Divides one slice into an array and a remainder slice at an index.
         .               ///
         .               /// The array will contain all indices from `[0, N)` (excluding
         .               /// the index `N` itself) and the slice will contain all
         .               /// indices from `[N, len)` (excluding the index `len` itself).
         .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
         .               /// assert!(!v.iter().any(|e| e == "hi"));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[inline]
         .               pub fn contains(&self, x: &T) -> bool
         .               where
         .                   T: PartialEq,
         .               {
     5,322 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
         .               }
         .           
         .               /// Returns `true` if `needle` is a prefix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
         .               /// assert!(v.starts_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn starts_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let n = needle.len();
     7,030 ( 0.00%)          self.len() >= n && needle == &self[..n]
         .               }
         .           
         .               /// Returns `true` if `needle` is a suffix of the slice.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
         .               /// assert!(v.ends_with(&[]));
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ends_with(&self, needle: &[T]) -> bool
         .               where
         .                   T: PartialEq,
         .               {
         .                   let (m, n) = (self.len(), needle.len());
   204,020 ( 0.00%)          m >= n && needle == &self[m - n..]
         .               }
         .           
         .               /// Returns a subslice with the prefix removed.
         .               ///
         .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
         .               /// If `prefix` is empty, simply returns the original slice.
         .               ///
         .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
         .               /// s.insert(idx, num);
         .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
         .               /// ```
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
         .               where
         .                   T: Ord,
         .               {
         3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
         .               }
         .           
         .               /// Binary searches this sorted slice with a comparator function.
         .               ///
         .               /// The comparator function should implement an order consistent
         .               /// with the sort order of the underlying slice, returning an
         .               /// order code that indicates whether its argument is `Less`,
         .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
         .               #[inline]
         .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
         .               where
         .                   F: FnMut(&'a T) -> Ordering,
         .               {
         .                   let mut size = self.len();
         .                   let mut left = 0;
         .                   let mut right = size;
31,914,599 ( 0.08%)          while left < right {
50,427,882 ( 0.13%)              let mid = left + size / 2;
         .           
         .                       // SAFETY: the call is made safe by the following invariants:
         .                       // - `mid >= 0`
         .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
 4,307,549 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
         .           
         .                       // The reason why we use if/else control flow rather than match
         .                       // is because match reorders comparison operations, which is perf sensitive.
         .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
13,202,484 ( 0.03%)              if cmp == Less {
28,350,430 ( 0.07%)                  left = mid + 1;
 6,432,027 ( 0.02%)              } else if cmp == Greater {
         .                           right = mid;
         .                       } else {
         .                           // SAFETY: same as the `get_unchecked` above
         .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
         .                           return Ok(mid);
         .                       }
         .           
38,801,626 ( 0.10%)              size = right - left;
         .                   }
         .                   Err(left)
         .               }
         .           
         .               /// Binary searches this sorted slice with a key extraction function.
         .               ///
         .               /// Assumes that the slice is sorted by the key, for instance with
         .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
         .                   #[track_caller]
         .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
         .                       panic!(
         .                           "source slice length ({}) does not match destination slice length ({})",
         .                           src_len, dst_len,
         .                       );
         .                   }
         .           
 1,055,054 ( 0.00%)          if self.len() != src.len() {
         .                       len_mismatch_fail(self.len(), src.len());
         .                   }
         .           
         .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
         .                   // checked to have the same length. The slices cannot overlap because
         .                   // mutable references are exclusive.
         .                   unsafe {
         .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
         .                   }
         .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
         .                   let ts: usize = mem::size_of::<U>() / gcd;
         .                   let us: usize = mem::size_of::<T>() / gcd;
         .           
         .                   // Armed with this knowledge, we can find how many `U`s we can fit!
         .                   let us_len = self.len() / ts * us;
         .                   // And how many `T`s will be in the trailing slice!
   166,950 ( 0.00%)          let ts_len = self.len() % ts;
         .                   (us_len, ts_len)
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
         .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
         .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
         .                       return (self, &[], &[]);
         .                   }
         .           
         .                   // First, find at what point do we split between the first and 2nd slice. Easy with
         .                   // ptr.align_offset.
         .                   let ptr = self.as_ptr();
         .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
         .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
   166,950 ( 0.00%)          if offset > self.len() {
         .                       (self, &[], &[])
         .                   } else {
         .                       let (left, rest) = self.split_at(offset);
         .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
         .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
         .                       // since the caller guarantees that we can transmute `T` to `U` safely.
         .                       unsafe {
         .                           (
         .                               left,
         .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
   166,950 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
         .                           )
         .                       }
         .                   }
         .               }
         .           
         .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
         .               /// maintained.
         .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
         .               /// let v = [1, 2, 3, 3, 5, 6, 7];
         .               /// let i = v.partition_point(|&x| x < 5);
         .               ///
         .               /// assert_eq!(i, 4);
         .               /// assert!(v[..i].iter().all(|&x| x < 5));
         .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
         .               /// ```
         .               #[stable(feature = "partition_point", since = "1.52.0")]
         2 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
         .               where
         .                   P: FnMut(&T) -> bool,
         .               {
         .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
         4 ( 0.00%)      }
         .           
         .               /// Removes the subslice corresponding to the given range
         .               /// and returns a reference to it.
         .               ///
         .               /// Returns `None` and does not modify the slice if the given
         .               /// range is out of bounds.
         .               ///
         .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

24,047,847 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 180 ----------------------------------------
          .           /// assert_eq!(v, &[0.into()]);
          .           ///
          .           /// // Ensure that the last item was dropped.
          .           /// assert!(weak.upgrade().is_none());
          .           /// ```
          .           #[stable(feature = "drop_in_place", since = "1.8.0")]
          .           #[lang = "drop_in_place"]
          .           #[allow(unconditional_recursion)]
149,116,717 ( 0.38%)  pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
          .               // Code here does not matter - this is replaced by the
          .               // real drop glue by the compiler.
          .           
          .               // SAFETY: see comment above
          .               unsafe { drop_in_place(to_drop) }
          .           }
          .           
          .           /// Creates a null raw pointer.
-- line 196 ----------------------------------------
-- line 366 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .           
          .               // Perform the swap
          .               // SAFETY: the caller must guarantee that `x` and `y` are
          .               // valid for writes and properly aligned. `tmp` cannot be
          .               // overlapping either `x` or `y` because `tmp` was just allocated
          .               // on the stack as a separate allocated object.
          .               unsafe {
         97 ( 0.00%)          copy_nonoverlapping(x, tmp.as_mut_ptr(), 1);
         97 ( 0.00%)          copy(y, x, 1); // `x` and `y` may overlap
          .                   copy_nonoverlapping(tmp.as_ptr(), y, 1);
          .               }
          .           }
          .           
          .           /// Swaps `count * size_of::<T>()` bytes between the two regions of memory
          .           /// beginning at `x` and `y`. The two regions must *not* overlap.
          .           ///
          .           /// # Safety
-- line 383 ----------------------------------------
-- line 448 ----------------------------------------
          .                       return;
          .                   }
          .               }
          .           
          .               // Direct swapping, for the cases not going through the block optimization.
          .               // SAFETY: the caller must guarantee that `x` and `y` are valid
          .               // for writes, properly aligned, and non-overlapping.
          .               unsafe {
      6,662 ( 0.00%)          let z = read(x);
          .                   copy_nonoverlapping(y, x, 1);
          .                   write(y, z);
          .               }
          .           }
          .           
          .           #[inline]
          .           #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
          .           const unsafe fn swap_nonoverlapping_bytes(x: *mut u8, y: *mut u8, len: usize) {
-- line 464 ----------------------------------------
-- line 693 ----------------------------------------
          .               let mut tmp = MaybeUninit::<T>::uninit();
          .               // SAFETY: the caller must guarantee that `src` is valid for reads.
          .               // `src` cannot overlap `tmp` because `tmp` was just allocated on
          .               // the stack as a separate allocated object.
          .               //
          .               // Also, since we just wrote a valid value into `tmp`, it is guaranteed
          .               // to be properly initialized.
          .               unsafe {
  4,876,931 ( 0.01%)          copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
 24,234,289 ( 0.06%)          tmp.assume_init()
          .               }
          .           }
          .           
          .           /// Reads the value from `src` without moving it. This leaves the
          .           /// memory in `src` unchanged.
          .           ///
          .           /// Unlike [`read`], `read_unaligned` works with unaligned pointers.
          .           ///
-- line 710 ----------------------------------------
-- line 884 ----------------------------------------
          .                   #[rustc_const_unstable(feature = "const_intrinsic_copy", issue = "80697")]
          .                   fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);
          .               }
          .           
          .               // SAFETY: the caller must guarantee that `dst` is valid for writes.
          .               // `dst` cannot overlap `src` because the caller has mutable access
          .               // to `dst` while `src` is owned by this function.
          .               unsafe {
303,751,187 ( 0.78%)          copy_nonoverlapping(&src as *const T, dst, 1);
          .                   intrinsics::forget(src);
          .               }
          .           }
          .           
          .           /// Overwrites a memory location with the given value without reading or
          .           /// dropping the old value.
          .           ///
          .           /// Unlike [`write()`], the pointer may be unaligned.
-- line 900 ----------------------------------------
-- line 1206 ----------------------------------------
          .               if stride == 1 {
          .                   // `stride == 1` case can be computed more simply through `-p (mod a)`, but doing so
          .                   // inhibits LLVM's ability to select instructions like `lea`. Instead we compute
          .                   //
          .                   //    round_up_to_next_alignment(p, a) - p
          .                   //
          .                   // which distributes operations around the load-bearing, but pessimizing `and` sufficiently
          .                   // for LLVM to be able to utilize the various optimizations it knows about.
     83,475 ( 0.00%)          return wrapping_sub(
    179,902 ( 0.00%)              wrapping_add(p as usize, a_minus_one) & wrapping_sub(0, a),
          .                       p as usize,
          .                   );
          .               }
          .           
          .               let pmoda = p as usize & a_minus_one;
          .               if pmoda == 0 {
          .                   // Already aligned. Yay!
          .                   return 0;
-- line 1223 ----------------------------------------
-- line 1348 ----------------------------------------
          .           /// assert!(std::ptr::eq(
          .           ///     &wrapper as &dyn Trait as *const dyn Trait as *const u8,
          .           ///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
          .           /// ));
          .           /// ```
          .           #[stable(feature = "ptr_eq", since = "1.17.0")]
          .           #[inline]
          .           pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
  9,367,985 ( 0.02%)      a == b
          .           }
          .           
          .           /// Hash a raw pointer.
          .           ///
          .           /// This can be used to hash a `&T` reference (which coerces to `*const T` implicitly)
          .           /// by its address rather than the value it points to
          .           /// (which is what the `Hash for &T` implementation does).
          .           ///
-- line 1364 ----------------------------------------

 24,365,417 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/ptr/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                   

-- line 70 ----------------------------------------
          .           
          .                   impl<'a, T> $name<'a, T> {
          .                       // Helper function for creating a slice from the iterator.
          .                       #[inline(always)]
          .                       fn make_slice(&self) -> &'a [T] {
          .                           // SAFETY: the iterator was created from a slice with pointer
          .                           // `self.ptr` and length `len!(self)`. This guarantees that all
          .                           // the prerequisites for `from_raw_parts` are fulfilled.
    166,630 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
          .                       }
          .           
          .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
          .                       // returning the old start.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
          .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               let old = self.ptr.as_ptr();
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
  2,021,346 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
          .                               old
          .                           }
          .                       }
          .           
          .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
          .                       // returning the new end.
          .                       // Unsafe because the offset must not exceed `self.len()`.
          .                       #[inline(always)]
-- line 101 ----------------------------------------
-- line 102 ----------------------------------------
          .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
          .                           if mem::size_of::<T>() == 0 {
          .                               zst_shrink!(self, offset);
          .                               self.ptr.as_ptr()
          .                           } else {
          .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
          .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
          .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     40,001 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
          .                               self.end
          .                           }
          .                       }
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<T> ExactSizeIterator for $name<'_, T> {
          .                       #[inline(always)]
          .                       fn len(&self) -> usize {
    629,750 ( 0.00%)                  len!(self)
          .                       }
          .           
          .                       #[inline(always)]
          .                       fn is_empty(&self) -> bool {
          .                           is_empty!(self)
          .                       }
          .                   }
          .           
-- line 128 ----------------------------------------
-- line 134 ----------------------------------------
          .                       fn next(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer
          .                           // must be non-null, and slices over non-ZSTs must also have a
          .                           // non-null end pointer. The call to `next_unchecked!` is safe
          .                           // since we check if the iterator is empty first.
          .                           unsafe {
  1,482,661 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
    204,379 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
440,122,325 ( 1.13%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          2 ( 0.00%)                          Some(next_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
          .                       fn size_hint(&self) -> (usize, Option<usize>) {
 14,107,997 ( 0.04%)                  let exact = len!(self);
          .                           (exact, Some(exact))
          .                       }
          .           
          .                       #[inline]
          .                       fn count(self) -> usize {
          .                           len!(self)
          .                       }
          .           
          .                       #[inline]
          .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    127,763 ( 0.00%)                  if n >= len!(self) {
          .                               // This iterator is now empty.
          .                               if mem::size_of::<T>() == 0 {
          .                                   // We have to do it this way as `ptr` may never be 0, but `end`
          .                                   // could be (due to wrapping).
          .                                   self.end = self.ptr.as_ptr();
          .                               } else {
          .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
          .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
          .                       // faster to compile.
          .                       #[inline]
          .                       fn for_each<F>(mut self, mut f: F)
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item),
          .                       {
          .                           while let Some(x) = self.next() {
     35,814 ( 0.00%)                      f(x);
          .                           }
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn all<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
     27,515 ( 0.00%)                  while let Some(x) = self.next() {
    135,879 ( 0.00%)                      if !f(x) {
          .                                   return false;
          .                               }
          .                           }
          .                           true
          .                       }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
         24 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> bool,
          .                       {
  2,701,324 ( 0.01%)                  while let Some(x) = self.next() {
  3,668,619 ( 0.01%)                      if f(x) {
          .                                   return true;
          .                               }
          .                           }
          .                           false
         24 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
          .                       where
          .                           Self: Sized,
          .                           P: FnMut(&Self::Item) -> bool,
          .                       {
    985,332 ( 0.00%)                  while let Some(x) = self.next() {
    863,093 ( 0.00%)                      if predicate(&x) {
      1,998 ( 0.00%)                          return Some(x);
          .                               }
          .                           }
          .                           None
        874 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile.
          .                       #[inline]
          .                       fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
          .                       where
          .                           Self: Sized,
          .                           F: FnMut(Self::Item) -> Option<B>,
          .                       {
    126,254 ( 0.00%)                  while let Some(x) = self.next() {
    944,628 ( 0.00%)                      if let Some(y) = f(x) {
    157,988 ( 0.00%)                          return Some(y);
          .                               }
          .                           }
          .                           None
     26,423 ( 0.00%)              }
          .           
          .                       // We override the default implementation, which uses `try_fold`,
          .                       // because this simple implementation generates less LLVM IR and is
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       #[rustc_inherit_overflow_checks]
          .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           Self: Sized,
          .                           P: FnMut(Self::Item) -> bool,
          .                       {
          .                           let n = len!(self);
          .                           let mut i = 0;
          .                           while let Some(x) = self.next() {
  1,764,575 ( 0.00%)                      if predicate(x) {
          .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
          .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                               i += 1;
          .                           }
          .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
          .                       // faster to compile. Also, the `assume` avoids a bounds check.
          .                       #[inline]
          .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
          .                           P: FnMut(Self::Item) -> bool,
          .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
          .                       {
          .                           let n = len!(self);
          .                           let mut i = n;
    252,656 ( 0.00%)                  while let Some(x) = self.next_back() {
  3,382,525 ( 0.01%)                      i -= 1;
  2,731,707 ( 0.01%)                      if predicate(x) {
          .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
          .                                   // and is only decreasing.
          .                                   unsafe { assume(i < n) };
          .                                   return Some(i);
          .                               }
          .                           }
          .                           None
          .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
          .                           // the returned references is guaranteed to refer to an element
          .                           // of the slice and thus guaranteed to be valid.
          .                           //
          .                           // Also note that the caller also guarantees that we're never
          .                           // called with the same index again, and that no other methods
          .                           // that will access this subslice are called, so it is valid
          .                           // for the returned reference to be mutable in the case of
          .                           // `IterMut`
    603,218 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
          .                       }
          .           
          .                       $($extra)*
          .                   }
          .           
          .                   #[stable(feature = "rust1", since = "1.0.0")]
          .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
          .                       #[inline]
-- line 348 ----------------------------------------
-- line 349 ----------------------------------------
          .                       fn next_back(&mut self) -> Option<$elem> {
          .                           // could be implemented with slices, but this avoids bounds checks
          .           
          .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
          .                           // and slices over non-ZSTs must also have a non-null end pointer.
          .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
          .                           // empty first.
          .                           unsafe {
     69,755 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
          .                               if mem::size_of::<T>() != 0 {
     69,778 ( 0.00%)                          assume(!self.end.is_null());
          .                               }
  7,679,328 ( 0.02%)                      if is_empty!(self) {
          .                                   None
          .                               } else {
          .                                   Some(next_back_unchecked!(self))
          .                               }
          .                           }
          .                       }
          .           
          .                       #[inline]
-- line 369 ----------------------------------------

 55,212,421 ( 0.14%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs
--------------------------------------------------------------------------------
Ir                   

-- line 42 ----------------------------------------
          .           
          .           impl<D: SnapshotVecDelegate> Rollback<UndoLog<D>> for SnapshotVecStorage<D> {
          .               fn reverse(&mut self, undo: UndoLog<D>) {
          .                   self.values.reverse(undo)
          .               }
          .           }
          .           impl<D: SnapshotVecDelegate> Rollback<UndoLog<D>> for Vec<D::Value> {
          .               fn reverse(&mut self, undo: UndoLog<D>) {
  1,296,060 ( 0.00%)          match undo {
          .                       NewElem(i) => {
          .                           self.pop();
    503,559 ( 0.00%)                  assert!(Vec::len(self) == i);
          .                       }
          .           
          .                       SetElem(i, v) => {
    408,119 ( 0.00%)                  self[i] = v;
          .                       }
          .           
          .                       Other(u) => {
          .                           D::reverse(self, u);
          .                       }
          .                   }
          .               }
          .           }
-- line 65 ----------------------------------------
-- line 76 ----------------------------------------
          .           impl<D> VecLike<D> for Vec<D::Value>
          .           where
          .               D: SnapshotVecDelegate,
          .           {
          .               fn push(&mut self, item: D::Value) {
          .                   Vec::push(self, item)
          .               }
          .               fn len(&self) -> usize {
    568,988 ( 0.00%)          Vec::len(self)
          .               }
          .               fn reserve(&mut self, size: usize) {
          .                   Vec::reserve(self, size)
          .               }
          .           }
          .           
          .           impl<D> VecLike<D> for &'_ mut Vec<D::Value>
          .           where
          .               D: SnapshotVecDelegate,
          .           {
          .               fn push(&mut self, item: D::Value) {
          .                   Vec::push(self, item)
          .               }
          .               fn len(&self) -> usize {
  3,065,982 ( 0.01%)          Vec::len(self)
          .               }
          .               fn reserve(&mut self, size: usize) {
          .                   Vec::reserve(self, size)
          .               }
          .           }
          .           
          .           #[allow(type_alias_bounds)]
          .           pub type SnapshotVecStorage<D: SnapshotVecDelegate> =
-- line 107 ----------------------------------------
-- line 191 ----------------------------------------
          .           }
          .           
          .           impl<V: VecLike<D>, D: SnapshotVecDelegate, U> SnapshotVec<D, V, U> {
          .               pub fn len(&self) -> usize {
          .                   self.values.len()
          .               }
          .           
          .               pub fn get(&self, index: usize) -> &D::Value {
186,260,464 ( 0.48%)          &self.values.as_ref()[index]
          .               }
          .           
          .               /// Returns a mutable pointer into the vec; whatever changes you make here cannot be undone
          .               /// automatically, so you should be sure call `record()` with some sort of suitable undo
          .               /// action.
          .               pub fn get_mut(&mut self, index: usize) -> &mut D::Value {
    411,956 ( 0.00%)          &mut self.values.as_mut()[index]
          .               }
          .           
          .               /// Reserve space for new values, just like an ordinary vec.
          .               pub fn reserve(&mut self, additional: usize) {
          .                   // This is not affected by snapshots or anything.
          .                   self.values.reserve(additional);
          .               }
          .           }
-- line 214 ----------------------------------------
-- line 219 ----------------------------------------
          .               }
          .           
          .               pub fn record(&mut self, action: D::Undo) {
          .                   if self.in_snapshot() {
          .                       self.undo_log.push(Other(action));
          .                   }
          .               }
          .           
  6,799,453 ( 0.02%)      pub fn push(&mut self, elem: D::Value) -> usize {
          .                   let len = self.values.len();
          .                   self.values.push(elem);
          .           
    924,447 ( 0.00%)          if self.in_snapshot() {
          .                       self.undo_log.push(NewElem(len));
          .                   }
          .           
          .                   len
  6,265,151 ( 0.02%)      }
          .           
          .               /// Updates the element at the given index. The old value will saved (and perhaps restored) if
          .               /// a snapshot is active.
          .               pub fn set(&mut self, index: usize, new_elem: D::Value) {
          .                   let old_elem = mem::replace(&mut self.values.as_mut()[index], new_elem);
          .                   if self.undo_log.in_snapshot() {
          .                       self.undo_log.push(SetElem(index, old_elem));
          .                   }
          .               }
          .           
          .               /// Updates all elements. Potentially more efficient -- but
          .               /// otherwise equivalent to -- invoking `set` for each element.
          7 ( 0.00%)      pub fn set_all(&mut self, mut new_elems: impl FnMut(usize) -> D::Value) {
          1 ( 0.00%)          if !self.undo_log.in_snapshot() {
          .                       for (index, slot) in self.values.as_mut().iter_mut().enumerate() {
        236 ( 0.00%)                  *slot = new_elems(index);
          .                       }
          .                   } else {
          .                       for i in 0..self.values.len() {
          .                           self.set(i, new_elems(i));
          .                       }
          .                   }
          8 ( 0.00%)      }
          .           
  2,163,901 ( 0.01%)      pub fn update<OP>(&mut self, index: usize, op: OP)
          .               where
          .                   OP: FnOnce(&mut D::Value),
          .                   D::Value: Clone,
          .               {
    259,466 ( 0.00%)          if self.undo_log.in_snapshot() {
    945,768 ( 0.00%)              let old_elem = self.values.as_mut()[index].clone();
      2,388 ( 0.00%)              self.undo_log.push(SetElem(index, old_elem));
          .                   }
    763,920 ( 0.00%)          op(&mut self.values.as_mut()[index]);
  2,075,728 ( 0.01%)      }
          .           }
          .           
          .           impl<D, V, L> SnapshotVec<D, V, L>
          .           where
          .               D: SnapshotVecDelegate,
          .               V: VecLike<D> + Rollback<UndoLog<D>>,
          .               L: Snapshots<UndoLog<D>>,
          .           {
-- line 279 ----------------------------------------

    787,843 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.14.0/src/snapshot_vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                   

-- line 417 ----------------------------------------
          .               /// # #![allow(unused_mut)]
          .               /// let mut vec: Vec<i32> = Vec::new();
          .               /// ```
          .               #[inline]
          .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[must_use]
          .               pub const fn new() -> Self {
 24,308,176 ( 0.06%)          Vec { buf: RawVec::NEW, len: 0 }
      1,240 ( 0.00%)      }
          .           
          .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
          .               ///
          .               /// The vector will be able to hold exactly `capacity` elements without
          .               /// reallocating. If `capacity` is 0, the vector will not allocate.
          .               ///
          .               /// It is important to note that although the returned vector has the
          .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 601 ----------------------------------------
          .               /// vec.push(11);
          .               /// assert_eq!(vec.len(), 11);
          .               /// assert!(vec.capacity() >= 11);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[unstable(feature = "allocator_api", issue = "32838")]
          .               pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  7,898,715 ( 0.02%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
          .               }
          .           
          .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
          .               ///
          .               /// # Safety
          .               ///
          .               /// This is highly unsafe, due to the number of invariants that aren't
          .               /// checked:
-- line 617 ----------------------------------------
-- line 677 ----------------------------------------
          .               ///     // Put everything back together into a Vec
          .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
          .               ///     assert_eq!(rebuilt, [4, 5, 6]);
          .               /// }
          .               /// ```
          .               #[inline]
          .               #[unstable(feature = "allocator_api", issue = "32838")]
          .               pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
    547,972 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
          .               }
          .           
          .               /// Decomposes a `Vec<T>` into its raw components.
          .               ///
          .               /// Returns the raw pointer to the underlying data, the length of
          .               /// the vector (in elements), and the allocated capacity of the
          .               /// data (in elements). These are the same arguments in the same
          .               /// order as the arguments to [`from_raw_parts`].
-- line 693 ----------------------------------------
-- line 778 ----------------------------------------
          .               ///
          .               /// ```
          .               /// let vec: Vec<i32> = Vec::with_capacity(10);
          .               /// assert_eq!(vec.capacity(), 10);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn capacity(&self) -> usize {
  5,395,481 ( 0.01%)          self.buf.capacity()
          .               }
          .           
          .               /// Reserves capacity for at least `additional` more elements to be inserted
          .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
          .               /// frequent reallocations. After calling `reserve`, capacity will be
          .               /// greater than or equal to `self.len() + additional`. Does nothing if
          .               /// capacity is already sufficient.
          .               ///
-- line 794 ----------------------------------------
-- line 801 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1];
          .               /// vec.reserve(10);
          .               /// assert!(vec.capacity() >= 11);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn reserve(&mut self, additional: usize) {
  3,845,999 ( 0.01%)          self.buf.reserve(self.len, additional);
          .               }
          .           
          .               /// Reserves the minimum capacity for exactly `additional` more elements to
          .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
          .               /// capacity will be greater than or equal to `self.len() + additional`.
          .               /// Does nothing if the capacity is already sufficient.
          .               ///
          .               /// Note that the allocator may give the collection more space than it
-- line 817 ----------------------------------------
-- line 829 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1];
          .               /// vec.reserve_exact(10);
          .               /// assert!(vec.capacity() >= 11);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn reserve_exact(&mut self, additional: usize) {
     63,353 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
          .               }
          .           
          .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
          .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
          .               /// frequent reallocations. After calling `try_reserve`, capacity will be
          .               /// greater than or equal to `self.len() + additional`. Does nothing if
          .               /// capacity is already sufficient.
          .               ///
-- line 845 ----------------------------------------
-- line 930 ----------------------------------------
          .               /// assert!(vec.capacity() >= 3);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn shrink_to_fit(&mut self) {
          .                   // The capacity is never less than the length, and there's nothing to do when
          .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
          .                   // by only calling it with a greater capacity.
    266,225 ( 0.00%)          if self.capacity() > self.len {
    114,195 ( 0.00%)              self.buf.shrink_to_fit(self.len);
          .                   }
          .               }
          .           
          .               /// Shrinks the capacity of the vector with a lower bound.
          .               ///
          .               /// The capacity will remain at least as large as both the length
          .               /// and the supplied value.
          .               ///
-- line 947 ----------------------------------------
-- line 990 ----------------------------------------
          .               /// let slice = vec.into_boxed_slice();
          .               /// assert_eq!(slice.into_vec().capacity(), 3);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn into_boxed_slice(mut self) -> Box<[T], A> {
          .                   unsafe {
          .                       self.shrink_to_fit();
     87,442 ( 0.00%)              let me = ManuallyDrop::new(self);
          .                       let buf = ptr::read(&me.buf);
          .                       let len = me.len();
          .                       buf.into_box(len).assume_init()
          .                   }
          .               }
          .           
          .               /// Shortens the vector, keeping the first `len` elements and dropping
          .               /// the rest.
-- line 1006 ----------------------------------------
-- line 1040 ----------------------------------------
          .               /// let mut vec = vec![1, 2, 3];
          .               /// vec.truncate(0);
          .               /// assert_eq!(vec, []);
          .               /// ```
          .               ///
          .               /// [`clear`]: Vec::clear
          .               /// [`drain`]: Vec::drain
          .               #[stable(feature = "rust1", since = "1.0.0")]
  1,305,668 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
          .                   // This is safe because:
          .                   //
          .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
          .                   //   case avoids creating an invalid slice, and
          .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
          .                   //   such that no value will be dropped twice in case `drop_in_place`
          .                   //   were to panic once (if it panics twice, the program aborts).
          .                   unsafe {
          .                       // Note: It's intentional that this is `>` and not `>=`.
          .                       //       Changing it to `>=` has negative performance
          .                       //       implications in some cases. See #78884 for more.
  1,167,051 ( 0.00%)              if len > self.len {
          .                           return;
          .                       }
          .                       let remaining_len = self.len - len;
          .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  1,798,168 ( 0.00%)              self.len = len;
     37,482 ( 0.00%)              ptr::drop_in_place(s);
          .                   }
  1,566,782 ( 0.00%)      }
          .           
          .               /// Extracts a slice containing the entire vector.
          .               ///
          .               /// Equivalent to `&s[..]`.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 1076 ----------------------------------------
-- line 1126 ----------------------------------------
          .               /// ```
          .               ///
          .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
          .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
          .               #[inline]
          .               pub fn as_ptr(&self) -> *const T {
          .                   // We shadow the slice method of the same name to avoid going through
          .                   // `deref`, which creates an intermediate reference.
115,759,697 ( 0.30%)          let ptr = self.buf.ptr();
          .                   unsafe {
          .                       assume(!ptr.is_null());
          .                   }
          .                   ptr
          .               }
          .           
          .               /// Returns an unsafe mutable pointer to the vector's buffer.
          .               ///
-- line 1142 ----------------------------------------
-- line 1162 ----------------------------------------
          .               /// }
          .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
          .               /// ```
          .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
          .               #[inline]
          .               pub fn as_mut_ptr(&mut self) -> *mut T {
          .                   // We shadow the slice method of the same name to avoid going through
          .                   // `deref_mut`, which creates an intermediate reference.
 64,423,342 ( 0.16%)          let ptr = self.buf.ptr();
          .                   unsafe {
          .                       assume(!ptr.is_null());
          .                   }
          .                   ptr
          .               }
          .           
          .               /// Returns a reference to the underlying allocator.
          .               #[unstable(feature = "allocator_api", issue = "32838")]
-- line 1178 ----------------------------------------
-- line 1259 ----------------------------------------
          .               ///
          .               /// Normally, here, one would use [`clear`] instead to correctly drop
          .               /// the contents and thus not leak memory.
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub unsafe fn set_len(&mut self, new_len: usize) {
          .                   debug_assert!(new_len <= self.capacity());
          .           
  8,511,701 ( 0.02%)          self.len = new_len;
    133,456 ( 0.00%)      }
          .           
          .               /// Removes an element from the vector and returns it.
          .               ///
          .               /// The removed element is replaced by the last element of the vector.
          .               ///
          .               /// This does not preserve ordering, but is *O*(1).
          .               /// If you need to preserve the element order, use [`remove`] instead.
          .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
          .                       assert_failed(index, len);
          .                   }
          .                   unsafe {
          .                       // We replace self[index] with the last element. Note that if the
          .                       // bounds check above succeeds there must be a last element (which
          .                       // can be self[index] itself).
          .                       let value = ptr::read(self.as_ptr().add(index));
          .                       let base_ptr = self.as_mut_ptr();
         48 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
          .                       self.set_len(len - 1);
          .                       value
          .                   }
          .               }
          .           
          .               /// Inserts an element at position `index` within the vector, shifting all
          .               /// elements after it to the right.
          .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
          .               /// let mut vec = vec![1, 2, 3];
          .               /// vec.insert(1, 4);
          .               /// assert_eq!(vec, [1, 4, 2, 3]);
          .               /// vec.insert(4, 5);
          .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "rust1", since = "1.0.0")]
     41,524 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
          .                   #[cold]
          .                   #[inline(never)]
          .                   fn assert_failed(index: usize, len: usize) -> ! {
          .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
          .                   }
          .           
      6,946 ( 0.00%)          let len = self.len();
     18,748 ( 0.00%)          if index > len {
          .                       assert_failed(index, len);
          .                   }
          .           
          .                   // space for the new element
     29,654 ( 0.00%)          if len == self.buf.capacity() {
          .                       self.reserve(1);
          .                   }
          .           
          .                   unsafe {
          .                       // infallible
          .                       // The spot to put the new value
          .                       {
          .                           let p = self.as_mut_ptr().add(index);
          .                           // Shift everything over to make space. (Duplicating the
          .                           // `index`th element into two consecutive places.)
     41,439 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
          .                           // Write it in, overwriting the first copy of the `index`th
          .                           // element.
          .                           ptr::write(p, element);
          .                       }
     29,654 ( 0.00%)              self.set_len(len + 1);
          .                   }
     35,592 ( 0.00%)      }
          .           
          .               /// Removes and returns the element at position `index` within the vector,
          .               /// shifting all elements after it to the left.
          .               ///
          .               /// Note: Because this shifts over the remaining elements, it has a
          .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
          .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
          .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1395 ----------------------------------------
          .               pub fn remove(&mut self, index: usize) -> T {
          .                   #[cold]
          .                   #[inline(never)]
          .                   #[track_caller]
          .                   fn assert_failed(index: usize, len: usize) -> ! {
          .                       panic!("removal index (is {}) should be < len (is {})", index, len);
          .                   }
          .           
      2,191 ( 0.00%)          let len = self.len();
      8,511 ( 0.00%)          if index >= len {
          .                       assert_failed(index, len);
          .                   }
          .                   unsafe {
          .                       // infallible
          .                       let ret;
          .                       {
          .                           // the place we are taking from.
          .                           let ptr = self.as_mut_ptr().add(index);
          .                           // copy it out, unsafely having a copy of the value on
          .                           // the stack and in the vector at the same time.
      4,048 ( 0.00%)                  ret = ptr::read(ptr);
          .           
          .                           // Shift everything down to fill in that spot.
      4,667 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
          .                       }
      4,714 ( 0.00%)              self.set_len(len - 1);
          .                       ret
          .                   }
          .               }
          .           
          .               /// Retains only the elements specified by the predicate.
          .               ///
          .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
          .               /// This method operates in place, visiting each element exactly once in the
-- line 1428 ----------------------------------------
-- line 1442 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1, 2, 3, 4, 5];
          .               /// let keep = [false, true, true, false, true];
          .               /// let mut iter = keep.iter();
          .               /// vec.retain(|_| *iter.next().unwrap());
          .               /// assert_eq!(vec, [2, 3, 5]);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
  3,163,227 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
          .               where
          .                   F: FnMut(&T) -> bool,
          .               {
     98,037 ( 0.00%)          self.retain_mut(|elem| f(elem));
  3,099,584 ( 0.01%)      }
          .           
          .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
          .               ///
          .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
          .               /// This method operates in place, visiting each element exactly once in the
          .               /// original order, and preserves the order of the retained elements.
          .               ///
          .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
          .               /// });
          .               /// assert_eq!(vec, [2, 3, 4]);
          .               /// ```
          .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
          .               pub fn retain_mut<F>(&mut self, mut f: F)
          .               where
          .                   F: FnMut(&mut T) -> bool,
          .               {
    407,328 ( 0.00%)          let original_len = self.len();
          .                   // Avoid double drop if the drop guard is not executed,
          .                   // since we may make some holes during the process.
          .                   unsafe { self.set_len(0) };
          .           
          .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
          .                   //      |<-              processed len   ->| ^- next to check
          .                   //                  |<-  deleted cnt     ->|
          .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
          .                       v: &'a mut Vec<T, A>,
          .                       processed_len: usize,
          .                       deleted_cnt: usize,
          .                       original_len: usize,
          .                   }
          .           
          .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
          .                       fn drop(&mut self) {
    373,780 ( 0.00%)                  if self.deleted_cnt > 0 {
          .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
          .                               unsafe {
          .                                   ptr::copy(
          .                                       self.v.as_ptr().add(self.processed_len),
    316,484 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
          .                                       self.original_len - self.processed_len,
          .                                   );
          .                               }
          .                           }
          .                           // SAFETY: After filling holes, all items are in contiguous memory.
          .                           unsafe {
          2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
          .                           }
          .                       }
          .                   }
          .           
          .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
          .           
          .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
          .                       original_len: usize,
          .                       f: &mut F,
          .                       g: &mut BackshiftOnDrop<'_, T, A>,
          .                   ) where
          .                       F: FnMut(&mut T) -> bool,
          .                   {
  4,527,310 ( 0.01%)              while g.processed_len != original_len {
          .                           // SAFETY: Unchecked element must be valid.
          .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
  1,258,904 ( 0.00%)                  if !f(cur) {
          .                               // Advance early to avoid double drop if `drop_in_place` panicked.
    252,454 ( 0.00%)                      g.processed_len += 1;
    127,142 ( 0.00%)                      g.deleted_cnt += 1;
          .                               // SAFETY: We never touch this element again after dropped.
      3,503 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
          .                               // We already advanced the counter.
          .                               if DELETED {
          .                                   continue;
          .                               } else {
          .                                   break;
          .                               }
          .                           }
          .                           if DELETED {
          .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
          .                               // We use copy for move, and never touch this element again.
          .                               unsafe {
    215,886 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
          .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
          .                               }
          .                           }
    204,430 ( 0.00%)                  g.processed_len += 1;
          .                       }
          .                   }
          .           
          .                   // Stage 1: Nothing was deleted.
          .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
          .           
          .                   // Stage 2: Some elements were deleted.
          .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
          .               ///
          .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
          .               ///
          .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
          .               /// ```
          .               #[stable(feature = "dedup_by", since = "1.16.0")]
     51,576 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
          .               where
          .                   F: FnMut(&mut T, &mut T) -> bool,
          .               {
     17,841 ( 0.00%)          let len = self.len();
     44,064 ( 0.00%)          if len <= 1 {
          .                       return;
          .                   }
          .           
          .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
          .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
          .                       /* Offset of the element we want to check if it is duplicate */
          .                       read: usize,
          .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
          .                   let ptr = gap.vec.as_mut_ptr();
          .           
          .                   /* Drop items while going through Vec, it should be more efficient than
          .                    * doing slice partition_dedup + truncate */
          .           
          .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
          .                    * are always in-bounds and read_ptr never aliases prev_ptr */
          .                   unsafe {
     84,641 ( 0.00%)              while gap.read < len {
          .                           let read_ptr = ptr.add(gap.read);
          .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
          .           
      6,585 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
          .                               // Increase `gap.read` now since the drop may panic.
          .                               gap.read += 1;
          .                               /* We have found duplicate, drop it in-place */
          .                               ptr::drop_in_place(read_ptr);
          .                           } else {
          .                               let write_ptr = ptr.add(gap.write);
          .           
          .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
          .                                * have to use `copy` or conditional `copy_nonoverlapping`.
          .                                * Looks like the first option is faster. */
          .                               ptr::copy(read_ptr, write_ptr, 1);
          .           
          .                               /* We have filled that place, so go further */
     46,939 ( 0.00%)                      gap.write += 1;
          .                               gap.read += 1;
          .                           }
          .                       }
          .           
          .                       /* Technically we could let `gap` clean up with its Drop, but
          .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
          .                        * the codegen, so we just do it manually */
          .                       gap.vec.set_len(gap.write);
          .                       mem::forget(gap);
          .                   }
     58,944 ( 0.00%)      }
          .           
          .               /// Appends an element to the back of a collection.
          .               ///
          .               /// # Panics
          .               ///
          .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
          .               ///
          .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1, 2];
          .               /// vec.push(3);
          .               /// assert_eq!(vec, [1, 2, 3]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
      4,890 ( 0.00%)      pub fn push(&mut self, value: T) {
          .                   // This will panic or abort if we would allocate > isize::MAX bytes
          .                   // or if the length increment would overflow for zero-sized types.
 31,252,622 ( 0.08%)          if self.len == self.buf.capacity() {
  2,822,801 ( 0.01%)              self.buf.reserve_for_push(self.len);
          .                   }
          .                   unsafe {
  1,310,830 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
          .                       ptr::write(end, value);
 46,790,331 ( 0.12%)              self.len += 1;
          .                   }
      3,912 ( 0.00%)      }
          .           
          .               /// Removes the last element from a vector and returns it, or [`None`] if it
          .               /// is empty.
          .               ///
          .               /// If you'd like to pop the first element, consider using
          .               /// [`VecDeque::pop_front`] instead.
          .               ///
          .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
          .               /// ```
          .               /// let mut vec = vec![1, 2, 3];
          .               /// assert_eq!(vec.pop(), Some(3));
          .               /// assert_eq!(vec, [1, 2]);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn pop(&mut self) -> Option<T> {
 11,066,849 ( 0.03%)          if self.len == 0 {
      1,336 ( 0.00%)              None
          .                   } else {
          .                       unsafe {
  7,559,114 ( 0.02%)                  self.len -= 1;
  2,100,476 ( 0.01%)                  Some(ptr::read(self.as_ptr().add(self.len())))
          .                       }
          .                   }
          .               }
          .           
          .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
          .               ///
          .               /// # Panics
          .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
          .               /// let mut vec2 = vec![4, 5, 6];
          .               /// vec.append(&mut vec2);
          .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
          .               /// assert_eq!(vec2, []);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[stable(feature = "append", since = "1.4.0")]
      3,416 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
          .                   unsafe {
          .                       self.append_elements(other.as_slice() as _);
          .                       other.set_len(0);
          .                   }
      2,928 ( 0.00%)      }
          .           
          .               /// Appends elements to `Self` from other buffer.
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               unsafe fn append_elements(&mut self, other: *const [T]) {
          .                   let count = unsafe { (*other).len() };
          .                   self.reserve(count);
    774,146 ( 0.00%)          let len = self.len();
      1,360 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  6,344,477 ( 0.02%)          self.len += count;
          .               }
          .           
          .               /// Creates a draining iterator that removes the specified range in the vector
          .               /// and yields the removed items.
          .               ///
          .               /// When the iterator **is** dropped, all elements in the range are removed
          .               /// from the vector, even if the iterator was not fully consumed. If the
          .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
-- line 1807 ----------------------------------------
-- line 1834 ----------------------------------------
          .                   // When the Drain is first created, it shortens the length of
          .                   // the source vector to make sure no uninitialized or moved-from elements
          .                   // are accessible at all if the Drain's destructor never gets to run.
          .                   //
          .                   // Drain will ptr::read out the values to remove.
          .                   // When finished, remaining tail of the vec is copied back to cover
          .                   // the hole, and the vector length is restored to the new length.
          .                   //
    209,532 ( 0.00%)          let len = self.len();
          .                   let Range { start, end } = slice::range(range, ..len);
          .           
          .                   unsafe {
          .                       // set self.vec length's to start, to be safe in case Drain is leaked
          .                       self.set_len(start);
          .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
          .                       // whole Drain iterator (like &mut T).
     10,471 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    191,020 ( 0.00%)              Drain {
          .                           tail_start: end,
      7,018 ( 0.00%)                  tail_len: len - end,
          .                           iter: range_slice.iter(),
          .                           vec: NonNull::from(self),
          .                       }
          .                   }
          .               }
          .           
          .               /// Clears the vector, removing all values.
          .               ///
-- line 1861 ----------------------------------------
-- line 1869 ----------------------------------------
          .               ///
          .               /// v.clear();
          .               ///
          .               /// assert!(v.is_empty());
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn clear(&mut self) {
  2,337,335 ( 0.01%)          self.truncate(0)
          .               }
          .           
          .               /// Returns the number of elements in the vector, also referred to
          .               /// as its 'length'.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 1885 ----------------------------------------
-- line 1900 ----------------------------------------
          .               /// let mut v = Vec::new();
          .               /// assert!(v.is_empty());
          .               ///
          .               /// v.push(1);
          .               /// assert!(!v.is_empty());
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn is_empty(&self) -> bool {
  3,767,278 ( 0.01%)          self.len() == 0
          .               }
          .           
          .               /// Splits the collection into two at the given index.
          .               ///
          .               /// Returns a newly allocated vector containing the elements in the range
          .               /// `[at, len)`. After the call, the original vector will be left containing
          .               /// the elements `[0, at)` with its previous capacity unchanged.
          .               ///
-- line 1916 ----------------------------------------
-- line 1935 ----------------------------------------
          .                   A: Clone,
          .               {
          .                   #[cold]
          .                   #[inline(never)]
          .                   fn assert_failed(at: usize, len: usize) -> ! {
          .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
          .                   }
          .           
     11,295 ( 0.00%)          if at > self.len() {
          .                       assert_failed(at, self.len());
          .                   }
          .           
      9,177 ( 0.00%)          if at == 0 {
          .                       // the new vector can take over the original buffer and avoid the copy
          .                       return mem::replace(
          .                           self,
          .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
          .                       );
          .                   }
          .           
          .                   let other_len = self.len - at;
-- line 1955 ----------------------------------------
-- line 1988 ----------------------------------------
          .               ///
          .               /// let mut vec = vec![];
          .               /// let mut p = 1;
          .               /// vec.resize_with(4, || { p *= 2; p });
          .               /// assert_eq!(vec, [2, 4, 8, 16]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
    269,250 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
          .               where
          .                   F: FnMut() -> T,
          .               {
     36,936 ( 0.00%)          let len = self.len();
     73,872 ( 0.00%)          if new_len > len {
    212,217 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
          .                   } else {
          .                       self.truncate(new_len);
          .                   }
    232,314 ( 0.00%)      }
          .           
          .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
          .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
          .               /// `'a`. If the type has only static references, or none at all, then this
          .               /// may be chosen to be `'static`.
          .               ///
          .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
          .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2070 ----------------------------------------
          .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
          .               #[inline]
          .               pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
          .                   // Note:
          .                   // This method is not implemented in terms of `split_at_spare_mut`,
          .                   // to prevent invalidation of pointers to the buffer.
          .                   unsafe {
          .                       slice::from_raw_parts_mut(
          2 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
        148 ( 0.00%)                  self.buf.capacity() - self.len,
          .                       )
          .                   }
          .               }
          .           
          .               /// Returns vector content as a slice of `T`, along with the remaining spare
          .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
          .               ///
          .               /// The returned spare capacity slice can be used to fill the vector with data
-- line 2087 ----------------------------------------
-- line 2189 ----------------------------------------
          .               /// assert_eq!(vec, ["hello", "world", "world"]);
          .               ///
          .               /// let mut vec = vec![1, 2, 3, 4];
          .               /// vec.resize(2, 0);
          .               /// assert_eq!(vec, [1, 2]);
          .               /// ```
          .               #[cfg(not(no_global_oom_handling))]
          .               #[stable(feature = "vec_resize", since = "1.5.0")]
    274,520 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
     27,452 ( 0.00%)          let len = self.len();
          .           
     82,356 ( 0.00%)          if new_len > len {
     38,427 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
          .                   } else {
          .                       self.truncate(new_len);
          .                   }
     45,844 ( 0.00%)      }
          .           
          .               /// Clones and appends all elements in a slice to the `Vec`.
          .               ///
          .               /// Iterates over the slice `other`, clones each element, and then appends
          .               /// it to this `Vec`. The `other` slice is traversed in-order.
          .               ///
          .               /// Note that this function is same as [`extend`] except that it is
          .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2271 ----------------------------------------
          .           trait ExtendWith<T> {
          .               fn next(&mut self) -> T;
          .               fn last(self) -> T;
          .           }
          .           
          .           struct ExtendElement<T>(T);
          .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
          .               fn next(&mut self) -> T {
     12,825 ( 0.00%)          self.0.clone()
          .               }
          .               fn last(self) -> T {
          .                   self.0
          .               }
          .           }
          .           
          .           struct ExtendFunc<F>(F);
          .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
          .               fn last(mut self) -> T {
          .                   (self.0)()
          .               }
          .           }
          .           
          .           impl<T, A: Allocator> Vec<T, A> {
          .               #[cfg(not(no_global_oom_handling))]
          .               /// Extend the vector by `n` values, using the given generator.
  2,424,315 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
          .                   self.reserve(n);
          .           
          .                   unsafe {
     42,241 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
          .                       // Use SetLenOnDrop to work around bug where compiler
          .                       // might not realize the store through `ptr` through self.set_len()
          .                       // don't alias.
          .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
          .           
          .                       // Write all elements except the last one
          .                       for _ in 1..n {
          .                           ptr::write(ptr, value.next());
          .                           ptr = ptr.offset(1);
          .                           // Increment the length in every step in case next() panics
          .                           local_len.increment_len(1);
          .                       }
          .           
  1,937,538 ( 0.00%)              if n > 0 {
          .                           // We can write the last element directly without cloning needlessly
          .                           ptr::write(ptr, value.last());
          .                           local_len.increment_len(1);
          .                       }
          .           
          .                       // len set by scope guard
          .                   }
  1,902,357 ( 0.00%)      }
          .           }
          .           
          .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
          .               /// Removes consecutive repeated elements in the vector according to the
          .               /// [`PartialEq`] trait implementation.
          .               ///
          .               /// If the vector is sorted, this removes all duplicates.
          .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
          .               ///
          .               /// vec.dedup();
          .               ///
          .               /// assert_eq!(vec, [1, 2, 3, 2]);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[inline]
          .               pub fn dedup(&mut self) {
      7,372 ( 0.00%)          self.dedup_by(|a, b| a == b)
          .               }
          .           }
          .           
          .           ////////////////////////////////////////////////////////////////////////////////
          .           // Internal methods and functions
          .           ////////////////////////////////////////////////////////////////////////////////
          .           
          .           #[doc(hidden)]
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
    532,985 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  2,766,633 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
    629,095 ( 0.00%)  }
          .           
          .           #[doc(hidden)]
          .           #[cfg(not(no_global_oom_handling))]
          .           #[unstable(feature = "allocator_api", issue = "32838")]
          .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
          .               <T as SpecFromElem>::from_elem(elem, n, alloc)
          .           }
          .           
-- line 2367 ----------------------------------------
-- line 2424 ----------------------------------------
          .           // Common trait implementations for Vec
          .           ////////////////////////////////////////////////////////////////////////////////
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
          .               type Target = [T];
          .           
          .               fn deref(&self) -> &[T] {
153,285,471 ( 0.39%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
        420 ( 0.00%)      }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
          .               fn deref_mut(&mut self) -> &mut [T] {
 73,273,210 ( 0.19%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           trait SpecCloneFrom {
          .               fn clone_from(this: &mut Self, other: &Self);
          .           }
          .           
-- line 2447 ----------------------------------------
-- line 2468 ----------------------------------------
          .                   this.extend_from_slice(other);
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
          .               #[cfg(not(test))]
  2,036,230 ( 0.01%)      fn clone(&self) -> Self {
          .                   let alloc = self.allocator().clone();
          2 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  2,464,151 ( 0.01%)      }
          .           
          .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
          .               // required for this method definition, is not available. Instead use the
          .               // `slice::to_vec`  function which is only available with cfg(test)
          .               // NB see the slice::hack module in slice.rs for more information
          .               #[cfg(test)]
          .               fn clone(&self) -> Self {
          .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2518 ----------------------------------------
          .               message = "vector indices are of type `usize` or ranges of `usize`",
          .               label = "vector indices are of type `usize` or ranges of `usize`"
          .           )]
          .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
          .               type Output = I::Output;
          .           
          .               #[inline]
          .               fn index(&self, index: I) -> &Self::Output {
  1,609,341 ( 0.00%)          Index::index(&**self, index)
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_on_unimplemented(
          .               message = "vector indices are of type `usize` or ranges of `usize`",
          .               label = "vector indices are of type `usize` or ranges of `usize`"
          .           )]
          .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
          .               #[inline]
          .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
      3,556 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T> FromIterator<T> for Vec<T> {
          .               #[inline]
          .               fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
 11,641,950 ( 0.03%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
          .               type Item = T;
          .               type IntoIter = IntoIter<T, A>;
          .           
-- line 2555 ----------------------------------------
-- line 2564 ----------------------------------------
          .               /// for s in v.into_iter() {
          .               ///     // s has type String, not &String
          .               ///     println!("{}", s);
          .               /// }
          .               /// ```
          .               #[inline]
          .               fn into_iter(self) -> IntoIter<T, A> {
          .                   unsafe {
  4,354,928 ( 0.01%)              let mut me = ManuallyDrop::new(self);
          .                       let alloc = ptr::read(me.allocator());
          .                       let begin = me.as_mut_ptr();
          .                       let end = if mem::size_of::<T>() == 0 {
          .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
          .                       } else {
          .                           begin.add(me.len()) as *const T
          .                       };
          .                       let cap = me.buf.capacity();
  1,500,370 ( 0.00%)              IntoIter {
          .                           buf: NonNull::new_unchecked(begin),
          .                           phantom: PhantomData,
          .                           cap,
          .                           alloc,
          .                           ptr: begin,
          .                           end,
          .                       }
          .                   }
-- line 2589 ----------------------------------------
-- line 2591 ----------------------------------------
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
          .               type Item = &'a T;
          .               type IntoIter = slice::Iter<'a, T>;
          .           
          .               fn into_iter(self) -> slice::Iter<'a, T> {
        145 ( 0.00%)          self.iter()
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
          .               type Item = &'a mut T;
          .               type IntoIter = slice::IterMut<'a, T>;
          .           
          .               fn into_iter(self) -> slice::IterMut<'a, T> {
      1,206 ( 0.00%)          self.iter_mut()
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
          .               #[inline]
     17,224 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  4,931,076 ( 0.01%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
     17,224 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn extend_one(&mut self, item: T) {
         32 ( 0.00%)          self.push(item);
          .               }
          .           
          .               #[inline]
          .               fn extend_reserve(&mut self, additional: usize) {
          .                   self.reserve(additional);
          .               }
          .           }
          .           
-- line 2631 ----------------------------------------
-- line 2636 ----------------------------------------
          .               fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
          .                   // This is the case for a general iterator.
          .                   //
          .                   // This function should be the moral equivalent of:
          .                   //
          .                   //      for item in iterator {
          .                   //          self.push(item);
          .                   //      }
    728,216 ( 0.00%)          while let Some(element) = iterator.next() {
    253,471 ( 0.00%)              let len = self.len();
  3,048,758 ( 0.01%)              if len == self.capacity() {
      4,650 ( 0.00%)                  let (lower, _) = iterator.size_hint();
          .                           self.reserve(lower.saturating_add(1));
          .                       }
          .                       unsafe {
          .                           ptr::write(self.as_mut_ptr().add(len), element);
          .                           // Since next() executes user code which can panic we have to bump the length
          .                           // after each step.
          .                           // NB can't overflow since we would have had to alloc the address space
  2,183,044 ( 0.01%)                  self.set_len(len + 1);
          .                       }
          .                   }
     24,978 ( 0.00%)      }
          .           
          .               /// Creates a splicing iterator that replaces the specified range in the vector
          .               /// with the given `replace_with` iterator and yields the removed items.
          .               /// `replace_with` does not need to be the same length as `range`.
          .               ///
          .               /// `range` is removed even if the iterator is not consumed until the end.
          .               ///
          .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
          .               #[cfg(not(no_global_oom_handling))]
          .               #[inline]
          .               #[stable(feature = "vec_splice", since = "1.21.0")]
          .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
          .               where
          .                   R: RangeBounds<usize>,
          .                   I: IntoIterator<Item = T>,
          .               {
     38,015 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
          .               }
          .           
          .               /// Creates an iterator which uses a closure to determine if an element should be removed.
          .               ///
          .               /// If the closure returns true, then the element is removed and yielded.
          .               /// If the closure returns false, the element will remain in the vector and will not be yielded
          .               /// by the iterator.
          .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
          .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
          .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
          .               /// ```
          .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
          .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
          .               where
          .                   F: FnMut(&mut T) -> bool,
          .               {
     13,074 ( 0.00%)          let old_len = self.len();
          .           
          .                   // Guard against us getting leaked (leak amplification)
          .                   unsafe {
          .                       self.set_len(0);
          .                   }
          .           
     43,632 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
          .               }
          .           }
          .           
          .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
          .           ///
          .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
          .           /// append the entire slice at once.
          .           ///
          .           /// [`copy_from_slice`]: slice::copy_from_slice
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "extend_ref", since = "1.2.0")]
          .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
     82,896 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
          .                   self.spec_extend(iter.into_iter())
     62,172 ( 0.00%)      }
          .           
          .               #[inline]
          .               fn extend_one(&mut self, &item: &'a T) {
          .                   self.push(item);
          .               }
          .           
          .               #[inline]
          .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
          .               #[inline]
          .               fn cmp(&self, other: &Self) -> Ordering {
          .                   Ord::cmp(&**self, &**other)
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  5,441,360 ( 0.01%)      fn drop(&mut self) {
          .                   unsafe {
          .                       // use drop for [T]
          .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
          .                       // could avoid questions of validity in certain cases
  2,472,079 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
          .                   }
          .                   // RawVec handles deallocation
  6,415,852 ( 0.02%)      }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
          .           impl<T> const Default for Vec<T> {
          .               /// Creates an empty `Vec<T>`.
          .               fn default() -> Vec<T> {
          .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
          .               /// newly-allocated buffer with exactly the right capacity.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
          .               /// ```
          .               fn from(v: Vec<T, A>) -> Self {
          4 ( 0.00%)          v.into_boxed_slice()
          .               }
          .           }
          .           
          .           #[cfg(not(no_global_oom_handling))]
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl From<&str> for Vec<u8> {
          .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
          .               ///
-- line 2992 ----------------------------------------

 39,176,091 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs
--------------------------------------------------------------------------------
Ir                  

-- line 91 ----------------------------------------
         .                       assume(!ptr.is_null());
         .           
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           (ptr as *const u8).wrapping_add(slice.len()) as *const T
         .                       } else {
         .                           ptr.add(slice.len())
         .                       };
         .           
35,918,918 ( 0.09%)              Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
         .                   }
         .               }
         .           
         .               /// Views the underlying data as a subslice of the original data.
         .               ///
         .               /// This has the same lifetime as the original slice, and so the
         .               /// iterator can continue to be used while this exists.
         .               ///
-- line 107 ----------------------------------------
-- line 122 ----------------------------------------
         .               /// // Next, we move to the second element of the slice:
         .               /// iter.next();
         .               /// // Now `as_slice` returns "[2, 3]":
         .               /// println!("{:?}", iter.as_slice());
         .               /// ```
         .               #[must_use]
         .               #[stable(feature = "iter_to_slice", since = "1.4.0")]
         .               pub fn as_slice(&self) -> &'a [T] {
   125,648 ( 0.00%)          self.make_slice()
         .               }
         .           }
         .           
         .           iterator! {struct Iter -> *const T, &'a T, const, {/* no mut */}, {
         .               fn is_sorted_by<F>(self, mut compare: F) -> bool
         .               where
         .                   Self: Sized,
         .                   F: FnMut(&Self::Item, &Self::Item) -> Option<Ordering>,
-- line 138 ----------------------------------------
-- line 141 ----------------------------------------
         .                       compare(&&w[0], &&w[1]).map(|o| o != Ordering::Greater).unwrap_or(false)
         .                   })
         .               }
         .           }}
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T> Clone for Iter<'_, T> {
         .               fn clone(&self) -> Self {
   320,910 ( 0.00%)          Iter { ptr: self.ptr, end: self.end, _marker: self._marker }
         .               }
         .           }
         .           
         .           #[stable(feature = "slice_iter_as_ref", since = "1.13.0")]
         .           impl<T> AsRef<[T]> for Iter<'_, T> {
         .               fn as_ref(&self) -> &[T] {
         .                   self.as_slice()
         .               }
-- line 157 ----------------------------------------
-- line 226 ----------------------------------------
         .                       assume(!ptr.is_null());
         .           
         .                       let end = if mem::size_of::<T>() == 0 {
         .                           (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
         .                       } else {
         .                           ptr.add(slice.len())
         .                       };
         .           
    38,607 ( 0.00%)              Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
         .                   }
         .               }
         .           
         .               /// Views the underlying data as a subslice of the original data.
         .               ///
         .               /// To avoid creating `&mut` references that alias, this is forced
         .               /// to consume the iterator.
         .               ///
-- line 242 ----------------------------------------
-- line 1711 ----------------------------------------
         .               v: &'a [T],
         .               rem: &'a [T],
         .               chunk_size: usize,
         .           }
         .           
         .           impl<'a, T> ChunksExact<'a, T> {
         .               #[inline]
         .               pub(super) fn new(slice: &'a [T], chunk_size: usize) -> Self {
        58 ( 0.00%)          let rem = slice.len() % chunk_size;
        87 ( 0.00%)          let fst_len = slice.len() - rem;
         .                   // SAFETY: 0 <= fst_len <= slice.len() by construction above
         .                   let (fst, snd) = unsafe { slice.split_at_unchecked(fst_len) };
         .                   Self { v: fst, rem: snd, chunk_size }
         .               }
         .           
         .               /// Returns the remainder of the original slice that is not going to be
         .               /// returned by the iterator. The returned slice has at most `chunk_size-1`
         .               /// elements.
-- line 1728 ----------------------------------------
-- line 1742 ----------------------------------------
         .           }
         .           
         .           #[stable(feature = "chunks_exact", since = "1.31.0")]
         .           impl<'a, T> Iterator for ChunksExact<'a, T> {
         .               type Item = &'a [T];
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<&'a [T]> {
    14,476 ( 0.00%)          if self.v.len() < self.chunk_size {
         .                       None
         .                   } else {
         .                       let (fst, snd) = self.v.split_at(self.chunk_size);
         .                       self.v = snd;
         .                       Some(fst)
         .                   }
         .               }
         .           
-- line 1758 ----------------------------------------
-- line 2024 ----------------------------------------
         .               num: usize,
         .               marker: PhantomData<&'a [T; N]>,
         .           }
         .           
         .           impl<'a, T: 'a, const N: usize> ArrayWindows<'a, T, N> {
         .               #[inline]
         .               pub(super) fn new(slice: &'a [T]) -> Self {
         .                   let num_windows = slice.len().saturating_sub(N - 1);
        25 ( 0.00%)          Self { slice_head: slice.as_ptr(), num: num_windows, marker: PhantomData }
         .               }
         .           }
         .           
         .           #[unstable(feature = "array_windows", issue = "75027")]
         .           impl<'a, T, const N: usize> Iterator for ArrayWindows<'a, T, N> {
         .               type Item = &'a [T; N];
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<Self::Item> {
   141,398 ( 0.00%)          if self.num == 0 {
         .                       return None;
         .                   }
         .                   // SAFETY:
         .                   // This is safe because it's indexing into a slice guaranteed to be length > N.
         .                   let ret = unsafe { &*self.slice_head.cast::<[T; N]>() };
         .                   // SAFETY: Guaranteed that there are at least 1 item remaining otherwise
         .                   // earlier branch would've been hit
         .                   self.slice_head = unsafe { self.slice_head.add(1) };
-- line 2050 ----------------------------------------

10,427,928 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                  

-- line 118 ----------------------------------------
         .               stability: InternedSet<'tcx, attr::Stability>,
         .           
         .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
         .               const_stability: InternedSet<'tcx, attr::ConstStability>,
         .           }
         .           
         .           impl<'tcx> CtxtInterners<'tcx> {
         .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
        17 ( 0.00%)          CtxtInterners {
         .                       arena,
         .                       type_: Default::default(),
         .                       type_list: Default::default(),
         .                       substs: Default::default(),
         .                       region: Default::default(),
         .                       poly_existential_predicates: Default::default(),
         .                       canonical_var_infos: Default::default(),
         .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .                       stability: Default::default(),
         .                       const_stability: Default::default(),
         .                   }
         .               }
         .           
         .               /// Interns a type.
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline(never)]
20,810,640 ( 0.05%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
         .                   self.type_
13,006,650 ( 0.03%)              .intern(kind, |kind| {
   549,000 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
         .           
         .                           let ty_struct = TyS {
 1,098,000 ( 0.00%)                      kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(ty_struct))
         .                       })
         .                       .0
23,411,970 ( 0.06%)      }
         .           
         .               #[inline(never)]
 4,637,232 ( 0.01%)      fn intern_predicate(
         .                   &self,
         .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> &'tcx PredicateInner<'tcx> {
         .                   self.predicate
 4,057,578 ( 0.01%)              .intern(kind, |kind| {
 1,049,310 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
         .           
         .                           let predicate_struct = PredicateInner {
         .                               kind,
         .                               flags: flags.flags,
         .                               outer_exclusive_binder: flags.outer_exclusive_binder,
         .                           };
         .           
         .                           Interned(self.arena.alloc(predicate_struct))
         .                       })
         .                       .0
 5,216,886 ( 0.01%)      }
         .           }
         .           
         .           pub struct CommonTypes<'tcx> {
         .               pub unit: Ty<'tcx>,
         .               pub bool: Ty<'tcx>,
         .               pub char: Ty<'tcx>,
         .               pub isize: Ty<'tcx>,
         .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
         .           /// safely used as a key in the maps of a TypeckResults. For that to be
         .           /// the case, the HirId must have the same `owner` as all the other IDs in
         .           /// this table (signified by `hir_owner`). Otherwise the HirId
         .           /// would be in a different frame of reference and using its `local_id`
         .           /// would result in lookup errors, or worse, in silently wrong data being
         .           /// stored/returned.
         .           #[inline]
         .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
 1,774,713 ( 0.00%)      if hir_id.owner != hir_owner {
         .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
         .               }
         .           }
         .           
         .           #[cold]
         .           #[inline(never)]
         .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
         .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
         .           }
         .           
         .           impl<'a, V> LocalTableInContext<'a, V> {
         .               pub fn contains_key(&self, id: hir::HirId) -> bool {
         .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.data.contains_key(&id.local_id)
         .               }
         .           
 1,363,563 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   272,391 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   272,391 ( 0.00%)          self.data.get(&id.local_id)
 1,093,760 ( 0.00%)      }
         .           
         .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
         .                   self.data.iter()
         .               }
         .           }
         .           
         .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
         .               type Output = V;
         .           
    15,528 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
         .                   self.get(key).expect("LocalTableInContext: key not found")
    10,352 ( 0.00%)      }
         .           }
         .           
         .           pub struct LocalTableInContextMut<'a, V> {
         .               hir_owner: LocalDefId,
         .               data: &'a mut ItemLocalMap<V>,
         .           }
         .           
         .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
         .               pub treat_byte_string_as_slice: ItemLocalSet,
         .           
         .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
         .               /// on closure size.
         .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
         .           }
         .           
         .           impl<'tcx> TypeckResults<'tcx> {
    50,346 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   595,761 ( 0.00%)          TypeckResults {
         .                       hir_owner,
         .                       type_dependent_defs: Default::default(),
         .                       field_indices: Default::default(),
         .                       user_provided_types: Default::default(),
         .                       user_provided_sigs: Default::default(),
         .                       node_types: Default::default(),
         .                       node_substs: Default::default(),
         .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
         .                       tainted_by_errors: None,
         .                       concrete_opaque_types: Default::default(),
         .                       closure_min_captures: Default::default(),
         .                       closure_fake_reads: Default::default(),
         .                       generator_interior_types: ty::Binder::dummy(Default::default()),
         .                       treat_byte_string_as_slice: Default::default(),
         .                       closure_size_eval: Default::default(),
         .                   }
    50,346 ( 0.00%)      }
         .           
         .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   308,136 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   205,424 ( 0.00%)          match *qpath {
   468,498 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
         .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
         .                           .type_dependent_def(id)
   147,774 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
         .                   }
   513,560 ( 0.00%)      }
         .           
     2,488 ( 0.00%)      pub fn type_dependent_defs(
         .                   &self,
         .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
    16,697 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
     2,488 ( 0.00%)      }
         .           
    33,993 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    70,304 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    67,986 ( 0.00%)      }
         .           
    46,728 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
         .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    46,728 ( 0.00%)      }
         .           
   111,665 ( 0.00%)      pub fn type_dependent_defs_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   111,665 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   111,665 ( 0.00%)      }
         .           
         .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
    21,870 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
     4,317 ( 0.00%)      }
         .           
         .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    25,578 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
    12,789 ( 0.00%)      }
         .           
         .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    57,034 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    28,517 ( 0.00%)      }
         .           
         .               pub fn user_provided_types_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
    15,072 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
     7,536 ( 0.00%)      }
         .           
         .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   239,796 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   119,898 ( 0.00%)      }
         .           
         .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   417,390 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   208,695 ( 0.00%)      }
         .           
 1,866,114 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   311,019 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
         .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
         .                   })
 1,555,095 ( 0.00%)      }
         .           
   407,209 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   407,209 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_types.get(&id.local_id).cloned()
   814,418 ( 0.00%)      }
         .           
         .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    55,336 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    27,668 ( 0.00%)      }
         .           
   132,979 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   132,979 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   265,958 ( 0.00%)      }
         .           
    89,465 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    89,465 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
         .                   self.node_substs.get(&id.local_id).cloned()
   178,930 ( 0.00%)      }
         .           
         .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
         .               // doesn't provide type parameter substitutions.
         .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    44,876 ( 0.00%)          self.node_type(pat.hir_id)
         .               }
         .           
         .               // Returns the type of an expression as a monotype.
         .               //
         .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
         .               // some cases, we insert `Adjustment` annotations such as auto-deref or
         .               // auto-ref.  The type returned by this function does not consider such
         .               // adjustments.  See `expr_ty_adjusted()` instead.
         .               //
         .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
         .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
         .               // instead of "fn(ty) -> T with T = isize".
         .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   327,871 ( 0.00%)          self.node_type(expr.hir_id)
         .               }
         .           
         .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   353,555 ( 0.00%)          self.node_type_opt(expr.hir_id)
         .               }
         .           
         .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   171,688 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    85,844 ( 0.00%)      }
         .           
         .               pub fn adjustments_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   255,198 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   127,599 ( 0.00%)      }
         .           
   150,596 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   301,192 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
         .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   301,192 ( 0.00%)      }
         .           
         .               /// Returns the type of `expr`, considering any `Adjustment`
         .               /// entry recorded for that expression.
    13,470 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
     2,694 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
     3,300 ( 0.00%)      }
         .           
     2,365 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
       473 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
     1,312 ( 0.00%)      }
         .           
    14,209 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
         .                   // Only paths and method calls/overloaded operators have
         .                   // entries in type_dependent_defs, ignore the former here.
    28,418 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
         .                       return false;
         .                   }
         .           
    30,618 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    28,418 ( 0.00%)      }
         .           
    78,735 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
         .                   self.pat_binding_modes().get(id).copied().or_else(|| {
         .                       s.delay_span_bug(sp, "missing binding mode");
         .                       None
         .                   })
   104,980 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    70,553 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    22,154 ( 0.00%)      }
         .           
         .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    34,736 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
    17,368 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
   126,256 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    63,128 ( 0.00%)      }
         .           
         .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    43,994 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
    21,997 ( 0.00%)      }
         .           
         .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
         .               /// by the closure.
    14,688 ( 0.00%)      pub fn closure_min_captures_flattened(
         .                   &self,
         .                   closure_def_id: DefId,
         .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
         .                   self.closure_min_captures
         .                       .get(&closure_def_id)
         .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
         .                       .into_iter()
         .                       .flatten()
    18,360 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
     4,722 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
     2,361 ( 0.00%)      }
         .           
         .               pub fn closure_kind_origins_mut(
         .                   &mut self,
         .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
         4 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
         2 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
    15,074 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
     7,537 ( 0.00%)      }
         .           
         .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
    10,352 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
     5,176 ( 0.00%)      }
         .           
         .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
     4,722 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
     2,361 ( 0.00%)      }
         .           
         .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
         .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
         .               }
         .           
     1,980 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       660 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
         .                   self.coercion_casts.contains(&hir_id.local_id)
     1,320 ( 0.00%)      }
         .           
         .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
         .                   self.coercion_casts.insert(id);
         .               }
         .           
         .               pub fn coercion_casts(&self) -> &ItemLocalSet {
     2,361 ( 0.00%)          &self.coercion_casts
     2,361 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
         .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
         .                   let ty::TypeckResults {
         .                       hir_owner,
         .                       ref type_dependent_defs,
         .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
         .                   const START_INDEX = 0,
         .               }
         .           }
         .           
         .           /// Mapping of type annotation indices to canonical user type annotations.
         .           pub type CanonicalUserTypeAnnotations<'tcx> =
         .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
         .           
     7,770 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
         .           pub struct CanonicalUserTypeAnnotation<'tcx> {
         .               pub user_ty: CanonicalUserType<'tcx>,
         .               pub span: Span,
     3,932 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
         .           }
         .           
         .           /// Canonicalized user type annotation.
         .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
         .           
         .           impl<'tcx> CanonicalUserType<'tcx> {
         .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
         .               /// i.e., each thing is mapped to a canonical variable with the same index.
    12,890 ( 0.00%)      pub fn is_identity(&self) -> bool {
    25,780 ( 0.00%)          match self.value {
         .                       UserType::Ty(_) => false,
         .                       UserType::TypeOf(_, user_substs) => {
    12,890 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
         .                               return false;
         .                           }
         .           
         .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
         .                               match kind.unpack() {
    22,074 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
         .                                       ty::Bound(debruijn, b) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
    10,364 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == b.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
     9,776 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
         .                                       ty::ReLateBound(debruijn, br) => {
         .                                           // We only allow a `ty::INNERMOST` index in substitutions.
         .                                           assert_eq!(*debruijn, ty::INNERMOST);
         .                                           cvar == br.var
         .                                       }
         .                                       _ => false,
         .                                   },
         .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
         .                                           cvar == b
         .                                       }
         .                                       _ => false,
         .                                   },
         .                               }
         .                           })
         .                       }
         .                   }
    25,780 ( 0.00%)      }
         .           }
         .           
         .           /// A user-given type annotation attached to a constant. These arise
         .           /// from constants that are named via paths, like `Foo::<A>::new` and
         .           /// so forth.
    23,592 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
   161,810 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub enum UserType<'tcx> {
         .               Ty(Ty<'tcx>),
         .           
         .               /// The canonical type is the result of `type_of(def_id)` with the
         .               /// given substitutions applied.
         .               TypeOf(DefId, UserSubsts<'tcx>),
         .           }
         .           
         .           impl<'tcx> CommonTypes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
       111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
         .           
         .                   CommonTypes {
         .                       unit: mk(Tuple(List::empty())),
         .                       bool: mk(Bool),
         .                       char: mk(Char),
         .                       never: mk(Never),
         .                       isize: mk(Int(ty::IntTy::Isize)),
         .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
         .           
         .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonLifetimes<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
        67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
         .           
         .                   CommonLifetimes {
         5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
         5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
         5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> CommonConsts<'tcx> {
         .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
         6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
         .           
         .                   CommonConsts {
         .                       unit: mk_const(ty::Const {
         .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
         .                           ty: types.unit,
         .                       }),
         .                   }
         .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
         .           
         .               /// Stores memory for globals (statics/consts).
         .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
         .           
         .               output_filenames: Arc<OutputFilenames>,
         .           }
         .           
         .           impl<'tcx> TyCtxt<'tcx> {
   120,680 ( 0.00%)      pub fn typeck_opt_const_arg(
         .                   self,
         .                   def: ty::WithOptConstParam<LocalDefId>,
         .               ) -> &'tcx TypeckResults<'tcx> {
    48,272 ( 0.00%)          if let Some(param_did) = def.const_param_did {
         .                       self.typeck_const_arg((def.did, param_did))
         .                   } else {
         .                       self.typeck(def.did)
         .                   }
    96,544 ( 0.00%)      }
         .           
     7,824 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
     2,608 ( 0.00%)          self.arena.alloc(Steal::new(thir))
    10,432 ( 0.00%)      }
         .           
    52,160 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
    10,432 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    73,024 ( 0.00%)      }
         .           
    10,432 ( 0.00%)      pub fn alloc_steal_promoted(
         .                   self,
         .                   promoted: IndexVec<Promoted, Body<'tcx>>,
         .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
     2,608 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
    13,040 ( 0.00%)      }
         .           
     3,447 ( 0.00%)      pub fn alloc_adt_def(
         .                   self,
         .                   did: DefId,
         .                   kind: AdtKind,
         .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
         .                   repr: ReprOptions,
         .               ) -> &'tcx ty::AdtDef {
     6,128 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
     1,532 ( 0.00%)      }
         .           
         .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        10 ( 0.00%)      pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
         .                   // Create an allocation that just contains these bytes.
         2 ( 0.00%)          let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        26 ( 0.00%)          let alloc = self.intern_const_alloc(alloc);
         .                   self.create_memory_alloc(alloc)
        10 ( 0.00%)      }
         .           
         .               /// Returns a range of the start/end indices specified with the
         .               /// `rustc_layout_scalar_valid_range` attribute.
         .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    62,592 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    31,296 ( 0.00%)          let attrs = self.get_attrs(def_id);
   133,008 ( 0.00%)          let get = |name| {
    31,296 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
         .                           Some(attr) => attr,
         .                           None => return Bound::Unbounded,
         .                       };
         .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
     1,440 ( 0.00%)              if let Some(
         .                           &[
         .                               ast::NestedMetaItem::Literal(ast::Lit {
       720 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
         .                               }),
         .                           ],
       360 ( 0.00%)              ) = attr.meta_item_list().as_deref()
         .                       {
         .                           Bound::Included(a)
         .                       } else {
         .                           self.sess
         .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
         .                           Bound::Unbounded
         .                       }
   156,480 ( 0.00%)          };
    46,944 ( 0.00%)          (
    46,944 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    23,472 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
         .                   )
    62,592 ( 0.00%)      }
         .           
         .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
         .                   value.lift_to_tcx(self)
         .               }
         .           
         .               /// Creates a type context and call the closure with a `TyCtxt` reference
         .               /// to the context. The closure enforces that the type context and any interned
         .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
         .               /// reference to the context, to allow formatting values that need it.
        23 ( 0.00%)      pub fn create_global_ctxt(
         .                   s: &'tcx Session,
         .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
         .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
         .                   resolutions: ty::ResolverOutputs,
         .                   krate: &'tcx hir::Crate<'tcx>,
         .                   dep_graph: DepGraph,
         .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
         .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
         .                   query_kinds: &'tcx [DepKindStruct],
         .                   crate_name: &str,
         .                   output_filenames: OutputFilenames,
         .               ) -> GlobalCtxt<'tcx> {
         1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
         .                       s.fatal(&err);
         .                   });
         .                   let interners = CtxtInterners::new(arena);
         .                   let common_types = CommonTypes::new(&interners);
         .                   let common_lifetimes = CommonLifetimes::new(&interners);
         .                   let common_consts = CommonConsts::new(&interners, &common_types);
         .           
       127 ( 0.00%)          GlobalCtxt {
         .                       sess: s,
         6 ( 0.00%)              lint_store,
         .                       arena,
         2 ( 0.00%)              interners,
         5 ( 0.00%)              dep_graph,
         4 ( 0.00%)              untracked_resolutions: resolutions,
         2 ( 0.00%)              prof: s.prof.clone(),
         .                       types: common_types,
         .                       lifetimes: common_lifetimes,
         .                       consts: common_consts,
         .                       untracked_crate: krate,
         .                       on_disk_cache,
         .                       queries,
         .                       query_caches: query::QueryCaches::default(),
         .                       query_kinds,
         .                       ty_rcache: Default::default(),
         .                       pred_rcache: Default::default(),
         .                       selection_cache: Default::default(),
         .                       evaluation_cache: Default::default(),
         1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
         .                       data_layout,
         .                       alloc_map: Lock::new(interpret::AllocMap::new()),
         .                       output_filenames: Arc::new(output_filenames),
         .                   }
         9 ( 0.00%)      }
         .           
         .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
         .                   &self.query_kinds[k as usize]
         .               }
         .           
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   ty: Ty<'tcx>,
         .                   span: S,
         .                   msg: &str,
         .               ) -> &'tcx Const<'tcx> {
         .                   self.sess.delay_span_bug(span, msg);
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
         .               }
         .           
   128,464 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    18,352 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
   136,685 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
   146,816 ( 0.00%)      }
         .           
         .               /// Obtain all lang items of this crate and all dependencies (recursively)
 4,479,020 ( 0.01%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
         .                   self.get_lang_items(())
 5,758,740 ( 0.01%)      }
         .           
         .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
         .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
     1,470 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
         .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
     1,680 ( 0.00%)      }
         .           
         .               /// Obtain the diagnostic item's name
   179,060 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
         .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   204,640 ( 0.00%)      }
         .           
         .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   138,803 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
         .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   158,632 ( 0.00%)      }
         .           
    43,435 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
         .                   self.stability_index(())
    55,845 ( 0.00%)      }
         .           
 1,757,763 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
         .                   self.features_query(())
 2,008,872 ( 0.01%)      }
         .           
   275,129 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
         .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
 2,289,878 ( 0.01%)          if let Some(id) = id.as_local() {
         .                       self.untracked_resolutions.definitions.def_key(id)
         .                   } else {
 1,776,966 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
         .                   }
   283,056 ( 0.00%)      }
         .           
         .               /// Converts a `DefId` into its fully expanded `DefPath` (every
         .               /// `DefId` is really just an interned `DefPath`).
         .               ///
         .               /// Note that if `id` is not local to this crate, the result will
         .               ///  be a non-local `DefPath`.
       284 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
         .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
       426 ( 0.00%)          if let Some(id) = id.as_local() {
        87 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
         .                   } else {
       565 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
         .                   }
       426 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
         .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    42,217 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
         .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
         .                   } else {
    28,146 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
         .                   if crate_num == LOCAL_CRATE {
         .                       self.sess.local_stable_crate_id()
         .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
         .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
         .                       self.def_path(def_id).to_string_no_crate_verbose()
         .                   )
         .               }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   109,254 ( 0.00%)          &*self.untracked_resolutions.cstore
    54,627 ( 0.00%)      }
         .           
         .               /// Note that this is *untracked* and should only be used within the query
         .               /// system if the result is otherwise tracked through queries
         .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
         .                   &self.untracked_resolutions.definitions
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    26,046 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
   104,204 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
         .               }
         .           
         .               #[inline(always)]
         .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
         .                   let resolutions = &self.gcx.untracked_resolutions;
         .                   StableHashingContext::ignore_spans(
         .                       self.sess,
         .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
         .               /// If `true`, we should use the MIR-based borrowck, but also
         .               /// fall back on the AST borrowck if the MIR-based one errors.
         .               pub fn migrate_borrowck(self) -> bool {
         .                   self.borrowck_mode().migrate()
         .               }
         .           
         .               /// What mode(s) of borrowck should we run? AST? MIR? both?
         .               /// (Also considers the `#![feature(nll)]` setting.)
     4,722 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
         .                   // Here are the main constraints we need to deal with:
         .                   //
         .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
         .                   //    synonymous with no `-Z borrowck=...` flag at all.
         .                   //
         .                   // 2. We want to allow developers on the Nightly channel
         .                   //    to opt back into the "hard error" mode for NLL,
         .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
         .                   //   errors. (To simplify the code here, it now even overrides
         .                   //   a user's attempt to specify `-Z borrowck=compare`, which
         .                   //   we arguably do not need anymore and should remove.)
         .                   //
         .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
         .                   //
         .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
         .           
     7,083 ( 0.00%)          if self.features().nll {
         .                       return BorrowckMode::Mir;
         .                   }
         .           
     2,361 ( 0.00%)          self.sess.opts.borrowck_mode
     9,444 ( 0.00%)      }
         .           
         .               /// If `true`, we should use lazy normalization for constants, otherwise
         .               /// we still evaluate them eagerly.
         .               #[inline]
         .               pub fn lazy_normalization(self) -> bool {
       693 ( 0.00%)          let features = self.features();
         .                   // Note: We only use lazy normalization for generic const expressions.
       105 ( 0.00%)          features.generic_const_exprs
         .               }
         .           
         .               #[inline]
         .               pub fn local_crate_exports_generics(self) -> bool {
         .                   debug_assert!(self.sess.opts.share_generics());
         .           
    17,588 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    29,318 ( 0.00%)              match crate_type {
         .                           CrateType::Executable
         .                           | CrateType::Staticlib
         .                           | CrateType::ProcMacro
         .                           | CrateType::Cdylib => false,
         .           
         .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
         .                           // We want to block export of generics from dylibs,
         .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
         .                       // FIXME(#42706) -- in some cases, we could do better here.
         .                       return true;
         .                   }
         .                   false
         .               }
         .           
         .               /// Determines whether identifiers in the assembly have strict naming rules.
         .               /// Currently, only NVPTX* targets need it.
    54,650 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    54,650 ( 0.00%)          self.sess.target.arch.contains("nvptx")
   109,300 ( 0.00%)      }
         .           
         .               /// Returns `&'static core::panic::Location<'static>`.
    17,316 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
         .                   self.mk_imm_ref(
     2,886 ( 0.00%)              self.lifetimes.re_static,
         .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
     5,772 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
         .                   )
    17,316 ( 0.00%)      }
         .           
         .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
    17,820 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
    12,960 ( 0.00%)          match self.def_kind(def_id) {
         .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
         .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
         .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
         .                       },
    29,160 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
         .                   }
    14,580 ( 0.00%)      }
         .           
   368,207 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
         .                   self.limits(()).type_length_limit
   420,808 ( 0.00%)      }
         .           
 1,640,205 ( 0.00%)      pub fn recursion_limit(self) -> Limit {
         .                   self.limits(()).recursion_limit
 1,874,520 ( 0.00%)      }
         .           
   901,880 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
         .                   self.limits(()).move_size_limit
 1,030,720 ( 0.00%)      }
         .           
    22,519 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
         .                   self.limits(()).const_eval_limit
    25,736 ( 0.00%)      }
         .           
         .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
         .                   iter::once(LOCAL_CRATE)
         .                       .chain(self.crates(()).iter().copied())
         .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
         .               }
         .           }
         .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
         .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
         .           }
         .           
         .           macro_rules! nop_lift {
         .               ($set:ident; $ty:ty => $lifted:ty) => {
         .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
         .                       type Lifted = $lifted;
         .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    41,256 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
         .                               Some(unsafe { mem::transmute(self) })
         .                           } else {
         .                               None
         .                           }
         .                       }
         .                   }
         .               };
         .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
         .               /// This is the implicit state of rustc. It contains the current
         .               /// `TyCtxt` and query. It is updated when creating a local interner or
         .               /// executing a new query. Whenever there's a `TyCtxt` value available
         .               /// you should also have access to an `ImplicitCtxt` through the functions
         .               /// in this module.
         .               #[derive(Clone)]
         .               pub struct ImplicitCtxt<'a, 'tcx> {
         .                   /// The current `TyCtxt`.
         2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
         .           
         .                   /// The current query job, if any. This is updated by `JobOwner::start` in
         .                   /// `ty::query::plumbing` when executing a query.
         .                   pub query: Option<query::QueryJobId<DepKind>>,
         .           
         .                   /// Where to store diagnostics for the current query job, if any.
         .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
         .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
         .                   pub layout_depth: usize,
         .           
         .                   /// The current dep graph task. This is used to add dependencies to queries
         .                   /// when executing them.
         .                   pub task_deps: TaskDepsRef<'a>,
         .               }
         .           
         .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
         5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
         .                       let tcx = TyCtxt { gcx };
        25 ( 0.00%)              ImplicitCtxt {
         .                           tcx,
         .                           query: None,
         .                           diagnostics: None,
         .                           layout_depth: 0,
         .                           task_deps: TaskDepsRef::Ignore,
         .                       }
         5 ( 0.00%)          }
         .               }
         .           
         .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
         .               /// to `value` during the call to `f`. It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(parallel_compiler)]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
         .           
         .               /// Sets TLV to `value` during the call to `f`.
         .               /// It is restored to its previous value after.
         .               /// This is used to set the pointer to the new `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
         .                   let old = get_tlv();
   414,777 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
         .                   TLV.with(|tlv| tlv.set(value));
         .                   f()
         .               }
         .           
         .               /// Gets the pointer to the current `ImplicitCtxt`.
         .               #[cfg(not(parallel_compiler))]
         .               #[inline]
         .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
         .               }
         .           
         .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
         .               #[inline]
         .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
         1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
         .               #[inline]
         .               pub fn with_context_opt<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
         .               {
         .                   let context = get_tlv();
 1,755,245 ( 0.00%)          if context == 0 {
         .                       f(None)
         .                   } else {
         .                       // We could get an `ImplicitCtxt` pointer from another thread.
         .                       // Ensure that `ImplicitCtxt` is `Sync`.
         .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
         .           
         .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
         .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
         .           
         .               /// Allows access to the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with_context<F, R>(f: F) -> R
         .               where
         .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
         .               {
    18,123 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
         .               }
         .           
         .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
         .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
         .               /// as the `TyCtxt` passed in.
         .               /// This will panic if you pass it a `TyCtxt` which is different from the current
         .               /// `ImplicitCtxt`'s `tcx` field.
         .               #[inline]
         .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
         .               where
         .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
         .               {
         .                   with_context(|context| unsafe {
   826,091 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
         .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
   808,820 ( 0.00%)              f(context)
         .                   })
         .               }
         .           
         .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
         .               /// Panics if there is no `ImplicitCtxt` available.
         .               #[inline]
         .               pub fn with<F, R>(f: F) -> R
         .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
         .               fn into_pointer(&self) -> *const () {
         .                   self.0 as *const _ as *const ()
         .               }
         .           }
         .           
         .           #[allow(rustc::usage_of_ty_tykind)]
         .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
 2,374,019 ( 0.01%)          &self.0.kind()
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
 1,417,500 ( 0.00%)          self.0.kind().hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   425,135 ( 0.00%)          &self.0.kind
         .               }
         .           }
         .           
         .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
         .           
         .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   229,372 ( 0.00%)          self.0.kind.hash(s)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
         .               fn borrow<'a>(&'a self) -> &'a [T] {
 2,457,738 ( 0.01%)          &self.0[..]
         .               }
         .           }
         .           
         .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
         .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
         .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
         .                   // `x == y`.
         .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
         .           
         .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
         .               fn hash<H: Hasher>(&self, s: &mut H) {
         .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   361,200 ( 0.00%)          self.0[..].hash(s)
         .               }
         .           }
         .           
         .           macro_rules! direct_interners {
         .               ($($name:ident: $method:ident($ty:ty),)+) => {
         .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
         .                       fn borrow<'a>(&'a self) -> &'a $ty {
   677,112 ( 0.00%)                  &self.0
         .                       }
         .                   }
         .           
         .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
         .                       fn eq(&self, other: &Self) -> bool {
         .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
         .                           // equals `x == y`.
         .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
         .                   }
         .           
         .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
         .           
         .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
         .                       fn hash<H: Hasher>(&self, s: &mut H) {
         .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
         .                           // x.hash(s)`.
   197,126 ( 0.00%)                  self.0.hash(s)
         .                       }
         .                   }
         .           
         .                   impl<'tcx> TyCtxt<'tcx> {
 5,866,096 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
 3,050,634 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    58,259 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
         .                           }).0
 6,560,910 ( 0.02%)              }
         .                   })+
         .               }
         .           }
         .           
         .           direct_interners! {
         .               region: mk_region(RegionKind),
         .               const_: mk_const(Const<'tcx>),
         .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
         .               adt_def: intern_adt_def(AdtDef),
         .               stability: intern_stability(attr::Stability),
         .               const_stability: intern_const_stability(attr::ConstStability),
         .           }
         .           
         .           macro_rules! slice_interners {
         .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
         .                   impl<'tcx> TyCtxt<'tcx> {
27,002,011 ( 0.07%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
         .                           self.interners.$field.intern_ref(v, || {
         .                               Interned(List::from_arena(&*self.arena, v))
         .                           }).0
24,155,811 ( 0.06%)              })+
         .                   }
         .               );
         .           }
         .           
         .           slice_interners!(
         .               type_list: _intern_type_list(Ty<'tcx>),
         .               substs: _intern_substs(GenericArg<'tcx>),
         .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
         .               /// unsafe.
         .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
         .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
         .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
         .               }
         .           
         .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
         .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
        12 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
         .                   self.super_traits_of(trait_def_id).any(|trait_did| {
         .                       self.associated_items(trait_did)
         .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
         .                           .is_some()
         .                   })
         9 ( 0.00%)      }
         .           
         .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
         .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
         .               /// to identify which traits may define a given associated type to help avoid cycle errors.
         .               /// Returns a `DefId` iterator.
         .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
         .                   let mut set = FxHashSet::default();
         2 ( 0.00%)          let mut stack = vec![trait_def_id];
         .           
         .                   set.insert(trait_def_id);
         .           
         9 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
         4 ( 0.00%)              let trait_did = stack.pop()?;
         2 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
         .           
         .                       for (predicate, _) in generic_predicates.predicates {
         3 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
         2 ( 0.00%)                      if set.insert(data.def_id()) {
         .                                   stack.push(data.def_id());
         .                               }
         .                           }
         .                       }
         .           
         .                       Some(trait_did)
         .                   })
         .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
         .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
         .                   })
         .               }
         .           
         .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
         .               /// `*r == kind`.
         .               #[inline]
         .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   753,300 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
         .               }
         .           
         .               #[allow(rustc::usage_of_ty_tykind)]
         .               #[inline]
         .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
18,540,987 ( 0.05%)          self.interners.intern_ty(st)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
 6,285,899 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
         .                   Predicate { inner }
         .               }
         .           
         .               #[inline]
 4,665,848 ( 0.01%)      pub fn reuse_or_mk_predicate(
         .                   self,
         .                   pred: Predicate<'tcx>,
         .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
         .               ) -> Predicate<'tcx> {
   263,280 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
 4,665,848 ( 0.01%)      }
         .           
         .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
     1,444 ( 0.00%)          match tm {
         .                       IntTy::Isize => self.types.isize,
         .                       IntTy::I8 => self.types.i8,
         .                       IntTy::I16 => self.types.i16,
         .                       IntTy::I32 => self.types.i32,
         .                       IntTy::I64 => self.types.i64,
         .                       IntTy::I128 => self.types.i128,
         .                   }
     1,444 ( 0.00%)      }
         .           
         .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
     4,933 ( 0.00%)          match tm {
         .                       UintTy::Usize => self.types.usize,
         .                       UintTy::U8 => self.types.u8,
         .                       UintTy::U16 => self.types.u16,
         .                       UintTy::U32 => self.types.u32,
         .                       UintTy::U64 => self.types.u64,
         .                       UintTy::U128 => self.types.u128,
         .                   }
     4,933 ( 0.00%)      }
         .           
         .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
         4 ( 0.00%)          match tm {
         .                       FloatTy::F32 => self.types.f32,
         .                       FloatTy::F64 => self.types.f64,
         .                   }
         4 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_static_str(self) -> Ty<'tcx> {
     4,920 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   // Take a copy of substs so that we own the vectors inside.
         .                   self.mk_ty(Adt(def, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
         .                   self.mk_ty(Foreign(def_id))
         .               }
         .           
       600 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
         .                   let adt_def = self.adt_def(wrapper_def_id);
         .                   let substs =
     1,125 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
         .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
        75 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       300 ( 0.00%)                      if param.index == 0 {
         .                                   ty_param.into()
         .                               } else {
        75 ( 0.00%)                          assert!(has_default);
       225 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
         .                               }
         .                           }
         .                       });
        75 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
       600 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
       375 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
       664 ( 0.00%)          self.mk_generic_adt(def_id, ty)
         .               }
         .           
         .               #[inline]
         .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
         .                   let def_id = self.lang_items().require(item).ok()?;
         .                   Some(self.mk_generic_adt(def_id, ty))
         .               }
         .           
-- line 2293 ----------------------------------------
-- line 2329 ----------------------------------------
         .               }
         .           
         .               #[inline]
         .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
         .               }
         .           
         .               #[inline]
    23,336 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
         .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    23,824 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Slice(ty))
         .               }
         .           
         .               #[inline]
         .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
     9,400 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    11,333 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
         .               }
         .           
         .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   212,824 ( 0.00%)          iter.intern_with(|ts| {
    73,102 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   186,120 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   191,439 ( 0.00%)          })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_unit(self) -> Ty<'tcx> {
    17,815 ( 0.00%)          self.types.unit
         .               }
         .           
         .               #[inline]
         .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
         8 ( 0.00%)          if self.features().never_type_fallback { self.types.never } else { self.types.unit }
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(FnDef(def_id, substs))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    41,930 ( 0.00%)          self.mk_ty(FnPtr(fty))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_dynamic(
         .                   self,
         .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   reg: ty::Region<'tcx>,
         .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(TyVar(v))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
     3,624 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
         .               }
         .           
         .               #[inline]
         .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
         .                   self.mk_ty_infer(IntVar(v))
         .               }
         .           
         .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
         .                   self.mk_ty(Param(ParamTy { index, name }))
         .               }
         .           
         .               #[inline]
         .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
         .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
         .               }
         .           
    47,579 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    23,647 ( 0.00%)          match param.kind {
         .                       GenericParamDefKind::Lifetime => {
    31,014 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
         .                       }
     3,256 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
         .                       GenericParamDefKind::Const { .. } => {
         .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
         .                       }
         .                   }
    47,579 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
         .                   self.mk_ty(Opaque(def_id, substs))
         .               }
         .           
    11,179 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    11,179 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    22,358 ( 0.00%)      }
         .           
       593 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
     1,779 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
     1,186 ( 0.00%)      }
         .           
     4,199 ( 0.00%)      pub fn mk_place_downcast(
         .                   self,
         .                   place: Place<'tcx>,
         .                   adt_def: &'tcx AdtDef,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
     4,199 ( 0.00%)          self.mk_place_elem(
         .                       place,
     8,398 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
         .                   )
     8,398 ( 0.00%)      }
         .           
         .               pub fn mk_place_downcast_unnamed(
         .                   self,
         .                   place: Place<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Place<'tcx> {
         .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
         .               }
         .           
        30 ( 0.00%)      pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        30 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Index(index))
        60 ( 0.00%)      }
         .           
         .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
         .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
         .               /// flight.
   183,978 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
         .                   let mut projection = place.projection.to_vec();
         .                   projection.push(elem);
         .           
         .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   204,420 ( 0.00%)      }
         .           
    26,187 ( 0.00%)      pub fn intern_poly_existential_predicates(
         .                   self,
         .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
     3,845 ( 0.00%)          assert!(!eps.is_empty());
         .                   assert!(
         .                       eps.array_windows()
       596 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
         .                               != Ordering::Greater)
         .                   );
    15,380 ( 0.00%)          self._intern_poly_existential_predicates(eps)
    29,928 ( 0.00%)      }
         .           
         .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
         .                   // FIXME consider asking the input slice to be sorted to avoid
         .                   // re-interning permutations, in which case that would be asserted
         .                   // here.
    34,361 ( 0.00%)          if preds.is_empty() {
         .                       // The macro-generated method below asserts we don't intern an empty slice.
         .                       List::empty()
         .                   } else {
     7,477 ( 0.00%)              self._intern_predicates(preds)
         .                   }
    53,872 ( 0.00%)      }
         .           
         .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   469,704 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    50,908 ( 0.00%)      }
         .           
         .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
 4,369,016 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   190,972 ( 0.00%)      }
         .           
         .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
         .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
         .               }
         .           
         .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   150,162 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
    86,996 ( 0.00%)      }
         .           
         .               pub fn intern_canonical_var_infos(
         .                   self,
         .                   ts: &[CanonicalVarInfo<'tcx>],
         .               ) -> CanonicalVarInfos<'tcx> {
   210,430 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
       684 ( 0.00%)      }
         .           
         .               pub fn intern_bound_variable_kinds(
         .                   self,
         .                   ts: &[ty::BoundVariableKind],
         .               ) -> &'tcx List<ty::BoundVariableKind> {
    37,949 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    43,244 ( 0.00%)      }
         .           
         .               pub fn mk_fn_sig<I>(
         .                   self,
         .                   inputs: I,
         .                   output: I::Item,
         .                   c_variadic: bool,
         .                   unsafety: hir::Unsafety,
         .                   abi: abi::Abi,
         .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
         .               where
         .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
         .               {
         .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    27,290 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
     4,808 ( 0.00%)              c_variadic,
     7,551 ( 0.00%)              unsafety,
     4,130 ( 0.00%)              abi,
     2,440 ( 0.00%)          })
         .               }
         .           
         .               pub fn mk_poly_existential_predicates<
         .                   I: InternAs<
         .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
         .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
         .                   >,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
    14,933 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
         .               }
         .           
         .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
        14 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
         .               }
         .           
         .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   352,022 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
         .               }
         .           
     3,192 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
 1,890,899 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
     4,256 ( 0.00%)      }
         .           
         .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   404,094 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
         .               }
         .           
   132,713 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
         .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   265,426 ( 0.00%)      }
         .           
         .               pub fn mk_bound_variable_kinds<
         .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
         .               >(
         .                   self,
         .                   iter: I,
         .               ) -> I::Output {
   150,906 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
         .               }
         .           
         .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
         .               /// It stops at `bound` and just returns it if reached.
   963,872 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   963,872 ( 0.00%)          let hir = self.hir();
         .                   loop {
 1,897,737 ( 0.00%)              if id == bound {
         .                           return bound;
         .                       }
         .           
 2,533,863 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
         .                           return id;
         .                       }
         .                       let next = hir.get_parent_node(id);
 1,484,649 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
 1,376,960 ( 0.00%)      }
         .           
    51,576 ( 0.00%)      pub fn lint_level_at_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   mut id: hir::HirId,
         .               ) -> (Level, LintLevelSource) {
         .                   let sets = self.lint_levels(());
         .                   loop {
   434,004 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
         .                           return pair;
         .                       }
    38,194 ( 0.00%)              let next = self.hir().get_parent_node(id);
   114,582 ( 0.00%)              if next == id {
         .                           bug!("lint traversal reached the root of the crate");
         .                       }
         .                       id = next;
         .                   }
    51,576 ( 0.00%)      }
         .           
     3,458 ( 0.00%)      pub fn struct_span_lint_hir(
         .                   self,
         .                   lint: &'static Lint,
         .                   hir_id: HirId,
         .                   span: impl Into<MultiSpan>,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
    28,577 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
     7,364 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
     1,976 ( 0.00%)      }
         .           
         .               pub fn struct_lint_node(
         .                   self,
         .                   lint: &'static Lint,
         .                   id: HirId,
         .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
         .               ) {
         .                   let (level, src) = self.lint_level_at_node(lint, id);
         .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
         .               }
         .           
    42,378 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
    12,108 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
         .                   let candidates = map.get(&id.local_id)?;
    12,108 ( 0.00%)          Some(&*candidates)
    48,432 ( 0.00%)      }
         .           
   122,024 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
         .                   debug!(?id, "named_region");
         .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
   156,888 ( 0.00%)      }
         .           
    42,804 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
         .                   self.is_late_bound_map(id.owner)
     4,089 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
    38,048 ( 0.00%)      }
         .           
    79,583 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
         .                   self.object_lifetime_defaults_map(id.owner)
   102,321 ( 0.00%)      }
         .           
    39,114 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
         .                   self.mk_bound_variable_kinds(
         .                       self.late_bound_vars_map(id.owner)
         .                           .and_then(|map| map.get(&id.local_id).cloned())
         .                           .unwrap_or_else(|| {
         .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
         .                           })
         .                           .iter(),
         .                   )
    39,114 ( 0.00%)      }
         .           
         .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
         .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
         .               }
         .           
         .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
         .               /// feature gates
       740 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
        74 ( 0.00%)          if self.is_const_fn_raw(def_id) {
        30 ( 0.00%)              match self.lookup_const_stability(def_id) {
        60 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
         .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
         .                               // corresponding feature gate.
         8 ( 0.00%)                      self.features()
         .                                   .declared_lib_features
         .                                   .iter()
         .                                   .any(|&(sym, _)| sym == stability.feature)
         .                           }
         .                           // functions without const stability are either stable user written
         .                           // const fn or the user is using feature gates and we thus don't
         .                           // care what they do
         .                           _ => true,
         .                       }
         .                   } else {
         .                       false
         .                   }
       666 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> TyCtxtAt<'tcx> {
         .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
         .               #[track_caller]
         .               pub fn ty_error(self) -> Ty<'tcx> {
         .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
         .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
         .           }
         .           
         .           impl<I, T, R, E> InternAs<[T], R> for I
         .           where
         .               E: InternIteratorElement<T, R>,
         .               I: Iterator<Item = E>,
         .           {
         .               type Output = E::Output;
   368,496 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
         .               where
         .                   F: FnOnce(&[T]) -> R,
         .               {
 9,133,307 ( 0.02%)          E::intern_with(self, f)
   215,811 ( 0.00%)      }
         .           }
         .           
         .           pub trait InternIteratorElement<T, R>: Sized {
         .               type Output;
         .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
         .           }
         .           
         .           impl<T, R> InternIteratorElement<T, R> for T {
         .               type Output = R;
 1,082,331 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`.
 1,106,091 ( 0.00%)          match iter.size_hint() {
         .                       (0, Some(0)) => {
         6 ( 0.00%)                  assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
         .                           let t0 = iter.next().unwrap();
       159 ( 0.00%)                  assert!(iter.next().is_none());
   168,563 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
         .                           let t0 = iter.next().unwrap();
         .                           let t1 = iter.next().unwrap();
     2,994 ( 0.00%)                  assert!(iter.next().is_none());
   148,363 ( 0.00%)                  f(&[t0, t1])
         .                       }
     7,284 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
         .                   }
   932,831 ( 0.00%)      }
         .           }
         .           
         .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
         .           where
         .               T: Clone + 'a,
         .           {
         .               type Output = R;
    40,282 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
         .                   // This code isn't hot.
       976 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    33,108 ( 0.00%)      }
         .           }
         .           
         .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
         .               type Output = Result<R, E>;
 3,437,257 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
         .                   mut iter: I,
         .                   f: F,
         .               ) -> Self::Output {
         .                   // This code is hot enough that it's worth specializing for the most
         .                   // common length lists, to avoid the overhead of `SmallVec` creation.
         .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
         .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
         .                   // `assert`, unless a failure happens first, in which case the result
         .                   // will be an error anyway.
 2,817,990 ( 0.01%)          Ok(match iter.size_hint() {
         .                       (0, Some(0)) => {
         .                           assert!(iter.next().is_none());
         .                           f(&[])
         .                       }
         .                       (1, Some(1)) => {
    11,046 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        18 ( 0.00%)                  assert!(iter.next().is_none());
   212,938 ( 0.00%)                  f(&[t0])
         .                       }
         .                       (2, Some(2)) => {
    32,420 ( 0.00%)                  let t0 = iter.next().unwrap()?;
    32,420 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    48,630 ( 0.00%)                  assert!(iter.next().is_none());
   333,256 ( 0.00%)                  f(&[t0, t1])
         .                       }
    34,366 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
         .                   })
 3,861,325 ( 0.01%)      }
         .           }
         .           
         .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
         .           // won't work for us.
         .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
   826,091 ( 0.00%)      t as *const () == u as *const ()
         .           }
         .           
         .           pub fn provide(providers: &mut ty::query::Providers) {
         2 ( 0.00%)      providers.in_scope_traits_map =
         .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
         3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
         2 ( 0.00%)      providers.module_reexports =
         .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
         2 ( 0.00%)      providers.crate_name = |tcx, id| {
         1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
         1 ( 0.00%)          tcx.crate_name
         .               };
         2 ( 0.00%)      providers.maybe_unused_trait_import =
         .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
         2 ( 0.00%)      providers.maybe_unused_extern_crates =
         .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
         2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
         .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
         .               };
         .           
        11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_const_stability =
         .                   |tcx, id| tcx.stability().local_const_stability(id.expect_local());
         2 ( 0.00%)      providers.lookup_deprecation_entry =
    49,624 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
         2 ( 0.00%)      providers.extern_mod_stmt_cnum =
         .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
         3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
         3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
         2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
         .               };
         2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
         .               };
         2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
         1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
         .                   // We want to check if the panic handler was defined in this crate
         3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
         .               };
         .           }

 7,688,252 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs
--------------------------------------------------------------------------------
Ir                   

-- line 154 ----------------------------------------
          .           
          .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
          .           unsafe impl<T> SliceIndex<[T]> for usize {
          .               type Output = T;
          .           
          .               #[inline]
          .               fn get(self, slice: &[T]) -> Option<&T> {
          .                   // SAFETY: `self` is checked to be in bounds.
 10,422,939 ( 0.03%)          if self < slice.len() { unsafe { Some(&*self.get_unchecked(slice)) } } else { None }
          .               }
          .           
          .               #[inline]
          .               fn get_mut(self, slice: &mut [T]) -> Option<&mut T> {
          .                   // SAFETY: `self` is checked to be in bounds.
 41,955,027 ( 0.11%)          if self < slice.len() { unsafe { Some(&mut *self.get_unchecked_mut(slice)) } } else { None }
          .               }
          .           
          .               #[inline]
          .               unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
          .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
          .                   // cannot be longer than `isize::MAX`. They also guarantee that
          .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
          .                   // so the call to `add` is safe.
-- line 176 ----------------------------------------
-- line 181 ----------------------------------------
          .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
          .                   // SAFETY: see comments for `get_unchecked` above.
          .                   unsafe { slice.as_mut_ptr().add(self) }
          .               }
          .           
          .               #[inline]
          .               fn index(self, slice: &[T]) -> &T {
          .                   // N.B., use intrinsic indexing
151,352,099 ( 0.39%)          &(*slice)[self]
          .               }
          .           
          .               #[inline]
          .               fn index_mut(self, slice: &mut [T]) -> &mut T {
          .                   // N.B., use intrinsic indexing
 30,740,227 ( 0.08%)          &mut (*slice)[self]
          .               }
          .           }
          .           
          .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
          .           unsafe impl<T> SliceIndex<[T]> for ops::Range<usize> {
          .               type Output = [T];
          .           
          .               #[inline]
          .               fn get(self, slice: &[T]) -> Option<&[T]> {
    324,643 ( 0.00%)          if self.start > self.end || self.end > slice.len() {
          .                       None
          .                   } else {
          .                       // SAFETY: `self` is checked to be valid and in bounds above.
          .                       unsafe { Some(&*self.get_unchecked(slice)) }
          .                   }
          .               }
          .           
          .               #[inline]
-- line 213 ----------------------------------------
-- line 221 ----------------------------------------
          .               }
          .           
          .               #[inline]
          .               unsafe fn get_unchecked(self, slice: *const [T]) -> *const [T] {
          .                   // SAFETY: the caller guarantees that `slice` is not dangling, so it
          .                   // cannot be longer than `isize::MAX`. They also guarantee that
          .                   // `self` is in bounds of `slice` so `self` cannot overflow an `isize`,
          .                   // so the call to `add` is safe.
  3,293,359 ( 0.01%)          unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
          .               }
          .           
          .               #[inline]
          .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
          .                   // SAFETY: see comments for `get_unchecked` above.
          .                   unsafe {
    226,196 ( 0.00%)              ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
          .                   }
          .               }
          .           
          .               #[inline]
          .               fn index(self, slice: &[T]) -> &[T] {
    620,725 ( 0.00%)          if self.start > self.end {
          .                       slice_index_order_fail(self.start, self.end);
  2,678,156 ( 0.01%)          } else if self.end > slice.len() {
          .                       slice_end_index_len_fail(self.end, slice.len());
          .                   }
          .                   // SAFETY: `self` is checked to be valid and in bounds above.
          .                   unsafe { &*self.get_unchecked(slice) }
          .               }
          .           
          .               #[inline]
          .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
     54,589 ( 0.00%)          if self.start > self.end {
          .                       slice_index_order_fail(self.start, self.end);
    227,817 ( 0.00%)          } else if self.end > slice.len() {
          .                       slice_end_index_len_fail(self.end, slice.len());
          .                   }
          .                   // SAFETY: `self` is checked to be valid and in bounds above.
          .                   unsafe { &mut *self.get_unchecked_mut(slice) }
          .               }
          .           }
          .           
          .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 263 ----------------------------------------
-- line 320 ----------------------------------------
          .               #[inline]
          .               unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
          .                   // SAFETY: the caller has to uphold the safety contract for `get_unchecked_mut`.
          .                   unsafe { (self.start..slice.len()).get_unchecked_mut(slice) }
          .               }
          .           
          .               #[inline]
          .               fn index(self, slice: &[T]) -> &[T] {
  2,827,898 ( 0.01%)          if self.start > slice.len() {
          .                       slice_start_index_len_fail(self.start, slice.len());
          .                   }
          .                   // SAFETY: `self` is checked to be valid and in bounds above.
          .                   unsafe { &*self.get_unchecked(slice) }
          .               }
          .           
          .               #[inline]
          .               fn index_mut(self, slice: &mut [T]) -> &mut [T] {
     40,421 ( 0.00%)          if self.start > slice.len() {
          .                       slice_start_index_len_fail(self.start, slice.len());
          .                   }
          .                   // SAFETY: `self` is checked to be valid and in bounds above.
          .                   unsafe { &mut *self.get_unchecked_mut(slice) }
          .               }
          .           }
          .           
          .           #[stable(feature = "slice_get_slice_impls", since = "1.15.0")]
-- line 345 ----------------------------------------
-- line 539 ----------------------------------------
          .               let end = match end {
          .                   ops::Bound::Included(end) => {
          .                       end.checked_add(1).unwrap_or_else(|| slice_end_index_overflow_fail())
          .                   }
          .                   ops::Bound::Excluded(&end) => end,
          .                   ops::Bound::Unbounded => len,
          .               };
          .           
    182,174 ( 0.00%)      if start > end {
          .                   slice_index_order_fail(start, end);
          .               }
      7,036 ( 0.00%)      if end > len {
          .                   slice_end_index_len_fail(end, len);
          .               }
          .           
          .               ops::Range { start, end }
          .           }
          .           
          .           /// Convert pair of `ops::Bound`s into `ops::Range` without performing any bounds checking and (in debug) overflow checking
          .           fn into_range_unchecked(
-- line 558 ----------------------------------------

 24,017,436 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/index.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                  

-- line 5 ----------------------------------------
         .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
         .           unsafe impl GlobalAlloc for System {
         .               #[inline]
         .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
         .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
         .                   // So only rely on MIN_ALIGN if size >= align.
         .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
         .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
23,956,958 ( 0.06%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
17,967,717 ( 0.05%)              libc::malloc(layout.size()) as *mut u8
         .                   } else {
         .                       #[cfg(target_os = "macos")]
         .                       {
         .                           if layout.align() > (1 << 31) {
         .                               return ptr::null_mut();
         .                           }
         .                       }
         .                       aligned_malloc(&layout)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
         .                   // See the comment above in `alloc` for why this check looks the way it does.
 1,342,072 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
 2,013,108 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
         .                   } else {
         .                       let ptr = self.alloc(layout);
         .                       if !ptr.is_null() {
         .                           ptr::write_bytes(ptr, 0, layout.size());
         .                       }
         .                       ptr
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
 6,324,747 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
         .               }
         .           
         .               #[inline]
         .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
 2,690,012 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
 5,380,024 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
         .                   } else {
         .                       realloc_fallback(self, ptr, layout, new_size)
         .                   }
         .               }
         .           }
         .           
         .           cfg_if::cfg_if! {
         .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
         .               } else if #[cfg(target_os = "wasi")] {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
         .                   }
         .               } else {
         .                   #[inline]
         .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
         1 ( 0.00%)              let mut out = ptr::null_mut();
         .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
         .                       // Since these are all powers of 2, we can just use max.
         .                       let align = layout.align().max(crate::mem::size_of::<usize>());
         2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
         2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
         .                   }
         .               }
         .           }

         1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
     4,088 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
     2,044 ( 0.00%)              from_str_radix(src, radix)
     6,132 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
 1,695,960 ( 0.00%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
 2,636,873 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 2,755,211 ( 0.01%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
79,405,152 ( 0.20%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         8 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
16,170,286 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   440,601 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
    18,944 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
 1,973,661 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   131,979 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
35,237,682 ( 0.09%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
14,827,367 ( 0.04%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
54,394,641 ( 0.14%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
         .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
         .                       // out of bounds
         .                       unsafe {
       155 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
         .                       }
         .                   }
         .           
         .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
         .                   /// where `mask` removes any high-order bits of `rhs` that
         .                   /// would cause the shift to exceed the bitwidth of the type.
         .                   ///
         .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
       617 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 6,246,918 ( 0.02%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
     1,234 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        21 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
 2,113,808 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        42 ( 0.00%)          }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1674 ----------------------------------------
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
11,818,338 ( 0.03%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
-- line 1690 ----------------------------------------
-- line 1838 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0x1", stringify!($SelfT), ".overflowing_shl(132), (0x10, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_shl(self, rhs: u32) -> (Self, bool) {
        57 ( 0.00%)              (self.wrapping_shl(rhs), (rhs > ($BITS - 1)))
         .                   }
         .           
         .                   /// Shifts self right by `rhs` bits.
         .                   ///
         .                   /// Returns a tuple of the shifted version of self along with a boolean
         .                   /// indicating whether the shift value was larger than or equal to the
         .                   /// number of bits. If the shift value is too large, then value is
         .                   /// masked (N-1) where N is the number of bits, and this value is then
-- line 1854 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       198 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
   103,308 ( 0.00%)              if self <= 1 { return 0; }
         .           
   144,746 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
   433,406 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   145,154 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
   185,974 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   900,063 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs
--------------------------------------------------------------------------------
Ir                   

-- line 33 ----------------------------------------
          .           
          .           impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {
          .               /// Note that we include both the `ParamEnv` and the `Predicate`,
          .               /// as the `ParamEnv` can influence whether fulfillment succeeds
          .               /// or fails.
          .               type CacheKey = ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>;
          .           
          .               fn as_cache_key(&self) -> Self::CacheKey {
  1,417,500 ( 0.00%)          self.obligation.param_env.and(self.obligation.predicate)
          .               }
          .           }
          .           
          .           /// The fulfillment context is used to drive trait resolution. It
          .           /// consists of a list of obligations that must be (eventually)
          .           /// satisfied. The job is to track which are satisfied, which yielded
          .           /// errors, and which are still pending. At any point, users can call
          .           /// `select_where_possible`, and the fulfillment context will try to do
-- line 49 ----------------------------------------
-- line 79 ----------------------------------------
          .               // outside of any snapshot, so any use of it inside a snapshot
          .               // will lead to trouble and therefore is checked against, but
          .               // other fulfillment contexts sometimes do live inside of
          .               // a snapshot (they don't *straddle* a snapshot, so there
          .               // is no trouble there).
          .               usable_in_snapshot: bool,
          .           }
          .           
         80 ( 0.00%)  #[derive(Clone, Debug)]
          .           pub struct PendingPredicateObligation<'tcx> {
          .               pub obligation: PredicateObligation<'tcx>,
          .               // This is far more often read than modified, meaning that we
          .               // should mostly optimize for reading speed, while modifying is not as relevant.
          .               //
          .               // For whatever reason using a boxed slice is slower than using a `Vec` here.
          .               pub stalled_on: Vec<TyOrConstInferVar<'tcx>>,
          .           }
          .           
          .           // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.
          .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
          .           static_assert_size!(PendingPredicateObligation<'_>, 72);
          .           
          .           impl<'a, 'tcx> FulfillmentContext<'tcx> {
          .               /// Creates a new fulfillment context.
     21,946 ( 0.00%)      pub fn new() -> FulfillmentContext<'tcx> {
    297,191 ( 0.00%)          FulfillmentContext {
     35,834 ( 0.00%)              predicates: ObligationForest::new(),
          .                       relationships: FxHashMap::default(),
          .                       register_region_obligations: true,
          .                       usable_in_snapshot: false,
          .                   }
     21,946 ( 0.00%)      }
          .           
          .               pub fn new_in_snapshot() -> FulfillmentContext<'tcx> {
        462 ( 0.00%)          FulfillmentContext {
        154 ( 0.00%)              predicates: ObligationForest::new(),
          .                       relationships: FxHashMap::default(),
          .                       register_region_obligations: true,
          .                       usable_in_snapshot: true,
          .                   }
          .               }
          .           
          .               pub fn new_ignoring_regions() -> FulfillmentContext<'tcx> {
     61,024 ( 0.00%)          FulfillmentContext {
     15,256 ( 0.00%)              predicates: ObligationForest::new(),
          .                       relationships: FxHashMap::default(),
          .                       register_region_obligations: false,
          .                       usable_in_snapshot: false,
          .                   }
          .               }
          .           
          .               /// Attempts to select obligations using `selcx`.
          .               fn select(&mut self, selcx: &mut SelectionContext<'a, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
    291,110 ( 0.00%)          let span = debug_span!("select", obligation_forest_size = ?self.predicates.len());
          .                   let _enter = span.enter();
          .           
          .                   let mut errors = Vec::new();
          .           
          .                   loop {
          .                       debug!("select: starting another iteration");
          .           
          .                       // Process pending obligations.
          .                       let outcome: Outcome<_, _> =
  1,304,128 ( 0.00%)                  self.predicates.process_obligations(&mut FulfillProcessor {
          .                               selcx,
    186,304 ( 0.00%)                      register_region_obligations: self.register_region_obligations,
          .                           });
          .                       debug!("select: outcome={:#?}", outcome);
          .           
          .                       // FIXME: if we kept the original cache key, we could mark projection
          .                       // obligations as complete for the projection cache here.
          .           
          .                       errors.extend(outcome.errors.into_iter().map(to_fulfillment_error));
          .           
          .                       // If nothing new was added, no need to keep looping.
    372,608 ( 0.00%)              if outcome.stalled {
          .                           break;
          .                       }
          .                   }
          .           
          .                   debug!(
          .                       "select({} predicates remaining, {} errors) done",
          .                       self.predicates.len(),
          .                       errors.len()
-- line 162 ----------------------------------------
-- line 169 ----------------------------------------
          .           impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {
          .               /// "Normalize" a projection type `<SomeType as SomeTrait>::X` by
          .               /// creating a fresh type variable `$0` as well as a projection
          .               /// predicate `<SomeType as SomeTrait>::X == $0`. When the
          .               /// inference engine runs, it will attempt to find an impl of
          .               /// `SomeTrait` or a where-clause that lets us unify `$0` with
          .               /// something concrete. If this fails, we'll unify `$0` with
          .               /// `projection_ty` again.
      3,388 ( 0.00%)      #[tracing::instrument(level = "debug", skip(self, infcx, param_env, cause))]
          .               fn normalize_projection_type(
          .                   &mut self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .                   param_env: ty::ParamEnv<'tcx>,
          .                   projection_ty: ty::ProjectionTy<'tcx>,
          .                   cause: ObligationCause<'tcx>,
          .               ) -> Ty<'tcx> {
          .                   debug_assert!(!projection_ty.has_escaping_bound_vars());
          .           
          .                   // FIXME(#20304) -- cache
          .           
          .                   let mut selcx = SelectionContext::new(infcx);
          .                   let mut obligations = vec![];
      1,386 ( 0.00%)          let normalized_ty = project::normalize_projection_type(
          .                       &mut selcx,
          .                       param_env,
          .                       projection_ty,
        770 ( 0.00%)              cause,
          .                       0,
          .                       &mut obligations,
          .                   );
          .                   self.register_predicate_obligations(infcx, obligations);
          .           
          .                   debug!(?normalized_ty);
          .           
          .                   normalized_ty
          .               }
          .           
    815,790 ( 0.00%)      fn register_predicate_obligation(
          .                   &mut self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .                   obligation: PredicateObligation<'tcx>,
          .               ) {
          .                   // this helps to reduce duplicate errors, as well as making
          .                   // debug output much nicer to read and so on.
    407,895 ( 0.00%)          let obligation = infcx.resolve_vars_if_possible(obligation);
          .           
          .                   debug!(?obligation, "register_predicate_obligation");
          .           
    815,790 ( 0.00%)          assert!(!infcx.is_in_snapshot() || self.usable_in_snapshot);
          .           
    407,895 ( 0.00%)          super::relationships::update(self, infcx, &obligation);
          .           
          .                   self.predicates
          .                       .register_obligation(PendingPredicateObligation { obligation, stalled_on: vec![] });
    679,825 ( 0.00%)      }
          .           
    591,848 ( 0.00%)      fn select_all_or_error(&mut self, infcx: &InferCtxt<'_, 'tcx>) -> Vec<FulfillmentError<'tcx>> {
          .                   {
     73,981 ( 0.00%)              let errors = self.select_where_possible(infcx);
     73,981 ( 0.00%)              if !errors.is_empty() {
         25 ( 0.00%)                  return errors;
          .                       }
          .                   }
          .           
    369,880 ( 0.00%)          self.predicates.to_errors(CodeAmbiguity).into_iter().map(to_fulfillment_error).collect()
    517,867 ( 0.00%)      }
          .           
  1,455,550 ( 0.00%)      fn select_where_possible(
          .                   &mut self,
          .                   infcx: &InferCtxt<'_, 'tcx>,
          .               ) -> Vec<FulfillmentError<'tcx>> {
          .                   let mut selcx = SelectionContext::new(infcx);
          .                   self.select(&mut selcx)
  1,309,995 ( 0.00%)      }
          .           
      2,145 ( 0.00%)      fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {
          .                   self.predicates.map_pending_obligations(|o| o.obligation.clone())
      2,860 ( 0.00%)      }
          .           
          .               fn relationships(&mut self) -> &mut FxHashMap<ty::TyVid, ty::FoundRelationships> {
        221 ( 0.00%)          &mut self.relationships
        221 ( 0.00%)      }
          .           }
          .           
          .           struct FulfillProcessor<'a, 'b, 'tcx> {
          .               selcx: &'a mut SelectionContext<'b, 'tcx>,
          .               register_region_obligations: bool,
          .           }
          .           
          .           fn mk_pending(os: Vec<PredicateObligation<'_>>) -> Vec<PendingPredicateObligation<'_>> {
-- line 258 ----------------------------------------
-- line 275 ----------------------------------------
          .               #[inline(always)]
          .               fn process_obligation(
          .                   &mut self,
          .                   pending_obligation: &mut Self::Obligation,
          .               ) -> ProcessResult<Self::Obligation, Self::Error> {
          .                   // If we were stalled on some unresolved variables, first check whether
          .                   // any of them have been resolved; if not, don't bother doing more work
          .                   // yet.
143,566,404 ( 0.37%)          let change = match pending_obligation.stalled_on.len() {
          .                       // Match arms are in order of frequency, which matters because this
          .                       // code is so hot. 1 and 0 dominate; 2+ is fairly rare.
          .                       1 => {
 37,730,268 ( 0.10%)                  let infer_var = pending_obligation.stalled_on[0];
 12,576,756 ( 0.03%)                  self.selcx.infcx().ty_or_const_infer_var_changed(infer_var)
          .                       }
          .                       0 => {
          .                           // In this case we haven't changed, but wish to make a change.
          .                           true
          .                       }
          .                       _ => {
          .                           // This `for` loop was once a call to `all()`, but this lower-level
          .                           // form was a perf win. See #64545 for details.
 33,786,810 ( 0.09%)                  (|| {
 67,567,056 ( 0.17%)                      for &infer_var in &pending_obligation.stalled_on {
     23,005 ( 0.00%)                          if self.selcx.infcx().ty_or_const_infer_var_changed(infer_var) {
          .                                       return true;
          .                                   }
          .                               }
          .                               false
          .                           })()
          .                       }
          .                   };
          .           
      8,148 ( 0.00%)          if !change {
          .                       debug!(
          .                           "process_predicate: pending obligation {:?} still stalled on {:?}",
          .                           self.selcx.infcx().resolve_vars_if_possible(pending_obligation.obligation.clone()),
          .                           pending_obligation.stalled_on
          .                       );
          .                       return ProcessResult::Unchanged;
          .                   }
          .           
    657,384 ( 0.00%)          self.progress_changed_obligations(pending_obligation)
          .               }
          .           
          .               fn process_backedge<'c, I>(
          .                   &mut self,
          .                   cycle: I,
          .                   _marker: PhantomData<&'c PendingPredicateObligation<'tcx>>,
          .               ) where
          .                   I: Clone + Iterator<Item = &'c PendingPredicateObligation<'tcx>>,
-- line 325 ----------------------------------------
-- line 333 ----------------------------------------
          .               }
          .           }
          .           
          .           impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {
          .               // The code calling this method is extremely hot and only rarely
          .               // actually uses this, so move this part of the code
          .               // out of that loop.
          .               #[inline(never)]
  2,191,280 ( 0.01%)      fn progress_changed_obligations(
          .                   &mut self,
          .                   pending_obligation: &mut PendingPredicateObligation<'tcx>,
          .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
          .                   pending_obligation.stalled_on.truncate(0);
          .           
          .                   let obligation = &mut pending_obligation.obligation;
          .           
    657,384 ( 0.00%)          if obligation.predicate.has_infer_types_or_consts() {
    104,024 ( 0.00%)              obligation.predicate =
    312,072 ( 0.00%)                  self.selcx.infcx().resolve_vars_if_possible(obligation.predicate);
          .                   }
          .           
          .                   debug!(?obligation, ?obligation.cause, "process_obligation");
          .           
          .                   let infcx = self.selcx.infcx();
          .           
    230,208 ( 0.00%)          let binder = obligation.predicate.kind();
  1,533,896 ( 0.00%)          match binder.no_bound_vars() {
      1,298 ( 0.00%)              None => match binder.skip_binder() {
          .                           // Evaluation will discard candidates using the leak check.
          .                           // This means we need to pass it the bound version of our
          .                           // predicate.
          .                           ty::PredicateKind::Trait(trait_ref) => {
          .                               let trait_obligation = obligation.with(binder.rebind(trait_ref));
          .           
        236 ( 0.00%)                      self.process_trait_obligation(
          .                                   obligation,
        708 ( 0.00%)                          trait_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .                           ty::PredicateKind::Projection(data) => {
          .                               let project_obligation = obligation.with(binder.rebind(data));
          .           
        236 ( 0.00%)                      self.process_projection_obligation(
          .                                   obligation,
        708 ( 0.00%)                          project_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .                           ty::PredicateKind::RegionOutlives(_)
          .                           | ty::PredicateKind::TypeOutlives(_)
          .                           | ty::PredicateKind::WellFormed(_)
          .                           | ty::PredicateKind::ObjectSafe(_)
          .                           | ty::PredicateKind::ClosureKind(..)
-- line 386 ----------------------------------------
-- line 397 ----------------------------------------
          .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
          .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
          .                           }
          .                       },
          .                       Some(pred) => match pred {
          .                           ty::PredicateKind::Trait(data) => {
          .                               let trait_obligation = obligation.with(Binder::dummy(data));
          .           
    539,590 ( 0.00%)                      self.process_trait_obligation(
          .                                   obligation,
  2,374,196 ( 0.01%)                          trait_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .           
          .                           ty::PredicateKind::RegionOutlives(data) => {
     78,636 ( 0.00%)                      match infcx.region_outlives_predicate(&obligation.cause, Binder::dummy(data)) {
     52,424 ( 0.00%)                          Ok(()) => ProcessResult::Changed(vec![]),
          .                                   Err(_) => ProcessResult::Error(CodeSelectionError(Unimplemented)),
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(t_a, r_b)) => {
     34,740 ( 0.00%)                      if self.register_region_obligations {
     86,840 ( 0.00%)                          self.selcx.infcx().register_region_obligation_with_cause(
          .                                       t_a,
          .                                       r_b,
          .                                       &obligation.cause,
          .                                   );
          .                               }
          .                               ProcessResult::Changed(vec![])
          .                           }
          .           
          .                           ty::PredicateKind::Projection(ref data) => {
          .                               let project_obligation = obligation.with(Binder::dummy(*data));
          .           
     39,560 ( 0.00%)                      self.process_projection_obligation(
          .                                   obligation,
    118,680 ( 0.00%)                          project_obligation,
          .                                   &mut pending_obligation.stalled_on,
          .                               )
          .                           }
          .           
          .                           ty::PredicateKind::ObjectSafe(trait_def_id) => {
        920 ( 0.00%)                      if !self.selcx.tcx().is_object_safe(trait_def_id) {
          .                                   ProcessResult::Error(CodeSelectionError(Unimplemented))
          .                               } else {
          .                                   ProcessResult::Changed(vec![])
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::ClosureKind(_, closure_substs, kind) => {
      5,109 ( 0.00%)                      match self.selcx.infcx().closure_kind(closure_substs) {
          .                                   Some(closure_kind) => {
     10,218 ( 0.00%)                              if closure_kind.extends(kind) {
          .                                           ProcessResult::Changed(vec![])
          .                                       } else {
          .                                           ProcessResult::Error(CodeSelectionError(Unimplemented))
          .                                       }
          .                                   }
          .                                   None => ProcessResult::Unchanged,
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::WellFormed(arg) => {
    415,702 ( 0.00%)                      match wf::obligations(
          .                                   self.selcx.infcx(),
    118,772 ( 0.00%)                          obligation.param_env,
    118,772 ( 0.00%)                          obligation.cause.body_id,
    178,158 ( 0.00%)                          obligation.recursion_depth + 1,
          .                                   arg,
          .                                   obligation.cause.span,
          .                               ) {
          .                                   None => {
     53,284 ( 0.00%)                              pending_obligation.stalled_on =
     93,247 ( 0.00%)                                  vec![TyOrConstInferVar::maybe_from_generic_arg(arg).unwrap()];
     26,642 ( 0.00%)                              ProcessResult::Unchanged
          .                                   }
    138,195 ( 0.00%)                          Some(os) => ProcessResult::Changed(mk_pending(os)),
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::Subtype(subtype) => {
     85,880 ( 0.00%)                      match self.selcx.infcx().subtype_predicate(
          .                                   &obligation.cause,
          .                                   obligation.param_env,
          .                                   Binder::dummy(subtype),
          .                               ) {
          .                                   None => {
          .                                       // None means that both are unresolved.
     36,570 ( 0.00%)                              pending_obligation.stalled_on = vec![
      7,314 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.a).unwrap(),
     14,628 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(subtype.b).unwrap(),
          .                                       ];
          .                                       ProcessResult::Unchanged
          .                                   }
          .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
          .                                   Some(Err(err)) => {
          .                                       let expected_found =
          .                                           ExpectedFound::new(subtype.a_is_expected, subtype.a, subtype.b);
          .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
-- line 497 ----------------------------------------
-- line 498 ----------------------------------------
          .                                           expected_found,
          .                                           err,
          .                                       ))
          .                                   }
          .                               }
          .                           }
          .           
          .                           ty::PredicateKind::Coerce(coerce) => {
      5,200 ( 0.00%)                      match self.selcx.infcx().coerce_predicate(
          .                                   &obligation.cause,
          .                                   obligation.param_env,
          .                                   Binder::dummy(coerce),
          .                               ) {
          .                                   None => {
          .                                       // None means that both are unresolved.
      1,575 ( 0.00%)                              pending_obligation.stalled_on = vec![
        315 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.a).unwrap(),
        630 ( 0.00%)                                  TyOrConstInferVar::maybe_from_ty(coerce.b).unwrap(),
          .                                       ];
          .                                       ProcessResult::Unchanged
          .                                   }
          .                                   Some(Ok(ok)) => ProcessResult::Changed(mk_pending(ok.obligations)),
          .                                   Some(Err(err)) => {
          .                                       let expected_found = ExpectedFound::new(false, coerce.a, coerce.b);
          .                                       ProcessResult::Error(FulfillmentErrorCode::CodeSubtypeError(
          .                                           expected_found,
-- line 523 ----------------------------------------
-- line 639 ----------------------------------------
          .                                   }
          .                               }
          .                           }
          .                           ty::PredicateKind::TypeWellFormedFromEnv(..) => {
          .                               bug!("TypeWellFormedFromEnv is only used for Chalk")
          .                           }
          .                       },
          .                   }
  1,972,152 ( 0.01%)      }
          .           
  2,051,563 ( 0.01%)      #[instrument(level = "debug", skip(self, obligation, stalled_on))]
          .               fn process_trait_obligation(
          .                   &mut self,
          .                   obligation: &PredicateObligation<'tcx>,
          .                   trait_obligation: TraitObligation<'tcx>,
          .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
          .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
    107,977 ( 0.00%)          let infcx = self.selcx.infcx();
    323,931 ( 0.00%)          if obligation.predicate.is_global() {
          .                       // no type variables present, can use evaluation for better caching.
          .                       // FIXME: consider caching errors too.
     74,226 ( 0.00%)              if infcx.predicate_must_hold_considering_regions(obligation) {
          .                           debug!(
          .                               "selecting trait at depth {} evaluated to holds",
          .                               obligation.recursion_depth
          .                           );
     66,690 ( 0.00%)                  return ProcessResult::Changed(vec![]);
          .                       }
          .                   }
          .           
    522,408 ( 0.00%)          match self.selcx.select(&trait_obligation) {
          .                       Ok(Some(impl_source)) => {
          .                           debug!("selecting trait at depth {} yielded Ok(Some)", obligation.recursion_depth);
    965,178 ( 0.00%)                  ProcessResult::Changed(mk_pending(impl_source.nested_obligations()))
          .                       }
          .                       Ok(None) => {
          .                           debug!("selecting trait at depth {} yielded Ok(None)", obligation.recursion_depth);
          .           
          .                           // This is a bit subtle: for the most part, the
          .                           // only reason we can fail to make progress on
          .                           // trait selection is because we don't have enough
          .                           // information about the types in the trait.
          .                           stalled_on.clear();
          .                           stalled_on.extend(substs_infer_vars(
          .                               self.selcx,
     21,003 ( 0.00%)                      trait_obligation.predicate.map_bound(|pred| pred.trait_ref.substs),
          .                           ));
          .           
          .                           debug!(
          .                               "process_predicate: pending obligation {:?} now stalled on {:?}",
          .                               infcx.resolve_vars_if_possible(obligation.clone()),
          .                               stalled_on
          .                           );
          .           
     21,003 ( 0.00%)                  ProcessResult::Unchanged
          .                       }
          .                       Err(selection_err) => {
          .                           debug!("selecting trait at depth {} yielded Err", obligation.recursion_depth);
          .           
        112 ( 0.00%)                  ProcessResult::Error(CodeSelectionError(selection_err))
          .                       }
          .                   }
          .               }
          .           
     87,681 ( 0.00%)      fn process_projection_obligation(
          .                   &mut self,
          .                   obligation: &PredicateObligation<'tcx>,
          .                   project_obligation: PolyProjectionObligation<'tcx>,
          .                   stalled_on: &mut Vec<TyOrConstInferVar<'tcx>>,
          .               ) -> ProcessResult<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>> {
      7,971 ( 0.00%)          let tcx = self.selcx.tcx();
          .           
     23,913 ( 0.00%)          if obligation.predicate.is_global() {
          .                       // no type variables present, can use evaluation for better caching.
          .                       // FIXME: consider caching errors too.
        384 ( 0.00%)              if self.selcx.infcx().predicate_must_hold_considering_regions(obligation) {
        834 ( 0.00%)                  if let Some(key) = ProjectionCacheKey::from_poly_projection_predicate(
          .                               &mut self.selcx,
        973 ( 0.00%)                      project_obligation.predicate,
          .                           ) {
          .                               // If `predicate_must_hold_considering_regions` succeeds, then we've
          .                               // evaluated all sub-obligations. We can therefore mark the 'root'
          .                               // obligation as complete, and skip evaluating sub-obligations.
        834 ( 0.00%)                      self.selcx
          .                                   .infcx()
          .                                   .inner
          .                                   .borrow_mut()
          .                                   .projection_cache()
          .                                   .complete(key, EvaluationResult::EvaluatedToOk);
          .                           }
        278 ( 0.00%)                  return ProcessResult::Changed(vec![]);
          .                       } else {
          .                           tracing::debug!("Does NOT hold: {:?}", obligation);
          .                       }
          .                   }
          .           
     54,824 ( 0.00%)          match project::poly_project_and_unify_type(self.selcx, &project_obligation) {
          .                       Ok(Ok(Some(os))) => ProcessResult::Changed(mk_pending(os)),
          .                       Ok(Ok(None)) => {
          .                           stalled_on.clear();
          .                           stalled_on.extend(substs_infer_vars(
          .                               self.selcx,
      3,659 ( 0.00%)                      project_obligation.predicate.map_bound(|pred| pred.projection_ty.substs),
          .                           ));
      3,659 ( 0.00%)                  ProcessResult::Unchanged
          .                       }
          .                       // Let the caller handle the recursion
          .                       Ok(Err(project::InProgress)) => ProcessResult::Changed(mk_pending(vec![
          .                           project_obligation.with(project_obligation.predicate.to_predicate(tcx)),
          .                       ])),
          .                       Err(e) => ProcessResult::Error(CodeProjectionError(e)),
          .                   }
     63,768 ( 0.00%)      }
          .           }
          .           
          .           /// Returns the set of inference variables contained in `substs`.
          .           fn substs_infer_vars<'a, 'tcx>(
          .               selcx: &mut SelectionContext<'a, 'tcx>,
          .               substs: ty::Binder<'tcx, SubstsRef<'tcx>>,
          .           ) -> impl Iterator<Item = TyOrConstInferVar<'tcx>> {
          .               selcx
          .                   .infcx()
          .                   .resolve_vars_if_possible(substs)
          .                   .skip_binder() // ok because this check doesn't care about regions
          .                   .iter()
          .                   .filter(|arg| arg.has_infer_types_or_consts())
          .                   .flat_map(|arg| {
    133,495 ( 0.00%)              let mut walker = arg.walk();
    240,466 ( 0.00%)              while let Some(c) = walker.next() {
     26,738 ( 0.00%)                  if !c.has_infer_types_or_consts() {
          .                               walker.visited.remove(&c);
         10 ( 0.00%)                      walker.skip_current_subtree();
          .                           }
          .                       }
          .                       walker.visited.into_iter()
          .                   })
          .                   .filter_map(TyOrConstInferVar::maybe_from_generic_arg)
          .           }
          .           
          .           fn to_fulfillment_error<'tcx>(
          .               error: Error<PendingPredicateObligation<'tcx>, FulfillmentErrorCode<'tcx>>,
          .           ) -> FulfillmentError<'tcx> {
          .               let mut iter = error.backtrace.into_iter();
          8 ( 0.00%)      let obligation = iter.next().unwrap().obligation;
          .               // The root obligation is the last item in the backtrace - if there's only
          .               // one item, then it's the same as the main obligation
          .               let root_obligation = iter.next_back().map_or_else(|| obligation.clone(), |e| e.obligation);
        240 ( 0.00%)      FulfillmentError::new(obligation, error.error, root_obligation)
          .           }

 97,769,645 ( 0.25%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_trait_selection/src/traits/fulfill.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs
--------------------------------------------------------------------------------
Ir                   

-- line 13 ----------------------------------------
          .           ///
          .           /// Purpose: avoid mixing indexes for different bitvector domains.
          .           pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {
          .               fn new(idx: usize) -> Self;
          .           
          .               fn index(self) -> usize;
          .           
          .               fn increment_by(&mut self, amount: usize) {
    192,996 ( 0.00%)          *self = self.plus(amount);
          .               }
          .           
          .               fn plus(self, amount: usize) -> Self {
    284,530 ( 0.00%)          Self::new(self.index() + amount)
          .               }
          .           }
          .           
          .           impl Idx for usize {
          .               #[inline]
          .               fn new(idx: usize) -> Self {
          .                   idx
          .               }
-- line 33 ----------------------------------------
-- line 35 ----------------------------------------
          .               fn index(self) -> usize {
          .                   self
          .               }
          .           }
          .           
          .           impl Idx for u32 {
          .               #[inline]
          .               fn new(idx: usize) -> Self {
     18,557 ( 0.00%)          assert!(idx <= u32::MAX as usize);
          .                   idx as u32
          .               }
          .               #[inline]
          .               fn index(self) -> usize {
        520 ( 0.00%)          self as usize
          .               }
          .           }
          .           
          .           /// Creates a struct type `S` that can be used as an index with
          .           /// `IndexVec` and so on.
          .           ///
          .           /// There are two ways of interacting with these indices:
          .           ///
-- line 56 ----------------------------------------
-- line 71 ----------------------------------------
          .           
          .               // Use default constants
          .               ($(#[$attrs:meta])* $v:vis struct $name:ident { .. }) => (
          .                   $crate::newtype_index!(
          .                       // Leave out derives marker so we can use its absence to ensure it comes first
          .                       @attrs        [$(#[$attrs])*]
          .                       @type         [$name]
          .                       // shave off 256 indices at the end to allow space for packing these indices into enums
    474,995 ( 0.00%)              @max          [0xFFFF_FF00]
          .                       @vis          [$v]
          .                       @debug_format ["{}"]);
          .               );
          .           
          .               // Define any constants
          .               ($(#[$attrs:meta])* $v:vis struct $name:ident { $($tokens:tt)+ }) => (
          .                   $crate::newtype_index!(
          .                       // Leave out derives marker so we can use its absence to ensure it comes first
          .                       @attrs        [$(#[$attrs])*]
          .                       @type         [$name]
          .                       // shave off 256 indices at the end to allow space for packing these indices into enums
  2,220,789 ( 0.01%)              @max          [0xFFFF_FF00]
          .                       @vis          [$v]
          .                       @debug_format ["{}"]
          .                                     $($tokens)+);
          .               );
          .           
          .               // ---- private rules ----
          .           
          .               // Base case, user-defined constants (if any) have already been defined
-- line 99 ----------------------------------------
-- line 102 ----------------------------------------
          .                @type         [$type:ident]
          .                @max          [$max:expr]
          .                @vis          [$v:vis]
          .                @debug_format [$debug_format:tt]) => (
          .                   $(#[$attrs])*
          .                   #[derive(Copy, PartialEq, Eq, Hash, PartialOrd, Ord, $($derives),*)]
          .                   #[rustc_layout_scalar_valid_range_end($max)]
          .                   $v struct $type {
104,791,847 ( 0.27%)              private: u32
          .                   }
          .           
          .                   impl Clone for $type {
          .                       #[inline]
          .                       fn clone(&self) -> Self {
          .                           *self
          .                       }
          .                   }
-- line 118 ----------------------------------------
-- line 126 ----------------------------------------
          .           
          .                       /// Creates a new index from a given `usize`.
          .                       ///
          .                       /// # Panics
          .                       ///
          .                       /// Will panic if `value` exceeds `MAX`.
          .                       #[inline]
          .                       $v const fn from_usize(value: usize) -> Self {
 27,437,259 ( 0.07%)                  assert!(value <= ($max as usize));
          .                           // SAFETY: We just checked that `value <= max`.
          .                           unsafe {
     10,093 ( 0.00%)                      Self::from_u32_unchecked(value as u32)
          .                           }
          .                       }
          .           
          .                       /// Creates a new index from a given `u32`.
          .                       ///
          .                       /// # Panics
          .                       ///
          .                       /// Will panic if `value` exceeds `MAX`.
          .                       #[inline]
          .                       $v const fn from_u32(value: u32) -> Self {
  2,695,537 ( 0.01%)                  assert!(value <= $max);
          .                           // SAFETY: We just checked that `value <= max`.
          .                           unsafe {
          .                               Self::from_u32_unchecked(value)
          .                           }
          .                       }
          .           
          .                       /// Creates a new index from a given `u32`.
          .                       ///
-- line 156 ----------------------------------------
-- line 175 ----------------------------------------
          .                       #[inline]
          .                       $v const fn as_u32(self) -> u32 {
          .                           self.private
          .                       }
          .           
          .                       /// Extracts the value of this index as a `usize`.
          .                       #[inline]
          .                       $v const fn as_usize(self) -> usize {
 17,803,935 ( 0.05%)                  self.as_u32() as usize
          .                       }
          .                   }
          .           
          .                   impl std::ops::Add<usize> for $type {
          .                       type Output = Self;
          .           
         98 ( 0.00%)              fn add(self, other: usize) -> Self {
     28,654 ( 0.00%)                  Self::from_usize(self.index() + other)
        196 ( 0.00%)              }
          .                   }
          .           
          .                   impl $crate::vec::Idx for $type {
          .                       #[inline]
          .                       fn new(value: usize) -> Self {
          .                           Self::from_usize(value)
          .                       }
          .           
-- line 200 ----------------------------------------
-- line 269 ----------------------------------------
          .                @debug_format [custom]) => ();
          .           
          .               // base case for handle_debug, no debug overrides found, so use default
          .               (@handle_debug
          .                @derives      []
          .                @type         [$type:ident]
          .                @debug_format [$debug_format:tt]) => (
          .                   impl ::std::fmt::Debug for $type {
     98,220 ( 0.00%)              fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    392,880 ( 0.00%)                  write!(fmt, $debug_format, self.as_u32())
     98,220 ( 0.00%)              }
          .                   }
          .               );
          .           
          .               // Debug is requested for derive, don't generate any Debug implementation.
          .               (@handle_debug
          .                @derives      [Debug, $($derives:ident,)*]
          .                @type         [$type:ident]
          .                @debug_format [$debug_format:tt]) => ();
-- line 287 ----------------------------------------
-- line 390 ----------------------------------------
          .                       @vis          [$v]
          .                       @debug_format [$debug_format]
          .                                     $($tokens)*);
          .                   $crate::newtype_index!(@serializable $type);
          .               );
          .           
          .               (@serializable $type:ident) => (
          .                   impl<D: ::rustc_serialize::Decoder> ::rustc_serialize::Decodable<D> for $type {
        962 ( 0.00%)              fn decode(d: &mut D) -> Self {
    197,311 ( 0.00%)                  Self::from_u32(d.read_u32())
      1,924 ( 0.00%)              }
          .                   }
          .                   impl<E: ::rustc_serialize::Encoder> ::rustc_serialize::Encodable<E> for $type {
  3,580,720 ( 0.01%)              fn encode(&self, e: &mut E) -> Result<(), E::Error> {
          .                           e.emit_u32(self.private)
  4,296,864 ( 0.01%)              }
          .                   }
          .               );
          .           
          .               // Rewrite final without comma to one that includes comma
          .               (@derives      [$($derives:ident,)*]
          .                @attrs        [$(#[$attrs:meta])*]
          .                @type         [$type:ident]
          .                @max          [$max:expr]
-- line 413 ----------------------------------------
-- line 499 ----------------------------------------
          .                       @type         [$type]
          .                       @max          [$max]
          .                       @vis          [$v]
          .                       @debug_format [$debug_format]
          .                                     $($tokens)*);
          .               );
          .           }
          .           
    160,044 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Hash)]
          .           pub struct IndexVec<I: Idx, T> {
     39,712 ( 0.00%)      pub raw: Vec<T>,
          3 ( 0.00%)      _marker: PhantomData<fn(&I)>,
          .           }
          .           
          .           // Whether `IndexVec` is `Send` depends only on the data,
          .           // not the phantom data.
          .           unsafe impl<I: Idx, T> Send for IndexVec<I, T> where T: Send {}
          .           
          .           impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for IndexVec<I, T> {
          .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
-- line 518 ----------------------------------------
-- line 523 ----------------------------------------
          .           impl<S: Encoder, I: Idx, T: Encodable<S>> Encodable<S> for &IndexVec<I, T> {
          .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
          .                   Encodable::encode(&self.raw, s)
          .               }
          .           }
          .           
          .           impl<D: Decoder, I: Idx, T: Decodable<D>> Decodable<D> for IndexVec<I, T> {
          .               fn decode(d: &mut D) -> Self {
     13,728 ( 0.00%)          IndexVec { raw: Decodable::decode(d), _marker: PhantomData }
          .               }
          .           }
          .           
          .           impl<I: Idx, T: fmt::Debug> fmt::Debug for IndexVec<I, T> {
          .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
          .                   fmt::Debug::fmt(&self.raw, fmt)
          .               }
          .           }
          .           
          .           impl<I: Idx, T> IndexVec<I, T> {
          .               #[inline]
          .               pub fn new() -> Self {
     65,937 ( 0.00%)          IndexVec { raw: Vec::new(), _marker: PhantomData }
          .               }
          .           
          .               #[inline]
          .               pub fn from_raw(raw: Vec<T>) -> Self {
    217,716 ( 0.00%)          IndexVec { raw, _marker: PhantomData }
          .               }
          .           
          .               #[inline]
          .               pub fn with_capacity(capacity: usize) -> Self {
    116,553 ( 0.00%)          IndexVec { raw: Vec::with_capacity(capacity), _marker: PhantomData }
          .               }
          .           
          .               #[inline]
          .               pub fn from_elem<S>(elem: T, universe: &IndexVec<I, S>) -> Self
          .               where
          .                   T: Clone,
          .               {
    478,309 ( 0.00%)          IndexVec { raw: vec![elem; universe.len()], _marker: PhantomData }
          .               }
          .           
          .               #[inline]
          .               pub fn from_elem_n(elem: T, n: usize) -> Self
          .               where
          .                   T: Clone,
          .               {
    984,853 ( 0.00%)          IndexVec { raw: vec![elem; n], _marker: PhantomData }
          .               }
          .           
          .               /// Create an `IndexVec` with `n` elements, where the value of each
          .               /// element is the result of `func(i)`. (The underlying vector will
          .               /// be allocated only once, with a capacity of at least `n`.)
          .               #[inline]
          .               pub fn from_fn_n(func: impl FnMut(I) -> T, n: usize) -> Self {
          .                   let indices = (0..n).map(I::new);
          .                   Self::from_raw(indices.map(func).collect())
          .               }
          .           
          .               #[inline]
      1,903 ( 0.00%)      pub fn push(&mut self, d: T) -> I {
          .                   let idx = I::new(self.len());
  4,576,402 ( 0.01%)          self.raw.push(d);
          .                   idx
      3,083 ( 0.00%)      }
          .           
          .               #[inline]
          .               pub fn pop(&mut self) -> Option<T> {
          .                   self.raw.pop()
          .               }
          .           
          .               #[inline]
          .               pub fn len(&self) -> usize {
  4,732,405 ( 0.01%)          self.raw.len()
          .               }
          .           
          .               /// Gives the next index that will be assigned when `push` is
          .               /// called.
          .               #[inline]
          .               pub fn next_index(&self) -> I {
          .                   I::new(self.len())
          .               }
-- line 604 ----------------------------------------
-- line 612 ----------------------------------------
          .               pub fn into_iter(self) -> vec::IntoIter<T> {
          .                   self.raw.into_iter()
          .               }
          .           
          .               #[inline]
          .               pub fn into_iter_enumerated(
          .                   self,
          .               ) -> impl DoubleEndedIterator<Item = (I, T)> + ExactSizeIterator {
  4,857,866 ( 0.01%)          self.raw.into_iter().enumerate().map(|(n, t)| (I::new(n), t))
          .               }
          .           
          .               #[inline]
          .               pub fn iter(&self) -> slice::Iter<'_, T> {
          .                   self.raw.iter()
          .               }
          .           
          .               #[inline]
-- line 628 ----------------------------------------
-- line 692 ----------------------------------------
          .           
          .               #[inline]
          .               pub fn get_mut(&mut self, index: I) -> Option<&mut T> {
          .                   self.raw.get_mut(index.index())
          .               }
          .           
          .               /// Returns mutable references to two distinct elements, a and b. Panics if a == b.
          .               #[inline]
    197,635 ( 0.00%)      pub fn pick2_mut(&mut self, a: I, b: I) -> (&mut T, &mut T) {
          .                   let (ai, bi) = (a.index(), b.index());
    395,270 ( 0.00%)          assert!(ai != bi);
          .           
    197,635 ( 0.00%)          if ai < bi {
          .                       let (c1, c2) = self.raw.split_at_mut(bi);
    822,044 ( 0.00%)              (&mut c1[ai], &mut c2[0])
          .                   } else {
         75 ( 0.00%)              let (c2, c1) = self.pick2_mut(b, a);
          .                       (c1, c2)
          .                   }
    592,905 ( 0.00%)      }
          .           
          .               /// Returns mutable references to three distinct elements or panics otherwise.
          .               #[inline]
          .               pub fn pick3_mut(&mut self, a: I, b: I, c: I) -> (&mut T, &mut T, &mut T) {
          .                   let (ai, bi, ci) = (a.index(), b.index(), c.index());
          .                   assert!(ai != bi && bi != ci && ci != ai);
          .                   let len = self.raw.len();
          .                   assert!(ai < len && bi < len && ci < len);
-- line 719 ----------------------------------------
-- line 726 ----------------------------------------
          .               }
          .           
          .               /// Grows the index vector so that it contains an entry for
          .               /// `elem`; if that is already true, then has no
          .               /// effect. Otherwise, inserts new values as needed by invoking
          .               /// `fill_value`.
          .               #[inline]
          .               pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {
     36,966 ( 0.00%)          let min_new_len = elem.index() + 1;
  1,705,569 ( 0.00%)          if self.len() < min_new_len {
     69,922 ( 0.00%)              self.raw.resize_with(min_new_len, fill_value);
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub fn resize_to_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {
          .                   let min_new_len = elem.index() + 1;
          .                   self.raw.resize_with(min_new_len, fill_value);
          .               }
-- line 744 ----------------------------------------
-- line 823 ----------------------------------------
          .           }
          .           
          .           impl<I: Idx, T> FromIterator<T> for IndexVec<I, T> {
          .               #[inline]
          .               fn from_iter<J>(iter: J) -> Self
          .               where
          .                   J: IntoIterator<Item = T>,
          .               {
    590,279 ( 0.00%)          IndexVec { raw: FromIterator::from_iter(iter), _marker: PhantomData }
          .               }
          .           }
          .           
          .           impl<I: Idx, T> IntoIterator for IndexVec<I, T> {
          .               type Item = T;
          .               type IntoIter = vec::IntoIter<T>;
          .           
          .               #[inline]
-- line 839 ----------------------------------------

 10,781,672 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/vec.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs
--------------------------------------------------------------------------------
Ir                   

-- line 44 ----------------------------------------
          .           /// Convert from a specific kind of undo to the more general UndoLog
          .           impl<'tcx> From<Instantiate> for UndoLog<'tcx> {
          .               fn from(l: Instantiate) -> Self {
          .                   UndoLog::Values(sv::UndoLog::Other(l))
          .               }
          .           }
          .           
          .           impl<'tcx> Rollback<UndoLog<'tcx>> for TypeVariableStorage<'tcx> {
    366,560 ( 0.00%)      fn reverse(&mut self, undo: UndoLog<'tcx>) {
  1,555,988 ( 0.00%)          match undo {
    276,812 ( 0.00%)              UndoLog::EqRelation(undo) => self.eq_relations.reverse(undo),
    181,932 ( 0.00%)              UndoLog::SubRelation(undo) => self.sub_relations.reverse(undo),
    274,376 ( 0.00%)              UndoLog::Values(undo) => self.values.reverse(undo),
          .                   }
    733,120 ( 0.00%)      }
          .           }
          .           
          .           pub struct TypeVariableStorage<'tcx> {
          .               values: sv::SnapshotVecStorage<Delegate>,
          .           
          .               /// Two variables are unified in `eq_relations` when we have a
          .               /// constraint `?X == ?Y`. This table also stores, for each key,
          .               /// the known value.
-- line 66 ----------------------------------------
-- line 136 ----------------------------------------
          .               DynReturnFn,
          .               LatticeVariable,
          .           }
          .           
          .           pub(crate) struct TypeVariableData {
          .               origin: TypeVariableOrigin,
          .           }
          .           
  3,154,842 ( 0.01%)  #[derive(Copy, Clone, Debug)]
          .           pub enum TypeVariableValue<'tcx> {
          .               Known { value: Ty<'tcx> },
          .               Unknown { universe: ty::UniverseIndex },
          .           }
          .           
          .           impl<'tcx> TypeVariableValue<'tcx> {
          .               /// If this value is known, returns the type it is known to be.
          .               /// Otherwise, `None`.
          .               pub fn known(&self) -> Option<Ty<'tcx>> {
  2,008,618 ( 0.01%)          match *self {
          .                       TypeVariableValue::Unknown { .. } => None,
          .                       TypeVariableValue::Known { value } => Some(value),
          .                   }
          .               }
          .           
          .               pub fn is_unknown(&self) -> bool {
          .                   match *self {
          .                       TypeVariableValue::Unknown { .. } => true,
-- line 162 ----------------------------------------
-- line 166 ----------------------------------------
          .           }
          .           
          .           pub(crate) struct Instantiate;
          .           
          .           pub(crate) struct Delegate;
          .           
          .           impl<'tcx> TypeVariableStorage<'tcx> {
          .               pub fn new() -> TypeVariableStorage<'tcx> {
    212,142 ( 0.00%)          TypeVariableStorage {
          .                       values: sv::SnapshotVecStorage::new(),
          .                       eq_relations: ut::UnificationTableStorage::new(),
          .                       sub_relations: ut::UnificationTableStorage::new(),
          .                   }
          .               }
          .           
          .               #[inline]
          .               pub(crate) fn with_log<'a>(
-- line 182 ----------------------------------------
-- line 188 ----------------------------------------
          .           }
          .           
          .           impl<'tcx> TypeVariableTable<'_, 'tcx> {
          .               /// Returns the origin that was given when `vid` was created.
          .               ///
          .               /// Note that this function does not return care whether
          .               /// `vid` has been unified with something else or not.
          .               pub fn var_origin(&self, vid: ty::TyVid) -> &TypeVariableOrigin {
     11,324 ( 0.00%)          &self.storage.values.get(vid.as_usize()).origin
          .               }
          .           
          .               /// Records that `a == b`, depending on `dir`.
          .               ///
          .               /// Precondition: neither `a` nor `b` are known.
          .               pub fn equate(&mut self, a: ty::TyVid, b: ty::TyVid) {
          .                   debug_assert!(self.probe(a).is_unknown());
          .                   debug_assert!(self.probe(b).is_unknown());
     37,492 ( 0.00%)          self.eq_relations().union(a, b);
     32,136 ( 0.00%)          self.sub_relations().union(a, b);
          .               }
          .           
          .               /// Records that `a <: b`, depending on `dir`.
          .               ///
          .               /// Precondition: neither `a` nor `b` are known.
          .               pub fn sub(&mut self, a: ty::TyVid, b: ty::TyVid) {
          .                   debug_assert!(self.probe(a).is_unknown());
          .                   debug_assert!(self.probe(b).is_unknown());
     85,083 ( 0.00%)          self.sub_relations().union(a, b);
          .               }
          .           
          .               /// Instantiates `vid` with the type `ty`.
          .               ///
          .               /// Precondition: `vid` must not have been previously instantiated.
    656,540 ( 0.00%)      pub fn instantiate(&mut self, vid: ty::TyVid, ty: Ty<'tcx>) {
          .                   let vid = self.root_var(vid);
          .                   debug_assert!(self.probe(vid).is_unknown());
          .                   debug_assert!(
          .                       self.eq_relations().probe_value(vid).is_unknown(),
          .                       "instantiating type variable `{:?}` twice: new-value = {:?}, old-value={:?}",
          .                       vid,
          .                       ty,
          .                       self.eq_relations().probe_value(vid)
          .                   );
    919,156 ( 0.00%)          self.eq_relations().union_value(vid, TypeVariableValue::Known { value: ty });
          .           
          .                   // Hack: we only need this so that `types_escaping_snapshot`
          .                   // can see what has been unified; see the Delegate impl for
          .                   // more details.
          .                   self.undo_log.push(Instantiate);
    656,540 ( 0.00%)      }
          .           
          .               /// Creates a new type variable.
          .               ///
          .               /// - `diverging`: indicates if this is a "diverging" type
          .               ///   variable, e.g.,  one created as the type of a `return`
          .               ///   expression. The code in this module doesn't care if a
          .               ///   variable is diverging, but the main Rust type-checker will
          .               ///   sometimes "unify" such variables with the `!` or `()` types.
          .               /// - `origin`: indicates *why* the type variable was created.
          .               ///   The code in this module doesn't care, but it can be useful
          .               ///   for improving error messages.
    859,656 ( 0.00%)      pub fn new_var(
          .                   &mut self,
          .                   universe: ty::UniverseIndex,
          .                   origin: TypeVariableOrigin,
          .               ) -> ty::TyVid {
  1,289,484 ( 0.00%)          let eq_key = self.eq_relations().new_key(TypeVariableValue::Unknown { universe });
          .           
    716,380 ( 0.00%)          let sub_key = self.sub_relations().new_key(());
    143,276 ( 0.00%)          assert_eq!(eq_key.vid, sub_key);
          .           
  1,289,484 ( 0.00%)          let index = self.values().push(TypeVariableData { origin });
    573,104 ( 0.00%)          assert_eq!(eq_key.vid.as_u32(), index as u32);
          .           
          .                   debug!("new_var(index={:?}, universe={:?}, origin={:?}", eq_key.vid, universe, origin,);
          .           
          .                   eq_key.vid
  1,002,932 ( 0.00%)      }
          .           
          .               /// Returns the number of type variables created thus far.
          .               pub fn num_vars(&self) -> usize {
      9,859 ( 0.00%)          self.storage.values.len()
          .               }
          .           
          .               /// Returns the "root" variable of `vid` in the `eq_relations`
          .               /// equivalence table. All type variables that have been equated
          .               /// will yield the same root variable (per the union-find
          .               /// algorithm), so `root_var(a) == root_var(b)` implies that `a ==
          .               /// b` (transitively).
          .               pub fn root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
    546,369 ( 0.00%)          self.eq_relations().find(vid).vid
          .               }
          .           
          .               /// Returns the "root" variable of `vid` in the `sub_relations`
          .               /// equivalence table. All type variables that have been are
          .               /// related via equality or subtyping will yield the same root
          .               /// variable (per the union-find algorithm), so `sub_root_var(a)
          .               /// == sub_root_var(b)` implies that:
          .               ///
          .               ///     exists X. (a <: X || X <: a) && (b <: X || X <: b)
      2,006 ( 0.00%)      pub fn sub_root_var(&mut self, vid: ty::TyVid) -> ty::TyVid {
    437,043 ( 0.00%)          self.sub_relations().find(vid)
      4,012 ( 0.00%)      }
          .           
          .               /// Returns `true` if `a` and `b` have same "sub-root" (i.e., exists some
          .               /// type X such that `forall i in {a, b}. (i <: X || X <: i)`.
          .               pub fn sub_unified(&mut self, a: ty::TyVid, b: ty::TyVid) -> bool {
          .                   self.sub_root_var(a) == self.sub_root_var(b)
          .               }
          .           
          .               /// Retrieves the type to which `vid` has been instantiated, if
          .               /// any.
  7,187,045 ( 0.02%)      pub fn probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
          .                   self.inlined_probe(vid)
  7,187,045 ( 0.02%)      }
          .           
          .               /// An always-inlined variant of `probe`, for very hot call sites.
          .               #[inline(always)]
          .               pub fn inlined_probe(&mut self, vid: ty::TyVid) -> TypeVariableValue<'tcx> {
 73,010,868 ( 0.19%)          self.eq_relations().inlined_probe_value(vid)
          .               }
          .           
          .               /// If `t` is a type-inference variable, and it has been
          .               /// instantiated, then return the with which it was
          .               /// instantiated. Otherwise, returns `t`.
          .               pub fn replace_if_possible(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  1,673,146 ( 0.00%)          match *t.kind() {
  1,190,239 ( 0.00%)              ty::Infer(ty::TyVar(v)) => match self.probe(v) {
          .                           TypeVariableValue::Unknown { .. } => t,
          .                           TypeVariableValue::Known { value } => value,
          .                       },
          .                       _ => t,
          .                   }
          .               }
          .           
          .               #[inline]
-- line 323 ----------------------------------------
-- line 324 ----------------------------------------
          .               fn values(
          .                   &mut self,
          .               ) -> sv::SnapshotVec<Delegate, &mut Vec<TypeVariableData>, &mut InferCtxtUndoLogs<'tcx>> {
          .                   self.storage.values.with_log(self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn eq_relations(&mut self) -> super::UnificationTable<'_, 'tcx, TyVidEqKey<'tcx>> {
 40,260,175 ( 0.10%)          self.storage.eq_relations.with_log(self.undo_log)
          .               }
          .           
          .               #[inline]
          .               fn sub_relations(&mut self) -> super::UnificationTable<'_, 'tcx, ty::TyVid> {
    338,683 ( 0.00%)          self.storage.sub_relations.with_log(self.undo_log)
          .               }
          .           
          .               /// Returns a range of the type variables created during the snapshot.
     49,295 ( 0.00%)      pub fn vars_since_snapshot(
          .                   &mut self,
          .                   value_count: usize,
          .               ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {
          .                   let range = TyVid::from_usize(value_count)..TyVid::from_usize(self.num_vars());
     59,154 ( 0.00%)          (
          .                       range.start..range.end,
          .                       (range.start.as_usize()..range.end.as_usize())
          .                           .map(|index| self.storage.values.get(index).origin)
          .                           .collect(),
          .                   )
     59,154 ( 0.00%)      }
          .           
          .               /// Returns indices of all variables that are not yet
          .               /// instantiated.
          .               pub fn unsolved_variables(&mut self) -> Vec<ty::TyVid> {
          .                   (0..self.storage.values.len())
          .                       .filter_map(|i| {
          .                           let vid = ty::TyVid::from_usize(i);
    340,652 ( 0.00%)                  match self.probe(vid) {
          .                               TypeVariableValue::Unknown { .. } => Some(vid),
          .                               TypeVariableValue::Known { .. } => None,
          .                           }
          .                       })
          .                       .collect()
          .               }
          .           }
          .           
-- line 368 ----------------------------------------
-- line 391 ----------------------------------------
          .           /// These structs (a newtyped TyVid) are used as the unification key
          .           /// for the `eq_relations`; they carry a `TypeVariableValue` along
          .           /// with them.
          .           #[derive(Copy, Clone, Debug, PartialEq, Eq)]
          .           pub(crate) struct TyVidEqKey<'tcx> {
          .               vid: ty::TyVid,
          .           
          .               // in the table, we map each ty-vid to one of these:
152,253,412 ( 0.39%)      phantom: PhantomData<TypeVariableValue<'tcx>>,
          .           }
          .           
          .           impl<'tcx> From<ty::TyVid> for TyVidEqKey<'tcx> {
          .               #[inline] // make this function eligible for inlining - it is quite hot.
          .               fn from(vid: ty::TyVid) -> Self {
          .                   TyVidEqKey { vid, phantom: PhantomData }
          .               }
          .           }
-- line 407 ----------------------------------------
-- line 419 ----------------------------------------
          .                   "TyVidEqKey"
          .               }
          .           }
          .           
          .           impl<'tcx> ut::UnifyValue for TypeVariableValue<'tcx> {
          .               type Error = ut::NoError;
          .           
          .               fn unify_values(value1: &Self, value2: &Self) -> Result<Self, ut::NoError> {
    552,007 ( 0.00%)          match (value1, value2) {
          .                       // We never equate two type variables, both of which
          .                       // have known types.  Instead, we recursively equate
          .                       // those types.
          .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Known { .. }) => {
          .                           bug!("equating two type variables, both of which have known types")
          .                       }
          .           
          .                       // If one side is known, prefer that one.
          .                       (&TypeVariableValue::Known { .. }, &TypeVariableValue::Unknown { .. }) => Ok(*value1),
          .                       (&TypeVariableValue::Unknown { .. }, &TypeVariableValue::Known { .. }) => Ok(*value2),
          .           
          .                       // If both sides are *unknown*, it hardly matters, does it?
          .                       (
      5,355 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe1 },
      5,355 ( 0.00%)                  &TypeVariableValue::Unknown { universe: universe2 },
          .                       ) => {
          .                           // If we unify two unbound variables, ?T and ?U, then whatever
          .                           // value they wind up taking (which must be the same value) must
          .                           // be nameable by both universes. Therefore, the resulting
          .                           // universe is the minimum of the two universes, because that is
          .                           // the one which contains the fewest names in scope.
          .                           let universe = cmp::min(universe1, universe2);
     21,420 ( 0.00%)                  Ok(TypeVariableValue::Unknown { universe })
          .                       }
          .                   }
          .               }
          .           }

    415,210 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/type_variable.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 121 ----------------------------------------
         .           #[derive(Debug)]
         .           pub enum ProcessResult<O, E> {
         .               Unchanged,
         .               Changed(Vec<O>),
         .               Error(E),
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]
   234,030 ( 0.00%)  struct ObligationTreeId(usize);
         .           
         .           type ObligationTreeIdGenerator =
         .               std::iter::Map<std::ops::RangeFrom<usize>, fn(usize) -> ObligationTreeId>;
         .           
         .           pub struct ObligationForest<O: ForestObligation> {
         .               /// The list of obligations. In between calls to `process_obligations`,
         .               /// this list only contains nodes in the `Pending` or `Waiting` state.
         .               ///
-- line 137 ----------------------------------------
-- line 181 ----------------------------------------
         .               has_parent: bool,
         .           
         .               /// Identifier of the obligation tree to which this node belongs.
         .               obligation_tree_id: ObligationTreeId,
         .           }
         .           
         .           impl<O> Node<O> {
         .               fn new(parent: Option<usize>, obligation: O, obligation_tree_id: ObligationTreeId) -> Node<O> {
 2,838,656 ( 0.01%)          Node {
         .                       obligation,
         .                       state: Cell::new(NodeState::Pending),
   358,619 ( 0.00%)              dependents: if let Some(parent_index) = parent { vec![parent_index] } else { vec![] },
         .                       has_parent: parent.is_some(),
         .                       obligation_tree_id,
         .                   }
         .               }
         .           }
         .           
         .           /// The state of one node in some tree within the forest. This represents the
         .           /// current state of processing for the obligation (of type `O`) associated
-- line 200 ----------------------------------------
-- line 223 ----------------------------------------
         .           ///  |     compress()
         .           ///  v
         .           /// (Removed)
         .           /// ```
         .           /// The `Error` state can be introduced in several places, via `error_at()`.
         .           ///
         .           /// Outside of `ObligationForest` methods, nodes should be either `Pending` or
         .           /// `Waiting`.
67,442,000 ( 0.17%)  #[derive(Debug, Copy, Clone, PartialEq, Eq)]
         .           enum NodeState {
         .               /// This obligation has not yet been selected successfully. Cannot have
         .               /// subobligations.
         .               Pending,
         .           
         .               /// This obligation was selected successfully, but may or may not have
         .               /// subobligations.
         .               Success,
-- line 239 ----------------------------------------
-- line 279 ----------------------------------------
         .               pub stalled: bool,
         .           }
         .           
         .           impl<O, E> OutcomeTrait for Outcome<O, E> {
         .               type Error = Error<O, E>;
         .               type Obligation = O;
         .           
         .               fn new() -> Self {
   372,608 ( 0.00%)          Self { stalled: true, errors: vec![] }
         .               }
         .           
         .               fn mark_not_stalled(&mut self) {
   173,516 ( 0.00%)          self.stalled = false;
         .               }
         .           
         .               fn is_stalled(&self) -> bool {
    86,912 ( 0.00%)          self.stalled
         .               }
         .           
         .               fn record_completed(&mut self, _outcome: &Self::Obligation) {
         .                   // do nothing
         .               }
         .           
         .               fn record_error(&mut self, error: Self::Error) {
       128 ( 0.00%)          self.errors.push(error)
         .               }
         .           }
         .           
         .           #[derive(Debug, PartialEq, Eq)]
         .           pub struct Error<O, E> {
         .               pub error: E,
         .               pub backtrace: Vec<O>,
         .           }
         .           
         .           impl<O: ForestObligation> ObligationForest<O> {
    51,082 ( 0.00%)      pub fn new() -> ObligationForest<O> {
   612,984 ( 0.00%)          ObligationForest {
         .                       nodes: vec![],
         .                       done_cache: Default::default(),
         .                       active_cache: Default::default(),
         .                       reused_node_vec: vec![],
         .                       obligation_tree_id_generator: (0..).map(ObligationTreeId),
         .                       error_cache: Default::default(),
         .                   }
    51,082 ( 0.00%)      }
         .           
         .               /// Returns the total number of nodes in the forest that have not
         .               /// yet been fully resolved.
         .               pub fn len(&self) -> usize {
         .                   self.nodes.len()
         .               }
         .           
         .               /// Registers an obligation.
         .               pub fn register_obligation(&mut self, obligation: O) {
         .                   // Ignore errors here - there is no guarantee of success.
 1,767,545 ( 0.00%)          let _ = self.register_obligation_at(obligation, None);
         .               }
         .           
         .               // Returns Err(()) if we already know this obligation failed.
 2,740,320 ( 0.01%)      fn register_obligation_at(&mut self, obligation: O, parent: Option<usize>) -> Result<(), ()> {
   498,240 ( 0.00%)          let cache_key = obligation.as_cache_key();
   498,240 ( 0.00%)          if self.done_cache.contains(&cache_key) {
         .                       debug!("register_obligation_at: ignoring already done obligation: {:?}", obligation);
         .                       return Ok(());
         .                   }
         .           
 1,263,750 ( 0.00%)          match self.active_cache.entry(cache_key) {
         .                       Entry::Occupied(o) => {
    66,418 ( 0.00%)                  let node = &mut self.nodes[*o.get()];
    66,418 ( 0.00%)                  if let Some(parent_index) = parent {
         .                               // If the node is already in `active_cache`, it has already
         .                               // had its chance to be marked with a parent. So if it's
         .                               // not already present, just dump `parent` into the
         .                               // dependents as a non-parent.
    71,988 ( 0.00%)                      if !node.dependents.contains(&parent_index) {
         .                                   node.dependents.push(parent_index);
         .                               }
         .                           }
    99,627 ( 0.00%)                  if let NodeState::Error = node.state.get() { Err(()) } else { Ok(()) }
         .                       }
   532,248 ( 0.00%)              Entry::Vacant(v) => {
 1,064,496 ( 0.00%)                  let obligation_tree_id = match parent {
   120,802 ( 0.00%)                      Some(parent_index) => self.nodes[parent_index].obligation_tree_id,
         .                               None => self.obligation_tree_id_generator.next().unwrap(),
         .                           };
         .           
         .                           let already_failed = parent.is_some()
         .                               && self
         .                                   .error_cache
         .                                   .get(&obligation_tree_id)
         .                                   .map_or(false, |errors| errors.contains(v.key()));
         .           
         .                           if already_failed {
         .                               Err(())
         .                           } else {
   177,416 ( 0.00%)                      let new_index = self.nodes.len();
         .                               v.insert(new_index);
         .                               self.nodes.push(Node::new(parent, obligation, obligation_tree_id));
         .                               Ok(())
         .                           }
         .                       }
         .                   }
 2,242,080 ( 0.01%)      }
         .           
         .               /// Converts all remaining obligations to the given error.
   517,832 ( 0.00%)      pub fn to_errors<E: Clone>(&mut self, error: E) -> Vec<Error<O, E>> {
         .                   let errors = self
         .                       .nodes
         .                       .iter()
         .                       .enumerate()
         .                       .filter(|(_index, node)| node.state.get() == NodeState::Pending)
         .                       .map(|(index, _node)| Error { error: error.clone(), backtrace: self.error_at(index) })
         .                       .collect();
         .           
   147,952 ( 0.00%)          self.compress(|_| assert!(false));
         .                   errors
   443,856 ( 0.00%)      }
         .           
         .               /// Returns the set of obligations that are in a pending state.
         .               pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>
         .               where
         .                   F: Fn(&O) -> P,
         .               {
       154 ( 0.00%)          self.nodes
         .                       .iter()
         .                       .filter(|node| node.state.get() == NodeState::Pending)
         .                       .map(|node| f(&node.obligation))
         .                       .collect()
         .               }
         .           
        56 ( 0.00%)      fn insert_into_error_cache(&mut self, index: usize) {
         .                   let node = &self.nodes[index];
         8 ( 0.00%)          self.error_cache
        24 ( 0.00%)              .entry(node.obligation_tree_id)
         .                       .or_default()
         .                       .insert(node.obligation.as_cache_key());
        64 ( 0.00%)      }
         .           
         .               /// Performs a pass through the obligation list. This must
         .               /// be called in a loop until `outcome.stalled` is false.
         .               ///
         .               /// This _cannot_ be unrolled (presently, at least).
         .               #[inline(never)]
 1,676,736 ( 0.00%)      pub fn process_obligations<P, OUT>(&mut self, processor: &mut P) -> OUT
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .                   OUT: OutcomeTrait<Obligation = O, Error = Error<O, P::Error>>,
         .               {
         .                   let mut outcome = OUT::new();
         .           
         .                   // Note that the loop body can append new nodes, and those new nodes
         .                   // will then be processed by subsequent iterations of the loop.
         .                   //
         .                   // We can't use an iterator for the loop because `self.nodes` is
         .                   // appended to and the borrow checker would complain. We also can't use
         .                   // `for index in 0..self.nodes.len() { ... }` because the range would
         .                   // be computed with the initial length, and we would miss the appended
         .                   // nodes. Therefore we use a `while` loop.
         .                   let mut index = 0;
32,825,733 ( 0.08%)          while let Some(node) = self.nodes.get_mut(index) {
         .                       // `processor.process_obligation` can modify the predicate within
         .                       // `node.obligation`, and that predicate is the key used for
         .                       // `self.active_cache`. This means that `self.active_cache` can get
         .                       // out of sync with `nodes`. It's not very common, but it does
         .                       // happen, and code in `compress` has to allow for it.
65,278,858 ( 0.17%)              if node.state.get() != NodeState::Pending {
 8,622,987 ( 0.02%)                  index += 1;
         .                           continue;
         .                       }
         .           
 1,004,416 ( 0.00%)              match processor.process_obligation(&mut node.obligation) {
         .                           ProcessResult::Unchanged => {
         .                               // No change in state.
         .                           }
   694,032 ( 0.00%)                  ProcessResult::Changed(children) => {
         .                               // We are not (yet) stalled.
         .                               outcome.mark_not_stalled();
         .                               node.state.set(NodeState::Success);
         .           
   920,342 ( 0.00%)                      for child in children {
 1,923,635 ( 0.00%)                          let st = self.register_obligation_at(child, Some(index));
   226,310 ( 0.00%)                          if let Err(()) = st {
         .                                       // Error already reported - propagate it
         .                                       // to our node.
         .                                       self.error_at(index);
         .                                   }
         .                               }
         .                           }
         .                           ProcessResult::Error(err) => {
         .                               outcome.mark_not_stalled();
       264 ( 0.00%)                      outcome.record_error(Error { error: err, backtrace: self.error_at(index) });
         .                           }
         .                       }
48,032,884 ( 0.12%)              index += 1;
         .                   }
         .           
         .                   // There's no need to perform marking, cycle processing and compression when nothing
         .                   // changed.
    86,912 ( 0.00%)          if !outcome.is_stalled() {
         .                       self.mark_successes();
         .                       self.process_cycles(processor);
    81,498 ( 0.00%)              self.compress(|obl| outcome.record_completed(obl));
         .                   }
         .           
         .                   outcome
 1,676,736 ( 0.00%)      }
         .           
         .               /// Returns a vector of obligations for `p` and all of its
         .               /// ancestors, putting them into the error state in the process.
        56 ( 0.00%)      fn error_at(&self, mut index: usize) -> Vec<O> {
         .                   let mut error_stack: Vec<usize> = vec![];
         .                   let mut trace = vec![];
         .           
         .                   loop {
         .                       let node = &self.nodes[index];
         8 ( 0.00%)              node.state.set(NodeState::Error);
         .                       trace.push(node.obligation.clone());
        16 ( 0.00%)              if node.has_parent {
         .                           // The first dependent is the parent, which is treated
         .                           // specially.
         .                           error_stack.extend(node.dependents.iter().skip(1));
         .                           index = node.dependents[0];
         .                       } else {
         .                           // No parent; treat all dependents non-specially.
         .                           error_stack.extend(node.dependents.iter());
         .                           break;
-- line 504 ----------------------------------------
-- line 509 ----------------------------------------
         .                       let node = &self.nodes[index];
         .                       if node.state.get() != NodeState::Error {
         .                           node.state.set(NodeState::Error);
         .                           error_stack.extend(node.dependents.iter());
         .                       }
         .                   }
         .           
         .                   trace
        64 ( 0.00%)      }
         .           
         .               /// Mark all `Waiting` nodes as `Success`, except those that depend on a
         .               /// pending node.
         .               fn mark_successes(&self) {
         .                   // Convert all `Waiting` nodes to `Success`.
         .                   for node in &self.nodes {
10,757,849 ( 0.03%)              if node.state.get() == NodeState::Waiting {
         .                           node.state.set(NodeState::Success);
         .                       }
         .                   }
         .           
         .                   // Convert `Success` nodes that depend on a pending node back to
         .                   // `Waiting`.
         .                   for node in &self.nodes {
 9,828,766 ( 0.03%)              if node.state.get() == NodeState::Pending {
         .                           // This call site is hot.
         .                           self.inlined_mark_dependents_as_waiting(node);
         .                       }
         .                   }
         .               }
         .           
         .               // This always-inlined function is for the hot call site.
         .               #[inline(always)]
         .               fn inlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
 5,057,615 ( 0.01%)          for &index in node.dependents.iter() {
         .                       let node = &self.nodes[index];
 5,057,615 ( 0.01%)              let state = node.state.get();
 5,057,615 ( 0.01%)              if state == NodeState::Success {
         .                           // This call site is cold.
 7,679,817 ( 0.02%)                  self.uninlined_mark_dependents_as_waiting(node);
         .                       } else {
         .                           debug_assert!(state == NodeState::Waiting || state == NodeState::Error)
         .                       }
         .                   }
         .               }
         .           
         .               // This never-inlined function is for the cold call site.
         .               #[inline(never)]
17,919,573 ( 0.05%)      fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {
         .                   // Mark node Waiting in the cold uninlined code instead of the hot inlined
         .                   node.state.set(NodeState::Waiting);
         .                   self.inlined_mark_dependents_as_waiting(node)
20,479,512 ( 0.05%)      }
         .           
         .               /// Report cycles between all `Success` nodes, and convert all `Success`
         .               /// nodes to `Done`. This must be called after `mark_successes`.
         .               fn process_cycles<P>(&mut self, processor: &mut P)
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .               {
    40,749 ( 0.00%)          let mut stack = std::mem::take(&mut self.reused_node_vec);
         .                   for (index, node) in self.nodes.iter().enumerate() {
         .                       // For some benchmarks this state test is extremely hot. It's a win
         .                       // to handle the no-op cases immediately to avoid the cost of the
         .                       // function call.
 9,828,766 ( 0.03%)              if node.state.get() == NodeState::Success {
   833,780 ( 0.00%)                  self.find_cycles_from_node(&mut stack, processor, index);
         .                       }
         .                   }
         .           
         .                   debug_assert!(stack.is_empty());
   325,992 ( 0.00%)          self.reused_node_vec = stack;
         .               }
         .           
 2,224,197 ( 0.01%)      fn find_cycles_from_node<P>(&self, stack: &mut Vec<usize>, processor: &mut P, index: usize)
         .               where
         .                   P: ObligationProcessor<Obligation = O>,
         .               {
         .                   let node = &self.nodes[index];
   494,266 ( 0.00%)          if node.state.get() == NodeState::Success {
    13,622 ( 0.00%)              match stack.iter().rposition(|&n| n == index) {
         .                           None => {
         .                               stack.push(index);
    80,377 ( 0.00%)                      for &dep_index in node.dependents.iter() {
   321,508 ( 0.00%)                          self.find_cycles_from_node(stack, processor, dep_index);
         .                               }
         .                               stack.pop();
         .                               node.state.set(NodeState::Done);
         .                           }
         .                           Some(rpos) => {
         .                               // Cycle detected.
         .                               processor.process_backedge(
         .                                   stack[rpos..].iter().map(|&i| &self.nodes[i].obligation),
         .                                   PhantomData,
         .                               );
         .                           }
         .                       }
         .                   }
 1,977,064 ( 0.01%)      }
         .           
         .               /// Compresses the vector, removing all popped nodes. This adjusts the
         .               /// indices and hence invalidates any outstanding indices. `process_cycles`
         .               /// must be run beforehand to remove any cycles on `Success` nodes.
         .               #[inline(never)]
   843,824 ( 0.00%)      fn compress(&mut self, mut outcome_cb: impl FnMut(&O)) {
   114,725 ( 0.00%)          let orig_nodes_len = self.nodes.len();
         .                   let mut node_rewrites: Vec<_> = std::mem::take(&mut self.reused_node_vec);
         .                   debug_assert!(node_rewrites.is_empty());
         .                   node_rewrites.extend(0..orig_nodes_len);
         .                   let mut dead_nodes = 0;
         .           
         .                   // Move removable nodes to the end, preserving the order of the
         .                   // remaining nodes.
         .                   //
         .                   // LOOP INVARIANT:
         .                   //     self.nodes[0..index - dead_nodes] are the first remaining nodes
         .                   //     self.nodes[index - dead_nodes..index] are all dead
         .                   //     self.nodes[index..] are unchanged
         .                   for index in 0..orig_nodes_len {
         .                       let node = &self.nodes[index];
49,306,826 ( 0.13%)              match node.state.get() {
         .                           NodeState::Pending | NodeState::Waiting => {
19,310,500 ( 0.05%)                      if dead_nodes > 0 {
   616,812 ( 0.00%)                          self.nodes.swap(index, index - dead_nodes);
 1,028,020 ( 0.00%)                          node_rewrites[index] -= dead_nodes;
         .                               }
         .                           }
         .                           NodeState::Done => {
         .                               // This lookup can fail because the contents of
         .                               // `self.active_cache` are not guaranteed to match those of
         .                               // `self.nodes`. See the comment in `process_obligation`
         .                               // for more details.
   644,176 ( 0.00%)                      if let Some((predicate, _)) =
   520,524 ( 0.00%)                          self.active_cache.remove_entry(&node.obligation.as_cache_key())
         .                               {
         .                                   self.done_cache.insert(predicate);
         .                               } else {
         .                                   self.done_cache.insert(node.obligation.as_cache_key().clone());
         .                               }
         .                               // Extract the success stories.
         .                               outcome_cb(&node.obligation);
   347,016 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
   347,016 ( 0.00%)                      dead_nodes += 1;
         .                           }
         .                           NodeState::Error => {
         .                               // We *intentionally* remove the node from the cache at this point. Otherwise
         .                               // tests must come up with a different type on every type error they
         .                               // check against.
        24 ( 0.00%)                      self.active_cache.remove(&node.obligation.as_cache_key());
        16 ( 0.00%)                      self.insert_into_error_cache(index);
        16 ( 0.00%)                      node_rewrites[index] = orig_nodes_len;
        16 ( 0.00%)                      dead_nodes += 1;
         .                           }
         .                           NodeState::Success => unreachable!(),
         .                       }
         .                   }
         .           
         .                   if dead_nodes > 0 {
         .                       // Remove the dead nodes and rewrite indices.
    74,964 ( 0.00%)              self.nodes.truncate(orig_nodes_len - dead_nodes);
    37,482 ( 0.00%)              self.apply_rewrites(&node_rewrites);
         .                   }
         .           
         .                   node_rewrites.truncate(0);
   458,900 ( 0.00%)          self.reused_node_vec = node_rewrites;
   917,800 ( 0.00%)      }
         .           
         .               #[inline(never)]
   337,338 ( 0.00%)      fn apply_rewrites(&mut self, node_rewrites: &[usize]) {
         .                   let orig_nodes_len = node_rewrites.len();
         .           
         .                   for node in &mut self.nodes {
         .                       let mut i = 0;
 9,080,352 ( 0.02%)              while let Some(dependent) = node.dependents.get_mut(i) {
12,333,752 ( 0.03%)                  let new_index = node_rewrites[*dependent];
 6,166,876 ( 0.02%)                  if new_index >= orig_nodes_len {
         .                               node.dependents.swap_remove(i);
         .                               if i == 0 && node.has_parent {
         .                                   // We just removed the parent.
         .                                   node.has_parent = false;
         .                               }
         .                           } else {
 3,083,438 ( 0.01%)                      *dependent = new_index;
 6,166,876 ( 0.02%)                      i += 1;
         .                           }
         .                       }
         .                   }
         .           
         .                   // This updating of `self.active_cache` is necessary because the
         .                   // removal of nodes within `compress` can fail. See above.
         .                   self.active_cache.retain(|_predicate, index| {
24,187,080 ( 0.06%)              let new_index = node_rewrites[*index];
12,093,540 ( 0.03%)              if new_index >= orig_nodes_len {
         .                           false
         .                       } else {
 5,996,914 ( 0.02%)                  *index = new_index;
         .                           true
         .                       }
         .                   });
   299,856 ( 0.00%)      }
         .           }

70,385,567 ( 0.18%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/obligation_forest/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs
--------------------------------------------------------------------------------
Ir                   

-- line 346 ----------------------------------------
          .               ///
          .               /// let c = Cell::new(5);
          .               ///
          .               /// c.set(10);
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn set(&self, val: T) {
      4,595 ( 0.00%)          let old = self.replace(val);
     10,440 ( 0.00%)          drop(old);
          .               }
          .           
          .               /// Swaps the values of two `Cell`s.
          .               /// Difference with `std::mem::swap` is that this function doesn't require `&mut` reference.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 363 ----------------------------------------
-- line 434 ----------------------------------------
          .               ///
          .               /// let five = c.get();
          .               /// ```
          .               #[inline]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               pub fn get(&self) -> T {
          .                   // SAFETY: This can cause data races if called from a separate thread,
          .                   // but `Cell` is `!Sync` so this won't happen.
  1,333,066 ( 0.00%)          unsafe { *self.value.get() }
          .               }
          .           
          .               /// Updates the contained value using a function and returns the new value.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
          .               /// #![feature(cell_update)]
-- line 450 ----------------------------------------
-- line 689 ----------------------------------------
          .           
          .           #[inline(always)]
          .           fn is_writing(x: BorrowFlag) -> bool {
          .               x < UNUSED
          .           }
          .           
          .           #[inline(always)]
          .           fn is_reading(x: BorrowFlag) -> bool {
  3,136,838 ( 0.01%)      x > UNUSED
          .           }
          .           
          .           impl<T> RefCell<T> {
          .               /// Creates a new `RefCell` containing `value`.
          .               ///
          .               /// # Examples
          .               ///
          .               /// ```
-- line 705 ----------------------------------------
-- line 706 ----------------------------------------
          .               /// use std::cell::RefCell;
          .               ///
          .               /// let c = RefCell::new(5);
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_stable(feature = "const_refcell_new", since = "1.24.0")]
          .               #[inline]
          .               pub const fn new(value: T) -> RefCell<T> {
    350,500 ( 0.00%)          RefCell {
    271,105 ( 0.00%)              value: UnsafeCell::new(value),
          .                       borrow: Cell::new(UNUSED),
          .                       #[cfg(feature = "debug_refcell")]
          .                       borrowed_at: Cell::new(None),
          .                   }
          .               }
          .           
          .               /// Consumes the `RefCell`, returning the wrapped value.
          .               ///
-- line 723 ----------------------------------------
-- line 731 ----------------------------------------
          .               /// let five = c.into_inner();
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_unstable(feature = "const_cell_into_inner", issue = "78729")]
          .               #[inline]
          .               pub const fn into_inner(self) -> T {
          .                   // Since this function takes `self` (the `RefCell`) by value, the
          .                   // compiler statically verifies that it is not currently borrowed.
     20,708 ( 0.00%)          self.value.into_inner()
          .               }
          .           
          .               /// Replaces the wrapped value with a new one, returning the old value,
          .               /// without deinitializing either one.
          .               ///
          .               /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).
          .               ///
          .               /// # Panics
-- line 747 ----------------------------------------
-- line 845 ----------------------------------------
          .               /// let c = RefCell::new(5);
          .               ///
          .               /// let m = c.borrow_mut();
          .               /// let b = c.borrow(); // this causes a panic
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[inline]
          .               #[track_caller]
     34,840 ( 0.00%)      pub fn borrow(&self) -> Ref<'_, T> {
          .                   self.try_borrow().expect("already mutably borrowed")
    104,520 ( 0.00%)      }
          .           
          .               /// Immutably borrows the wrapped value, returning an error if the value is currently mutably
          .               /// borrowed.
          .               ///
          .               /// The borrow lasts until the returned `Ref` exits scope. Multiple immutable borrows can be
          .               /// taken out at the same time.
          .               ///
          .               /// This is the non-panicking variant of [`borrow`](#method.borrow).
-- line 863 ----------------------------------------
-- line 937 ----------------------------------------
          .               /// let c = RefCell::new(5);
          .               /// let m = c.borrow();
          .               ///
          .               /// let b = c.borrow_mut(); // this causes a panic
          .               /// ```
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[inline]
          .               #[track_caller]
    168,851 ( 0.00%)      pub fn borrow_mut(&self) -> RefMut<'_, T> {
          .                   self.try_borrow_mut().expect("already borrowed")
    506,553 ( 0.00%)      }
          .           
          .               /// Mutably borrows the wrapped value, returning an error if the value is currently borrowed.
          .               ///
          .               /// The borrow lasts until the returned `RefMut` or all `RefMut`s derived
          .               /// from it exit scope. The value cannot be borrowed while this borrow is
          .               /// active.
          .               ///
          .               /// This is the non-panicking variant of [`borrow_mut`](#method.borrow_mut).
-- line 955 ----------------------------------------
-- line 967 ----------------------------------------
          .               /// }
          .               ///
          .               /// assert!(c.try_borrow_mut().is_ok());
          .               /// ```
          .               #[stable(feature = "try_borrow", since = "1.13.0")]
          .               #[inline]
          .               #[cfg_attr(feature = "debug_refcell", track_caller)]
          .               pub fn try_borrow_mut(&self) -> Result<RefMut<'_, T>, BorrowMutError> {
          6 ( 0.00%)          match BorrowRefMut::new(&self.borrow) {
          .                       Some(b) => {
          .                           #[cfg(feature = "debug_refcell")]
          .                           {
          .                               self.borrowed_at.set(Some(crate::panic::Location::caller()));
          .                           }
          .           
          .                           // SAFETY: `BorrowRef` guarantees unique access.
     10,223 ( 0.00%)                  Ok(RefMut { value: unsafe { &mut *self.value.get() }, borrow: b })
          .                       }
          .                       None => Err(BorrowMutError {
          .                           // If a borrow occurred, then we must already have an outstanding borrow,
          .                           // so `borrowed_at` will be `Some`
          .                           #[cfg(feature = "debug_refcell")]
          .                           location: self.borrowed_at.get().unwrap(),
          .                       }),
          .                   }
-- line 991 ----------------------------------------
-- line 1254 ----------------------------------------
          .           
          .           struct BorrowRef<'b> {
          .               borrow: &'b Cell<BorrowFlag>,
          .           }
          .           
          .           impl<'b> BorrowRef<'b> {
          .               #[inline]
          .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {
  4,682,806 ( 0.01%)          let b = borrow.get().wrapping_add(1);
  2,800,857 ( 0.01%)          if !is_reading(b) {
          .                       // Incrementing borrow can result in a non-reading value (<= 0) in these cases:
          .                       // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow
          .                       //    due to Rust's reference aliasing rules
          .                       // 2. It was isize::MAX (the max amount of reading borrows) and it overflowed
          .                       //    into isize::MIN (the max amount of writing borrows) so we can't allow
          .                       //    an additional read borrow because isize can't represent so many read borrows
          .                       //    (this can only happen if you mem::forget more than a small constant amount of
          .                       //    `Ref`s, which is not good practice)
-- line 1271 ----------------------------------------
-- line 1279 ----------------------------------------
          .                       Some(BorrowRef { borrow })
          .                   }
          .               }
          .           }
          .           
          .           impl Drop for BorrowRef<'_> {
          .               #[inline]
          .               fn drop(&mut self) {
  1,661,728 ( 0.00%)          let borrow = self.borrow.get();
          .                   debug_assert!(is_reading(borrow));
  3,474,629 ( 0.01%)          self.borrow.set(borrow - 1);
          .               }
          .           }
          .           
          .           impl Clone for BorrowRef<'_> {
          .               #[inline]
          .               fn clone(&self) -> Self {
          .                   // Since this Ref exists, we know the borrow flag
          .                   // is a reading borrow.
-- line 1297 ----------------------------------------
-- line 1645 ----------------------------------------
          .           
          .           struct BorrowRefMut<'b> {
          .               borrow: &'b Cell<BorrowFlag>,
          .           }
          .           
          .           impl Drop for BorrowRefMut<'_> {
          .               #[inline]
          .               fn drop(&mut self) {
 60,443,109 ( 0.15%)          let borrow = self.borrow.get();
          .                   debug_assert!(is_writing(borrow));
120,523,080 ( 0.31%)          self.borrow.set(borrow + 1);
          .               }
          .           }
          .           
          .           impl<'b> BorrowRefMut<'b> {
          .               #[inline]
          .               fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRefMut<'b>> {
          .                   // NOTE: Unlike BorrowRefMut::clone, new is called to create the initial
          .                   // mutable reference, and so there must currently be no existing
          .                   // references. Thus, while clone increments the mutable refcount, here
          .                   // we explicitly only allow going from UNUSED to UNUSED - 1.
124,714,018 ( 0.32%)          match borrow.get() {
          .                       UNUSED => {
          .                           borrow.set(UNUSED - 1);
          .                           Some(BorrowRefMut { borrow })
          .                       }
          .                       _ => None,
          .                   }
          .               }
          .           
-- line 1674 ----------------------------------------
-- line 1711 ----------------------------------------
          .                   self.value
          .               }
          .           }
          .           
          .           #[stable(feature = "rust1", since = "1.0.0")]
          .           impl<T: ?Sized> DerefMut for RefMut<'_, T> {
          .               #[inline]
          .               fn deref_mut(&mut self) -> &mut T {
      3,196 ( 0.00%)          self.value
          .               }
          .           }
          .           
          .           #[unstable(feature = "coerce_unsized", issue = "27732")]
          .           impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}
          .           
          .           #[stable(feature = "std_guard_impls", since = "1.20.0")]
          .           impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {
-- line 1727 ----------------------------------------
-- line 1909 ----------------------------------------
          .               /// ```
          .               #[inline(always)]
          .               #[stable(feature = "rust1", since = "1.0.0")]
          .               #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
          .               pub const fn get(&self) -> *mut T {
          .                   // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
          .                   // #[repr(transparent)]. This exploits libstd's special status, there is
          .                   // no guarantee for user code that this will work in future versions of the compiler!
 18,627,867 ( 0.05%)          self as *const UnsafeCell<T> as *const T as *mut T
          .               }
          .           
          .               /// Returns a mutable reference to the underlying data.
          .               ///
          .               /// This call borrows the `UnsafeCell` mutably (at compile-time) which
          .               /// guarantees that we possess the only reference.
          .               ///
          .               /// # Examples
-- line 1925 ----------------------------------------

 72,325,687 ( 0.19%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/cell.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
7,269,528,738 (18.61%)  events annotated

