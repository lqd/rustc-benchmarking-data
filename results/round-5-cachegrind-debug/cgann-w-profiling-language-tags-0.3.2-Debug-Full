--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name language_tags --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -C metadata=47cef97b52adce27 -C extra-filename=-47cef97b52adce27 --out-dir /usr/home/liquid/tmp/.tmp7yNI82/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmp7yNI82/target/debug/deps -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-language-tags-0.3.2-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,033,911,516 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
179,269,209 ( 2.97%)  ./malloc/malloc.c:_int_malloc
155,508,002 ( 2.58%)  ./malloc/malloc.c:_int_free
134,736,077 ( 2.23%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
 99,107,762 ( 1.64%)  ./malloc/malloc.c:malloc
 91,757,424 ( 1.52%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 61,745,537 ( 1.02%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
 44,075,952 ( 0.73%)  ./malloc/malloc.c:free
 40,189,611 ( 0.67%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
 34,576,543 ( 0.57%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 32,037,561 ( 0.53%)  ./malloc/malloc.c:malloc_consolidate
 30,806,887 ( 0.51%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 29,726,488 ( 0.49%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 28,518,815 ( 0.47%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 26,793,484 ( 0.44%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 26,487,554 ( 0.44%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 22,859,641 ( 0.38%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 21,394,005 ( 0.35%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 20,145,169 ( 0.33%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 20,000,039 ( 0.33%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::union::<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>
 19,518,716 ( 0.32%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 18,295,404 ( 0.30%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 18,142,625 ( 0.30%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/step.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::run
 16,847,033 ( 0.28%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::try_read_immediate
 15,470,702 ( 0.26%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_span::def_id::LocalDefId, (&rustc_middle::ty::context::TypeckResults, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_span::def_id::LocalDefId>
 15,439,765 ( 0.26%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 15,027,962 ( 0.25%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilder<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>, (core::result::Result<rustc_target::abi::TyAndLayout<&rustc_middle::ty::TyS>, rustc_middle::ty::layout::LayoutError>, rustc_query_system::dep_graph::graph::DepNodeIndex), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_key_hashed_nocheck::<rustc_middle::ty::ParamEnvAnd<&rustc_middle::ty::TyS>>
 14,871,861 ( 0.25%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_operand
 14,590,830 ( 0.24%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 13,956,497 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs:<rustc_parse::lexer::StringReader>::next_token
 13,606,356 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::run
 13,440,164 ( 0.22%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 12,813,990 ( 0.21%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 12,083,445 ( 0.20%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::check
 11,967,163 ( 0.20%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 11,962,010 ( 0.20%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 11,471,661 ( 0.19%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 11,446,155 ( 0.19%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<std::collections::hash::map::HashMap<rustc_middle::middle::region::Scope, (rustc_middle::middle::region::Scope, u32), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::get::<rustc_middle::middle::region::Scope>
 11,359,920 ( 0.19%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 11,349,628 ( 0.19%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 11,310,268 ( 0.19%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 11,191,318 ( 0.19%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 10,751,953 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 10,746,292 ( 0.18%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 10,741,733 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::force_allocation_maybe_sized
 10,345,845 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 10,342,405 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs:<rustc_parse::lexer::tokentrees::TokenTreesReader>::parse_token_tree
 10,330,487 ( 0.17%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 10,309,062 ( 0.17%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,299,847 ( 0.17%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 10,274,957 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs:<rustc_span::caching_source_map_view::CachingSourceMapView>::span_data_to_lines_and_cols
 10,143,825 ( 0.17%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 10,077,197 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::copy_op_no_validate
  9,997,020 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs:<rustc_borrowck::MirBorrowckCtxt>::access_place
  9,930,810 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::eval_place
  9,915,777 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs:<rustc_ast_pretty::pp::ring::RingBuffer<rustc_ast_pretty::pp::BufEntry>>::pop_first
  9,801,953 ( 0.16%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
  9,734,008 ( 0.16%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
  9,446,991 ( 0.16%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
  9,443,126 ( 0.16%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
  9,411,347 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
  9,181,611 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs:<alloc::collections::vec_deque::VecDeque<rustc_ast_pretty::pp::BufEntry>>::push_back
  9,169,687 ( 0.15%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
  8,817,509 ( 0.15%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
  8,653,265 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  8,648,877 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs:<rustc_lexer::cursor::Cursor>::advance_token
  8,595,720 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
  8,374,364 ( 0.14%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
  8,321,505 ( 0.14%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
  8,225,479 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::clone::Clone>::clone
  8,209,888 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::attrs
  8,064,682 ( 0.13%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
  8,007,855 ( 0.13%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
  7,951,900 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::span_encoding::Span as rustc_data_structures::stable_hasher::HashStable<rustc_query_system::ich::hcx::StableHashingContext>>::hash_stable
  7,947,496 ( 0.13%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  7,891,206 ( 0.13%)  ./malloc/malloc.c:calloc
  7,877,075 ( 0.13%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::symbol::Symbol, usize)>>::reserve_rehash::<hashbrown::map::make_hasher<rustc_span::symbol::Symbol, rustc_span::symbol::Symbol, usize, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>::{closure#0}>
  7,856,400 ( 0.13%)  ???:llvm::DAGTypeLegalizer::run()
  7,818,619 ( 0.13%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
  7,721,981 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::TokenCursor>::next
  7,614,129 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs:<rustc_const_eval::interpret::eval_context::InterpCx<rustc_const_eval::const_eval::machine::CompileTimeInterpreter>>::access_local
  7,587,544 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs:<rustc_parse::parser::Parser>::bump
  7,550,030 ( 0.13%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
  7,464,258 ( 0.12%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
  7,459,902 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs:<rustc_middle::middle::region::ScopeTree>::temporary_scope
  7,437,264 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs:<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>::union::<rustc_index::bit_set::BitSet<rustc_borrowck::dataflow::BorrowIndex>>
  7,391,140 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs:<rustc_resolve::Resolver>::traits_in_scope
  7,375,331 ( 0.12%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
  7,242,759 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
  7,188,369 ( 0.12%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
  7,112,401 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs:<rustc_ast_pretty::pp::Printer>::advance_left
  7,092,936 ( 0.12%)  ./malloc/malloc.c:realloc
  7,080,323 ( 0.12%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
  7,012,179 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs:<rustc_mir_build::thir::cx::Cx>::mirror_expr_inner
  7,002,756 ( 0.12%)  ???:llvm::SelectionDAG::Legalize()
  6,921,596 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs:<smallvec::SmallVec<[rustc_mir_dataflow::move_paths::InitIndex; 4]>>::try_reserve
  6,921,232 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs:<rustc_middle::mir::traversal::Postorder>::traverse_successor
  6,911,218 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs:<rustc_middle::mir::terminator::TerminatorKind>::successors
  6,839,026 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<rustc_middle::ty::context::TypeckResults>::node_type_opt
  6,688,703 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Encodable<rustc_metadata::rmeta::encoder::EncodeContext>>::encode
  6,686,366 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs:<rustc_ast::token::TokenKind as core::cmp::PartialEq>::eq
  6,642,153 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs:<rustc_index::bit_set::BitSet<rustc_middle::mir::Local>>::union::<rustc_index::bit_set::BitSet<rustc_middle::mir::Local>>
  6,419,642 ( 0.11%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
  6,345,043 ( 0.11%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::HashMap<rustc_hir::hir_id::ItemLocalId, &rustc_middle::ty::TyS, core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::insert
  6,332,250 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::maybe_lint_level_root_bounded
  6,316,925 ( 0.10%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
  6,292,792 ( 0.10%)  ./stdlib/msort.c:msort_with_tmp.part.0
  6,279,822 ( 0.10%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
  6,259,238 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs:<rustc_privacy::DefIdVisitorSkeleton<rustc_privacy::TypePrivacyVisitor> as rustc_middle::ty::fold::TypeVisitor>::visit_ty
  6,247,251 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::drop_flag_effects_for_location::<<rustc_mir_dataflow::impls::MaybeUninitializedPlaces as rustc_mir_dataflow::framework::GenKillAnalysis>::statement_effect<rustc_index::bit_set::BitSet<rustc_mir_dataflow::move_paths::MovePathIndex>>::{closure#0}>
  6,218,556 ( 0.10%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
  6,191,813 ( 0.10%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
  6,145,568 ( 0.10%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
  6,123,403 ( 0.10%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
  6,068,305 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs:<rustc_middle::hir::map::Map>::find_parent_node
  6,036,615 ( 0.10%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
1,680,936 ( 0.03%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
1,050,585 ( 0.02%)              .intern(kind, |kind| {
   34,888 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
   69,776 ( 0.00%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
1,891,053 ( 0.03%)      }
        .           
        .               #[inline(never)]
1,031,792 ( 0.02%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  902,818 ( 0.01%)              .intern(kind, |kind| {
   52,302 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
1,160,766 ( 0.02%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
1,199,058 ( 0.02%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
  835,980 ( 0.01%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
  163,261 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
  163,261 ( 0.00%)          self.data.get(&id.local_id)
  672,830 ( 0.01%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
      666 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      444 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    2,826 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   33,441 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    2,826 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
  130,719 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   87,146 ( 0.00%)          match *qpath {
   21,258 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
  240,180 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
  217,865 ( 0.00%)      }
        .           
    9,977 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
   20,740 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
    9,977 ( 0.00%)      }
        .           
   50,432 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
   91,135 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
  100,864 ( 0.00%)      }
        .           
    2,692 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    2,692 ( 0.00%)      }
        .           
   86,008 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
   86,008 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
   86,008 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      836 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      150 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    1,230 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      615 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
   21,934 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
   10,967 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      196 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
       98 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
  152,678 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
   76,339 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
  302,474 ( 0.01%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
  151,237 ( 0.00%)      }
        .           
1,660,746 ( 0.03%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
  276,791 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
1,383,955 ( 0.02%)      }
        .           
  341,951 ( 0.01%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
  341,951 ( 0.01%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
  683,902 ( 0.01%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    1,782 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
      891 ( 0.00%)      }
        .           
   86,796 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
   86,796 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
  173,592 ( 0.00%)      }
        .           
   65,165 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
   65,165 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
  130,330 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    1,188 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
  338,918 ( 0.01%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
  259,563 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  129,802 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
   64,901 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
  133,978 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
   66,989 ( 0.00%)      }
        .           
  129,098 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
  258,196 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
  258,196 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
      690 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      138 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      288 ( 0.00%)      }
        .           
      665 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      133 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      384 ( 0.00%)      }
        .           
   10,763 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
   21,526 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
   21,970 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
   21,526 ( 0.00%)      }
        .           
    2,991 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    3,988 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    2,597 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
      800 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    1,324 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
      662 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    3,938 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    1,969 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    1,286 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
      643 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,000 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    1,250 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      278 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
      139 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
      722 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      361 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      444 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      222 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      278 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
      139 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
       36 ( 0.00%)      pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
       12 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
       24 ( 0.00%)      }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
      139 ( 0.00%)          &self.coercion_casts
      139 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      132 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
       66 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      256 ( 0.00%)      pub fn is_identity(&self) -> bool {
      512 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      256 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
      668 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      334 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
       44 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
      512 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
      396 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    2,848 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
  106,390 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
   42,556 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
   85,112 ( 0.00%)      }
        .           
      474 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      158 ( 0.00%)          self.arena.alloc(Steal::new(thir))
      632 ( 0.00%)      }
        .           
    3,160 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      632 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    4,424 ( 0.00%)      }
        .           
      632 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      158 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
      790 ( 0.00%)      }
        .           
      630 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    1,120 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
      280 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    3,128 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    1,564 ( 0.00%)          let attrs = self.get_attrs(def_id);
    6,647 ( 0.00%)          let get = |name| {
    1,564 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
       64 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
       32 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
       16 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
    7,820 ( 0.00%)          };
    2,346 ( 0.00%)          (
    2,346 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    1,173 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    3,128 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    6,202 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
      886 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    6,750 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    7,088 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
2,105,894 ( 0.03%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
2,707,578 ( 0.04%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       21 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       24 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
  212,765 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
  243,160 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   76,853 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   87,832 ( 0.00%)      }
        .           
    2,009 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    2,583 ( 0.00%)      }
        .           
  645,085 ( 0.01%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  737,240 ( 0.01%)      }
        .           
   15,649 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  150,126 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
  132,984 ( 0.00%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
    4,512 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
      126 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      189 ( 0.00%)          if let Some(id) = id.as_local() {
        6 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
      305 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
      189 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    2,921 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
    3,499 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
   61,206 ( 0.00%)          &*self.untracked_resolutions.cstore
   30,603 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    2,350 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
    9,450 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      278 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      417 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
      139 ( 0.00%)          self.sess.opts.borrowck_mode
      556 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
      165 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
       99 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
    1,370 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    2,288 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
    2,652 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    2,652 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    5,304 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
    2,076 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
      346 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      692 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
    2,076 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
      770 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      560 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    1,260 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
      630 ( 0.00%)      }
        .           
   14,140 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
   16,160 ( 0.00%)      }
        .           
  343,553 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  392,632 ( 0.01%)      }
        .           
   85,582 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
   97,808 ( 0.00%)      }
        .           
    3,178 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
    3,632 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    1,764 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   60,340 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  246,192 ( 0.00%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
    1,067 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  119,781 ( 0.00%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  117,992 ( 0.00%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  195,252 ( 0.00%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   87,768 ( 0.00%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
  121,615 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   14,332 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  208,385 ( 0.00%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   37,219 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   83,683 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   25,059 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  718,294 ( 0.01%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  473,099 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    6,428 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  804,708 ( 0.01%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
2,165,187 ( 0.04%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
1,940,868 ( 0.03%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   24,340 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
1,667,672 ( 0.03%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
1,395,401 ( 0.02%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
  218,248 ( 0.00%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
   13,235 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
  218,248 ( 0.00%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
      183 ( 0.00%)          match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
      183 ( 0.00%)      }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
      280 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
      280 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
    1,284 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
-- line 2259 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
  298,458 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
  318,336 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
    1,332 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
    1,500 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
    7,420 ( 0.00%)          iter.intern_with(|ts| {
   15,113 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   24,475 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
    6,678 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
    1,892 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
      546 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
    1,308 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    1,673 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    1,039 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
      468 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
      322 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    1,673 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
    1,972 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
    1,972 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    3,944 ( 0.00%)      }
        .           
       18 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
       54 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
       36 ( 0.00%)      }
        .           
      133 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      133 ( 0.00%)          self.mk_place_elem(
        .                       place,
      266 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      266 ( 0.00%)      }
        .           
        .               pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
        .               }
-- line 2496 ----------------------------------------
-- line 2497 ----------------------------------------
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
   19,107 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   21,230 ( 0.00%)      }
        .           
      420 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
       60 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
       70 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
      240 ( 0.00%)          self._intern_poly_existential_predicates(eps)
      480 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    4,171 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    1,697 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    4,952 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   32,862 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
   23,880 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  382,932 ( 0.01%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   74,238 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   21,167 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
   22,978 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
    7,591 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
      110 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
    5,055 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
    6,368 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    1,088 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      235 ( 0.00%)              c_variadic,
      312 ( 0.00%)              unsafety,
      316 ( 0.00%)              abi,
      190 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
      217 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       20 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   84,099 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
      624 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  294,352 ( 0.00%)          iter.intern_with(|xs| self.intern_substs(xs))
      832 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  202,510 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   58,956 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
  117,912 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   26,364 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
  901,362 ( 0.01%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
  901,362 ( 0.01%)          let hir = self.hir();
        .                   loop {
1,100,130 ( 0.02%)              if id == bound {
        .                           return bound;
        .                       }
        .           
1,189,912 ( 0.02%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  713,832 ( 0.01%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
1,287,660 ( 0.02%)      }
        .           
    1,576 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
    6,781 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
      447 ( 0.00%)              let next = self.hir().get_parent_node(id);
    1,341 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    1,576 ( 0.00%)      }
        .           
       42 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
      174 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
       59 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
       24 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
   71,197 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
   20,342 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
   20,342 ( 0.00%)          Some(&*candidates)
   81,368 ( 0.00%)      }
        .           
    3,591 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    4,617 ( 0.00%)      }
        .           
      252 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
       20 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
      224 ( 0.00%)      }
        .           
    2,436 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    3,132 ( 0.00%)      }
        .           
    1,890 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    1,890 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      200 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       20 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       10 ( 0.00%)              match self.lookup_const_stability(def_id) {
       20 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        6 ( 0.00%)                      self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      180 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  205,496 ( 0.00%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
  892,965 ( 0.01%)          E::intern_with(self, f)
  123,192 ( 0.00%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  320,269 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  430,923 ( 0.01%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
        6 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        1 ( 0.00%)                  assert!(iter.next().is_none());
   53,197 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
       96 ( 0.00%)                  assert!(iter.next().is_none());
   62,185 ( 0.00%)                  f(&[t0, t1])
        .                       }
      556 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  296,940 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    3,189 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
       76 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    2,620 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  116,632 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
   94,140 ( 0.00%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      117 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
    4,708 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
      392 ( 0.00%)                  let t0 = iter.next().unwrap()?;
      392 ( 0.00%)                  let t1 = iter.next().unwrap()?;
      588 ( 0.00%)                  assert!(iter.next().is_none());
    9,224 ( 0.00%)                  f(&[t0, t1])
        .                       }
    1,188 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  133,033 ( 0.00%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  119,781 ( 0.00%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       38 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
       27 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    2,232 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

2,488,335 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  305,872 ( 0.01%)      ptr: NonZeroUsize,
  746,995 ( 0.01%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
   70,369 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   17,226 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   17,226 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
   68,949 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   17,226 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   26,771 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   26,771 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  289,487 ( 0.00%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  289,487 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
      328 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
      328 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
4,228,052 ( 0.07%)              match ptr & TAG_MASK {
   28,750 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  987,712 ( 0.02%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
   10,988 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   47,784 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    5,821 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
   86,130 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
   86,130 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
    1,720 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
    1,720 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    8,480 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
      868 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    7,632 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
  157,133 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   55,333 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   33,914 ( 0.00%)          tcx.intern_substs(&substs)
  157,644 ( 0.00%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  195,009 ( 0.00%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   89,036 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    5,180 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
  155,256 ( 0.00%)      }
        .           
       72 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
       12 ( 0.00%)              let kind = mk_kind(param, substs);
   59,628 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       72 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 301 ----------------------------------------
        .               ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
        3 ( 0.00%)      pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  172,089 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
        2 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
        .                   if let GenericArgKind::Lifetime(lt) = self[i].unpack() {
        .                       lt
        .                   } else {
        .                       bug!("expected region for param #{} in {:?}", i, self);
        .                   }
-- line 323 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    6,027 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    1,722 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    6,888 ( 0.00%)      }
        .           
      911 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
    1,822 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   13,650 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  756,500 ( 0.01%)          match self.len() {
        .                       1 => {
   63,512 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  219,022 ( 0.00%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   92,498 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  256,108 ( 0.00%)                  let param1 = self[1].try_fold_with(folder)?;
  298,605 ( 0.00%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  373,082 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
    5,100 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
      412 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    1,559 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   22,611 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   68,432 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
3,086,621 ( 0.05%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
   73,577 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  162,846 ( 0.00%)          self.binders_passed += 1;
    6,582 ( 0.00%)          let t = t.super_fold_with(self);
  162,846 ( 0.00%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  120,768 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   40,256 ( 0.00%)          match *r {
   18,694 ( 0.00%)              ty::ReEarlyBound(data) => {
   18,694 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    9,347 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  140,896 ( 0.00%)      }
        .           
2,010,501 ( 0.03%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  670,167 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  211,588 ( 0.00%)          match *t.kind() {
  294,625 ( 0.00%)              ty::Param(p) => self.ty_for_param(p, t),
  281,214 ( 0.00%)              _ => t.super_fold_with(self),
        .                   }
3,116,490 ( 0.05%)      }
        .           
  544,054 ( 0.01%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
  157,684 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
  695,466 ( 0.01%)              c.super_fold_with(self)
        .                   }
    3,584 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  117,850 ( 0.00%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
      896 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  200,174 ( 0.00%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   22,079 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    1,022 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
      270 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
       90 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

1,180,634 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           use rustc_target::abi::{HasDataLayout, Size, VariantIdx, Variants};
        .           
        .           use super::{
        .               alloc_range, mir_assign_valid_types, AllocId, AllocRef, AllocRefMut, CheckInAllocMsg,
        .               ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,
        .               Operand, Pointer, PointerArithmetic, Provenance, Scalar, ScalarMaybeUninit,
        .           };
        .           
  762,006 ( 0.01%)  #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
        .           /// Information required for the sound usage of a `MemPlace`.
        .           pub enum MemPlaceMeta<Tag: Provenance = AllocId> {
        .               /// The unsized payload (e.g. length for slices or vtable pointer for trait objects).
        .               Meta(Scalar<Tag>),
        .               /// `Sized` types or unsized `extern type`
        .               None,
        .               /// The address of this place may not be taken. This protects the `MemPlace` from coming from
        .               /// a ZST Operand without a backing allocation and being converted to an integer address. This
-- line 30 ----------------------------------------
-- line 33 ----------------------------------------
        .               Poison,
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(MemPlaceMeta, 24);
        .           
        .           impl<Tag: Provenance> MemPlaceMeta<Tag> {
        .               pub fn unwrap_meta(self) -> Scalar<Tag> {
   10,112 ( 0.00%)          match self {
    7,272 ( 0.00%)              Self::Meta(s) => s,
        .                       Self::None | Self::Poison => {
        .                           bug!("expected wide pointer extra data (e.g. slice length or trait object vtable)")
        .                       }
        .                   }
        .               }
        .               fn has_meta(self) -> bool {
  135,697 ( 0.00%)          match self {
        .                       Self::Meta(_) => true,
        .                       Self::None | Self::Poison => false,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, PartialEq, Eq, HashStable, Debug)]
        .           pub struct MemPlace<Tag: Provenance = AllocId> {
        .               /// The pointer can be a pure integer, with the `None` tag.
       94 ( 0.00%)      pub ptr: Pointer<Option<Tag>>,
      188 ( 0.00%)      pub align: Align,
        .               /// Metadata for unsized places. Interpretation is up to the type.
        .               /// Must not be present for sized types, but can be missing for unsized types
        .               /// (e.g., `extern type`).
        .               pub meta: MemPlaceMeta<Tag>,
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(MemPlace, 48);
-- line 68 ----------------------------------------
-- line 93 ----------------------------------------
        .               type Target = Place<Tag>;
        .               #[inline(always)]
        .               fn deref(&self) -> &Place<Tag> {
        .                   &self.place
        .               }
        .           }
        .           
        .           /// A MemPlace with its layout. Constructing it is only possible in this module.
      658 ( 0.00%)  #[derive(Copy, Clone, Hash, Eq, PartialEq, Debug)]
        .           pub struct MPlaceTy<'tcx, Tag: Provenance = AllocId> {
        .               mplace: MemPlace<Tag>,
        .               pub layout: TyAndLayout<'tcx>,
        .           }
        .           
        .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
        .           rustc_data_structures::static_assert_size!(MPlaceTy<'_>, 64);
        .           
-- line 109 ----------------------------------------
-- line 113 ----------------------------------------
        .               fn deref(&self) -> &MemPlace<Tag> {
        .                   &self.mplace
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
   10,108 ( 0.00%)          PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<Tag: Provenance> MemPlace<Tag> {
        .               #[inline(always)]
        .               pub fn from_ptr(ptr: Pointer<Option<Tag>>, align: Align) -> Self {
        .                   MemPlace { ptr, align, meta: MemPlaceMeta::None }
        .               }
-- line 129 ----------------------------------------
-- line 132 ----------------------------------------
        .               pub fn map_provenance(self, f: impl FnOnce(Option<Tag>) -> Option<Tag>) -> Self {
        .                   MemPlace { ptr: self.ptr.map_provenance(f), ..self }
        .               }
        .           
        .               /// Turn a mplace into a (thin or wide) pointer, as a reference, pointing to the same space.
        .               /// This is the inverse of `ref_to_mplace`.
        .               #[inline(always)]
        .               pub fn to_ref(self, cx: &impl HasDataLayout) -> Immediate<Tag> {
    2,502 ( 0.00%)          match self.meta {
      441 ( 0.00%)              MemPlaceMeta::None => Immediate::from(Scalar::from_maybe_pointer(self.ptr, cx)),
        .                       MemPlaceMeta::Meta(meta) => {
    1,456 ( 0.00%)                  Immediate::ScalarPair(Scalar::from_maybe_pointer(self.ptr, cx).into(), meta.into())
        .                       }
        .                       MemPlaceMeta::Poison => bug!(
        .                           "MPlaceTy::dangling may never be used to produce a \
        .                           place that will have the address of its pointee taken"
        .                       ),
        .                   }
        .               }
        .           
-- line 151 ----------------------------------------
-- line 163 ----------------------------------------
        .                   })
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {
        .               /// Produces a MemPlace that works for ZST but nothing else
        .               #[inline]
        .               pub fn dangling(layout: TyAndLayout<'tcx>) -> Self {
       12 ( 0.00%)          let align = layout.align.abi;
        .                   let ptr = Pointer::new(None, Size::from_bytes(align.bytes())); // no provenance, absolute address
        .                   // `Poison` this to make sure that the pointer value `ptr` is never observable by the program.
        .                   MPlaceTy { mplace: MemPlace { ptr, align, meta: MemPlaceMeta::Poison }, layout }
        .               }
        .           
        .               #[inline]
        .               pub fn offset(
        .                   &self,
        .                   offset: Size,
        .                   meta: MemPlaceMeta<Tag>,
        .                   layout: TyAndLayout<'tcx>,
        .                   cx: &impl HasDataLayout,
        .               ) -> InterpResult<'tcx, Self> {
1,320,746 ( 0.02%)          Ok(MPlaceTy { mplace: self.mplace.offset(offset, meta, cx)?, layout })
        .               }
        .           
        .               #[inline]
        .               pub fn from_aligned_ptr(ptr: Pointer<Option<Tag>>, layout: TyAndLayout<'tcx>) -> Self {
      275 ( 0.00%)          MPlaceTy { mplace: MemPlace::from_ptr(ptr, layout.align.abi), layout }
        .               }
        .           
        .               #[inline]
  101,382 ( 0.00%)      pub(super) fn len(&self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {
  468,690 ( 0.01%)          if self.layout.is_unsized() {
        .                       // We need to consult `meta` metadata
   14,580 ( 0.00%)              match self.layout.ty.kind() {
    5,056 ( 0.00%)                  ty::Slice(..) | ty::Str => self.mplace.meta.unwrap_meta().to_machine_usize(cx),
        .                           _ => bug!("len not supported on unsized type {:?}", self.layout.ty),
        .                       }
        .                   } else {
        .                       // Go through the layout.  There are lots of types that support a length,
        .                       // e.g., SIMD types. (But not all repr(simd) types even have FieldsShape::Array!)
  239,608 ( 0.00%)              match self.layout.fields {
  219,766 ( 0.00%)                  FieldsShape::Array { count, .. } => Ok(count),
        .                           _ => bug!("len not supported on sized type {:?}", self.layout.ty),
        .                       }
        .                   }
  202,764 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub(super) fn vtable(&self) -> Scalar<Tag> {
        .                   match self.layout.ty.kind() {
        .                       ty::Dynamic(..) => self.mplace.meta.unwrap_meta(),
        .                       _ => bug!("vtable not supported on type {:?}", self.layout.ty),
        .                   }
        .               }
-- line 217 ----------------------------------------
-- line 218 ----------------------------------------
        .           }
        .           
        .           // These are defined here because they produce a place.
        .           impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
        .               /// read from the resulting mplace, not to get its address back.
        .               pub fn try_as_mplace(&self) -> Result<MPlaceTy<'tcx, Tag>, ImmTy<'tcx, Tag>> {
  824,346 ( 0.01%)          match **self {
2,268,929 ( 0.04%)              Operand::Indirect(mplace) => Ok(MPlaceTy { mplace, layout: self.layout }),
       62 ( 0.00%)              Operand::Immediate(_) if self.layout.is_zst() => Ok(MPlaceTy::dangling(self.layout)),
1,697,017 ( 0.03%)              Operand::Immediate(imm) => Err(ImmTy::from_immediate(imm, self.layout)),
        .                   }
        .               }
        .           
        .               #[inline(always)]
        .               /// Note: do not call `as_ref` on the resulting place. This function should only be used to
        .               /// read from the resulting mplace, not to get its address back.
        .               pub fn assert_mem_place(&self) -> MPlaceTy<'tcx, Tag> {
        .                   self.try_as_mplace().unwrap()
-- line 237 ----------------------------------------
-- line 263 ----------------------------------------
        .               M: Machine<'mir, 'tcx, PointerTag = Tag>,
        .           {
        .               /// Take a value, which represents a (thin or wide) reference, and make it a place.
        .               /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.
        .               ///
        .               /// Only call this if you are sure the place is "valid" (aligned and inbounds), or do not
        .               /// want to ever use the place for memory access!
        .               /// Generally prefer `deref_operand`.
   27,590 ( 0.00%)      pub fn ref_to_mplace(
        .                   &self,
        .                   val: &ImmTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   let pointee_type =
    8,277 ( 0.00%)              val.layout.ty.builtin_deref(true).expect("`ref_to_mplace` called on non-ptr type").ty;
    8,277 ( 0.00%)          let layout = self.layout_of(pointee_type)?;
   13,795 ( 0.00%)          let (ptr, meta) = match **val {
      254 ( 0.00%)              Immediate::Scalar(ptr) => (ptr, MemPlaceMeta::None),
   18,424 ( 0.00%)              Immediate::ScalarPair(ptr, meta) => (ptr, MemPlaceMeta::Meta(meta.check_init()?)),
        .                   };
        .           
        .                   let mplace = MemPlace {
        .                       ptr: self.scalar_to_ptr(ptr.check_init()?),
        .                       // We could use the run-time alignment here. For now, we do not, because
        .                       // the point of tracking the alignment here is to make sure that the *static*
        .                       // alignment information emitted with the loads is correct. The run-time
        .                       // alignment can only be more restrictive.
    2,759 ( 0.00%)              align: layout.align.abi,
        .                       meta,
        .                   };
   46,903 ( 0.00%)          Ok(MPlaceTy { mplace, layout })
   24,831 ( 0.00%)      }
        .           
        .               /// Take an operand, representing a pointer, and dereference it to a place -- that
        .               /// will always be a MemPlace.  Lives in `place.rs` because it creates a place.
        .               pub fn deref_operand(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   let val = self.read_immediate(src)?;
-- line 301 ----------------------------------------
-- line 306 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub(super) fn get_alloc(
        .                   &self,
        .                   place: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
        .                   assert!(!place.layout.is_unsized());
   73,862 ( 0.00%)          assert!(!place.meta.has_meta());
   73,862 ( 0.00%)          let size = place.layout.size;
  664,758 ( 0.01%)          self.memory.get(place.ptr, size, place.align)
        .               }
        .           
        .               #[inline]
        .               pub(super) fn get_alloc_mut(
        .                   &mut self,
        .                   place: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::PointerTag, M::AllocExtra>>> {
   61,728 ( 0.00%)          assert!(!place.layout.is_unsized());
   61,716 ( 0.00%)          assert!(!place.meta.has_meta());
   61,716 ( 0.00%)          let size = place.layout.size;
  370,296 ( 0.01%)          self.memory.get_mut(place.ptr, size, place.align)
        .               }
        .           
        .               /// Check if this mplace is dereferenceable and sufficiently aligned.
        .               fn check_mplace_access(
        .                   &self,
        .                   mplace: MPlaceTy<'tcx, M::PointerTag>,
        .                   msg: CheckInAllocMsg,
        .               ) -> InterpResult<'tcx> {
-- line 335 ----------------------------------------
-- line 349 ----------------------------------------
        .               /// This also works for arrays, but then the `usize` index type is restricting.
        .               /// For indexing into arrays, use `mplace_index`.
        .               #[inline(always)]
        .               pub fn mplace_field(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
  472,052 ( 0.01%)          let offset = base.layout.fields.offset(field);
  366,941 ( 0.01%)          let field_layout = base.layout.field(self, field);
        .           
        .                   // Offset may need adjustment for unsized fields.
  780,387 ( 0.01%)          let (meta, offset) = if field_layout.is_unsized() {
        .                       // Re-use parent metadata to determine dynamic field layout.
        .                       // With custom DSTS, this *will* execute user-defined code, but the same
        .                       // happens at run-time so that's okay.
        .                       match self.size_and_align_of(&base.meta, &field_layout)? {
        .                           Some((_, align)) => (base.meta, offset.align_to(align)),
        .                           None => {
        .                               // For unsized types with an extern type tail we perform no adjustments.
        .                               // NOTE: keep this in sync with `PlaceRef::project_field` in the codegen backend.
-- line 369 ----------------------------------------
-- line 374 ----------------------------------------
        .                   } else {
        .                       // base.meta could be present; we might be accessing a sized field of an unsized
        .                       // struct.
        .                       (MemPlaceMeta::None, offset)
        .                   };
        .           
        .                   // We do not look at `base.layout.align` nor `field_layout.align`, unlike
        .                   // codegen -- mostly to see if we can get away with that
   96,112 ( 0.00%)          base.offset(offset, meta, field_layout, self)
        .               }
        .           
        .               /// Index into an array.
        .               #[inline(always)]
        .               pub fn mplace_index(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   // Not using the layout method because we want to compute on u64
   90,315 ( 0.00%)          match base.layout.fields {
   30,105 ( 0.00%)              FieldsShape::Array { stride, .. } => {
  120,420 ( 0.00%)                  let len = base.len(self)?;
   60,210 ( 0.00%)                  if index >= len {
        .                               // This can only be reached in ConstProp and non-rustc-MIR.
        .                               throw_ub!(BoundsCheckFailed { len, index });
        .                           }
        .                           let offset = stride * index; // `Size` multiplication
        .                           // All fields have the same layout.
   60,210 ( 0.00%)                  let field_layout = base.layout.field(self, 0);
        .           
   30,105 ( 0.00%)                  assert!(!field_layout.is_unsized());
        .                           base.offset(offset, MemPlaceMeta::None, field_layout, self)
        .                       }
        .                       _ => span_bug!(
        .                           self.cur_span(),
        .                           "`mplace_index` called on non-array type {:?}",
        .                           base.layout.ty
        .                       ),
        .                   }
        .               }
        .           
        .               // Iterates over all fields of an array. Much more efficient than doing the
        .               // same by repeatedly calling `mplace_array`.
  411,700 ( 0.01%)      pub(super) fn mplace_array_fields<'a>(
        .                   &self,
        .                   base: &'a MPlaceTy<'tcx, Tag>,
        .               ) -> InterpResult<'tcx, impl Iterator<Item = InterpResult<'tcx, MPlaceTy<'tcx, Tag>>> + 'a>
        .               {
  164,680 ( 0.00%)          let len = base.len(self)?; // also asserts that we have a type where this makes sense
  123,510 ( 0.00%)          let stride = match base.layout.fields {
   41,170 ( 0.00%)              FieldsShape::Array { stride, .. } => stride,
        .                       _ => span_bug!(self.cur_span(), "mplace_array_fields: expected an array layout"),
        .                   };
   82,340 ( 0.00%)          let layout = base.layout.field(self, 0);
   41,170 ( 0.00%)          let dl = &self.tcx.data_layout;
        .                   // `Size` multiplication
  954,034 ( 0.02%)          Ok((0..len).map(move |i| base.offset(stride * i, MemPlaceMeta::None, layout, dl)))
  370,530 ( 0.01%)      }
        .           
        .               fn mplace_subslice(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   from: u64,
        .                   to: u64,
        .                   from_end: bool,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
-- line 439 ----------------------------------------
-- line 476 ----------------------------------------
        .               }
        .           
        .               pub(crate) fn mplace_downcast(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   // Downcasts only change the layout
      119 ( 0.00%)          assert!(!base.meta.has_meta());
      458 ( 0.00%)          Ok(MPlaceTy { layout: base.layout.for_variant(self, variant), ..*base })
        .               }
        .           
        .               /// Project into an mplace
  301,050 ( 0.00%)      pub(super) fn mplace_projection(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
  722,520 ( 0.01%)          Ok(match proj_elem {
        .                       Field(field, _) => self.mplace_field(base, field.index())?,
        .                       Downcast(_, variant) => self.mplace_downcast(base, variant)?,
        .                       Deref => self.deref_operand(&base.into())?,
        .           
   30,105 ( 0.00%)              Index(local) => {
  150,525 ( 0.00%)                  let layout = self.layout_of(self.tcx.types.usize)?;
  180,630 ( 0.00%)                  let n = self.access_local(self.frame(), local, Some(layout))?;
   60,210 ( 0.00%)                  let n = self.read_scalar(&n)?;
   30,105 ( 0.00%)                  let n = n.to_machine_usize(self)?;
        .                           self.mplace_index(base, n)?
        .                       }
        .           
        .                       ConstantIndex { offset, min_length, from_end } => {
        .                           let n = base.len(self)?;
        .                           if n < min_length {
        .                               // This can only be reached in ConstProp and non-rustc-MIR.
        .                               throw_ub!(BoundsCheckFailed { len: min_length, index: n });
-- line 512 ----------------------------------------
-- line 520 ----------------------------------------
        .                               offset
        .                           };
        .           
        .                           self.mplace_index(base, index)?
        .                       }
        .           
        .                       Subslice { from, to, from_end } => self.mplace_subslice(base, from, to, from_end)?,
        .                   })
  240,840 ( 0.00%)      }
        .           
        .               /// Converts a repr(simd) place into a place where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn mplace_to_simd(
        .                   &self,
        .                   base: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 536 ----------------------------------------
-- line 542 ----------------------------------------
        .                   assert_eq!(layout.size, base.layout.size);
        .                   Ok((MPlaceTy { layout, ..*base }, len))
        .               }
        .           
        .               /// Gets the place of a field inside the place, and also the field's type.
        .               /// Just a convenience function, but used quite a bit.
        .               /// This is the only projection that might have a side-effect: We cannot project
        .               /// into the field of a local `ScalarPair`, we have to first allocate it.
  817,880 ( 0.01%)      pub fn place_field(
        .                   &mut self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   // FIXME: We could try to be smarter and avoid allocation for fields that span the
        .                   // entire place.
   81,788 ( 0.00%)          let mplace = self.force_allocation(base)?;
  981,456 ( 0.02%)          Ok(self.mplace_field(&mplace, field)?.into())
  654,304 ( 0.01%)      }
        .           
        .               pub fn place_index(
        .                   &mut self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   let mplace = self.force_allocation(base)?;
        .                   Ok(self.mplace_index(&mplace, index)?.into())
-- line 567 ----------------------------------------
-- line 568 ----------------------------------------
        .               }
        .           
        .               pub fn place_downcast(
        .                   &self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   // Downcast just changes the layout
      440 ( 0.00%)          Ok(match base.place {
        .                       Place::Ptr(mplace) => {
        .                           self.mplace_downcast(&MPlaceTy { mplace, layout: base.layout }, variant)?.into()
        .                       }
        .                       Place::Local { .. } => {
      371 ( 0.00%)                  let layout = base.layout.for_variant(self, variant);
       55 ( 0.00%)                  PlaceTy { layout, ..*base }
        .                       }
        .                   })
        .               }
        .           
        .               /// Projects into a place.
        .               pub fn place_projection(
        .                   &mut self,
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .                   &proj_elem: &mir::ProjectionElem<mir::Local, Ty<'tcx>>,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
  178,195 ( 0.00%)          Ok(match proj_elem {
   59,110 ( 0.00%)              Field(field, _) => self.place_field(base, field.index())?,
        .                       Downcast(_, variant) => self.place_downcast(base, variant)?,
        .                       Deref => self.deref_operand(&self.place_to_op(base)?)?.into(),
        .                       // For the other variants, we have to force an allocation.
        .                       // This matches `operand_projection`.
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           let mplace = self.force_allocation(base)?;
        .                           self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
-- line 603 ----------------------------------------
-- line 611 ----------------------------------------
        .                   base: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   let mplace = self.force_allocation(base)?;
        .                   self.mplace_to_simd(&mplace)
        .               }
        .           
        .               /// Computes a place. You should only use this if you intend to write into this
        .               /// place; for reading, a more efficient alternative is `eval_place_for_read`.
1,869,104 ( 0.03%)      pub fn eval_place(
        .                   &mut self,
        .                   place: mir::Place<'tcx>,
        .               ) -> InterpResult<'tcx, PlaceTy<'tcx, M::PointerTag>> {
1,168,170 ( 0.02%)          let mut place_ty = PlaceTy {
        .                       // This works even for dead/uninitialized locals; we check further when writing
        .                       place: Place::Local { frame: self.frame_idx(), local: place.local },
        .                       layout: self.layout_of_local(self.frame(), place.local, None)?,
        .                   };
        .           
   23,770 ( 0.00%)          for elem in place.projection.iter() {
   11,877 ( 0.00%)              place_ty = self.place_projection(&place_ty, &elem)?
        .                   }
        .           
        .                   trace!("{:?}", self.dump_place(place_ty.place));
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       place_ty.layout,
        .                   ));
4,205,268 ( 0.07%)          Ok(place_ty)
1,869,104 ( 0.03%)      }
        .           
        .               /// Write an immediate to a place
        .               #[inline(always)]
        .               pub fn write_immediate(
        .                   &mut self,
        .                   src: Immediate<M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
  281,680 ( 0.00%)          self.write_immediate_no_validate(src, dest)?;
        .           
        .                   if M::enforce_validity(self) {
        .                       // Data got changed, better make sure it matches the type!
        .                       self.validate_operand(&self.place_to_op(dest)?)?;
        .                   }
        .           
        .                   Ok(())
        .               }
-- line 661 ----------------------------------------
-- line 678 ----------------------------------------
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   self.write_scalar(Scalar::from_maybe_pointer(ptr.into(), self), dest)
        .               }
        .           
        .               /// Write an immediate to a place.
        .               /// If you use this you are responsible for validating that things got copied at the
        .               /// right type.
  212,238 ( 0.00%)      fn write_immediate_no_validate(
        .                   &mut self,
        .                   src: Immediate<M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   if cfg!(debug_assertions) {
        .                       // This is a very common path, avoid some checks in release mode
        .                       assert!(!dest.layout.is_unsized(), "Cannot write unsized data");
        .                       match src {
-- line 694 ----------------------------------------
-- line 705 ----------------------------------------
        .                               // FIXME: Can we check anything here?
        .                           }
        .                       }
        .                   }
        .                   trace!("write_immediate: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
        .           
        .                   // See if we can avoid an allocation. This is the counterpart to `try_read_immediate`,
        .                   // but not factored as a separate function.
  425,340 ( 0.01%)          let mplace = match dest.place {
  302,237 ( 0.01%)              Place::Local { frame, local } => {
    1,170 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
        .                               Ok(local) => {
        .                                   // Local can be updated in-place.
1,509,306 ( 0.03%)                          *local = LocalValue::Live(Operand::Immediate(src));
        .                                   return Ok(());
        .                               }
        .                               Err(mplace) => {
        .                                   // The local is in memory, go on below.
        .                                   mplace
        .                               }
        .                           }
        .                       }
  370,155 ( 0.01%)              Place::Ptr(mplace) => mplace, // already referring to memory
        .                   };
  555,226 ( 0.01%)          let dest = MPlaceTy { mplace, layout: dest.layout };
        .           
        .                   // This is already in memory, write there.
  678,369 ( 0.01%)          self.write_immediate_to_mplace_no_validate(src, &dest)
  424,476 ( 0.01%)      }
        .           
        .               /// Write an immediate to memory.
        .               /// If you use this you are responsible for validating that things got copied at the
        .               /// right type.
  617,160 ( 0.01%)      fn write_immediate_to_mplace_no_validate(
        .                   &mut self,
        .                   value: Immediate<M::PointerTag>,
        .                   dest: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   // Note that it is really important that the type here is the right one, and matches the
        .                   // type things are read at. In case `src_val` is a `ScalarPair`, we don't do any magic here
        .                   // to handle padding properly, which is only correct if we never look at this data with the
        .                   // wrong type.
        .           
        .                   // Invalid places are a thing: the return place of a diverging function
   61,716 ( 0.00%)          let tcx = *self.tcx;
  123,432 ( 0.00%)          let mut alloc = match self.get_alloc_mut(dest)? {
  308,550 ( 0.01%)              Some(a) => a,
        .                       None => return Ok(()), // zero-sized access
        .                   };
        .           
        .                   // FIXME: We should check that there are dest.layout.size many bytes available in
        .                   // memory.  The code below is not sufficient, with enough padding it might not
        .                   // cover all the bytes!
  123,420 ( 0.00%)          match value {
        .                       Immediate::Scalar(scalar) => {
  121,836 ( 0.00%)                  match dest.layout.abi {
        .                               Abi::Scalar(_) => {} // fine
        .                               _ => span_bug!(
        .                                   self.cur_span(),
        .                                   "write_immediate_to_mplace: invalid Scalar layout: {:#?}",
        .                                   dest.layout
        .                               ),
        .                           }
  548,262 ( 0.01%)                  alloc.write_scalar(alloc_range(Size::ZERO, dest.layout.size), scalar)
        .                       }
        .                       Immediate::ScalarPair(a_val, b_val) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
    1,584 ( 0.00%)                  let (a, b) = match dest.layout.abi {
    2,376 ( 0.00%)                      Abi::ScalarPair(a, b) => (a.value, b.value),
        .                               _ => span_bug!(
        .                                   self.cur_span(),
        .                                   "write_immediate_to_mplace: invalid ScalarPair layout: {:#?}",
        .                                   dest.layout
        .                               ),
        .                           };
        .                           let (a_size, b_size) = (a.size(&tcx), b.size(&tcx));
        .                           let b_offset = a_size.align_to(b.align(&tcx).abi);
        .           
        .                           // It is tempting to verify `b_offset` against `layout.fields.offset(1)`,
        .                           // but that does not work: We could be a newtype around a pair, then the
        .                           // fields do not match the `ScalarPair` components.
        .           
    7,920 ( 0.00%)                  alloc.write_scalar(alloc_range(Size::ZERO, a_size), a_val)?;
    6,336 ( 0.00%)                  alloc.write_scalar(alloc_range(b_offset, b_size), b_val)
        .                       }
        .                   }
  493,728 ( 0.01%)      }
        .           
        .               /// Copies the data from an operand to a place. This does not support transmuting!
        .               /// Use `copy_op_transmute` if the layouts could disagree.
        .               #[inline(always)]
        .               pub fn copy_op(
        .                   &mut self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
  958,636 ( 0.02%)          self.copy_op_no_validate(src, dest)?;
        .           
        .                   if M::enforce_validity(self) {
        .                       // Data got changed, better make sure it matches the type!
        .                       self.validate_operand(&self.place_to_op(dest)?)?;
        .                   }
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Copies the data from an operand to a place. This does not support transmuting!
        .               /// Use `copy_op_transmute` if the layouts could disagree.
        .               /// Also, if you use this you are responsible for validating that things get copied at the
        .               /// right type.
1,294,232 ( 0.02%)      fn copy_op_no_validate(
        .                   &mut self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   // We do NOT compare the types for equality, because well-typed code can
        .                   // actually "transmute" `&mut T` to `&T` in an assignment without a cast.
2,915,904 ( 0.05%)          if !mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
        .                       span_bug!(
        .                           self.cur_span(),
        .                           "type mismatch when copying!\nsrc: {:?},\ndest: {:?}",
        .                           src.layout.ty,
        .                           dest.layout.ty,
        .                       );
        .                   }
        .           
        .                   // Let us see if the layout is simple so we take a shortcut, avoid force_allocation.
  810,191 ( 0.01%)          let src = match self.try_read_immediate(src)? {
        .                       Ok(src_val) => {
  121,528 ( 0.00%)                  assert!(!src.layout.is_unsized(), "cannot have unsized immediates");
        .                           // Yay, we got a value that we can write directly.
        .                           // FIXME: Add a check to make sure that if `src` is indirect,
        .                           // it does not overlap with `dest`.
1,575,496 ( 0.03%)                  return self.write_immediate_no_validate(*src_val, dest);
        .                       }
  324,712 ( 0.01%)              Err(mplace) => mplace,
        .                   };
        .                   // Slow path, this does not fit into an immediate. Just memcpy.
        .                   trace!("copy_op: {:?} <- {:?}: {}", *dest, src, dest.layout.ty);
        .           
        .                   // This interprets `src.meta` with the `dest` local's layout, if an unsized local
        .                   // is being initialized!
  527,657 ( 0.01%)          let (dest, size) = self.force_allocation_maybe_sized(dest, src.meta)?;
        .                   let size = size.unwrap_or_else(|| {
   62,196 ( 0.00%)              assert!(
        .                           !dest.layout.is_unsized(),
        .                           "Cannot copy into already initialized unsized place"
        .                       );
   20,732 ( 0.00%)              dest.layout.size
        .                   });
   40,589 ( 0.00%)          assert_eq!(src.meta, dest.meta, "Can only copy between equally-sized instances");
        .           
   40,589 ( 0.00%)          self.memory
  121,767 ( 0.00%)              .copy(src.ptr, src.align, dest.ptr, dest.align, size, /*nonoverlapping*/ true)
1,294,232 ( 0.02%)      }
        .           
        .               /// Copies the data from an operand to a place. The layouts may disagree, but they must
        .               /// have the same size.
  159,800 ( 0.00%)      pub fn copy_op_transmute(
        .                   &mut self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
  359,550 ( 0.01%)          if mir_assign_valid_types(*self.tcx, self.param_env, src.layout, dest.layout) {
        .                       // Fast path: Just use normal `copy_op`
        .                       return self.copy_op(src, dest);
        .                   }
        .                   // We still require the sizes to match.
        .                   if src.layout.size != dest.layout.size {
        .                       // FIXME: This should be an assert instead of an error, but if we transmute within an
        .                       // array length computation, `typeck` may not have yet been run and errored out. In fact
        .                       // most likey we *are* running `typeck` right now. Investigate whether we can bail out
-- line 878 ----------------------------------------
-- line 916 ----------------------------------------
        .               /// Ensures that a place is in memory, and returns where it is.
        .               /// If the place currently refers to a local that doesn't yet have a matching allocation,
        .               /// create such an allocation.
        .               /// This is essentially `force_to_memplace`.
        .               ///
        .               /// This supports unsized types and returns the computed size to avoid some
        .               /// redundant computation when copying; use `force_allocation` for a simpler, sized-only
        .               /// version.
1,372,950 ( 0.02%)      pub fn force_allocation_maybe_sized(
        .                   &mut self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .                   meta: MemPlaceMeta<M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, Option<Size>)> {
1,525,476 ( 0.03%)          let (mplace, size) = match place.place {
  132,308 ( 0.00%)              Place::Local { frame, local } => {
  264,365 ( 0.00%)                  match M::access_local_mut(self, frame, local)? {
  457,020 ( 0.01%)                      Ok(&mut local_val) => {
        .                                   // We need to make an allocation.
        .           
        .                                   // We need the layout of the local.  We can NOT use the layout we got,
        .                                   // that might e.g., be an inner field of a struct with `Scalar` layout,
        .                                   // that has different alignment than the outer field.
        .                                   let local_layout =
  254,560 ( 0.00%)                              self.layout_of_local(&self.stack()[frame], local, None)?;
        .                                   // We also need to support unsized types, and hence cannot use `allocate`.
  202,900 ( 0.00%)                          let (size, align) = self
        .                                       .size_and_align_of(&meta, &local_layout)?
        .                                       .expect("Cannot allocate for non-dyn-sized type");
  355,240 ( 0.01%)                          let ptr = self.memory.allocate(size, align, MemoryKind::Stack)?;
        .                                   let mplace = MemPlace { ptr: ptr.into(), align, meta };
  253,900 ( 0.00%)                          if let LocalValue::Live(Operand::Immediate(value)) = local_val {
        .                                       // Preserve old value.
        .                                       // We don't have to validate as we can assume the local
        .                                       // was already valid for its type.
      140 ( 0.00%)                              let mplace = MPlaceTy { mplace, layout: local_layout };
      210 ( 0.00%)                              self.write_immediate_to_mplace_no_validate(value, &mplace)?;
        .                                   }
        .                                   // Now we can call `access_mut` again, asserting it goes well,
        .                                   // and actually overwrite things.
  964,160 ( 0.02%)                          *M::access_local_mut(self, frame, local).unwrap().unwrap() =
        .                                       LocalValue::Live(Operand::Indirect(mplace));
  355,460 ( 0.01%)                          (mplace, Some(size))
        .                               }
  810,262 ( 0.01%)                      Err(mplace) => (mplace, None), // this already was an indirect local
        .                           }
        .                       }
  269,510 ( 0.00%)              Place::Ptr(mplace) => (mplace, None),
        .                   };
        .                   // Return with the original layout, so that the caller can go on
1,830,564 ( 0.03%)          Ok((MPlaceTy { mplace, layout: place.layout }, size))
1,220,400 ( 0.02%)      }
        .           
        .               #[inline(always)]
        .               pub fn force_allocation(
        .                   &mut self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
1,097,770 ( 0.02%)          Ok(self.force_allocation_maybe_sized(place, MemPlaceMeta::None)?.0)
        .               }
        .           
      784 ( 0.00%)      pub fn allocate(
        .                   &mut self,
        .                   layout: TyAndLayout<'tcx>,
        .                   kind: MemoryKind<M::MemoryKind>,
        .               ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {
    3,113 ( 0.00%)          let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;
      588 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
      686 ( 0.00%)      }
        .           
        .               /// Returns a wide MPlace of type `&'static [mut] str` to a new 1-aligned allocation.
    2,080 ( 0.00%)      pub fn allocate_str(
        .                   &mut self,
        .                   str: &str,
        .                   kind: MemoryKind<M::MemoryKind>,
        .                   mutbl: Mutability,
        .               ) -> MPlaceTy<'tcx, M::PointerTag> {
    1,872 ( 0.00%)          let ptr = self.memory.allocate_bytes(str.as_bytes(), Align::ONE, kind, mutbl);
        .                   let meta = Scalar::from_machine_usize(u64::try_from(str.len()).unwrap(), self);
        .                   let mplace =
        .                       MemPlace { ptr: ptr.into(), align: Align::ONE, meta: MemPlaceMeta::Meta(meta) };
        .           
        .                   let ty = self.tcx.mk_ref(
      208 ( 0.00%)              self.tcx.lifetimes.re_static,
      208 ( 0.00%)              ty::TypeAndMut { ty: self.tcx.types.str_, mutbl },
        .                   );
      624 ( 0.00%)          let layout = self.layout_of(ty).unwrap();
    2,080 ( 0.00%)          MPlaceTy { mplace, layout }
    1,664 ( 0.00%)      }
        .           
        .               /// Writes the discriminant of the given variant.
    1,694 ( 0.00%)      pub fn write_discriminant(
        .                   &mut self,
        .                   variant_index: VariantIdx,
        .                   dest: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx> {
        .                   // This must be an enum or generator.
      616 ( 0.00%)          match dest.layout.ty.kind() {
      308 ( 0.00%)              ty::Adt(adt, _) => assert!(adt.is_enum()),
        .                       ty::Generator(..) => {}
        .                       _ => span_bug!(
        .                           self.cur_span(),
        .                           "write_discriminant called on non-variant-type (neither enum nor generator)"
        .                       ),
        .                   }
        .                   // Layout computation excludes uninhabited variants from consideration
        .                   // therefore there's no way to represent those variants in the given layout.
        .                   // Essentially, uninhabited variants do not have a tag that corresponds to their
        .                   // discriminant, so we cannot do anything here.
        .                   // When evaluating we will always error before even getting here, but ConstProp 'executes'
        .                   // dead code, so we cannot ICE here.
      913 ( 0.00%)          if dest.layout.for_variant(self, variant_index).abi.is_uninhabited() {
        .                       throw_ub!(UninhabitedEnumVariantWritten)
        .                   }
        .           
      770 ( 0.00%)          match dest.layout.variants {
        .                       Variants::Single { index } => {
        .                           assert_eq!(index, variant_index);
        .                       }
        .                       Variants::Multiple {
        .                           tag_encoding: TagEncoding::Direct,
      351 ( 0.00%)                  tag: tag_layout,
      150 ( 0.00%)                  tag_field,
        .                           ..
        .                       } => {
        .                           // No need to validate that the discriminant here because the
        .                           // `TyAndLayout::for_variant()` call earlier already checks the variant is valid.
        .           
        .                           let discr_val =
      468 ( 0.00%)                      dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;
        .           
        .                           // raw discriminants for enums are isize or bigger during
        .                           // their computation, but the in-memory tag is the smallest possible
        .                           // representation
        .                           let size = tag_layout.value.size(self);
        .                           let tag_val = size.truncate(discr_val);
        .           
      501 ( 0.00%)                  let tag_dest = self.place_field(dest, tag_field)?;
        .                           self.write_scalar(Scalar::from_uint(tag_val, size), &tag_dest)?;
        .                       }
        .                       Variants::Multiple {
        .                           tag_encoding:
        .                               TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start },
        .                           tag: tag_layout,
        .                           tag_field,
        .                           ..
        .                       } => {
        .                           // No need to validate that the discriminant here because the
        .                           // `TyAndLayout::for_variant()` call earlier already checks the variant is valid.
        .           
       37 ( 0.00%)                  if variant_index != dataful_variant {
        .                               let variants_start = niche_variants.start().as_u32();
        .                               let variant_index_relative = variant_index
        .                                   .as_u32()
        .                                   .checked_sub(variants_start)
        .                                   .expect("overflow computing relative variant idx");
        .                               // We need to use machine arithmetic when taking into account `niche_start`:
        .                               // tag_val = variant_index_relative + niche_start_val
       36 ( 0.00%)                      let tag_layout = self.layout_of(tag_layout.value.to_int_ty(*self.tcx))?;
        .                               let niche_start_val = ImmTy::from_uint(niche_start, tag_layout);
        .                               let variant_index_relative_val =
        .                                   ImmTy::from_uint(variant_index_relative, tag_layout);
        .                               let tag_val = self.binary_op(
        .                                   mir::BinOp::Add,
        .                                   &variant_index_relative_val,
        .                                   &niche_start_val,
        .                               )?;
        .                               // Write result.
       48 ( 0.00%)                      let niche_dest = self.place_field(dest, tag_field)?;
        .                               self.write_immediate(*tag_val, &niche_dest)?;
        .                           }
        .                       }
        .                   }
        .           
        .                   Ok(())
    1,232 ( 0.00%)      }
        .           
    1,107 ( 0.00%)      pub fn raw_const_to_mplace(
        .                   &self,
        .                   raw: ConstAlloc<'tcx>,
        .               ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {
        .                   // This must be an allocation in `tcx`
      369 ( 0.00%)          let _ = self.tcx.global_alloc(raw.alloc_id);
        .                   let ptr = self.global_base_pointer(Pointer::from(raw.alloc_id))?;
      456 ( 0.00%)          let layout = self.layout_of(raw.ty)?;
      738 ( 0.00%)          Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))
      861 ( 0.00%)      }
        .           
        .               /// Turn a place with a `dyn Trait` type into a place with the actual dynamic type.
        .               /// Also return some more information so drop doesn't have to run the same code twice.
        .               pub(super) fn unpack_dyn_trait(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (ty::Instance<'tcx>, MPlaceTy<'tcx, M::PointerTag>)> {
        .                   let vtable = self.scalar_to_ptr(mplace.vtable()); // also sanity checks the type
-- line 1109 ----------------------------------------

2,538,055 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/place.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .           use rustc_span::hygiene::MacroKind;
        .           use rustc_span::source_map::Spanned;
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use rustc_span::Span;
        .           use rustc_target::spec::abi::Abi;
        .           use std::collections::VecDeque;
        .           
        .           fn fn_decl<'hir>(node: Node<'hir>) -> Option<&'hir FnDecl<'hir>> {
    1,290 ( 0.00%)      match node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(&sig.decl),
        .                   Node::Expr(Expr { kind: ExprKind::Closure(_, fn_decl, ..), .. })
        .                   | Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, ..), .. }) => {
        .                       Some(fn_decl)
        .                   }
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn fn_sig<'hir>(node: Node<'hir>) -> Option<&'hir FnSig<'hir>> {
      325 ( 0.00%)      match &node {
        .                   Node::Item(Item { kind: ItemKind::Fn(sig, _, _), .. })
        .                   | Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(sig, _), .. })
        .                   | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(sig, _), .. }) => Some(sig),
        .                   _ => None,
        .               }
        .           }
        .           
        .           pub fn associated_body<'hir>(node: Node<'hir>) -> Option<BodyId> {
   18,808 ( 0.00%)      match node {
        .                   Node::Item(Item {
        .                       kind: ItemKind::Const(_, body) | ItemKind::Static(.., body) | ItemKind::Fn(.., body),
        .                       ..
        .                   })
        .                   | Node::TraitItem(TraitItem {
        .                       kind:
        .                           TraitItemKind::Const(_, Some(body)) | TraitItemKind::Fn(_, TraitFn::Provided(body)),
        .                       ..
        .                   })
        .                   | Node::ImplItem(ImplItem {
        .                       kind: ImplItemKind::Const(_, body) | ImplItemKind::Fn(_, body),
        .                       ..
        .                   })
    3,409 ( 0.00%)          | Node::Expr(Expr { kind: ExprKind::Closure(.., body, _, _), .. }) => Some(*body),
        .           
    2,376 ( 0.00%)          Node::AnonConst(constant) => Some(constant.body),
        .           
        .                   _ => None,
        .               }
        .           }
        .           
        .           fn is_body_owner<'hir>(node: Node<'hir>, hir_id: HirId) -> bool {
        .               match associated_body(node) {
        .                   Some(b) => b.hir_id == hir_id,
-- line 71 ----------------------------------------
-- line 83 ----------------------------------------
        .           pub struct ParentHirIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentHirIterator<'hir> {
        .               type Item = (HirId, Node<'hir>);
        .           
    2,989 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
      427 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
        .                       return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.get_parent_node(self.current_id);
        .           
    1,239 ( 0.00%)              if parent_id == self.current_id {
        .                           self.current_id = CRATE_HIR_ID;
        .                           return None;
        .                       }
        .           
      826 ( 0.00%)              self.current_id = parent_id;
    3,304 ( 0.00%)              if let Some(node) = self.map.find(parent_id) {
    1,652 ( 0.00%)                  return Some((parent_id, node));
        .                       }
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
        .                   }
    3,843 ( 0.00%)      }
        .           }
        .           
        .           /// An iterator that walks up the ancestor tree of a given `HirId`.
        .           /// Constructed using `tcx.hir().parent_owner_iter(hir_id)`.
        .           pub struct ParentOwnerIterator<'hir> {
        .               current_id: HirId,
        .               map: Map<'hir>,
        .           }
        .           
        .           impl<'hir> Iterator for ParentOwnerIterator<'hir> {
        .               type Item = (LocalDefId, OwnerNode<'hir>);
        .           
   15,705 ( 0.00%)      fn next(&mut self) -> Option<Self::Item> {
    5,235 ( 0.00%)          if self.current_id.local_id.index() != 0 {
      891 ( 0.00%)              self.current_id.local_id = ItemLocalId::new(0);
    3,564 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
      854 ( 0.00%)          if self.current_id == CRATE_HIR_ID {
      160 ( 0.00%)              return None;
        .                   }
        .                   loop {
        .                       // There are nodes that do not have entries, so we need to skip them.
        .                       let parent_id = self.map.def_key(self.current_id.owner).parent;
        .           
        .                       let parent_id = parent_id.map_or(CRATE_HIR_ID.owner, |local_def_index| {
        .                           let def_id = LocalDefId { local_def_index };
        .                           self.map.local_def_id_to_hir_id(def_id).owner
        .                       });
    1,548 ( 0.00%)              self.current_id = HirId::make_owner(parent_id);
        .           
        .                       // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.
    1,548 ( 0.00%)              if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {
        .                           return Some((self.current_id.owner, node.node));
        .                       }
        .                   }
   13,960 ( 0.00%)      }
        .           }
        .           
        .           impl<'hir> Map<'hir> {
      224 ( 0.00%)      pub fn krate(&self) -> &'hir Crate<'hir> {
       32 ( 0.00%)          self.tcx.hir_crate(())
      256 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn root_module(&self) -> &'hir Mod<'hir> {
        1 ( 0.00%)          match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {
        .                       Some(OwnerNode::Crate(item)) => item,
        .                       _ => bug!(),
        .                   }
        8 ( 0.00%)      }
        .           
        .               pub fn items(&self) -> impl Iterator<Item = &'hir Item<'hir>> + 'hir {
        .                   let krate = self.krate();
        .                   krate.owners.iter().filter_map(|owner| match owner.as_ref()?.node() {
        .                       OwnerNode::Item(item) => Some(item),
        .                       _ => None,
        .                   })
        .               }
-- line 169 ----------------------------------------
-- line 184 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: LocalDefId) -> DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
        .                   self.tcx.untracked_resolutions.definitions.def_path_hash(def_id)
        .               }
        .           
        .               #[inline]
   27,084 ( 0.00%)      pub fn local_def_id(&self, hir_id: HirId) -> LocalDefId {
    7,449 ( 0.00%)          self.opt_local_def_id(hir_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "local_def_id: no entry for `{:?}`, which has a map of `{:?}`",
        .                           hir_id,
        .                           self.find(hir_id)
        .                       )
        .                   })
   20,313 ( 0.00%)      }
        .           
        .               #[inline]
   19,864 ( 0.00%)      pub fn opt_local_def_id(&self, hir_id: HirId) -> Option<LocalDefId> {
    5,147 ( 0.00%)          if hir_id.local_id == ItemLocalId::new(0) {
        .                       Some(hir_id.owner)
        .                   } else {
    3,658 ( 0.00%)              self.tcx
        .                           .hir_owner_nodes(hir_id.owner)?
        .                           .local_id_to_def_id
        .                           .get(&hir_id.local_id)
        .                           .copied()
        .                   }
   22,347 ( 0.00%)      }
        .           
        .               #[inline]
        7 ( 0.00%)      pub fn local_def_id_to_hir_id(&self, def_id: LocalDefId) -> HirId {
        .                   // FIXME(#85914) is this access safe for incr. comp.?
    1,597 ( 0.00%)          self.tcx.untracked_resolutions.definitions.local_def_id_to_hir_id(def_id)
       14 ( 0.00%)      }
        .           
        7 ( 0.00%)      pub fn iter_local_def_id(&self) -> impl Iterator<Item = LocalDefId> + '_ {
        .                   // Create a dependency to the crate to be sure we reexcute this when the amount of
        .                   // definitions change.
        1 ( 0.00%)          self.tcx.ensure().hir_crate(());
        .                   self.tcx.untracked_resolutions.definitions.iter_local_def_id()
        9 ( 0.00%)      }
        .           
    2,618 ( 0.00%)      pub fn opt_def_kind(&self, local_def_id: LocalDefId) -> Option<DefKind> {
        .                   let hir_id = self.local_def_id_to_hir_id(local_def_id);
    4,862 ( 0.00%)          let def_kind = match self.find(hir_id)? {
      512 ( 0.00%)              Node::Item(item) => match item.kind {
        .                           ItemKind::Static(..) => DefKind::Static,
        .                           ItemKind::Const(..) => DefKind::Const,
        .                           ItemKind::Fn(..) => DefKind::Fn,
        .                           ItemKind::Macro(..) => DefKind::Macro(MacroKind::Bang),
        .                           ItemKind::Mod(..) => DefKind::Mod,
        .                           ItemKind::OpaqueTy(..) => DefKind::OpaqueTy,
        .                           ItemKind::TyAlias(..) => DefKind::TyAlias,
        .                           ItemKind::Enum(..) => DefKind::Enum,
-- line 239 ----------------------------------------
-- line 252 ----------------------------------------
        .                           ForeignItemKind::Static(..) => DefKind::Static,
        .                           ForeignItemKind::Type => DefKind::ForeignTy,
        .                       },
        .                       Node::TraitItem(item) => match item.kind {
        .                           TraitItemKind::Const(..) => DefKind::AssocConst,
        .                           TraitItemKind::Fn(..) => DefKind::AssocFn,
        .                           TraitItemKind::Type(..) => DefKind::AssocTy,
        .                       },
       84 ( 0.00%)              Node::ImplItem(item) => match item.kind {
        .                           ImplItemKind::Const(..) => DefKind::AssocConst,
        .                           ImplItemKind::Fn(..) => DefKind::AssocFn,
        .                           ImplItemKind::TyAlias(..) => DefKind::AssocTy,
        .                       },
        .                       Node::Variant(_) => DefKind::Variant,
        .                       Node::Ctor(variant_data) => {
        .                           // FIXME(eddyb) is this even possible, if we have a `Node::Ctor`?
      130 ( 0.00%)                  assert_ne!(variant_data.ctor_hir_id(), None);
        .           
      176 ( 0.00%)                  let ctor_of = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Item(..)) => def::CtorOf::Struct,
        .                               Some(Node::Variant(..)) => def::CtorOf::Variant,
        .                               _ => unreachable!(),
        .                           };
       52 ( 0.00%)                  DefKind::Ctor(ctor_of, def::CtorKind::from_hir(variant_data))
      104 ( 0.00%)              }
        .                       Node::AnonConst(_) => {
      208 ( 0.00%)                  let inline = match self.find(self.get_parent_node(hir_id)) {
        .                               Some(Node::Expr(&Expr {
        .                                   kind: ExprKind::ConstBlock(ref anon_const), ..
        .                               })) if anon_const.hir_id == hir_id => true,
        .                               _ => false,
        .                           };
        .                           if inline { DefKind::InlineConst } else { DefKind::AnonConst }
        .                       }
        .                       Node::Field(_) => DefKind::Field,
       95 ( 0.00%)              Node::Expr(expr) => match expr.kind {
        .                           ExprKind::Closure(.., None) => DefKind::Closure,
        .                           ExprKind::Closure(.., Some(_)) => DefKind::Generator,
        .                           _ => bug!("def_kind: unsupported node: {}", self.node_to_string(hir_id)),
        .                       },
       75 ( 0.00%)              Node::GenericParam(param) => match param.kind {
        .                           GenericParamKind::Lifetime { .. } => DefKind::LifetimeParam,
        .                           GenericParamKind::Type { .. } => DefKind::TyParam,
        .                           GenericParamKind::Const { .. } => DefKind::ConstParam,
        .                       },
        .                       Node::Crate(_) => DefKind::Mod,
        .                       Node::Stmt(_)
        .                       | Node::PathSegment(_)
        .                       | Node::Ty(_)
-- line 300 ----------------------------------------
-- line 304 ----------------------------------------
        .                       | Node::Binding(_)
        .                       | Node::Local(_)
        .                       | Node::Param(_)
        .                       | Node::Arm(_)
        .                       | Node::Lifetime(_)
        .                       | Node::Visibility(_)
        .                       | Node::Block(_) => return None,
        .                   };
    1,432 ( 0.00%)          Some(def_kind)
    3,740 ( 0.00%)      }
        .           
        .               pub fn def_kind(&self, local_def_id: LocalDefId) -> DefKind {
        .                   self.opt_def_kind(local_def_id)
        .                       .unwrap_or_else(|| bug!("def_kind: unsupported node: {:?}", local_def_id))
        .               }
        .           
1,943,448 ( 0.03%)      pub fn find_parent_node(&self, id: HirId) -> Option<HirId> {
  242,931 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       Some(self.tcx.hir_owner_parent(id.owner))
        .                   } else {
  484,442 ( 0.01%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
  242,221 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
  726,663 ( 0.01%)              let hir_id = HirId { owner: id.owner, local_id: node.parent };
        .                       Some(hir_id)
        .                   }
1,943,448 ( 0.03%)      }
        .           
      957 ( 0.00%)      pub fn get_parent_node(&self, hir_id: HirId) -> HirId {
1,435,504 ( 0.02%)          self.find_parent_node(hir_id).unwrap()
    1,914 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
  465,840 ( 0.01%)      pub fn find(&self, id: HirId) -> Option<Node<'hir>> {
   58,230 ( 0.00%)          if id.local_id == ItemLocalId::from_u32(0) {
        .                       let owner = self.tcx.hir_owner(id.owner)?;
   30,197 ( 0.00%)              Some(owner.node.into())
        .                   } else {
   56,034 ( 0.00%)              let owner = self.tcx.hir_owner_nodes(id.owner)?;
   28,017 ( 0.00%)              let node = owner.nodes[id.local_id].as_ref()?;
   84,051 ( 0.00%)              Some(node.node)
        .                   }
  465,840 ( 0.01%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.
        .               #[inline]
        .               pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {
   23,240 ( 0.00%)          self.find(self.local_def_id_to_hir_id(id))
        .               }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
   11,628 ( 0.00%)      pub fn get(&self, id: HirId) -> Node<'hir> {
    6,283 ( 0.00%)          self.find(id).unwrap_or_else(|| bug!("couldn't find hir id {} in the HIR map", id))
    7,752 ( 0.00%)      }
        .           
        .               /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.
        .               #[inline]
        .               pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {
        .                   self.find_by_def_id(id).unwrap_or_else(|| bug!("couldn't find {:?} in the HIR map", id))
        .               }
        .           
      524 ( 0.00%)      pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {
      262 ( 0.00%)          id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))
      524 ( 0.00%)      }
        .           
        .               pub fn get_generics(&self, id: LocalDefId) -> Option<&'hir Generics<'hir>> {
        .                   let node = self.tcx.hir_owner(id)?;
        .                   match node.node {
        .                       OwnerNode::ImplItem(impl_item) => Some(&impl_item.generics),
        .                       OwnerNode::TraitItem(trait_item) => Some(&trait_item.generics),
        .                       OwnerNode::Item(Item {
        .                           kind:
-- line 374 ----------------------------------------
-- line 381 ----------------------------------------
        .                               | ItemKind::TraitAlias(generics, _)
        .                               | ItemKind::Impl(Impl { generics, .. }),
        .                           ..
        .                       }) => Some(generics),
        .                       _ => None,
        .                   }
        .               }
        .           
   24,857 ( 0.00%)      pub fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    7,102 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_item()
   28,408 ( 0.00%)      }
        .           
        .               pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_trait_item()
        .               }
        .           
   16,814 ( 0.00%)      pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    4,804 ( 0.00%)          self.tcx.hir_owner(id.def_id).unwrap().node.expect_impl_item()
   19,216 ( 0.00%)      }
        .           
        .               pub fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.tcx.hir_owner(id.def_id).unwrap().node.expect_foreign_item()
        .               }
        .           
   38,080 ( 0.00%)      pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {
   10,880 ( 0.00%)          self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies[&id.hir_id.local_id]
   43,520 ( 0.00%)      }
        .           
      774 ( 0.00%)      pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {
      774 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_decl(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      516 ( 0.00%)      }
        .           
      150 ( 0.00%)      pub fn fn_sig_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnSig<'hir>> {
      150 ( 0.00%)          if let Some(node) = self.find(hir_id) {
        .                       fn_sig(node)
        .                   } else {
        .                       bug!("no node for hir_id `{}`", hir_id)
        .                   }
      150 ( 0.00%)      }
        .           
        .               pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {
        .                   for (parent, _) in self.parent_iter(hir_id) {
        .                       if let Some(body) = self.maybe_body_owned_by(parent) {
        .                           return self.body_owner(body);
        .                       }
        .                   }
        .           
        .                   bug!("no `enclosing_body_owner` for hir_id `{}`", hir_id);
        .               }
        .           
        .               /// Returns the `HirId` that corresponds to the definition of
        .               /// which this is the body of, i.e., a `fn`, `const` or `static`
        .               /// item (possibly associated), a closure, or a `hir::AnonConst`.
   24,632 ( 0.00%)      pub fn body_owner(&self, BodyId { hir_id }: BodyId) -> HirId {
        .                   let parent = self.get_parent_node(hir_id);
   18,474 ( 0.00%)          assert!(self.find(parent).map_or(false, |n| is_body_owner(n, hir_id)));
        .                   parent
   24,632 ( 0.00%)      }
        .           
    7,735 ( 0.00%)      pub fn body_owner_def_id(&self, id: BodyId) -> LocalDefId {
   12,415 ( 0.00%)          self.local_def_id(self.body_owner(id))
    7,735 ( 0.00%)      }
        .           
        .               /// Given a `HirId`, returns the `BodyId` associated with it,
        .               /// if the node is a body owner, otherwise returns `None`.
    1,065 ( 0.00%)      pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {
    3,544 ( 0.00%)          self.find(hir_id).map(associated_body).flatten()
    3,195 ( 0.00%)      }
        .           
        .               /// Given a body owner's id, returns the `BodyId` associated with it.
    3,141 ( 0.00%)      pub fn body_owned_by(&self, id: HirId) -> BodyId {
        .                   self.maybe_body_owned_by(id).unwrap_or_else(|| {
        .                       span_bug!(
        .                           self.span(id),
        .                           "body_owned_by: {} has no associated body",
        .                           self.node_to_string(id)
        .                       );
        .                   })
    2,443 ( 0.00%)      }
        .           
       92 ( 0.00%)      pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {
      788 ( 0.00%)          self.body(id).params.iter().map(|arg| match arg.pat.kind {
      256 ( 0.00%)              PatKind::Binding(_, _, ident, _) => ident,
        .                       _ => Ident::empty(),
        .                   })
      276 ( 0.00%)      }
        .           
        .               /// Returns the `BodyOwnerKind` of this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
    5,634 ( 0.00%)      pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {
   12,822 ( 0.00%)          match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Const(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })
        .                       | Node::AnonConst(_) => BodyOwnerKind::Const,
        .                       Node::Ctor(..)
        .                       | Node::Item(&Item { kind: ItemKind::Fn(..), .. })
        .                       | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })
        .                       | Node::ImplItem(&ImplItem { kind: ImplItemKind::Fn(..), .. }) => BodyOwnerKind::Fn,
        .                       Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),
        .                       Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,
        .                       node => bug!("{:#?} is not a body node", node),
        .                   }
    5,634 ( 0.00%)      }
        .           
        .               /// Returns the `ConstContext` of the body associated with this `LocalDefId`.
        .               ///
        .               /// Panics if `LocalDefId` does not have an associated body.
        .               ///
        .               /// This should only be used for determining the context of a body, a return
        .               /// value of `Some` does not always suggest that the owner of the body is `const`,
        .               /// just that it has to be checked as if it were.
    7,584 ( 0.00%)      pub fn body_const_context(&self, did: LocalDefId) -> Option<ConstContext> {
        .                   let hir_id = self.local_def_id_to_hir_id(did);
   11,376 ( 0.00%)          let ccx = match self.body_owner_kind(hir_id) {
        .                       BodyOwnerKind::Const => ConstContext::Const,
        .                       BodyOwnerKind::Static(mt) => ConstContext::Static(mt),
        .           
      552 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_constructor(did.to_def_id()) => return None,
      552 ( 0.00%)              BodyOwnerKind::Fn if self.tcx.is_const_fn_raw(did.to_def_id()) => ConstContext::ConstFn,
        .                       BodyOwnerKind::Fn
    1,068 ( 0.00%)                  if self.tcx.has_attr(did.to_def_id(), sym::default_method_body_is_const) =>
        .                       {
        .                           ConstContext::ConstFn
        .                       }
        .                       BodyOwnerKind::Fn | BodyOwnerKind::Closure => return None,
        .                   };
        .           
        .                   Some(ccx)
    8,532 ( 0.00%)      }
        .           
        .               /// Returns an iterator of the `DefId`s for all body-owners in this
        .               /// crate. If you would prefer to iterate over the bodies
        .               /// themselves, you can do `self.hir().krate().body_ids.iter()`.
       21 ( 0.00%)      pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {
        3 ( 0.00%)          self.krate()
        .                       .owners
        .                       .iter_enumerated()
        .                       .flat_map(move |(owner, owner_info)| {
    1,101 ( 0.00%)                  let bodies = &owner_info.as_ref()?.nodes.bodies;
        .                           Some(bodies.iter().map(move |&(local_id, _)| {
       48 ( 0.00%)                      let hir_id = HirId { owner, local_id };
        .                               let body_id = BodyId { hir_id };
    1,436 ( 0.00%)                      self.body_owner_def_id(body_id)
        .                           }))
        .                       })
        .                       .flatten()
       15 ( 0.00%)      }
        .           
       10 ( 0.00%)      pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   #[cfg(parallel_compiler)]
        .                   use rustc_rayon::iter::IndexedParallelIterator;
        .           
        3 ( 0.00%)          par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {
        .                       let owner = LocalDefId::new(owner);
    2,202 ( 0.00%)              if let Some(owner_info) = owner_info {
        .                           par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {
        .                               let hir_id = HirId { owner, local_id: *local_id };
        .                               let body_id = BodyId { hir_id };
    1,422 ( 0.00%)                      f(self.body_owner_def_id(body_id))
        .                           })
        .                       }
        .                   });
        8 ( 0.00%)      }
        .           
        .               pub fn ty_param_owner(&self, id: HirId) -> LocalDefId {
        .                   match self.get(id) {
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           id.expect_owner()
        .                       }
        .                       Node::GenericParam(_) => self.get_parent_item(id),
        .                       _ => bug!("ty_param_owner: {} not a type parameter", self.node_to_string(id)),
-- line 558 ----------------------------------------
-- line 564 ----------------------------------------
        .                       Node::Item(&Item { kind: ItemKind::Trait(..) | ItemKind::TraitAlias(..), .. }) => {
        .                           kw::SelfUpper
        .                       }
        .                       Node::GenericParam(param) => param.name.ident().name,
        .                       _ => bug!("ty_param_name: {} not a type parameter", self.node_to_string(id)),
        .                   }
        .               }
        .           
      747 ( 0.00%)      pub fn trait_impls(&self, trait_did: DefId) -> &'hir [LocalDefId] {
       83 ( 0.00%)          self.tcx.all_local_trait_impls(()).get(&trait_did).map_or(&[], |xs| &xs[..])
      747 ( 0.00%)      }
        .           
        .               /// Gets the attributes on the crate. This is preferable to
        .               /// invoking `krate.attrs` because it registers a tighter
        .               /// dep-graph access.
        .               pub fn krate_attrs(&self) -> &'hir [ast::Attribute] {
       74 ( 0.00%)          self.attrs(CRATE_HIR_ID)
        .               }
        .           
       98 ( 0.00%)      pub fn get_module(&self, module: LocalDefId) -> (&'hir Mod<'hir>, Span, HirId) {
        .                   let hir_id = HirId::make_owner(module);
       70 ( 0.00%)          match self.tcx.hir_owner(module).map(|o| o.node) {
        6 ( 0.00%)              Some(OwnerNode::Item(&Item { span, kind: ItemKind::Mod(ref m), .. })) => {
        .                           (m, span, hir_id)
        .                       }
       33 ( 0.00%)              Some(OwnerNode::Crate(item)) => (item, item.inner, hir_id),
        .                       node => panic!("not a module: {:?}", node),
        .                   }
      126 ( 0.00%)      }
        .           
        .               /// Walks the contents of a crate. See also `Crate::visit_all_items`.
       11 ( 0.00%)      pub fn walk_toplevel_module(self, visitor: &mut impl Visitor<'hir>) {
       30 ( 0.00%)          let (top_mod, span, hir_id) = self.get_module(CRATE_DEF_ID);
        .                   visitor.visit_mod(top_mod, span, hir_id);
        8 ( 0.00%)      }
        .           
        .               /// Walks the attributes in a crate.
       20 ( 0.00%)      pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {
        2 ( 0.00%)          let krate = self.krate();
        .                   for (owner, info) in krate.owners.iter_enumerated() {
    1,468 ( 0.00%)              if let Some(info) = info {
        .                           for (local_id, attrs) in info.attrs.map.iter() {
        .                               let id = HirId { owner, local_id: *local_id };
        .                               for a in *attrs {
    2,105 ( 0.00%)                          visitor.visit_attribute(id, a)
        .                               }
        .                           }
        .                       }
        .                   }
       16 ( 0.00%)      }
        .           
        .               /// Visits all items in the crate in some deterministic (but
        .               /// unspecified) order. If you just need to process every item,
        .               /// but don't care about nesting, this method is the best choice.
        .               ///
        .               /// If you do care about nesting -- usually because your algorithm
        .               /// follows lexical scoping rules -- then you want a different
        .               /// approach. You should override `visit_nested_item` in your
        .               /// visitor and then call `intravisit::walk_crate` instead.
      152 ( 0.00%)      pub fn visit_all_item_likes<V>(&self, visitor: &mut V)
        .               where
        .                   V: itemlikevisit::ItemLikeVisitor<'hir>,
        .               {
       22 ( 0.00%)          let krate = self.krate();
       82 ( 0.00%)          for owner in krate.owners.iter().filter_map(Option::as_ref) {
    7,029 ( 0.00%)              match owner.node() {
    6,528 ( 0.00%)                  OwnerNode::Item(item) => visitor.visit_item(item),
        .                           OwnerNode::ForeignItem(item) => visitor.visit_foreign_item(item),
      252 ( 0.00%)                  OwnerNode::ImplItem(item) => visitor.visit_impl_item(item),
        .                           OwnerNode::TraitItem(item) => visitor.visit_trait_item(item),
        .                           OwnerNode::Crate(_) => {}
        .                       }
        .                   }
      152 ( 0.00%)      }
        .           
        .               /// A parallel version of `visit_all_item_likes`.
        .               pub fn par_visit_all_item_likes<V>(&self, visitor: &V)
        .               where
        .                   V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,
        .               {
        1 ( 0.00%)          let krate = self.krate();
        2 ( 0.00%)          par_for_each_in(&krate.owners.raw, |owner| match owner.as_ref().map(OwnerInfo::node) {
      128 ( 0.00%)              Some(OwnerNode::Item(item)) => visitor.visit_item(item),
        .                       Some(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),
       84 ( 0.00%)              Some(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),
        .                       Some(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),
        .                       Some(OwnerNode::Crate(_)) | None => {}
        .                   })
        .               }
        .           
      172 ( 0.00%)      pub fn visit_item_likes_in_module<V>(&self, module: LocalDefId, visitor: &mut V)
        .               where
        .                   V: ItemLikeVisitor<'hir>,
        .               {
       22 ( 0.00%)          let module = self.tcx.hir_module_items(module);
        .           
       24 ( 0.00%)          for id in module.items.iter() {
    5,760 ( 0.00%)              visitor.visit_item(self.item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.trait_items.iter() {
        .                       visitor.visit_trait_item(self.trait_item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.impl_items.iter() {
    3,276 ( 0.00%)              visitor.visit_impl_item(self.impl_item(*id));
        .                   }
        .           
       24 ( 0.00%)          for id in module.foreign_items.iter() {
        .                       visitor.visit_foreign_item(self.foreign_item(*id));
        .                   }
      176 ( 0.00%)      }
        .           
       46 ( 0.00%)      pub fn for_each_module(&self, f: impl Fn(LocalDefId)) {
        .                   let mut queue = VecDeque::new();
        .                   queue.push_back(CRATE_DEF_ID);
        .           
       16 ( 0.00%)          while let Some(id) = queue.pop_front() {
        .                       f(id);
        6 ( 0.00%)              let items = self.tcx.hir_module_items(id);
       64 ( 0.00%)              queue.extend(items.submodules.iter().copied())
        .                   }
       40 ( 0.00%)      }
        .           
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId)) {
        4 ( 0.00%)          self.for_each_module(f)
        .               }
        .           
        .               #[cfg(parallel_compiler)]
        .               pub fn par_for_each_module(&self, f: impl Fn(LocalDefId) + Sync) {
        .                   use rustc_data_structures::sync::{par_iter, ParallelIterator};
        .                   par_iter_submodules(self.tcx, CRATE_DEF_ID, &f);
        .           
        .                   fn par_iter_submodules<F>(tcx: TyCtxt<'_>, module: LocalDefId, f: &F)
-- line 699 ----------------------------------------
-- line 703 ----------------------------------------
        .                       (*f)(module);
        .                       let items = tcx.hir_module_items(module);
        .                       par_iter(&items.submodules[..]).for_each(|&sm| par_iter_submodules(tcx, sm, f));
        .                   }
        .               }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
      267 ( 0.00%)      pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {
        .                   ParentHirIterator { current_id, map: self }
    1,068 ( 0.00%)      }
        .           
        .               /// Returns an iterator for the nodes in the ancestor tree of the `current_id`
        .               /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.
        .               pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {
        .                   ParentOwnerIterator { current_id, map: self }
    4,838 ( 0.00%)      }
        .           
        .               /// Checks if the node is left-hand side of an assignment.
        .               pub fn is_lhs(&self, id: HirId) -> bool {
        .                   match self.find(self.get_parent_node(id)) {
        .                       Some(Node::Expr(expr)) => match expr.kind {
        .                           ExprKind::Assign(lhs, _rhs, _span) => lhs.hir_id == id,
        .                           _ => false,
        .                       },
-- line 727 ----------------------------------------
-- line 792 ----------------------------------------
        .                   }
        .                   None
        .               }
        .           
        .               /// Retrieves the `HirId` for `id`'s parent item, or `id` itself if no
        .               /// parent item is in this map. The "parent item" is the closest parent node
        .               /// in the HIR which is recorded by the map and is an item, either an item
        .               /// in a module, trait, or impl.
    1,454 ( 0.00%)      pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {
   13,086 ( 0.00%)          if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {
        .                       def_id
        .                   } else {
        .                       CRATE_DEF_ID
        .                   }
    2,908 ( 0.00%)      }
        .           
        .               /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no
        .               /// module parent is in this map.
        .               pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {
    1,984 ( 0.00%)          for (def_id, node) in self.parent_owner_iter(hir_id) {
      672 ( 0.00%)              if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {
        .                           return def_id;
        .                       }
        .                   }
        .                   CRATE_DEF_ID
        .               }
        .           
        .               /// When on an if expression, a match arm tail expression or a match arm, give back
        .               /// the enclosing `if` or `match` expression.
-- line 820 ----------------------------------------
-- line 885 ----------------------------------------
        .                       }
        .                   }
        .                   bug!(
        .                       "expected foreign mod or inlined parent, found {}",
        .                       self.node_to_string(HirId::make_owner(parent))
        .                   )
        .               }
        .           
    6,321 ( 0.00%)      pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {
    2,709 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::Item(item), .. }) => item,
        .                       _ => bug!("expected item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    7,224 ( 0.00%)      }
        .           
    1,176 ( 0.00%)      pub fn expect_impl_item(&self, id: LocalDefId) -> &'hir ImplItem<'hir> {
      504 ( 0.00%)          match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::ImplItem(item), .. }) => item,
        .                       _ => bug!("expected impl item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
    1,344 ( 0.00%)      }
        .           
        .               pub fn expect_trait_item(&self, id: LocalDefId) -> &'hir TraitItem<'hir> {
        .                   match self.tcx.hir_owner(id) {
        .                       Some(Owner { node: OwnerNode::TraitItem(item), .. }) => item,
        .                       _ => bug!("expected trait item, found {}", self.node_to_string(HirId::make_owner(id))),
        .                   }
        .               }
        .           
-- line 913 ----------------------------------------
-- line 929 ----------------------------------------
        .           
        .               pub fn expect_expr(&self, id: HirId) -> &'hir Expr<'hir> {
        .                   match self.find(id) {
        .                       Some(Node::Expr(expr)) => expr,
        .                       _ => bug!("expected expr, found {}", self.node_to_string(id)),
        .                   }
        .               }
        .           
    1,143 ( 0.00%)      pub fn opt_name(&self, id: HirId) -> Option<Symbol> {
      417 ( 0.00%)          Some(match self.get(id) {
        .                       Node::Item(i) => i.ident.name,
        .                       Node::ForeignItem(fi) => fi.ident.name,
        .                       Node::ImplItem(ii) => ii.ident.name,
        .                       Node::TraitItem(ti) => ti.ident.name,
        .                       Node::Variant(v) => v.ident.name,
        .                       Node::Field(f) => f.ident.name,
        .                       Node::Lifetime(lt) => lt.name.ident().name,
      327 ( 0.00%)              Node::GenericParam(param) => param.name.ident().name,
       36 ( 0.00%)              Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,
        .                       Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),
        .                       _ => return None,
        .                   })
      635 ( 0.00%)      }
        .           
      944 ( 0.00%)      pub fn name(&self, id: HirId) -> Symbol {
      399 ( 0.00%)          match self.opt_name(id) {
        .                       Some(name) => name,
        .                       None => bug!("no name for {}", self.node_to_string(id)),
        .                   }
      708 ( 0.00%)      }
        .           
        .               /// Given a node ID, gets a list of attributes associated with the AST
        .               /// corresponding to the node-ID.
3,591,826 ( 0.06%)      pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {
  513,118 ( 0.01%)          self.tcx.hir_attrs(id.owner).get(id.local_id)
4,104,944 ( 0.07%)      }
        .           
        .               /// Gets the span of the definition of the specified HIR node.
        .               /// This is used by `tcx.get_span`
    1,911 ( 0.00%)      pub fn span(&self, hir_id: HirId) -> Span {
   90,765 ( 0.00%)          self.opt_span(hir_id)
        .                       .unwrap_or_else(|| bug!("hir::map::Map::span: id not in map: {:?}", hir_id))
    1,911 ( 0.00%)      }
        .           
  164,794 ( 0.00%)      pub fn opt_span(&self, hir_id: HirId) -> Option<Span> {
  164,794 ( 0.00%)          let span = match self.find(hir_id)? {
        .                       Node::Param(param) => param.span,
      448 ( 0.00%)              Node::Item(item) => match &item.kind {
        .                           ItemKind::Fn(sig, _, _) => sig.span,
      312 ( 0.00%)                  _ => item.span,
        .                       },
        .                       Node::ForeignItem(foreign_item) => foreign_item.span,
        .                       Node::TraitItem(trait_item) => match &trait_item.kind {
        .                           TraitItemKind::Fn(sig, _) => sig.span,
        .                           _ => trait_item.span,
        .                       },
      618 ( 0.00%)              Node::ImplItem(impl_item) => match &impl_item.kind {
      600 ( 0.00%)                  ImplItemKind::Fn(sig, _) => sig.span,
       18 ( 0.00%)                  _ => impl_item.span,
        .                       },
       50 ( 0.00%)              Node::Variant(variant) => variant.span,
       34 ( 0.00%)              Node::Field(field) => field.span,
    1,190 ( 0.00%)              Node::AnonConst(constant) => self.body(constant.body).value.span,
        .                       Node::Expr(expr) => expr.span,
        .                       Node::Stmt(stmt) => stmt.span,
        .                       Node::PathSegment(seg) => seg.ident.span,
        .                       Node::Ty(ty) => ty.span,
        .                       Node::TraitRef(tr) => tr.path.span,
        .                       Node::Binding(pat) => pat.span,
        .                       Node::Pat(pat) => pat.span,
        .                       Node::Arm(arm) => arm.span,
        .                       Node::Block(block) => block.span,
      206 ( 0.00%)              Node::Ctor(..) => match self.find(self.get_parent_node(hir_id))? {
        .                           Node::Item(item) => item.span,
        .                           Node::Variant(variant) => variant.span,
        .                           _ => unreachable!(),
        .                       },
        .                       Node::Lifetime(lifetime) => lifetime.span,
        .                       Node::GenericParam(param) => param.span,
        .                       Node::Visibility(&Spanned {
        .                           node: VisibilityKind::Restricted { ref path, .. },
        .                           ..
        .                       }) => path.span,
        .                       Node::Infer(i) => i.span,
        .                       Node::Visibility(v) => bug!("unexpected Visibility {:?}", v),
        .                       Node::Local(local) => local.span,
        4 ( 0.00%)              Node::Crate(item) => item.inner,
        .                   };
        .                   Some(span)
  235,420 ( 0.00%)      }
        .           
        .               /// Like `hir.span()`, but includes the body of function items
        .               /// (instead of just the function header)
        .               pub fn span_with_body(&self, hir_id: HirId) -> Span {
        .                   match self.find(hir_id) {
        .                       Some(Node::TraitItem(item)) => item.span,
        .                       Some(Node::ImplItem(impl_item)) => impl_item.span,
        .                       Some(Node::Item(item)) => item.span,
        .                       Some(_) => self.span(hir_id),
        .                       _ => bug!("hir::map::Map::span_with_body: id not in map: {:?}", hir_id),
        .                   }
        .               }
        .           
      124 ( 0.00%)      pub fn span_if_local(&self, id: DefId) -> Option<Span> {
      722 ( 0.00%)          id.as_local().and_then(|id| self.opt_span(self.local_def_id_to_hir_id(id)))
      186 ( 0.00%)      }
        .           
        .               pub fn res_span(&self, res: Res) -> Option<Span> {
        .                   match res {
        .                       Res::Err => None,
        .                       Res::Local(id) => Some(self.span(id)),
        .                       res => self.span_if_local(res.opt_def_id()?),
        .                   }
        .               }
-- line 1042 ----------------------------------------
-- line 1062 ----------------------------------------
        .           }
        .           
        .           impl<'hir> intravisit::Map<'hir> for Map<'hir> {
        .               fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {
        .                   self.find(hir_id)
        .               }
        .           
        .               fn body(&self, id: BodyId) -> &'hir Body<'hir> {
    3,037 ( 0.00%)          self.body(id)
        .               }
        .           
        .               fn item(&self, id: ItemId) -> &'hir Item<'hir> {
    1,636 ( 0.00%)          self.item(id)
        .               }
        .           
        .               fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {
        .                   self.trait_item(id)
        .               }
        .           
        .               fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {
    1,176 ( 0.00%)          self.impl_item(id)
        .               }
        .           
        .               fn foreign_item(&self, id: ForeignItemId) -> &'hir ForeignItem<'hir> {
        .                   self.foreign_item(id)
        .               }
        .           }
        .           
        7 ( 0.00%)  pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {
        .               debug_assert_eq!(crate_num, LOCAL_CRATE);
        .               let krate = tcx.hir_crate(());
        3 ( 0.00%)      let hir_body_hash = krate.hir_hash;
        .           
        .               let upstream_crates = upstream_crates(tcx);
        .           
        .               // We hash the final, remapped names of all local source files so we
        .               // don't have to include the path prefix remapping commandline args.
        .               // If we included the full mapping in the SVH, we could only have
        .               // reproducible builds by compiling from the same directory. So we just
        .               // hash the result of the mapping instead of the mapping itself.
        2 ( 0.00%)      let mut source_file_names: Vec<_> = tcx
        .                   .sess
        .                   .source_map()
        .                   .files()
        .                   .iter()
        .                   .filter(|source_file| source_file.cnum == LOCAL_CRATE)
        5 ( 0.00%)          .map(|source_file| source_file.name_hash)
        .                   .collect();
        .           
        .               source_file_names.sort_unstable();
        .           
        .               let mut hcx = tcx.create_stable_hashing_context();
        .               let mut stable_hasher = StableHasher::new();
        .               hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);
        .               upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);
        .               source_file_names.hash_stable(&mut hcx, &mut stable_hasher);
        3 ( 0.00%)      if tcx.sess.opts.debugging_opts.incremental_relative_spans {
        .                   let definitions = &tcx.untracked_resolutions.definitions;
        .                   let mut owner_spans: Vec<_> = krate
        .                       .owners
        .                       .iter_enumerated()
        .                       .filter_map(|(def_id, info)| {
        .                           let _ = info.as_ref()?;
        .                           let def_path_hash = definitions.def_path_hash(def_id);
        .                           let span = definitions.def_span(def_id);
        .                           debug_assert_eq!(span.parent(), None);
        .                           Some((def_path_hash, span))
        .                       })
        .                       .collect();
        .                   owner_spans.sort_unstable_by_key(|bn| bn.0);
        .                   owner_spans.hash_stable(&mut hcx, &mut stable_hasher);
        .               }
        3 ( 0.00%)      tcx.sess.opts.dep_tracking_hash(true).hash_stable(&mut hcx, &mut stable_hasher);
        2 ( 0.00%)      tcx.sess.local_stable_crate_id().hash_stable(&mut hcx, &mut stable_hasher);
        .           
        .               let crate_hash: Fingerprint = stable_hasher.finish();
        1 ( 0.00%)      Svh::new(crate_hash.to_smaller_hash())
        9 ( 0.00%)  }
        .           
        .           fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {
        .               let mut upstream_crates: Vec<_> = tcx
        .                   .crates(())
        .                   .iter()
        .                   .map(|&cnum| {
       95 ( 0.00%)              let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);
       19 ( 0.00%)              let hash = tcx.crate_hash(cnum);
        .                       (stable_crate_id, hash)
        .                   })
        .                   .collect();
        .               upstream_crates.sort_unstable_by_key(|&(stable_crate_id, _)| stable_crate_id);
        .               upstream_crates
        .           }
        .           
        .           fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {
-- line 1155 ----------------------------------------
-- line 1238 ----------------------------------------
        .                   Some(Node::Lifetime(_)) => node_str("lifetime"),
        .                   Some(Node::GenericParam(ref param)) => format!("generic_param {:?}{}", param, id_str),
        .                   Some(Node::Visibility(ref vis)) => format!("visibility {:?}{}", vis, id_str),
        .                   Some(Node::Crate(..)) => String::from("root_crate"),
        .                   None => format!("unknown node{}", id_str),
        .               }
        .           }
        .           
       18 ( 0.00%)  pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {
       12 ( 0.00%)      let mut collector = ModuleCollector {
        .                   tcx,
        .                   submodules: Vec::default(),
        .                   items: Vec::default(),
        .                   trait_items: Vec::default(),
        .                   impl_items: Vec::default(),
        .                   foreign_items: Vec::default(),
        .               };
        .           
       10 ( 0.00%)      let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);
        .               collector.visit_mod(hir_mod, span, hir_id);
        .           
       32 ( 0.00%)      let ModuleCollector { submodules, items, trait_items, impl_items, foreign_items, .. } =
        .                   collector;
       22 ( 0.00%)      return ModuleItems {
        8 ( 0.00%)          submodules: submodules.into_boxed_slice(),
        8 ( 0.00%)          items: items.into_boxed_slice(),
        8 ( 0.00%)          trait_items: trait_items.into_boxed_slice(),
        8 ( 0.00%)          impl_items: impl_items.into_boxed_slice(),
        8 ( 0.00%)          foreign_items: foreign_items.into_boxed_slice(),
        .               };
        .           
        .               struct ModuleCollector<'tcx> {
        .                   tcx: TyCtxt<'tcx>,
        .                   submodules: Vec<LocalDefId>,
        .                   items: Vec<ItemId>,
        .                   trait_items: Vec<TraitItemId>,
        .                   impl_items: Vec<ImplItemId>,
        .                   foreign_items: Vec<ForeignItemId>,
        .               }
        .           
        .               impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {
        .                   type NestedFilter = nested_filter::All;
        .           
        .                   fn nested_visit_map(&mut self) -> Self::Map {
      368 ( 0.00%)              self.tcx.hir()
        .                   }
        .           
      640 ( 0.00%)          fn visit_item(&mut self, item: &'hir Item<'hir>) {
      384 ( 0.00%)              self.items.push(item.item_id());
      256 ( 0.00%)              if let ItemKind::Mod(..) = item.kind {
        .                           // If this declares another module, do not recurse inside it.
        1 ( 0.00%)                  self.submodules.push(item.def_id);
        .                       } else {
      762 ( 0.00%)                  intravisit::walk_item(self, item)
        .                       }
        4 ( 0.00%)          }
        .           
        .                   fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {
        .                       self.trait_items.push(item.trait_item_id());
        .                       intravisit::walk_trait_item(self, item)
        .                   }
        .           
        .                   fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {
      252 ( 0.00%)              self.impl_items.push(item.impl_item_id());
      252 ( 0.00%)              intravisit::walk_impl_item(self, item)
        .                   }
        .           
        .                   fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {
        .                       self.foreign_items.push(item.foreign_item_id());
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
       16 ( 0.00%)  }

  694,014 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/hir/map/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 2,939,932 ( 0.05%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
    78,185 ( 0.00%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
64,057,081 ( 1.06%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   253,346 ( 0.00%)          self.stride += Group::WIDTH;
   253,346 ( 0.00%)          self.pos += self.stride;
   221,195 ( 0.00%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    92,050 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   202,595 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    33,036 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   223,388 ( 0.00%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    44,126 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   200,459 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   258,336 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
       410 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
        75 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        70 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     9,685 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     6,870 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     6,870 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    13,740 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     3,526 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    10,214 ( 0.00%)          self.erase_no_drop(&item);
        42 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,101,100 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,472 ( 0.00%)          match self.find(hash, eq) {
    42,496 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
   492,505 ( 0.01%)              None => None,
         .                   }
 1,837,606 ( 0.03%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     5,710 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   205,732 ( 0.00%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   155,152 ( 0.00%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   381,180 ( 0.01%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   293,544 ( 0.00%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 3,629,610 ( 0.06%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     2,246 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 2,829,517 ( 0.05%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 2,705,239 ( 0.04%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   421,240 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
        74 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   315,930 ( 0.01%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       432 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   230,490 ( 0.00%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     4,418 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   470,829 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   371,267 ( 0.01%)          self.table.items += 1;
         .                   bucket
       859 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    35,451 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
   163,209 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
   108,917 ( 0.00%)              eq(self.bucket(index).as_ref())
   129,732 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
    31,092 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
    40,336 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    72,607 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
     2,723 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    18,269 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
     3,112 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
 3,307,743 ( 0.05%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
   426,950 ( 0.01%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     3,040 ( 0.00%)          let allocation = self.into_allocation();
     2,280 ( 0.00%)          RawIntoIter {
     3,800 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     1,212 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       262 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
 1,536,752 ( 0.03%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   381,185 ( 0.01%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    83,908 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   210,102 ( 0.00%)          Ok(Self {
         .                       ctrl,
    81,056 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   277,468 ( 0.00%)      }
         .           
         .               #[inline]
    24,191 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     6,152 ( 0.00%)          if capacity == 0 {
     5,725 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   173,521 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    11,420 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    24,191 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
    77,758 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
    77,758 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   155,516 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,817,040 ( 0.03%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 5,373,244 ( 0.09%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 2,494,981 ( 0.04%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    48,176 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 8,362,573 ( 0.14%)              for bit in group.match_byte(h2_hash) {
18,073,108 ( 0.30%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
13,514,496 ( 0.22%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,859,469 ( 0.03%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
-- line 1198 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 7,795,368 ( 0.13%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
43,000,861 ( 0.71%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 3,538,333 ( 0.06%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 2,829,300 ( 0.05%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
         .                   probe_index(i) == probe_index(new_i)
-- line 1281 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 5,281,591 ( 0.09%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,759,931 ( 0.03%)          *self.ctrl(index) = ctrl;
 1,760,056 ( 0.03%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
   773,802 ( 0.01%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   195,982 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
 2,415,429 ( 0.04%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     1,860 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
    94,591 ( 0.00%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    44,741 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    89,482 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    89,482 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   184,246 ( 0.00%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         .                       Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    44,741 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     4,663 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
 1,152,276 ( 0.02%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    44,741 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1554 ----------------------------------------
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    36,615 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     4,263 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
     5,125 ( 0.00%)          self.items = 0;
     4,316 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   139,402 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   557,608 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   692,325 ( 0.01%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   557,608 ( 0.01%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       216 ( 0.00%)      fn clone(&self) -> Self {
        44 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
       243 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        28 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   812,013 ( 0.01%)      fn drop(&mut self) {
 1,045,291 ( 0.02%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   946,020 ( 0.02%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,040 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     3,800 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   537,876 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
   107,854 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
   190,362 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   601,587 ( 0.01%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
    12,179 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
    22,250 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    14,076 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
       575 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
   129,329 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
   246,548 ( 0.00%)          if let Some(b) = self.iter.next() {
   634,726 ( 0.01%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
   258,658 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,342 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
     5,646 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       270 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,176 ( 0.00%)      fn next(&mut self) -> Option<T> {
       177 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     3,279 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         8 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
         1 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
         8 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

22,750,206 ( 0.38%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs
--------------------------------------------------------------------------------
Ir                 

-- line 27 ----------------------------------------
        .           impl CacheEntry {
        .               #[inline]
        .               fn update(
        .                   &mut self,
        .                   new_file_and_idx: Option<(Lrc<SourceFile>, usize)>,
        .                   pos: BytePos,
        .                   time_stamp: usize,
        .               ) {
   12,917 ( 0.00%)          if let Some((file, file_idx)) = new_file_and_idx {
    1,735 ( 0.00%)              self.file = file;
    1,307 ( 0.00%)              self.file_index = file_idx;
        .                   }
        .           
   11,998 ( 0.00%)          let line_index = self.file.lookup_line(pos).unwrap();
        .                   let line_bounds = self.file.line_bounds(line_index);
   26,024 ( 0.00%)          self.line_number = line_index + 1;
   39,444 ( 0.00%)          self.line = line_bounds;
        .                   self.touch(time_stamp);
        .               }
        .           
        .               #[inline]
        .               fn touch(&mut self, time_stamp: usize) {
  281,861 ( 0.00%)          self.time_stamp = time_stamp;
        .               }
        .           }
        .           
        .           #[derive(Clone)]
        .           pub struct CachingSourceMapView<'sm> {
        .               source_map: &'sm SourceMap,
        .               line_cache: [CacheEntry; 3],
        .               time_stamp: usize,
        .           }
        .           
        .           impl<'sm> CachingSourceMapView<'sm> {
      860 ( 0.00%)      pub fn new(source_map: &'sm SourceMap) -> CachingSourceMapView<'sm> {
        .                   let files = source_map.files();
      430 ( 0.00%)          let first_file = files[0].clone();
        .                   let entry = CacheEntry {
        .                       time_stamp: 0,
        .                       line_number: 0,
        .                       line: BytePos(0)..BytePos(0),
        .                       file: first_file,
        .                       file_index: 0,
        .                   };
        .           
    2,150 ( 0.00%)          CachingSourceMapView {
        .                       source_map,
    3,010 ( 0.00%)              line_cache: [entry.clone(), entry.clone(), entry],
        .                       time_stamp: 0,
        .                   }
    1,720 ( 0.00%)      }
        .           
        .               pub fn byte_pos_to_line_and_col(
        .                   &mut self,
        .                   pos: BytePos,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos)> {
        .                   self.time_stamp += 1;
        .           
        .                   // Check if the position is in one of the cached lines
-- line 85 ----------------------------------------
-- line 106 ----------------------------------------
        .                   };
        .           
        .                   let cache_entry = &mut self.line_cache[oldest];
        .                   cache_entry.update(new_file_and_idx, pos, self.time_stamp);
        .           
        .                   Some((cache_entry.file.clone(), cache_entry.line_number, pos - cache_entry.line.start))
        .               }
        .           
1,029,532 ( 0.02%)      pub fn span_data_to_lines_and_cols(
        .                   &mut self,
        .                   span_data: &SpanData,
        .               ) -> Option<(Lrc<SourceFile>, usize, BytePos, usize, BytePos)> {
  588,304 ( 0.01%)          self.time_stamp += 1;
        .           
        .                   // Check if lo and hi are in the cached lines.
  147,076 ( 0.00%)          let lo_cache_idx = self.cache_entry_index(span_data.lo);
  147,076 ( 0.00%)          let hi_cache_idx = self.cache_entry_index(span_data.hi);
        .           
  269,600 ( 0.00%)          if lo_cache_idx != -1 && hi_cache_idx != -1 {
        .                       // Cache hit for span lo and hi. Check if they belong to the same file.
        .                       let result = {
  269,570 ( 0.00%)                  let lo = &self.line_cache[lo_cache_idx as usize];
        .                           let hi = &self.line_cache[hi_cache_idx as usize];
        .           
  808,710 ( 0.01%)                  if lo.file_index != hi.file_index {
        .                               return None;
        .                           }
        .           
        .                           (
  269,570 ( 0.00%)                      lo.file.clone(),
        .                               lo.line_number,
        .                               span_data.lo - lo.line.start,
  134,785 ( 0.00%)                      hi.line_number,
        .                               span_data.hi - hi.line.start,
        .                           )
        .                       };
        .           
  134,785 ( 0.00%)              self.line_cache[lo_cache_idx as usize].touch(self.time_stamp);
  134,785 ( 0.00%)              self.line_cache[hi_cache_idx as usize].touch(self.time_stamp);
        .           
  539,140 ( 0.01%)              return Some(result);
        .                   }
        .           
        .                   // No cache hit or cache hit for only one of span lo and hi.
   24,552 ( 0.00%)          let oldest = if lo_cache_idx != -1 || hi_cache_idx != -1 {
        .                       let avoid_idx = if lo_cache_idx != -1 { lo_cache_idx } else { hi_cache_idx };
        .                       self.oldest_cache_entry_index_avoid(avoid_idx as usize)
        .                   } else {
        .                       self.oldest_cache_entry_index()
        .                   };
        .           
        .                   // If the entry doesn't point to the correct file, get the new file and index.
        .                   // Return early if the file containing beginning of span doesn't contain end of span.
   98,328 ( 0.00%)          let new_file_and_idx = if !file_contains(&self.line_cache[oldest].file, span_data.lo) {
    1,465 ( 0.00%)              let new_file_and_idx = self.file_for_position(span_data.lo)?;
    1,758 ( 0.00%)              if !file_contains(&new_file_and_idx.0, span_data.hi) {
        .                           return None;
        .                       }
        .           
    1,172 ( 0.00%)              Some(new_file_and_idx)
        .                   } else {
        .                       let file = &self.line_cache[oldest].file;
   35,994 ( 0.00%)              if !file_contains(&file, span_data.hi) {
        .                           return None;
        .                       }
        .           
   35,994 ( 0.00%)              None
        .                   };
        .           
        .                   // Update the cache entries.
   61,455 ( 0.00%)          let (lo_idx, hi_idx) = match (lo_cache_idx, hi_cache_idx) {
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, -1) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
        .           
   35,889 ( 0.00%)                  if !lo.line.contains(&span_data.hi) {
        .                               let new_file_and_idx = Some((lo.file.clone(), lo.file_index));
        .                               let next_oldest = self.oldest_cache_entry_index_avoid(oldest);
        .                               let hi = &mut self.line_cache[next_oldest];
        .                               hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
        .                               (oldest, next_oldest)
        .                           } else {
        .                               (oldest, oldest)
        .                           }
        .                       }
        .                       // Oldest cache entry is for span_data.lo line.
        .                       (-1, _) => {
        .                           let lo = &mut self.line_cache[oldest];
        .                           lo.update(new_file_and_idx, span_data.lo, self.time_stamp);
       30 ( 0.00%)                  let hi = &mut self.line_cache[hi_cache_idx as usize];
       45 ( 0.00%)                  hi.touch(self.time_stamp);
        .                           (oldest, hi_cache_idx as usize)
        .                       }
        .                       // Oldest cache entry is for span_data.hi line.
        .                       (_, -1) => {
        .                           let hi = &mut self.line_cache[oldest];
      313 ( 0.00%)                  hi.update(new_file_and_idx, span_data.hi, self.time_stamp);
      626 ( 0.00%)                  let lo = &mut self.line_cache[lo_cache_idx as usize];
    1,252 ( 0.00%)                  lo.touch(self.time_stamp);
        .                           (lo_cache_idx as usize, oldest)
        .                       }
        .                       _ => {
        .                           panic!();
        .                       }
        .                   };
        .           
        .                   let lo = &self.line_cache[lo_idx];
        .                   let hi = &self.line_cache[hi_idx];
        .           
        .                   // Span lo and hi may equal line end when last line doesn't
        .                   // end in newline, hence the inclusive upper bounds below.
   24,582 ( 0.00%)          assert!(span_data.lo >= lo.line.start);
   12,291 ( 0.00%)          assert!(span_data.lo <= lo.line.end);
   24,582 ( 0.00%)          assert!(span_data.hi >= hi.line.start);
   12,291 ( 0.00%)          assert!(span_data.hi <= hi.line.end);
   61,455 ( 0.00%)          assert!(lo.file.contains(span_data.lo));
   36,873 ( 0.00%)          assert!(lo.file.contains(span_data.hi));
   36,873 ( 0.00%)          assert_eq!(lo.file_index, hi.file_index);
        .           
   36,873 ( 0.00%)          Some((
   12,291 ( 0.00%)              lo.file.clone(),
        .                       lo.line_number,
        .                       span_data.lo - lo.line.start,
   12,291 ( 0.00%)              hi.line_number,
        .                       span_data.hi - hi.line.start,
        .                   ))
1,323,684 ( 0.02%)      }
        .           
        .               fn cache_entry_index(&self, pos: BytePos) -> isize {
        .                   for (idx, cache_entry) in self.line_cache.iter().enumerate() {
1,761,121 ( 0.03%)              if cache_entry.line.contains(&pos) {
        .                           return idx as isize;
        .                       }
        .                   }
        .           
        .                   -1
        .               }
        .           
        .               fn oldest_cache_entry_index(&self) -> usize {
        .                   let mut oldest = 0;
        .           
        .                   for idx in 1..self.line_cache.len() {
   71,778 ( 0.00%)              if self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
        .               fn oldest_cache_entry_index_avoid(&self, avoid_idx: usize) -> usize {
        .                   let mut oldest = if avoid_idx != 0 { 0 } else { 1 };
        .           
        .                   for idx in 0..self.line_cache.len() {
    6,771 ( 0.00%)              if idx != avoid_idx
    3,230 ( 0.00%)                  && self.line_cache[idx].time_stamp < self.line_cache[oldest].time_stamp
        .                       {
        .                           oldest = idx;
        .                       }
        .                   }
        .           
        .                   oldest
        .               }
        .           
    1,465 ( 0.00%)      fn file_for_position(&self, pos: BytePos) -> Option<(Lrc<SourceFile>, usize)> {
      293 ( 0.00%)          if !self.source_map.files().is_empty() {
      586 ( 0.00%)              let file_idx = self.source_map.lookup_source_file_idx(pos);
        .                       let file = &self.source_map.files()[file_idx];
        .           
    2,344 ( 0.00%)              if file_contains(file, pos) {
        .                           return Some((file.clone(), file_idx));
        .                       }
        .                   }
        .           
        .                   None
    1,465 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           fn file_contains(file: &SourceFile, pos: BytePos) -> bool {
        .               // `SourceMap::lookup_source_file_idx` and `SourceFile::contains` both consider the position
        .               // one past the end of a file to belong to it. Normally, that's what we want. But for the
        .               // purposes of converting a byte position to a line and column number, we can't come up with a
        .               // line and column number if the file is empty, because an empty file doesn't contain any
-- line 290 ----------------------------------------

1,691,465 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/caching_source_map_view.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs
--------------------------------------------------------------------------------
Ir                 

-- line 41 ----------------------------------------
        .               fn from(val: ScalarMaybeUninit<Tag>) -> Self {
        .                   Immediate::Scalar(val)
        .               }
        .           }
        .           
        .           impl<Tag: Provenance> From<Scalar<Tag>> for Immediate<Tag> {
        .               #[inline(always)]
        .               fn from(val: Scalar<Tag>) -> Self {
       12 ( 0.00%)          Immediate::Scalar(val.into())
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> Immediate<Tag> {
        .               pub fn from_pointer(p: Pointer<Tag>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_pointer(p, cx))
        .               }
        .           
        .               pub fn from_maybe_pointer(p: Pointer<Option<Tag>>, cx: &impl HasDataLayout) -> Self {
        .                   Immediate::Scalar(ScalarMaybeUninit::from_maybe_pointer(p, cx))
        .               }
        .           
      544 ( 0.00%)      pub fn new_slice(val: Scalar<Tag>, len: u64, cx: &impl HasDataLayout) -> Self {
    9,386 ( 0.00%)          Immediate::ScalarPair(val.into(), Scalar::from_machine_usize(len, cx).into())
      816 ( 0.00%)      }
        .           
        .               pub fn new_dyn_trait(
        .                   val: Scalar<Tag>,
        .                   vtable: Pointer<Option<Tag>>,
        .                   cx: &impl HasDataLayout,
        .               ) -> Self {
        .                   Immediate::ScalarPair(val.into(), ScalarMaybeUninit::from_maybe_pointer(vtable, cx))
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar_or_uninit(self) -> ScalarMaybeUninit<Tag> {
  301,746 ( 0.01%)          match self {
  121,124 ( 0.00%)              Immediate::Scalar(val) => val,
        .                       Immediate::ScalarPair(..) => bug!("Got a scalar pair where a scalar was expected"),
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn to_scalar(self) -> InterpResult<'tcx, Scalar<Tag>> {
        .                   self.to_scalar_or_uninit().check_init()
        .               }
-- line 85 ----------------------------------------
-- line 159 ----------------------------------------
        .               fn deref(&self) -> &Immediate<Tag> {
        .                   &self.imm
        .               }
        .           }
        .           
        .           /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,
        .           /// or still in memory. The latter is an optimization, to delay reading that chunk of
        .           /// memory and to avoid having to store arbitrary-sized data here.
   10,114 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, HashStable, Hash, Debug)]
        .           pub enum Operand<Tag: Provenance = AllocId> {
        .               Immediate(Immediate<Tag>),
        .               Indirect(MemPlace<Tag>),
        .           }
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           pub struct OpTy<'tcx, Tag: Provenance = AllocId> {
        .               op: Operand<Tag>, // Keep this private; it helps enforce invariants.
-- line 175 ----------------------------------------
-- line 185 ----------------------------------------
        .               fn deref(&self) -> &Operand<Tag> {
        .                   &self.op
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {
   12,224 ( 0.00%)          OpTy { op: Operand::Indirect(*mplace), layout: mplace.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {
        .               #[inline(always)]
        .               fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }
        .               }
-- line 201 ----------------------------------------
-- line 206 ----------------------------------------
        .               fn from(val: ImmTy<'tcx, Tag>) -> Self {
        .                   OpTy { op: Operand::Immediate(val.imm), layout: val.layout }
        .               }
        .           }
        .           
        .           impl<'tcx, Tag: Provenance> ImmTy<'tcx, Tag> {
        .               #[inline]
        .               pub fn from_scalar(val: Scalar<Tag>, layout: TyAndLayout<'tcx>) -> Self {
      201 ( 0.00%)          ImmTy { imm: val.into(), layout }
        .               }
        .           
        .               #[inline]
        .               pub fn from_immediate(imm: Immediate<Tag>, layout: TyAndLayout<'tcx>) -> Self {
        .                   ImmTy { imm, layout }
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Option<Self> {
        .                   Some(Self::from_scalar(Scalar::try_from_uint(i, layout.size)?, layout))
        .               }
        .               #[inline]
        .               pub fn from_uint(i: impl Into<u128>, layout: TyAndLayout<'tcx>) -> Self {
       15 ( 0.00%)          Self::from_scalar(Scalar::from_uint(i, layout.size), layout)
        .               }
        .           
        .               #[inline]
        .               pub fn try_from_int(i: impl Into<i128>, layout: TyAndLayout<'tcx>) -> Option<Self> {
        .                   Some(Self::from_scalar(Scalar::try_from_int(i, layout.size)?, layout))
        .               }
        .           
        .               #[inline]
-- line 236 ----------------------------------------
-- line 248 ----------------------------------------
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
        .               /// Try reading an immediate in memory; this is interesting particularly for `ScalarPair`.
        .               /// Returns `None` if the layout does not permit loading this as a value.
        .               fn try_read_immediate_from_mplace(
        .                   &self,
        .                   mplace: &MPlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Option<ImmTy<'tcx, M::PointerTag>>> {
  155,062 ( 0.00%)          if mplace.layout.is_unsized() {
        .                       // Don't touch unsized
        .                       return Ok(None);
        .                   }
        .           
  221,586 ( 0.00%)          let alloc = match self.get_alloc(mplace)? {
  369,275 ( 0.01%)              Some(ptr) => ptr,
        .                       None => {
        .                           return Ok(Some(ImmTy {
        .                               // zero-sized type
       63 ( 0.00%)                      imm: Scalar::ZST.into(),
        .                               layout: mplace.layout,
        .                           }));
        .                       }
        .                   };
        .           
  585,554 ( 0.01%)          match mplace.layout.abi {
        .                       Abi::Scalar(..) => {
   30,619 ( 0.00%)                  let scalar = alloc.read_scalar(alloc_range(Size::ZERO, mplace.layout.size))?;
        .                           Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))
        .                       }
    7,929 ( 0.00%)              Abi::ScalarPair(a, b) => {
        .                           // We checked `ptr_align` above, so all fields will have the alignment they need.
        .                           // We would anyway check against `ptr_align.restrict_for_offset(b_offset)`,
        .                           // which `ptr.offset(b_offset)` cannot possibly fail to satisfy.
        .                           let (a, b) = (a.value, b.value);
        .                           let (a_size, b_size) = (a.size(self), b.size(self));
        .                           let b_offset = a_size.align_to(b.align(self).abi);
    5,286 ( 0.00%)                  assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields
        .                           let a_val = alloc.read_scalar(alloc_range(Size::ZERO, a_size))?;
    7,929 ( 0.00%)                  let b_val = alloc.read_scalar(alloc_range(b_offset, b_size))?;
   13,215 ( 0.00%)                  Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))
        .                       }
        .                       _ => Ok(None),
        .                   }
        .               }
        .           
        .               /// Try returning an immediate for the operand.
        .               /// If the layout does not permit loading this as an immediate, return where in memory
        .               /// we can find the data.
        .               /// Note that for a given layout, this operation will either always fail or always
        .               /// succeed!  Whether it succeeds depends on whether the layout can be represented
        .               /// in an `Immediate`, not on which data is stored there currently.
2,845,989 ( 0.05%)      pub fn try_read_immediate(
        .                   &self,
        .                   src: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Result<ImmTy<'tcx, M::PointerTag>, MPlaceTy<'tcx, M::PointerTag>>> {
5,691,978 ( 0.09%)          Ok(match src.try_as_mplace() {
        .                       Ok(ref mplace) => {
  147,724 ( 0.00%)                  if let Some(val) = self.try_read_immediate_from_mplace(mplace)? {
        .                               Ok(val)
        .                           } else {
        .                               Err(*mplace)
        .                           }
        .                       }
2,423,590 ( 0.04%)              Err(val) => Ok(val),
        .                   })
2,845,989 ( 0.05%)      }
        .           
        .               /// Read an immediate from a place, asserting that that is possible with the given layout.
        .               #[inline(always)]
        .               pub fn read_immediate(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ImmTy<'tcx, M::PointerTag>> {
  798,197 ( 0.01%)          if let Ok(imm) = self.try_read_immediate(op)? {
1,108,643 ( 0.02%)              Ok(imm)
        .                   } else {
        .                       span_bug!(self.cur_span(), "primitive read failed for type: {:?}", op.layout.ty);
        .                   }
        .               }
        .           
        .               /// Read a scalar from a place
  333,091 ( 0.01%)      pub fn read_scalar(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, ScalarMaybeUninit<M::PointerTag>> {
   30,281 ( 0.00%)          Ok(self.read_immediate(op)?.to_scalar_or_uninit())
  272,529 ( 0.00%)      }
        .           
        .               /// Read a pointer from a place.
        .               pub fn read_pointer(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, Pointer<Option<M::PointerTag>>> {
        .                   Ok(self.scalar_to_ptr(self.read_scalar(op)?.check_init()?))
        .               }
-- line 342 ----------------------------------------
-- line 345 ----------------------------------------
        .               pub fn read_str(&self, mplace: &MPlaceTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, &str> {
        .                   let len = mplace.len(self)?;
        .                   let bytes = self.memory.read_bytes(mplace.ptr, Size::from_bytes(len))?;
        .                   let str = std::str::from_utf8(bytes).map_err(|err| err_ub!(InvalidStr(err)))?;
        .                   Ok(str)
        .               }
        .           
        .               /// Projection functions
  235,890 ( 0.00%)      pub fn operand_field(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   field: usize,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let base = match op.try_as_mplace() {
        .                       Ok(ref mplace) => {
        .                           // We can reuse the mplace field computation logic for indirect operands.
        .                           let field = self.mplace_field(mplace, field)?;
  258,863 ( 0.00%)                  return Ok(field.into());
        .                       }
      392 ( 0.00%)              Err(value) => value,
        .                   };
        .           
      270 ( 0.00%)          let field_layout = op.layout.field(self, field);
        .                   if field_layout.is_zst() {
        .                       let immediate = Scalar::ZST.into();
        .                       return Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout });
        .                   }
      168 ( 0.00%)          let offset = op.layout.fields.offset(field);
        4 ( 0.00%)          let immediate = match *base {
        .                       // the field covers the entire type
      714 ( 0.00%)              _ if offset.bytes() == 0 && field_layout.size == op.layout.size => *base,
        .                       // extract fields from types with `ScalarPair` ABI
        .                       Immediate::ScalarPair(a, b) => {
        2 ( 0.00%)                  let val = if offset.bytes() == 0 { a } else { b };
        .                           Immediate::from(val)
        .                       }
        .                       Immediate::Scalar(val) => span_bug!(
        .                           self.cur_span(),
        .                           "field access on non aggregate {:#?}, {:#?}",
        .                           val,
        .                           op.layout
        .                       ),
        .                   };
      784 ( 0.00%)          Ok(OpTy { op: Operand::Immediate(immediate), layout: field_layout })
  212,301 ( 0.00%)      }
        .           
        .               pub fn operand_index(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   index: u64,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   if let Ok(index) = usize::try_from(index) {
        .                       // We can just treat this as a field.
-- line 397 ----------------------------------------
-- line 398 ----------------------------------------
        .                       self.operand_field(op, index)
        .                   } else {
        .                       // Indexing into a big array. This must be an mplace.
        .                       let mplace = op.assert_mem_place();
        .                       Ok(self.mplace_index(&mplace, index)?.into())
        .                   }
        .               }
        .           
    1,122 ( 0.00%)      pub fn operand_downcast(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .                   variant: VariantIdx,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Downcasts only change the layout
    1,734 ( 0.00%)          Ok(match op.try_as_mplace() {
      750 ( 0.00%)              Ok(ref mplace) => self.mplace_downcast(mplace, variant)?.into(),
        .                       Err(..) => {
       81 ( 0.00%)                  let layout = op.layout.for_variant(self, variant);
      378 ( 0.00%)                  OpTy { layout, ..*op }
        .                       }
        .                   })
      918 ( 0.00%)      }
        .           
  120,716 ( 0.00%)      pub fn operand_projection(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .                   proj_elem: mir::PlaceElem<'tcx>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::ProjectionElem::*;
  482,864 ( 0.01%)          Ok(match proj_elem {
      129 ( 0.00%)              Field(field, _) => self.operand_field(base, field.index())?,
       93 ( 0.00%)              Downcast(_, variant) => self.operand_downcast(base, variant)?,
        .                       Deref => self.deref_operand(base)?.into(),
        .                       Subslice { .. } | ConstantIndex { .. } | Index(_) => {
        .                           // The rest should only occur as mplace, we do not use Immediates for types
        .                           // allowing such operations.  This matches place_projection forcing an allocation.
        .                           let mplace = base.assert_mem_place();
  240,840 ( 0.00%)                  self.mplace_projection(&mplace, proj_elem)?.into()
        .                       }
        .                   })
  120,716 ( 0.00%)      }
        .           
        .               /// Converts a repr(simd) operand into an operand where `place_index` accesses the SIMD elements.
        .               /// Also returns the number of elements.
        .               pub fn operand_to_simd(
        .                   &self,
        .                   base: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (MPlaceTy<'tcx, M::PointerTag>, u64)> {
        .                   // Basically we just transmute this place into an array following simd_size_and_type.
-- line 446 ----------------------------------------
-- line 449 ----------------------------------------
        .                   self.mplace_to_simd(&base.assert_mem_place())
        .               }
        .           
        .               /// Read from a local. Will not actually access the local if reading from a ZST.
        .               /// Will not access memory, instead an indirect `Operand` is returned.
        .               ///
        .               /// This is public because it is used by [priroda](https://github.com/oli-obk/priroda) to get an
        .               /// OpTy from a local
2,283,783 ( 0.04%)      pub fn access_local(
        .                   &self,
        .                   frame: &super::Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,
        .                   local: mir::Local,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   let layout = self.layout_of_local(frame, local, layout)?;
   70,757 ( 0.00%)          let op = if layout.is_zst() {
        .                       // Do not read from ZST, they might not be initialized
       35 ( 0.00%)              Operand::Immediate(Scalar::ZST.into())
        .                   } else {
    5,184 ( 0.00%)              M::access_local(&self, frame, local)?
        .                   };
3,275,233 ( 0.05%)          Ok(OpTy { op, layout })
2,027,146 ( 0.03%)      }
        .           
        .               /// Every place can be read from, so we can turn them into an operand.
        .               /// This will definitely return `Indirect` if the place is a `Ptr`, i.e., this
        .               /// will never actually read from memory.
        .               #[inline(always)]
        .               pub fn place_to_op(
        .                   &self,
        .                   place: &PlaceTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
       16 ( 0.00%)          let op = match **place {
        .                       Place::Ptr(mplace) => Operand::Indirect(mplace),
        .                       Place::Local { frame, local } => {
       72 ( 0.00%)                  *self.access_local(&self.stack()[frame], local, None)?
        .                       }
        .                   };
        .                   Ok(OpTy { op, layout: place.layout })
        .               }
        .           
        .               // Evaluate a place with the goal of reading from it.  This lets us sometimes
        .               // avoid allocations.
1,704,088 ( 0.03%)      pub fn eval_place_to_op(
        .                   &self,
        .                   place: mir::Place<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Do not use the layout passed in as argument if the base we are looking at
        .                   // here is not the entire place.
  213,011 ( 0.00%)          let layout = if place.projection.is_empty() { layout } else { None };
        .           
  639,033 ( 0.01%)          let base_op = self.access_local(self.frame(), place.local, layout)?;
        .           
        .                   let op = place
        .                       .projection
        .                       .iter()
  271,611 ( 0.00%)              .try_fold(base_op, |op, elem| self.operand_projection(&op, elem))?;
        .           
        .                   trace!("eval_place_to_op: got {:?}", *op);
        .                   // Sanity-check the type we ended up with.
        .                   debug_assert!(mir_assign_valid_types(
        .                       *self.tcx,
        .                       self.param_env,
        .                       self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(
        .                           place.ty(&self.frame().body.local_decls, *self.tcx).ty
        .                       )?)?,
        .                       op.layout,
        .                   ));
  635,349 ( 0.01%)          Ok(op)
1,917,099 ( 0.03%)      }
        .           
        .               /// Evaluate the operand, returning a place where you can then find the data.
        .               /// If you already know the layout, you can save two table lookups
        .               /// by passing it in here.
        .               #[inline]
2,449,541 ( 0.04%)      pub fn eval_operand(
        .                   &self,
        .                   mir_op: &mir::Operand<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   use rustc_middle::mir::Operand::*;
  567,121 ( 0.01%)          let op = match *mir_op {
        .                       // FIXME: do some more logic on `move` to invalidate the old location
1,051,878 ( 0.02%)              Copy(place) | Move(place) => self.eval_place_to_op(place, layout)?,
        .           
        .                       Constant(ref constant) => {
        .                           let val =
1,065,889 ( 0.02%)                      self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;
        .                           // This can still fail:
        .                           // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all
        .                           //   checked yet.
        .                           // * During CTFE, since promoteds in `const`/`static` initializer bodies can fail.
        .           
      863 ( 0.00%)                  self.mir_const_to_op(&val, layout)?
        .                       }
        .                   };
        .                   trace!("{:?}: {:?}", mir_op, *op);
3,641,317 ( 0.06%)          Ok(op)
1,633,028 ( 0.03%)      }
        .           
        .               /// Evaluate a bunch of operands at once
        .               pub(super) fn eval_operands(
        .                   &self,
        .                   ops: &[mir::Operand<'tcx>],
        .               ) -> InterpResult<'tcx, Vec<OpTy<'tcx, M::PointerTag>>> {
        .                   ops.iter().map(|op| self.eval_operand(op, None)).collect()
        .               }
        .           
        .               // Used when the miri-engine runs into a constant and for extracting information from constants
        .               // in patterns via the `const_eval` module
        .               /// The `val` and `layout` are assumed to already be in our interpreter
        .               /// "universe" (param_env).
  849,660 ( 0.01%)      pub fn const_to_op(
        .                   &self,
        .                   val: &ty::Const<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  358,590 ( 0.01%)          match val.val {
        .                       ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),
        .                       ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),
      116 ( 0.00%)              ty::ConstKind::Unevaluated(uv) => {
        .                           let instance = self.resolve(uv.def, uv.substs)?;
      319 ( 0.00%)                  Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())
        .                       }
        .                       ty::ConstKind::Infer(..) | ty::ConstKind::Placeholder(..) => {
        .                           span_bug!(self.cur_span(), "const_to_op: Unexpected ConstKind {:?}", val)
        .                       }
  713,354 ( 0.01%)              ty::ConstKind::Value(val_val) => self.const_val_to_op(val_val, val.ty, layout),
        .                   }
  637,245 ( 0.01%)      }
        .           
   10,043 ( 0.00%)      pub fn mir_const_to_op(
        .                   &self,
        .                   val: &mir::ConstantKind<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
  143,436 ( 0.00%)          match val {
  285,046 ( 0.00%)              mir::ConstantKind::Ty(ct) => self.const_to_op(ct, layout),
        .                       mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, ty, layout),
        .                   }
    8,217 ( 0.00%)      }
        .           
  716,890 ( 0.01%)      crate fn const_val_to_op(
        .                   &self,
        .                   val_val: ConstValue<'tcx>,
        .                   ty: Ty<'tcx>,
        .                   layout: Option<TyAndLayout<'tcx>>,
        .               ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {
        .                   // Other cases need layout.
        .                   let tag_scalar = |scalar| -> InterpResult<'tcx, _> {
  425,814 ( 0.01%)              Ok(match scalar {
        .                           Scalar::Ptr(ptr, size) => Scalar::Ptr(self.global_base_pointer(ptr)?, size),
  212,820 ( 0.00%)                  Scalar::Int(int) => Scalar::Int(int),
        .                       })
        .                   };
  122,310 ( 0.00%)          let layout = from_known_layout(self.tcx, self.param_env, layout, || self.layout_of(ty))?;
  216,507 ( 0.00%)          let op = match val_val {
       34 ( 0.00%)              ConstValue::ByRef { alloc, offset } => {
       34 ( 0.00%)                  let id = self.tcx.create_memory_alloc(alloc);
        .                           // We rely on mutability being set correctly in that allocation to prevent writes
        .                           // where none should happen.
        .                           let ptr = self.global_base_pointer(Pointer::new(id, offset))?;
       68 ( 0.00%)                  Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))
        .                       }
  639,485 ( 0.01%)              ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),
    2,109 ( 0.00%)              ConstValue::Slice { data, start, end } => {
        .                           // We rely on mutability being set correctly in `data` to prevent writes
        .                           // where none should happen.
        .                           let ptr = Pointer::new(
    2,109 ( 0.00%)                      self.tcx.create_memory_alloc(data),
        .                               Size::from_bytes(start), // offset: `start`
        .                           );
    2,760 ( 0.00%)                  Operand::Immediate(Immediate::new_slice(
        .                               Scalar::from_pointer(self.global_base_pointer(ptr)?, &*self.tcx),
        .                               u64::try_from(end.checked_sub(start).unwrap()).unwrap(), // len: `end - start`
        .                               self,
        .                           ))
        .                       }
        .                   };
1,505,469 ( 0.02%)          Ok(OpTy { op, layout })
  573,512 ( 0.01%)      }
        .           
        .               /// Read discriminant, return the runtime value as well as the variant index.
        .               /// Can also legally be called on non-enums (e.g. through the discriminant_value intrinsic)!
    1,150 ( 0.00%)      pub fn read_discriminant(
        .                   &self,
        .                   op: &OpTy<'tcx, M::PointerTag>,
        .               ) -> InterpResult<'tcx, (Scalar<M::PointerTag>, VariantIdx)> {
        .                   trace!("read_discriminant_value {:#?}", op.layout);
        .                   // Get type and layout of the discriminant.
    1,380 ( 0.00%)          let discr_layout = self.layout_of(op.layout.ty.discriminant_ty(*self.tcx))?;
        .                   trace!("discriminant type: {:?}", discr_layout.ty);
        .           
        .                   // We use "discriminant" to refer to the value associated with a particular enum variant.
        .                   // This is not to be confused with its "variant index", which is just determining its position in the
        .                   // declared list of variants -- they can differ with explicitly assigned discriminants.
        .                   // We use "tag" to refer to how the discriminant is encoded in memory, which can be either
        .                   // straight-forward (`TagEncoding::Direct`) or with a niche (`TagEncoding::Niche`).
      345 ( 0.00%)          let (tag_scalar_layout, tag_encoding, tag_field) = match op.layout.variants {
        .                       Variants::Single { index } => {
        .                           let discr = match op.layout.ty.discriminant_for_variant(*self.tcx, index) {
        .                               Some(discr) => {
        .                                   // This type actually has discriminants.
        .                                   assert_eq!(discr.ty, discr_layout.ty);
        .                                   Scalar::from_uint(discr.val, discr_layout.size)
        .                               }
        .                               None => {
        .                                   // On a type without actual discriminants, variant is 0.
        .                                   assert_eq!(index.as_u32(), 0);
        .                                   Scalar::from_uint(index.as_u32(), discr_layout.size)
        .                               }
        .                           };
        .                           return Ok((discr, index));
        .                       }
      230 ( 0.00%)              Variants::Multiple { tag, ref tag_encoding, tag_field, .. } => {
        .                           (tag, tag_encoding, tag_field)
        .                       }
        .                   };
        .           
        .                   // There are *three* layouts that come into play here:
        .                   // - The discriminant has a type for typechecking. This is `discr_layout`, and is used for
        .                   //   the `Scalar` we return.
        .                   // - The tag (encoded discriminant) has layout `tag_layout`. This is always an integer type,
        .                   //   and used to interpret the value we read from the tag field.
        .                   //   For the return value, a cast to `discr_layout` is performed.
        .                   // - The field storing the tag has a layout, which is very similar to `tag_layout` but
        .                   //   may be a pointer. This is `tag_val.layout`; we just use it for sanity checks.
        .           
        .                   // Get layout for tag.
      690 ( 0.00%)          let tag_layout = self.layout_of(tag_scalar_layout.value.to_int_ty(*self.tcx))?;
        .           
        .                   // Read tag and sanity-check `tag_layout`.
      805 ( 0.00%)          let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;
      230 ( 0.00%)          assert_eq!(tag_layout.size, tag_val.layout.size);
      920 ( 0.00%)          assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());
        .                   let tag_val = tag_val.to_scalar()?;
        .                   trace!("tag value: {:?}", tag_val);
        .           
        .                   // Figure out which discriminant and variant this corresponds to.
    1,035 ( 0.00%)          Ok(match *tag_encoding {
        .                       TagEncoding::Direct => {
    2,300 ( 0.00%)                  let tag_bits = tag_val
        .                               .try_to_int()
        .                               .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?
        .                               .assert_bits(tag_layout.size);
        .                           // Cast bits from tag layout to discriminant layout.
      920 ( 0.00%)                  let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);
      230 ( 0.00%)                  let discr_bits = discr_val.assert_bits(discr_layout.size);
        .                           // Convert discriminant to variant index, and catch invalid discriminants.
      575 ( 0.00%)                  let index = match *op.layout.ty.kind() {
      115 ( 0.00%)                      ty::Adt(adt, _) => {
    1,746 ( 0.00%)                          adt.discriminants(*self.tcx).find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               ty::Generator(def_id, substs, _) => {
        .                                   let substs = substs.as_generator();
        .                                   substs
        .                                       .discriminants(def_id, *self.tcx)
        .                                       .find(|(_, var)| var.val == discr_bits)
        .                               }
        .                               _ => span_bug!(self.cur_span(), "tagged layout for non-adt non-generator"),
        .                           }
        .                           .ok_or_else(|| err_ub!(InvalidTag(Scalar::from_uint(tag_bits, tag_layout.size))))?;
        .                           // Return the cast value, and the index.
      460 ( 0.00%)                  (discr_val, index.0)
        .                       }
        .                       TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {
        .                           // Compute the variant this niche value/"tag" corresponds to. With niche layout,
        .                           // discriminant (encoded in niche/tag) and variant index are the same.
        .                           let variants_start = niche_variants.start().as_u32();
        .                           let variants_end = niche_variants.end().as_u32();
        .                           let variant = match tag_val.try_to_int() {
        .                               Err(dbg_val) => {
-- line 721 ----------------------------------------
-- line 766 ----------------------------------------
        .                               }
        .                           };
        .                           // Compute the size of the scalar we need to return.
        .                           // No need to cast, because the variant index directly serves as discriminant and is
        .                           // encoded in the tag.
        .                           (Scalar::from_uint(variant.as_u32(), discr_layout.size), variant)
        .                       }
        .                   })
    1,035 ( 0.00%)      }
        .           }

6,495,574 ( 0.11%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/operand.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 36 ----------------------------------------
        .           use rustc_session::parse::ParseSess;
        .           use rustc_span::source_map::{MultiSpan, Span, DUMMY_SP};
        .           use rustc_span::symbol::{kw, sym, Ident, Symbol};
        .           use tracing::debug;
        .           
        .           use std::ops::Range;
        .           use std::{cmp, mem, slice};
        .           
  167,282 ( 0.00%)  bitflags::bitflags! {
        .               struct Restrictions: u8 {
        .                   const STMT_EXPR         = 1 << 0;
        .                   const NO_STRUCT_LITERAL = 1 << 1;
        .                   const CONST_EXPR        = 1 << 2;
        .               }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Debug)]
-- line 52 ----------------------------------------
-- line 104 ----------------------------------------
        .                               $self.bump();
        .                               return $self.maybe_recover_from_bad_qpath_stage_2($self.prev_token.span, ty);
        .                           }
        .                       }
        .                   }
        .               };
        .           }
        .           
    1,638 ( 0.00%)  #[derive(Clone)]
        .           pub struct Parser<'a> {
       36 ( 0.00%)      pub sess: &'a ParseSess,
        .               /// The current token.
       22 ( 0.00%)      pub token: Token,
        .               /// The spacing for the current token
       25 ( 0.00%)      pub token_spacing: Spacing,
        .               /// The previous token.
       33 ( 0.00%)      pub prev_token: Token,
       39 ( 0.00%)      pub capture_cfg: bool,
       92 ( 0.00%)      restrictions: Restrictions,
       50 ( 0.00%)      expected_tokens: Vec<TokenType>,
        .               // Important: This must only be advanced from `next_tok`
        .               // to ensure that `token_cursor.num_next_calls` is updated properly
        .               token_cursor: TokenCursor,
       50 ( 0.00%)      desugar_doc_comments: bool,
        .               /// This field is used to keep track of how many left angle brackets we have seen. This is
        .               /// required in order to detect extra leading left angle brackets (`<` characters) and error
        .               /// appropriately.
        .               ///
        .               /// See the comments in the `parse_path_segment` function for more details.
       50 ( 0.00%)      unmatched_angle_bracket_count: u32,
       75 ( 0.00%)      max_angle_bracket_count: u32,
        .               /// A list of all unclosed delimiters found by the lexer. If an entry is used for error recovery
        .               /// it gets removed from here. Every entry left at the end gets emitted as an independent
        .               /// error.
       25 ( 0.00%)      pub(super) unclosed_delims: Vec<UnmatchedBrace>,
        .               last_unexpected_token_span: Option<Span>,
        .               /// Span pointing at the `:` for the last type ascription the parser has seen, and whether it
        .               /// looked like it could have been a mistyped path or literal `Option:Some(42)`).
        .               pub last_type_ascription: Option<(Span, bool /* likely path typo */)>,
        .               /// If present, this `Parser` is not parsing Rust code but rather a macro call.
        .               subparser_name: Option<&'static str>,
        .               capture_state: CaptureState,
        .               /// This allows us to recover when the user forget to add braces around
-- line 146 ----------------------------------------
-- line 173 ----------------------------------------
        .           /// the first macro inner attribute to invoke a proc-macro).
        .           /// When create a `TokenStream`, the inner attributes get inserted
        .           /// into the proper place in the token stream.
        .           pub type ReplaceRange = (Range<u32>, Vec<(FlatToken, Spacing)>);
        .           
        .           /// Controls how we capture tokens. Capturing can be expensive,
        .           /// so we try to avoid performing capturing in cases where
        .           /// we will never need an `AttrAnnotatedTokenStream`
       25 ( 0.00%)  #[derive(Copy, Clone)]
        .           pub enum Capturing {
        .               /// We aren't performing any capturing - this is the default mode.
        .               No,
        .               /// We are capturing tokens
        .               Yes,
        .           }
        .           
      100 ( 0.00%)  #[derive(Clone)]
        .           struct CaptureState {
      100 ( 0.00%)      capturing: Capturing,
       25 ( 0.00%)      replace_ranges: Vec<ReplaceRange>,
        .               inner_attr_ranges: FxHashMap<AttrId, ReplaceRange>,
        .           }
        .           
        .           impl<'a> Drop for Parser<'a> {
        .               fn drop(&mut self) {
      232 ( 0.00%)          emit_unclosed_delims(&mut self.unclosed_delims, &self.sess);
        .               }
        .           }
        .           
    9,594 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursor {
        .               frame: TokenCursorFrame,
    2,277 ( 0.00%)      stack: Vec<TokenCursorFrame>,
        .               desugar_doc_comments: bool,
        .               // Counts the number of calls to `next` or `next_desugared`,
        .               // depending on whether `desugar_doc_comments` is set.
      696 ( 0.00%)      num_next_calls: usize,
        .               // During parsing, we may sometimes need to 'unglue' a
        .               // glued token into two component tokens
        .               // (e.g. '>>' into '>' and '>), so that the parser
        .               // can consume them one at a time. This process
        .               // bypasses the normal capturing mechanism
        .               // (e.g. `num_next_calls` will not be incremented),
        .               // since the 'unglued' tokens due not exist in
        .               // the original `TokenStream`.
-- line 217 ----------------------------------------
-- line 226 ----------------------------------------
        .               // in `Option<Vec<u8>>` requires us to unglue
        .               // the trailing `>>` token. The `break_last_token`
        .               // field is used to track this token - it gets
        .               // appended to the captured stream when
        .               // we evaluate a `LazyTokenStream`
        .               break_last_token: bool,
        .           }
        .           
    4,427 ( 0.00%)  #[derive(Clone)]
        .           struct TokenCursorFrame {
    1,673 ( 0.00%)      delim: token::DelimToken,
        .               span: DelimSpan,
        .               open_delim: bool,
    3,346 ( 0.00%)      tree_cursor: tokenstream::Cursor,
        .               close_delim: bool,
        .           }
        .           
        .           impl TokenCursorFrame {
        .               fn new(span: DelimSpan, delim: DelimToken, tts: TokenStream) -> Self {
      195 ( 0.00%)          TokenCursorFrame {
        .                       delim,
        .                       span,
        .                       open_delim: false,
   21,684 ( 0.00%)              tree_cursor: tts.into_trees(),
        .                       close_delim: false,
        .                   }
        .               }
        .           }
        .           
        .           impl TokenCursor {
1,674,216 ( 0.03%)      fn next(&mut self) -> (Token, Spacing) {
        .                   loop {
  848,770 ( 0.01%)              let (tree, spacing) = if !self.frame.open_delim {
   21,606 ( 0.00%)                  self.frame.open_delim = true;
  108,030 ( 0.00%)                  TokenTree::open_tt(self.frame.span, self.frame.delim).into()
1,630,765 ( 0.03%)              } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {
        .                           tree
   86,386 ( 0.00%)              } else if !self.frame.close_delim {
   21,575 ( 0.00%)                  self.frame.close_delim = true;
  107,875 ( 0.00%)                  TokenTree::close_tt(self.frame.span, self.frame.delim).into()
   43,150 ( 0.00%)              } else if let Some(frame) = self.stack.pop() {
  280,475 ( 0.00%)                  self.frame = frame;
        .                           continue;
        .                       } else {
      774 ( 0.00%)                  (TokenTree::Token(Token::new(token::Eof, DUMMY_SP)), Spacing::Alone)
        .                       };
        .           
  322,248 ( 0.01%)              match tree {
        .                           TokenTree::Token(token) => {
1,116,144 ( 0.02%)                      return (token, spacing);
        .                           }
        .                           TokenTree::Delimited(sp, delim, tts) => {
        .                               let frame = TokenCursorFrame::new(sp, delim, tts);
        .                               self.stack.push(mem::replace(&mut self.frame, frame));
        .                           }
        .                       }
        .                   }
1,116,144 ( 0.02%)      }
        .           
    1,440 ( 0.00%)      fn next_desugared(&mut self) -> (Token, Spacing) {
      432 ( 0.00%)          let (data, attr_style, sp) = match self.next() {
        .                       (Token { kind: token::DocComment(_, attr_style, data), span }, _) => {
        .                           (data, attr_style, span)
        .                       }
      720 ( 0.00%)              tok => return tok,
        .                   };
        .           
        .                   // Searches for the occurrences of `"#*` and returns the minimum number of `#`s
        .                   // required to wrap the text.
        .                   let mut num_of_hashes = 0;
        .                   let mut count = 0;
        .                   for ch in data.as_str().chars() {
        .                       count = match ch {
-- line 298 ----------------------------------------
-- line 332 ----------------------------------------
        .                                   .iter()
        .                                   .cloned()
        .                                   .collect::<TokenStream>()
        .                           },
        .                       ),
        .                   ));
        .           
        .                   self.next()
    1,296 ( 0.00%)      }
        .           }
        .           
    2,670 ( 0.00%)  #[derive(Debug, Clone, PartialEq)]
        .           enum TokenType {
    2,136 ( 0.00%)      Token(TokenKind),
        .               Keyword(Symbol),
        .               Operator,
        .               Lifetime,
        .               Ident,
        .               Path,
        .               Type,
        .               Const,
        .           }
-- line 353 ----------------------------------------
-- line 378 ----------------------------------------
        .               /// The separator token.
        .               sep: Option<TokenKind>,
        .               /// `true` if a trailing separator is allowed.
        .               trailing_sep_allowed: bool,
        .           }
        .           
        .           impl SeqSep {
        .               fn trailing_allowed(t: TokenKind) -> SeqSep {
       57 ( 0.00%)          SeqSep { sep: Some(t), trailing_sep_allowed: true }
        .               }
        .           
        .               fn none() -> SeqSep {
        .                   SeqSep { sep: None, trailing_sep_allowed: false }
        .               }
        .           }
        .           
        .           pub enum FollowedByType {
        .               Yes,
        .               No,
        .           }
        .           
        .           fn token_descr_opt(token: &Token) -> Option<&'static str> {
      162 ( 0.00%)      Some(match token.kind {
      324 ( 0.00%)          _ if token.is_special_ident() => "reserved identifier",
      324 ( 0.00%)          _ if token.is_used_keyword() => "keyword",
      324 ( 0.00%)          _ if token.is_unused_keyword() => "reserved keyword",
        .                   token::DocComment(..) => "doc comment",
        .                   _ => return None,
        .               })
        .           }
        .           
      567 ( 0.00%)  pub(super) fn token_descr(token: &Token) -> String {
      162 ( 0.00%)      let token_str = pprust::token_to_string(token);
        .               match token_descr_opt(token) {
        .                   Some(prefix) => format!("{} `{}`", prefix, token_str),
      567 ( 0.00%)          _ => format!("`{}`", token_str),
        .               }
      405 ( 0.00%)  }
        .           
        .           impl<'a> Parser<'a> {
      546 ( 0.00%)      pub fn new(
        .                   sess: &'a ParseSess,
        .                   tokens: TokenStream,
        .                   desugar_doc_comments: bool,
        .                   subparser_name: Option<&'static str>,
        .               ) -> Self {
       39 ( 0.00%)          let mut start_frame = TokenCursorFrame::new(DelimSpan::dummy(), token::NoDelim, tokens);
       78 ( 0.00%)          start_frame.open_delim = true;
        .                   start_frame.close_delim = true;
        .           
    1,209 ( 0.00%)          let mut parser = Parser {
        .                       sess,
       39 ( 0.00%)              token: Token::dummy(),
        .                       token_spacing: Spacing::Alone,
       39 ( 0.00%)              prev_token: Token::dummy(),
        .                       capture_cfg: false,
        .                       restrictions: Restrictions::empty(),
        .                       expected_tokens: Vec::new(),
        .                       token_cursor: TokenCursor {
      234 ( 0.00%)                  frame: start_frame,
        .                           stack: Vec::new(),
        .                           num_next_calls: 0,
        .                           desugar_doc_comments,
        .                           break_last_token: false,
        .                       },
        .                       desugar_doc_comments,
        .                       unmatched_angle_bracket_count: 0,
        .                       max_angle_bracket_count: 0,
-- line 445 ----------------------------------------
-- line 451 ----------------------------------------
        .                           capturing: Capturing::No,
        .                           replace_ranges: Vec::new(),
        .                           inner_attr_ranges: Default::default(),
        .                       },
        .                       current_closure: None,
        .                   };
        .           
        .                   // Make parser point to the first token.
       78 ( 0.00%)          parser.bump();
        .           
        .                   parser
      351 ( 0.00%)      }
        .           
        .               fn next_tok(&mut self, fallback_span: Span) -> (Token, Spacing) {
        .                   loop {
  835,830 ( 0.01%)              let (mut next, spacing) = if self.desugar_doc_comments {
      576 ( 0.00%)                  self.token_cursor.next_desugared()
        .                       } else {
  417,483 ( 0.01%)                  self.token_cursor.next()
        .                       };
  557,220 ( 0.01%)              self.token_cursor.num_next_calls += 1;
        .                       // We've retrieved an token from the underlying
        .                       // cursor, so we no longer need to worry about
        .                       // an unglued token. See `break_and_eat` for more details
  139,305 ( 0.00%)              self.token_cursor.break_last_token = false;
  557,220 ( 0.01%)              if next.span.is_dummy() {
        .                           // Tweak the location for better diagnostics, but keep syntactic context intact.
      164 ( 0.00%)                  next.span = fallback_span.with_ctxt(next.span.ctxt());
        .                       }
  482,640 ( 0.01%)              if matches!(
  278,610 ( 0.00%)                  next.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
  557,220 ( 0.01%)              return (next, spacing);
        .                   }
        .               }
        .           
        .               pub fn unexpected<T>(&mut self) -> PResult<'a, T> {
        .                   match self.expect_one_of(&[], &[]) {
        .                       Err(e) => Err(e),
        .                       // We can get `Ok(true)` from `recover_closing_delimiter`
        .                       // which is called in `expected_one_of_not_found`.
        .                       Ok(_) => FatalError.raise(),
        .                   }
        .               }
        .           
        .               /// Expects and consumes the token `t`. Signals an error if the next token is not `t`.
  295,677 ( 0.00%)      pub fn expect(&mut self, t: &TokenKind) -> PResult<'a, bool /* recovered */> {
   32,853 ( 0.00%)          if self.expected_tokens.is_empty() {
      342 ( 0.00%)              if self.token == *t {
      285 ( 0.00%)                  self.bump();
        .                           Ok(false)
        .                       } else {
        .                           self.unexpected_try_recover(t)
        .                       }
        .                   } else {
  393,552 ( 0.01%)              self.expect_one_of(slice::from_ref(t), &[])
        .                   }
  492,795 ( 0.01%)      }
        .           
        .               /// Expect next token to be edible or inedible token.  If edible,
        .               /// then consume it; if inedible, then return without consuming
        .               /// anything.  Signal a fatal error if next token is unexpected.
  396,324 ( 0.01%)      pub fn expect_one_of(
        .                   &mut self,
        .                   edible: &[TokenKind],
        .                   inedible: &[TokenKind],
        .               ) -> PResult<'a, bool /* recovered */> {
   66,054 ( 0.00%)          if edible.contains(&self.token.kind) {
   98,508 ( 0.00%)              self.bump();
        .                       Ok(false)
        .                   } else if inedible.contains(&self.token.kind) {
        .                       // leave it in the input
        .                       Ok(false)
        .                   } else if self.last_unexpected_token_span == Some(self.token.span) {
        .                       FatalError.raise();
        .                   } else {
        .                       self.expected_one_of_not_found(edible, inedible)
        .                   }
  495,405 ( 0.01%)      }
        .           
        .               // Public for rustfmt usage.
        .               pub fn parse_ident(&mut self) -> PResult<'a, Ident> {
   85,601 ( 0.00%)          self.parse_ident_common(true)
        .               }
        .           
        .               fn ident_or_err(&mut self) -> PResult<'a, (Ident, /* is_raw */ bool)> {
   64,353 ( 0.00%)          self.token.ident().ok_or_else(|| match self.prev_token.kind {
        .                       TokenKind::DocComment(..) => {
        .                           self.span_err(self.prev_token.span, Error::UselessDocComment)
        .                       }
        .                       _ => self.expected_ident_found(),
        .                   })
        .               }
        .           
  149,884 ( 0.00%)      fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, Ident> {
   21,412 ( 0.00%)          let (ident, is_raw) = self.ident_or_err()?;
  128,472 ( 0.00%)          if !is_raw && ident.is_reserved() {
        .                       let mut err = self.expected_ident_found();
        .                       if recover {
        .                           err.emit();
        .                       } else {
        .                           return Err(err);
        .                       }
        .                   }
   85,648 ( 0.00%)          self.bump();
        .                   Ok(ident)
  214,120 ( 0.00%)      }
        .           
        .               /// Checks if the next token is `tok`, and returns `true` if so.
        .               ///
        .               /// This method will automatically add `tok` to `expected_tokens` if `tok` is not
        .               /// encountered.
3,647,847 ( 0.06%)      fn check(&mut self, tok: &TokenKind) -> bool {
1,584,551 ( 0.03%)          let is_present = self.token == *tok;
1,083,628 ( 0.02%)          if !is_present {
2,223,348 ( 0.04%)              self.expected_tokens.push(TokenType::Token(tok.clone()));
        .                   }
        .                   is_present
3,647,847 ( 0.06%)      }
        .           
        .               /// Consumes a token 'tok' if it exists. Returns whether the given token was present.
        4 ( 0.00%)      pub fn eat(&mut self, tok: &TokenKind) -> bool {
  651,896 ( 0.01%)          let is_present = self.check(tok);
  447,348 ( 0.01%)          if is_present {
   85,241 ( 0.00%)              self.bump()
        .                   }
        .                   is_present
        5 ( 0.00%)      }
        .           
        .               /// If the next token is the given keyword, returns `true` without eating it.
        .               /// An expectation is also added for diagnostics purposes.
    7,145 ( 0.00%)      fn check_keyword(&mut self, kw: Symbol) -> bool {
    1,387 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw));
   42,176 ( 0.00%)          self.token.is_keyword(kw)
        .               }
        .           
        .               /// If the next token is the given keyword, eats it and returns `true`.
        .               /// Otherwise, returns `false`. An expectation is also added for diagnostics purposes.
        .               // Public for rustfmt usage.
   13,100 ( 0.00%)      pub fn eat_keyword(&mut self, kw: Symbol) -> bool {
    9,502 ( 0.00%)          if self.check_keyword(kw) {
      986 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
   13,100 ( 0.00%)      }
        .           
        .               fn eat_keyword_noexpect(&mut self, kw: Symbol) -> bool {
    1,076 ( 0.00%)          if self.token.is_keyword(kw) {
      248 ( 0.00%)              self.bump();
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
        .               /// If the given word is not a keyword, signals an error.
        .               /// If the next token is not the given word, signals an error.
        .               /// Otherwise, eats it.
      115 ( 0.00%)      fn expect_keyword(&mut self, kw: Symbol) -> PResult<'a, ()> {
        .                   if !self.eat_keyword(kw) { self.unexpected() } else { Ok(()) }
       92 ( 0.00%)      }
        .           
        .               /// Is the given keyword `kw` followed by a non-reserved identifier?
    8,600 ( 0.00%)      fn is_kw_followed_by_ident(&self, kw: Symbol) -> bool {
    4,300 ( 0.00%)          self.token.is_keyword(kw) && self.look_ahead(1, |t| t.is_ident() && !t.is_reserved_ident())
    9,675 ( 0.00%)      }
        .           
   68,004 ( 0.00%)      fn check_or_expected(&mut self, ok: bool, typ: TokenType) -> bool {
   23,206 ( 0.00%)          if ok {
        .                       true
        .                   } else {
    1,496 ( 0.00%)              self.expected_tokens.push(typ);
        .                       false
        .                   }
   68,004 ( 0.00%)      }
        .           
        .               fn check_ident(&mut self) -> bool {
    1,772 ( 0.00%)          self.check_or_expected(self.token.is_ident(), TokenType::Ident)
        .               }
        .           
   43,192 ( 0.00%)      fn check_path(&mut self) -> bool {
   87,362 ( 0.00%)          self.check_or_expected(self.token.is_path_start(), TokenType::Path)
   53,990 ( 0.00%)      }
        .           
        .               fn check_type(&mut self) -> bool {
      408 ( 0.00%)          self.check_or_expected(self.token.can_begin_type(), TokenType::Type)
        .               }
        .           
        .               fn check_const_arg(&mut self) -> bool {
      408 ( 0.00%)          self.check_or_expected(self.token.can_begin_const_arg(), TokenType::Const)
        .               }
        .           
    2,358 ( 0.00%)      fn check_inline_const(&self, dist: usize) -> bool {
    1,310 ( 0.00%)          self.is_keyword_ahead(dist, &[kw::Const])
        .                       && self.look_ahead(dist + 1, |t| match t.kind {
        .                           token::Interpolated(ref nt) => matches!(**nt, token::NtBlock(..)),
        .                           token::OpenDelim(DelimToken::Brace) => true,
        .                           _ => false,
        .                       })
    2,358 ( 0.00%)      }
        .           
        .               /// Checks to see if the next token is either `+` or `+=`.
        .               /// Otherwise returns `false`.
        .               fn check_plus(&mut self) -> bool {
      652 ( 0.00%)          self.check_or_expected(
      326 ( 0.00%)              self.token.is_like_plus(),
      326 ( 0.00%)              TokenType::Token(token::BinOp(token::Plus)),
        .                   )
        .               }
        .           
        .               /// Eats the expected token if it's present possibly breaking
        .               /// compound tokens like multi-character operators in process.
        .               /// Returns `true` if the token was eaten.
  132,168 ( 0.00%)      fn break_and_eat(&mut self, expected: TokenKind) -> bool {
   77,098 ( 0.00%)          if self.token.kind == expected {
      474 ( 0.00%)              self.bump();
        .                       return true;
        .                   }
   53,885 ( 0.00%)          match self.token.kind.break_two_token_op() {
        7 ( 0.00%)              Some((first, second)) if first == expected => {
        4 ( 0.00%)                  let first_span = self.sess.source_map().start_point(self.token.span);
        5 ( 0.00%)                  let second_span = self.token.span.with_lo(first_span.hi());
        9 ( 0.00%)                  self.token = Token::new(first, first_span);
        .                           // Keep track of this token - if we end token capturing now,
        .                           // we'll want to append this token to the captured stream.
        .                           //
        .                           // If we consume any additional tokens, then this token
        .                           // is not needed (we'll capture the entire 'glued' token),
        .                           // and `next_tok` will set this field to `None`
        1 ( 0.00%)                  self.token_cursor.break_last_token = true;
        .                           // Use the spacing of the glued token as the spacing
        .                           // of the unglued second token.
       14 ( 0.00%)                  self.bump_with((Token::new(second, second_span), self.token_spacing));
        .                           true
        .                       }
        .                       _ => {
   32,328 ( 0.00%)                  self.expected_tokens.push(TokenType::Token(expected));
        .                           false
        .                       }
        .                   }
  142,230 ( 0.00%)      }
        .           
        .               /// Eats `+` possibly breaking tokens like `+=` in process.
        .               fn eat_plus(&mut self) -> bool {
       84 ( 0.00%)          self.break_and_eat(token::BinOp(token::Plus))
        .               }
        .           
        .               /// Eats `&` possibly breaking tokens like `&&` in process.
        .               /// Signals an error if `&` is not eaten.
        .               fn expect_and(&mut self) -> PResult<'a, ()> {
      660 ( 0.00%)          if self.break_and_eat(token::BinOp(token::And)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `|` possibly breaking tokens like `||` in process.
        .               /// Signals an error if `|` was not eaten.
        .               fn expect_or(&mut self) -> PResult<'a, ()> {
      114 ( 0.00%)          if self.break_and_eat(token::BinOp(token::Or)) { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
      570 ( 0.00%)      fn eat_lt(&mut self) -> bool {
   32,559 ( 0.00%)          let ate = self.break_and_eat(token::Lt);
   21,666 ( 0.00%)          if ate {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      204 ( 0.00%)              self.unmatched_angle_bracket_count += 1;
      215 ( 0.00%)              self.max_angle_bracket_count += 1;
        .                       debug!("eat_lt: (increment) count={:?}", self.unmatched_angle_bracket_count);
        .                   }
        .                   ate
      570 ( 0.00%)      }
        .           
        .               /// Eats `<` possibly breaking tokens like `<<` in process.
        .               /// Signals an error if `<` was not eaten.
        .               fn expect_lt(&mut self) -> PResult<'a, ()> {
        .                   if self.eat_lt() { Ok(()) } else { self.unexpected() }
        .               }
        .           
        .               /// Eats `>` possibly breaking tokens like `>>` in process.
        .               /// Signals an error if `>` was not eaten.
        .               fn expect_gt(&mut self) -> PResult<'a, ()> {
      306 ( 0.00%)          if self.break_and_eat(token::Gt) {
        .                       // See doc comment for `unmatched_angle_bracket_count`.
      153 ( 0.00%)              if self.unmatched_angle_bracket_count > 0 {
      102 ( 0.00%)                  self.unmatched_angle_bracket_count -= 1;
        .                           debug!("expect_gt: (decrement) count={:?}", self.unmatched_angle_bracket_count);
        .                       }
        .                       Ok(())
        .                   } else {
        .                       self.unexpected()
        .                   }
        .               }
        .           
        .               fn expect_any_with_type(&mut self, kets: &[&TokenKind], expect: TokenExpectType) -> bool {
        .                   kets.iter().any(|k| match expect {
  255,264 ( 0.00%)              TokenExpectType::Expect => self.check(k),
      285 ( 0.00%)              TokenExpectType::NoExpect => self.token == **k,
        .                   })
        .               }
        .           
        .               fn parse_seq_to_before_tokens<T>(
        .                   &mut self,
        .                   kets: &[&TokenKind],
        .                   sep: SeqSep,
        .                   expect: TokenExpectType,
-- line 759 ----------------------------------------
-- line 761 ----------------------------------------
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */, bool /* recovered */)> {
        .                   let mut first = true;
        .                   let mut recovered = false;
        .                   let mut trailing = false;
        .                   let mut v = vec![];
        .                   let unclosed_delims = !self.unclosed_delims.is_empty();
        .           
        .                   while !self.expect_any_with_type(kets, expect) {
  223,211 ( 0.00%)              if let token::CloseDelim(..) | token::Eof = self.token.kind {
        .                           break;
        .                       }
  149,051 ( 0.00%)              if let Some(ref t) = sep.sep {
  176,446 ( 0.00%)                  if first {
        .                               first = false;
        .                           } else {
  169,244 ( 0.00%)                      match self.expect(t) {
        .                                   Ok(false) => {
        .                                       self.current_closure.take();
        .                                   }
        .                                   Ok(true) => {
        .                                       self.current_closure.take();
        .                                       recovered = true;
        .                                       break;
        .                                   }
-- line 784 ----------------------------------------
-- line 857 ----------------------------------------
        .                                               e.cancel();
        .                                               break;
        .                                           }
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
   84,842 ( 0.00%)              if sep.trailing_sep_allowed && self.expect_any_with_type(kets, expect) {
        .                           trailing = true;
        .                           break;
        .                       }
        .           
   42,095 ( 0.00%)              let t = f(self)?;
      488 ( 0.00%)              v.push(t);
        .                   }
        .           
   84,888 ( 0.00%)          Ok((v, trailing, recovered))
        .               }
        .           
        .               fn recover_missing_braces_around_closure_body(
        .                   &mut self,
        .                   closure_spans: ClosureSpans,
        .                   mut expect_err: DiagnosticBuilder<'_>,
        .               ) -> PResult<'a, ()> {
        .                   let initial_semicolon = self.token.span;
-- line 882 ----------------------------------------
-- line 937 ----------------------------------------
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_seq_to_before_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool, bool)> {
   74,093 ( 0.00%)          self.parse_seq_to_before_tokens(&[ket], sep, TokenExpectType::Expect, f)
        .               }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
  102,560 ( 0.00%)      fn parse_seq_to_end<T>(
        .                   &mut self,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool /* trailing */)> {
   52,665 ( 0.00%)          let (val, trailing, recovered) = self.parse_seq_to_before_end(ket, sep, f)?;
   32,147 ( 0.00%)          if !recovered {
        .                       self.eat(ket);
        .                   }
  114,377 ( 0.00%)          Ok((val, trailing))
   82,048 ( 0.00%)      }
        .           
        .               /// Parses a sequence, including the closing delimiter. The function
        .               /// `f` must consume tokens until reaching the next separator or
        .               /// closing bracket.
        .               fn parse_unspanned_seq<T>(
        .                   &mut self,
        .                   bra: &TokenKind,
        .                   ket: &TokenKind,
        .                   sep: SeqSep,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
   30,949 ( 0.00%)          self.expect(bra)?;
   82,048 ( 0.00%)          self.parse_seq_to_end(ket, sep, f)
        .               }
        .           
        .               fn parse_delim_comma_seq<T>(
        .                   &mut self,
        .                   delim: DelimToken,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_unspanned_seq(
   10,375 ( 0.00%)              &token::OpenDelim(delim),
   10,497 ( 0.00%)              &token::CloseDelim(delim),
        .                       SeqSep::trailing_allowed(token::Comma),
        .                       f,
        .                   )
        .               }
        .           
        .               fn parse_paren_comma_seq<T>(
        .                   &mut self,
        .                   f: impl FnMut(&mut Parser<'a>) -> PResult<'a, T>,
        .               ) -> PResult<'a, (Vec<T>, bool)> {
        .                   self.parse_delim_comma_seq(token::Paren, f)
        .               }
        .           
        .               /// Advance the parser by one token using provided token as the next one.
1,810,978 ( 0.03%)      fn bump_with(&mut self, (next_token, next_spacing): (Token, Spacing)) {
        .                   // Bumping after EOF is a bad sign, usually an infinite loop.
  835,836 ( 0.01%)          if self.prev_token.kind == TokenKind::Eof {
        .                       let msg = "attempted to bump the parser past EOF (may be stuck in a loop)";
        .                       self.span_bug(self.token.span, msg);
        .                   }
        .           
        .                   // Update the current and previous tokens.
  557,224 ( 0.01%)          self.prev_token = mem::replace(&mut self.token, next_token);
  139,306 ( 0.00%)          self.token_spacing = next_spacing;
        .           
        .                   // Diagnostics.
  139,306 ( 0.00%)          self.expected_tokens.clear();
        .               }
        .           
        .               /// Advance the parser by one token.
1,114,440 ( 0.02%)      pub fn bump(&mut self) {
  557,220 ( 0.01%)          let next_token = self.next_tok(self.token.span);
  835,830 ( 0.01%)          self.bump_with(next_token);
1,114,440 ( 0.02%)      }
        .           
        .               /// Look-ahead `dist` tokens of `self.token` and get access to that token there.
        .               /// When `dist == 0` then the current token is looked at.
        .               pub fn look_ahead<R>(&self, dist: usize, looker: impl FnOnce(&Token) -> R) -> R {
      758 ( 0.00%)          if dist == 0 {
      326 ( 0.00%)              return looker(&self.token);
        .                   }
        .           
   73,920 ( 0.00%)          let frame = &self.token_cursor.frame;
   84,122 ( 0.00%)          if frame.delim != DelimToken::NoDelim {
        .                       let all_normal = (0..dist).all(|i| {
  242,039 ( 0.00%)                  let token = frame.tree_cursor.look_ahead(i);
  325,084 ( 0.01%)                  !matches!(token, Some(TokenTree::Delimited(_, DelimToken::NoDelim, _)))
        .                       });
        .                       if all_normal {
  409,652 ( 0.01%)                  return match frame.tree_cursor.look_ahead(dist - 1) {
  146,330 ( 0.00%)                      Some(tree) => match tree {
   62,928 ( 0.00%)                          TokenTree::Token(token) => looker(token),
        .                                   TokenTree::Delimited(dspan, delim, _) => {
   71,859 ( 0.00%)                              looker(&Token::new(token::OpenDelim(*delim), dspan.open))
        .                                   }
        .                               },
   75,465 ( 0.00%)                      None => looker(&Token::new(token::CloseDelim(frame.delim), frame.span.close)),
        .                           };
        .                       }
        .                   }
        .           
        .                   let mut cursor = self.token_cursor.clone();
        .                   let mut i = 0;
      215 ( 0.00%)          let mut token = Token::dummy();
      152 ( 0.00%)          while i < dist {
    1,555 ( 0.00%)              token = cursor.next().0;
      717 ( 0.00%)              if matches!(
      426 ( 0.00%)                  token.kind,
        .                           token::OpenDelim(token::NoDelim) | token::CloseDelim(token::NoDelim)
        .                       ) {
        .                           continue;
        .                       }
       80 ( 0.00%)              i += 1;
        .                   }
        6 ( 0.00%)          return looker(&token);
        .               }
        .           
        .               /// Returns whether any of the given keywords are `dist` tokens ahead of the current one.
    3,177 ( 0.00%)      fn is_keyword_ahead(&self, dist: usize, kws: &[Symbol]) -> bool {
      838 ( 0.00%)          self.look_ahead(dist, |t| kws.iter().any(|&kw| t.is_keyword(kw)))
    3,177 ( 0.00%)      }
        .           
        .               /// Parses asyncness: `async` or nothing.
        .               fn parse_asyncness(&mut self) -> Async {
        .                   if self.eat_keyword(kw::Async) {
        .                       let span = self.prev_token.uninterpolated_span();
        .                       Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }
        .                   } else {
        .                       Async::No
        .                   }
        .               }
        .           
        .               /// Parses unsafety: `unsafe` or nothing.
      160 ( 0.00%)      fn parse_unsafety(&mut self) -> Unsafe {
        .                   if self.eat_keyword(kw::Unsafe) {
        .                       Unsafe::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Unsafe::No
        .                   }
      640 ( 0.00%)      }
        .           
        .               /// Parses constness: `const` or nothing.
    2,088 ( 0.00%)      fn parse_constness(&mut self) -> Const {
        .                   // Avoid const blocks to be parsed as const items
      604 ( 0.00%)          if self.look_ahead(1, |t| t != &token::OpenDelim(DelimToken::Brace))
        .                       && self.eat_keyword(kw::Const)
        .                   {
       85 ( 0.00%)              Const::Yes(self.prev_token.uninterpolated_span())
        .                   } else {
        .                       Const::No
        .                   }
    3,654 ( 0.00%)      }
        .           
        .               /// Parses inline const expressions.
        .               fn parse_const_block(&mut self, span: Span, pat: bool) -> PResult<'a, P<Expr>> {
        .                   if pat {
        .                       self.sess.gated_spans.gate(sym::inline_const_pat, span);
        .                   } else {
        .                       self.sess.gated_spans.gate(sym::inline_const, span);
        .                   }
-- line 1104 ----------------------------------------
-- line 1110 ----------------------------------------
        .                   };
        .                   let blk_span = anon_const.value.span;
        .                   Ok(self.mk_expr(span.to(blk_span), ExprKind::ConstBlock(anon_const), AttrVec::new()))
        .               }
        .           
        .               /// Parses mutability (`mut` or nothing).
        .               fn parse_mutability(&mut self) -> Mutability {
        .                   if self.eat_keyword(kw::Mut) { Mutability::Mut } else { Mutability::Not }
      220 ( 0.00%)      }
        .           
        .               /// Possibly parses mutability (`const` or `mut`).
        .               fn parse_const_or_mut(&mut self) -> Option<Mutability> {
        .                   if self.eat_keyword(kw::Mut) {
        .                       Some(Mutability::Mut)
        .                   } else if self.eat_keyword(kw::Const) {
        .                       Some(Mutability::Not)
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn parse_field_name(&mut self) -> PResult<'a, Ident> {
       36 ( 0.00%)          if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) = self.token.kind
        .                   {
        .                       self.expect_no_suffix(self.token.span, "a tuple index", suffix);
        .                       self.bump();
        .                       Ok(Ident::new(symbol, self.prev_token.span))
        .                   } else {
       54 ( 0.00%)              self.parse_ident_common(true)
        .                   }
        .               }
        .           
        .               fn parse_mac_args(&mut self) -> PResult<'a, P<MacArgs>> {
        2 ( 0.00%)          self.parse_mac_args_common(true).map(P)
        .               }
        .           
        .               fn parse_attr_args(&mut self) -> PResult<'a, MacArgs> {
       84 ( 0.00%)          self.parse_mac_args_common(false)
        .               }
        .           
      261 ( 0.00%)      fn parse_mac_args_common(&mut self, delimited_only: bool) -> PResult<'a, MacArgs> {
      232 ( 0.00%)          Ok(
      209 ( 0.00%)              if self.check(&token::OpenDelim(DelimToken::Paren))
       48 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Bracket))
       48 ( 0.00%)                  || self.check(&token::OpenDelim(DelimToken::Brace))
        .                       {
       52 ( 0.00%)                  match self.parse_token_tree() {
       65 ( 0.00%)                      TokenTree::Delimited(dspan, delim, tokens) =>
        .                               // We've confirmed above that there is a delimiter so unwrapping is OK.
        .                               {
       26 ( 0.00%)                          MacArgs::Delimited(dspan, MacDelimiter::from_token(delim).unwrap(), tokens)
        .                               }
        .                               _ => unreachable!(),
        .                           }
       32 ( 0.00%)              } else if !delimited_only {
        .                           if self.eat(&token::Eq) {
        .                               let eq_span = self.prev_token.span;
        .           
        .                               // Collect tokens because they are used during lowering to HIR.
        .                               let expr = self.parse_expr_force_collect()?;
        .                               let span = expr.span;
        .           
        .                               let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));
-- line 1172 ----------------------------------------
-- line 1173 ----------------------------------------
        .                               MacArgs::Eq(eq_span, Token::new(token_kind, span))
        .                           } else {
        .                               MacArgs::Empty
        .                           }
        .                       } else {
        .                           return self.unexpected();
        .                       },
        .                   )
      203 ( 0.00%)      }
        .           
        .               fn parse_or_use_outer_attributes(
        .                   &mut self,
        .                   already_parsed_attrs: Option<AttrWrapper>,
        .               ) -> PResult<'a, AttrWrapper> {
  157,407 ( 0.00%)          if let Some(attrs) = already_parsed_attrs {
        .                       Ok(attrs)
        .                   } else {
  104,430 ( 0.00%)              self.parse_outer_attributes()
        .                   }
        .               }
        .           
        .               /// Parses a single token tree from the input.
      296 ( 0.00%)      pub(crate) fn parse_token_tree(&mut self) -> TokenTree {
      111 ( 0.00%)          match self.token.kind {
        .                       token::OpenDelim(..) => {
        .                           let depth = self.token_cursor.stack.len();
        .           
        .                           // We keep advancing the token cursor until we hit
        .                           // the matching `CloseDelim` token.
      806 ( 0.00%)                  while !(depth == self.token_cursor.stack.len()
        .                               && matches!(self.token.kind, token::CloseDelim(_)))
        .                           {
        .                               // Advance one token at a time, so `TokenCursor::next()`
        .                               // can capture these tokens if necessary.
      390 ( 0.00%)                      self.bump();
        .                           }
        .                           // We are still inside the frame corresponding
        .                           // to the delimited stream we captured, so grab
        .                           // the tokens from this frame.
        .                           let frame = &self.token_cursor.frame;
       74 ( 0.00%)                  let stream = frame.tree_cursor.stream.clone();
       74 ( 0.00%)                  let span = frame.span;
       37 ( 0.00%)                  let delim = frame.delim;
        .                           // Consume close delimiter
       74 ( 0.00%)                  self.bump();
      185 ( 0.00%)                  TokenTree::Delimited(span, delim, stream)
        .                       }
        .                       token::CloseDelim(_) | token::Eof => unreachable!(),
        .                       _ => {
        .                           self.bump();
        .                           TokenTree::Token(self.prev_token.clone())
        .                       }
        .                   }
      259 ( 0.00%)      }
        .           
        .               /// Parses a stream of tokens into a list of `TokenTree`s, up to EOF.
        .               pub fn parse_all_token_trees(&mut self) -> PResult<'a, Vec<TokenTree>> {
        .                   let mut tts = Vec::new();
        .                   while self.token != token::Eof {
        .                       tts.push(self.parse_token_tree());
        .                   }
        .                   Ok(tts)
-- line 1234 ----------------------------------------
-- line 1244 ----------------------------------------
        .                   }
        .                   TokenStream::new(result)
        .               }
        .           
        .               /// Evaluates the closure with restrictions in place.
        .               ///
        .               /// Afters the closure is evaluated, restrictions are reset.
        .               fn with_res<T>(&mut self, res: Restrictions, f: impl FnOnce(&mut Self) -> T) -> T {
   52,499 ( 0.00%)          let old = self.restrictions;
   52,945 ( 0.00%)          self.restrictions = res;
        .                   let res = f(self);
   52,918 ( 0.00%)          self.restrictions = old;
        .                   res
        .               }
        .           
    3,456 ( 0.00%)      fn is_crate_vis(&self) -> bool {
    2,160 ( 0.00%)          self.token.is_keyword(kw::Crate) && self.look_ahead(1, |t| t != &token::ModSep)
    3,888 ( 0.00%)      }
        .           
        .               /// Parses `pub`, `pub(crate)` and `pub(in path)` plus shortcuts `crate` for `pub(crate)`,
        .               /// `pub(self)` for `pub(in self)` and `pub(super)` for `pub(in super)`.
        .               /// If the following element can't be a tuple (i.e., it's a function definition), then
        .               /// it's not a tuple struct field), and the contents within the parentheses aren't valid,
        .               /// so emit a proper diagnostic.
        .               // Public for rustfmt usage.
    2,910 ( 0.00%)      pub fn parse_visibility(&mut self, fbt: FollowedByType) -> PResult<'a, Visibility> {
      582 ( 0.00%)          maybe_whole!(self, NtVis, |x| x);
        .           
      291 ( 0.00%)          self.expected_tokens.push(TokenType::Keyword(kw::Crate));
    1,164 ( 0.00%)          if self.is_crate_vis() {
        .                       self.bump(); // `crate`
        .                       self.sess.gated_spans.gate(sym::crate_visibility_modifier, self.prev_token.span);
        .                       return Ok(Visibility {
        .                           span: self.prev_token.span,
        .                           kind: VisibilityKind::Crate(CrateSugar::JustCrate),
        .                           tokens: None,
        .                       });
        .                   }
        .           
        .                   if !self.eat_keyword(kw::Pub) {
        .                       // We need a span for our `Spanned<VisibilityKind>`, but there's inherently no
        .                       // keyword to grab a span from for inherited visibility; an empty span at the
        .                       // beginning of the current token would seem to be the "Schelling span".
      251 ( 0.00%)              return Ok(Visibility {
      753 ( 0.00%)                  span: self.token.span.shrink_to_lo(),
        .                           kind: VisibilityKind::Inherited,
        .                           tokens: None,
        .                       });
        .                   }
       40 ( 0.00%)          let lo = self.prev_token.span;
        .           
      200 ( 0.00%)          if self.check(&token::OpenDelim(token::Paren)) {
        .                       // We don't `self.bump()` the `(` yet because this might be a struct definition where
        .                       // `()` or a tuple might be allowed. For example, `struct Struct(pub (), pub (usize));`.
        .                       // Because of this, we only `bump` the `(` if we're assured it is appropriate to do so
        .                       // by the following tokens.
        .                       if self.is_keyword_ahead(1, &[kw::Crate]) && self.look_ahead(2, |t| t != &token::ModSep)
        .                       // account for `pub(crate::foo)`
        .                       {
        .                           // Parse `pub(crate)`.
-- line 1303 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       } else if let FollowedByType::No = fbt {
        .                           // Provide this diagnostic if a type cannot follow;
        .                           // in particular, if this is not a tuple struct.
        .                           self.recover_incorrect_vis_restriction()?;
        .                           // Emit diagnostic, but continue with public visibility.
        .                       }
        .                   }
        .           
      120 ( 0.00%)          Ok(Visibility { span: lo, kind: VisibilityKind::Public, tokens: None })
    2,619 ( 0.00%)      }
        .           
        .               /// Recovery for e.g. `pub(something) fn ...` or `struct X { pub(something) y: Z }`
        .               fn recover_incorrect_vis_restriction(&mut self) -> PResult<'a, ()> {
        .                   self.bump(); // `(`
        .                   let path = self.parse_path(PathStyle::Mod)?;
        .                   self.expect(&token::CloseDelim(token::Paren))?; // `)`
        .           
        .                   let msg = "incorrect visibility restriction";
-- line 1355 ----------------------------------------
-- line 1370 ----------------------------------------
        .                       )
        .                       .emit();
        .           
        .                   Ok(())
        .               }
        .           
        .               /// Parses `extern string_literal?`.
        .               fn parse_extern(&mut self) -> Extern {
       57 ( 0.00%)          if self.eat_keyword(kw::Extern) { Extern::from_abi(self.parse_abi()) } else { Extern::None }
        .               }
        .           
        .               /// Parses a string literal as an ABI spec.
        .               fn parse_abi(&mut self) -> Option<StrLit> {
        .                   match self.parse_str_lit() {
        .                       Ok(str_lit) => Some(str_lit),
        .                       Err(Some(lit)) => match lit.kind {
        .                           ast::LitKind::Err(_) => None,
-- line 1386 ----------------------------------------
-- line 1409 ----------------------------------------
        .                   self.collect_tokens_trailing_token(
        .                       AttrWrapper::empty(),
        .                       ForceCollect::Yes,
        .                       |this, _attrs| Ok((f(this)?, TrailingToken::None)),
        .                   )
        .               }
        .           
        .               /// `::{` or `::*`
  168,096 ( 0.00%)      fn is_import_coupler(&mut self) -> bool {
   84,048 ( 0.00%)          self.check(&token::ModSep)
        .                       && self.look_ahead(1, |t| {
  160,336 ( 0.00%)                  *t == token::OpenDelim(token::Brace) || *t == token::BinOp(token::Star)
        .                       })
   99,018 ( 0.00%)      }
        .           
        .               pub fn clear_expected_tokens(&mut self) {
        .                   self.expected_tokens.clear();
        .               }
        .           }
        .           
        .           crate fn make_unclosed_delims_error(
        .               unmatched: UnmatchedBrace,
-- line 1430 ----------------------------------------
-- line 1450 ----------------------------------------
        .                   err.span_label(sp, "closing delimiter possibly meant for this");
        .               }
        .               if let Some(sp) = unmatched.unclosed_span {
        .                   err.span_label(sp, "unclosed delimiter");
        .               }
        .               Some(err)
        .           }
        .           
      512 ( 0.00%)  pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, sess: &ParseSess) {
      256 ( 0.00%)      *sess.reached_eof.borrow_mut() |=
        .                   unclosed_delims.iter().any(|unmatched_delim| unmatched_delim.found_delim.is_none());
      256 ( 0.00%)      for unmatched in unclosed_delims.drain(..) {
        .                   if let Some(mut e) = make_unclosed_delims_error(unmatched, sess) {
        .                       e.emit();
        .                   }
        .               }
      512 ( 0.00%)  }
        .           
        .           /// A helper struct used when building an `AttrAnnotatedTokenStream` from
        .           /// a `LazyTokenStream`. Both delimiter and non-delimited tokens
        .           /// are stored as `FlatToken::Token`. A vector of `FlatToken`s
        .           /// is then 'parsed' to build up an `AttrAnnotatedTokenStream` with nested
        .           /// `AttrAnnotatedTokenTree::Delimited` tokens
        .           #[derive(Debug, Clone)]
        .           pub enum FlatToken {
-- line 1474 ----------------------------------------

  941,480 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/parser/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs
--------------------------------------------------------------------------------
Ir                 

-- line 63 ----------------------------------------
        .           /// assert!(iter.next().is_none());
        .           /// ```
        .           #[stable(feature = "iter_zip", since = "1.59.0")]
        .           pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>
        .           where
        .               A: IntoIterator,
        .               B: IntoIterator,
        .           {
   45,880 ( 0.00%)      ZipImpl::new(a.into_iter(), b.into_iter())
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<A, B> Iterator for Zip<A, B>
        .           where
        .               A: Iterator,
        .               B: Iterator,
        .           {
-- line 79 ----------------------------------------
-- line 147 ----------------------------------------
        .                           index: 0, // unused
        .                           len: 0,   // unused
        .                           a_len: 0, // unused
        .                       }
        .                   }
        .           
        .                   #[inline]
        .                   default fn next(&mut self) -> Option<(A::Item, B::Item)> {
    5,015 ( 0.00%)              let x = self.a.next()?;
    6,486 ( 0.00%)              let y = self.b.next()?;
    2,400 ( 0.00%)              Some((x, y))
      720 ( 0.00%)          }
        .           
        .                   #[inline]
        .                   default fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                       self.super_nth(n)
        .                   }
        .           
        .                   #[inline]
        .                   default fn next_back(&mut self) -> Option<(A::Item, B::Item)>
-- line 166 ----------------------------------------
-- line 203 ----------------------------------------
        .               B: Iterator,
        .           {
        .               type Item = (A::Item, B::Item);
        .           
        .               zip_impl_general_defaults! {}
        .           
        .               #[inline]
        .               default fn size_hint(&self) -> (usize, Option<usize>) {
       30 ( 0.00%)          let (a_lower, a_upper) = self.a.size_hint();
        8 ( 0.00%)          let (b_lower, b_upper) = self.b.size_hint();
        .           
        .                   let lower = cmp::min(a_lower, b_lower);
        .           
        .                   let upper = match (a_upper, b_upper) {
        .                       (Some(x), Some(y)) => Some(cmp::min(x, y)),
        .                       (Some(x), None) => Some(x),
        .                       (None, Some(y)) => Some(y),
        .                       (None, None) => None,
-- line 220 ----------------------------------------
-- line 236 ----------------------------------------
        .           where
        .               A: TrustedRandomAccessNoCoerce + Iterator,
        .               B: TrustedRandomAccessNoCoerce + Iterator,
        .           {
        .               zip_impl_general_defaults! {}
        .           
        .               #[inline]
        .               default fn size_hint(&self) -> (usize, Option<usize>) {
       78 ( 0.00%)          let size = cmp::min(self.a.size(), self.b.size());
        .                   (size, Some(size))
        .               }
        .           
        .               #[inline]
        .               unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {
       76 ( 0.00%)          let idx = self.index + idx;
        .                   // SAFETY: the caller must uphold the contract for
        .                   // `Iterator::__iterator_get_unchecked`.
        .                   unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }
        .               }
        .           }
        .           
        .           #[doc(hidden)]
        .           impl<A, B> ZipImpl<A, B> for Zip<A, B>
-- line 258 ----------------------------------------
-- line 263 ----------------------------------------
        .               fn new(a: A, b: B) -> Self {
        .                   let a_len = a.size();
        .                   let len = cmp::min(a_len, b.size());
        .                   Zip { a, b, index: 0, len, a_len }
        .               }
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<(A::Item, B::Item)> {
5,611,953 ( 0.09%)          if self.index < self.len {
        .                       let i = self.index;
        .                       // since get_unchecked executes code which can panic we increment the counters beforehand
        .                       // so that the same index won't be accessed twice, as required by TrustedRandomAccess
8,538,474 ( 0.14%)              self.index += 1;
        .                       // SAFETY: `i` is smaller than `self.len`, thus smaller than `self.a.len()` and `self.b.len()`
        .                       unsafe {
      177 ( 0.00%)                  Some((self.a.__iterator_get_unchecked(i), self.b.__iterator_get_unchecked(i)))
        .                       }
       78 ( 0.00%)          } else if A::MAY_HAVE_SIDE_EFFECT && self.index < self.a_len {
        .                       let i = self.index;
        .                       // as above, increment before executing code that may panic
        .                       self.index += 1;
        .                       self.len += 1;
        .                       // match the base implementation's potential side effects
        .                       // SAFETY: we just checked that `i` < `self.a.len()`
        .                       unsafe {
        .                           self.a.__iterator_get_unchecked(i);
-- line 288 ----------------------------------------
-- line 290 ----------------------------------------
        .                       None
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
   46,287 ( 0.00%)          let len = self.len - self.index;
    2,514 ( 0.00%)          (len, Some(len))
        .               }
        .           
        .               #[inline]
        .               fn nth(&mut self, n: usize) -> Option<Self::Item> {
        .                   let delta = cmp::min(n, self.len - self.index);
        .                   let end = self.index + delta;
        .                   while self.index < end {
        .                       let i = self.index;
-- line 307 ----------------------------------------
-- line 535 ----------------------------------------
        .           #[unstable(feature = "trusted_random_access", issue = "none")]
        .           #[rustc_specialization_trait]
        .           pub unsafe trait TrustedRandomAccessNoCoerce: Sized {
        .               // Convenience method.
        .               fn size(&self) -> usize
        .               where
        .                   Self: Iterator,
        .               {
      502 ( 0.00%)          self.size_hint().0
        .               }
        .               /// `true` if getting an iterator element may have side effects.
        .               /// Remember to take inner iterators into account.
        .               const MAY_HAVE_SIDE_EFFECT: bool;
        .           }
        .           
        .           /// Like `Iterator::__iterator_get_unchecked`, but doesn't require the compiler to
        .           /// know that `U: TrustedRandomAccess`.
-- line 551 ----------------------------------------
-- line 555 ----------------------------------------
        .           /// Same requirements calling `get_unchecked` directly.
        .           #[doc(hidden)]
        .           pub(in crate::iter::adapters) unsafe fn try_get_unchecked<I>(it: &mut I, idx: usize) -> I::Item
        .           where
        .               I: Iterator,
        .           {
        .               // SAFETY: the caller must uphold the contract for
        .               // `Iterator::__iterator_get_unchecked`.
    3,693 ( 0.00%)      unsafe { it.try_get_unchecked(idx) }
        .           }
        .           
        .           unsafe trait SpecTrustedRandomAccess: Iterator {
        .               /// If `Self: TrustedRandomAccess`, it must be safe to call
        .               /// `Iterator::__iterator_get_unchecked(self, index)`.
        .               unsafe fn try_get_unchecked(&mut self, index: usize) -> Self::Item;
        .           }
        .           
-- line 571 ----------------------------------------

  373,212 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/iter/adapters/zip.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs
--------------------------------------------------------------------------------
Ir                 

-- line 166 ----------------------------------------
        .               String(Cow<'static, str>),
        .               Break(BreakToken),
        .               Begin(BeginToken),
        .               End,
        .           }
        .           
        .           impl Token {
        .               pub fn is_hardbreak_tok(&self) -> bool {
   61,338 ( 0.00%)          matches!(self, Token::Break(BreakToken { offset: 0, blank_space: SIZE_INFINITY }))
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone)]
        .           enum PrintFrame {
        .               Fits,
        .               Broken { offset: isize, breaks: Breaks },
        .           }
-- line 182 ----------------------------------------
-- line 213 ----------------------------------------
        .           
        .           #[derive(Clone)]
        .           struct BufEntry {
        .               token: Token,
        .               size: isize,
        .           }
        .           
        .           impl Printer {
      188 ( 0.00%)      pub fn new() -> Self {
        .                   let linewidth = 78;
    3,304 ( 0.00%)          Printer {
        .                       out: String::new(),
        .                       margin: linewidth as isize,
        .                       space: linewidth as isize,
        .                       buf: RingBuffer::new(),
        .                       left_total: 0,
        .                       right_total: 0,
        .                       scan_stack: VecDeque::new(),
        .                       print_stack: Vec::new(),
        .                       pending_indentation: 0,
        .                       last_printed: None,
        .                   }
      235 ( 0.00%)      }
        .           
        .               pub fn last_token(&self) -> Option<&Token> {
        .                   self.last_token_still_buffered().or_else(|| self.last_printed.as_ref())
        .               }
        .           
        .               pub fn last_token_still_buffered(&self) -> Option<&Token> {
        .                   self.buf.last().map(|last| &last.token)
        .               }
        .           
        .               /// Be very careful with this!
        .               pub fn replace_last_token_still_buffered(&mut self, token: Token) {
        .                   self.buf.last_mut().unwrap().token = token;
        .               }
        .           
        .               fn scan_eof(&mut self) {
      146 ( 0.00%)          if !self.scan_stack.is_empty() {
      102 ( 0.00%)              self.check_stack(0);
      102 ( 0.00%)              self.advance_left();
        .                   }
        .               }
        .           
        .               fn scan_begin(&mut self, token: BeginToken) {
  101,968 ( 0.00%)          if self.scan_stack.is_empty() {
      102 ( 0.00%)              self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   }
  407,872 ( 0.01%)          let right = self.buf.push(BufEntry { token: Token::Begin(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
        .               }
        .           
        .               fn scan_end(&mut self) {
  101,968 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_end();
        .                   } else {
        .                       let right = self.buf.push(BufEntry { token: Token::End, size: -1 });
        .                       self.scan_stack.push_back(right);
        .                   }
        .               }
        .           
        .               fn scan_break(&mut self, token: BreakToken) {
   30,673 ( 0.00%)          if self.scan_stack.is_empty() {
        2 ( 0.00%)              self.left_total = 1;
        .                       self.right_total = 1;
        .                       self.buf.clear();
        .                   } else {
   61,344 ( 0.00%)              self.check_stack(0);
        .                   }
  122,692 ( 0.00%)          let right = self.buf.push(BufEntry { token: Token::Break(token), size: -self.right_total });
        .                   self.scan_stack.push_back(right);
   92,019 ( 0.00%)          self.right_total += token.blank_space;
        .               }
        .           
1,194,633 ( 0.02%)      fn scan_string(&mut self, string: Cow<'static, str>) {
  132,737 ( 0.00%)          if self.scan_stack.is_empty() {
        .                       self.print_string(&string);
        .                   } else {
        .                       let len = string.len() as isize;
  132,642 ( 0.00%)              self.buf.push(BufEntry { token: Token::String(string), size: len });
  397,926 ( 0.01%)              self.right_total += len;
        .                       self.check_stream();
        .                   }
1,061,136 ( 0.02%)      }
        .           
        .               fn check_stream(&mut self) {
  585,008 ( 0.01%)          while self.right_total - self.left_total > self.space {
   32,667 ( 0.00%)              if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {
        .                           self.scan_stack.pop_front().unwrap();
    5,673 ( 0.00%)                  self.buf.first_mut().unwrap().size = SIZE_INFINITY;
        .                       }
   21,778 ( 0.00%)              self.advance_left();
   10,889 ( 0.00%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
        .               }
        .           
  553,231 ( 0.01%)      fn advance_left(&mut self) {
  756,278 ( 0.01%)          while self.buf.first().unwrap().size >= 0 {
1,101,753 ( 0.02%)              let left = self.buf.pop_first().unwrap();
        .           
        .                       match &left.token {
        .                           Token::String(string) => {
  397,926 ( 0.01%)                      self.left_total += string.len() as isize;
        .                               self.print_string(string);
        .                           }
        .                           Token::Break(token) => {
   92,019 ( 0.00%)                      self.left_total += token.blank_space;
        .                               self.print_break(*token, left.size);
        .                           }
      921 ( 0.00%)                  Token::Begin(token) => self.print_begin(*token, left.size),
        .                           Token::End => self.print_end(),
        .                       }
        .           
2,938,008 ( 0.05%)              self.last_printed = Some(left.token);
        .           
  367,251 ( 0.01%)              if self.buf.is_empty() {
        .                           break;
        .                       }
        .                   }
   87,520 ( 0.00%)      }
        .           
  276,507 ( 0.00%)      fn check_stack(&mut self, mut depth: usize) {
  484,763 ( 0.01%)          while let Some(&index) = self.scan_stack.back() {
        .                       let mut entry = &mut self.buf[index];
  973,785 ( 0.02%)              match entry.token {
        .                           Token::Begin(_) => {
  224,940 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                               self.scan_stack.pop_back().unwrap();
  304,983 ( 0.01%)                      entry.size += self.right_total;
  101,661 ( 0.00%)                      depth -= 1;
        .                           }
        .                           Token::End => {
        .                               // paper says + not =, but that makes no sense.
        .                               self.scan_stack.pop_back().unwrap();
  101,965 ( 0.00%)                      entry.size = 1;
  203,930 ( 0.00%)                      depth += 1;
        .                           }
        .                           _ => {
        .                               self.scan_stack.pop_back().unwrap();
   75,930 ( 0.00%)                      entry.size += self.right_total;
   65,261 ( 0.00%)                      if depth == 0 {
        .                                   break;
        .                               }
        .                           }
        .                       }
        .                   }
  245,784 ( 0.00%)      }
        .           
        .               fn get_top(&self) -> PrintFrame {
   92,019 ( 0.00%)          *self
        .                       .print_stack
        .                       .last()
        .                       .unwrap_or(&PrintFrame::Broken { offset: 0, breaks: Breaks::Inconsistent })
        .               }
        .           
        .               fn print_begin(&mut self, token: BeginToken, size: isize) {
  305,904 ( 0.01%)          if size > self.space {
    1,535 ( 0.00%)              let col = self.margin - self.space + token.offset;
        .                       self.print_stack.push(PrintFrame::Broken { offset: col, breaks: token.breaks });
        .                   } else {
        .                       self.print_stack.push(PrintFrame::Fits);
        .                   }
        .               }
        .           
        .               fn print_end(&mut self) {
        .                   self.print_stack.pop().unwrap();
        .               }
        .           
        .               fn print_break(&mut self, token: BreakToken, size: isize) {
        .                   let break_offset =
  100,326 ( 0.00%)              match self.get_top() {
        .                           PrintFrame::Fits => None,
        .                           PrintFrame::Broken { offset, breaks: Breaks::Consistent } => Some(offset),
        .                           PrintFrame::Broken { offset, breaks: Breaks::Inconsistent } => {
        .                               if size > self.space { Some(offset) } else { None }
        .                           }
        .                       };
        .                   if let Some(offset) = break_offset {
        .                       self.out.push('\n');
   16,089 ( 0.00%)              self.pending_indentation = offset + token.offset;
   21,452 ( 0.00%)              self.space = self.margin - (offset + token.offset);
        .                   } else {
   75,930 ( 0.00%)              self.pending_indentation += token.blank_space;
  101,240 ( 0.00%)              self.space -= token.blank_space;
        .                   }
        .               }
        .           
        .               fn print_string(&mut self, string: &str) {
        .                   // Write the pending indent. A more concise way of doing this would be:
        .                   //
        .                   //   write!(self.out, "{: >n$}", "", n = self.pending_indentation as usize)?;
        .                   //
        .                   // But that is significantly slower. This code is sufficiently hot, and indents can get
        .                   // sufficiently large, that the difference is significant on some workloads.
  132,737 ( 0.00%)          self.out.reserve(self.pending_indentation as usize);
        8 ( 0.00%)          self.out.extend(iter::repeat(' ').take(self.pending_indentation as usize));
  132,737 ( 0.00%)          self.pending_indentation = 0;
        .           
        .                   self.out.push_str(string);
  663,590 ( 0.01%)          self.space -= string.len() as isize;
        .               }
        .           
        .               // Convenience functions to talk to the printer.
        .           
        .               /// "raw box"
  165,880 ( 0.00%)      pub fn rbox(&mut self, indent: usize, breaks: Breaks) {
        .                   self.scan_begin(BeginToken { offset: indent as isize, breaks })
  124,410 ( 0.00%)      }
        .           
        .               /// Inconsistent breaking box
  487,398 ( 0.01%)      pub fn ibox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Inconsistent)
  406,165 ( 0.01%)      }
        .           
        .               /// Consistent breaking box
        .               pub fn cbox(&mut self, indent: usize) {
        .                   self.rbox(indent, Breaks::Consistent)
        .               }
        .           
  245,384 ( 0.00%)      pub fn break_offset(&mut self, n: usize, off: isize) {
        .                   self.scan_break(BreakToken { offset: off, blank_space: n as isize })
  184,038 ( 0.00%)      }
        .           
  407,872 ( 0.01%)      pub fn end(&mut self) {
        .                   self.scan_end()
  407,872 ( 0.01%)      }
        .           
      730 ( 0.00%)      pub fn eof(mut self) -> String {
        .                   self.scan_eof();
      584 ( 0.00%)          self.out
      730 ( 0.00%)      }
        .           
        .               pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) {
        .                   let string = wrd.into();
  947,332 ( 0.02%)          self.scan_string(string)
        .               }
        .           
        .               fn spaces(&mut self, n: usize) {
  122,692 ( 0.00%)          self.break_offset(n, 0)
        .               }
        .           
        .               crate fn zerobreak(&mut self) {
        .                   self.spaces(0)
        .               }
        .           
        .               pub fn space(&mut self) {
        .                   self.spaces(1)
        .               }
        .           
        .               pub fn hardbreak(&mut self) {
        .                   self.spaces(SIZE_INFINITY as usize)
        .               }
        .           
        .               pub fn is_beginning_of_line(&self) -> bool {
   61,338 ( 0.00%)          match self.last_token() {
        .                       Some(last_token) => last_token.is_hardbreak_tok(),
        .                       None => true,
        .                   }
        .               }
        .           
        .               pub fn hardbreak_tok_offset(off: isize) -> Token {
        .                   Token::Break(BreakToken { offset: off, blank_space: SIZE_INFINITY })
        .               }
-- line 481 ----------------------------------------

2,081,165 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 57 ----------------------------------------
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
       192 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
        96 ( 0.00%)              from_str_radix(src, radix)
       288 ( 0.00%)          }
         .           
         .                   /// Returns the number of ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
         .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[doc(alias = "popcount")]
         .                   #[doc(alias = "popcnt")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn count_ones(self) -> u32 {
   453,855 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of zeros in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
         .                   /// assert_eq!(n.leading_zeros(), 2);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn leading_zeros(self) -> u32 {
   613,141 ( 0.01%)              intrinsics::ctlz(self as $ActualT) as u32
         .                   }
         .           
         .                   /// Returns the number of trailing zeros in the binary representation
         .                   /// of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
         .                   /// assert_eq!(n.trailing_zeros(), 3);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn trailing_zeros(self) -> u32 {
 1,467,676 ( 0.02%)              intrinsics::cttz(self) as u32
         .                   }
         .           
         .                   /// Returns the number of leading ones in the binary representation of `self`.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
         .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn rotate_left(self, n: u32) -> Self {
16,595,436 ( 0.28%)              intrinsics::rotate_left(self, n as $SelfT)
         .                   }
         .           
         .                   /// Shifts the bits to the right by a specified amount, `n`,
         .                   /// wrapping the truncated bits to the beginning of the resulting
         .                   /// integer.
         .                   ///
         .                   /// Please note this isn't the same operation as the `>>` shifting operator!
         .                   ///
-- line 220 ----------------------------------------
-- line 430 ----------------------------------------
         .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_add(self, rhs: Self) -> Option<Self> {
         4 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
         .                       if unlikely!(b) {None} else {Some(a)}
         .                   }
         .           
         .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
         .                   /// cannot occur.
         .                   ///
         .                   /// # Safety
         .                   ///
-- line 446 ----------------------------------------
-- line 456 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_add`.
 1,666,266 ( 0.03%)              unsafe { intrinsics::unchecked_add(self, rhs) }
         .                   }
         .           
         .                   /// Checked addition with a signed integer. Computes `self + rhs`,
         .                   /// returning `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
         .                   )]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
         .                   #[inline(always)]
         .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
         .                       // SAFETY: the caller must uphold the safety contract for
         .                       // `unchecked_sub`.
   136,612 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
         .                   }
         .           
         .                   /// Checked integer multiplication. Computes `self * rhs`, returning
         .                   /// `None` if overflow occurred.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 596 ----------------------------------------
         .                                 without modifying the original"]
         .                   #[inline]
         .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
         .                       if unlikely!(rhs == 0) {
         .                           None
         .                       } else {
         .                           // SAFETY: div by zero has been checked above and unsigned types have no other
         .                           // failure modes for division
     1,360 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
         .                       }
         .                   }
         .           
         .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
         .                   /// if `rhs == 0`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_add(self, rhs: Self) -> Self {
   355,919 ( 0.01%)              intrinsics::saturating_add(self, rhs)
         .                   }
         .           
         .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1051 ----------------------------------------
-- line 1084 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
         .                   #[inline(always)]
         .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
   777,821 ( 0.01%)              intrinsics::saturating_sub(self, rhs)
         .                   }
         .           
         .                   /// Saturating integer multiplication. Computes `self * rhs`,
         .                   /// saturating at the numeric bounds instead of overflowing.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
10,343,156 ( 0.17%)              intrinsics::wrapping_add(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) addition with a signed integer. Computes
         .                   /// `self + rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
 5,900,824 ( 0.10%)              intrinsics::wrapping_sub(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) multiplication. Computes `self *
         .                   /// rhs`, wrapping around at the boundary of the type.
         .                   ///
         .                   /// # Examples
         .                   ///
         .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
         .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
12,548,264 ( 0.21%)              intrinsics::wrapping_mul(self, rhs)
         .                   }
         .           
         .                   /// Wrapping (modular) division. Computes `self / rhs`.
         .                   /// Wrapped division on unsigned types is just normal division.
         .                   /// There's no way wrapping could ever happen.
         .                   /// This function exists, so that all operations
         .                   /// are accounted for in the wrapping operations.
         .                   ///
-- line 1256 ----------------------------------------
-- line 1491 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
         .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
        12 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
 4,334,479 ( 0.07%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
        24 ( 0.00%)          }
         .           
         .                   /// Calculates `self + rhs + carry` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
         .                   /// additional bit of overflow. This allows for chaining together multiple additions
         .                   /// to create "big integers" which represent larger values.
         .                   ///
         .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1588 ----------------------------------------
         .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline(always)]
         .                   pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
   456,625 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         .                   }
         .           
         .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
         .                   ///
         .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
         .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
         .                   /// to create "big integers" which represent larger values.
-- line 1604 ----------------------------------------
-- line 1673 ----------------------------------------
         .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
         .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
         .                   /// ```
         .                   #[stable(feature = "wrapping", since = "1.7.0")]
         .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                     without modifying the original"]
         .                   #[inline(always)]
         2 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
 2,689,517 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
         .                       (a as Self, b)
         1 ( 0.00%)          }
         .           
         .                   /// Calculates the divisor when `self` is divided by `rhs`.
         .                   ///
         .                   /// Returns a tuple of the divisor along with a boolean indicating
         .                   /// whether an arithmetic overflow would occur. Note that for unsigned
         .                   /// integers overflow never occurs, so the second value is always
         .                   /// `false`.
         .                   ///
-- line 1692 ----------------------------------------
-- line 2132 ----------------------------------------
         .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
         .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
         .                   /// ```
         .                   #[must_use]
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
         .                   #[inline(always)]
         .                   pub const fn is_power_of_two(self) -> bool {
       150 ( 0.00%)              self.count_ones() == 1
         .                   }
         .           
         .                   // Returns one less than next power of two.
         .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
         .                   //
         .                   // 8u8.one_less_than_next_power_of_two() == 7
         .                   // 6u8.one_less_than_next_power_of_two() == 7
         .                   //
         .                   // This method cannot overflow, as in the `next_power_of_two`
         .                   // overflow cases it instead ends up returning the maximum value
         .                   // of the type, and can return 0 for 0.
         .                   #[inline]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   const fn one_less_than_next_power_of_two(self) -> Self {
     4,860 ( 0.00%)              if self <= 1 { return 0; }
         .           
     9,861 ( 0.00%)              let p = self - 1;
         .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
         .                       // That means the shift is always in-bounds, and some processors
         .                       // (such as intel pre-haswell) have more efficient ctlz
         .                       // intrinsics when the argument is non-zero.
    29,448 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
     9,908 ( 0.00%)              <$SelfT>::MAX >> z
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `self`.
         .                   ///
         .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
         .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
         .                   /// release mode (the only situation in which method can return 0).
         .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
         .                   /// ```
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
         .                   #[must_use = "this returns the result of the operation, \
         .                                 without modifying the original"]
         .                   #[inline]
         .                   #[rustc_inherit_overflow_checks]
         .                   pub const fn next_power_of_two(self) -> Self {
    14,820 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
         .                   }
         .           
         .                   /// Returns the smallest power of two greater than or equal to `n`. If
         .                   /// the next power of two is greater than the type's maximum value,
         .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
         .                   ///
         .                   /// # Examples
         .                   ///
-- line 2195 ----------------------------------------

   103,619 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 126 ----------------------------------------
        .                           self.extend(remainder.iter().cloned());
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for VecDeque<T, A> {
    2,282 ( 0.00%)      fn drop(&mut self) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 142 ----------------------------------------
-- line 146 ----------------------------------------
        .           
        .                   let (front, back) = self.as_mut_slices();
        .                   unsafe {
        .                       let _back_dropper = Dropper(back);
        .                       // use drop for [T]
        .                       ptr::drop_in_place(front);
        .                   }
        .                   // RawVec handles deallocation
    2,608 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> Default for VecDeque<T> {
        .               /// Creates an empty `VecDeque<T>`.
        .               #[inline]
        .               fn default() -> VecDeque<T> {
        .                   VecDeque::new()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Marginally more convenient
        .               #[inline]
        .               fn ptr(&self) -> *mut T {
  735,402 ( 0.01%)          self.buf.ptr()
        .               }
        .           
        .               /// Marginally more convenient
        .               #[inline]
        .               fn cap(&self) -> usize {
        .                   if mem::size_of::<T>() == 0 {
        .                       // For zero sized types, we are always at maximum capacity
        .                       MAXIMUM_ZST_CAPACITY
        .                   } else {
  782,676 ( 0.01%)              self.buf.capacity()
        .                   }
        .               }
        .           
        .               /// Turn ptr into a slice
        .               #[inline]
        .               unsafe fn buffer_as_slice(&self) -> &[T] {
        .                   unsafe { slice::from_raw_parts(self.ptr(), self.cap()) }
        .               }
-- line 188 ----------------------------------------
-- line 191 ----------------------------------------
        .               #[inline]
        .               unsafe fn buffer_as_mut_slice(&mut self) -> &mut [T] {
        .                   unsafe { slice::from_raw_parts_mut(self.ptr(), self.cap()) }
        .               }
        .           
        .               /// Moves an element out of the buffer
        .               #[inline]
        .               unsafe fn buffer_read(&mut self, off: usize) -> T {
  263,972 ( 0.00%)          unsafe { ptr::read(self.ptr().add(off)) }
        .               }
        .           
        .               /// Writes an element into the buffer, moving it.
        .               #[inline]
        .               unsafe fn buffer_write(&mut self, off: usize, value: T) {
        .                   unsafe {
        .                       ptr::write(self.ptr().add(off), value);
        .                   }
        .               }
        .           
        .               /// Returns `true` if the buffer is at full capacity.
        .               #[inline]
        .               fn is_full(&self) -> bool {
2,080,491 ( 0.03%)          self.cap() - self.len() == 1
        .               }
        .           
        .               /// Returns the index in the underlying buffer for a given logical element
        .               /// index.
        .               #[inline]
        .               fn wrap_index(&self, idx: usize) -> usize {
        .                   wrap_index(idx, self.cap())
        .               }
-- line 221 ----------------------------------------
-- line 452 ----------------------------------------
        .                   //   [o o . o o o o o ]
        .                   //          T             H
        .                   // B [. . . o o o o o o o . . . . . . ]
        .                   //              H T
        .                   //   [o o o o o . o o ]
        .                   //              H                 T
        .                   // C [o o o o o . . . . . . . . . o o ]
        .           
      312 ( 0.00%)          if self.tail <= self.head {
        .                       // A
        .                       // Nop
       10 ( 0.00%)          } else if self.head < old_capacity - self.tail {
        .                       // B
        .                       unsafe {
        .                           self.copy_nonoverlapping(old_capacity, 0, self.head);
        .                       }
        4 ( 0.00%)              self.head += old_capacity;
        .                       debug_assert!(self.head > self.tail);
        .                   } else {
        .                       // C
        2 ( 0.00%)              let new_tail = new_capacity - (old_capacity - self.tail);
        .                       unsafe {
        .                           self.copy_nonoverlapping(new_tail, self.tail, old_capacity - self.tail);
        .                       }
        1 ( 0.00%)              self.tail = new_tail;
        .                       debug_assert!(self.head < self.tail);
        .                   }
        .                   debug_assert!(self.head < self.cap());
        .                   debug_assert!(self.tail < self.cap());
        .                   debug_assert!(self.cap().count_ones() == 1);
        .               }
        .           }
        .           
-- line 484 ----------------------------------------
-- line 507 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
        .               pub fn with_capacity(capacity: usize) -> VecDeque<T> {
    1,574 ( 0.00%)          Self::with_capacity_in(capacity, Global)
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> VecDeque<T, A> {
        .               /// Creates an empty `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 523 ----------------------------------------
-- line 524 ----------------------------------------
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::new();
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               pub fn new_in(alloc: A) -> VecDeque<T, A> {
      360 ( 0.00%)          VecDeque::with_capacity_in(INITIAL_CAPACITY, alloc)
        .               }
        .           
        .               /// Creates an empty `VecDeque` with space for at least `capacity` elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let vector: VecDeque<u32> = VecDeque::with_capacity(10);
        .               /// ```
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    3,868 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> VecDeque<T, A> {
    3,056 ( 0.00%)          assert!(capacity < 1_usize << usize::BITS - 1, "capacity overflow");
        .                   // +1 since the ringbuffer always leaves one space empty
        .                   let cap = cmp::max(capacity + 1, MINIMUM_CAPACITY + 1).next_power_of_two();
        .           
    5,384 ( 0.00%)          VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity_in(cap, alloc) }
    5,802 ( 0.00%)      }
        .           
        .               /// Provides a reference to the element at the given index.
        .               ///
        .               /// Element at index 0 is the front of the queue.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 559 ----------------------------------------
-- line 562 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(3);
        .               /// buf.push_back(4);
        .               /// buf.push_back(5);
        .               /// assert_eq!(buf.get(1), Some(&4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get(&self, index: usize) -> Option<&T> {
2,547,750 ( 0.04%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&*self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Provides a mutable reference to the element at the given index.
-- line 578 ----------------------------------------
-- line 591 ----------------------------------------
        .               /// if let Some(elem) = buf.get_mut(1) {
        .               ///     *elem = 7;
        .               /// }
        .               ///
        .               /// assert_eq!(buf[1], 7);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn get_mut(&mut self, index: usize) -> Option<&mut T> {
1,461,162 ( 0.02%)          if index < self.len() {
        .                       let idx = self.wrap_add(self.tail, index);
        .                       unsafe { Some(&mut *self.ptr().add(idx)) }
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               /// Swaps elements at indices `i` and `j`.
-- line 607 ----------------------------------------
-- line 924 ----------------------------------------
        .               /// buf.push_back(5);
        .               /// buf.push_back(10);
        .               /// buf.push_back(15);
        .               /// assert_eq!(buf, [5, 10, 15]);
        .               /// buf.truncate(1);
        .               /// assert_eq!(buf, [5]);
        .               /// ```
        .               #[stable(feature = "deque_extras", since = "1.16.0")]
      416 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   /// Runs the destructor for all items in the slice when it gets dropped (normally or
        .                   /// during unwinding).
        .                   struct Dropper<'a, T>(&'a mut [T]);
        .           
        .                   impl<'a, T> Drop for Dropper<'a, T> {
        .                       fn drop(&mut self) {
        .                           unsafe {
        .                               ptr::drop_in_place(self.0);
-- line 940 ----------------------------------------
-- line 945 ----------------------------------------
        .                   // Safe because:
        .                   //
        .                   // * Any slice passed to `drop_in_place` is valid; the second case has
        .                   //   `len <= front.len()` and returning on `len > self.len()` ensures
        .                   //   `begin <= back.len()` in the first case
        .                   // * The head of the VecDeque is moved before calling `drop_in_place`,
        .                   //   so no value is dropped twice if `drop_in_place` panics
        .                   unsafe {
      104 ( 0.00%)              if len > self.len() {
        .                           return;
        .                       }
        .                       let num_dropped = self.len() - len;
        .                       let (front, back) = self.as_mut_slices();
      104 ( 0.00%)              if len > front.len() {
        .                           let begin = len - front.len();
        .                           let drop_back = back.get_unchecked_mut(begin..) as *mut _;
        .                           self.head = self.wrap_sub(self.head, num_dropped);
        .                           ptr::drop_in_place(drop_back);
        .                       } else {
        .                           let drop_back = back as *mut _;
        .                           let drop_front = front.get_unchecked_mut(len..) as *mut _;
       52 ( 0.00%)                  self.head = self.wrap_sub(self.head, num_dropped);
        .           
        .                           // Make sure the second half is dropped even when a destructor
        .                           // in the first one panics.
        .                           let _back_dropper = Dropper(&mut *drop_back);
        .                           ptr::drop_in_place(drop_front);
        .                       }
        .                   }
      416 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
        .               pub fn allocator(&self) -> &A {
        .                   self.buf.allocator()
        .               }
        .           
-- line 982 ----------------------------------------
-- line 1085 ----------------------------------------
        .               /// vector.as_mut_slices().0[0] = 42;
        .               /// vector.as_mut_slices().1[0] = 24;
        .               /// assert_eq!(vector.as_slices(), (&[42, 10][..], &[24, 1][..]));
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "deque_extras_15", since = "1.5.0")]
        .               pub fn as_mut_slices(&mut self) -> (&mut [T], &mut [T]) {
        .                   unsafe {
    2,003 ( 0.00%)              let head = self.head;
    2,003 ( 0.00%)              let tail = self.tail;
    2,333 ( 0.00%)              let buf = self.buffer_as_mut_slice();
        .                       RingSlices::ring_slices(buf, head, tail)
        .                   }
        .               }
        .           
        .               /// Returns the number of elements in the `VecDeque`.
        .               ///
        .               /// # Examples
        .               ///
-- line 1103 ----------------------------------------
-- line 1106 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert_eq!(v.len(), 0);
        .               /// v.push_back(1);
        .               /// assert_eq!(v.len(), 1);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn len(&self) -> usize {
1,196,317 ( 0.02%)          count(self.tail, self.head, self.cap())
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use std::collections::VecDeque;
-- line 1122 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///
        .               /// let mut v = VecDeque::new();
        .               /// assert!(v.is_empty());
        .               /// v.push_front(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn is_empty(&self) -> bool {
2,565,587 ( 0.04%)          self.tail == self.head
        .               }
        .           
        .               fn range_tail_head<R>(&self, range: R) -> (usize, usize)
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   let Range { start, end } = slice::range(range, ..self.len());
        .                   let tail = self.wrap_add(self.tail, start);
-- line 1139 ----------------------------------------
-- line 1307 ----------------------------------------
        .               /// let mut v = VecDeque::new();
        .               /// v.push_back(1);
        .               /// v.clear();
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn clear(&mut self) {
      105 ( 0.00%)          self.truncate(0);
        .               }
        .           
        .               /// Returns `true` if the `VecDeque` contains an element equal to the
        .               /// given value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1323 ----------------------------------------
-- line 1396 ----------------------------------------
        .               /// assert_eq!(d.back(), None);
        .               ///
        .               /// d.push_back(1);
        .               /// d.push_back(2);
        .               /// assert_eq!(d.back(), Some(&2));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn back(&self) -> Option<&T> {
   30,723 ( 0.00%)          self.get(self.len().wrapping_sub(1))
        .               }
        .           
        .               /// Provides a mutable reference to the back element, or `None` if the
        .               /// `VecDeque` is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1412 ----------------------------------------
-- line 1441 ----------------------------------------
        .               /// d.push_back(2);
        .               ///
        .               /// assert_eq!(d.pop_front(), Some(1));
        .               /// assert_eq!(d.pop_front(), Some(2));
        .               /// assert_eq!(d.pop_front(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_front(&mut self) -> Option<T> {
  559,700 ( 0.01%)          if self.is_empty() {
        .                       None
        .                   } else {
        .                       let tail = self.tail;
  923,793 ( 0.02%)              self.tail = self.wrap_add(self.tail, 1);
   91,653 ( 0.00%)              unsafe { Some(self.buffer_read(tail)) }
        .                   }
        .               }
        .           
        .               /// Removes the last element from the `VecDeque` and returns it, or `None` if
        .               /// it is empty.
        .               ///
        .               /// # Examples
        .               ///
-- line 1462 ----------------------------------------
-- line 1466 ----------------------------------------
        .               /// let mut buf = VecDeque::new();
        .               /// assert_eq!(buf.pop_back(), None);
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(buf.pop_back(), Some(3));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop_back(&mut self) -> Option<T> {
  228,936 ( 0.00%)          if self.is_empty() {
        .                       None
        .                   } else {
  355,907 ( 0.01%)              self.head = self.wrap_sub(self.head, 1);
        .                       let head = self.head;
        .                       unsafe { Some(self.buffer_read(head)) }
        .                   }
        .               }
        .           
        .               /// Prepends an element to the `VecDeque`.
        .               ///
        .               /// # Examples
-- line 1485 ----------------------------------------
-- line 1513 ----------------------------------------
        .               /// use std::collections::VecDeque;
        .               ///
        .               /// let mut buf = VecDeque::new();
        .               /// buf.push_back(1);
        .               /// buf.push_back(3);
        .               /// assert_eq!(3, *buf.back().unwrap());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
1,469,004 ( 0.02%)      pub fn push_back(&mut self, value: T) {
2,080,491 ( 0.03%)          if self.is_full() {
      134 ( 0.00%)              self.grow();
        .                   }
        .           
       78 ( 0.00%)          let head = self.head;
  693,575 ( 0.01%)          self.head = self.wrap_add(self.head, 1);
  326,246 ( 0.01%)          unsafe { self.buffer_write(head, value) }
1,469,004 ( 0.02%)      }
        .           
        .               #[inline]
        .               fn is_contiguous(&self) -> bool {
        .                   // FIXME: Should we consider `head == 0` to mean
        .                   // that `self` is contiguous?
        .                   self.tail <= self.head
        .               }
        .           
-- line 1537 ----------------------------------------
-- line 2209 ----------------------------------------
        .                       self.truncate(idx);
        .                   }
        .               }
        .           
        .               // Double the buffer size. This method is inline(never), so we expect it to only
        .               // be called in cold paths.
        .               // This may panic or abort
        .               #[inline(never)]
      468 ( 0.00%)      fn grow(&mut self) {
        .                   // Extend or possibly remove this assertion when valid use-cases for growing the
        .                   // buffer without it being full emerge
        .                   debug_assert!(self.is_full());
        .                   let old_cap = self.cap();
      234 ( 0.00%)          self.buf.reserve_exact(old_cap, old_cap);
      390 ( 0.00%)          assert!(self.cap() == old_cap * 2);
        .                   unsafe {
        .                       self.handle_capacity_increase(old_cap);
        .                   }
        .                   debug_assert!(!self.is_full());
      468 ( 0.00%)      }
        .           
        .               /// Modifies the `VecDeque` in-place so that `len()` is equal to `new_len`,
        .               /// either by removing excess elements from the back or by appending
        .               /// elements generated by calling `generator` to the back.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 2236 ----------------------------------------
-- line 2751 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Returns the index in the underlying buffer for a given logical element index.
        .           #[inline]
        .           fn wrap_index(index: usize, size: usize) -> usize {
        .               // size is always a power of 2
        .               debug_assert!(size.is_power_of_two());
3,692,707 ( 0.06%)      index & (size - 1)
        .           }
        .           
        .           /// Calculate the number of elements left to be read in the buffer
        .           #[inline]
        .           fn count(tail: usize, head: usize, size: usize) -> usize {
        .               // size is always a power of 2
5,543,430 ( 0.09%)      (head.wrapping_sub(tail)) & (size - 1)
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: PartialEq, A: Allocator> PartialEq for VecDeque<T, A> {
        .               fn eq(&self, other: &Self) -> bool {
        .                   if self.len() != other.len() {
        .                       return false;
        .                   }
-- line 2774 ----------------------------------------
-- line 2902 ----------------------------------------
        .           
        .               fn into_iter(self) -> IterMut<'a, T> {
        .                   self.iter_mut()
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for VecDeque<T, A> {
      112 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iter.into_iter() {
        .                   //          self.push_back(item);
        .                   //      }
        .                   let mut iter = iter.into_iter();
        .                   while let Some(element) = iter.next() {
      283 ( 0.00%)              if self.len() == self.capacity() {
        .                           let (lower, _) = iter.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .           
        .                       let head = self.head;
       63 ( 0.00%)              self.head = self.wrap_add(self.head, 1);
        .                       unsafe {
        8 ( 0.00%)                  self.buffer_write(head, element);
        .                       }
        .                   }
      128 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, elem: T) {
        .                   self.push_back(elem);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2937 ----------------------------------------

  645,425 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/collections/vec_deque/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs
--------------------------------------------------------------------------------
Ir                 

-- line 23 ----------------------------------------
        .           pub struct Preorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               worklist: Vec<BasicBlock>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Preorder<'a, 'tcx> {
   32,090 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Preorder<'a, 'tcx> {
    3,209 ( 0.00%)          let worklist = vec![root];
        .           
    9,627 ( 0.00%)          Preorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
   12,836 ( 0.00%)              worklist,
        .                       root_is_start_block: root == START_BLOCK,
        .                   }
   28,881 ( 0.00%)      }
        .           }
        .           
    3,972 ( 0.00%)  pub fn preorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Preorder<'a, 'tcx> {
   11,310 ( 0.00%)      Preorder::new(body, START_BLOCK)
    5,958 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
1,393,975 ( 0.02%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  181,337 ( 0.00%)          while let Some(idx) = self.worklist.pop() {
  181,337 ( 0.00%)              if !self.visited.insert(idx) {
        .                           continue;
        .                       }
        .           
  123,516 ( 0.00%)              let data = &self.body[idx];
        .           
  617,580 ( 0.01%)              if let Some(ref term) = data.terminator {
        .                           self.worklist.extend(term.successors());
        .                       }
        .           
        .                       return Some((idx, data));
        .                   }
        .           
        .                   None
1,140,525 ( 0.02%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
        .                   let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
        .                   let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
-- line 74 ----------------------------------------
-- line 101 ----------------------------------------
        .           pub struct Postorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               visited: BitSet<BasicBlock>,
        .               visit_stack: Vec<(BasicBlock, Successors<'a>)>,
        .               root_is_start_block: bool,
        .           }
        .           
        .           impl<'a, 'tcx> Postorder<'a, 'tcx> {
   27,650 ( 0.00%)      pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> Postorder<'a, 'tcx> {
        .                   let mut po = Postorder {
        .                       body,
        .                       visited: BitSet::new_empty(body.basic_blocks().len()),
        .                       visit_stack: Vec::new(),
        .                       root_is_start_block: root == START_BLOCK,
        .                   };
        .           
        .                   let data = &po.body[root];
        .           
   27,650 ( 0.00%)          if let Some(ref term) = data.terminator {
        .                       po.visited.insert(root);
   15,800 ( 0.00%)              po.visit_stack.push((root, term.successors()));
    7,900 ( 0.00%)              po.traverse_successor();
        .                   }
        .           
        .                   po
   35,550 ( 0.00%)      }
        .           
1,054,900 ( 0.02%)      fn traverse_successor(&mut self) {
        .                   // This is quite a complex loop due to 1. the borrow checker not liking it much
        .                   // and 2. what exactly is going on is not clear
        .                   //
        .                   // It does the actual traversal of the graph, while the `next` method on the iterator
        .                   // just pops off of the stack. `visit_stack` is a stack containing pairs of nodes and
        .                   // iterators over the successors of those nodes. Each iteration attempts to get the next
        .                   // node from the top of the stack, then pushes that node and an iterator over the
        .                   // successors to the top of the stack. This loop only grows `visit_stack`, stopping when
-- line 136 ----------------------------------------
-- line 169 ----------------------------------------
        .                   //
        .                   // Now that the top of the stack has no successors we can traverse, each item will
        .                   // be popped off during iteration until we get back to `A`. This yields [E, D, B].
        .                   //
        .                   // When we yield `B` and call `traverse_successor`, we push `C` to the stack, but
        .                   // since we've already visited `E`, that child isn't added to the stack. The last
        .                   // two iterations yield `C` and finally `A` for a final traversal of [E, D, B, C, A]
        .                   loop {
1,139,528 ( 0.02%)              let bb = if let Some(&mut (_, ref mut iter)) = self.visit_stack.last_mut() {
  695,328 ( 0.01%)                  if let Some(&bb) = iter.next() {
        .                               bb
        .                           } else {
        .                               break;
        .                           }
        .                       } else {
        .                           break;
        .                       };
        .           
  231,776 ( 0.00%)              if self.visited.insert(bb) {
  999,600 ( 0.02%)                  if let Some(term) = &self.body[bb].terminator {
  571,200 ( 0.01%)                      self.visit_stack.push((bb, term.successors()));
        .                           }
        .                       }
        .                   }
1,205,600 ( 0.02%)      }
        .           }
        .           
      612 ( 0.00%)  pub fn postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> Postorder<'a, 'tcx> {
      612 ( 0.00%)      Postorder::new(body, START_BLOCK)
      918 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for Postorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
   38,562 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
        .                   let next = self.visit_stack.pop();
  146,750 ( 0.00%)          if next.is_some() {
  289,856 ( 0.00%)              self.traverse_successor();
        .                   }
        .           
  146,750 ( 0.00%)          next.map(|(bb, _)| (bb, &self.body[bb]))
   64,270 ( 0.00%)      }
        .           
    2,550 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        .                   // All the blocks, minus the number of blocks we've visited.
   13,028 ( 0.00%)          let upper = self.body.basic_blocks().len() - self.visited.count();
        .           
   13,028 ( 0.00%)          let lower = if self.root_is_start_block {
        .                       // We will visit all remaining blocks exactly once.
        .                       upper
        .                   } else {
        .                       self.visit_stack.len()
        .                   };
        .           
    1,530 ( 0.00%)          (lower, Some(upper))
    3,570 ( 0.00%)      }
        .           }
        .           
        .           /// Reverse postorder traversal of a graph
        .           ///
        .           /// Reverse postorder is the reverse order of a postorder traversal.
        .           /// This is different to a preorder traversal and represents a natural
        .           /// linearization of control-flow.
        .           ///
-- line 232 ----------------------------------------
-- line 253 ----------------------------------------
        .           pub struct ReversePostorder<'a, 'tcx> {
        .               body: &'a Body<'tcx>,
        .               blocks: Vec<BasicBlock>,
        .               idx: usize,
        .           }
        .           
        .           impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {
        .               pub fn new(body: &'a Body<'tcx>, root: BasicBlock) -> ReversePostorder<'a, 'tcx> {
    7,288 ( 0.00%)          let blocks: Vec<_> = Postorder::new(body, root).map(|(bb, _)| bb).collect();
        .           
    3,644 ( 0.00%)          let len = blocks.len();
        .           
   18,220 ( 0.00%)          ReversePostorder { body, blocks, idx: len }
        .               }
        .           }
        .           
   21,864 ( 0.00%)  pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {
        .               ReversePostorder::new(body, START_BLOCK)
   18,220 ( 0.00%)  }
        .           
        .           impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {
        .               type Item = (BasicBlock, &'a BasicBlockData<'tcx>);
        .           
  137,846 ( 0.00%)      fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {
  551,384 ( 0.01%)          if self.idx == 0 {
        .                       return None;
        .                   }
  268,404 ( 0.00%)          self.idx -= 1;
        .           
        .                   self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))
  275,692 ( 0.00%)      }
        .           
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (self.idx, Some(self.idx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> ExactSizeIterator for ReversePostorder<'a, 'tcx> {}
        .           
-- line 291 ----------------------------------------
-- line 295 ----------------------------------------
        .           /// This is clearer than writing `preorder` in cases where the order doesn't matter.
        .           pub fn reachable<'a, 'tcx>(
        .               body: &'a Body<'tcx>,
        .           ) -> impl 'a + Iterator<Item = (BasicBlock, &'a BasicBlockData<'tcx>)> {
        .               preorder(body)
        .           }
        .           
        .           /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.
    7,338 ( 0.00%)  pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {
        .               let mut iter = preorder(body);
        .               (&mut iter).for_each(drop);
    4,892 ( 0.00%)      iter.visited
    7,338 ( 0.00%)  }

1,457,592 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/traversal.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           };
        .           use rustc_ast_pretty::pprust::token_to_string;
        .           use rustc_data_structures::fx::FxHashMap;
        .           use rustc_errors::PResult;
        .           use rustc_span::Span;
        .           
        .           impl<'a> StringReader<'a> {
        .               pub(super) fn into_token_trees(self) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
       38 ( 0.00%)          let mut tt_reader = TokenTreesReader {
        .                       string_reader: self,
        2 ( 0.00%)              token: Token::dummy(),
        .                       open_braces: Vec::new(),
        .                       unmatched_braces: Vec::new(),
        .                       matching_delim_spans: Vec::new(),
        .                       last_unclosed_found_span: None,
        .                       last_delim_empty_block_spans: FxHashMap::default(),
        .                       matching_block_spans: Vec::new(),
        .                   };
        2 ( 0.00%)          let res = tt_reader.parse_all_token_trees();
       12 ( 0.00%)          (res, tt_reader.unmatched_braces)
        .               }
        .           }
        .           
        .           struct TokenTreesReader<'a> {
        .               string_reader: StringReader<'a>,
        .               token: Token,
        .               /// Stack of open delimiters and their spans. Used for error message.
        .               open_braces: Vec<(token::DelimToken, Span)>,
-- line 35 ----------------------------------------
-- line 43 ----------------------------------------
        .               last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>,
        .               /// Collect the spans of braces (Open, Close). Used only
        .               /// for detecting if blocks are empty and only braces.
        .               matching_block_spans: Vec<(Span, Span)>,
        .           }
        .           
        .           impl<'a> TokenTreesReader<'a> {
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to an `Eof`.
       16 ( 0.00%)      fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {
        .                   let mut buf = TokenStreamBuilder::default();
        .           
        .                   self.bump();
    1,264 ( 0.00%)          while self.token != token::Eof {
    5,040 ( 0.00%)              buf.push(self.parse_token_tree()?);
        .                   }
        .           
        .                   Ok(buf.into_token_stream())
       18 ( 0.00%)      }
        .           
        .               // Parse a stream of tokens into a list of `TokenTree`s, up to a `CloseDelim`.
        .               fn parse_token_trees_until_close_delim(&mut self) -> TokenStream {
        .                   let mut buf = TokenStreamBuilder::default();
        .                   loop {
  297,126 ( 0.00%)              if let token::CloseDelim(..) = self.token.kind {
        .                           return buf.into_token_stream();
        .                       }
        .           
  635,100 ( 0.01%)              match self.parse_token_tree() {
1,143,180 ( 0.02%)                  Ok(tree) => buf.push(tree),
        .                           Err(mut e) => {
        .                               e.emit();
        .                               return buf.into_token_stream();
        .                           }
        .                       }
        .                   }
        .               }
        .           
1,148,850 ( 0.02%)      fn parse_token_tree(&mut self) -> PResult<'a, TreeAndSpacing> {
  255,300 ( 0.00%)          let sm = self.string_reader.sess.source_map();
        .           
1,062,678 ( 0.02%)          match self.token.kind {
        .                       token::Eof => {
        .                           let msg = "this file contains an unclosed delimiter";
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, msg);
        .                           for &(_, sp) in &self.open_braces {
        .                               err.span_label(sp, "unclosed delimiter");
        .                               self.unmatched_braces.push(UnmatchedBrace {
        .                                   expected_delim: token::DelimToken::Brace,
-- line 91 ----------------------------------------
-- line 113 ----------------------------------------
        .                                   err.span_label(
        .                                       *close_sp,
        .                                       "...as it matches this but it has different indentation",
        .                                   );
        .                               }
        .                           }
        .                           Err(err)
        .                       }
   21,543 ( 0.00%)              token::OpenDelim(delim) => {
        .                           // The span for beginning of the delimited section
   21,543 ( 0.00%)                  let pre_span = self.token.span;
        .           
        .                           // Parse the open delimiter.
  150,801 ( 0.00%)                  self.open_braces.push((delim, self.token.span));
        .                           self.bump();
        .           
        .                           // Parse the token trees within the delimiters.
        .                           // We stop at any delimiter so we can try to recover if the user
        .                           // uses an incorrect delimiter.
   21,543 ( 0.00%)                  let tts = self.parse_token_trees_until_close_delim();
        .           
        .                           // Expand to cover the entire delimited token tree
  107,715 ( 0.00%)                  let delim_span = DelimSpan::from_pair(pre_span, self.token.span);
        .           
   43,086 ( 0.00%)                  match self.token.kind {
        .                               // Correct delimiter.
   43,086 ( 0.00%)                      token::CloseDelim(d) if d == delim => {
        .                                   let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();
   43,086 ( 0.00%)                          let close_brace_span = self.token.span;
        .           
   64,629 ( 0.00%)                          if tts.is_empty() {
      426 ( 0.00%)                              let empty_block_span = open_brace_span.to(close_brace_span);
      568 ( 0.00%)                              if !sm.is_multiline(empty_block_span) {
        .                                           // Only track if the block is in the form of `{}`, otherwise it is
        .                                           // likely that it was written on purpose.
        .                                           self.last_delim_empty_block_spans.insert(delim, empty_block_span);
        .                                       }
        .                                   }
        .           
        .                                   //only add braces
   86,172 ( 0.00%)                          if let (DelimToken::Brace, DelimToken::Brace) = (open_brace, delim) {
        .                                       self.matching_block_spans.push((open_brace_span, close_brace_span));
        .                                   }
        .           
   21,543 ( 0.00%)                          if self.open_braces.is_empty() {
        .                                       // Clear up these spans to avoid suggesting them as we've found
        .                                       // properly matched delimiters so far for an entire block.
        .                                       self.matching_delim_spans.clear();
        .                                   } else {
        .                                       self.matching_delim_spans.push((
        .                                           open_brace,
        .                                           open_brace_span,
        .                                           close_brace_span,
-- line 165 ----------------------------------------
-- line 218 ----------------------------------------
        .                               token::Eof => {
        .                                   // Silently recover, the EOF token will be seen again
        .                                   // and an error emitted then. Thus we don't pop from
        .                                   // self.open_braces here.
        .                               }
        .                               _ => {}
        .                           }
        .           
  150,801 ( 0.00%)                  Ok(TokenTree::Delimited(delim_span, delim, tts).into())
        .                       }
        .                       token::CloseDelim(delim) => {
        .                           // An unexpected closing delimiter (i.e., there is no
        .                           // matching opening delimiter).
        .                           let token_str = token_to_string(&self.token);
        .                           let msg = format!("unexpected closing delimiter: `{}`", token_str);
        .                           let mut err =
        .                               self.string_reader.sess.span_diagnostic.struct_span_err(self.token.span, &msg);
-- line 234 ----------------------------------------
-- line 253 ----------------------------------------
        .                                   err.span_label(parent.1, "...matches this closing brace");
        .                               }
        .                           }
        .           
        .                           err.span_label(self.token.span, "unexpected closing delimiter");
        .                           Err(err)
        .                       }
        .                       _ => {
  530,535 ( 0.01%)                  let tt = TokenTree::Token(self.token.take());
        .                           let mut spacing = self.bump();
  212,214 ( 0.00%)                  if !self.token.is_op() {
        .                               spacing = Alone;
        .                           }
  636,642 ( 0.01%)                  Ok((tt, spacing))
        .                       }
        .                   }
1,021,200 ( 0.02%)      }
        .           
        .               fn bump(&mut self) -> Spacing {
1,235,034 ( 0.02%)          let (spacing, token) = self.string_reader.next_token();
  638,268 ( 0.01%)          self.token = token;
        .                   spacing
        .               }
        .           }
        .           
   21,543 ( 0.00%)  #[derive(Default)]
        .           struct TokenStreamBuilder {
        .               buf: Vec<TreeAndSpacing>,
        .           }
        .           
        .           impl TokenStreamBuilder {
1,659,450 ( 0.03%)      fn push(&mut self, (tree, joint): TreeAndSpacing) {
  801,417 ( 0.01%)          if let Some((TokenTree::Token(prev_token), Joint)) = self.buf.last() {
   82,672 ( 0.00%)              if let TokenTree::Token(token) = &tree {
  164,888 ( 0.00%)                  if let Some(glued) = prev_token.glue(token) {
        .                               self.buf.pop();
  122,640 ( 0.00%)                      self.buf.push((TokenTree::Token(glued), joint));
        .                               return;
        .                           }
        .                       }
        .                   }
  587,150 ( 0.01%)          self.buf.push((tree, joint))
1,021,200 ( 0.02%)      }
        .           
        .               fn into_token_stream(self) -> TokenStream {
  215,448 ( 0.00%)          TokenStream::new(self.buf)
        .               }
        .           }

  512,795 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/tokentrees.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/step.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           
        .           use super::{InterpCx, Machine};
        .           
        .           /// Classify whether an operator is "left-homogeneous", i.e., the LHS has the
        .           /// same type as the result.
        .           #[inline]
        .           fn binop_left_homogeneous(op: mir::BinOp) -> bool {
        .               use rustc_middle::mir::BinOp::*;
   60,344 ( 0.00%)      match op {
        .                   Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr | Offset | Shl | Shr => true,
        .                   Eq | Ne | Lt | Le | Gt | Ge => false,
        .               }
        .           }
        .           /// Classify whether an operator is "right-homogeneous", i.e., the RHS has the
        .           /// same type as the LHS.
        .           #[inline]
        .           fn binop_right_homogeneous(op: mir::BinOp) -> bool {
        .               use rustc_middle::mir::BinOp::*;
  180,660 ( 0.00%)      match op {
        .                   Add | Sub | Mul | Div | Rem | BitXor | BitAnd | BitOr | Eq | Ne | Lt | Le | Gt | Ge => true,
        .                   Offset | Shl | Shr => false,
        .               }
        .           }
        .           
        .           impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {
      861 ( 0.00%)      pub fn run(&mut self) -> InterpResult<'tcx> {
        .                   while self.step()? {}
        .                   Ok(())
    1,107 ( 0.00%)      }
        .           
        .               /// Returns `true` as long as there are more things to do.
        .               ///
        .               /// This is used by [priroda](https://github.com/oli-obk/priroda)
        .               ///
        .               /// This is marked `#inline(always)` to work around adverserial codegen when `opt-level = 3`
        .               #[inline(always)]
        .               pub fn step(&mut self) -> InterpResult<'tcx, bool> {
  474,296 ( 0.01%)          if self.stack().is_empty() {
        .                       return Ok(false);
        .                   }
        .           
1,422,888 ( 0.02%)          let loc = match self.frame().loc {
  474,296 ( 0.01%)              Ok(loc) => loc,
        .                       Err(_) => {
        .                           // We are unwinding and this fn has no cleanup code.
        .                           // Just go on unwinding.
        .                           trace!("unwinding: skipping frame");
        .                           self.pop_stack_frame(/* unwinding */ true)?;
        .                           return Ok(true);
        .                       }
        .                   };
        .                   let basic_block = &self.body().basic_blocks()[loc.block];
        .           
        .                   let old_frames = self.frame_idx();
        .           
  474,296 ( 0.01%)          if let Some(stmt) = basic_block.statements.get(loc.statement_index) {
        .                       assert_eq!(old_frames, self.frame_idx());
        .                       self.statement(stmt)?;
        .                       return Ok(true);
        .                   }
        .           
        .                   M::before_terminator(self)?;
        .           
        .                   let terminator = basic_block.terminator();
        .                   assert_eq!(old_frames, self.frame_idx());
        .                   self.terminator(terminator)?;
        .                   Ok(true)
        .               }
        .           
        .               /// Runs the interpretation logic for the given `mir::Statement` at the current frame and
        .               /// statement counter. This also moves the statement counter forward.
      968 ( 0.00%)      pub fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {
        .                   info!("{:?}", stmt);
        .           
        .                   use rustc_middle::mir::StatementKind::*;
        .           
        .                   // Some statements (e.g., box) push new stack frames.
        .                   // We have to record the stack frame number *before* executing the statement.
        .                   let frame_idx = self.frame_idx();
        .           
2,545,926 ( 0.04%)          match &stmt.kind {
  546,645 ( 0.01%)              Assign(box (place, rvalue)) => self.eval_rvalue_into_place(rvalue, *place)?,
        .           
        .                       SetDiscriminant { place, variant_index } => {
    1,078 ( 0.00%)                  let dest = self.eval_place(**place)?;
      616 ( 0.00%)                  self.write_discriminant(*variant_index, &dest)?;
        .                       }
        .           
        .                       // Mark locals as alive
        .                       StorageLive(local) => {
  241,948 ( 0.00%)                  self.storage_live(*local)?;
        .                       }
        .           
        .                       // Mark locals as dead
        .                       StorageDead(local) => {
  241,948 ( 0.00%)                  self.storage_dead(*local)?;
        .                       }
        .           
        .                       // No dynamic semantics attached to `FakeRead`; MIR
        .                       // interpreter is solely intended for borrowck'ed code.
        .                       FakeRead(..) => {}
        .           
        .                       // Stacked Borrows.
        .                       Retag(kind, place) => {
-- line 111 ----------------------------------------
-- line 137 ----------------------------------------
        .                       // FIXME(#73156): Handle source code coverage in const eval
        .                       Coverage(..) => {}
        .           
        .                       // Defined to do nothing. These are added by optimization passes, to avoid changing the
        .                       // size of MIR constantly.
        .                       Nop => {}
        .                   }
        .           
2,121,605 ( 0.04%)          self.stack_mut()[frame_idx].loc.as_mut().unwrap().statement_index += 1;
        .                   Ok(())
      847 ( 0.00%)      }
        .           
        .               /// Evaluate an assignment statement.
        .               ///
        .               /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue
        .               /// type writes its results directly into the memory specified by the place.
   12,460 ( 0.00%)      pub fn eval_rvalue_into_place(
        .                   &mut self,
        .                   rvalue: &mir::Rvalue<'tcx>,
        .                   place: mir::Place<'tcx>,
        .               ) -> InterpResult<'tcx> {
  732,588 ( 0.01%)          let dest = self.eval_place(place)?;
        .           
        .                   use rustc_middle::mir::Rvalue::*;
  917,255 ( 0.02%)          match *rvalue {
        .                       ThreadLocalRef(did) => {
        .                           let ptr = M::thread_local_static_base_pointer(self, did)?;
        .                           self.write_pointer(ptr, &dest)?;
        .                       }
        .           
   71,967 ( 0.00%)              Use(ref operand) => {
        .                           // Avoid recomputing the layout
  578,488 ( 0.01%)                  let op = self.eval_operand(operand, Some(dest.layout))?;
        .                           self.copy_op(&op, &dest)?;
        .                       }
        .           
   30,236 ( 0.00%)              BinaryOp(bin_op, box (ref left, ref right)) => {
        .                           let layout = binop_left_homogeneous(bin_op).then_some(dest.layout);
  240,874 ( 0.00%)                  let left = self.read_immediate(&self.eval_operand(left, layout)?)?;
   90,330 ( 0.00%)                  let layout = binop_right_homogeneous(bin_op).then_some(left.layout);
  270,978 ( 0.00%)                  let right = self.read_immediate(&self.eval_operand(right, layout)?)?;
  150,540 ( 0.00%)                  self.binop_ignore_overflow(bin_op, &left, &right, &dest)?;
        .                       }
        .           
       38 ( 0.00%)              CheckedBinaryOp(bin_op, box (ref left, ref right)) => {
        .                           // Due to the extra boolean in the result, we can never reuse the `dest.layout`.
        9 ( 0.00%)                  let left = self.read_immediate(&self.eval_operand(left, None)?)?;
        3 ( 0.00%)                  let layout = binop_right_homogeneous(bin_op).then_some(left.layout);
        8 ( 0.00%)                  let right = self.read_immediate(&self.eval_operand(right, layout)?)?;
        6 ( 0.00%)                  self.binop_with_overflow(bin_op, &left, &right, &dest)?;
        .                       }
        .           
        .                       UnaryOp(un_op, ref operand) => {
        .                           // The operand always has the same type as the result.
        .                           let val = self.read_immediate(&self.eval_operand(operand, Some(dest.layout))?)?;
        .                           let val = self.unary_op(un_op, &val)?;
        .                           assert_eq!(val.layout, dest.layout, "layout mismatch for result of {:?}", un_op);
        .                           self.write_immediate(*val, &dest)?;
        .                       }
        .           
        .                       Aggregate(ref kind, ref operands) => {
        .                           // active_field_index is for union initialization.
  238,308 ( 0.00%)                  let (dest, active_field_index) = match **kind {
        .                               mir::AggregateKind::Adt(adt_did, variant_index, _, _, active_field_index) => {
        .                                   self.write_discriminant(variant_index, &dest)?;
        .                                   if self.tcx.adt_def(adt_did).is_enum() {
        .                                       assert!(active_field_index.is_none());
        .                                       (self.place_downcast(&dest, variant_index)?, None)
        .                                   } else {
        .                                       if active_field_index.is_some() {
        .                                           assert_eq!(operands.len(), 1);
        .                                       }
        .                                       (dest, active_field_index)
        .                                   }
        .                               }
  178,731 ( 0.00%)                      _ => (dest, None),
        .                           };
        .           
        .                           for (i, operand) in operands.iter().enumerate() {
  349,185 ( 0.01%)                      let op = self.eval_operand(operand, None)?;
        .                               let field_index = active_field_index.unwrap_or(i);
  349,185 ( 0.01%)                      let field_dest = self.place_field(&dest, field_index)?;
        .                               self.copy_op(&op, &field_dest)?;
        .                           }
        .                       }
        .           
        .                       Repeat(ref operand, _) => {
        5 ( 0.00%)                  let src = self.eval_operand(operand, None)?;
        5 ( 0.00%)                  assert!(!src.layout.is_unsized());
        4 ( 0.00%)                  let dest = self.force_allocation(&dest)?;
        8 ( 0.00%)                  let length = dest.len(self)?;
        .           
        4 ( 0.00%)                  if length == 0 {
        .                               // Nothing to copy... but let's still make sure that `dest` as a place is valid.
        .                               self.get_alloc_mut(&dest)?;
        .                           } else {
        .                               // Write the src to the first element.
        .                               let first = self.mplace_field(&dest, 0)?;
        .                               self.copy_op(&src, &first.into())?;
        .           
        .                               // This is performance-sensitive code for big static/const arrays! So we
        .                               // avoid writing each operand individually and instead just make many copies
        .                               // of the first element.
        4 ( 0.00%)                      let elem_size = first.layout.size;
        .                               let first_ptr = first.ptr;
       12 ( 0.00%)                      let rest_ptr = first_ptr.offset(elem_size, self)?;
        .                               // For the alignment of `rest_ptr`, we crucially do *not* use `first.align` as
        .                               // that place might be more aligned than its type mandates (a `u8` array could
        .                               // be 4-aligned if it sits at the right spot in a struct). Instead we use
        .                               // `first.layout.align`, i.e., the alignment given by the type.
       22 ( 0.00%)                      self.memory.copy_repeatedly(
        .                                   first_ptr,
        .                                   first.align,
        .                                   rest_ptr,
        .                                   first.layout.align.abi,
        .                                   elem_size,
        2 ( 0.00%)                          length - 1,
        .                                   /*nonoverlapping:*/ true,
        .                               )?;
        .                           }
        .                       }
        .           
   90,321 ( 0.00%)              Len(place) => {
  150,529 ( 0.00%)                  let src = self.eval_place(place)?;
   30,105 ( 0.00%)                  let mplace = self.force_allocation(&src)?;
  150,525 ( 0.00%)                  let len = mplace.len(self)?;
        .                           self.write_scalar(Scalar::from_machine_usize(len, self), &dest)?;
        .                       }
        .           
      126 ( 0.00%)              AddressOf(_, place) | Ref(_, _, place) => {
      315 ( 0.00%)                  let src = self.eval_place(place)?;
        .                           let place = self.force_allocation(&src)?;
        .                           self.write_immediate(place.to_ref(self), &dest)?;
        .                       }
        .           
        .                       NullaryOp(null_op, ty) => {
        5 ( 0.00%)                  let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty)?;
       15 ( 0.00%)                  let layout = self.layout_of(ty)?;
       11 ( 0.00%)                  if layout.is_unsized() {
        .                               // FIXME: This should be a span_bug (#80742)
        .                               self.tcx.sess.delay_span_bug(
        .                                   self.frame().current_span(),
        .                                   &format!("Nullary MIR operator called for unsized type {}", ty),
        .                               );
        .                               throw_inval!(SizeOfUnsizedType(ty));
        .                           }
       10 ( 0.00%)                  let val = match null_op {
        4 ( 0.00%)                      mir::NullOp::SizeOf => layout.size.bytes(),
        2 ( 0.00%)                      mir::NullOp::AlignOf => layout.align.abi.bytes(),
        .                           };
        .                           self.write_scalar(Scalar::from_machine_usize(val, self), &dest)?;
        .                       }
        .           
        .                       ShallowInitBox(ref operand, _) => {
        .                           let src = self.eval_operand(operand, None)?;
        .                           let v = self.read_immediate(&src)?;
        .                           self.write_immediate(*v, &dest)?;
        .                       }
        .           
   90,375 ( 0.00%)              Cast(cast_kind, ref operand, cast_ty) => {
  210,765 ( 0.00%)                  let src = self.eval_operand(operand, None)?;
        .                           let cast_ty =
        .                               self.subst_from_current_frame_and_normalize_erasing_regions(cast_ty)?;
  301,150 ( 0.00%)                  self.cast(&src, cast_kind, cast_ty, &dest)?;
        .                       }
        .           
      201 ( 0.00%)              Discriminant(place) => {
      201 ( 0.00%)                  let op = self.eval_place_to_op(place, None)?;
        .                           let discr_val = self.read_discriminant(&op)?.0;
        .                           self.write_scalar(discr_val, &dest)?;
        .                       }
        .                   }
        .           
        .                   trace!("{:?}", self.dump_place(*dest));
        .           
        .                   Ok(())
   11,214 ( 0.00%)      }
        .           
        .               fn terminator(&mut self, terminator: &mir::Terminator<'tcx>) -> InterpResult<'tcx> {
        .                   info!("{:?}", terminator.kind);
        .           
        .                   self.eval_terminator(terminator)?;
   50,096 ( 0.00%)          if !self.stack().is_empty() {
  349,811 ( 0.01%)              if let Ok(loc) = self.frame().loc {
        .                           info!("// executing {:?}", loc.block);
        .                       }
        .                   }
        .                   Ok(())
        .               }
        .           }

3,749,731 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_const_eval/src/interpret/step.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs
--------------------------------------------------------------------------------
Ir                  

-- line 491 ----------------------------------------
         .           
         .           use crate::iter::{self, FromIterator, FusedIterator, TrustedLen};
         .           use crate::ops::{self, ControlFlow, Deref, DerefMut};
         .           use crate::{convert, fmt, hint};
         .           
         .           /// `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).
         .           ///
         .           /// See the [module documentation](self) for details.
       120 ( 0.00%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[must_use = "this `Result` may be an `Err` variant, which should be handled"]
         .           #[rustc_diagnostic_item = "Result"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Result<T, E> {
         .               /// Contains the success value
         .               #[lang = "Ok"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         3 ( 0.00%)      Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           
         .               /// Contains the error value
         .               #[lang = "Err"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               Err(#[stable(feature = "rust1", since = "1.0.0")] E),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
-- line 515 ----------------------------------------
-- line 534 ----------------------------------------
         .               /// let x: Result<i32, &str> = Err("Some error message");
         .               /// assert_eq!(x.is_ok(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn is_ok(&self) -> bool {
    22,244 ( 0.00%)          matches!(*self, Ok(_))
         .               }
         .           
         .               /// Returns `true` if the result is [`Ok`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 550 ----------------------------------------
-- line 628 ----------------------------------------
         .               /// assert_eq!(x.ok(), Some(2));
         .               ///
         .               /// let x: Result<u32, &str> = Err("Nothing here");
         .               /// assert_eq!(x.ok(), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn ok(self) -> Option<T> {
    73,721 ( 0.00%)          match self {
    11,299 ( 0.00%)              Ok(x) => Some(x),
         .                       Err(_) => None,
         .                   }
         1 ( 0.00%)      }
         .           
         .               /// Converts from `Result<T, E>` to [`Option<E>`].
         .               ///
         .               /// Converts `self` into an [`Option<E>`], consuming `self`,
         .               /// and discarding the success value, if any.
         .               ///
         .               /// # Examples
         .               ///
-- line 648 ----------------------------------------
-- line 657 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn err(self) -> Option<E> {
         .                   match self {
         .                       Ok(_) => None,
         .                       Err(x) => Some(x),
         .                   }
         4 ( 0.00%)      }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Adapter for working with references
         .               /////////////////////////////////////////////////////////////////////////
         .           
         .               /// Converts from `&Result<T, E>` to `Result<&T, &E>`.
         .               ///
         .               /// Produces a new `Result`, containing a reference
-- line 673 ----------------------------------------
-- line 683 ----------------------------------------
         .               ///
         .               /// let x: Result<u32, &str> = Err("Error");
         .               /// assert_eq!(x.as_ref(), Err(&"Error"));
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Result<&T, &E> {
        62 ( 0.00%)          match *self {
         .                       Ok(ref x) => Ok(x),
         .                       Err(ref x) => Err(x),
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Result<T, E>` to `Result<&mut T, &mut E>`.
         .               ///
         .               /// # Examples
-- line 699 ----------------------------------------
-- line 715 ----------------------------------------
         .               /// let mut x: Result<i32, i32> = Err(13);
         .               /// mutate(&mut x);
         .               /// assert_eq!(x.unwrap_err(), 0);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn as_mut(&mut self) -> Result<&mut T, &mut E> {
 3,394,571 ( 0.06%)          match *self {
         .                       Ok(ref mut x) => Ok(x),
         .                       Err(ref mut x) => Err(x),
         .                   }
         .               }
         .           
         .               /////////////////////////////////////////////////////////////////////////
         .               // Transforming contained values
         .               /////////////////////////////////////////////////////////////////////////
-- line 731 ----------------------------------------
-- line 747 ----------------------------------------
         .               ///         Ok(n) => println!("{}", n),
         .               ///         Err(..) => {}
         .               ///     }
         .               /// }
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn map<U, F: FnOnce(T) -> U>(self, op: F) -> Result<U, E> {
   850,565 ( 0.01%)          match self {
   993,905 ( 0.02%)              Ok(t) => Ok(op(t)),
   111,037 ( 0.00%)              Err(e) => Err(e),
         .                   }
    90,351 ( 0.00%)      }
         .           
         .               /// Returns the provided default (if [`Err`]), or
         .               /// applies a function to the contained value (if [`Ok`]),
         .               ///
         .               /// Arguments passed to `map_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`map_or_else`],
         .               /// which is lazily evaluated.
         .               ///
-- line 767 ----------------------------------------
-- line 774 ----------------------------------------
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 3);
         .               ///
         .               /// let x: Result<&str, _> = Err("bar");
         .               /// assert_eq!(x.map_or(42, |v| v.len()), 42);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "result_map_or", since = "1.41.0")]
         .               pub fn map_or<U, F: FnOnce(T) -> U>(self, default: U, f: F) -> U {
    10,139 ( 0.00%)          match self {
       114 ( 0.00%)              Ok(t) => f(t),
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Maps a `Result<T, E>` to `U` by applying fallback function `default` to
         .               /// a contained [`Err`] value, or function `f` to a contained [`Ok`] value.
         .               ///
         .               /// This function can be used to unpack a successful result
-- line 791 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// let x: Result<u32, u32> = Ok(2);
         .               /// assert_eq!(x.map_err(stringify), Ok(2));
         .               ///
         .               /// let x: Result<u32, u32> = Err(13);
         .               /// assert_eq!(x.map_err(stringify), Err("error code: 13".to_string()));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       125 ( 0.00%)      pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
 2,130,194 ( 0.04%)          match self {
 1,953,221 ( 0.03%)              Ok(t) => Ok(t),
       896 ( 0.00%)              Err(e) => Err(op(e)),
         .                   }
       309 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Ok`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 852 ----------------------------------------
-- line 1012 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "result_expect", since = "1.4.0")]
         .               pub fn expect(self, msg: &str) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
   136,132 ( 0.00%)          match self {
     4,560 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed(msg, &e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`Err`]
-- line 1029 ----------------------------------------
-- line 1051 ----------------------------------------
         .               ///
         .               /// ```should_panic
         .               /// let x: Result<u32, &str> = Err("emergency failure");
         .               /// x.unwrap(); // panics with `emergency failure`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
   101,726 ( 0.00%)      pub fn unwrap(self) -> T
         .               where
         .                   E: fmt::Debug,
         .               {
 1,158,403 ( 0.02%)          match self {
 1,695,888 ( 0.03%)              Ok(t) => t,
         .                       Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
         .                   }
   152,589 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Ok`] value or a default
         .               ///
         .               /// Consumes the `self` argument then, if [`Ok`], returns the contained
         .               /// value, otherwise if [`Err`], returns the default value for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 1075 ----------------------------------------
-- line 1092 ----------------------------------------
         .               /// [`parse`]: str::parse
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "result_unwrap_or_default", since = "1.16.0")]
         .               pub fn unwrap_or_default(self) -> T
         .               where
         .                   T: Default,
         .               {
    30,724 ( 0.00%)          match self {
    20,443 ( 0.00%)              Ok(x) => x,
         .                       Err(_) => Default::default(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, consuming the `self` value.
         .               ///
         .               /// # Panics
         .               ///
-- line 1109 ----------------------------------------
-- line 1152 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_err(self) -> E
         .               where
         .                   T: fmt::Debug,
         .               {
        80 ( 0.00%)          match self {
         .                       Ok(t) => unwrap_failed("called `Result::unwrap_err()` on an `Ok` value", &t),
         .                       Err(e) => e,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap`], this method is known to never panic on the
-- line 1168 ----------------------------------------
-- line 1190 ----------------------------------------
         .               /// ```
         .               #[unstable(feature = "unwrap_infallible", reason = "newly added", issue = "61695")]
         .               #[inline]
         .               pub fn into_ok(self) -> T
         .               where
         .                   E: Into<!>,
         .               {
         .                   match self {
   796,655 ( 0.01%)              Ok(x) => x,
         .                       Err(e) => e.into(),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Err`] value, but never panics.
         .               ///
         .               /// Unlike [`unwrap_err`], this method is known to never panic on the
         .               /// result types it is implemented for. Therefore, it can be used
-- line 1206 ----------------------------------------
-- line 1290 ----------------------------------------
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(sq), Ok(16));
         .               /// assert_eq!(Ok(2).and_then(sq).and_then(err), Err(4));
         .               /// assert_eq!(Ok(2).and_then(err).and_then(sq), Err(2));
         .               /// assert_eq!(Err(3).and_then(sq).and_then(sq), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn and_then<U, F: FnOnce(T) -> Result<U, E>>(self, op: F) -> Result<U, E> {
   422,943 ( 0.01%)          match self {
   958,786 ( 0.02%)              Ok(t) => op(t),
    22,272 ( 0.00%)              Err(e) => Err(e),
         .                   }
         .               }
         .           
         .               /// Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
         .               /// result of a function call, it is recommended to use [`or_else`], which is
         .               /// lazily evaluated.
-- line 1308 ----------------------------------------
-- line 1355 ----------------------------------------
         .               /// assert_eq!(Ok(2).or_else(sq).or_else(sq), Ok(2));
         .               /// assert_eq!(Ok(2).or_else(err).or_else(sq), Ok(2));
         .               /// assert_eq!(Err(3).or_else(sq).or_else(err), Ok(9));
         .               /// assert_eq!(Err(3).or_else(err).or_else(err), Err(3));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn or_else<F, O: FnOnce(E) -> Result<T, F>>(self, op: O) -> Result<T, F> {
   628,378 ( 0.01%)          match self {
 1,642,057 ( 0.03%)              Ok(t) => Ok(t),
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 1372 ----------------------------------------
-- line 1384 ----------------------------------------
         .               /// assert_eq!(x.unwrap_or(default), 9);
         .               ///
         .               /// let x: Result<u32, &str> = Err("error");
         .               /// assert_eq!(x.unwrap_or(default), default);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or(self, default: T) -> T {
       376 ( 0.00%)          match self {
        15 ( 0.00%)              Ok(t) => t,
         .                       Err(_) => default,
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value or computes it from a closure.
         .               ///
         .               ///
         .               /// # Examples
-- line 1401 ----------------------------------------
-- line 1406 ----------------------------------------
         .               /// fn count(x: &str) -> usize { x.len() }
         .               ///
         .               /// assert_eq!(Ok(2).unwrap_or_else(count), 2);
         .               /// assert_eq!(Err("foo").unwrap_or_else(count), 3);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub fn unwrap_or_else<F: FnOnce(E) -> T>(self, op: F) -> T {
   779,453 ( 0.01%)          match self {
   138,108 ( 0.00%)              Ok(t) => t,
         .                       Err(e) => op(e),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Ok`] value, consuming the `self` value,
         .               /// without checking that the value is not an [`Err`].
         .               ///
         .               /// # Safety
-- line 1423 ----------------------------------------
-- line 1647 ----------------------------------------
         .               /// let x: Result<Option<i32>, SomeErr> = Ok(Some(5));
         .               /// let y: Option<Result<i32, SomeErr>> = Some(Ok(5));
         .               /// assert_eq!(x.transpose(), y);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "transpose_result", since = "1.33.0")]
         .               #[rustc_const_unstable(feature = "const_result", issue = "82814")]
         .               pub const fn transpose(self) -> Option<Result<T, E>> {
       440 ( 0.00%)          match self {
         .                       Ok(Some(x)) => Some(Ok(x)),
         .                       Ok(None) => None,
         .                       Err(e) => Some(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           impl<T, E> Result<Result<T, E>, E> {
-- line 1663 ----------------------------------------
-- line 1751 ----------------------------------------
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone, E: Clone> Clone for Result<T, E> {
         .               #[inline]
    42,520 ( 0.00%)      fn clone(&self) -> Self {
 1,682,114 ( 0.03%)          match self {
   252,450 ( 0.00%)              Ok(x) => Ok(x.clone()),
   232,780 ( 0.00%)              Err(x) => Err(x.clone()),
         .                   }
   208,920 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Ok(to), Ok(from)) => to.clone_from(from),
         .                       (Err(to), Err(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
-- line 1772 ----------------------------------------
-- line 2011 ----------------------------------------
         .               ///
         .               /// Since the third element caused an underflow, no further elements were taken,
         .               /// so the final value of `shared` is 6 (= `3 + 2 + 1`), not 16.
         .               #[inline]
         .               fn from_iter<I: IntoIterator<Item = Result<A, E>>>(iter: I) -> Result<V, E> {
         .                   // FIXME(#11084): This could be replaced with Iterator::scan when this
         .                   // performance bug is closed.
         .           
     6,621 ( 0.00%)          iter::process_results(iter.into_iter(), |i| i.collect())
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E> const ops::Try for Result<T, E> {
         .               type Output = T;
         .               type Residual = Result<convert::Infallible, E>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
     2,342 ( 0.00%)          Ok(output)
         .               }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 9,458,075 ( 0.16%)          match self {
24,531,913 ( 0.41%)              Ok(v) => ControlFlow::Continue(v),
    41,455 ( 0.00%)              Err(e) => ControlFlow::Break(Err(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible, E>>
         .               for Result<T, F>
         .           {
         .               #[inline]
         .               #[track_caller]
         .               fn from_residual(residual: Result<convert::Infallible, E>) -> Self {
         .                   match residual {
    69,665 ( 0.00%)              Err(e) => Err(From::from(e)),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T, E> ops::Residual<T> for Result<convert::Infallible, E> {
         .               type TryType = Result<T, E>;
         .           }
-- line 2060 ----------------------------------------

 7,570,794 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/result.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
1,419,540 ( 0.02%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
       15 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    1,048 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
        .               LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
-- line 173 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    2,664 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
        4 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       16 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
   11,616 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
    1,068 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
    5,282 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
    1,602 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
    5,454 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
    6,349 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        .               QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
-- line 281 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       14 ( 0.00%)      fn from(p: PathBuf) -> Self {
        4 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       12 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       14 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
   15,712 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
   23,568 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
   23,568 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
   19,640 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
    1,144 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      858 ( 0.00%)          match self.inner {
      286 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
    1,144 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    8,796 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
    4,156 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
    8,312 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        2 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
        4 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
        4 ( 0.00%)      pub lo: BytePos,
        4 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
       12 ( 0.00%)      pub ctxt: SyntaxContext,
        4 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  784,905 ( 0.01%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      363 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   17,976 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   13,482 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   17,976 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
  203,526 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
  135,684 ( 0.00%)      }
        .               #[inline]
    1,228 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,228 ( 0.00%)      }
        .               #[inline]
    4,860 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    3,240 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    1,715 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,029 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       63 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       42 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      135 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       90 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,089 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      726 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
      330 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      165 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
      363 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
   64,059 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
   42,706 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
   10,822 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
      616 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
   20,573 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
      245 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
       49 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      196 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
  141,715 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
  121,470 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
  101,225 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
      220 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
      264 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
      176 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
       12 ( 0.00%)      pub fn allows_unsafe(self) -> bool {
        3 ( 0.00%)          self.ctxt().outer_expn_data().allow_internal_unsafe
       12 ( 0.00%)      }
        .           
        .               pub fn macro_backtrace(mut self) -> impl Iterator<Item = ExpnData> {
        .                   let mut prev_span = DUMMY_SP;
        .                   std::iter::from_fn(move || {
        .                       loop {
        .                           let expn_data = self.ctxt().outer_expn_data();
        .                           if expn_data.is_root() {
        .                               return None;
-- line 752 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
1,081,784 ( 0.02%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
  196,359 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      329 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      311 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  686,140 ( 0.01%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  885,096 ( 0.01%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      231 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      147 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      168 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
      462 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
       84 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      294 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      378 ( 0.00%)      }
        .           
        .               pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
        .               }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
      482 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
        4 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        .                   self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    2,916 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    1,701 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
-- line 892 ----------------------------------------
-- line 901 ----------------------------------------
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
  101,178 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   67,452 ( 0.00%)          let mut span = self.data();
   56,098 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
  101,178 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
  112,308 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
       54 ( 0.00%)      pub fn reverse_glob_adjust(
        .                   &mut self,
        .                   expn_id: ExpnId,
        .                   glob_span: Span,
        .               ) -> Option<Option<ExpnId>> {
       68 ( 0.00%)          let mut span = self.data();
       94 ( 0.00%)          let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
      182 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
       60 ( 0.00%)      }
        .           
        .               #[inline]
  173,192 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
  151,543 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      515 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       15 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       84 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        3 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      515 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      515 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       15 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       12 ( 0.00%)          MultiSpan::from_spans(spans)
       15 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
      308 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
      154 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
      532 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
      462 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
        6 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1267 ----------------------------------------
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    1,062 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       12 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    2,124 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
        6 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
      147 ( 0.00%)          let len = self.hash_len();
      147 ( 0.00%)          &self.value[..len]
      147 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      300 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      116 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        2 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        2 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        2 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
        8 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
        4 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
        4 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
        6 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       22 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
    4,779 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
      531 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
  867,212 ( 0.01%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    1,062 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
    5,841 ( 0.00%)              SourceFile {
    4,248 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    2,124 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    2,124 ( 0.00%)                  lines,
    2,124 ( 0.00%)                  multibyte_chars,
    2,124 ( 0.00%)                  non_narrow_chars,
    2,124 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
    4,779 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
       22 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
        6 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
        4 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
        4 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
        6 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
       24 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
        4 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
       34 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
       22 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
        8 ( 0.00%)              lines,
        8 ( 0.00%)              multibyte_chars,
        8 ( 0.00%)              non_narrow_chars,
        8 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
       18 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
   62,024 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
   31,012 ( 0.00%)          self.lines[line_index]
   62,024 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      875 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      125 ( 0.00%)          if matches!(
      250 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      125 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
    1,125 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    4,398 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
  143,637 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   75,596 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   39,757 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
   26,337 ( 0.00%)          assert!(line_index < self.lines.len());
   39,036 ( 0.00%)          if line_index == (self.lines.len() - 1) {
       18 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
   26,010 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      986 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    2,958 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    1,512 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    3,696 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    3,080 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    5,916 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    4,930 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
    1,972 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    3,451 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      986 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      443 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      493 ( 0.00%)                  let linebpos = self.lines[a];
      986 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      493 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    3,944 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    3,944 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
    1,479 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      986 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      493 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
      144 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    2,465 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    3,451 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
       20 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
       18 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
        2 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
  229,425 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
   11,485 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
  430,215 ( 0.01%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
2,316,604 ( 0.04%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
3,740,113 ( 0.06%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1946 ----------------------------------------
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
        .               }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  320,224 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
1,031,667 ( 0.02%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
  151,227 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  880,440 ( 0.01%)          let span = self.data_untracked();
  430,617 ( 0.01%)          span.ctxt.hash_stable(ctx, hasher);
  442,143 ( 0.01%)          span.parent.hash_stable(ctx, hasher);
        .           
  295,067 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
  294,152 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
  588,304 ( 0.01%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
  294,152 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
  147,076 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
  147,076 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
1,179,048 ( 0.02%)      }
        .           }

3,839,595 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs
--------------------------------------------------------------------------------
Ir                  

-- line 12 ----------------------------------------
         .           use rustc_data_structures::sync::Lrc;
         .           use rustc_macros::HashStable_Generic;
         .           use rustc_span::symbol::{kw, sym};
         .           use rustc_span::symbol::{Ident, Symbol};
         .           use rustc_span::{self, edition::Edition, Span, DUMMY_SP};
         .           use std::borrow::Cow;
         .           use std::{fmt, mem};
         .           
    20,692 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum CommentKind {
         .               Line,
         .               Block,
         .           }
         .           
        97 ( 0.00%)  #[derive(Clone, PartialEq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum BinOpToken {
         .               Plus,
         .               Minus,
         .               Star,
         .               Slash,
         .               Percent,
         .               Caret,
         .               And,
         .               Or,
         .               Shl,
         .               Shr,
         .           }
         .           
         .           /// A delimiter token.
   106,415 ( 0.00%)  #[derive(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Debug, Copy)]
         .           #[derive(HashStable_Generic)]
         .           pub enum DelimToken {
         .               /// A round parenthesis (i.e., `(` or `)`).
         .               Paren,
         .               /// A square bracket (i.e., `[` or `]`).
         .               Bracket,
         .               /// A curly brace (i.e., `{` or `}`).
         .               Brace,
         .               /// An empty delimiter.
         .               NoDelim,
         .           }
         .           
     2,340 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum LitKind {
         .               Bool, // AST only, must never appear in a `Token`
         .               Byte,
         .               Char,
         .               Integer,
         .               Float,
         .               Str,
         .               StrRaw(u16), // raw string delimited by `n` hash symbols
         .               ByteStr,
         .               ByteStrRaw(u16), // raw byte string delimited by `n` hash symbols
         .               Err,
         .           }
         .           
         .           /// A literal token.
    71,322 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Lit {
         .               pub kind: LitKind,
         .               pub symbol: Symbol,
         .               pub suffix: Option<Symbol>,
         .           }
         .           
         .           impl fmt::Display for Lit {
   153,575 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   276,435 ( 0.00%)          let Lit { kind, symbol, suffix } = *self;
         .                   match kind {
         .                       Byte => write!(f, "b'{}'", symbol)?,
    90,315 ( 0.00%)              Char => write!(f, "'{}'", symbol)?,
     1,731 ( 0.00%)              Str => write!(f, "\"{}\"", symbol)?,
         .                       StrRaw(n) => write!(
         .                           f,
         .                           "r{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
         .                       ByteStr => write!(f, "b\"{}\"", symbol)?,
         .                       ByteStrRaw(n) => write!(
         .                           f,
         .                           "br{delim}\"{string}\"{delim}",
         .                           delim = "#".repeat(n as usize),
         .                           string = symbol
         .                       )?,
        99 ( 0.00%)              Integer | Float | Bool | Err => write!(f, "{}", symbol)?,
         .                   }
         .           
    61,430 ( 0.00%)          if let Some(suffix) = suffix {
         .                       write!(f, "{}", suffix)?;
         .                   }
         .           
         .                   Ok(())
   153,575 ( 0.00%)      }
         .           }
         .           
         .           impl LitKind {
         .               /// An English article for the literal token kind.
         .               pub fn article(self) -> &'static str {
         .                   match self {
         .                       Integer | Err => "an",
         .                       _ => "a",
-- line 113 ----------------------------------------
-- line 130 ----------------------------------------
         .               crate fn may_have_suffix(self) -> bool {
         .                   matches!(self, Integer | Float | Err)
         .               }
         .           }
         .           
         .           impl Lit {
         .               pub fn new(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> Lit {
         .                   Lit { kind, symbol, suffix }
   215,338 ( 0.00%)      }
         .           }
         .           
       160 ( 0.00%)  pub fn ident_can_begin_expr(name: Symbol, span: Span, is_raw: bool) -> bool {
       280 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        94 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [
         .                       kw::Async,
         .                       kw::Do,
         .                       kw::Box,
         .                       kw::Break,
         .                       kw::Const,
         .                       kw::Continue,
-- line 152 ----------------------------------------
-- line 161 ----------------------------------------
         .                       kw::True,
         .                       kw::Try,
         .                       kw::Unsafe,
         .                       kw::While,
         .                       kw::Yield,
         .                       kw::Static,
         .                   ]
         .                   .contains(&name)
       200 ( 0.00%)  }
         .           
         .           fn ident_can_begin_type(name: Symbol, span: Span, is_raw: bool) -> bool {
       174 ( 0.00%)      let ident_token = Token::new(Ident(name, is_raw), span);
         .           
        70 ( 0.00%)      !ident_token.is_reserved_ident()
         .                   || ident_token.is_path_segment_keyword()
         .                   || [kw::Underscore, kw::For, kw::Impl, kw::Fn, kw::Unsafe, kw::Extern, kw::Typeof, kw::Dyn]
         .                       .contains(&name)
         .           }
         .           
14,641,169 ( 0.24%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub enum TokenKind {
         .               /* Expression-operator symbols. */
         .               Eq,
         .               Lt,
         .               Le,
         .               EqEq,
         .               Ne,
         .               Ge,
         .               Gt,
         .               AndAnd,
         .               OrOr,
         .               Not,
         .               Tilde,
    65,730 ( 0.00%)      BinOp(BinOpToken),
        12 ( 0.00%)      BinOpEq(BinOpToken),
         .           
         .               /* Structural symbols */
         .               At,
         .               Dot,
         .               DotDot,
         .               DotDotDot,
         .               DotDotEq,
         .               Comma,
-- line 203 ----------------------------------------
-- line 208 ----------------------------------------
         .               LArrow,
         .               FatArrow,
         .               Pound,
         .               Dollar,
         .               Question,
         .               /// Used by proc macros for representing lifetimes, not generated by lexer right now.
         .               SingleQuote,
         .               /// An opening delimiter (e.g., `{`).
   191,598 ( 0.00%)      OpenDelim(DelimToken),
         .               /// A closing delimiter (e.g., `}`).
   283,830 ( 0.00%)      CloseDelim(DelimToken),
         .           
         .               /* Literals */
    97,311 ( 0.00%)      Literal(Lit),
         .           
         .               /// Identifier token.
         .               /// Do not forget about `NtIdent` when you want to match on identifiers.
         .               /// It's recommended to use `Token::(ident,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated identifiers in the same way.
    23,492 ( 0.00%)      Ident(Symbol, /* is_raw */ bool),
         .               /// Lifetime identifier token.
         .               /// Do not forget about `NtLifetime` when you want to match on lifetime identifiers.
         .               /// It's recommended to use `Token::(lifetime,uninterpolate,uninterpolated_span)` to
         .               /// treat regular and interpolated lifetime identifiers in the same way.
       156 ( 0.00%)      Lifetime(Symbol),
         .           
         .               Interpolated(Lrc<Nonterminal>),
         .           
         .               /// A doc comment token.
         .               /// `Symbol` is the doc comment's data excluding its "quotes" (`///`, `/**`, etc)
         .               /// similarly to symbols in string literal tokens.
       801 ( 0.00%)      DocComment(CommentKind, ast::AttrStyle, Symbol),
         .           
         .               Eof,
         .           }
         .           
         .           // `TokenKind` is used a lot. Make sure it doesn't unintentionally get bigger.
         .           #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
         .           rustc_data_structures::static_assert_size!(TokenKind, 16);
         .           
   464,909 ( 0.01%)  #[derive(Clone, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]
         .           pub struct Token {
     8,500 ( 0.00%)      pub kind: TokenKind,
         .               pub span: Span,
         .           }
         .           
         .           impl TokenKind {
         .               pub fn lit(kind: LitKind, symbol: Symbol, suffix: Option<Symbol>) -> TokenKind {
         .                   Literal(Lit::new(kind, symbol, suffix))
         .               }
         .           
         .               // An approximation to proc-macro-style single-character operators used by rustc parser.
         .               // If the operator token can be broken into two tokens, the first of which is single-character,
         .               // then this function performs that operation, otherwise it returns `None`.
    10,777 ( 0.00%)      pub fn break_two_token_op(&self) -> Option<(TokenKind, TokenKind)> {
    43,117 ( 0.00%)          Some(match *self {
         .                       Le => (Lt, Eq),
         .                       EqEq => (Eq, Eq),
         .                       Ne => (Not, Eq),
         .                       Ge => (Gt, Eq),
         .                       AndAnd => (BinOp(And), BinOp(And)),
         .                       OrOr => (BinOp(Or), BinOp(Or)),
         .                       BinOp(Shl) => (Lt, Lt),
         .                       BinOp(Shr) => (Gt, Gt),
-- line 271 ----------------------------------------
-- line 280 ----------------------------------------
         .                       BinOpEq(Shl) => (Lt, Le),
         .                       BinOpEq(Shr) => (Gt, Ge),
         .                       DotDot => (Dot, Dot),
         .                       DotDotDot => (Dot, DotDot),
         .                       ModSep => (Colon, Colon),
         .                       RArrow => (BinOp(Minus), Gt),
         .                       LArrow => (Lt, BinOp(Minus)),
         .                       FatArrow => (Eq, Gt),
    10,776 ( 0.00%)              _ => return None,
         .                   })
    10,777 ( 0.00%)      }
         .           
         .               /// Returns tokens that are likely to be typed accidentally instead of the current token.
         .               /// Enables better error recovery when the wrong token is found.
         .               pub fn similar_tokens(&self) -> Option<Vec<TokenKind>> {
         .                   match *self {
         .                       Comma => Some(vec![Dot, Lt, Semi]),
         .                       Semi => Some(vec![Colon, Comma]),
         .                       FatArrow => Some(vec![Eq, RArrow]),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               pub fn should_end_const_arg(&self) -> bool {
       166 ( 0.00%)          matches!(self, Gt | Ge | BinOp(Shr) | BinOpEq(Shr))
        40 ( 0.00%)      }
         .           }
         .           
         .           impl Token {
   170,266 ( 0.00%)      pub fn new(kind: TokenKind, span: Span) -> Self {
   511,941 ( 0.01%)          Token { kind, span }
   170,266 ( 0.00%)      }
         .           
         .               /// Some token that will be thrown away later.
       289 ( 0.00%)      pub fn dummy() -> Self {
         .                   Token::new(TokenKind::Question, DUMMY_SP)
       289 ( 0.00%)      }
         .           
         .               /// Recovers a `Token` from an `Ident`. This creates a raw identifier if necessary.
         .               pub fn from_ast_ident(ident: Ident) -> Self {
       608 ( 0.00%)          Token::new(Ident(ident.name, ident.is_raw_guess()), ident.span)
         .               }
         .           
         .               /// Return this token by value and leave a dummy token in its place.
   106,107 ( 0.00%)      pub fn take(&mut self) -> Self {
         .                   mem::replace(self, Token::dummy())
   106,107 ( 0.00%)      }
         .           
         .               /// For interpolated tokens, returns a span of the fragment to which the interpolated
         .               /// token refers. For all other tokens this is just a regular span.
         .               /// It is particularly important to use this for identifiers and lifetimes
         .               /// for which spans affect name resolution and edition checks.
         .               /// Note that keywords are also identifiers, so they should use this
         .               /// if they keep spans or perform edition checks.
         .               pub fn uninterpolated_span(&self) -> Span {
       650 ( 0.00%)          match &self.kind {
         .                       Interpolated(nt) => nt.span(),
       325 ( 0.00%)              _ => self.span,
         .                   }
       325 ( 0.00%)      }
         .           
         .               pub fn is_op(&self) -> bool {
   318,321 ( 0.01%)          !matches!(
   106,107 ( 0.00%)              self.kind,
         .                       OpenDelim(..)
         .                           | CloseDelim(..)
         .                           | Literal(..)
         .                           | DocComment(..)
         .                           | Ident(..)
         .                           | Lifetime(..)
         .                           | Interpolated(..)
         .                           | Eof
         .                   )
   106,107 ( 0.00%)      }
         .           
         .               pub fn is_like_plus(&self) -> bool {
     2,289 ( 0.00%)          matches!(self.kind, BinOp(Plus) | BinOpEq(Plus))
       457 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of an expression.
        46 ( 0.00%)      pub fn can_begin_expr(&self) -> bool {
       230 ( 0.00%)          match self.uninterpolate().kind {
       360 ( 0.00%)              Ident(name, is_raw)              =>
       120 ( 0.00%)                  ident_can_begin_expr(name, self.span, is_raw), // value name or keyword
         .                       OpenDelim(..)                     | // tuple, array or block
         .                       Literal(..)                       | // literal
         .                       Not                               | // operator not
         .                       BinOp(Minus)                      | // unary minus
         .                       BinOp(Star)                       | // dereference
         .                       BinOp(Or) | OrOr                  | // closure
         .                       BinOp(And)                        | // reference
         .                       AndAnd                            | // double reference
-- line 371 ----------------------------------------
-- line 376 ----------------------------------------
         .                       Lifetime(..)                      | // labeled loop
         .                       Pound                             => true, // expression attributes
         .                       Interpolated(ref nt) => matches!(**nt, NtLiteral(..) |
         .                           NtExpr(..)    |
         .                           NtBlock(..)   |
         .                           NtPath(..)),
         .                       _ => false,
         .                   }
        92 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a type.
       232 ( 0.00%)      pub fn can_begin_type(&self) -> bool {
       481 ( 0.00%)          match self.uninterpolate().kind {
       261 ( 0.00%)              Ident(name, is_raw)        =>
        29 ( 0.00%)                  ident_can_begin_type(name, self.span, is_raw), // type name or keyword
         .                       OpenDelim(Paren)            | // tuple
         .                       OpenDelim(Bracket)          | // array
         .                       Not                         | // never
         .                       BinOp(Star)                 | // raw pointer
         .                       BinOp(And)                  | // reference
         .                       AndAnd                      | // double reference
         .                       Question                    | // maybe bound in trait object
         .                       Lifetime(..)                | // lifetime bound in trait object
         .                       Lt | BinOp(Shl)             | // associated path
         .                       ModSep                      => true, // global path
         .                       Interpolated(ref nt) => matches!(**nt, NtTy(..) | NtPath(..)),
         .                       _ => false,
         .                   }
       348 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token can appear at the start of a const param.
         .               pub fn can_begin_const_arg(&self) -> bool {
       255 ( 0.00%)          match self.kind {
         .                       OpenDelim(Brace) => true,
         .                       Interpolated(ref nt) => matches!(**nt, NtExpr(..) | NtBlock(..) | NtLiteral(..)),
        51 ( 0.00%)              _ => self.can_begin_literal_maybe_minus(),
         .                   }
         .               }
         .           
         .               /// Returns `true` if the token can appear at the start of a generic bound.
         .               pub fn can_begin_bound(&self) -> bool {
         .                   self.is_path_start()
         .                       || self.is_lifetime()
         .                       || self.is_keyword(kw::For)
-- line 419 ----------------------------------------
-- line 427 ----------------------------------------
         .               }
         .           
         .               /// Returns `true` if the token is any literal, a minus (which can prefix a literal,
         .               /// for example a '-42', or one of the boolean idents).
         .               ///
         .               /// In other words, would this token be a valid start of `parse_literal_maybe_minus`?
         .               ///
         .               /// Keep this in sync with and `Lit::from_token`, excluding unary negation.
        51 ( 0.00%)      pub fn can_begin_literal_maybe_minus(&self) -> bool {
       460 ( 0.00%)          match self.uninterpolate().kind {
         .                       Literal(..) | BinOp(Minus) => true,
       116 ( 0.00%)              Ident(name, false) if name.is_bool_lit() => true,
         .                       Interpolated(ref nt) => match &**nt {
         .                           NtLiteral(_) => true,
         .                           NtExpr(e) => match &e.kind {
         .                               ast::ExprKind::Lit(_) => true,
         .                               ast::ExprKind::Unary(ast::UnOp::Neg, e) => {
         .                                   matches!(&e.kind, ast::ExprKind::Lit(_))
         .                               }
         .                               _ => false,
         .                           },
         .                           _ => false,
         .                       },
         .                       _ => false,
         .                   }
       102 ( 0.00%)      }
         .           
         .               // A convenience function for matching on identifiers during parsing.
         .               // Turns interpolated identifier (`$i: ident`) or lifetime (`$l: lifetime`) token
         .               // into the regular identifier or lifetime token it refers to,
         .               // otherwise returns the original token.
    52,872 ( 0.00%)      pub fn uninterpolate(&self) -> Cow<'_, Token> {
   775,128 ( 0.01%)          match &self.kind {
         .                       Interpolated(nt) => match **nt {
         .                           NtIdent(ident, is_raw) => {
         .                               Cow::Owned(Token::new(Ident(ident.name, is_raw), ident.span))
         .                           }
         .                           NtLifetime(ident) => Cow::Owned(Token::new(Lifetime(ident.name), ident.span)),
         .                           _ => Cow::Borrowed(self),
         .                       },
         .                       _ => Cow::Borrowed(self),
         .                   }
    52,872 ( 0.00%)      }
         .           
         .               /// Returns an identifier if this token is an identifier.
   199,941 ( 0.00%)      pub fn ident(&self) -> Option<(Ident, /* is_raw */ bool)> {
         .                   let token = self.uninterpolate();
   547,596 ( 0.01%)          match token.kind {
 1,185,285 ( 0.02%)              Ident(name, is_raw) => Some((Ident::new(name, token.span), is_raw)),
         .                       _ => None,
         .                   }
 1,312,751 ( 0.02%)      }
         .           
         .               /// Returns a lifetime identifier if this token is a lifetime.
       193 ( 0.00%)      pub fn lifetime(&self) -> Option<Ident> {
         .                   let token = self.uninterpolate();
       940 ( 0.00%)          match token.kind {
       560 ( 0.00%)              Lifetime(name) => Some(Ident::new(name, token.span)),
         .                       _ => None,
         .                   }
     1,351 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier.
         .               pub fn is_ident(&self) -> bool {
         .                   self.ident().is_some()
    10,464 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a lifetime.
       277 ( 0.00%)      pub fn is_lifetime(&self) -> bool {
         .                   self.lifetime().is_some()
       554 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an identifier whose name is the given
         .               /// string slice.
    10,559 ( 0.00%)      pub fn is_ident_named(&self, name: Symbol) -> bool {
         .                   self.ident().map_or(false, |(ident, _)| ident.name == name)
    21,118 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is an interpolated path.
         .               fn is_path(&self) -> bool {
    44,560 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtPath(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
         .               }
         .           
         .               /// Would `maybe_whole_expr` in `parser.rs` return `Ok(..)`?
-- line 515 ----------------------------------------
-- line 522 ----------------------------------------
         .                       }
         .                   }
         .           
         .                   false
         .               }
         .           
         .               // Is the token an interpolated block (`$b:block`)?
         .               pub fn is_whole_block(&self) -> bool {
        30 ( 0.00%)          if let Interpolated(ref nt) = self.kind {
         .                       if let NtBlock(..) = **nt {
         .                           return true;
         .                       }
         .                   }
         .                   false
        15 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is either the `mut` or `const` keyword.
         .               pub fn is_mutability(&self) -> bool {
         .                   self.is_keyword(kw::Mut) || self.is_keyword(kw::Const)
         .               }
         .           
       282 ( 0.00%)      pub fn is_qpath_start(&self) -> bool {
    22,562 ( 0.00%)          self == &Lt || self == &BinOp(Shl)
         .               }
         .           
    44,560 ( 0.00%)      pub fn is_path_start(&self) -> bool {
    66,802 ( 0.00%)          self == &ModSep
         .                       || self.is_qpath_start()
         .                       || self.is_path()
         .                       || self.is_path_segment_keyword()
    11,005 ( 0.00%)              || self.is_ident() && !self.is_reserved_ident()
    55,700 ( 0.00%)      }
         .           
         .               /// Returns `true` if the token is a given keyword, `kw`.
    24,554 ( 0.00%)      pub fn is_keyword(&self, kw: Symbol) -> bool {
         .                   self.is_non_raw_ident_where(|id| id.name == kw)
    49,108 ( 0.00%)      }
         .           
       189 ( 0.00%)      pub fn is_path_segment_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_path_segment_keyword)
         .               }
         .           
         .               // Returns true for reserved identifiers used internally for elided lifetimes,
         .               // unnamed method parameters, crate root module, error recovery etc.
        81 ( 0.00%)      pub fn is_special_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_special)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword used in the language.
        81 ( 0.00%)      pub fn is_used_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_used_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is a keyword reserved for possible future use.
        81 ( 0.00%)      pub fn is_unused_keyword(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_unused_keyword)
         .               }
         .           
         .               /// Returns `true` if the token is either a special identifier or a keyword.
         .               pub fn is_reserved_ident(&self) -> bool {
         .                   self.is_non_raw_ident_where(Ident::is_reserved)
         .               }
         .           
         .               /// Returns `true` if the token is the identifier `true` or `false`.
       197 ( 0.00%)      pub fn is_bool_lit(&self) -> bool {
       394 ( 0.00%)          self.is_non_raw_ident_where(|id| id.name.is_bool_lit())
         .               }
         .           
         .               pub fn is_numeric_lit(&self) -> bool {
         .                   matches!(
         .                       self.kind,
         .                       Literal(Lit { kind: LitKind::Integer, .. }) | Literal(Lit { kind: LitKind::Float, .. })
         .                   )
         .               }
         .           
         .               /// Returns `true` if the token is a non-raw identifier for which `pred` holds.
        12 ( 0.00%)      pub fn is_non_raw_ident_where(&self, pred: impl FnOnce(Ident) -> bool) -> bool {
   924,753 ( 0.02%)          match self.ident() {
    10,986 ( 0.00%)              Some((id, false)) => pred(id),
         .                       _ => false,
         .                   }
        15 ( 0.00%)      }
         .           
   413,360 ( 0.01%)      pub fn glue(&self, joint: &Token) -> Option<Token> {
   206,680 ( 0.00%)          let kind = match self.kind {
       236 ( 0.00%)              Eq => match joint.kind {
         .                           Eq => EqEq,
         .                           Gt => FatArrow,
         .                           _ => return None,
         .                       },
        68 ( 0.00%)              Lt => match joint.kind {
         .                           Eq => Le,
         .                           Lt => BinOp(Shl),
         .                           Le => BinOpEq(Shl),
         .                           BinOp(Minus) => LArrow,
         .                           _ => return None,
         .                       },
        41 ( 0.00%)              Gt => match joint.kind {
         .                           Eq => Ge,
         .                           Gt => BinOp(Shr),
         .                           Ge => BinOpEq(Shr),
         .                           _ => return None,
         .                       },
         2 ( 0.00%)              Not => match joint.kind {
         .                           Eq => Ne,
         .                           _ => return None,
         .                       },
       817 ( 0.00%)              BinOp(op) => match joint.kind {
         .                           Eq => BinOpEq(op),
        25 ( 0.00%)                  BinOp(And) if op == And => AndAnd,
        12 ( 0.00%)                  BinOp(Or) if op == Or => OrOr,
        56 ( 0.00%)                  Gt if op == Minus => RArrow,
         .                           _ => return None,
         .                       },
        60 ( 0.00%)              Dot => match joint.kind {
         .                           Dot => DotDot,
         .                           DotDot => DotDotDot,
         .                           _ => return None,
         .                       },
         .                       DotDot => match joint.kind {
         .                           Dot => DotDotDot,
         .                           Eq => DotDotEq,
         .                           _ => return None,
         .                       },
    20,064 ( 0.00%)              Colon => match joint.kind {
         .                           Colon => ModSep,
         .                           _ => return None,
         .                       },
         .                       SingleQuote => match joint.kind {
         .                           Ident(name, false) => Lifetime(Symbol::intern(&format!("'{}", name))),
         .                           _ => return None,
         .                       },
         .           
         .                       Le | EqEq | Ne | Ge | AndAnd | OrOr | Tilde | BinOpEq(..) | At | DotDotDot
         .                       | DotDotEq | Comma | Semi | ModSep | RArrow | LArrow | FatArrow | Pound | Dollar
         .                       | Question | OpenDelim(..) | CloseDelim(..) | Literal(..) | Ident(..)
         .                       | Lifetime(..) | Interpolated(..) | DocComment(..) | Eof => return None,
         .                   };
         .           
   132,860 ( 0.00%)          Some(Token::new(kind, self.span.to(joint.span)))
   372,024 ( 0.01%)      }
         .           }
         .           
         .           impl PartialEq<TokenKind> for Token {
         .               fn eq(&self, rhs: &TokenKind) -> bool {
   803,282 ( 0.01%)          self.kind == *rhs
         .               }
         .           }
         .           
         .           #[derive(Clone, Encodable, Decodable)]
         .           /// For interpolation during macro expansion.
         .           pub enum Nonterminal {
         .               NtItem(P<ast::Item>),
         .               NtBlock(P<ast::Block>),
-- line 675 ----------------------------------------
-- line 711 ----------------------------------------
         .               Path,
         .               Vis,
         .               TT,
         .           }
         .           
         .           impl NonterminalKind {
         .               /// The `edition` closure is used to get the edition for the given symbol. Doing
         .               /// `span.edition()` is expensive, so we do it lazily.
        52 ( 0.00%)      pub fn from_symbol(
         .                   symbol: Symbol,
         .                   edition: impl FnOnce() -> Edition,
         .               ) -> Option<NonterminalKind> {
       108 ( 0.00%)          Some(match symbol {
         .                       sym::item => NonterminalKind::Item,
         .                       sym::block => NonterminalKind::Block,
         .                       sym::stmt => NonterminalKind::Stmt,
         .                       sym::pat => match edition() {
         .                           Edition::Edition2015 | Edition::Edition2018 => {
         .                               NonterminalKind::PatParam { inferred: true }
         .                           }
         .                           Edition::Edition2021 => NonterminalKind::PatWithOr,
-- line 731 ----------------------------------------
-- line 737 ----------------------------------------
         .                       sym::lifetime => NonterminalKind::Lifetime,
         .                       sym::literal => NonterminalKind::Literal,
         .                       sym::meta => NonterminalKind::Meta,
         .                       sym::path => NonterminalKind::Path,
         .                       sym::vis => NonterminalKind::Vis,
         .                       sym::tt => NonterminalKind::TT,
         .                       _ => return None,
         .                   })
        52 ( 0.00%)      }
         .               fn symbol(self) -> Symbol {
         .                   match self {
         .                       NonterminalKind::Item => sym::item,
         .                       NonterminalKind::Block => sym::block,
         .                       NonterminalKind::Stmt => sym::stmt,
         .                       NonterminalKind::PatParam { inferred: false } => sym::pat_param,
         .                       NonterminalKind::PatParam { inferred: true } | NonterminalKind::PatWithOr => sym::pat,
         .                       NonterminalKind::Expr => sym::expr,
-- line 753 ----------------------------------------

 5,125,481 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast/src/token.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs
--------------------------------------------------------------------------------
Ir                 

-- line 18 ----------------------------------------
        .           use rustc_middle::ty::{self, AdtKind, Ty, UpvarSubsts, UserType};
        .           use rustc_span::def_id::DefId;
        .           use rustc_span::Span;
        .           use rustc_target::abi::VariantIdx;
        .           
        .           impl<'tcx> Cx<'tcx> {
        .               crate fn mirror_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) -> ExprId {
        .                   // `mirror_expr` is recursing very deep. Make sure the stack doesn't overflow.
  100,544 ( 0.00%)          ensure_sufficient_stack(|| self.mirror_expr_inner(expr))
        .               }
        .           
   20,116 ( 0.00%)      crate fn mirror_exprs(&mut self, exprs: &'tcx [hir::Expr<'tcx>]) -> Box<[ExprId]> {
  155,835 ( 0.00%)          exprs.iter().map(|expr| self.mirror_expr_inner(expr)).collect()
   40,232 ( 0.00%)      }
        .           
  576,252 ( 0.01%)      pub(super) fn mirror_expr_inner(&mut self, hir_expr: &'tcx hir::Expr<'tcx>) -> ExprId {
  448,196 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(hir_expr.hir_id.local_id);
        .                   let expr_scope =
        .                       region::Scope { id: hir_expr.hir_id.local_id, data: region::ScopeData::Node };
        .           
        .                   debug!("Expr::make_mirror(): id={}, span={:?}", hir_expr.hir_id, hir_expr.span);
        .           
  256,112 ( 0.00%)          let mut expr = self.make_mirror_unadjusted(hir_expr);
        .           
  384,168 ( 0.01%)          let adjustment_span = match self.adjustment_span {
    2,268 ( 0.00%)              Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),
        .                       _ => None,
        .                   };
        .           
        .                   // Now apply adjustments, if any.
  256,112 ( 0.00%)          for adjustment in self.typeck_results.expr_adjustments(hir_expr) {
        .                       debug!("make_mirror: expr={:?} applying adjustment={:?}", expr, adjustment);
    2,440 ( 0.00%)              let span = expr.span;
    6,923 ( 0.00%)              expr =
   17,802 ( 0.00%)                  self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));
        .                   }
        .           
        .                   // Next, wrap this up in the expr's scope.
  832,364 ( 0.01%)          expr = Expr {
        .                       temp_lifetime,
   63,418 ( 0.00%)              ty: expr.ty,
   64,028 ( 0.00%)              span: hir_expr.span,
        .                       kind: ExprKind::Scope {
        .                           region_scope: expr_scope,
1,152,504 ( 0.02%)                  value: self.thir.exprs.push(expr),
  128,056 ( 0.00%)                  lint_level: LintLevel::Explicit(hir_expr.hir_id),
        .                       },
        .                   };
        .           
        .                   // Finally, create a destruction scope, if any.
  192,084 ( 0.00%)          if let Some(region_scope) =
  128,056 ( 0.00%)              self.region_scope_tree.opt_destruction_scope(hir_expr.hir_id.local_id)
        .                   {
    6,540 ( 0.00%)              expr = Expr {
        .                           temp_lifetime,
        .                           ty: expr.ty,
      545 ( 0.00%)                  span: hir_expr.span,
        .                           kind: ExprKind::Scope {
        .                               region_scope,
    7,630 ( 0.00%)                      value: self.thir.exprs.push(expr),
        .                               lint_level: LintLevel::Inherited,
        .                           },
        .                       };
        .                   }
        .           
        .                   // OK, all done!
1,408,616 ( 0.02%)          self.thir.exprs.push(expr)
  576,252 ( 0.01%)      }
        .           
        .               fn apply_adjustment(
        .                   &mut self,
        .                   hir_expr: &'tcx hir::Expr<'tcx>,
        .                   mut expr: Expr<'tcx>,
        .                   adjustment: &Adjustment<'tcx>,
        .                   mut span: Span,
        .               ) -> Expr<'tcx> {
    1,978 ( 0.00%)          let Expr { temp_lifetime, .. } = expr;
        .           
        .                   // Adjust the span from the block, to the last expression of the
        .                   // block. This is a better span when returning a mutable reference
        .                   // with too short a lifetime. The error message will use the span
        .                   // from the assignment to the return place, which should only point
        .                   // at the returned value, not the entire function body.
        .                   //
        .                   // fn return_short_lived<'a>(x: &'a mut i32) -> &'static mut i32 {
        .                   //      x
        .                   //   // ^ error message points at this expression.
        .                   // }
        .                   let mut adjust_span = |expr: &mut Expr<'tcx>| {
      870 ( 0.00%)              if let ExprKind::Block { body } = &expr.kind {
        .                           if let Some(last_expr) = body.expr {
        .                               span = self.thir[last_expr].span;
        .                               expr.span = span;
        .                           }
        .                       }
        .                   };
        .           
    8,844 ( 0.00%)          let kind = match adjustment.kind {
        .                       Adjust::Pointer(PointerCast::Unsize) => {
        .                           adjust_span(&mut expr);
      425 ( 0.00%)                  ExprKind::Pointer { cast: PointerCast::Unsize, source: self.thir.exprs.push(expr) }
        .                       }
        .                       Adjust::Pointer(cast) => ExprKind::Pointer { cast, source: self.thir.exprs.push(expr) },
      697 ( 0.00%)              Adjust::NeverToAny => ExprKind::NeverToAny { source: self.thir.exprs.push(expr) },
        .                       Adjust::Deref(None) => {
        .                           adjust_span(&mut expr);
    6,970 ( 0.00%)                  ExprKind::Deref { arg: self.thir.exprs.push(expr) }
        .                       }
       52 ( 0.00%)              Adjust::Deref(Some(deref)) => {
        .                           // We don't need to do call adjust_span here since
        .                           // deref coercions always start with a built-in deref.
       65 ( 0.00%)                  let call = deref.method_call(self.tcx(), expr.ty);
        .           
       78 ( 0.00%)                  expr = Expr {
        .                               temp_lifetime,
       13 ( 0.00%)                      ty: self
        .                                   .tcx
       26 ( 0.00%)                          .mk_ref(deref.region, ty::TypeAndMut { ty: expr.ty, mutbl: deref.mutbl }),
        .                               span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind: deref.mutbl.to_borrow_kind(),
      195 ( 0.00%)                          arg: self.thir.exprs.push(expr),
        .                               },
        .                           };
        .           
      273 ( 0.00%)                  let expr = Box::new([self.thir.exprs.push(expr)]);
        .           
      169 ( 0.00%)                  self.overloaded_place(hir_expr, adjustment.target, Some(call), expr, deref.span)
        .                       }
    2,000 ( 0.00%)              Adjust::Borrow(AutoBorrow::Ref(_, m)) => ExprKind::Borrow {
        .                           borrow_kind: m.to_borrow_kind(),
    7,000 ( 0.00%)                  arg: self.thir.exprs.push(expr),
        .                       },
        .                       Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {
        .                           ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }
        .                       }
        .                   };
        .           
   18,791 ( 0.00%)          Expr { temp_lifetime, ty: adjustment.target, span, kind }
        .               }
        .           
  640,280 ( 0.01%)      fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {
  256,112 ( 0.00%)          let expr_ty = self.typeck_results().expr_ty(expr);
   64,028 ( 0.00%)          let expr_span = expr.span;
  320,140 ( 0.01%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
        .           
  384,885 ( 0.01%)          let kind = match expr.kind {
        .                       // Here comes the interesting stuff:
      636 ( 0.00%)              hir::ExprKind::MethodCall(segment, ref args, fn_span) => {
        .                           // Rewrite a.b(c) into UFCS form like Trait::b(a, c)
    1,484 ( 0.00%)                  let expr = self.method_callee(expr, segment.ident.span, None);
        .                           // When we apply adjustments to the receiver, use the span of
        .                           // the overall method call for better diagnostics. args[0]
        .                           // is guaranteed to exist, since a method call always has a receiver.
      848 ( 0.00%)                  let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));
        .                           tracing::info!("Using method span: {:?}", expr.span);
      212 ( 0.00%)                  let args = self.mirror_exprs(args);
      424 ( 0.00%)                  self.adjustment_span = old_adjustment_span;
    1,484 ( 0.00%)                  ExprKind::Call {
      212 ( 0.00%)                      ty: expr.ty,
    2,968 ( 0.00%)                      fun: self.thir.exprs.push(expr),
        .                               args,
        .                               from_hir_call: true,
        .                               fn_span,
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Call(ref fun, ref args) => {
   40,476 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               // The callee is something implementing Fn, FnMut, or FnOnce.
        .                               // Find the actual method implementation being called and
        .                               // build the appropriate UFCS call expression with the
        .                               // callee-object as expr parameter.
        .           
        .                               // rewrite f(u, v) into FnOnce::call_once(f, (u, v))
        .           
        .                               let method = self.method_callee(expr, fun.span, None);
-- line 194 ----------------------------------------
-- line 206 ----------------------------------------
        .                                   ty: method.ty,
        .                                   fun: self.thir.exprs.push(method),
        .                                   args: Box::new([self.mirror_expr(fun), tupled_args]),
        .                                   from_hir_call: true,
        .                                   fn_span: expr.span,
        .                               }
        .                           } else {
        .                               let adt_data =
   50,595 ( 0.00%)                          if let hir::ExprKind::Path(hir::QPath::Resolved(_, ref path)) = fun.kind {
        .                                       // Tuple-like ADTs are represented as ExprKind::Call. We convert them here.
      984 ( 0.00%)                              expr_ty.ty_adt_def().and_then(|adt_def| match path.res {
      122 ( 0.00%)                                  Res::Def(DefKind::Ctor(_, CtorKind::Fn), ctor_id) => {
      244 ( 0.00%)                                      Some((adt_def, adt_def.variant_index_with_ctor_id(ctor_id)))
        .                                           }
        .                                           Res::SelfCtor(..) => Some((adt_def, VariantIdx::new(0))),
        .                                           _ => None,
        .                                       })
        .                                   } else {
        .                                       None
        .                                   };
      288 ( 0.00%)                      if let Some((adt_def, index)) = adt_data {
      305 ( 0.00%)                          let substs = self.typeck_results().node_substs(fun.hir_id);
      183 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
        .                                   let user_ty =
      305 ( 0.00%)                              user_provided_types.get(fun.hir_id).copied().map(|mut u_ty| {
        .                                           if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {
        .                                               *did = adt_def.did;
        .                                           }
        .                                           u_ty
        .                                       });
        .                                   debug!("make_mirror_unadjusted: (call) user_ty={:?}", user_ty);
        .           
       61 ( 0.00%)                          let field_refs = args
        .                                       .iter()
        .                                       .enumerate()
        .                                       .map(|(idx, e)| FieldExpr {
        .                                           name: Field::new(idx),
        .                                           expr: self.mirror_expr(e),
        .                                       })
        .                                       .collect();
        .                                   ExprKind::Adt(Box::new(Adt {
-- line 246 ----------------------------------------
-- line 247 ----------------------------------------
        .                                       adt_def,
        .                                       substs,
        .                                       variant_index: index,
        .                                       fields: field_refs,
        .                                       user_ty,
        .                                       base: None,
        .                                   }))
        .                               } else {
   40,232 ( 0.00%)                          ExprKind::Call {
   50,373 ( 0.00%)                              ty: self.typeck_results().node_type(fun.hir_id),
   10,058 ( 0.00%)                              fun: self.mirror_expr(fun),
   40,232 ( 0.00%)                              args: self.mirror_exprs(args),
        .                                       from_hir_call: true,
   10,058 ( 0.00%)                              fn_span: expr.span,
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Ref, mutbl, ref arg) => {
      550 ( 0.00%)                  ExprKind::Borrow { borrow_kind: mutbl.to_borrow_kind(), arg: self.mirror_expr(arg) }
        .                       }
        .           
        .                       hir::ExprKind::AddrOf(hir::BorrowKind::Raw, mutability, ref arg) => {
        .                           ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }
        .                       }
        .           
    3,696 ( 0.00%)              hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },
        .           
        .                       hir::ExprKind::Assign(ref lhs, ref rhs, _) => {
      174 ( 0.00%)                  ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }
        .                       }
        .           
        4 ( 0.00%)              hir::ExprKind::AssignOp(op, ref lhs, ref rhs) => {
       16 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
       20 ( 0.00%)                      ExprKind::AssignOp {
       12 ( 0.00%)                          op: bin_op(op.node),
        4 ( 0.00%)                          lhs: self.mirror_expr(lhs),
        4 ( 0.00%)                          rhs: self.mirror_expr(rhs),
        .                               }
        .                           }
        .                       }
        .           
   30,907 ( 0.00%)              hir::ExprKind::Lit(ref lit) => ExprKind::Literal {
  123,628 ( 0.00%)                  literal: self.const_eval_literal(&lit.node, expr_ty, lit.span, false),
        .                           user_ty: None,
        .                           const_id: None,
        .                       },
        .           
      148 ( 0.00%)              hir::ExprKind::Binary(op, ref lhs, ref rhs) => {
      592 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
       29 ( 0.00%)                      let lhs = self.mirror_expr(lhs);
       29 ( 0.00%)                      let rhs = self.mirror_expr(rhs);
        .                               self.overloaded_operator(expr, Box::new([lhs, rhs]))
        .                           } else {
        .                               // FIXME overflow
      408 ( 0.00%)                      match op.node {
      136 ( 0.00%)                          hir::BinOpKind::And => ExprKind::LogicalOp {
        .                                       op: LogicalOp::And,
       34 ( 0.00%)                              lhs: self.mirror_expr(lhs),
       34 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
       72 ( 0.00%)                          hir::BinOpKind::Or => ExprKind::LogicalOp {
        .                                       op: LogicalOp::Or,
       18 ( 0.00%)                              lhs: self.mirror_expr(lhs),
       18 ( 0.00%)                              rhs: self.mirror_expr(rhs),
        .                                   },
        .                                   _ => {
      268 ( 0.00%)                              let op = bin_op(op.node);
      335 ( 0.00%)                              ExprKind::Binary {
        .                                           op,
       67 ( 0.00%)                                  lhs: self.mirror_expr(lhs),
       67 ( 0.00%)                                  rhs: self.mirror_expr(rhs),
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Index(ref lhs, ref index) => {
      185 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let lhs = self.mirror_expr(lhs);
        .                               let index = self.mirror_expr(index);
      221 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([lhs, index]), expr.span)
        .                           } else {
       80 ( 0.00%)                      ExprKind::Index { lhs: self.mirror_expr(lhs), index: self.mirror_expr(index) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Deref, ref arg) => {
      695 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        9 ( 0.00%)                      self.overloaded_place(expr, expr_ty, None, Box::new([arg]), expr.span)
        .                           } else {
      414 ( 0.00%)                      ExprKind::Deref { arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Not, ref arg) => {
       80 ( 0.00%)                  if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else {
       48 ( 0.00%)                      ExprKind::Unary { op: UnOp::Not, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
        .                       hir::ExprKind::Unary(hir::UnOp::Neg, ref arg) => {
        .                           if self.typeck_results().is_method_call(expr) {
        .                               let arg = self.mirror_expr(arg);
        .                               self.overloaded_operator(expr, Box::new([arg]))
        .                           } else if let hir::ExprKind::Lit(ref lit) = arg.kind {
-- line 362 ----------------------------------------
-- line 365 ----------------------------------------
        .                                   user_ty: None,
        .                                   const_id: None,
        .                               }
        .                           } else {
        .                               ExprKind::Unary { op: UnOp::Neg, arg: self.mirror_expr(arg) }
        .                           }
        .                       }
        .           
       58 ( 0.00%)              hir::ExprKind::Struct(ref qpath, ref fields, ref base) => match expr_ty.kind() {
       58 ( 0.00%)                  ty::Adt(adt, substs) => match adt.adt_kind() {
        .                               AdtKind::Struct | AdtKind::Union => {
       75 ( 0.00%)                          let user_provided_types = self.typeck_results().user_provided_types();
      100 ( 0.00%)                          let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                   debug!("make_mirror_unadjusted: (struct/union) user_ty={:?}", user_ty);
      100 ( 0.00%)                          ExprKind::Adt(Box::new(Adt {
       50 ( 0.00%)                              adt_def: adt,
        .                                       variant_index: VariantIdx::new(0),
       50 ( 0.00%)                              substs,
        .                                       user_ty,
       50 ( 0.00%)                              fields: self.field_refs(fields),
      100 ( 0.00%)                              base: base.as_ref().map(|base| FruInfo {
        .                                           base: self.mirror_expr(base),
        .                                           field_types: self.typeck_results().fru_field_types()[expr.hir_id]
        .                                               .iter()
        .                                               .copied()
        .                                               .collect(),
        .                                       }),
        .                                   }))
        .                               }
        .                               AdtKind::Enum => {
       24 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
       16 ( 0.00%)                          match res {
       12 ( 0.00%)                              Res::Def(DefKind::Variant, variant_id) => {
        4 ( 0.00%)                                  assert!(base.is_none());
        .           
       12 ( 0.00%)                                  let index = adt.variant_index_with_id(variant_id);
        .                                           let user_provided_types =
       16 ( 0.00%)                                      self.typeck_results().user_provided_types();
       16 ( 0.00%)                                  let user_ty = user_provided_types.get(expr.hir_id).copied();
        .                                           debug!("make_mirror_unadjusted: (variant) user_ty={:?}", user_ty);
        .                                           ExprKind::Adt(Box::new(Adt {
        4 ( 0.00%)                                      adt_def: adt,
        .                                               variant_index: index,
        8 ( 0.00%)                                      substs,
        .                                               user_ty,
        8 ( 0.00%)                                      fields: self.field_refs(fields),
        .                                               base: None,
        .                                           }))
        .                                       }
        .                                       _ => {
        .                                           span_bug!(expr.span, "unexpected res: {:?}", res);
        .                                       }
        .                                   }
        .                               }
        .                           },
        .                           _ => {
        .                               span_bug!(expr.span, "unexpected type for struct literal: {:?}", expr_ty);
        .                           }
        .                       },
        .           
        .                       hir::ExprKind::Closure(..) => {
       57 ( 0.00%)                  let closure_ty = self.typeck_results().expr_ty(expr);
       57 ( 0.00%)                  let (def_id, substs, movability) = match *closure_ty.kind() {
        .                               ty::Closure(def_id, substs) => (def_id, UpvarSubsts::Closure(substs), None),
        .                               ty::Generator(def_id, substs, movability) => {
        .                                   (def_id, UpvarSubsts::Generator(substs), Some(movability))
        .                               }
        .                               _ => {
        .                                   span_bug!(expr.span, "closure expr w/o closure type: {:?}", closure_ty);
        .                               }
        .                           };
        .           
      114 ( 0.00%)                  let upvars = self
        .                               .typeck_results
        .                               .closure_min_captures_flattened(def_id)
        .                               .zip(substs.upvar_tys())
        .                               .map(|(captured_place, ty)| {
       45 ( 0.00%)                          let upvars = self.capture_upvar(expr, captured_place, ty);
      126 ( 0.00%)                          self.thir.exprs.push(upvars)
        .                               })
        .                               .collect();
        .           
        .                           // Convert the closure fake reads, if any, from hir `Place` to ExprRef
       19 ( 0.00%)                  let fake_reads = match self.typeck_results.closure_fake_reads.get(&def_id) {
        .                               Some(fake_reads) => fake_reads
        .                                   .iter()
        .                                   .map(|(place, cause, hir_id)| {
        .                                       let expr = self.convert_captured_hir_place(expr, place.clone());
        .                                       (self.thir.exprs.push(expr), *cause, *hir_id)
        .                                   })
        .                                   .collect(),
        .                               None => Vec::new(),
        .                           };
        .           
      361 ( 0.00%)                  ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }
        .                       }
        .           
   10,786 ( 0.00%)              hir::ExprKind::Path(ref qpath) => {
   43,144 ( 0.00%)                  let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
   43,144 ( 0.00%)                  self.convert_path_expr(expr, res)
        .                       }
        .           
        .                       hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {
        .                           template: asm.template,
        .                           operands: asm
        .                               .operands
        .                               .iter()
        .                               .map(|(op, _op_sp)| {
-- line 472 ----------------------------------------
-- line 572 ----------------------------------------
        .                       hir::ExprKind::ConstBlock(ref anon_const) => {
        .                           let anon_const_def_id = self.tcx.hir().local_def_id(anon_const.hir_id);
        .                           let value = ty::Const::from_inline_const(self.tcx, anon_const_def_id);
        .           
        .                           ExprKind::ConstBlock { value }
        .                       }
        .                       // Now comes the rote stuff:
        .                       hir::ExprKind::Repeat(ref v, _) => {
       15 ( 0.00%)                  let ty = self.typeck_results().expr_ty(expr);
       10 ( 0.00%)                  let count = match ty.kind() {
        .                               ty::Array(_, ct) => ct,
        .                               _ => span_bug!(expr.span, "unexpected repeat expr ty: {:?}", ty),
        .                           };
        .           
       30 ( 0.00%)                  ExprKind::Repeat { value: self.mirror_expr(v), count }
        .                       }
        .                       hir::ExprKind::Ret(ref v) => {
       93 ( 0.00%)                  ExprKind::Return { value: v.as_ref().map(|v| self.mirror_expr(v)) }
        .                       }
       21 ( 0.00%)              hir::ExprKind::Break(dest, ref value) => match dest.target_id {
       35 ( 0.00%)                  Ok(target_id) => ExprKind::Break {
        .                               label: region::Scope { id: target_id.local_id, data: region::ScopeData::Node },
        .                               value: value.as_ref().map(|value| self.mirror_expr(value)),
        .                           },
        .                           Err(err) => bug!("invalid loop id for break: {}", err),
        .                       },
        .                       hir::ExprKind::Continue(dest) => match dest.target_id {
        .                           Ok(loop_id) => ExprKind::Continue {
        .                               label: region::Scope { id: loop_id.local_id, data: region::ScopeData::Node },
        .                           },
        .                           Err(err) => bug!("invalid loop id for continue: {}", err),
        .                       },
      200 ( 0.00%)              hir::ExprKind::Let(let_expr) => ExprKind::Let {
       25 ( 0.00%)                  expr: self.mirror_expr(let_expr.init),
       75 ( 0.00%)                  pat: self.pattern_from_hir(let_expr.pat),
        .                       },
      979 ( 0.00%)              hir::ExprKind::If(cond, then, else_opt) => ExprKind::If {
        .                           if_then_scope: region::Scope {
       89 ( 0.00%)                      id: then.hir_id.local_id,
        .                               data: region::ScopeData::IfThen,
        .                           },
        .                           cond: self.mirror_expr(cond),
        .                           then: self.mirror_expr(then),
        .                           else_opt: else_opt.map(|el| self.mirror_expr(el)),
        .                       },
      315 ( 0.00%)              hir::ExprKind::Match(ref discr, ref arms, _) => ExprKind::Match {
       63 ( 0.00%)                  scrutinee: self.mirror_expr(discr),
      462 ( 0.00%)                  arms: arms.iter().map(|a| self.convert_arm(a)).collect(),
        .                       },
        .                       hir::ExprKind::Loop(ref body, ..) => {
       35 ( 0.00%)                  let block_ty = self.typeck_results().node_type(body.hir_id);
       42 ( 0.00%)                  let temp_lifetime = self.region_scope_tree.temporary_scope(body.hir_id.local_id);
       28 ( 0.00%)                  let block = self.mirror_block(body);
      105 ( 0.00%)                  let body = self.thir.exprs.push(Expr {
        .                               ty: block_ty,
        .                               temp_lifetime,
        7 ( 0.00%)                      span: block.span,
       56 ( 0.00%)                      kind: ExprKind::Block { body: block },
        .                           });
       21 ( 0.00%)                  ExprKind::Loop { body }
        .                       }
      280 ( 0.00%)              hir::ExprKind::Field(ref source, ..) => ExprKind::Field {
       70 ( 0.00%)                  lhs: self.mirror_expr(source),
      420 ( 0.00%)                  name: Field::new(self.tcx.field_index(expr.hir_id, self.typeck_results)),
        .                       },
        .                       hir::ExprKind::Cast(ref source, ref cast_ty) => {
        .                           // Check for a user-given type annotation on this `cast`
       48 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
       72 ( 0.00%)                  let user_ty = user_provided_types.get(cast_ty.hir_id);
        .           
        .                           debug!(
        .                               "cast({:?}) has ty w/ hir_id {:?} and user provided ty {:?}",
        .                               expr, cast_ty.hir_id, user_ty,
        .                           );
        .           
        .                           // Check to see if this cast is a "coercion cast", where the cast is actually done
        .                           // using a coercion (or is a no-op).
       72 ( 0.00%)                  let cast = if self.typeck_results().is_coercion_cast(source.hir_id) {
        .                               // Convert the lexpr to a vexpr.
        .                               ExprKind::Use { source: self.mirror_expr(source) }
       36 ( 0.00%)                  } else if self.typeck_results().expr_ty(source).is_region_ptr() {
        .                               // Special cased so that we can type check that the element
        .                               // type of the source matches the pointed to type of the
        .                               // destination.
        .                               ExprKind::Pointer {
        .                                   source: self.mirror_expr(source),
        .                                   cast: PointerCast::ArrayToPointer,
        .                               }
        .                           } else {
-- line 660 ----------------------------------------
-- line 664 ----------------------------------------
        .                               // enum's layout (or its tag type) to compute it during const eval
        .                               // Example:
        .                               // enum Foo {
        .                               //     A,
        .                               //     B = A as isize + 4,
        .                               // }
        .                               // The correct solution would be to add symbolic computations to miri,
        .                               // so we wouldn't have to compute and store the actual value
       38 ( 0.00%)                      let var = if let hir::ExprKind::Path(ref qpath) = source.kind {
       12 ( 0.00%)                          let res = self.typeck_results().qpath_res(qpath, source.hir_id);
       14 ( 0.00%)                          self.typeck_results().node_type(source.hir_id).ty_adt_def().and_then(
        .                                       |adt_def| match res {
        .                                           Res::Def(
        .                                               DefKind::Ctor(CtorOf::Variant, CtorKind::Const),
        .                                               variant_ctor_id,
        .                                           ) => {
        .                                               let idx = adt_def.variant_index_with_ctor_id(variant_ctor_id);
        .                                               let (d, o) = adt_def.discriminant_def_for_variant(idx);
        .                                               use rustc_middle::ty::util::IntTypeExt;
-- line 682 ----------------------------------------
-- line 683 ----------------------------------------
        .                                               let ty = adt_def.repr.discr_type();
        .                                               let ty = ty.to_ty(self.tcx());
        .                                               Some((d, o, ty))
        .                                           }
        .                                           _ => None,
        .                                       },
        .                                   )
        .                               } else {
       20 ( 0.00%)                          None
        .                               };
        .           
        6 ( 0.00%)                      let source = if let Some((did, offset, var_ty)) = var {
        .                                   let mk_const = |literal| Expr {
        .                                       temp_lifetime,
        .                                       ty: var_ty,
        .                                       span: expr.span,
        .                                       kind: ExprKind::Literal { literal, user_ty: None, const_id: None },
        .                                   };
        .                                   let offset = self.thir.exprs.push(mk_const(ty::Const::from_bits(
        .                                       self.tcx,
-- line 702 ----------------------------------------
-- line 723 ----------------------------------------
        .                                               ty: var_ty,
        .                                               span: expr.span,
        .                                               kind: bin,
        .                                           })
        .                                       }
        .                                       None => offset,
        .                                   }
        .                               } else {
        2 ( 0.00%)                          self.mirror_expr(source)
        .                               };
        .           
        .                               ExprKind::Cast { source: source }
        .                           };
        .           
       24 ( 0.00%)                  if let Some(user_ty) = user_ty {
        .                               // NOTE: Creating a new Expr and wrapping a Cast inside of it may be
        .                               //       inefficient, revisit this when performance becomes an issue.
        .                               let cast_expr = self.thir.exprs.push(Expr {
        .                                   temp_lifetime,
        .                                   ty: expr_ty,
        .                                   span: expr.span,
        .                                   kind: cast,
        .                               });
        .                               debug!("make_mirror_unadjusted: (cast) user_ty={:?}", user_ty);
        .           
        .                               ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }
        .                           } else {
       48 ( 0.00%)                      cast
        .                           }
        .                       }
        .                       hir::ExprKind::Type(ref source, ref ty) => {
        .                           let user_provided_types = self.typeck_results.user_provided_types();
        .                           let user_ty = user_provided_types.get(ty.hir_id).copied();
        .                           debug!("make_mirror_unadjusted: (type) user_ty={:?}", user_ty);
        .                           let mirrored = self.mirror_expr(source);
        .                           if source.is_syntactic_place_expr() {
        .                               ExprKind::PlaceTypeAscription { source: mirrored, user_ty }
        .                           } else {
        .                               ExprKind::ValueTypeAscription { source: mirrored, user_ty }
        .                           }
        .                       }
        .                       hir::ExprKind::DropTemps(ref source) => {
      276 ( 0.00%)                  ExprKind::Use { source: self.mirror_expr(source) }
        .                       }
        .                       hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },
        .                       hir::ExprKind::Array(ref fields) => {
   49,690 ( 0.00%)                  ExprKind::Array { fields: self.mirror_exprs(fields) }
        .                       }
    4,465 ( 0.00%)              hir::ExprKind::Tup(ref fields) => ExprKind::Tuple { fields: self.mirror_exprs(fields) },
        .           
        .                       hir::ExprKind::Yield(ref v, _) => ExprKind::Yield { value: self.mirror_expr(v) },
        .                       hir::ExprKind::Err => unreachable!(),
        .                   };
        .           
2,176,952 ( 0.04%)          Expr { temp_lifetime, ty: expr_ty, span: expr.span, kind }
  512,224 ( 0.01%)      }
        .           
   92,997 ( 0.00%)      fn user_substs_applied_to_res(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   res: Res,
        .               ) -> Option<ty::CanonicalUserType<'tcx>> {
        .                   debug!("user_substs_applied_to_res: res={:?}", res);
   61,998 ( 0.00%)          let user_provided_type = match res {
        .                       // A reference to something callable -- e.g., a fn, method, or
        .                       // a tuple-struct or tuple-variant. This has the type of a
        .                       // `Fn` but with the user-given substitutions.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::Def(DefKind::Const, _)
        .                       | Res::Def(DefKind::AssocConst, _) => {
   72,331 ( 0.00%)                  self.typeck_results().user_provided_types().get(hir_id).copied()
        .                       }
        .           
        .                       // A unit struct/variant which is used as a value (e.g.,
        .                       // `None`). This has the type of the enum/struct that defines
        .                       // this variant -- but with the substitutions given by the
        .                       // user.
        .                       Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {
        .                           self.user_substs_applied_to_ty_of_hir_id(hir_id)
-- line 803 ----------------------------------------
-- line 805 ----------------------------------------
        .           
        .                       // `Self` is used in expression as a tuple struct constructor or a unit struct constructor
        .                       Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),
        .           
        .                       _ => bug!("user_substs_applied_to_res: unexpected res {:?} at {:?}", res, hir_id),
        .                   };
        .                   debug!("user_substs_applied_to_res: user_provided_type={:?}", user_provided_type);
        .                   user_provided_type
   61,998 ( 0.00%)      }
        .           
    3,536 ( 0.00%)      fn method_callee(
        .                   &mut self,
        .                   expr: &hir::Expr<'_>,
        .                   span: Span,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .               ) -> Expr<'tcx> {
    1,632 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
    2,176 ( 0.00%)          let (def_id, substs, user_ty) = match overloaded_callee {
        .                       Some((def_id, substs)) => (def_id, substs, None),
        .                       None => {
        .                           let (kind, def_id) =
    2,331 ( 0.00%)                      self.typeck_results().type_dependent_def(expr.hir_id).unwrap_or_else(|| {
        .                                   span_bug!(expr.span, "no type-dependent def for method callee")
        .                               });
    3,885 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, Res::Def(kind, def_id));
        .                           debug!("method_callee: user_ty={:?}", user_ty);
    3,885 ( 0.00%)                  (def_id, self.typeck_results().node_substs(expr.hir_id), user_ty)
        .                       }
        .                   };
        .                   let ty = self.tcx().mk_fn_def(def_id, substs);
    3,536 ( 0.00%)          Expr {
        .                       temp_lifetime,
        .                       ty,
        .                       span,
        .                       kind: ExprKind::Literal {
        .                           literal: ty::Const::zero_sized(self.tcx(), ty),
    1,632 ( 0.00%)                  user_ty,
        .                           const_id: None,
        .                       },
        .                   }
    2,176 ( 0.00%)      }
        .           
    1,197 ( 0.00%)      fn convert_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) -> ArmId {
    1,064 ( 0.00%)          let arm = Arm {
      399 ( 0.00%)              pattern: self.pattern_from_hir(&arm.pat),
        .                       guard: arm.guard.as_ref().map(|g| match g {
        .                           hir::Guard::If(ref e) => Guard::If(self.mirror_expr(e)),
        .                           hir::Guard::IfLet(ref pat, ref e) => {
        .                               Guard::IfLet(self.pattern_from_hir(pat), self.mirror_expr(e))
        .                           }
        .                       }),
      133 ( 0.00%)              body: self.mirror_expr(arm.body),
      266 ( 0.00%)              lint_level: LintLevel::Explicit(arm.hir_id),
        .                       scope: region::Scope { id: arm.hir_id.local_id, data: region::ScopeData::Node },
      133 ( 0.00%)              span: arm.span,
        .                   };
    1,995 ( 0.00%)          self.thir.arms.push(arm)
    1,197 ( 0.00%)      }
        .           
        .               fn convert_path_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, res: Res) -> ExprKind<'tcx> {
   75,502 ( 0.00%)          let substs = self.typeck_results().node_substs(expr.hir_id);
   75,872 ( 0.00%)          match res {
        .                       // A regular function, constructor function or a constant.
        .                       Res::Def(DefKind::Fn, _)
        .                       | Res::Def(DefKind::AssocFn, _)
        .                       | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)
        .                       | Res::SelfCtor(..) => {
  100,580 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: user_ty={:?}", user_ty);
   10,058 ( 0.00%)                  ExprKind::Literal {
        .                               literal: ty::Const::zero_sized(
   20,116 ( 0.00%)                          self.tcx,
   30,174 ( 0.00%)                          self.typeck_results().node_type(expr.hir_id),
        .                               ),
   80,464 ( 0.00%)                      user_ty,
        .                               const_id: None,
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::ConstParam, def_id) => {
        .                           let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id.expect_local());
        .                           let item_id = self.tcx.hir().get_parent_node(hir_id);
        .                           let item_def_id = self.tcx.hir().local_def_id(item_id);
-- line 887 ----------------------------------------
-- line 895 ----------------------------------------
        .                                   ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
        .                               user_ty: None,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
        .                       Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {
      144 ( 0.00%)                  let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);
        .                           debug!("convert_path_expr: (const) user_ty={:?}", user_ty);
       80 ( 0.00%)                  ExprKind::Literal {
      192 ( 0.00%)                      literal: self.tcx.mk_const(ty::Const {
        .                                   val: ty::ConstKind::Unevaluated(ty::Unevaluated::new(
        .                                       ty::WithOptConstParam::unknown(def_id),
        .                                       substs,
        .                                   )),
       48 ( 0.00%)                          ty: self.typeck_results().node_type(expr.hir_id),
        .                               }),
      128 ( 0.00%)                      user_ty,
        .                               const_id: Some(def_id),
        .                           }
        .                       }
        .           
      370 ( 0.00%)              Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {
      370 ( 0.00%)                  let user_provided_types = self.typeck_results.user_provided_types();
      296 ( 0.00%)                  let user_provided_type = user_provided_types.get(expr.hir_id).copied();
        .                           debug!("convert_path_expr: user_provided_type={:?}", user_provided_type);
      296 ( 0.00%)                  let ty = self.typeck_results().node_type(expr.hir_id);
      148 ( 0.00%)                  match ty.kind() {
        .                               // A unit struct/variant which is used as a value.
        .                               // We return a completely different ExprKind here to account for this special case.
        .                               ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {
       74 ( 0.00%)                          adt_def,
      370 ( 0.00%)                          variant_index: adt_def.variant_index_with_ctor_id(def_id),
       74 ( 0.00%)                          substs,
        .                                   user_ty: user_provided_type,
        .                                   fields: Box::new([]),
        .                                   base: None,
        .                               })),
        .                               _ => bug!("unexpected ty: {:?}", ty),
        .                           }
        .                       }
        .           
-- line 937 ----------------------------------------
-- line 953 ----------------------------------------
        .                                   def_id: id,
        .                               }
        .                           };
        .                           ExprKind::Deref {
        .                               arg: self.thir.exprs.push(Expr { ty, temp_lifetime, span: expr.span, kind }),
        .                           }
        .                       }
        .           
    5,104 ( 0.00%)              Res::Local(var_hir_id) => self.convert_var(var_hir_id),
        .           
        .                       _ => span_bug!(expr.span, "res `{:?}` not yet implemented", res),
        .                   }
        .               }
        .           
    6,470 ( 0.00%)      fn convert_var(&mut self, var_hir_id: hir::HirId) -> ExprKind<'tcx> {
        .                   // We want upvars here not captures.
        .                   // Captures will be handled in MIR.
        .                   let is_upvar = self
        .                       .tcx
        .                       .upvars_mentioned(self.body_owner)
        .                       .map_or(false, |upvars| upvars.contains_key(&var_hir_id));
        .           
        .                   debug!(
        .                       "convert_var({:?}): is_upvar={}, body_owner={:?}",
        .                       var_hir_id, is_upvar, self.body_owner
        .                   );
        .           
       23 ( 0.00%)          if is_upvar {
       70 ( 0.00%)              ExprKind::UpvarRef { closure_def_id: self.body_owner, var_hir_id }
        .                   } else {
    1,911 ( 0.00%)              ExprKind::VarRef { id: var_hir_id }
        .                   }
    5,176 ( 0.00%)      }
        .           
      319 ( 0.00%)      fn overloaded_operator(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   args: Box<[ExprId]>,
        .               ) -> ExprKind<'tcx> {
      203 ( 0.00%)          let fun = self.method_callee(expr, expr.span, None);
      435 ( 0.00%)          let fun = self.thir.exprs.push(fun);
      203 ( 0.00%)          ExprKind::Call {
      145 ( 0.00%)              ty: self.thir[fun].ty,
        .                       fun,
        .                       args,
        .                       from_hir_call: false,
        .                       fn_span: expr.span,
        .                   }
      232 ( 0.00%)      }
        .           
      434 ( 0.00%)      fn overloaded_place(
        .                   &mut self,
        .                   expr: &'tcx hir::Expr<'tcx>,
        .                   place_ty: Ty<'tcx>,
        .                   overloaded_callee: Option<(DefId, SubstsRef<'tcx>)>,
        .                   args: Box<[ExprId]>,
        .                   span: Span,
        .               ) -> ExprKind<'tcx> {
        .                   // For an overloaded *x or x[y] expression of type T, the method
        .                   // call returns an &T and we must add the deref so that the types
        .                   // line up (this is because `*x` and `x[y]` represent places):
        .           
        .                   // Reconstruct the output assuming it's a reference with the
        .                   // same region and mutability as the receiver. This holds for
        .                   // `Deref(Mut)::Deref(_mut)` and `Index(Mut)::index(_mut)`.
      248 ( 0.00%)          let (region, mutbl) = match *self.thir[args[0]].ty.kind() {
       62 ( 0.00%)              ty::Ref(region, _, mutbl) => (region, mutbl),
        .                       _ => span_bug!(span, "overloaded_place: receiver is not a reference"),
        .                   };
       31 ( 0.00%)          let ref_ty = self.tcx.mk_ref(region, ty::TypeAndMut { ty: place_ty, mutbl });
        .           
        .                   // construct the complete expression `foo()` for the overloaded call,
        .                   // which will yield the &T type
      124 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);
      186 ( 0.00%)          let fun = self.method_callee(expr, span, overloaded_callee);
      434 ( 0.00%)          let fun = self.thir.exprs.push(fun);
      186 ( 0.00%)          let fun_ty = self.thir[fun].ty;
      434 ( 0.00%)          let ref_expr = self.thir.exprs.push(Expr {
        .                       temp_lifetime,
        .                       ty: ref_ty,
        .                       span,
        .                       kind: ExprKind::Call { ty: fun_ty, fun, args, from_hir_call: false, fn_span: span },
        .                   });
        .           
        .                   // construct and return a deref wrapper `*foo()`
       62 ( 0.00%)          ExprKind::Deref { arg: ref_expr }
      248 ( 0.00%)      }
        .           
       99 ( 0.00%)      fn convert_captured_hir_place(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   place: HirPlace<'tcx>,
        .               ) -> Expr<'tcx> {
       36 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .                   let var_ty = place.base_ty;
        .           
        .                   // The result of capture analysis in `rustc_typeck/check/upvar.rs`represents a captured path
        .                   // as it's seen for use within the closure and not at the time of closure creation.
        .                   //
        .                   // That is we see expect to see it start from a captured upvar and not something that is local
        .                   // to the closure's parent.
       18 ( 0.00%)          let var_hir_id = match place.base {
       18 ( 0.00%)              HirPlaceBase::Upvar(upvar_id) => upvar_id.var_path.hir_id,
        .                       base => bug!("Expected an upvar, found {:?}", base),
        .                   };
        .           
      153 ( 0.00%)          let mut captured_place_expr = Expr {
        .                       temp_lifetime,
        .                       ty: var_ty,
        9 ( 0.00%)              span: closure_expr.span,
       45 ( 0.00%)              kind: self.convert_var(var_hir_id),
        .                   };
        .           
        .                   for proj in place.projections.iter() {
        .                       let kind = match proj.kind {
        .                           HirProjectionKind::Deref => {
        .                               ExprKind::Deref { arg: self.thir.exprs.push(captured_place_expr) }
        .                           }
        .                           HirProjectionKind::Field(field, ..) => {
-- line 1071 ----------------------------------------
-- line 1082 ----------------------------------------
        .                           }
        .                       };
        .           
        .                       captured_place_expr =
        .                           Expr { temp_lifetime, ty: proj.ty, span: closure_expr.span, kind };
        .                   }
        .           
        .                   captured_place_expr
       81 ( 0.00%)      }
        .           
       90 ( 0.00%)      fn capture_upvar(
        .                   &mut self,
        .                   closure_expr: &'tcx hir::Expr<'tcx>,
        .                   captured_place: &'tcx ty::CapturedPlace<'tcx>,
        .                   upvar_ty: Ty<'tcx>,
        .               ) -> Expr<'tcx> {
        .                   let upvar_capture = captured_place.info.capture_kind;
        .                   let captured_place_expr =
       63 ( 0.00%)              self.convert_captured_hir_place(closure_expr, captured_place.place.clone());
       27 ( 0.00%)          let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);
        .           
       18 ( 0.00%)          match upvar_capture {
        .                       ty::UpvarCapture::ByValue => captured_place_expr,
        .                       ty::UpvarCapture::ByRef(upvar_borrow) => {
       45 ( 0.00%)                  let borrow_kind = match upvar_borrow {
        .                               ty::BorrowKind::ImmBorrow => BorrowKind::Shared,
        .                               ty::BorrowKind::UniqueImmBorrow => BorrowKind::Unique,
        .                               ty::BorrowKind::MutBorrow => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                           };
       63 ( 0.00%)                  Expr {
        .                               temp_lifetime,
        .                               ty: upvar_ty,
        9 ( 0.00%)                      span: closure_expr.span,
        .                               kind: ExprKind::Borrow {
        .                                   borrow_kind,
      135 ( 0.00%)                          arg: self.thir.exprs.push(captured_place_expr),
        .                               },
        .                           }
        .                       }
        .                   }
       81 ( 0.00%)      }
        .           
        .               /// Converts a list of named fields (i.e., for struct-like struct/enum ADTs) into FieldExpr.
        .               fn field_refs(&mut self, fields: &'tcx [hir::ExprField<'tcx>]) -> Box<[FieldExpr]> {
        .                   fields
        .                       .iter()
        .                       .map(|field| FieldExpr {
      189 ( 0.00%)                  name: Field::new(self.tcx.field_index(field.hir_id, self.typeck_results)),
        .                           expr: self.mirror_expr(field.expr),
        .                       })
        .                       .collect()
        .               }
        .           }
        .           
        .           trait ToBorrowKind {
        .               fn to_borrow_kind(&self) -> BorrowKind;
        .           }
        .           
        .           impl ToBorrowKind for AutoBorrowMutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
        .                   use rustc_middle::ty::adjustment::AllowTwoPhase;
    3,500 ( 0.00%)          match *self {
        .                       AutoBorrowMutability::Mut { allow_two_phase_borrow } => BorrowKind::Mut {
        .                           allow_two_phase_borrow: match allow_two_phase_borrow {
        .                               AllowTwoPhase::Yes => true,
        .                               AllowTwoPhase::No => false,
        .                           },
        .                       },
        .                       AutoBorrowMutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
        .           impl ToBorrowKind for hir::Mutability {
        .               fn to_borrow_kind(&self) -> BorrowKind {
       26 ( 0.00%)          match *self {
        .                       hir::Mutability::Mut => BorrowKind::Mut { allow_two_phase_borrow: false },
        .                       hir::Mutability::Not => BorrowKind::Shared,
        .                   }
        .               }
        .           }
        .           
      142 ( 0.00%)  fn bin_op(op: hir::BinOpKind) -> BinOp {
      639 ( 0.00%)      match op {
        .                   hir::BinOpKind::Add => BinOp::Add,
        .                   hir::BinOpKind::Sub => BinOp::Sub,
        .                   hir::BinOpKind::Mul => BinOp::Mul,
        .                   hir::BinOpKind::Div => BinOp::Div,
        .                   hir::BinOpKind::Rem => BinOp::Rem,
        .                   hir::BinOpKind::BitXor => BinOp::BitXor,
        .                   hir::BinOpKind::BitAnd => BinOp::BitAnd,
        .                   hir::BinOpKind::BitOr => BinOp::BitOr,
-- line 1173 ----------------------------------------
-- line 1176 ----------------------------------------
        .                   hir::BinOpKind::Eq => BinOp::Eq,
        .                   hir::BinOpKind::Lt => BinOp::Lt,
        .                   hir::BinOpKind::Le => BinOp::Le,
        .                   hir::BinOpKind::Ne => BinOp::Ne,
        .                   hir::BinOpKind::Ge => BinOp::Ge,
        .                   hir::BinOpKind::Gt => BinOp::Gt,
        .                   _ => bug!("no equivalent for ast binop {:?}", op),
        .               }
      142 ( 0.00%)  }

  858,178 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_build/src/thir/cx/expr.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 26 ----------------------------------------
        .           pub struct UnmatchedBrace {
        .               pub expected_delim: token::DelimToken,
        .               pub found_delim: Option<token::DelimToken>,
        .               pub found_span: Span,
        .               pub unclosed_span: Option<Span>,
        .               pub candidate_span: Option<Span>,
        .           }
        .           
       28 ( 0.00%)  crate fn parse_token_trees<'a>(
        .               sess: &'a ParseSess,
        .               src: &'a str,
        .               start_pos: BytePos,
        .               override_span: Option<Span>,
        .           ) -> (PResult<'a, TokenStream>, Vec<UnmatchedBrace>) {
        .               StringReader { sess, start_pos, pos: start_pos, end_src_index: src.len(), src, override_span }
        .                   .into_token_trees()
       18 ( 0.00%)  }
        .           
        .           struct StringReader<'a> {
        .               sess: &'a ParseSess,
        .               /// Initial position, read-only.
        .               start_pos: BytePos,
        .               /// The absolute offset within the source_map of the current character.
        .               pos: BytePos,
        .               /// Stop reading src at this index.
-- line 50 ----------------------------------------
-- line 51 ----------------------------------------
        .               end_src_index: usize,
        .               /// Source text to tokenize.
        .               src: &'a str,
        .               override_span: Option<Span>,
        .           }
        .           
        .           impl<'a> StringReader<'a> {
        .               fn mk_sp(&self, lo: BytePos, hi: BytePos) -> Span {
  171,263 ( 0.00%)          self.override_span.unwrap_or_else(|| Span::with_root_ctxt(lo, hi))
        .               }
        .           
        .               /// Returns the next token, and info about preceding whitespace, if any.
1,044,365 ( 0.02%)      fn next_token(&mut self) -> (Spacing, Token) {
        .                   let mut spacing = Spacing::Joint;
        .           
        .                   // Skip `#!` at the start of the file
  298,390 ( 0.00%)          let start_src_index = self.src_index(self.pos);
  447,585 ( 0.01%)          let text: &str = &self.src[start_src_index..self.end_src_index];
        .                   let is_beginning_of_file = self.pos == self.start_pos;
  149,195 ( 0.00%)          if is_beginning_of_file {
        8 ( 0.00%)              if let Some(shebang_len) = rustc_lexer::strip_shebang(text) {
        .                           self.pos = self.pos + BytePos::from_usize(shebang_len);
        .                           spacing = Spacing::Alone;
        .                       }
        .                   }
        .           
        .                   // Skip trivial (whitespace & comments) tokens
        .                   loop {
  218,177 ( 0.00%)              let start_src_index = self.src_index(self.pos);
  551,058 ( 0.01%)              let text: &str = &self.src[start_src_index..self.end_src_index];
        .           
  183,686 ( 0.00%)              if text.is_empty() {
        .                           let span = self.mk_sp(self.pos, self.pos);
       10 ( 0.00%)                  return (spacing, Token::new(token::Eof, span));
        .                       }
        .           
  551,052 ( 0.01%)              let token = rustc_lexer::first_token(text);
        .           
  367,368 ( 0.01%)              let start = self.pos;
  183,684 ( 0.00%)              self.pos = self.pos + BytePos::from_usize(token.len);
        .           
        .                       debug!("next_token: {:?}({:?})", token.kind, self.str_from(start));
        .           
1,470,540 ( 0.02%)              match self.cook_lexer_token(token.kind, start) {
1,193,544 ( 0.02%)                  Some(kind) => {
        .                               let span = self.mk_sp(start, self.pos);
  895,158 ( 0.01%)                      return (spacing, Token::new(kind, span));
        .                           }
        .                           None => spacing = Spacing::Alone,
        .                       }
        .                   }
1,342,755 ( 0.02%)      }
        .           
        .               /// Report a fatal lexical error with a given span.
        .               fn fatal_span(&self, sp: Span, m: &str) -> FatalError {
        .                   self.sess.span_diagnostic.span_fatal(sp, m)
        .               }
        .           
        .               /// Report a lexical error with a given span.
        .               fn err_span(&self, sp: Span, m: &str) {
-- line 110 ----------------------------------------
-- line 130 ----------------------------------------
        .               ) -> DiagnosticBuilder<'a> {
        .                   self.sess
        .                       .span_diagnostic
        .                       .struct_span_fatal(self.mk_sp(from_pos, to_pos), &format!("{}: {}", m, escaped_char(c)))
        .               }
        .           
        .               /// Detect usages of Unicode codepoints changing the direction of the text on screen and loudly
        .               /// complain about it.
      294 ( 0.00%)      fn lint_unicode_text_flow(&self, start: BytePos) {
        .                   // Opening delimiter of the length 2 is not included into the comment text.
        .                   let content_start = start + BytePos(2);
        .                   let content = self.str_from(content_start);
        .                   if contains_text_flow_control_chars(content) {
        .                       let span = self.mk_sp(start, self.pos);
        .                       self.sess.buffer_lint_with_diagnostic(
        .                           &TEXT_DIRECTION_CODEPOINT_IN_COMMENT,
        .                           span,
        .                           ast::CRATE_NODE_ID,
        .                           "unicode codepoint changing visible direction of text present in comment",
        .                           BuiltinLintDiagnostics::UnicodeTextFlow(span, content.to_string()),
        .                       );
        .                   }
      336 ( 0.00%)      }
        .           
        .               /// Turns simple `rustc_lexer::TokenKind` enum into a rich
        .               /// `rustc_ast::TokenKind`. This turns strings into interned
        .               /// symbols and runs additional validation.
        .               fn cook_lexer_token(&self, token: rustc_lexer::TokenKind, start: BytePos) -> Option<TokenKind> {
  918,420 ( 0.02%)          Some(match token {
      309 ( 0.00%)              rustc_lexer::TokenKind::LineComment { doc_style } => {
        .                           // Skip non-doc comments
    1,419 ( 0.00%)                  let doc_style = if let Some(doc_style) = doc_style {
        .                               doc_style
        .                           } else {
        .                               self.lint_unicode_text_flow(start);
        .                               return None;
        .                           };
        .           
        .                           // Opening delimiter of the length 3 is not included into the symbol.
        .                           let content_start = start + BytePos(3);
        .                           let content = self.str_from(content_start);
    1,335 ( 0.00%)                  self.cook_doc_comment(content_start, content, CommentKind::Line, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::BlockComment { doc_style, terminated } => {
        .                           if !terminated {
        .                               let msg = match doc_style {
        .                                   Some(_) => "unterminated block doc-comment",
        .                                   None => "unterminated block comment",
        .                               };
        .                               let last_bpos = self.pos;
-- line 179 ----------------------------------------
-- line 198 ----------------------------------------
        .                           let content_end = self.pos - BytePos(if terminated { 2 } else { 0 });
        .                           let content = self.str_from_to(content_start, content_end);
        .                           self.cook_doc_comment(content_start, content, CommentKind::Block, doc_style)
        .                       }
        .                       rustc_lexer::TokenKind::Whitespace => return None,
        .                       rustc_lexer::TokenKind::Ident
        .                       | rustc_lexer::TokenKind::RawIdent
        .                       | rustc_lexer::TokenKind::UnknownPrefix => {
   88,264 ( 0.00%)                  let is_raw_ident = token == rustc_lexer::TokenKind::RawIdent;
  110,330 ( 0.00%)                  let is_unknown_prefix = token == rustc_lexer::TokenKind::UnknownPrefix;
        .                           let mut ident_start = start;
   44,132 ( 0.00%)                  if is_raw_ident {
        .                               ident_start = ident_start + BytePos(2);
        .                           }
   66,198 ( 0.00%)                  if is_unknown_prefix {
        .                               self.report_unknown_prefix(start);
        .                           }
  110,330 ( 0.00%)                  let sym = nfc_normalize(self.str_from(ident_start));
        .                           let span = self.mk_sp(start, self.pos);
   88,264 ( 0.00%)                  self.sess.symbol_gallery.insert(sym, span);
   44,132 ( 0.00%)                  if is_raw_ident {
        .                               if !sym.can_be_raw() {
        .                                   self.err_span(span, &format!("`{}` cannot be a raw identifier", sym));
        .                               }
        .                               self.sess.raw_identifier_spans.borrow_mut().push(span);
        .                           }
  154,462 ( 0.00%)                  token::Ident(sym, is_raw_ident)
        .                       }
        .                       rustc_lexer::TokenKind::InvalidIdent
        .                           // Do not recover an identifier with emoji if the codepoint is a confusable
        .                           // with a recoverable substitution token, like `➖`.
        .                           if UNICODE_ARRAY
        .                               .iter()
        .                               .find(|&&(c, _, _)| {
        .                                   let sym = self.str_from(start);
-- line 232 ----------------------------------------
-- line 234 ----------------------------------------
        .                               })
        .                               .is_none() =>
        .                       {
        .                           let sym = nfc_normalize(self.str_from(start));
        .                           let span = self.mk_sp(start, self.pos);
        .                           self.sess.bad_unicode_identifiers.borrow_mut().entry(sym).or_default().push(span);
        .                           token::Ident(sym, false)
        .                       }
  493,696 ( 0.01%)              rustc_lexer::TokenKind::Literal { kind, suffix_start } => {
        .                           let suffix_start = start + BytePos(suffix_start as u32);
        .                           let (kind, symbol) = self.cook_lexer_literal(start, suffix_start, kind);
   92,568 ( 0.00%)                  let suffix = if suffix_start < self.pos {
        .                               let string = self.str_from(suffix_start);
        .                               if string == "_" {
        .                                   self.sess
        .                                       .span_diagnostic
        .                                       .struct_span_warn(
        .                                           self.mk_sp(suffix_start, self.pos),
        .                                           "underscore literal suffix is not allowed",
        .                                       )
-- line 253 ----------------------------------------
-- line 264 ----------------------------------------
        .                                       .emit();
        .                                   None
        .                               } else {
        .                                   Some(Symbol::intern(string))
        .                               }
        .                           } else {
        .                               None
        .                           };
  246,848 ( 0.00%)                  token::Literal(token::Lit { kind, symbol, suffix })
        .                       }
       76 ( 0.00%)              rustc_lexer::TokenKind::Lifetime { starts_with_number } => {
        .                           // Include the leading `'` in the real identifier, for macro
        .                           // expansion purposes. See #12512 for the gory details of why
        .                           // this is necessary.
        .                           let lifetime_name = self.str_from(start);
       38 ( 0.00%)                  if starts_with_number {
        .                               self.err_span_(start, self.pos, "lifetimes cannot start with a number");
        .                           }
      114 ( 0.00%)                  let ident = Symbol::intern(lifetime_name);
      152 ( 0.00%)                  token::Lifetime(ident)
        .                       }
        .                       rustc_lexer::TokenKind::Semi => token::Semi,
        .                       rustc_lexer::TokenKind::Comma => token::Comma,
        .                       rustc_lexer::TokenKind::Dot => token::Dot,
        .                       rustc_lexer::TokenKind::OpenParen => token::OpenDelim(token::Paren),
        .                       rustc_lexer::TokenKind::CloseParen => token::CloseDelim(token::Paren),
        .                       rustc_lexer::TokenKind::OpenBrace => token::OpenDelim(token::Brace),
        .                       rustc_lexer::TokenKind::CloseBrace => token::CloseDelim(token::Brace),
-- line 291 ----------------------------------------
-- line 324 ----------------------------------------
        .                               err.help("source files must contain UTF-8 encoded text, unexpected null bytes might occur when a different encoding is used");
        .                           }
        .                           err.emit();
        .                           token?
        .                       }
        .                   })
        .               }
        .           
    3,204 ( 0.00%)      fn cook_doc_comment(
        .                   &self,
        .                   content_start: BytePos,
        .                   content: &str,
        .                   comment_kind: CommentKind,
        .                   doc_style: DocStyle,
        .               ) -> TokenKind {
      267 ( 0.00%)          if content.contains('\r') {
        .                       for (idx, _) in content.char_indices().filter(|&(_, c)| c == '\r') {
        .                           self.err_span_(
        .                               content_start + BytePos(idx as u32),
        .                               content_start + BytePos(idx as u32 + 1),
        .                               match comment_kind {
        .                                   CommentKind::Line => "bare CR not allowed in doc-comment",
        .                                   CommentKind::Block => "bare CR not allowed in block doc-comment",
        .                               },
-- line 347 ----------------------------------------
-- line 349 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   let attr_style = match doc_style {
        .                       DocStyle::Outer => AttrStyle::Outer,
        .                       DocStyle::Inner => AttrStyle::Inner,
        .                   };
        .           
      801 ( 0.00%)          token::DocComment(comment_kind, attr_style, Symbol::intern(content))
    4,005 ( 0.00%)      }
        .           
        .               fn cook_lexer_literal(
        .                   &self,
        .                   start: BytePos,
        .                   suffix_start: BytePos,
        .                   kind: rustc_lexer::LiteralKind,
        .               ) -> (token::LitKind, Symbol) {
        .                   // prefix means `"` or `br"` or `r###"`, ...
        .                   let (lit_kind, mode, prefix_len, postfix_len) = match kind {
   30,138 ( 0.00%)              rustc_lexer::LiteralKind::Char { terminated } => {
   30,138 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated character literal",
        .                                   error_code!(E0762),
        .                               )
        .                           }
        .                           (token::Char, Mode::Char, 1, 1) // ' '
        .                       }
        5 ( 0.00%)              rustc_lexer::LiteralKind::Byte { terminated } => {
        5 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start + BytePos(1), suffix_start),
        .                                   "unterminated byte constant",
        .                                   error_code!(E0763),
        .                               )
        .                           }
        .                           (token::Byte, Mode::Byte, 2, 1) // b' '
        .                       }
      616 ( 0.00%)              rustc_lexer::LiteralKind::Str { terminated } => {
      616 ( 0.00%)                  if !terminated {
        .                               self.sess.span_diagnostic.span_fatal_with_code(
        .                                   self.mk_sp(start, suffix_start),
        .                                   "unterminated double quote string",
        .                                   error_code!(E0765),
        .                               )
        .                           }
        .                           (token::Str, Mode::Str, 1, 1) // " "
        .                       }
-- line 397 ----------------------------------------
-- line 410 ----------------------------------------
        .                           let n = u32::from(n_hashes);
        .                           (token::StrRaw(n_hashes), Mode::RawStr, 2 + n, 1 + n) // r##" "##
        .                       }
        .                       rustc_lexer::LiteralKind::RawByteStr { n_hashes, err } => {
        .                           self.report_raw_str_error(start, err);
        .                           let n = u32::from(n_hashes);
        .                           (token::ByteStrRaw(n_hashes), Mode::RawByteStr, 3 + n, 1 + n) // br##" "##
        .                       }
      194 ( 0.00%)              rustc_lexer::LiteralKind::Int { base, empty_int } => {
       97 ( 0.00%)                  return if empty_int {
        .                               self.sess
        .                                   .span_diagnostic
        .                                   .struct_span_err_with_code(
        .                                       self.mk_sp(start, suffix_start),
        .                                       "no valid digits found for number",
        .                                       error_code!(E0768),
        .                                   )
        .                                   .emit();
        .                               (token::Integer, sym::integer(0))
        .                           } else {
        .                               self.validate_int_literal(base, start, suffix_start);
      291 ( 0.00%)                      (token::Integer, self.symbol_from_to(start, suffix_start))
        .                           };
        .                       }
        .                       rustc_lexer::LiteralKind::Float { base, empty_exponent } => {
        .                           if empty_exponent {
        .                               self.err_span_(start, self.pos, "expected at least one digit in exponent");
        .                           }
        .           
        .                           match base {
-- line 439 ----------------------------------------
-- line 452 ----------------------------------------
        .                           }
        .           
        .                           let id = self.symbol_from_to(start, suffix_start);
        .                           return (token::Float, id);
        .                       }
        .                   };
        .                   let content_start = start + BytePos(prefix_len);
        .                   let content_end = suffix_start - BytePos(postfix_len);
   92,277 ( 0.00%)          let id = self.symbol_from_to(content_start, content_end);
        .                   self.validate_literal_escape(mode, content_start, content_end, prefix_len, postfix_len);
        .                   (lit_kind, id)
        .               }
        .           
        .               #[inline]
        .               fn src_index(&self, pos: BytePos) -> usize {
        .                   (pos - self.start_pos).to_usize()
        .               }
        .           
        .               /// Slice of the source text from `start` up to but excluding `self.pos`,
        .               /// meaning the slice does not include the character `self.ch`.
        .               fn str_from(&self, start: BytePos) -> &str {
  135,073 ( 0.00%)          self.str_from_to(start, self.pos)
        .               }
        .           
        .               /// As symbol_from, with an explicit endpoint.
        .               fn symbol_from_to(&self, start: BytePos, end: BytePos) -> Symbol {
        .                   debug!("taking an ident from {:?} to {:?}", start, end);
  369,787 ( 0.01%)          Symbol::intern(self.str_from_to(start, end))
        .               }
        .           
        .               /// Slice of the source text spanning from `start` up to but excluding `end`.
   84,028 ( 0.00%)      fn str_from_to(&self, start: BytePos, end: BytePos) -> &str {
        .                   &self.src[self.src_index(start)..self.src_index(end)]
  336,112 ( 0.01%)      }
        .           
        .               fn report_raw_str_error(&self, start: BytePos, opt_err: Option<RawStrError>) {
        .                   match opt_err {
        .                       Some(RawStrError::InvalidStarter { bad_char }) => {
        .                           self.report_non_started_raw_string(start, bad_char)
        .                       }
        .                       Some(RawStrError::NoTerminator { expected, found, possible_terminator_offset }) => self
        .                           .report_unterminated_raw_string(start, expected, possible_terminator_offset, found),
-- line 493 ----------------------------------------
-- line 609 ----------------------------------------
        .               fn validate_literal_escape(
        .                   &self,
        .                   mode: Mode,
        .                   content_start: BytePos,
        .                   content_end: BytePos,
        .                   prefix_len: u32,
        .                   postfix_len: u32,
        .               ) {
  184,554 ( 0.00%)          let lit_content = self.str_from_to(content_start, content_end);
  948,866 ( 0.02%)          unescape::unescape_literal(lit_content, mode, &mut |range, result| {
        .                       // Here we only check for errors. The actual unescaping is done later.
   68,042 ( 0.00%)              if let Err(err) = result {
        .                           let span_with_quotes = self
        .                               .mk_sp(content_start - BytePos(prefix_len), content_end + BytePos(postfix_len));
        .                           let (start, end) = (range.start as u32, range.end as u32);
        .                           let lo = content_start + BytePos(start);
        .                           let hi = lo + BytePos(end - start);
        .                           let span = self.mk_sp(lo, hi);
        .                           emit_unescape_error(
        .                               &self.sess.span_diagnostic,
-- line 628 ----------------------------------------
-- line 629 ----------------------------------------
        .                               lit_content,
        .                               span_with_quotes,
        .                               span,
        .                               mode,
        .                               range,
        .                               err,
        .                           );
        .                       }
  306,189 ( 0.01%)          });
        .               }
        .           
        .               fn validate_int_literal(&self, base: Base, content_start: BytePos, content_end: BytePos) {
      388 ( 0.00%)          let base = match base {
        .                       Base::Binary => 2,
        .                       Base::Octal => 8,
        .                       _ => return,
        .                   };
        .                   let s = self.str_from_to(content_start + BytePos(2), content_end);
        .                   for (idx, c) in s.char_indices() {
        .                       let idx = idx as u32;
        .                       if c != '_' && c.to_digit(base).is_none() {
-- line 649 ----------------------------------------
-- line 650 ----------------------------------------
        .                           let lo = content_start + BytePos(2 + idx);
        .                           let hi = content_start + BytePos(2 + idx + c.len_utf8() as u32);
        .                           self.err_span_(lo, hi, &format!("invalid digit for a base {} literal", base));
        .                       }
        .                   }
        .               }
        .           }
        .           
  198,594 ( 0.00%)  pub fn nfc_normalize(string: &str) -> Symbol {
        .               use unicode_normalization::{is_nfc_quick, IsNormalized, UnicodeNormalization};
   44,132 ( 0.00%)      match is_nfc_quick(string.chars()) {
  220,660 ( 0.00%)          IsNormalized::Yes => Symbol::intern(string),
        .                   _ => {
        .                       let normalized_str: String = string.chars().nfc().collect();
        .                       Symbol::intern(&normalized_str)
        .                   }
        .               }
        .           }

  907,733 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_parse/src/lexer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs
--------------------------------------------------------------------------------
Ir                  

-- line 504 ----------------------------------------
         .           use crate::panicking::{panic, panic_str};
         .           use crate::pin::Pin;
         .           use crate::{
         .               convert, hint, mem,
         .               ops::{self, ControlFlow, Deref, DerefMut},
         .           };
         .           
         .           /// The `Option` type. See [the module level documentation](self) for more.
 5,673,388 ( 0.09%)  #[derive(Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]
         .           #[rustc_diagnostic_item = "Option"]
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           pub enum Option<T> {
         .               /// No value.
         .               #[lang = "None"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               None,
         .               /// Some value of type `T`.
         .               #[lang = "Some"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
       462 ( 0.00%)      Some(#[stable(feature = "rust1", since = "1.0.0")] T),
         .           }
         .           
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Type implementation
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           impl<T> Option<T> {
         .               /////////////////////////////////////////////////////////////////////////
-- line 531 ----------------------------------------
-- line 543 ----------------------------------------
         .               /// let x: Option<u32> = None;
         .               /// assert_eq!(x.is_some(), false);
         .               /// ```
         .               #[must_use = "if you intended to assert that this has a value, consider `.unwrap()` instead"]
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               pub const fn is_some(&self) -> bool {
 5,840,284 ( 0.10%)          matches!(*self, Some(_))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] wrapping a value matching the predicate.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(is_some_with)]
-- line 559 ----------------------------------------
-- line 616 ----------------------------------------
         .               /// // then consume *that* with `map`, leaving `text` on the stack.
         .               /// let text_length: Option<usize> = text.as_ref().map(|s| s.len());
         .               /// println!("still can print text: {:?}", text);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_stable(feature = "const_option", since = "1.48.0")]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               pub const fn as_ref(&self) -> Option<&T> {
 5,966,298 ( 0.10%)          match *self {
         .                       Some(ref x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `&mut Option<T>` to `Option<&mut T>`.
         .               ///
         .               /// # Examples
-- line 632 ----------------------------------------
-- line 638 ----------------------------------------
         .               ///     None => {},
         .               /// }
         .               /// assert_eq!(x, Some(42));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn as_mut(&mut self) -> Option<&mut T> {
 1,966,798 ( 0.03%)          match *self {
         .                       Some(ref mut x) => Some(x),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from <code>[Pin]<[&]Option\<T>></code> to <code>Option<[Pin]<[&]T>></code>.
         .               ///
         .               /// [&]: reference "shared reference"
-- line 654 ----------------------------------------
-- line 705 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// x.expect("fruits are healthy"); // panics with `fruits are healthy`
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn expect(self, msg: &str) -> T {
 2,987,940 ( 0.05%)          match self {
   960,538 ( 0.02%)              Some(val) => val,
         .                       None => expect_failed(msg),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value.
         .               ///
         .               /// Because this function may panic, its use is generally discouraged.
         .               /// Instead, prefer to use pattern matching and handle the [`None`]
-- line 722 ----------------------------------------
-- line 742 ----------------------------------------
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.unwrap(), "air"); // fails
         .               /// ```
         .               #[inline]
         .               #[track_caller]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn unwrap(self) -> T {
 5,111,997 ( 0.08%)          match self {
 5,681,273 ( 0.09%)              Some(val) => val,
         .                       None => panic("called `Option::unwrap()` on a `None` value"),
         .                   }
         .               }
         .           
         .               /// Returns the contained [`Some`] value or a provided default.
         .               ///
         .               /// Arguments passed to `unwrap_or` are eagerly evaluated; if you are passing
         .               /// the result of a function call, it is recommended to use [`unwrap_or_else`],
-- line 759 ----------------------------------------
-- line 769 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or(self, default: T) -> T
         .               where
         .                   T: ~const Drop,
         .               {
 2,458,305 ( 0.04%)          match self {
         .                       Some(x) => x,
       496 ( 0.00%)              None => default,
         .                   }
    23,133 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or computes it from a closure.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let k = 10;
         .               /// assert_eq!(Some(4).unwrap_or_else(|| 2 * k), 4);
         .               /// assert_eq!(None.unwrap_or_else(|| 2 * k), 20);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       384 ( 0.00%)      pub const fn unwrap_or_else<F>(self, f: F) -> T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
 3,284,563 ( 0.05%)          match self {
   378,021 ( 0.01%)              Some(x) => x,
    25,236 ( 0.00%)              None => f(),
         .                   }
     3,621 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value or a default.
         .               ///
         .               /// Consumes the `self` argument then, if [`Some`], returns the contained
         .               /// value, otherwise if [`None`], returns the [default value] for that
         .               /// type.
         .               ///
         .               /// # Examples
-- line 812 ----------------------------------------
-- line 831 ----------------------------------------
         .               /// [`FromStr`]: crate::str::FromStr
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn unwrap_or_default(self) -> T
         .               where
         .                   T: ~const Default,
         .               {
    25,955 ( 0.00%)          match self {
     7,978 ( 0.00%)              Some(x) => x,
         .                       None => Default::default(),
         .                   }
     2,403 ( 0.00%)      }
         .           
         .               /// Returns the contained [`Some`] value, consuming the `self` value,
         .               /// without checking that the value is not [`None`].
         .               ///
         .               /// # Safety
         .               ///
         .               /// Calling this method on [`None`] is *[undefined behavior]*.
         .               ///
-- line 851 ----------------------------------------
-- line 892 ----------------------------------------
         .               /// // `Option::map` takes self *by value*, consuming `maybe_some_string`
         .               /// let maybe_some_len = maybe_some_string.map(|s| s.len());
         .               ///
         .               /// assert_eq!(maybe_some_len, Some(13));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       518 ( 0.00%)      pub const fn map<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
 3,422,790 ( 0.06%)          match self {
 5,559,126 ( 0.09%)              Some(x) => Some(f(x)),
    47,103 ( 0.00%)              None => None,
         .                   }
   163,823 ( 0.00%)      }
         .           
         .               /// Calls the provided closure with a reference to the contained value (if [`Some`]).
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(result_option_inspect)]
         .               ///
-- line 917 ----------------------------------------
-- line 960 ----------------------------------------
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or<U, F>(self, default: U, f: F) -> U
         .               where
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .                   U: ~const Drop,
         .               {
   923,541 ( 0.02%)          match self {
    19,885 ( 0.00%)              Some(t) => f(t),
    81,408 ( 0.00%)              None => default,
         .                   }
         .               }
         .           
         .               /// Computes a default function result (if none), or
         .               /// applies a different function to the contained value (if any).
         .               ///
         .               /// # Examples
         .               ///
-- line 978 ----------------------------------------
-- line 990 ----------------------------------------
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn map_or_else<U, D, F>(self, default: D, f: F) -> U
         .               where
         .                   D: ~const FnOnce() -> U,
         .                   D: ~const Drop,
         .                   F: ~const FnOnce(T) -> U,
         .                   F: ~const Drop,
         .               {
    98,897 ( 0.00%)          match self {
    39,873 ( 0.00%)              Some(t) => f(t),
         .                       None => default(),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err)`].
         .               ///
         .               /// Arguments passed to `ok_or` are eagerly evaluated; if you are passing the
-- line 1007 ----------------------------------------
-- line 1024 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn ok_or<E>(self, err: E) -> Result<T, E>
         .               where
         .                   E: ~const Drop,
         .               {
   404,110 ( 0.01%)          match self {
       500 ( 0.00%)              Some(v) => Ok(v),
       250 ( 0.00%)              None => Err(err),
         .                   }
         .               }
         .           
         .               /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to
         .               /// [`Ok(v)`] and [`None`] to [`Err(err())`].
         .               ///
         .               /// [`Ok(v)`]: Ok
         .               /// [`Err(err())`]: Err
-- line 1042 ----------------------------------------
-- line 1049 ----------------------------------------
         .               /// assert_eq!(x.ok_or_else(|| 0), Ok("foo"));
         .               ///
         .               /// let x: Option<&str> = None;
         .               /// assert_eq!(x.ok_or_else(|| 0), Err(0));
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       460 ( 0.00%)      pub const fn ok_or_else<E, F>(self, err: F) -> Result<T, E>
         .               where
         .                   F: ~const FnOnce() -> E,
         .                   F: ~const Drop,
         .               {
   118,180 ( 0.00%)          match self {
   112,857 ( 0.00%)              Some(v) => Ok(v),
    37,611 ( 0.00%)              None => Err(err()),
         .                   }
       575 ( 0.00%)      }
         .           
         .               /// Converts from `Option<T>` (or `&Option<T>`) to `Option<&T::Target>`.
         .               ///
         .               /// Leaves the original Option in-place, creating a new one with a reference
         .               /// to the original one, additionally coercing the contents via [`Deref`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1074 ----------------------------------------
-- line 1080 ----------------------------------------
         .               /// assert_eq!(x.as_deref(), None);
         .               /// ```
         .               #[stable(feature = "option_deref", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn as_deref(&self) -> Option<&T::Target>
         .               where
         .                   T: ~const Deref,
         .               {
     4,883 ( 0.00%)          match self.as_ref() {
         .                       Some(t) => Some(t.deref()),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Converts from `Option<T>` (or `&mut Option<T>`) to `Option<&mut T::Target>`.
         .               ///
         .               /// Leaves the original `Option` in-place, creating a new one containing a mutable reference to
-- line 1096 ----------------------------------------
-- line 1213 ----------------------------------------
         .               /// assert_eq!(Some(2).and_then(sq).and_then(sq), Some(16));
         .               /// assert_eq!(Some(2).and_then(sq).and_then(nope), None);
         .               /// assert_eq!(Some(2).and_then(nope).and_then(sq), None);
         .               /// assert_eq!(None.and_then(sq).and_then(sq), None);
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
       564 ( 0.00%)      pub const fn and_then<U, F>(self, f: F) -> Option<U>
         .               where
         .                   F: ~const FnOnce(T) -> Option<U>,
         .                   F: ~const Drop,
         .               {
   842,939 ( 0.01%)          match self {
   102,234 ( 0.00%)              Some(x) => f(x),
         .                       None => None,
         .                   }
   313,736 ( 0.01%)      }
         .           
         .               /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`
         .               /// with the wrapped value and returns:
         .               ///
         .               /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped
         .               ///   value), and
         .               /// - [`None`] if `predicate` returns `false`.
         .               ///
-- line 1238 ----------------------------------------
-- line 1257 ----------------------------------------
         .               #[stable(feature = "option_filter", since = "1.27.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn filter<P>(self, predicate: P) -> Self
         .               where
         .                   T: ~const Drop,
         .                   P: ~const FnOnce(&T) -> bool,
         .                   P: ~const Drop,
         .               {
    20,725 ( 0.00%)          if let Some(x) = self {
    79,949 ( 0.00%)              if predicate(&x) {
       143 ( 0.00%)                  return Some(x);
         .                       }
         .                   }
         .                   None
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise returns `optb`.
         .               ///
         .               /// Arguments passed to `or` are eagerly evaluated; if you are passing the
-- line 1275 ----------------------------------------
-- line 1299 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or(self, optb: Option<T>) -> Option<T>
         .               where
         .                   T: ~const Drop,
         .               {
    12,794 ( 0.00%)          match self {
       210 ( 0.00%)              Some(x) => Some(x),
         .                       None => optb,
         .                   }
         .               }
         .           
         .               /// Returns the option if it contains a value, otherwise calls `f` and
         .               /// returns the result.
         .               ///
         .               /// # Examples
-- line 1316 ----------------------------------------
-- line 1326 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn or_else<F>(self, f: F) -> Option<T>
         .               where
         .                   F: ~const FnOnce() -> Option<T>,
         .                   F: ~const Drop,
         .               {
   495,931 ( 0.01%)          match self {
   162,741 ( 0.00%)              Some(x) => Some(x),
         .                       None => f(),
         .                   }
         .               }
         .           
         .               /// Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns [`None`].
         .               ///
         .               /// # Examples
         .               ///
-- line 1343 ----------------------------------------
-- line 1431 ----------------------------------------
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert(&mut self, value: T) -> &mut T
         .               where
         .                   T: ~const Drop,
         .               {
    16,008 ( 0.00%)          if let None = *self {
    37,352 ( 0.00%)              *self = Some(value);
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
         .               }
         .           
         .               /// Inserts the default value into the option if it is [`None`], then
-- line 1448 ----------------------------------------
-- line 1499 ----------------------------------------
         .               #[inline]
         .               #[stable(feature = "option_entry", since = "1.20.0")]
         .               #[rustc_const_unstable(feature = "const_option_ext", issue = "91930")]
         .               pub const fn get_or_insert_with<F>(&mut self, f: F) -> &mut T
         .               where
         .                   F: ~const FnOnce() -> T,
         .                   F: ~const Drop,
         .               {
   433,406 ( 0.01%)          if let None = *self {
         .                       // the compiler isn't smart enough to know that we are not dropping a `T`
         .                       // here and wants us to ensure `T` can be dropped at compile time.
         .                       mem::forget(mem::replace(self, Some(f())))
         .                   }
         .           
         .                   // SAFETY: a `None` variant for `self` would have been replaced by a `Some`
         .                   // variant in the code above.
         .                   unsafe { self.as_mut().unwrap_unchecked() }
-- line 1515 ----------------------------------------
-- line 1558 ----------------------------------------
         .               /// let old = x.replace(3);
         .               /// assert_eq!(x, Some(3));
         .               /// assert_eq!(old, None);
         .               /// ```
         .               #[inline]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               #[stable(feature = "option_replace", since = "1.31.0")]
         .               pub const fn replace(&mut self, value: T) -> Option<T> {
       588 ( 0.00%)          mem::replace(self, Some(value))
         .               }
         .           
         .               /// Returns `true` if the option is a [`Some`] value containing the given value.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// #![feature(option_result_contains)]
-- line 1574 ----------------------------------------
-- line 1712 ----------------------------------------
         .               #[stable(feature = "copied", since = "1.35.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn copied(self) -> Option<T>
         .               where
         .                   T: Copy,
         .               {
         .                   // FIXME: this implementation, which sidesteps using `Option::map` since it's not const
         .                   // ready yet, should be reverted when possible to avoid code repetition
    75,707 ( 0.00%)          match self {
   860,124 ( 0.01%)              Some(&v) => Some(v),
    10,657 ( 0.00%)              None => None,
         .                   }
        17 ( 0.00%)      }
         .           
         .               /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
         .               /// ```
         .               /// let x = 12;
-- line 1732 ----------------------------------------
-- line 1733 ----------------------------------------
         .               /// let opt_x = Some(&x);
         .               /// assert_eq!(opt_x, Some(&12));
         .               /// let cloned = opt_x.cloned();
         .               /// assert_eq!(cloned, Some(12));
         .               /// ```
         .               #[must_use = "`self` will be dropped if the result is not used"]
         .               #[stable(feature = "rust1", since = "1.0.0")]
         .               #[rustc_const_unstable(feature = "const_option_cloned", issue = "91582")]
     4,952 ( 0.00%)      pub const fn cloned(self) -> Option<T>
         .               where
         .                   T: ~const Clone,
         .               {
   200,493 ( 0.00%)          match self {
   796,229 ( 0.01%)              Some(t) => Some(t.clone()),
    22,270 ( 0.00%)              None => None,
         .                   }
   259,165 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Option<&mut T> {
         .               /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the
         .               /// option.
         .               ///
         .               /// # Examples
         .               ///
-- line 1757 ----------------------------------------
-- line 1843 ----------------------------------------
         .           /////////////////////////////////////////////////////////////////////////////
         .           // Trait implementations
         .           /////////////////////////////////////////////////////////////////////////////
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<T: Clone> Clone for Option<T> {
         .               #[inline]
         .               fn clone(&self) -> Self {
 3,132,551 ( 0.05%)          match self {
    18,055 ( 0.00%)              Some(x) => Some(x.clone()),
       596 ( 0.00%)              None => None,
         .                   }
   679,551 ( 0.01%)      }
         .           
         .               #[inline]
         .               fn clone_from(&mut self, source: &Self) {
         .                   match (self, source) {
         .                       (Some(to), Some(from)) => to.clone_from(from),
         .                       (to, from) => *to = from.clone(),
         .                   }
         .               }
-- line 1863 ----------------------------------------
-- line 2006 ----------------------------------------
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.opt.take()
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
    25,866 ( 0.00%)          match self.opt {
         .                       Some(_) => (1, Some(1)),
         .                       None => (0, Some(0)),
         .                   }
         .               }
         .           }
         .           
         .           impl<A> DoubleEndedIterator for Item<A> {
         .               #[inline]
-- line 2022 ----------------------------------------
-- line 2136 ----------------------------------------
         .               type Item = A;
         .           
         .               #[inline]
         .               fn next(&mut self) -> Option<A> {
         .                   self.inner.next()
         .               }
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
        19 ( 0.00%)          self.inner.size_hint()
         .               }
         .           }
         .           
         .           #[stable(feature = "rust1", since = "1.0.0")]
         .           impl<A> DoubleEndedIterator for IntoIter<A> {
         .               #[inline]
         .               fn next_back(&mut self) -> Option<A> {
         .                   self.inner.next_back()
-- line 2152 ----------------------------------------
-- line 2241 ----------------------------------------
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::Try for Option<T> {
         .               type Output = T;
         .               type Residual = Option<convert::Infallible>;
         .           
         .               #[inline]
         .               fn from_output(output: Self::Output) -> Self {
         .                   Some(output)
       735 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {
 1,562,842 ( 0.03%)          match self {
   118,354 ( 0.00%)              Some(v) => ControlFlow::Continue(v),
         .                       None => ControlFlow::Break(None),
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2", issue = "84277")]
         .           #[rustc_const_unstable(feature = "const_convert", issue = "88674")]
         .           impl<T> const ops::FromResidual for Option<T> {
         .               #[inline]
         .               fn from_residual(residual: Option<convert::Infallible>) -> Self {
         .                   match residual {
   146,740 ( 0.00%)              None => None,
         .                   }
         .               }
         .           }
         .           
         .           #[unstable(feature = "try_trait_v2_residual", issue = "91285")]
         .           impl<T> ops::Residual<T> for Option<convert::Infallible> {
         .               type TryType = Option<T>;
         .           }
-- line 2274 ----------------------------------------
-- line 2297 ----------------------------------------
         .               /// let x: Option<Option<Option<u32>>> = Some(Some(Some(6)));
         .               /// assert_eq!(Some(Some(6)), x.flatten());
         .               /// assert_eq!(Some(6), x.flatten().flatten());
         .               /// ```
         .               #[inline]
         .               #[stable(feature = "option_flattening", since = "1.40.0")]
         .               #[rustc_const_unstable(feature = "const_option", issue = "67441")]
         .               pub const fn flatten(self) -> Option<T> {
        24 ( 0.00%)          match self {
       132 ( 0.00%)              Some(inner) => inner,
         .                       None => None,
         .                   }
         .               }
         .           }

10,209,215 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/option.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs
--------------------------------------------------------------------------------
Ir                 

-- line 12 ----------------------------------------
        .           use rustc_span::Span;
        .           use std::borrow::Cow;
        .           use std::fmt::{self, Debug, Formatter, Write};
        .           use std::iter;
        .           use std::slice;
        .           
        .           pub use super::query::*;
        .           
    8,228 ( 0.00%)  #[derive(Debug, Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, PartialOrd)]
        .           pub struct SwitchTargets {
        .               /// Possible values. The locations to branch to in each case
        .               /// are found in the corresponding indices from the `targets` vector.
        .               values: SmallVec<[u128; 1]>,
        .           
        .               /// Possible branch sites. The last element of this vector is used
        .               /// for the otherwise branch, so targets.len() == values.len() + 1
        .               /// should hold.
-- line 28 ----------------------------------------
-- line 38 ----------------------------------------
        .               targets: SmallVec<[BasicBlock; 2]>,
        .           }
        .           
        .           impl SwitchTargets {
        .               /// Creates switch targets from an iterator of values and target blocks.
        .               ///
        .               /// The iterator may be empty, in which case the `SwitchInt` instruction is equivalent to
        .               /// `goto otherwise;`.
      743 ( 0.00%)      pub fn new(targets: impl Iterator<Item = (u128, BasicBlock)>, otherwise: BasicBlock) -> Self {
    1,000 ( 0.00%)          let (values, mut targets): (SmallVec<_>, SmallVec<_>) = targets.unzip();
        .                   targets.push(otherwise);
    1,000 ( 0.00%)          Self { values, targets }
      743 ( 0.00%)      }
        .           
        .               /// Builds a switch targets definition that jumps to `then` if the tested value equals `value`,
        .               /// and to `else_` if not.
        .               pub fn static_if(value: u128, then: BasicBlock, else_: BasicBlock) -> Self {
        .                   Self { values: smallvec![value], targets: smallvec![then, else_] }
        .               }
        .           
        .               /// Returns the fallback target that is jumped to when none of the values match the operand.
    1,171 ( 0.00%)      pub fn otherwise(&self) -> BasicBlock {
    1,175 ( 0.00%)          *self.targets.last().unwrap()
    2,342 ( 0.00%)      }
        .           
        .               /// Returns an iterator over the switch targets.
        .               ///
        .               /// The iterator will yield tuples containing the value and corresponding target to jump to, not
        .               /// including the `otherwise` fallback target.
        .               ///
        .               /// Note that this may yield 0 elements. Only the `otherwise` branch is mandatory.
    1,183 ( 0.00%)      pub fn iter(&self) -> SwitchTargetsIter<'_> {
    8,281 ( 0.00%)          SwitchTargetsIter { inner: iter::zip(&self.values, &self.targets) }
    1,183 ( 0.00%)      }
        .           
        .               /// Returns a slice with all possible jump targets (including the fallback target).
    1,597 ( 0.00%)      pub fn all_targets(&self) -> &[BasicBlock] {
        .                   &self.targets
    1,597 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn all_targets_mut(&mut self) -> &mut [BasicBlock] {
        .                   &mut self.targets
        9 ( 0.00%)      }
        .           
        .               /// Finds the `BasicBlock` to which this `SwitchInt` will branch given the
        .               /// specific value.  This cannot fail, as it'll return the `otherwise`
        .               /// branch if there's not a specific match for the value.
       20 ( 0.00%)      pub fn target_for_value(&self, value: u128) -> BasicBlock {
       16 ( 0.00%)          self.iter().find_map(|(v, t)| (v == value).then_some(t)).unwrap_or_else(|| self.otherwise())
       24 ( 0.00%)      }
        .           }
        .           
        .           pub struct SwitchTargetsIter<'a> {
        .               inner: iter::Zip<slice::Iter<'a, u128>, slice::Iter<'a, BasicBlock>>,
        .           }
        .           
        .           impl<'a> Iterator for SwitchTargetsIter<'a> {
        .               type Item = (u128, BasicBlock);
        .           
        .               fn next(&mut self) -> Option<Self::Item> {
    3,444 ( 0.00%)          self.inner.next().map(|(val, bb)| (*val, *bb))
    2,368 ( 0.00%)      }
        .           
      838 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
      838 ( 0.00%)          self.inner.size_hint()
    2,514 ( 0.00%)      }
        .           }
        .           
        .           impl<'a> ExactSizeIterator for SwitchTargetsIter<'a> {}
        .           
1,088,826 ( 0.02%)  #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq)]
        .           pub enum TerminatorKind<'tcx> {
        .               /// Block should have one successor in the graph; we jump there.
   11,703 ( 0.00%)      Goto { target: BasicBlock },
        .           
        .               /// Operand evaluates to an integer; jump depending on its value
        .               /// to one of the targets, and otherwise fallback to `otherwise`.
        .               SwitchInt {
        .                   /// The discriminant value being tested.
        .                   discr: Operand<'tcx>,
        .           
        .                   /// The type of value being tested.
        .                   /// This is always the same as the type of `discr`.
        .                   /// FIXME: remove this redundant information. Currently, it is relied on by pretty-printing.
      179 ( 0.00%)          switch_ty: Ty<'tcx>,
        .           
        .                   targets: SwitchTargets,
        .               },
        .           
        .               /// Indicates that the landing pad is finished and unwinding should
        .               /// continue. Emitted by `build::scope::diverge_cleanup`.
        .               Resume,
        .           
-- line 130 ----------------------------------------
-- line 136 ----------------------------------------
        .               /// been filled in before this executes. This can occur multiple times
        .               /// in different basic blocks.
        .               Return,
        .           
        .               /// Indicates a terminator that can never be reached.
        .               Unreachable,
        .           
        .               /// Drop the `Place`.
    1,836 ( 0.00%)      Drop { place: Place<'tcx>, target: BasicBlock, unwind: Option<BasicBlock> },
        .           
        .               /// Drop the `Place` and assign the new value over it. This ensures
        .               /// that the assignment to `P` occurs *even if* the destructor for
        .               /// place unwinds. Its semantics are best explained by the
        .               /// elaboration:
        .               ///
        .               /// ```
        .               /// BB0 {
-- line 152 ----------------------------------------
-- line 181 ----------------------------------------
        .               /// Block ends with a call of a function.
        .               Call {
        .                   /// The function that’s being called.
        .                   func: Operand<'tcx>,
        .                   /// Arguments the function is called with.
        .                   /// These are owned by the callee, which is free to modify them.
        .                   /// This allows the memory occupied by "by-value" arguments to be
        .                   /// reused across function calls without duplicating the contents.
   61,956 ( 0.00%)          args: Vec<Operand<'tcx>>,
        .                   /// Destination for the return value. If some, the call is converging.
        .                   destination: Option<(Place<'tcx>, BasicBlock)>,
        .                   /// Cleanups to be done if the call unwinds.
   41,304 ( 0.00%)          cleanup: Option<BasicBlock>,
        .                   /// `true` if this is from a call in HIR rather than from an overloaded
        .                   /// operator. True for overloaded function call.
        .                   from_hir_call: bool,
        .                   /// This `Span` is the span of the function, without the dot and receiver
        .                   /// (e.g. `foo(a, b)` in `x.foo(a, b)`
        .                   fn_span: Span,
        .               },
        .           
        .               /// Jump to the target if the condition has the expected value,
        .               /// otherwise panic with a message and a cleanup target.
        .               Assert {
        .                   cond: Operand<'tcx>,
       74 ( 0.00%)          expected: bool,
        .                   msg: AssertMessage<'tcx>,
      148 ( 0.00%)          target: BasicBlock,
      148 ( 0.00%)          cleanup: Option<BasicBlock>,
        .               },
        .           
        .               /// A suspend point.
        .               Yield {
        .                   /// The value to return.
        .                   value: Operand<'tcx>,
        .                   /// Where to resume to.
        .                   resume: BasicBlock,
-- line 217 ----------------------------------------
-- line 223 ----------------------------------------
        .           
        .               /// Indicates the end of the dropping of a generator.
        .               GeneratorDrop,
        .           
        .               /// A block where control flow only ever takes one real path, but borrowck
        .               /// needs to be more conservative.
        .               FalseEdge {
        .                   /// The target normal control flow will take.
      190 ( 0.00%)          real_target: BasicBlock,
        .                   /// A block control flow could conceptually jump to, but won't in
        .                   /// practice.
      285 ( 0.00%)          imaginary_target: BasicBlock,
        .               },
        .               /// A terminator for blocks that only take one path in reality, but where we
        .               /// reserve the right to unwind in borrowck, even if it won't happen in practice.
        .               /// This can arise in infinite loops with no function calls for example.
        .               FalseUnwind {
        .                   /// The target normal control flow will take.
       14 ( 0.00%)          real_target: BasicBlock,
        .                   /// The imaginary cleanup block link. This particular path will never be taken
        .                   /// in practice, but in order to avoid fragility we want to always
        .                   /// consider it in borrowck. We don't want to accept programs which
        .                   /// pass borrowck only when `panic=abort` or some assertions are disabled
        .                   /// due to release vs. debug mode builds. This needs to be an `Option` because
        .                   /// of the `remove_noop_landing_pads` and `abort_unwinding_calls` passes.
       14 ( 0.00%)          unwind: Option<BasicBlock>,
        .               },
        .           
        .               /// Block ends with an inline assembly block. This is a terminator since
        .               /// inline assembly is allowed to diverge.
        .               InlineAsm {
        .                   /// The template for the inline assembly, with placeholders.
        .                   template: &'tcx [InlineAsmTemplatePiece],
        .           
-- line 256 ----------------------------------------
-- line 268 ----------------------------------------
        .                   /// diverging (InlineAsmOptions::NORETURN).
        .                   destination: Option<BasicBlock>,
        .           
        .                   /// Cleanup to be done if the inline assembly unwinds. This is present
        .                   /// if and only if InlineAsmOptions::MAY_UNWIND is set.
        .                   cleanup: Option<BasicBlock>,
        .               },
        .           }
  976,815 ( 0.02%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]
        .           pub struct Terminator<'tcx> {
        .               pub source_info: SourceInfo,
        .               pub kind: TerminatorKind<'tcx>,
        .           }
        .           
        .           impl<'tcx> Terminator<'tcx> {
  192,662 ( 0.00%)      pub fn successors(&self) -> Successors<'_> {
  574,535 ( 0.01%)          self.kind.successors()
  288,993 ( 0.00%)      }
        .           
  173,594 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
   86,797 ( 0.00%)          self.kind.successors_mut()
  260,391 ( 0.00%)      }
        .           
        .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
        .                   self.kind.unwind()
        .               }
        .           
        .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
        .                   self.kind.unwind_mut()
   13,200 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TerminatorKind<'tcx> {
      121 ( 0.00%)      pub fn if_(
        .                   tcx: TyCtxt<'tcx>,
        .                   cond: Operand<'tcx>,
        .                   t: BasicBlock,
        .                   f: BasicBlock,
        .               ) -> TerminatorKind<'tcx> {
    1,210 ( 0.00%)          TerminatorKind::SwitchInt {
      242 ( 0.00%)              discr: cond,
      121 ( 0.00%)              switch_ty: tcx.types.bool,
        .                       targets: SwitchTargets::static_if(0, f, t),
        .                   }
      121 ( 0.00%)      }
        .           
  399,166 ( 0.01%)      pub fn successors(&self) -> Successors<'_> {
        .                   use self::TerminatorKind::*;
4,757,436 ( 0.08%)          match *self {
        .                       Resume
        .                       | Abort
        .                       | GeneratorDrop
        .                       | Return
        .                       | Unreachable
        .                       | Call { destination: None, cleanup: None, .. }
        .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),
   58,407 ( 0.00%)              Goto { target: ref t }
        .                       | Call { destination: None, cleanup: Some(ref t), .. }
        .                       | Call { destination: Some((_, ref t)), cleanup: None, .. }
        .                       | Yield { resume: ref t, drop: None, .. }
        .                       | DropAndReplace { target: ref t, unwind: None, .. }
        .                       | Drop { target: ref t, unwind: None, .. }
        .                       | Assert { target: ref t, cleanup: None, .. }
        .                       | FalseUnwind { real_target: ref t, unwind: None }
        .                       | InlineAsm { destination: Some(ref t), cleanup: None, .. }
-- line 332 ----------------------------------------
-- line 338 ----------------------------------------
        .                       | DropAndReplace { target: ref t, unwind: Some(ref u), .. }
        .                       | Drop { target: ref t, unwind: Some(ref u), .. }
        .                       | Assert { target: ref t, cleanup: Some(ref u), .. }
        .                       | FalseUnwind { real_target: ref t, unwind: Some(ref u) }
        .                       | InlineAsm { destination: Some(ref t), cleanup: Some(ref u), .. } => {
        .                           Some(t).into_iter().chain(slice::from_ref(u))
        .                       }
        .                       SwitchInt { ref targets, .. } => None.into_iter().chain(&targets.targets),
    3,212 ( 0.00%)              FalseEdge { ref real_target, ref imaginary_target } => {
        .                           Some(real_target).into_iter().chain(slice::from_ref(imaginary_target))
        .                       }
        .                   }
  399,166 ( 0.01%)      }
        .           
   86,797 ( 0.00%)      pub fn successors_mut(&mut self) -> SuccessorsMut<'_> {
        .                   use self::TerminatorKind::*;
1,037,479 ( 0.02%)          match *self {
        .                       Resume
        .                       | Abort
        .                       | GeneratorDrop
        .                       | Return
        .                       | Unreachable
        .                       | Call { destination: None, cleanup: None, .. }
        .                       | InlineAsm { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),
   15,219 ( 0.00%)              Goto { target: ref mut t }
        .                       | Call { destination: None, cleanup: Some(ref mut t), .. }
        .                       | Call { destination: Some((_, ref mut t)), cleanup: None, .. }
        .                       | Yield { resume: ref mut t, drop: None, .. }
        .                       | DropAndReplace { target: ref mut t, unwind: None, .. }
        .                       | Drop { target: ref mut t, unwind: None, .. }
        .                       | Assert { target: ref mut t, cleanup: None, .. }
        .                       | FalseUnwind { real_target: ref mut t, unwind: None }
        .                       | InlineAsm { destination: Some(ref mut t), cleanup: None, .. }
-- line 370 ----------------------------------------
-- line 376 ----------------------------------------
        .                       | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }
        .                       | Drop { target: ref mut t, unwind: Some(ref mut u), .. }
        .                       | Assert { target: ref mut t, cleanup: Some(ref mut u), .. }
        .                       | FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) }
        .                       | InlineAsm { destination: Some(ref mut t), cleanup: Some(ref mut u), .. } => {
        .                           Some(t).into_iter().chain(slice::from_mut(u))
        .                       }
        .                       SwitchInt { ref mut targets, .. } => None.into_iter().chain(&mut targets.targets),
      540 ( 0.00%)              FalseEdge { ref mut real_target, ref mut imaginary_target } => {
        .                           Some(real_target).into_iter().chain(slice::from_mut(imaginary_target))
        .                       }
        .                   }
   86,797 ( 0.00%)      }
        .           
        .               pub fn unwind(&self) -> Option<&Option<BasicBlock>> {
        .                   match *self {
        .                       TerminatorKind::Goto { .. }
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Abort
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::Unreachable
-- line 396 ----------------------------------------
-- line 403 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { ref unwind, .. }
        .                       | TerminatorKind::Drop { ref unwind, .. }
        .                       | TerminatorKind::FalseUnwind { ref unwind, .. }
        .                       | TerminatorKind::InlineAsm { cleanup: ref unwind, .. } => Some(unwind),
        .                   }
        .               }
        .           
        .               pub fn unwind_mut(&mut self) -> Option<&mut Option<BasicBlock>> {
   79,200 ( 0.00%)          match *self {
        .                       TerminatorKind::Goto { .. }
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Abort
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::Yield { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::FalseEdge { .. } => None,
   22,072 ( 0.00%)              TerminatorKind::Call { cleanup: ref mut unwind, .. }
        .                       | TerminatorKind::Assert { cleanup: ref mut unwind, .. }
        .                       | TerminatorKind::DropAndReplace { ref mut unwind, .. }
        .                       | TerminatorKind::Drop { ref mut unwind, .. }
        .                       | TerminatorKind::FalseUnwind { ref mut unwind, .. }
        .                       | TerminatorKind::InlineAsm { cleanup: ref mut unwind, .. } => Some(unwind),
        .                   }
        .               }
        .           
-- line 429 ----------------------------------------

1,710,091 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/mir/terminator.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 97 ----------------------------------------
        .           
        .               /// If true, the capture is behind a reference.
        .               by_ref: bool,
        .           }
        .           
        .           const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];
        .           
        .           pub fn provide(providers: &mut Providers) {
        4 ( 0.00%)      *providers = Providers {
        .                   mir_borrowck: |tcx, did| {
      172 ( 0.00%)              if let Some(def) = ty::WithOptConstParam::try_lookup(did, tcx) {
        .                           tcx.mir_borrowck_const_arg(def)
        .                       } else {
      632 ( 0.00%)                  mir_borrowck(tcx, ty::WithOptConstParam::unknown(did))
        .                       }
        .                   },
        .                   mir_borrowck_const_arg: |tcx, (did, param_did)| {
        .                       mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })
        .                   },
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    1,580 ( 0.00%)  fn mir_borrowck<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               def: ty::WithOptConstParam<LocalDefId>,
        .           ) -> &'tcx BorrowCheckResult<'tcx> {
        .               let (input_body, promoted) = tcx.mir_promoted(def);
        .               debug!("run query mir_borrowck: {}", tcx.def_path_str(def.did.to_def_id()));
        .           
    2,054 ( 0.00%)      let opt_closure_req = tcx.infer_ctxt().with_opaque_type_inference(def.did).enter(|infcx| {
        .                   let input_body: &Body<'_> = &input_body.borrow();
        .                   let promoted: &IndexVec<_, _> = &promoted.borrow();
    2,212 ( 0.00%)          do_mir_borrowck(&infcx, input_body, promoted, false).0
      632 ( 0.00%)      });
        .               debug!("mir_borrowck done");
        .           
      158 ( 0.00%)      tcx.arena.alloc(opt_closure_req)
    1,264 ( 0.00%)  }
        .           
        .           /// Perform the actual borrow checking.
        .           ///
        .           /// If `return_body_with_facts` is true, then return the body with non-erased
        .           /// region ids on which the borrow checking was performed together with Polonius
        .           /// facts.
    3,476 ( 0.00%)  #[instrument(skip(infcx, input_body, input_promoted), level = "debug")]
        .           fn do_mir_borrowck<'a, 'tcx>(
        .               infcx: &InferCtxt<'a, 'tcx>,
        .               input_body: &Body<'tcx>,
        .               input_promoted: &IndexVec<Promoted, Body<'tcx>>,
        .               return_body_with_facts: bool,
        .           ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {
    1,580 ( 0.00%)      let def = input_body.source.with_opt_param().as_local().unwrap();
        .           
        .               debug!(?def);
        .           
      316 ( 0.00%)      let tcx = infcx.tcx;
        .               let param_env = tcx.param_env(def.did);
      158 ( 0.00%)      let id = tcx.hir().local_def_id_to_hir_id(def.did);
        .           
      316 ( 0.00%)      let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);
        .               for var_debug_info in &input_body.var_debug_info {
    1,350 ( 0.00%)          if let VarDebugInfoContents::Place(place) = var_debug_info.value {
      671 ( 0.00%)              if let Some(local) = place.as_local() {
      993 ( 0.00%)                  if let Some(prev_name) = local_names[local] {
        .                               if var_debug_info.name != prev_name {
        .                                   span_bug!(
        .                                       var_debug_info.source_info.span,
        .                                       "local {:?} has many names (`{}` vs `{}`)",
        .                                       local,
        .                                       prev_name,
        .                                       var_debug_info.name
        .                                   );
        .                               }
        .                           }
      993 ( 0.00%)                  local_names[local] = Some(var_debug_info.name);
        .                       }
        .                   }
        .               }
        .           
        .               // Gather the upvars of a closure, if any.
      632 ( 0.00%)      let tables = tcx.typeck_opt_const_arg(def);
      316 ( 0.00%)      if let Some(ErrorReported) = tables.tainted_by_errors {
        .                   infcx.set_tainted_by_errors();
        .               }
      632 ( 0.00%)      let upvars: Vec<_> = tables
        .                   .closure_min_captures_flattened(def.did.to_def_id())
        .                   .map(|captured_place| {
        .                       let capture = captured_place.info.capture_kind;
        9 ( 0.00%)              let by_ref = match capture {
        .                           ty::UpvarCapture::ByValue => false,
        .                           ty::UpvarCapture::ByRef(..) => true,
        .                       };
        .                       Upvar { place: captured_place.clone(), by_ref }
        .                   })
        .                   .collect();
        .           
        .               // Replace all regions with fresh inference variables. This
        .               // requires first making our own copy of the MIR. This copy will
        .               // be modified (in place) to contain non-lexical lifetimes. It
        .               // will have a lifetime tied to the inference context.
      316 ( 0.00%)      let mut body_owned = input_body.clone();
        .               let mut promoted = input_promoted.clone();
        .               let free_regions =
      474 ( 0.00%)          nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);
        .               let body = &body_owned; // no further changes
        .           
      158 ( 0.00%)      let location_table_owned = LocationTable::new(body);
        .               let location_table = &location_table_owned;
        .           
        .               let mut errors_buffer = Vec::new();
      474 ( 0.00%)      let (move_data, move_errors): (MoveData<'tcx>, Vec<(Place<'tcx>, MoveError<'tcx>)>) =
    1,106 ( 0.00%)          match MoveData::gather_moves(&body, tcx, param_env) {
      948 ( 0.00%)              Ok(move_data) => (move_data, Vec::new()),
        .                       Err((move_data, move_errors)) => (move_data, move_errors),
        .                   };
        .               let promoted_errors = promoted
        .                   .iter_enumerated()
      290 ( 0.00%)          .map(|(idx, body)| (idx, MoveData::gather_moves(&body, tcx, param_env)));
        .           
      948 ( 0.00%)      let mdpe = MoveDataParamEnv { move_data, param_env };
        .           
    1,264 ( 0.00%)      let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)
      158 ( 0.00%)          .into_engine(tcx, &body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint()
        .                   .into_results_cursor(&body);
        .           
    1,896 ( 0.00%)      let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();
        .               let borrow_set =
    1,580 ( 0.00%)          Rc::new(BorrowSet::build(tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));
        .           
      790 ( 0.00%)      let use_polonius = return_body_with_facts || infcx.tcx.sess.opts.debugging_opts.polonius;
        .           
        .               // Compute non-lexical lifetimes.
        .               let nll::NllOutput {
      474 ( 0.00%)          regioncx,
      632 ( 0.00%)          opaque_type_values,
      316 ( 0.00%)          polonius_input,
      474 ( 0.00%)          polonius_output,
      632 ( 0.00%)          opt_closure_req,
    1,580 ( 0.00%)          nll_errors,
    2,844 ( 0.00%)      } = nll::compute_regions(
        .                   infcx,
    2,528 ( 0.00%)          free_regions,
        .                   body,
        .                   &promoted,
        .                   location_table,
        .                   param_env,
        .                   &mut flow_inits,
        .                   &mdpe.move_data,
        .                   &borrow_set,
        .                   &upvars,
        .                   use_polonius,
        .               );
        .           
        .               // Dump MIR results into a file, if that is enabled. This let us
        .               // write unit-tests, as well as helping with debugging.
      474 ( 0.00%)      nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);
        .           
        .               // We also have a `#[rustc_regions]` annotation that causes us to dump
        .               // information.
      316 ( 0.00%)      nll::dump_annotation(
        .                   infcx,
        .                   &body,
        .                   &regioncx,
        .                   &opt_closure_req,
        .                   &opaque_type_values,
        .                   &mut errors_buffer,
        .               );
        .           
        .               // The various `flow_*` structures can be large. We drop `flow_inits` here
        .               // so it doesn't overlap with the others below. This reduces peak memory
        .               // usage significantly on some benchmarks.
    2,528 ( 0.00%)      drop(flow_inits);
        .           
      158 ( 0.00%)      let regioncx = Rc::new(regioncx);
        .           
      948 ( 0.00%)      let flow_borrows = Borrows::new(tcx, body, &regioncx, &borrow_set)
      158 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
      948 ( 0.00%)      let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)
      158 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
      948 ( 0.00%)      let flow_ever_inits = EverInitializedPlaces::new(tcx, body, &mdpe)
      158 ( 0.00%)          .into_engine(tcx, body)
        .                   .pass_name("borrowck")
        .                   .iterate_to_fixpoint();
        .           
      392 ( 0.00%)      let movable_generator = !matches!(
    1,024 ( 0.00%)          tcx.hir().get(id),
        .                   Node::Expr(&hir::Expr {
        .                       kind: hir::ExprKind::Closure(.., Some(hir::Movability::Static)),
        .                       ..
        .                   })
        .               );
        .           
      203 ( 0.00%)      for (idx, move_data_results) in promoted_errors {
        .                   let promoted_body = &promoted[idx];
        .           
       58 ( 0.00%)          if let Err((move_data, move_errors)) = move_data_results {
        .                       let mut promoted_mbcx = MirBorrowckCtxt {
        .                           infcx,
        .                           param_env,
        .                           body: promoted_body,
        .                           move_data: &move_data,
        .                           location_table, // no need to create a real one for the promoted, it is not used
        .                           movable_generator,
        .                           fn_self_span_reported: Default::default(),
-- line 307 ----------------------------------------
-- line 325 ----------------------------------------
        .                       };
        .                       promoted_mbcx.report_move_errors(move_errors);
        .                       errors_buffer = promoted_mbcx.errors_buffer;
        .                   };
        .               }
        .           
        .               let dominators = body.dominators();
        .           
    7,110 ( 0.00%)      let mut mbcx = MirBorrowckCtxt {
        .                   infcx,
        .                   param_env,
        .                   body,
        .                   move_data: &mdpe.move_data,
        .                   location_table,
        .                   movable_generator,
        .                   locals_are_invalidated_at_exit,
        .                   fn_self_span_reported: Default::default(),
        .                   access_place_error_reported: Default::default(),
        .                   reservation_error_reported: Default::default(),
        .                   reservation_warnings: Default::default(),
        .                   move_error_reported: BTreeMap::new(),
        .                   uninitialized_error_reported: Default::default(),
      632 ( 0.00%)          errors_buffer,
      158 ( 0.00%)          regioncx: Rc::clone(&regioncx),
        .                   used_mut: Default::default(),
        .                   used_mut_upvars: SmallVec::new(),
      158 ( 0.00%)          borrow_set: Rc::clone(&borrow_set),
      948 ( 0.00%)          dominators,
      632 ( 0.00%)          upvars,
      632 ( 0.00%)          local_names,
        .                   region_names: RefCell::default(),
        .                   next_region_name: RefCell::new(1),
        .                   polonius_output,
        .               };
        .           
        .               // Compute and report region errors, if any.
      474 ( 0.00%)      mbcx.report_region_errors(nll_errors);
        .           
        .               let results = BorrowckResults {
      948 ( 0.00%)          ever_inits: flow_ever_inits,
    1,264 ( 0.00%)          uninits: flow_uninits,
    1,738 ( 0.00%)          borrows: flow_borrows,
        .               };
        .           
      948 ( 0.00%)      mbcx.report_move_errors(move_errors);
        .           
      158 ( 0.00%)      rustc_mir_dataflow::visit_results(
        .                   body,
      158 ( 0.00%)          traversal::reverse_postorder(body).map(|(bb, _)| bb),
        .                   &results,
        .                   &mut mbcx,
        .               );
        .           
        .               // Convert any reservation warnings into lints.
        .               let reservation_warnings = mem::take(&mut mbcx.reservation_warnings);
        .               for (_, (place, span, location, bk, borrow)) in reservation_warnings {
        .                   let mut initial_diag = mbcx.report_conflicting_borrow(location, (place, span), bk, &borrow);
-- line 381 ----------------------------------------
-- line 406 ----------------------------------------
        .               // For each non-user used mutable variable, check if it's been assigned from
        .               // a user-declared local. If so, then put that local into the used_mut set.
        .               // Note that this set is expected to be small - only upvars from closures
        .               // would have a chance of erroneously adding non-user-defined mutable vars
        .               // to the set.
        .               let temporary_used_locals: FxHashSet<Local> = mbcx
        .                   .used_mut
        .                   .iter()
      158 ( 0.00%)          .filter(|&local| !mbcx.body.local_decls[*local].is_user_variable())
        .                   .cloned()
        .                   .collect();
        .               // For the remaining unused locals that are marked as mutable, we avoid linting any that
        .               // were never initialized. These locals may have been removed as unreachable code; or will be
        .               // linted as unused variables.
        .               let unused_mut_locals =
      158 ( 0.00%)          mbcx.body.mut_vars_iter().filter(|local| !mbcx.used_mut.contains(local)).collect();
      632 ( 0.00%)      mbcx.gather_used_muts(temporary_used_locals, unused_mut_locals);
        .           
        .               debug!("mbcx.used_mut: {:?}", mbcx.used_mut);
      632 ( 0.00%)      let used_mut = mbcx.used_mut;
      158 ( 0.00%)      for local in mbcx.body.mut_vars_and_args_iter().filter(|local| !used_mut.contains(local)) {
       22 ( 0.00%)          let local_decl = &mbcx.body.local_decls[local];
      132 ( 0.00%)          let lint_root = match &mbcx.body.source_scopes[local_decl.source_info.scope].local_data {
        .                       ClearCrossCrate::Set(data) => data.lint_root,
        .                       _ => continue,
        .                   };
        .           
        .                   // Skip over locals that begin with an underscore or have no name
       66 ( 0.00%)          match mbcx.local_names[local] {
        .                       Some(name) => {
        .                           if name.as_str().starts_with('_') {
        .                               continue;
        .                           }
        .                       }
        .                       None => continue,
        .                   }
        .           
-- line 442 ----------------------------------------
-- line 455 ----------------------------------------
        .                               String::new(),
        .                               Applicability::MachineApplicable,
        .                           )
        .                           .emit();
        .                   })
        .               }
        .           
        .               // Buffer any move errors that we collected and de-duplicated.
    1,422 ( 0.00%)      for (_, (_, diag)) in mbcx.move_error_reported {
        .                   diag.buffer(&mut mbcx.errors_buffer);
        .               }
        .           
      158 ( 0.00%)      if !mbcx.errors_buffer.is_empty() {
        .                   mbcx.errors_buffer.sort_by_key(|diag| diag.sort_span);
        .           
        .                   for diag in mbcx.errors_buffer.drain(..) {
        .                       mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);
        .                   }
        .               }
        .           
        .               let result = BorrowCheckResult {
      632 ( 0.00%)          concrete_opaque_types: opaque_type_values,
      790 ( 0.00%)          closure_requirements: opt_closure_req,
      948 ( 0.00%)          used_mut_upvars: mbcx.used_mut_upvars,
        .               };
        .           
      316 ( 0.00%)      let body_with_facts = if return_body_with_facts {
        .                   let output_facts = mbcx.polonius_output.expect("Polonius output was not computed");
        .                   Some(Box::new(BodyWithBorrowckFacts {
        .                       body: body_owned,
        .                       input_facts: *polonius_input.expect("Polonius input facts were not generated"),
        .                       output_facts,
        .                       location_table: location_table_owned,
        .                   }))
        .               } else {
        .                   None
        .               };
        .           
        .               debug!("do_mir_borrowck: result = {:#?}", result);
        .           
    2,212 ( 0.00%)      (result, body_with_facts)
    1,896 ( 0.00%)  }
        .           
        .           /// A `Body` with information computed by the borrow checker. This struct is
        .           /// intended to be consumed by compiler consumers.
        .           ///
        .           /// We need to include the MIR body here because the region identifiers must
        .           /// match the ones in the Polonius facts.
        .           pub struct BodyWithBorrowckFacts<'tcx> {
        .               /// A mir body that contains region identifiers.
-- line 504 ----------------------------------------
-- line 608 ----------------------------------------
        .           // Check that:
        .           // 1. assignments are always made to mutable locations (FIXME: does that still really go here?)
        .           // 2. loans made in overlapping scopes do not conflict
        .           // 3. assignments do not affect things loaned out as immutable
        .           // 4. moves do not affect things loaned out in any way
        .           impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {
        .               type FlowState = Flows<'cx, 'tcx>;
        .           
  518,598 ( 0.01%)      fn visit_statement_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   stmt: &'cx Statement<'tcx>,
        .                   location: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_statement({:?}, {:?}): {:?}", location, stmt, flow_state);
        .                   let span = stmt.source_info.span;
        .           
        .                   self.check_activations(location, span, flow_state);
        .           
  288,110 ( 0.00%)          match &stmt.kind {
   25,176 ( 0.00%)              StatementKind::Assign(box (lhs, ref rhs)) => {
        .                           self.consume_rvalue(location, (rhs, span), flow_state);
        .           
   50,352 ( 0.00%)                  self.mutate_place(location, (*lhs, span), Shallow(None), flow_state);
        .                       }
      141 ( 0.00%)              StatementKind::FakeRead(box (_, ref place)) => {
        .                           // Read for match doesn't access any memory and is used to
        .                           // assert that a place is safe and live. So we don't have to
        .                           // do any checks here.
        .                           //
        .                           // FIXME: Remove check that the place is initialized. This is
        .                           // needed for now because matches don't have never patterns yet.
        .                           // So this is the only place we prevent
        .                           //      let x: !;
        .                           //      match x {};
        .                           // from compiling.
      564 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
    1,269 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       StatementKind::SetDiscriminant { place, variant_index: _ } => {
        .                           self.mutate_place(location, (**place, span), Shallow(None), flow_state);
        .                       }
        .                       StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {
        .                           ..
-- line 655 ----------------------------------------
-- line 663 ----------------------------------------
        .                       | StatementKind::Coverage(..)
        .                       | StatementKind::AscribeUserType(..)
        .                       | StatementKind::Retag { .. }
        .                       | StatementKind::StorageLive(..) => {
        .                           // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant
        .                           // to borrow check.
        .                       }
        .                       StatementKind::StorageDead(local) => {
  135,102 ( 0.00%)                  self.access_place(
        .                               location,
  247,687 ( 0.00%)                      (Place::from(*local), span),
        .                               (Shallow(None), Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                   }
  460,976 ( 0.01%)      }
        .           
   90,912 ( 0.00%)      fn visit_terminator_before_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
        .                   debug!("MirBorrowckCtxt::process_terminator({:?}, {:?}): {:?}", loc, term, flow_state);
        .                   let span = term.source_info.span;
        .           
        .                   self.check_activations(loc, span, flow_state);
        .           
   56,820 ( 0.00%)          match term.kind {
      716 ( 0.00%)              TerminatorKind::SwitchInt { ref discr, switch_ty: _, targets: _ } => {
      716 ( 0.00%)                  self.consume_operand(loc, (discr, span), flow_state);
        .                       }
      160 ( 0.00%)              TerminatorKind::Drop { place, target: _, unwind: _ } => {
        .                           debug!(
        .                               "visit_terminator_drop \
        .                                loc: {:?} term: {:?} place: {:?} span: {:?}",
        .                               loc, term, place, span
        .                           );
        .           
      480 ( 0.00%)                  self.access_place(
        .                               loc,
      720 ( 0.00%)                      (place, span),
        .                               (AccessDepth::Drop, Write(WriteKind::StorageDeadOrDrop)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .                       }
        .                       TerminatorKind::DropAndReplace {
        .                           place: drop_place,
        .                           value: ref new_value,
        .                           target: _,
        .                           unwind: _,
        .                       } => {
        .                           self.mutate_place(loc, (drop_place, span), Deep, flow_state);
        .                           self.consume_operand(loc, (new_value, span), flow_state);
        .                       }
        .                       TerminatorKind::Call {
   30,990 ( 0.00%)                  ref func,
        .                           ref args,
        .                           ref destination,
        .                           cleanup: _,
        .                           from_hir_call: _,
        .                           fn_span: _,
        .                       } => {
   82,640 ( 0.00%)                  self.consume_operand(loc, (func, span), flow_state);
        .                           for arg in args {
   63,258 ( 0.00%)                      self.consume_operand(loc, (arg, span), flow_state);
        .                           }
   41,319 ( 0.00%)                  if let Some((dest, _ /*bb*/)) = *destination {
  123,948 ( 0.00%)                      self.mutate_place(loc, (dest, span), Deep, flow_state);
        .                           }
        .                       }
      222 ( 0.00%)              TerminatorKind::Assert { ref cond, expected: _, ref msg, target: _, cleanup: _ } => {
       37 ( 0.00%)                  self.consume_operand(loc, (cond, span), flow_state);
        .                           use rustc_middle::mir::AssertKind;
      134 ( 0.00%)                  if let AssertKind::BoundsCheck { ref len, ref index } = *msg {
      200 ( 0.00%)                      self.consume_operand(loc, (len, span), flow_state);
        .                               self.consume_operand(loc, (index, span), flow_state);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Yield { ref value, resume: _, resume_arg, drop: _ } => {
        .                           self.consume_operand(loc, (value, span), flow_state);
        .                           self.mutate_place(loc, (resume_arg, span), Deep, flow_state);
        .                       }
-- line 749 ----------------------------------------
-- line 790 ----------------------------------------
        .                       | TerminatorKind::Resume
        .                       | TerminatorKind::Return
        .                       | TerminatorKind::GeneratorDrop
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ } => {
        .                           // no data used, thus irrelevant to borrowck
        .                       }
        .                   }
   89,320 ( 0.00%)      }
        .           
   79,548 ( 0.00%)      fn visit_terminator_after_primary_effect(
        .                   &mut self,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   term: &'cx Terminator<'tcx>,
        .                   loc: Location,
        .               ) {
   11,364 ( 0.00%)          let span = term.source_info.span;
        .           
   45,456 ( 0.00%)          match term.kind {
        .                       TerminatorKind::Yield { value: _, resume: _, resume_arg: _, drop: _ } => {
        .                           if self.movable_generator {
        .                               // Look for any active borrows to locals
        .                               let borrow_set = self.borrow_set.clone();
        .                               for i in flow_state.borrows.iter() {
        .                                   let borrow = &borrow_set[i];
        .                                   self.check_for_local_borrow(borrow, span);
        .                               }
-- line 816 ----------------------------------------
-- line 817 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {
        .                           // Returning from the function implicitly kills storage for all locals and statics.
        .                           // Often, the storage will already have been killed by an explicit
        .                           // StorageDead, but we don't always emit those (notably on unwind paths),
        .                           // so this "extra check" serves as a kind of backup.
      520 ( 0.00%)                  let borrow_set = self.borrow_set.clone();
        .                           for i in flow_state.borrows.iter() {
        .                               let borrow = &borrow_set[i];
        .                               self.check_for_invalidation_at_exit(loc, borrow, span);
        .                           }
        .                       }
        .           
        .                       TerminatorKind::Abort
        .                       | TerminatorKind::Assert { .. }
-- line 833 ----------------------------------------
-- line 836 ----------------------------------------
        .                       | TerminatorKind::DropAndReplace { .. }
        .                       | TerminatorKind::FalseEdge { real_target: _, imaginary_target: _ }
        .                       | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }
        .                       | TerminatorKind::Goto { .. }
        .                       | TerminatorKind::SwitchInt { .. }
        .                       | TerminatorKind::Unreachable
        .                       | TerminatorKind::InlineAsm { .. } => {}
        .                   }
   90,912 ( 0.00%)      }
        .           }
        .           
        .           use self::AccessDepth::{Deep, Shallow};
        .           use self::ReadOrWrite::{Activation, Read, Reservation, Write};
        .           
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum ArtificialField {
        .               ArrayLength,
-- line 852 ----------------------------------------
-- line 913 ----------------------------------------
        .           /// When checking permissions for a place access, this flag is used to indicate that an immutable
        .           /// local place can be mutated.
        .           //
        .           // FIXME: @nikomatsakis suggested that this flag could be removed with the following modifications:
        .           // - Merge `check_access_permissions()` and `check_if_reassignment_to_immutable_state()`.
        .           // - Split `is_mutable()` into `is_assignable()` (can be directly assigned) and
        .           //   `is_declared_mutable()`.
        .           // - Take flow state into consideration in `is_assignable()` for local variables.
   22,524 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           enum LocalMutationIsAllowed {
        .               Yes,
        .               /// We want use of immutable upvars to cause a "write to immutable upvar"
        .               /// error, not an "reassignment" error.
        .               ExceptUpvars,
        .               No,
        .           }
        .           
-- line 929 ----------------------------------------
-- line 970 ----------------------------------------
        .               }
        .           
        .               /// Checks an access to the given place to see if it is allowed. Examines the set of borrows
        .               /// that are in scope, as well as which paths have been initialized, to ensure that (a) the
        .               /// place is initialized and (b) it is not borrowed in some way that would prevent this
        .               /// access.
        .               ///
        .               /// Returns `true` if an error is reported.
1,090,384 ( 0.02%)      fn access_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: (AccessDepth, ReadOrWrite),
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let (sd, rw) = kind;
        .           
  272,596 ( 0.00%)          if let Activation(_, borrow_index) = rw {
      194 ( 0.00%)              if self.reservation_error_reported.contains(&place_span.0) {
        .                           debug!(
        .                               "skipping access_place for activation of invalid reservation \
        .                                place: {:?} borrow_index: {:?}",
        .                               place_span.0, borrow_index
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Check is_empty() first because it's the common case, and doing that
        .                   // way we avoid the clone() call.
   68,149 ( 0.00%)          if !self.access_place_error_reported.is_empty()
        .                       && self.access_place_error_reported.contains(&(place_span.0, place_span.1))
        .                   {
        .                       debug!(
        .                           "access_place: suppressing error place_span=`{:?}` kind=`{:?}`",
        .                           place_span, kind
        .                       );
        .                       return;
        .                   }
        .           
  408,894 ( 0.01%)          let mutability_error = self.check_access_permissions(
  272,596 ( 0.00%)              place_span,
        .                       rw,
        .                       is_local_mutation_allowed,
        .                       flow_state,
        .                       location,
        .                   );
        .                   let conflict_error =
  749,639 ( 0.01%)              self.check_access_for_conflict(location, place_span, sd, rw, flow_state);
        .           
  204,447 ( 0.00%)          if let (Activation(_, borrow_idx), true) = (kind.1, conflict_error) {
        .                       // Suppress this warning when there's an error being emitted for the
        .                       // same borrow: fixing the error is likely to fix the warning.
        .                       self.reservation_warnings.remove(&borrow_idx);
        .                   }
        .           
  204,447 ( 0.00%)          if conflict_error || mutability_error {
        .                       debug!("access_place: logging error place_span=`{:?}` kind=`{:?}`", place_span, kind);
        .           
        .                       self.access_place_error_reported.insert((place_span.0, place_span.1));
        .                   }
  545,192 ( 0.01%)      }
        .           
        .               fn check_access_for_conflict(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   sd: AccessDepth,
        .                   rw: ReadOrWrite,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_for_conflict(location={:?}, place_span={:?}, sd={:?}, rw={:?})",
        .                       location, place_span, sd, rw,
        .                   );
        .           
   68,149 ( 0.00%)          let mut error_reported = false;
  204,447 ( 0.00%)          let tcx = self.infcx.tcx;
        .                   let body = self.body;
  136,298 ( 0.00%)          let borrow_set = self.borrow_set.clone();
        .           
        .                   // Use polonius output if it has been enabled.
  136,298 ( 0.00%)          let polonius_output = self.polonius_output.clone();
        .                   let borrows_in_scope = if let Some(polonius) = &polonius_output {
        .                       let location = self.location_table.start_index(location);
        .                       Either::Left(polonius.errors_at(location).iter().copied())
        .                   } else {
        .                       Either::Right(flow_state.borrows.iter())
        .                   };
        .           
  885,937 ( 0.01%)          each_borrow_involving_path(
        .                       self,
        .                       tcx,
        .                       body,
        .                       location,
  408,894 ( 0.01%)              (sd, place_span.0),
        .                       &borrow_set,
  408,894 ( 0.01%)              borrows_in_scope,
  750,900 ( 0.01%)              |this, borrow_index, borrow| match (rw, borrow.kind) {
        .                           // Obviously an activation is compatible with its own
        .                           // reservation (or even prior activating uses of same
        .                           // borrow); so don't check if they interfere.
        .                           //
        .                           // NOTE: *reservations* do conflict with themselves;
        .                           // thus aren't injecting unsoundenss w/ this check.)
       97 ( 0.00%)                  (Activation(_, activating), _) if activating == borrow_index => {
        .                               debug!(
        .                                   "check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \
        .                                    skipping {:?} b/c activation of same borrow_index",
        .                                   place_span,
        .                                   sd,
        .                                   rw,
        .                                   (borrow_index, borrow),
        .                               );
-- line 1084 ----------------------------------------
-- line 1179 ----------------------------------------
        .                                   }
        .                               }
        .                               Control::Break
        .                           }
        .                       },
        .                   );
        .           
        .                   error_reported
  204,447 ( 0.00%)      }
        .           
  229,170 ( 0.00%)      fn mutate_place(
        .                   &mut self,
        .                   location: Location,
        .                   place_span: (Place<'tcx>, Span),
        .                   kind: AccessDepth,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   // Write of P[i] or *P requires P init'd.
  206,253 ( 0.00%)          self.check_if_assigned_path_is_moved(location, place_span, flow_state);
        .           
        .                   // Special case: you can assign an immutable local variable
        .                   // (e.g., `x = ...`) so long as it has never been initialized
        .                   // before (at this point in the flow).
   22,917 ( 0.00%)          if let Some(local) = place_span.0.as_local() {
   91,644 ( 0.00%)              if let Mutability::Not = self.body.local_decls[local].mutability {
        .                           // check for reassignments to immutable local variables
        .                           self.check_if_reassignment_to_immutable_state(
        .                               location, local, place_span, flow_state,
        .                           );
        .                           return;
        .                       }
        .                   }
        .           
        .                   // Otherwise, use the normal access permission rules.
  269,028 ( 0.00%)          self.access_place(
        .                       location,
   89,676 ( 0.00%)              place_span,
        .                       (kind, Write(WriteKind::Mutate)),
        .                       LocalMutationIsAllowed::No,
        .                       flow_state,
        .                   );
  183,336 ( 0.00%)      }
        .           
        .               fn consume_rvalue(
        .                   &mut self,
        .                   location: Location,
        .                   (rvalue, span): (&'cx Rvalue<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   75,528 ( 0.00%)          match *rvalue {
    2,139 ( 0.00%)              Rvalue::Ref(_ /*rgn*/, bk, place) => {
    8,342 ( 0.00%)                  let access_kind = match bk {
        .                               BorrowKind::Shallow => {
        .                                   (Shallow(Some(ArtificialField::ShallowBorrow)), Read(ReadKind::Borrow(bk)))
        .                               }
        .                               BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),
        .                               BorrowKind::Unique | BorrowKind::Mut { .. } => {
        .                                   let wk = WriteKind::MutableBorrow(bk);
      214 ( 0.00%)                          if allow_two_phase_borrow(bk) {
        .                                       (Deep, Reservation(wk))
        .                                   } else {
        .                                       (Deep, Write(wk))
        .                                   }
        .                               }
        .                           };
        .           
   14,973 ( 0.00%)                  self.access_place(
        .                               location,
    2,852 ( 0.00%)                      (place, span),
        .                               access_kind,
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           let action = if bk == BorrowKind::Shallow {
        .                               InitializationRequiringAction::MatchOn
        .                           } else {
        .                               InitializationRequiringAction::Borrow
        .                           };
        .           
    4,991 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               action,
    4,991 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::AddressOf(mutability, place) => {
        .                           let access_kind = match mutability {
        .                               Mutability::Mut => (
        .                                   Deep,
-- line 1270 ----------------------------------------
-- line 1302 ----------------------------------------
        .                       }
        .           
        .                       Rvalue::Len(place) | Rvalue::Discriminant(place) => {
        .                           let af = match *rvalue {
        .                               Rvalue::Len(..) => Some(ArtificialField::ArrayLength),
        .                               Rvalue::Discriminant(..) => None,
        .                               _ => unreachable!(),
        .                           };
    1,264 ( 0.00%)                  self.access_place(
        .                               location,
      316 ( 0.00%)                      (place, span),
        .                               (Shallow(af), Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
      553 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
      553 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .           
        .                       Rvalue::BinaryOp(_bin_op, box (ref operand1, ref operand2))
        .                       | Rvalue::CheckedBinaryOp(_bin_op, box (ref operand1, ref operand2)) => {
      910 ( 0.00%)                  self.consume_operand(location, (operand1, span), flow_state);
      637 ( 0.00%)                  self.consume_operand(location, (operand2, span), flow_state);
        .                       }
        .           
        .                       Rvalue::NullaryOp(_op, _ty) => {
        .                           // nullary ops take no dynamic input; no borrowck effect.
        .                       }
        .           
        .                       Rvalue::Aggregate(ref aggregate_kind, ref operands) => {
        .                           // We need to report back the list of mutable upvars that were
        .                           // moved into the closure and subsequently used by the closure,
        .                           // in order to populate our used_mut set.
   33,009 ( 0.00%)                  match **aggregate_kind {
        .                               AggregateKind::Closure(def_id, _) | AggregateKind::Generator(def_id, _, _) => {
        .                                   let BorrowCheckResult { used_mut_upvars, .. } =
       76 ( 0.00%)                              self.infcx.tcx.mir_borrowck(def_id.expect_local());
        .                                   debug!("{:?} used_mut_upvars={:?}", def_id, used_mut_upvars);
        .                                   for field in used_mut_upvars {
        2 ( 0.00%)                              self.propagate_closure_used_mut_upvar(&operands[field.index()]);
        .                                   }
        .                               }
        .                               AggregateKind::Adt(..)
        .                               | AggregateKind::Array(..)
        .                               | AggregateKind::Tuple { .. } => (),
        .                           }
        .           
        .                           for operand in operands {
-- line 1353 ----------------------------------------
-- line 1391 ----------------------------------------
        .           
        .                       // Handle(b)
        .                       this.used_mut.insert(place.local);
        .                   };
        .           
        .                   // This relies on the current way that by-value
        .                   // captures of a closure are copied/moved directly
        .                   // when generating MIR.
        6 ( 0.00%)          match *operand {
        .                       Operand::Move(place) | Operand::Copy(place) => {
        2 ( 0.00%)                  match place.as_local() {
        2 ( 0.00%)                      Some(local) if !self.body.local_decls[local].is_user_variable() => {
        2 ( 0.00%)                          if self.body.local_decls[local].ty.is_mutable_ptr() {
        .                                       // The variable will be marked as mutable by the borrow.
        .                                       return;
        .                                   }
        .                                   // This is an edge case where we have a `move` closure
        .                                   // inside a non-move closure, and the inner closure
        .                                   // contains a mutation:
        .                                   //
        .                                   // let mut i = 0;
-- line 1411 ----------------------------------------
-- line 1448 ----------------------------------------
        .                               }
        .                               _ => propagate_closure_used_mut_place(self, place),
        .                           }
        .                       }
        .                       Operand::Constant(..) => {}
        .                   }
        .               }
        .           
  264,156 ( 0.00%)      fn consume_operand(
        .                   &mut self,
        .                   location: Location,
        .                   (operand, span): (&'cx Operand<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
  383,170 ( 0.01%)          match *operand {
      948 ( 0.00%)              Operand::Copy(place) => {
        .                           // copy of place: check if this is "copy of frozen path"
        .                           // (FIXME: see check_loans.rs)
    1,896 ( 0.00%)                  self.access_place(
        .                               location,
    1,580 ( 0.00%)                      (place, span),
        .                               (Deep, Read(ReadKind::Copy)),
        .                               LocalMutationIsAllowed::No,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
        .                           self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
        .                               (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
   65,784 ( 0.00%)              Operand::Move(place) => {
        .                           // move of place: check if this is move of already borrowed path
  219,178 ( 0.00%)                  self.access_place(
        .                               location,
  109,640 ( 0.00%)                      (place, span),
        .                               (Deep, Write(WriteKind::Move)),
        .                               LocalMutationIsAllowed::Yes,
        .                               flow_state,
        .                           );
        .           
        .                           // Finally, check if path was already moved.
   87,576 ( 0.00%)                  self.check_if_path_or_subpath_is_moved(
        .                               location,
        .                               InitializationRequiringAction::Use,
   65,682 ( 0.00%)                      (place.as_ref(), span),
        .                               flow_state,
        .                           );
        .                       }
        .                       Operand::Constant(_) => {}
        .                   }
  176,104 ( 0.00%)      }
        .           
        .               /// Checks whether a borrow of this place is invalidated when the function
        .               /// exits
        .               fn check_for_invalidation_at_exit(
        .                   &mut self,
        .                   location: Location,
        .                   borrow: &BorrowData<'tcx>,
        .                   span: Span,
-- line 1510 ----------------------------------------
-- line 1573 ----------------------------------------
        .                       err.buffer(&mut self.errors_buffer);
        .                   }
        .               }
        .           
        .               fn check_activations(&mut self, location: Location, span: Span, flow_state: &Flows<'cx, 'tcx>) {
        .                   // Two-phase borrow support: For each activation that is newly
        .                   // generated at this statement, check if it interferes with
        .                   // another borrow.
  137,972 ( 0.00%)          let borrow_set = self.borrow_set.clone();
  264,677 ( 0.00%)          for &borrow_index in borrow_set.activations_at_location(location) {
        .                       let borrow = &borrow_set[borrow_index];
        .           
        .                       // only mutable borrows should be 2-phase
      485 ( 0.00%)              assert!(match borrow.kind {
        .                           BorrowKind::Shared | BorrowKind::Shallow => false,
        .                           BorrowKind::Unique | BorrowKind::Mut { .. } => true,
        .                       });
        .           
    1,164 ( 0.00%)              self.access_place(
        .                           location,
      582 ( 0.00%)                  (borrow.borrowed_place, span),
      873 ( 0.00%)                  (Deep, Activation(WriteKind::MutableBorrow(borrow.kind), borrow_index)),
        .                           LocalMutationIsAllowed::No,
        .                           flow_state,
        .                       );
        .                       // We do not need to call `check_if_path_or_subpath_is_moved`
        .                       // again, as we already called it when we made the
        .                       // initial reservation.
        .                   }
        .               }
-- line 1602 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   location: Location,
        .                   local: Local,
        .                   place_span: (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_reassignment_to_immutable_state({:?})", local);
        .           
        .                   // Check if any of the initializiations of `local` have happened yet:
    2,988 ( 0.00%)          if let Some(init_index) = self.is_local_ever_initialized(local, flow_state) {
        .                       // And, if so, report an error.
        .                       let init = &self.move_data.inits[init_index];
        .                       let span = init.span(&self.body);
        .                       self.report_illegal_reassignment(location, place_span, span, place_span.0);
        .                   }
        .               }
        .           
  301,379 ( 0.00%)      fn check_if_full_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   let maybe_uninits = &flow_state.uninits;
        .           
-- line 1630 ----------------------------------------
-- line 1660 ----------------------------------------
        .                   // Therefore, if we seek out the *closest* prefix for which we
        .                   // have a MovePath, that should capture the initialization
        .                   // state for the place scenario.
        .                   //
        .                   // This code covers scenarios 1, 2, and 3.
        .           
        .                   debug!("check_if_full_path_is_moved place: {:?}", place_span.0);
        .                   let (prefix, mpi) = self.move_path_closest_to(place_span.0);
   23,183 ( 0.00%)          if maybe_uninits.contains(mpi) {
        .                       self.report_use_of_moved_or_uninitialized(
        .                           location,
        .                           desired_action,
        .                           (prefix, place_span.0, place_span.1),
        .                           mpi,
        .                       );
        .                   } // Only query longest prefix with a MovePath, not further
        .                   // ancestors; dataflow recurs on children when parents
        .                   // move (to support partial (re)inits).
        .                   //
        .                   // (I.e., querying parents breaks scenario 7; but may want
        .                   // to do such a query based on partial-init feature-gate.)
  185,464 ( 0.00%)      }
        .           
        .               /// Subslices correspond to multiple move paths, so we iterate through the
        .               /// elements of the base array. For each element we check
        .               ///
        .               /// * Does this element overlap with our slice.
        .               /// * Is any part of it uninitialized.
        .               fn check_if_subslice_element_is_moved(
        .                   &mut self,
-- line 1689 ----------------------------------------
-- line 1719 ----------------------------------------
        .                                       return; // don't bother finding other problems.
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
  254,947 ( 0.00%)      fn check_if_path_or_subpath_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   desired_action: InitializationRequiringAction,
        .                   place_span: (PlaceRef<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
   46,354 ( 0.00%)          let maybe_uninits = &flow_state.uninits;
        .           
        .                   // Bad scenarios:
        .                   //
        .                   // 1. Move of `a.b.c`, use of `a` or `a.b`
        .                   //    partial initialization support, one might have `a.x`
        .                   //    initialized but not `a.b`.
        .                   // 2. All bad scenarios from `check_if_full_path_is_moved`
        .                   //
-- line 1742 ----------------------------------------
-- line 1743 ----------------------------------------
        .                   // OK scenarios:
        .                   //
        .                   // 3. Move of `a.b.c`, use of `a.b.d`
        .                   // 4. Uninitialized `a.x`, initialized `a.b`, use of `a.b`
        .                   // 5. Copied `(a.b: &_)`, use of `*(a.b).c`; note that `a.b`
        .                   //    must have been initialized for the use to be sound.
        .                   // 6. Move of `a.b.c` then reinit of `a.b.c.d`, use of `a.b.c.d`
        .           
  162,239 ( 0.00%)          self.check_if_full_path_is_moved(location, desired_action, place_span, flow_state);
        .           
    3,196 ( 0.00%)          if let Some((place_base, ProjectionElem::Subslice { from, to, from_end: false })) =
   23,177 ( 0.00%)              place_span.0.last_projection()
        .                   {
        .                       let place_ty = place_base.ty(self.body(), self.infcx.tcx);
        .                       if let ty::Array(..) = place_ty.ty.kind() {
        .                           self.check_if_subslice_element_is_moved(
        .                               location,
        .                               desired_action,
        .                               (place_base, place_span.1),
        .                               maybe_uninits,
-- line 1762 ----------------------------------------
-- line 1772 ----------------------------------------
        .                   //
        .                   // (Distinct from handling of scenarios 1+2+4 above because
        .                   // `place` does not interfere with suffixes of its prefixes,
        .                   // e.g., `a.b.c` does not interfere with `a.b.d`)
        .                   //
        .                   // This code covers scenario 1.
        .           
        .                   debug!("check_if_path_or_subpath_is_moved place: {:?}", place_span.0);
   92,708 ( 0.00%)          if let Some(mpi) = self.move_path_for_place(place_span.0) {
   89,652 ( 0.00%)              let uninit_mpi = self
        .                           .move_data
        .                           .find_in_move_path_or_its_descendants(mpi, |mpi| maybe_uninits.contains(mpi));
        .           
   44,826 ( 0.00%)              if let Some(uninit_mpi) = uninit_mpi {
        .                           self.report_use_of_moved_or_uninitialized(
        .                               location,
        .                               desired_action,
        .                               (place_span.0, place_span.0, place_span.1),
        .                               uninit_mpi,
        .                           );
        .                           return; // don't bother finding other problems.
        .                       }
        .                   }
  185,416 ( 0.00%)      }
        .           
        .               /// Currently MoveData does not store entries for all places in
        .               /// the input MIR. For example it will currently filter out
        .               /// places that are Copy; thus we do not track places of shared
        .               /// reference type. This routine will walk up a place along its
        .               /// prefixes, searching for a foundational place that *is*
        .               /// tracked in the MoveData.
        .               ///
        .               /// An Err result includes a tag indicated why the search failed.
        .               /// Currently this can only occur if the place is built off of a
        .               /// static variable, as we do not track those in the MoveData.
        .               fn move_path_closest_to(&mut self, place: PlaceRef<'tcx>) -> (PlaceRef<'tcx>, MovePathIndex) {
  301,379 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(Some(mpi)) | LookupResult::Exact(mpi) => {
        .                           (self.move_data.move_paths[mpi].place.as_ref(), mpi)
        .                       }
        .                       LookupResult::Parent(None) => panic!("should have move path for every Local"),
        .                   }
        .               }
        .           
        .               fn move_path_for_place(&mut self, place: PlaceRef<'tcx>) -> Option<MovePathIndex> {
        .                   // If returns None, then there is no move path corresponding
        .                   // to a direct owner of `place` (which means there is nothing
        .                   // that borrowck tracks for its analysis).
        .           
  208,641 ( 0.00%)          match self.move_data.rev_lookup.find(place) {
        .                       LookupResult::Parent(_) => None,
        .                       LookupResult::Exact(mpi) => Some(mpi),
        .                   }
        .               }
        .           
        .               fn check_if_assigned_path_is_moved(
        .                   &mut self,
        .                   location: Location,
        .                   (place, span): (Place<'tcx>, Span),
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) {
        .                   debug!("check_if_assigned_path_is_moved place: {:?}", place);
        .           
        .                   // None case => assigning to `x` does not require `x` be initialized.
        6 ( 0.00%)          for (place_base, elem) in place.iter_projections().rev() {
       60 ( 0.00%)              match elem {
        .                           ProjectionElem::Index(_/*operand*/) |
        .                           ProjectionElem::ConstantIndex { .. } |
        .                           // assigning to P[i] requires P to be valid.
        .                           ProjectionElem::Downcast(_/*adt_def*/, _/*variant_idx*/) =>
        .                           // assigning to (P->variant) is okay if assigning to `P` is okay
        .                           //
        .                           // FIXME: is this true even if P is an adt with a dtor?
        .                           { }
        .           
        .                           // assigning to (*P) requires P to be initialized
        .                           ProjectionElem::Deref => {
       42 ( 0.00%)                      self.check_if_full_path_is_moved(
        .                                   location, InitializationRequiringAction::Use,
       36 ( 0.00%)                          (place_base, span), flow_state);
        .                               // (base initialized; no need to
        .                               // recur further)
        .                               break;
        .                           }
        .           
        .                           ProjectionElem::Subslice { .. } => {
        .                               panic!("we don't allow assignments to subslices, location: {:?}",
        .                                      location);
        .                           }
        .           
        .                           ProjectionElem::Field(..) => {
        .                               // if type of `P` has a dtor, then
        .                               // assigning to `P.f` requires `P` itself
        .                               // be already initialized
        .                               let tcx = self.infcx.tcx;
        6 ( 0.00%)                      let base_ty = place_base.ty(self.body(), tcx).ty;
       18 ( 0.00%)                      match base_ty.kind() {
       36 ( 0.00%)                          ty::Adt(def, _) if def.has_dtor(tcx) => {
        .                                       self.check_if_path_or_subpath_is_moved(
        .                                           location, InitializationRequiringAction::Assignment,
        .                                           (place_base, span), flow_state);
        .           
        .                                       // (base initialized; no need to
        .                                       // recur further)
        .                                       break;
        .                                   }
-- line 1877 ----------------------------------------
-- line 1931 ----------------------------------------
        .           
        .                       // Shallow so that we'll stop at any dereference; we'll
        .                       // report errors about issues with such bases elsewhere.
        .                       let maybe_uninits = &flow_state.uninits;
        .           
        .                       // Find the shortest uninitialized prefix you can reach
        .                       // without going over a Deref.
        .                       let mut shortest_uninit_seen = None;
      132 ( 0.00%)              for prefix in this.prefixes(base, PrefixSet::Shallow) {
        6 ( 0.00%)                  let mpi = match this.move_path_for_place(prefix) {
        .                               Some(mpi) => mpi,
        .                               None => continue,
        .                           };
        .           
        .                           if maybe_uninits.contains(mpi) {
        .                               debug!(
        .                                   "check_parent_of_field updating shortest_uninit_seen from {:?} to {:?}",
        .                                   shortest_uninit_seen,
-- line 1948 ----------------------------------------
-- line 1949 ----------------------------------------
        .                                   Some((prefix, mpi))
        .                               );
        .                               shortest_uninit_seen = Some((prefix, mpi));
        .                           } else {
        .                               debug!("check_parent_of_field {:?} is definitely initialized", (prefix, mpi));
        .                           }
        .                       }
        .           
       18 ( 0.00%)              if let Some((prefix, mpi)) = shortest_uninit_seen {
        .                           // Check for a reassignment into an uninitialized field of a union (for example,
        .                           // after a move out). In this case, do not report an error here. There is an
        .                           // exception, if this is the first assignment into the union (that is, there is
        .                           // no move out from an earlier location) then this is an attempt at initialization
        .                           // of the union - we should error in that case.
        .                           let tcx = this.infcx.tcx;
        .                           if base.ty(this.body(), tcx).ty.is_union() {
        .                               if this.move_data.path_map[mpi].iter().any(|moi| {
-- line 1965 ----------------------------------------
-- line 1979 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Checks the permissions for the given place and read or write kind
        .               ///
        .               /// Returns `true` if an error is reported.
        .               fn check_access_permissions(
        .                   &mut self,
  136,298 ( 0.00%)          (place, span): (Place<'tcx>, Span),
        .                   kind: ReadOrWrite,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .                   location: Location,
        .               ) -> bool {
        .                   debug!(
        .                       "check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})",
        .                       place, kind, is_local_mutation_allowed
        .                   );
        .           
        .                   let error_access;
        .                   let the_place_err;
        .           
1,147,981 ( 0.02%)          match kind {
        .                       Reservation(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       ))
        .                       | Write(WriteKind::MutableBorrow(
        .                           borrow_kind @ (BorrowKind::Unique | BorrowKind::Mut { .. }),
        .                       )) => {
    1,070 ( 0.00%)                  let is_local_mutation_allowed = match borrow_kind {
        .                               BorrowKind::Unique => LocalMutationIsAllowed::Yes,
        .                               BorrowKind::Mut { .. } => is_local_mutation_allowed,
        .                               BorrowKind::Shared | BorrowKind::Shallow => unreachable!(),
        .                           };
      749 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::MutableBorrow;
        .                                   the_place_err = place_err;
        .                               }
        .                           }
        .                       }
        .                       Reservation(WriteKind::Mutate) | Write(WriteKind::Mutate) => {
  156,933 ( 0.00%)                  match self.is_mutable(place.as_ref(), is_local_mutation_allowed) {
        .                               Ok(root_place) => {
        .                                   self.add_used_mut(root_place, flow_state);
        .                                   return false;
        .                               }
        .                               Err(place_err) => {
        .                                   error_access = AccessKind::Mutate;
        .                                   the_place_err = place_err;
        .                               }
-- line 2033 ----------------------------------------
-- line 2041 ----------------------------------------
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       )
        .                       | Write(
        .                           WriteKind::Move
        .                           | WriteKind::StorageDeadOrDrop
        .                           | WriteKind::MutableBorrow(BorrowKind::Shared)
        .                           | WriteKind::MutableBorrow(BorrowKind::Shallow),
        .                       ) => {
   89,050 ( 0.00%)                  if let (Err(_), true) = (
  311,675 ( 0.01%)                      self.is_mutable(place.as_ref(), is_local_mutation_allowed),
        .                               self.errors_buffer.is_empty(),
        .                           ) {
        .                               // rust-lang/rust#46908: In pure NLL mode this code path should be
        .                               // unreachable, but we use `delay_span_bug` because we can hit this when
        .                               // dereferencing a non-Copy raw pointer *and* have `-Ztreat-err-as-bug`
        .                               // enabled. We don't want to ICE for that case, as other errors will have
        .                               // been emitted (#52262).
        .                               self.infcx.tcx.sess.delay_span_bug(
-- line 2058 ----------------------------------------
-- line 2094 ----------------------------------------
        .                   if previously_initialized {
        .                       self.report_mutability_error(place, span, the_place_err, error_access, location);
        .                       true
        .                   } else {
        .                       false
        .                   }
        .               }
        .           
  114,850 ( 0.00%)      fn is_local_ever_initialized(
        .                   &self,
        .                   local: Local,
        .                   flow_state: &Flows<'cx, 'tcx>,
        .               ) -> Option<InitIndex> {
   68,910 ( 0.00%)          let mpi = self.move_data.rev_lookup.find_local(local);
   22,970 ( 0.00%)          let ii = &self.move_data.init_path_map[mpi];
   93,031 ( 0.00%)          for &index in ii {
   48,242 ( 0.00%)              if flow_state.ever_inits.contains(index) {
        .                           return Some(index);
        .                       }
        .                   }
        .                   None
   91,880 ( 0.00%)      }
        .           
        .               /// Adds the place into the used mutable variables set
   90,104 ( 0.00%)      fn add_used_mut(&mut self, root_place: RootPlace<'tcx>, flow_state: &Flows<'cx, 'tcx>) {
        4 ( 0.00%)          match root_place {
   67,578 ( 0.00%)              RootPlace { place_local: local, place_projection: [], is_local_mutation_allowed } => {
        .                           // If the local may have been initialized, and it is now currently being
        .                           // mutated, then it is justified to be annotated with the `mut`
        .                           // keyword, since the mutation may be a possible reassignment.
   44,996 ( 0.00%)                  if is_local_mutation_allowed != LocalMutationIsAllowed::Yes
   67,416 ( 0.00%)                      && self.is_local_ever_initialized(local, flow_state).is_some()
        .                           {
        .                               self.used_mut.insert(local);
        .                           }
        .                       }
        .                       RootPlace {
        .                           place_local: _,
        .                           place_projection: _,
        .                           is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                       } => {}
        .                       RootPlace {
        2 ( 0.00%)                  place_local,
        2 ( 0.00%)                  place_projection: place_projection @ [.., _],
        .                           is_local_mutation_allowed: _,
        .                       } => {
        4 ( 0.00%)                  if let Some(field) = self.is_upvar_field_projection(PlaceRef {
        .                               local: place_local,
        .                               projection: place_projection,
        .                           }) {
        2 ( 0.00%)                      self.used_mut_upvars.push(field);
        .                           }
        .                       }
        .                   }
   89,588 ( 0.00%)      }
        .           
        .               /// Whether this value can be written or borrowed mutably.
        .               /// Returns the root place if the place passed in is a projection.
  738,694 ( 0.01%)      fn is_mutable(
        .                   &self,
        .                   place: PlaceRef<'tcx>,
        .                   is_local_mutation_allowed: LocalMutationIsAllowed,
        .               ) -> Result<RootPlace<'tcx>, PlaceRef<'tcx>> {
        .                   debug!("is_mutable: place={:?}, is_local...={:?}", place, is_local_mutation_allowed);
  201,668 ( 0.00%)          match place.last_projection() {
        .                       None => {
   67,051 ( 0.00%)                  let local = &self.body.local_decls[place.local];
  201,153 ( 0.00%)                  match local.mutability {
    1,190 ( 0.00%)                      Mutability::Not => match is_local_mutation_allowed {
    3,570 ( 0.00%)                          LocalMutationIsAllowed::Yes => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::Yes,
        .                                   }),
        .                                   LocalMutationIsAllowed::ExceptUpvars => Ok(RootPlace {
        .                                       place_local: place.local,
        .                                       place_projection: place.projection,
        .                                       is_local_mutation_allowed: LocalMutationIsAllowed::ExceptUpvars,
        .                                   }),
        .                                   LocalMutationIsAllowed::No => Err(place),
        .                               },
  132,912 ( 0.00%)                      Mutability::Mut => Ok(RootPlace {
        .                                   place_local: place.local,
        .                                   place_projection: place.projection,
        .                                   is_local_mutation_allowed,
        .                               }),
        .                           }
        .                       }
        .                       Some((place_base, elem)) => {
      309 ( 0.00%)                  match elem {
        .                               ProjectionElem::Deref => {
      112 ( 0.00%)                          let base_ty = place_base.ty(self.body(), self.infcx.tcx).ty;
        .           
        .                                   // Check the kind of deref to decide
      336 ( 0.00%)                          match base_ty.kind() {
        .                                       ty::Ref(_, _, mutbl) => {
      112 ( 0.00%)                                  match mutbl {
        .                                               // Shared borrowed data is never mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // Mutably borrowed data is mutable, but only if we have a
        .                                               // unique path to the `&mut`
        .                                               hir::Mutability::Mut => {
      112 ( 0.00%)                                          let mode = match self.is_upvar_field_projection(place) {
       10 ( 0.00%)                                              Some(field) if self.upvars[field.index()].by_ref => {
        .                                                           is_local_mutation_allowed
        .                                                       }
        .                                                       _ => LocalMutationIsAllowed::Yes,
        .                                                   };
        .           
      336 ( 0.00%)                                          self.is_mutable(place_base, mode)
        .                                               }
        .                                           }
        .                                       }
        .                                       ty::RawPtr(tnm) => {
        .                                           match tnm.mutbl {
        .                                               // `*const` raw pointers are not mutable
        .                                               hir::Mutability::Not => Err(place),
        .                                               // `*mut` raw pointers are always mutable, regardless of
-- line 2211 ----------------------------------------
-- line 2228 ----------------------------------------
        .                               // All other projections are owned by their base path, so mutable if
        .                               // base path is mutable
        .                               ProjectionElem::Field(..)
        .                               | ProjectionElem::Index(..)
        .                               | ProjectionElem::ConstantIndex { .. }
        .                               | ProjectionElem::Subslice { .. }
        .                               | ProjectionElem::Downcast(..) => {
        .                                   let upvar_field_projection = self.is_upvar_field_projection(place);
       94 ( 0.00%)                          if let Some(field) = upvar_field_projection {
        .                                       let upvar = &self.upvars[field.index()];
        .                                       debug!(
        .                                           "is_mutable: upvar.mutability={:?} local_mutation_is_allowed={:?} \
        .                                            place={:?}, place_base={:?}",
        .                                           upvar, is_local_mutation_allowed, place, place_base
        .                                       );
       10 ( 0.00%)                              match (upvar.place.mutability, is_local_mutation_allowed) {
        .                                           (
        .                                               Mutability::Not,
        .                                               LocalMutationIsAllowed::No
        .                                               | LocalMutationIsAllowed::ExceptUpvars,
        .                                           ) => Err(place),
        .                                           (Mutability::Not, LocalMutationIsAllowed::Yes)
        .                                           | (Mutability::Mut, _) => {
        .                                               // Subtle: this is an upvar
-- line 2251 ----------------------------------------
-- line 2270 ----------------------------------------
        .                                               // fn main() {
        .                                               //     let var = Vec::new();
        .                                               //     foo(move || {
        .                                               //         var.push(1);
        .                                               //     });
        .                                               // }
        .                                               // ```
        .                                               let _ =
       18 ( 0.00%)                                          self.is_mutable(place_base, is_local_mutation_allowed)?;
        .                                               Ok(RootPlace {
        .                                                   place_local: place.local,
        .                                                   place_projection: place.projection,
        .                                                   is_local_mutation_allowed,
        .                                               })
        .                                           }
        .                                       }
        .                                   } else {
        .                                       self.is_mutable(place_base, is_local_mutation_allowed)
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
  537,232 ( 0.01%)      }
        .           
        .               /// If `place` is a field projection, and the field is being projected from a closure type,
        .               /// then returns the index of the field being projected. Note that this closure will always
        .               /// be `self` in the current MIR, because that is the only time we directly access the fields
        .               /// of a closure type.
        .               fn is_upvar_field_projection(&self, place_ref: PlaceRef<'tcx>) -> Option<Field> {
      943 ( 0.00%)          path_utils::is_upvar_field_projection(self.infcx.tcx, &self.upvars, place_ref, self.body())
        .               }
        .           }
        .           
        .           /// The degree of overlap between 2 places for borrow-checking.
        .           enum Overlap {
        .               /// The places might partially overlap - in this case, we give
        .               /// up and say that they might conflict. This occurs when
        .               /// different fields of a union are borrowed. For example,
-- line 2308 ----------------------------------------

1,922,093 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_borrowck/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
5,377,910 ( 0.09%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
4,033,431 ( 0.07%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
  285,200 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  427,800 ( 0.01%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
1,415,767 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  279,180 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  558,360 ( 0.01%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 38 ----------------------------------------
        .           #[derive(Debug)]
        .           pub struct Token {
        .               pub kind: TokenKind,
        .               pub len: usize,
        .           }
        .           
        .           impl Token {
        .               fn new(kind: TokenKind, len: usize) -> Token {
1,653,165 ( 0.03%)          Token { kind, len }
        .               }
        .           }
        .           
        .           /// Enum representing common lexeme types.
        .           // perf note: Changing all `usize` to `u32` doesn't change performance. See #77629
  220,660 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)]
        .           pub enum TokenKind {
        .               // Multi-char tokens:
        .               /// "// comment"
        .               LineComment { doc_style: Option<DocStyle> },
        .               /// `/* block comment */`
        .               ///
        .               /// Block comments can be recursive, so the sequence like `/* /* */`
        .               /// will not be considered terminated and will result in a parsing error.
-- line 60 ----------------------------------------
-- line 192 ----------------------------------------
        .               /// Literal starts with "0x".
        .               Hexadecimal,
        .               /// Literal doesn't contain a prefix.
        .               Decimal,
        .           }
        .           
        .           /// `rustc` allows files to have a shebang, e.g. "#!/usr/bin/rustrun",
        .           /// but shebang isn't a part of rust syntax.
       14 ( 0.00%)  pub fn strip_shebang(input: &str) -> Option<usize> {
        .               // Shebang must start with `#!` literally, without any preceding whitespace.
        .               // For simplicity we consider any line starting with `#!` a shebang,
        .               // regardless of restrictions put on shebangs by specific platforms.
        .               if let Some(input_tail) = input.strip_prefix("#!") {
        .                   // Ok, this is a shebang but if the next non-whitespace token is `[`,
        .                   // then it may be valid Rust code, so consider it Rust code.
        .                   let next_non_whitespace_token = tokenize(input_tail).map(|tok| tok.kind).find(|tok| {
        .                       !matches!(
        .                           tok,
        .                           TokenKind::Whitespace
        .                               | TokenKind::LineComment { doc_style: None }
        .                               | TokenKind::BlockComment { doc_style: None, .. }
        .                       )
        .                   });
        1 ( 0.00%)          if next_non_whitespace_token != Some(TokenKind::OpenBracket) {
        .                       // No other choice than to consider this a shebang.
        .                       return Some(2 + input_tail.lines().next().unwrap_or_default().len());
        .                   }
        .               }
        .               None
       16 ( 0.00%)  }
        .           
        .           /// Parses the first token from the provided input string.
  551,052 ( 0.01%)  pub fn first_token(input: &str) -> Token {
        .               debug_assert!(!input.is_empty());
  183,684 ( 0.00%)      Cursor::new(input).advance_token()
  734,736 ( 0.01%)  }
        .           
        .           /// Creates an iterator that produces tokens from the input string.
        .           pub fn tokenize(input: &str) -> impl Iterator<Item = Token> + '_ {
        .               let mut cursor = Cursor::new(input);
        .               std::iter::from_fn(move || {
        1 ( 0.00%)          if cursor.is_eof() {
        .                       None
        .                   } else {
        .                       cursor.reset_len_consumed();
       14 ( 0.00%)              Some(cursor.advance_token())
        .                   }
        .               })
        .           }
        .           
        .           /// True if `c` is considered a whitespace according to Rust language definition.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/whitespace.html)
        .           /// for definitions of these classes.
        .           pub fn is_whitespace(c: char) -> bool {
        .               // This is Pattern_White_Space.
        .               //
        .               // Note that this set is stable (ie, it doesn't change with different
        .               // Unicode versions), so it's ok to just hard-code the values.
        .           
  249,600 ( 0.00%)      matches!(
        .                   c,
        .                   // Usual ASCII suspects
        .                   '\u{0009}'   // \t
        .                   | '\u{000A}' // \n
        .                   | '\u{000B}' // vertical tab
        .                   | '\u{000C}' // form feed
        .                   | '\u{000D}' // \r
        .                   | '\u{0020}' // space
-- line 259 ----------------------------------------
-- line 271 ----------------------------------------
        .               )
        .           }
        .           
        .           /// True if `c` is valid as a first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_start(c: char) -> bool {
        .               // This is XID_Start OR '_' (which formally is not a XID_Start).
   61,788 ( 0.00%)      c == '_' || unicode_xid::UnicodeXID::is_xid_start(c)
        .           }
        .           
        .           /// True if `c` is valid as a non-first character of an identifier.
        .           /// See [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html) for
        .           /// a formal definition of valid identifier name.
        .           pub fn is_id_continue(c: char) -> bool {
        .               unicode_xid::UnicodeXID::is_xid_continue(c)
        .           }
-- line 287 ----------------------------------------
-- line 293 ----------------------------------------
        .                   is_id_start(start) && chars.all(is_id_continue)
        .               } else {
        .                   false
        .               }
        .           }
        .           
        .           impl Cursor<'_> {
        .               /// Parses a token from the input string.
1,469,480 ( 0.02%)      fn advance_token(&mut self) -> Token {
        .                   let first_char = self.bump().unwrap();
  752,459 ( 0.01%)          let token_kind = match first_char {
        .                       // Slash, comment or block comment.
    1,236 ( 0.00%)              '/' => match self.first() {
        .                           '/' => self.line_comment(),
        .                           '*' => self.block_comment(),
        .                           _ => Slash,
        .                       },
        .           
        .                       // Whitespace sequence.
        .                       c if is_whitespace(c) => self.whitespace(),
        .           
        .                       // Raw identifier, raw string literal or identifier.
      240 ( 0.00%)              'r' => match (self.first(), self.second()) {
        .                           ('#', c1) if is_id_start(c1) => self.raw_ident(),
        .                           ('#', _) | ('"', _) => {
        .                               let (n_hashes, err) = self.raw_double_quoted_string(1);
        .                               let suffix_start = self.len_consumed();
        .                               if err.is_none() {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = RawStr { n_hashes, err };
        .                               Literal { kind, suffix_start }
        .                           }
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Byte literal, byte string literal, raw byte string literal or identifier.
      308 ( 0.00%)              'b' => match (self.first(), self.second()) {
        .                           ('\'', _) => {
        .                               self.bump();
       15 ( 0.00%)                      let terminated = self.single_quoted_string();
        .                               let suffix_start = self.len_consumed();
       10 ( 0.00%)                      if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
        .                               let kind = Byte { terminated };
       10 ( 0.00%)                      Literal { kind, suffix_start }
        .                           }
        .                           ('"', _) => {
        .                               self.bump();
        .                               let terminated = self.double_quoted_string();
        .                               let suffix_start = self.len_consumed();
        .                               if terminated {
        .                                   self.eat_literal_suffix();
        .                               }
-- line 347 ----------------------------------------
-- line 361 ----------------------------------------
        .                           _ => self.ident_or_unknown_prefix(),
        .                       },
        .           
        .                       // Identifier (this should be checked after other variant that can
        .                       // start as identifier).
        .                       c if is_id_start(c) => self.ident_or_unknown_prefix(),
        .           
        .                       // Numeric literal.
  380,568 ( 0.01%)              c @ '0'..='9' => {
        .                           let literal_kind = self.number(c);
        .                           let suffix_start = self.len_consumed();
        .                           self.eat_literal_suffix();
      485 ( 0.00%)                  TokenKind::Literal { kind: literal_kind, suffix_start }
        .                       }
        .           
        .                       // One-symbol tokens.
      408 ( 0.00%)              ';' => Semi,
   62,742 ( 0.00%)              ',' => Comma,
      644 ( 0.00%)              '.' => Dot,
   22,552 ( 0.00%)              '(' => OpenParen,
   22,552 ( 0.00%)              ')' => CloseParen,
      470 ( 0.00%)              '{' => OpenBrace,
      470 ( 0.00%)              '}' => CloseBrace,
   20,066 ( 0.00%)              '[' => OpenBracket,
   20,064 ( 0.00%)              ']' => CloseBracket,
        .                       '@' => At,
       52 ( 0.00%)              '#' => Pound,
        .                       '~' => Tilde,
        6 ( 0.00%)              '?' => Question,
   40,316 ( 0.00%)              ':' => Colon,
        .                       '$' => Dollar,
      488 ( 0.00%)              '=' => Eq,
       38 ( 0.00%)              '!' => Bang,
      128 ( 0.00%)              '<' => Lt,
      272 ( 0.00%)              '>' => Gt,
      124 ( 0.00%)              '-' => Minus,
      372 ( 0.00%)              '&' => And,
      124 ( 0.00%)              '|' => Or,
       36 ( 0.00%)              '+' => Plus,
       10 ( 0.00%)              '*' => Star,
        .                       '^' => Caret,
        .                       '%' => Percent,
        .           
        .                       // Lifetime or character literal.
   90,528 ( 0.00%)              '\'' => self.lifetime_or_char(),
        .           
        .                       // String literal.
        .                       '"' => {
    1,848 ( 0.00%)                  let terminated = self.double_quoted_string();
        .                           let suffix_start = self.len_consumed();
    1,232 ( 0.00%)                  if terminated {
        .                               self.eat_literal_suffix();
        .                           }
        .                           let kind = Str { terminated };
    1,232 ( 0.00%)                  Literal { kind, suffix_start }
        .                       }
        .                       // Identifier starting with an emoji. Only lexed for graceful error recovery.
        .                       c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
        .                       _ => Unknown,
        .                   };
        .                   Token::new(token_kind, self.len_consumed())
1,653,165 ( 0.03%)      }
        .           
        .               fn line_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '/');
        .                   self.bump();
        .           
      798 ( 0.00%)          let doc_style = match self.first() {
        .                       // `//!` is an inner line doc comment.
        .                       '!' => Some(DocStyle::Inner),
        .                       // `////` (more than 3 slashes) is not considered a doc comment.
      657 ( 0.00%)              '/' if self.second() != '/' => Some(DocStyle::Outer),
        .                       _ => None,
        .                   };
        .           
   12,372 ( 0.00%)          self.eat_while(|c| c != '\n');
      927 ( 0.00%)          LineComment { doc_style }
        .               }
        .           
        .               fn block_comment(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '/' && self.first() == '*');
        .                   self.bump();
        .           
        .                   let doc_style = match self.first() {
        .                       // `/*!` is an inner block doc comment.
-- line 447 ----------------------------------------
-- line 474 ----------------------------------------
        .                   }
        .           
        .                   BlockComment { doc_style, terminated: depth == 0 }
        .               }
        .           
        .               fn whitespace(&mut self) -> TokenKind {
        .                   debug_assert!(is_whitespace(self.prev()));
        .                   self.eat_while(is_whitespace);
   34,449 ( 0.00%)          Whitespace
        .               }
        .           
        .               fn raw_ident(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == 'r' && self.first() == '#' && is_id_start(self.second()));
        .                   // Eat "#" symbol.
        .                   self.bump();
        .                   // Eat the identifier part of RawIdent.
        .                   self.eat_identifier();
        .                   RawIdent
        .               }
        .           
  110,330 ( 0.00%)      fn ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   debug_assert!(is_id_start(self.prev()));
        .                   // Start is already eaten, eat the rest of identifier.
   44,132 ( 0.00%)          self.eat_while(is_id_continue);
        .                   // Known prefixes must have been handled earlier. So if
        .                   // we see a prefix here, it is definitely an unknown prefix.
   44,132 ( 0.00%)          match self.first() {
        .                       '#' | '"' | '\'' => UnknownPrefix,
   22,066 ( 0.00%)              c if !c.is_ascii() && unic_emoji_char::is_emoji(c) => {
        .                           self.fake_ident_or_unknown_prefix()
        .                       }
   22,066 ( 0.00%)              _ => Ident,
        .                   }
   88,264 ( 0.00%)      }
        .           
        .               fn fake_ident_or_unknown_prefix(&mut self) -> TokenKind {
        .                   // Start is already eaten, eat the rest of identifier.
        .                   self.eat_while(|c| {
        .                       unicode_xid::UnicodeXID::is_xid_continue(c)
        .                           || (!c.is_ascii() && unic_emoji_char::is_emoji(c))
        .                           || c == '\u{200d}'
        .                   });
-- line 515 ----------------------------------------
-- line 519 ----------------------------------------
        .                       '#' | '"' | '\'' => UnknownPrefix,
        .                       _ => InvalidIdent,
        .                   }
        .               }
        .           
        .               fn number(&mut self, first_digit: char) -> LiteralKind {
        .                   debug_assert!('0' <= self.prev() && self.prev() <= '9');
        .                   let mut base = Base::Decimal;
      194 ( 0.00%)          if first_digit == '0' {
        .                       // Attempt to parse encoding base.
       89 ( 0.00%)              let has_digits = match self.first() {
        .                           'b' => {
        .                               base = Base::Binary;
        .                               self.bump();
        .                               self.eat_decimal_digits()
        .                           }
        .                           'o' => {
        .                               base = Base::Octal;
        .                               self.bump();
-- line 537 ----------------------------------------
-- line 538 ----------------------------------------
        .                               self.eat_decimal_digits()
        .                           }
        .                           'x' => {
        .                               base = Base::Hexadecimal;
        .                               self.bump();
        .                               self.eat_hexadecimal_digits()
        .                           }
        .                           // Not a base prefix.
       63 ( 0.00%)                  '0'..='9' | '_' | '.' | 'e' | 'E' => {
        .                               self.eat_decimal_digits();
        .                               true
        .                           }
        .                           // Just a 0.
        .                           _ => return Int { base, empty_int: false },
        .                       };
        .                       // Base prefix was provided, but there were no digits
        .                       // after it, e.g. "0x".
-- line 554 ----------------------------------------
-- line 555 ----------------------------------------
        .                       if !has_digits {
        .                           return Int { base, empty_int: true };
        .                       }
        .                   } else {
        .                       // No base prefix, parse number in the usual way.
        .                       self.eat_decimal_digits();
        .                   };
        .           
      424 ( 0.00%)          match self.first() {
        .                       // Don't be greedy if this is actually an
        .                       // integer literal followed by field/method access or a range pattern
        .                       // (`0..2` and `12.foo()`)
       22 ( 0.00%)              '.' if self.second() != '.' && !is_id_start(self.second()) => {
        .                           // might have stuff after the ., and if it does, it needs to start
        .                           // with a number
        .                           self.bump();
        .                           let mut empty_exponent = false;
        .                           if self.first().is_digit(10) {
        .                               self.eat_decimal_digits();
        .                               match self.first() {
        .                                   'e' | 'E' => {
-- line 575 ----------------------------------------
-- line 585 ----------------------------------------
        .                           self.bump();
        .                           let empty_exponent = !self.eat_float_exponent();
        .                           Float { base, empty_exponent }
        .                       }
        .                       _ => Int { base, empty_int: false },
        .                   }
        .               }
        .           
  211,232 ( 0.00%)      fn lifetime_or_char(&mut self) -> TokenKind {
        .                   debug_assert!(self.prev() == '\'');
        .           
   60,352 ( 0.00%)          let can_be_a_lifetime = if self.second() == '\'' {
        .                       // It's surely not a lifetime.
        .                       false
        .                   } else {
        .                       // If the first symbol is valid for identifier, it can be a lifetime.
        .                       // Also check if it's a number for a better error reporting (so '0 will
        .                       // be reported as invalid lifetime and not as unterminated char literal).
        .                       is_id_start(self.first()) || self.first().is_digit(10)
        .                   };
        .           
        .                   if !can_be_a_lifetime {
   90,414 ( 0.00%)              let terminated = self.single_quoted_string();
        .                       let suffix_start = self.len_consumed();
   60,276 ( 0.00%)              if terminated {
        .                           self.eat_literal_suffix();
        .                       }
        .                       let kind = Char { terminated };
  120,552 ( 0.00%)              return Literal { kind, suffix_start };
        .                   }
        .           
        .                   // Either a lifetime or a character literal with
        .                   // length greater than 1.
        .           
        .                   let starts_with_number = self.first().is_digit(10);
        .           
        .                   // Skip the literal contents.
        .                   // First symbol can be a number (which isn't a valid identifier start),
        .                   // so skip it without any checks.
        .                   self.bump();
       76 ( 0.00%)          self.eat_while(is_id_continue);
        .           
        .                   // Check if after skipping literal contents we've met a closing
        .                   // single quote (which means that user attempted to create a
        .                   // string with single quotes).
       76 ( 0.00%)          if self.first() == '\'' {
        .                       self.bump();
        .                       let kind = Char { terminated: true };
        .                       Literal { kind, suffix_start: self.len_consumed() }
        .                   } else {
       76 ( 0.00%)              Lifetime { starts_with_number }
        .                   }
  181,056 ( 0.00%)      }
        .           
        .               fn single_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '\'');
        .                   // Check if it's a one-symbol literal.
  120,572 ( 0.00%)          if self.second() == '\'' && self.first() != '\\' {
        .                       self.bump();
        .                       self.bump();
        .                       return true;
        .                   }
        .           
        .                   // Literal has more than one symbol.
        .           
        .                   // Parse until either quotes are terminated or error is detected.
-- line 650 ----------------------------------------
-- line 670 ----------------------------------------
        .                           // Skip the character.
        .                           _ => {
        .                               self.bump();
        .                           }
        .                       }
        .                   }
        .                   // String was not terminated.
        .                   false
   30,143 ( 0.00%)      }
        .           
        .               /// Eats double-quoted string and returns true
        .               /// if string is terminated.
        .               fn double_quoted_string(&mut self) -> bool {
        .                   debug_assert!(self.prev() == '"');
        .                   while let Some(c) = self.bump() {
   17,976 ( 0.00%)              match c {
        .                           '"' => {
        .                               return true;
        .                           }
        .                           '\\' if self.first() == '\\' || self.first() == '"' => {
        .                               // Bump again to skip escaped character.
        .                               self.bump();
        .                           }
        .                           _ => (),
        .                       }
        .                   }
        .                   // End of file reached.
        .                   false
      616 ( 0.00%)      }
        .           
        .               /// Eats the double-quoted string and returns `n_hashes` and an error if encountered.
        .               fn raw_double_quoted_string(&mut self, prefix_len: usize) -> (u16, Option<RawStrError>) {
        .                   // Wrap the actual function to handle the error with too many hashes.
        .                   // This way, it eats the whole raw string.
        .                   let (n_hashes, err) = self.raw_string_unvalidated(prefix_len);
        .                   // Only up to 65535 `#`s are allowed in raw strings
        .                   match u16::try_from(n_hashes) {
-- line 706 ----------------------------------------
-- line 773 ----------------------------------------
        .                           max_hashes = n_end_hashes;
        .                       }
        .                   }
        .               }
        .           
        .               fn eat_decimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
      202 ( 0.00%)              match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
      303 ( 0.00%)                  '0'..='9' => {
        .                               has_digits = true;
        .                               self.bump();
        .                           }
        .                           _ => break,
        .                       }
        .                   }
        .                   has_digits
      156 ( 0.00%)      }
        .           
        .               fn eat_hexadecimal_digits(&mut self) -> bool {
        .                   let mut has_digits = false;
        .                   loop {
        .                       match self.first() {
        .                           '_' => {
        .                               self.bump();
        .                           }
-- line 801 ----------------------------------------
-- line 816 ----------------------------------------
        .                   if self.first() == '-' || self.first() == '+' {
        .                       self.bump();
        .                   }
        .                   self.eat_decimal_digits()
        .               }
        .           
        .               // Eats the suffix of the literal, e.g. "_u8".
        .               fn eat_literal_suffix(&mut self) {
   61,712 ( 0.00%)          self.eat_identifier();
        .               }
        .           
        .               // Eats the identifier.
   92,568 ( 0.00%)      fn eat_identifier(&mut self) {
        .                   if !is_id_start(self.first()) {
        .                       return;
        .                   }
        .                   self.bump();
        .           
        .                   self.eat_while(is_id_continue);
  123,424 ( 0.00%)      }
        .           }

2,349,300 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_lexer/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           // maximum of number bytes needed to fill an 8-byte-sized element on which
        .           // SipHash operates. Note that for variable-sized copies which are known to be
        .           // less than 8 bytes, this function will perform more work than necessary unless
        .           // the compiler is able to optimize the extra work away.
        .           #[inline]
        .           unsafe fn copy_nonoverlapping_small(src: *const u8, dst: *mut u8, count: usize) {
        .               debug_assert!(count <= 8);
        .           
   40,639 ( 0.00%)      if count == 8 {
        .                   ptr::copy_nonoverlapping(src, dst, 8);
        .                   return;
        .               }
        .           
        .               let mut i = 0;
   53,606 ( 0.00%)      if i + 3 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 4);
        .                   i += 4;
        .               }
        .           
  112,865 ( 0.00%)      if i + 1 < count {
        .                   ptr::copy_nonoverlapping(src.add(i), dst.add(i), 2);
   17,272 ( 0.00%)          i += 2
        .               }
        .           
   53,606 ( 0.00%)      if i < count {
   47,025 ( 0.00%)          *dst.add(i) = *src.add(i);
        .                   i += 1;
        .               }
        .           
        .               debug_assert_eq!(i, count);
        .           }
        .           
        .           // # Implementation
        .           //
-- line 124 ----------------------------------------
-- line 201 ----------------------------------------
        .           
        .                   hasher
        .               }
        .           
        .               // A specialized write function for values with size <= 8.
        .               #[inline]
        .               fn short_write<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
1,050,128 ( 0.02%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
6,784,910 ( 0.11%)          if nbuf + size < BUFFER_SIZE {
        .                       unsafe {
        .                           // The memcpy call is optimized away because the size is known.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                           ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .                       }
        .           
2,224,026 ( 0.04%)              self.nbuf = nbuf + size;
        .           
        .                       return;
        .                   }
        .           
  282,372 ( 0.00%)          unsafe { self.short_write_process_buffer(x) }
        .               }
        .           
        .               // A specialized write function for values with size <= 8 that should only
        .               // be called when the write would cause the buffer to fill.
        .               //
        .               // SAFETY: the write of `x` into `self.buf` starting at byte offset
        .               // `self.nbuf` must cause `self.buf` to become fully initialized (and not
        .               // overflow) if it wasn't already.
        .               #[inline(never)]
   94,808 ( 0.00%)      unsafe fn short_write_process_buffer<T>(&mut self, x: T) {
        .                   let size = mem::size_of::<T>();
   94,808 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(size <= 8);
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + size >= BUFFER_SIZE);
        .                   debug_assert!(nbuf + size < BUFFER_WITH_SPILL_SIZE);
        .           
        .                   // Copy first part of input into end of buffer, possibly into spill
        .                   // element. The memcpy call is optimized away because the size is known.
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   ptr::copy_nonoverlapping(&x as *const _ as *const u8, dst, size);
        .           
        .                   // Process buffer.
        .                   for i in 0..BUFFER_CAPACITY {
  948,080 ( 0.02%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
  758,464 ( 0.01%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
  853,272 ( 0.01%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer by copying size - 1
        .                   // elements from spill (at most size - 1 bytes could have overflowed
        .                   // into the spill). The memcpy call is optimized away because the size
        .                   // is known. And the whole copy is optimized away for size == 1.
        .                   let src = self.buf.get_unchecked(BUFFER_SPILL_INDEX) as *const _ as *const u8;
        .                   ptr::copy_nonoverlapping(src, self.buf.as_mut_ptr() as *mut u8, size - 1);
        .           
        .                   // This function should only be called when the write fills the buffer.
        .                   // Therefore, when size == 1, the new `self.nbuf` must be zero. The size
        .                   // is statically known, so the branch is optimized away.
  448,600 ( 0.01%)          self.nbuf = if size == 1 { 0 } else { nbuf + size - BUFFER_SIZE };
  379,232 ( 0.01%)          self.processed += BUFFER_SIZE;
  189,616 ( 0.00%)      }
        .           
        .               // A write function for byte slices.
        .               #[inline]
        .               fn slice_write(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
   10,774 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .           
  163,103 ( 0.00%)          if nbuf + length < BUFFER_SIZE {
        .                       unsafe {
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .           
   55,628 ( 0.00%)                  if length <= 8 {
        .                               copy_nonoverlapping_small(msg.as_ptr(), dst, length);
        .                           } else {
        .                               // This memcpy is *not* optimized away.
        .                               ptr::copy_nonoverlapping(msg.as_ptr(), dst, length);
        .                           }
        .                       }
        .           
   28,104 ( 0.00%)              self.nbuf = nbuf + length;
        .           
        .                       return;
        .                   }
        .           
   39,637 ( 0.00%)          unsafe { self.slice_write_process_buffer(msg) }
        .               }
        .           
        .               // A write function for byte slices that should only be called when the
        .               // write would cause the buffer to fill.
        .               //
        .               // SAFETY: `self.buf` must be initialized up to the byte offset `self.nbuf`,
        .               // and `msg` must contain enough bytes to initialize the rest of the element
        .               // containing the byte offset `self.nbuf`.
        .               #[inline(never)]
   23,225 ( 0.00%)      unsafe fn slice_write_process_buffer(&mut self, msg: &[u8]) {
        .                   let length = msg.len();
    4,645 ( 0.00%)          let nbuf = self.nbuf;
        .                   debug_assert!(nbuf < BUFFER_SIZE);
        .                   debug_assert!(nbuf + length >= BUFFER_SIZE);
        .           
        .                   // Always copy first part of input into current element of buffer.
        .                   // This function should only be called when the write fills the buffer,
        .                   // so we know that there is enough input to fill the current element.
   13,935 ( 0.00%)          let valid_in_elem = nbuf % ELEM_SIZE;
    4,645 ( 0.00%)          let needed_in_elem = ELEM_SIZE - valid_in_elem;
        .           
        .                   let src = msg.as_ptr();
        .                   let dst = (self.buf.as_mut_ptr() as *mut u8).add(nbuf);
        .                   copy_nonoverlapping_small(src, dst, needed_in_elem);
        .           
        .                   // Process buffer.
        .           
        .                   // Using `nbuf / ELEM_SIZE + 1` rather than `(nbuf + needed_in_elem) /
        .                   // ELEM_SIZE` to show the compiler that this loop's upper bound is > 0.
        .                   // We know that is true, because last step ensured we have a full
        .                   // element in the buffer.
    9,290 ( 0.00%)          let last = nbuf / ELEM_SIZE + 1;
        .           
        .                   for i in 0..last {
   35,665 ( 0.00%)              let elem = self.buf.get_unchecked(i).assume_init().to_le();
   40,310 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
   71,330 ( 0.00%)              self.state.v0 ^= elem;
        .                   }
        .           
        .                   // Process the remaining element-sized chunks of input.
        .                   let mut processed = needed_in_elem;
    9,290 ( 0.00%)          let input_left = length - processed;
    8,364 ( 0.00%)          let elems_left = input_left / ELEM_SIZE;
        .                   let extra_bytes_left = input_left % ELEM_SIZE;
        .           
        .                   for _ in 0..elems_left {
    2,991 ( 0.00%)              let elem = (msg.as_ptr().add(processed) as *const u64).read_unaligned().to_le();
    2,991 ( 0.00%)              self.state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut self.state);
    2,991 ( 0.00%)              self.state.v0 ^= elem;
    5,982 ( 0.00%)              processed += ELEM_SIZE;
        .                   }
        .           
        .                   // Copy remaining input into start of buffer.
        .                   let src = msg.as_ptr().add(processed);
        .                   let dst = self.buf.as_mut_ptr() as *mut u8;
        .                   copy_nonoverlapping_small(src, dst, extra_bytes_left);
        .           
    4,645 ( 0.00%)          self.nbuf = extra_bytes_left;
   23,225 ( 0.00%)          self.processed += nbuf + processed;
   27,870 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn finish128(mut self) -> (u64, u64) {
        .                   debug_assert!(self.nbuf < BUFFER_SIZE);
        .           
        .                   // Process full elements in buffer.
   47,127 ( 0.00%)          let last = self.nbuf / ELEM_SIZE;
        .           
        .                   // Since we're consuming self, avoid updating members for a potential
        .                   // performance gain.
   62,836 ( 0.00%)          let mut state = self.state;
        .           
        .                   for i in 0..last {
   26,838 ( 0.00%)              let elem = unsafe { self.buf.get_unchecked(i).assume_init().to_le() };
   26,838 ( 0.00%)              state.v3 ^= elem;
        .                       Sip24Rounds::c_rounds(&mut state);
   26,838 ( 0.00%)              state.v0 ^= elem;
        .                   }
        .           
        .                   // Get remaining partial element.
   31,418 ( 0.00%)          let elem = if self.nbuf % ELEM_SIZE != 0 {
        .                       unsafe {
        .                           // Ensure element is initialized by writing zero bytes. At most
        .                           // `ELEM_SIZE - 1` are required given the above check. It's safe
        .                           // to write this many because we have the spill and we maintain
        .                           // `self.nbuf` such that this write will start before the spill.
        .                           let dst = (self.buf.as_mut_ptr() as *mut u8).add(self.nbuf);
        .                           ptr::write_bytes(dst, 0, ELEM_SIZE - 1);
   14,310 ( 0.00%)                  self.buf.get_unchecked(last).assume_init().to_le()
        .                       }
        .                   } else {
        .                       0
        .                   };
        .           
        .                   // Finalize the hash.
   44,839 ( 0.00%)          let length = self.processed + self.nbuf;
   29,638 ( 0.00%)          let b: u64 = ((length as u64 & 0xff) << 56) | elem;
        .           
   14,819 ( 0.00%)          state.v3 ^= b;
        .                   Sip24Rounds::c_rounds(&mut state);
   14,819 ( 0.00%)          state.v0 ^= b;
        .           
   14,819 ( 0.00%)          state.v2 ^= 0xee;
        .                   Sip24Rounds::d_rounds(&mut state);
   57,190 ( 0.00%)          let _0 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
   27,550 ( 0.00%)          state.v1 ^= 0xdd;
        .                   Sip24Rounds::d_rounds(&mut state);
   27,550 ( 0.00%)          let _1 = state.v0 ^ state.v1 ^ state.v2 ^ state.v3;
        .           
        .                   (_0, _1)
        .               }
        .           }
        .           
        .           impl Hasher for SipHasher128 {
        .               #[inline]
        .               fn write_u8(&mut self, i: u8) {
-- line 414 ----------------------------------------
-- line 471 ----------------------------------------
        .           }
        .           
        .           #[derive(Debug, Clone, Default)]
        .           struct Sip24Rounds;
        .           
        .           impl Sip24Rounds {
        .               #[inline]
        .               fn c_rounds(state: &mut State) {
3,463,851 ( 0.06%)          compress!(state);
3,746,527 ( 0.06%)          compress!(state);
        .               }
        .           
        .               #[inline]
        .               fn d_rounds(state: &mut State) {
  114,376 ( 0.00%)          compress!(state);
  114,376 ( 0.00%)          compress!(state);
  114,376 ( 0.00%)          compress!(state);
   99,558 ( 0.00%)          compress!(state);
        .               }
        .           }

  775,283 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_data_structures/src/sip128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           mod late;
        .           mod macros;
        .           
        .           enum Weak {
        .               Yes,
        .               No,
        .           }
        .           
   30,978 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Debug)]
        .           pub enum Determinacy {
        .               Determined,
        .               Undetermined,
        .           }
        .           
        .           impl Determinacy {
        .               fn determined(determined: bool) -> Determinacy {
        .                   if determined { Determinacy::Determined } else { Determinacy::Undetermined }
   20,652 ( 0.00%)      }
        .           }
        .           
        .           /// A specific scope in which a name can be looked up.
        .           /// This enum is currently used only for early resolution (imports and macros),
        .           /// but not for late resolution yet.
        .           #[derive(Clone, Copy)]
        .           enum Scope<'a> {
        .               DeriveHelpers(LocalExpnId),
-- line 116 ----------------------------------------
-- line 157 ----------------------------------------
        .               macro_rules: MacroRulesScopeRef<'a>,
        .               derives: &'a [ast::Path],
        .           }
        .           
        .           impl<'a> ParentScope<'a> {
        .               /// Creates a parent scope with the passed argument used as the module scope component,
        .               /// and other scope components set to default empty values.
        .               pub fn module(module: Module<'a>, resolver: &Resolver<'a>) -> ParentScope<'a> {
        8 ( 0.00%)          ParentScope {
        .                       module,
        .                       expansion: LocalExpnId::ROOT,
    1,138 ( 0.00%)              macro_rules: resolver.arenas.alloc_macro_rules_scope(MacroRulesScope::Empty),
        .                       derives: &[],
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone)]
        .           enum ImplTraitContext {
        .               Existential,
-- line 176 ----------------------------------------
-- line 303 ----------------------------------------
        .           
        .               fn names_to_string(segments: &[Segment]) -> String {
        .                   names_to_string(&segments.iter().map(|seg| seg.ident.name).collect::<Vec<_>>())
        .               }
        .           }
        .           
        .           impl<'a> From<&'a ast::PathSegment> for Segment {
        .               fn from(seg: &'a ast::PathSegment) -> Segment {
       50 ( 0.00%)          Segment { ident: seg.ident, id: Some(seg.id), has_generic_args: seg.args.is_some() }
        .               }
        .           }
        .           
        .           struct UsePlacementFinder {
        .               target_module: NodeId,
        .               span: Option<Span>,
        .               found_use: bool,
        .           }
-- line 319 ----------------------------------------
-- line 391 ----------------------------------------
        .           #[derive(Debug)]
        .           enum LexicalScopeBinding<'a> {
        .               Item(&'a NameBinding<'a>),
        .               Res(Res),
        .           }
        .           
        .           impl<'a> LexicalScopeBinding<'a> {
        .               fn res(self) -> Res {
      256 ( 0.00%)          match self {
        .                       LexicalScopeBinding::Item(binding) => binding.res(),
      384 ( 0.00%)              LexicalScopeBinding::Res(res) => res,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Debug)]
        .           enum ModuleOrUniformRoot<'a> {
        .               /// Regular module.
        .               Module(Module<'a>),
-- line 409 ----------------------------------------
-- line 418 ----------------------------------------
        .               /// Virtual module that denotes resolution in current scope.
        .               /// Used only for resolving single-segment imports. The reason it exists is that import paths
        .               /// are always split into two parts, the first of which should be some kind of module.
        .               CurrentScope,
        .           }
        .           
        .           impl ModuleOrUniformRoot<'_> {
        .               fn same_def(lhs: Self, rhs: Self) -> bool {
       40 ( 0.00%)          match (lhs, rhs) {
        .                       (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) => {
        .                           ptr::eq(lhs, rhs)
        .                       }
        .                       (
        .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
        .                           ModuleOrUniformRoot::CrateRootAndExternPrelude,
        .                       )
        .                       | (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude)
-- line 434 ----------------------------------------
-- line 491 ----------------------------------------
        .           /// A key that identifies a binding in a given `Module`.
        .           ///
        .           /// Multiple bindings in the same module can have the same key (in a valid
        .           /// program) if all but one of them come from glob imports.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]
        .           struct BindingKey {
        .               /// The identifier for the binding, aways the `normalize_to_macros_2_0` version of the
        .               /// identifier.
  393,696 ( 0.01%)      ident: Ident,
  130,892 ( 0.00%)      ns: Namespace,
        .               /// 0 if ident is not `_`, otherwise a value that's unique to the specific
        .               /// `_` in the expanded AST that introduced this binding.
   97,914 ( 0.00%)      disambiguator: u32,
        .           }
        .           
        .           type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;
        .           
        .           /// One node in the tree of modules.
        .           ///
        .           /// Note that a "module" in resolve is broader than a `mod` that you declare in Rust code. It may be one of these:
        .           ///
-- line 511 ----------------------------------------
-- line 551 ----------------------------------------
        .           impl<'a> ModuleData<'a> {
        .               fn new(
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expansion: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .               ) -> Self {
    2,569 ( 0.00%)          let is_foreign = match kind {
        .                       ModuleKind::Def(_, def_id, _) => !def_id.is_local(),
        .                       ModuleKind::Block(_) => false,
        .                   };
    8,441 ( 0.00%)          ModuleData {
        .                       parent,
        .                       kind,
        .                       lazy_resolutions: Default::default(),
        .                       populate_on_access: Cell::new(is_foreign),
        .                       unexpanded_invocations: Default::default(),
        .                       no_implicit_prelude,
        .                       glob_importers: RefCell::new(Vec::new()),
        .                       globs: RefCell::new(Vec::new()),
        .                       traits: RefCell::new(None),
        .                       span,
        .                       expansion,
        .                   }
        .               }
        .           
       91 ( 0.00%)      fn for_each_child<R, F>(&'a self, resolver: &mut R, mut f: F)
        .               where
        .                   R: AsMut<Resolver<'a>>,
        .                   F: FnMut(&mut R, Ident, Namespace, &'a NameBinding<'a>),
        .               {
       40 ( 0.00%)          for (key, name_resolution) in resolver.as_mut().resolutions(self).borrow().iter() {
    2,908 ( 0.00%)              if let Some(binding) = name_resolution.borrow().binding {
      363 ( 0.00%)                  f(resolver, key.ident, key.ns, binding);
        .                       }
        .                   }
       72 ( 0.00%)      }
        .           
        .               /// This modifies `self` in place. The traits will be stored in `self.traits`.
        .               fn ensure_traits<R>(&'a self, resolver: &mut R)
        .               where
        .                   R: AsMut<Resolver<'a>>,
        .               {
        .                   let mut traits = self.traits.borrow_mut();
   20,564 ( 0.00%)          if traits.is_none() {
        .                       let mut collected_traits = Vec::new();
        .                       self.for_each_child(resolver, |_, name, ns, binding| {
      149 ( 0.00%)                  if ns != TypeNS {
        .                               return;
        .                           }
      264 ( 0.00%)                  if let Res::Def(DefKind::Trait | DefKind::TraitAlias, _) = binding.res() {
        .                               collected_traits.push((name, binding))
        .                           }
        .                       });
       30 ( 0.00%)              *traits = Some(collected_traits.into_boxed_slice());
        .                   }
        .               }
        .           
        .               fn res(&self) -> Option<Res> {
    3,250 ( 0.00%)          match self.kind {
    5,137 ( 0.00%)              ModuleKind::Def(kind, def_id, _) => Some(Res::Def(kind, def_id)),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               // Public for rustdoc.
        .               pub fn def_id(&self) -> DefId {
        .                   self.opt_def_id().expect("`ModuleData::def_id` is called on a block module")
        .               }
        .           
        .               fn opt_def_id(&self) -> Option<DefId> {
    1,460 ( 0.00%)          match self.kind {
        .                       ModuleKind::Def(_, def_id, _) => Some(def_id),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               // `self` resolves to the first module ancestor that `is_normal`.
        .               fn is_normal(&self) -> bool {
   50,555 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Mod, _, _))
        .               }
        .           
        .               fn is_trait(&self) -> bool {
        2 ( 0.00%)          matches!(self.kind, ModuleKind::Def(DefKind::Trait, _, _))
        .               }
        .           
        .               fn nearest_item_scope(&'a self) -> Module<'a> {
   84,215 ( 0.00%)          match self.kind {
        .                       ModuleKind::Def(DefKind::Enum | DefKind::Trait, ..) => {
        .                           self.parent.expect("enum or trait module without a parent")
        .                       }
        .                       _ => self,
        .                   }
        .               }
        .           
        .               /// The [`DefId`] of the nearest `mod` item ancestor (which may be this module).
        .               /// This may be the crate root.
   11,618 ( 0.00%)      fn nearest_parent_mod(&self) -> DefId {
   46,180 ( 0.00%)          match self.kind {
   22,944 ( 0.00%)              ModuleKind::Def(DefKind::Mod, def_id, _) => def_id,
      292 ( 0.00%)              _ => self.parent.expect("non-root module without parent").nearest_parent_mod(),
        .                   }
   23,236 ( 0.00%)      }
        .           
        .               fn is_ancestor_of(&self, mut other: &Self) -> bool {
        .                   while !ptr::eq(self, other) {
        .                       if let Some(parent) = other.parent {
        .                           other = parent;
        .                       } else {
        .                           return false;
        .                       }
-- line 662 ----------------------------------------
-- line 773 ----------------------------------------
        .               b1: &'a NameBinding<'a>,
        .               b2: &'a NameBinding<'a>,
        .               misc1: AmbiguityErrorMisc,
        .               misc2: AmbiguityErrorMisc,
        .           }
        .           
        .           impl<'a> NameBinding<'a> {
        .               fn module(&self) -> Option<Module<'a>> {
1,498,875 ( 0.02%)          match self.kind {
  278,264 ( 0.00%)              NameBindingKind::Module(module) => Some(module),
   10,974 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.module(),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn res(&self) -> Res {
  119,878 ( 0.00%)          match self.kind {
   70,407 ( 0.00%)              NameBindingKind::Res(res, _) => res,
    1,480 ( 0.00%)              NameBindingKind::Module(module) => module.res().unwrap(),
      221 ( 0.00%)              NameBindingKind::Import { binding, .. } => binding.res(),
        .                   }
        .               }
        .           
        .               fn is_ambiguity(&self) -> bool {
       55 ( 0.00%)          self.ambiguity.is_some()
       58 ( 0.00%)              || match self.kind {
       26 ( 0.00%)                  NameBindingKind::Import { binding, .. } => binding.is_ambiguity(),
        .                           _ => false,
        .                       }
        .               }
        .           
        .               fn is_possibly_imported_variant(&self) -> bool {
        .                   match self.kind {
        .                       NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),
        .                       NameBindingKind::Res(
-- line 807 ----------------------------------------
-- line 822 ----------------------------------------
        .                           kind: ModuleKind::Def(DefKind::Mod, def_id, _),
        .                           ..
        .                       }) => def_id.index == CRATE_DEF_INDEX,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn is_import(&self) -> bool {
      242 ( 0.00%)          matches!(self.kind, NameBindingKind::Import { .. })
        .               }
        .           
        .               fn is_glob_import(&self) -> bool {
    4,400 ( 0.00%)          match self.kind {
       31 ( 0.00%)              NameBindingKind::Import { import, .. } => import.is_glob(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn is_importable(&self) -> bool {
       20 ( 0.00%)          !matches!(
        .                       self.res(),
        .                       Res::Def(DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy, _)
        .                   )
        .               }
        .           
        .               fn is_macro_def(&self) -> bool {
       96 ( 0.00%)          matches!(self.kind, NameBindingKind::Res(Res::Def(DefKind::Macro(..), _), _))
        .               }
        .           
        .               fn macro_kind(&self) -> Option<MacroKind> {
        .                   self.res().macro_kind()
        .               }
        .           
        .               // Suppose that we resolved macro invocation with `invoc_parent_expansion` to binding `binding`
        .               // at some expansion round `max(invoc, binding)` when they both emerged from macros.
-- line 856 ----------------------------------------
-- line 1065 ----------------------------------------
        .               /// they are declared in the static array generated by proc_macro_harness.
        .               proc_macros: Vec<NodeId>,
        .               confused_type_with_std_module: FxHashMap<Span, Span>,
        .           
        .               access_levels: AccessLevels,
        .           }
        .           
        .           /// Nothing really interesting here; it just provides memory for the rest of the crate.
        7 ( 0.00%)  #[derive(Default)]
        .           pub struct ResolverArenas<'a> {
        .               modules: TypedArena<ModuleData<'a>>,
        .               local_modules: RefCell<Vec<Module<'a>>>,
        .               imports: TypedArena<Import<'a>>,
        .               name_resolutions: TypedArena<RefCell<NameResolution<'a>>>,
        .               ast_paths: TypedArena<ast::Path>,
        .               dropless: DroplessArena,
        .           }
        .           
        .           impl<'a> ResolverArenas<'a> {
    4,771 ( 0.00%)      fn new_module(
        .                   &'a self,
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .                   module_map: &mut FxHashMap<DefId, Module<'a>>,
        .               ) -> Module<'a> {
        .                   let module =
        .                       self.modules.alloc(ModuleData::new(parent, kind, expn_id, span, no_implicit_prelude));
        .                   let def_id = module.opt_def_id();
    1,101 ( 0.00%)          if def_id.map_or(true, |def_id| def_id.is_local()) {
        .                       self.local_modules.borrow_mut().push(module);
        .                   }
      367 ( 0.00%)          if let Some(def_id) = def_id {
        .                       module_map.insert(def_id, module);
        .                   }
        .                   module
    3,303 ( 0.00%)      }
        .               fn local_modules(&'a self) -> std::cell::Ref<'a, Vec<Module<'a>>> {
        .                   self.local_modules.borrow()
        .               }
        .               fn alloc_name_binding(&'a self, name_binding: NameBinding<'a>) -> &'a NameBinding<'a> {
        .                   self.dropless.alloc(name_binding)
        .               }
       14 ( 0.00%)      fn alloc_import(&'a self, import: Import<'a>) -> &'a Import<'_> {
      268 ( 0.00%)          self.imports.alloc(import)
       14 ( 0.00%)      }
        .               fn alloc_name_resolution(&'a self) -> &'a RefCell<NameResolution<'a>> {
    1,888 ( 0.00%)          self.name_resolutions.alloc(Default::default())
        .               }
        .               fn alloc_macro_rules_scope(&'a self, scope: MacroRulesScope<'a>) -> MacroRulesScopeRef<'a> {
        .                   PtrKey(self.dropless.alloc(Cell::new(scope)))
        .               }
        .               fn alloc_macro_rules_binding(
        .                   &'a self,
        .                   binding: MacroRulesBinding<'a>,
        .               ) -> &'a MacroRulesBinding<'a> {
-- line 1122 ----------------------------------------
-- line 1133 ----------------------------------------
        .           impl<'a> AsMut<Resolver<'a>> for Resolver<'a> {
        .               fn as_mut(&mut self) -> &mut Resolver<'a> {
        .                   self
        .               }
        .           }
        .           
        .           impl<'a, 'b> DefIdTree for &'a Resolver<'b> {
        .               fn parent(self, id: DefId) -> Option<DefId> {
      248 ( 0.00%)          match id.as_local() {
        .                       Some(id) => self.definitions.def_key(id).parent,
        .                       None => self.cstore().def_key(id).parent,
        .                   }
        .                   .map(|index| DefId { index, ..id })
        .               }
        .           }
        .           
        .           /// This interface is used through the AST→HIR step, to embed full paths into the HIR. After that
        .           /// the resolver is no longer needed as all the relevant information is inline.
        .           impl ResolverAstLowering for Resolver<'_> {
       90 ( 0.00%)      fn def_key(&mut self, id: DefId) -> DefKey {
       54 ( 0.00%)          if let Some(id) = id.as_local() {
        .                       self.definitions().def_key(id)
        .                   } else {
    3,700 ( 0.00%)              self.cstore().def_key(id)
        .                   }
       72 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn def_span(&self, id: LocalDefId) -> Span {
        .                   self.definitions.def_span(id)
        .               }
        .           
   61,446 ( 0.00%)      fn item_generics_num_lifetimes(&self, def_id: DefId) -> usize {
   30,381 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
   10,070 ( 0.00%)              self.item_generics_num_lifetimes[&def_id]
        .                   } else {
    1,368 ( 0.00%)              self.cstore().item_generics_num_lifetimes(def_id, self.session)
        .                   }
   40,280 ( 0.00%)      }
        .           
   20,206 ( 0.00%)      fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   10,103 ( 0.00%)          self.legacy_const_generic_args(expr)
   30,309 ( 0.00%)      }
        .           
   33,955 ( 0.00%)      fn get_partial_res(&self, id: NodeId) -> Option<PartialRes> {
        .                   self.partial_res_map.get(&id).cloned()
  101,865 ( 0.00%)      }
        .           
       64 ( 0.00%)      fn get_import_res(&mut self, id: NodeId) -> PerNS<Option<Res>> {
       16 ( 0.00%)          self.import_res_map.get(&id).cloned().unwrap_or_default()
       80 ( 0.00%)      }
        .           
        .               fn get_label_res(&mut self, id: NodeId) -> Option<NodeId> {
        .                   self.label_res_map.get(&id).cloned()
        .               }
        .           
        .               fn definitions(&mut self) -> &mut Definitions {
      216 ( 0.00%)          &mut self.definitions
      216 ( 0.00%)      }
        .           
    2,084 ( 0.00%)      fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {
    3,377 ( 0.00%)          StableHashingContext::new(self.session, &self.definitions, self.crate_loader.cstore())
    2,605 ( 0.00%)      }
        .           
        .               fn lint_buffer(&mut self) -> &mut LintBuffer {
        .                   &mut self.lint_buffer
        .               }
        .           
        .               fn next_node_id(&mut self) -> NodeId {
        .                   self.next_node_id()
        .               }
        .           
  396,224 ( 0.01%)      fn take_trait_map(&mut self, node: NodeId) -> Option<Vec<TraitCandidate>> {
        .                   self.trait_map.remove(&node)
  396,224 ( 0.01%)      }
        .           
  397,086 ( 0.01%)      fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {
    2,269 ( 0.00%)          self.node_id_to_def_id.get(&node).copied()
  397,086 ( 0.01%)      }
        .           
    1,096 ( 0.00%)      fn local_def_id(&self, node: NodeId) -> LocalDefId {
        .                   self.opt_local_def_id(node).unwrap_or_else(|| panic!("no entry for node id: `{:?}`", node))
    1,096 ( 0.00%)      }
        .           
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash {
        .                   match def_id.as_local() {
        .                       Some(def_id) => self.definitions.def_path_hash(def_id),
        .                       None => self.cstore().def_path_hash(def_id),
        .                   }
        .               }
        .           
        .               /// Adds a definition with a parent definition.
    5,595 ( 0.00%)      fn create_def(
        .                   &mut self,
        .                   parent: LocalDefId,
        .                   node_id: ast::NodeId,
        .                   data: DefPathData,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .               ) -> LocalDefId {
      746 ( 0.00%)          assert!(
      746 ( 0.00%)              !self.node_id_to_def_id.contains_key(&node_id),
        .                       "adding a def'n for node-id {:?} and data {:?} but a previous def'n exists: {:?}",
        .                       node_id,
        .                       data,
        .                       self.definitions.def_key(self.node_id_to_def_id[&node_id]),
        .                   );
        .           
        .                   // Find the next free disambiguator for this key.
      373 ( 0.00%)          let next_disambiguator = &mut self.next_disambiguator;
        .                   let next_disambiguator = |parent, data| {
    1,865 ( 0.00%)              let next_disamb = next_disambiguator.entry((parent, data)).or_insert(0);
      373 ( 0.00%)              let disambiguator = *next_disamb;
      373 ( 0.00%)              *next_disamb = next_disamb.checked_add(1).expect("disambiguator overflow");
        .                       disambiguator
        .                   };
        .           
    3,730 ( 0.00%)          let def_id = self.definitions.create_def(parent, data, expn_id, next_disambiguator, span);
        .           
        .                   // Some things for which we allocate `LocalDefId`s don't correspond to
        .                   // anything in the AST, so they don't have a `NodeId`. For these cases
        .                   // we don't need a mapping from `NodeId` to `LocalDefId`.
    1,119 ( 0.00%)          if node_id != ast::DUMMY_NODE_ID {
        .                       debug!("create_def: def_id_to_node_id[{:?}] <-> {:?}", def_id, node_id);
        .                       self.node_id_to_def_id.insert(node_id, def_id);
        .                   }
    1,119 ( 0.00%)          assert_eq!(self.def_id_to_node_id.push(node_id), def_id);
        .           
        .                   def_id
    3,357 ( 0.00%)      }
        .           }
        .           
        .           impl<'a> Resolver<'a> {
       16 ( 0.00%)      pub fn new(
        .                   session: &'a Session,
        .                   krate: &Crate,
        .                   crate_name: &str,
        .                   metadata_loader: Box<MetadataLoaderDyn>,
        .                   arenas: &'a ResolverArenas<'a>,
        .               ) -> Resolver<'a> {
        .                   let root_def_id = CRATE_DEF_ID.to_def_id();
        .                   let mut module_map = FxHashMap::default();
       14 ( 0.00%)          let graph_root = arenas.new_module(
        .                       None,
        .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
        1 ( 0.00%)              ExpnId::root(),
        1 ( 0.00%)              krate.span,
        2 ( 0.00%)              session.contains_name(&krate.attrs, sym::no_implicit_prelude),
        .                       &mut module_map,
        .                   );
       12 ( 0.00%)          let empty_module = arenas.new_module(
        .                       None,
        .                       ModuleKind::Def(DefKind::Mod, root_def_id, kw::Empty),
        1 ( 0.00%)              ExpnId::root(),
        .                       DUMMY_SP,
        .                       true,
        .                       &mut FxHashMap::default(),
        .                   );
        .           
        4 ( 0.00%)          let definitions = Definitions::new(session.local_stable_crate_id(), krate.span);
        2 ( 0.00%)          let root = definitions.get_root_def();
        .           
        .                   let mut visibilities = FxHashMap::default();
        .                   visibilities.insert(CRATE_DEF_ID, ty::Visibility::Public);
        .           
        .                   let mut def_id_to_node_id = IndexVec::default();
        2 ( 0.00%)          assert_eq!(def_id_to_node_id.push(CRATE_NODE_ID), root);
        .                   let mut node_id_to_def_id = FxHashMap::default();
        .                   node_id_to_def_id.insert(CRATE_NODE_ID, root);
        .           
        .                   let mut invocation_parents = FxHashMap::default();
        .                   invocation_parents.insert(LocalExpnId::ROOT, (root, ImplTraitContext::Existential));
        .           
        3 ( 0.00%)          let mut extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'_>> = session
        .                       .opts
        .                       .externs
        .                       .iter()
        .                       .filter(|(_, entry)| entry.add_prelude)
        .                       .map(|(name, _)| (Ident::from_str(name), Default::default()))
        .                       .collect();
        .           
        9 ( 0.00%)          if !session.contains_name(&krate.attrs, sym::no_core) {
        .                       extern_prelude.insert(Ident::with_dummy_span(sym::core), Default::default());
        7 ( 0.00%)              if !session.contains_name(&krate.attrs, sym::no_std) {
        .                           extern_prelude.insert(Ident::with_dummy_span(sym::std), Default::default());
        .                       }
        .                   }
        .           
        8 ( 0.00%)          let (registered_attrs, registered_tools) =
        4 ( 0.00%)              macros::registered_attrs_and_tools(session, &krate.attrs);
        .           
        .                   let features = session.features_untracked();
        .           
      237 ( 0.00%)          let mut resolver = Resolver {
        .                       session,
        .           
        2 ( 0.00%)              definitions,
        .           
        .                       // The outermost module has def ID 0; this is not reflected in the
        .                       // AST.
        .                       graph_root,
        .                       prelude: None,
        4 ( 0.00%)              extern_prelude,
        .           
        .                       has_self: FxHashSet::default(),
        .                       field_names: FxHashMap::default(),
        .           
        .                       determined_imports: Vec::new(),
        .                       indeterminate_imports: Vec::new(),
        .           
        .                       last_import_segment: false,
-- line 1343 ----------------------------------------
-- line 1347 ----------------------------------------
        .                       partial_res_map: Default::default(),
        .                       import_res_map: Default::default(),
        .                       label_res_map: Default::default(),
        .                       extern_crate_map: Default::default(),
        .                       reexport_map: FxHashMap::default(),
        .                       trait_map: NodeMap::default(),
        .                       underscore_disambiguator: 0,
        .                       empty_module,
        4 ( 0.00%)              module_map,
        .                       block_map: Default::default(),
        .                       binding_parent_modules: FxHashMap::default(),
        .                       ast_transform_scopes: FxHashMap::default(),
        .           
        .                       glob_map: Default::default(),
        4 ( 0.00%)              visibilities,
        .                       used_imports: FxHashSet::default(),
        .                       maybe_unused_trait_imports: Default::default(),
        .                       maybe_unused_extern_crates: Vec::new(),
        .           
        .                       privacy_errors: Vec::new(),
        .                       ambiguity_errors: Vec::new(),
        .                       use_injections: Vec::new(),
        .                       macro_expanded_macro_export_errors: BTreeSet::new(),
-- line 1369 ----------------------------------------
-- line 1372 ----------------------------------------
        .                       dummy_binding: arenas.alloc_name_binding(NameBinding {
        .                           kind: NameBindingKind::Res(Res::Err, false),
        .                           ambiguity: None,
        .                           expansion: LocalExpnId::ROOT,
        .                           span: DUMMY_SP,
        .                           vis: ty::Visibility::Public,
        .                       }),
        .           
        6 ( 0.00%)              crate_loader: CrateLoader::new(session, metadata_loader, crate_name),
        .                       macro_names: FxHashSet::default(),
        .                       builtin_macros: Default::default(),
        4 ( 0.00%)              registered_attrs,
        4 ( 0.00%)              registered_tools,
        .                       macro_use_prelude: FxHashMap::default(),
        .                       all_macros: FxHashMap::default(),
        .                       macro_map: FxHashMap::default(),
        7 ( 0.00%)              dummy_ext_bang: Lrc::new(SyntaxExtension::dummy_bang(session.edition())),
        6 ( 0.00%)              dummy_ext_derive: Lrc::new(SyntaxExtension::dummy_derive(session.edition())),
        5 ( 0.00%)              non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),
        .                       invocation_parent_scopes: Default::default(),
        .                       output_macro_rules_scopes: Default::default(),
        .                       helper_attrs: Default::default(),
        .                       derive_data: Default::default(),
        .                       local_macro_def_scopes: FxHashMap::default(),
        .                       name_already_seen: FxHashMap::default(),
        .                       potentially_unused_imports: Vec::new(),
        .                       struct_constructors: Default::default(),
-- line 1398 ----------------------------------------
-- line 1405 ----------------------------------------
        .                       active_features: features
        .                           .declared_lib_features
        .                           .iter()
        .                           .map(|(feat, ..)| *feat)
        .                           .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))
        .                           .collect(),
        .                       lint_buffer: LintBuffer::default(),
        .                       next_node_id: CRATE_NODE_ID,
        4 ( 0.00%)              node_id_to_def_id,
        4 ( 0.00%)              def_id_to_node_id,
        .                       placeholder_field_indices: Default::default(),
        4 ( 0.00%)              invocation_parents,
        .                       next_disambiguator: Default::default(),
        .                       trait_impl_items: Default::default(),
        .                       legacy_const_generic_args: Default::default(),
        .                       item_generics_num_lifetimes: Default::default(),
        .                       main_def: Default::default(),
        .                       trait_impls: Default::default(),
        .                       proc_macros: Default::default(),
        .                       confused_type_with_std_module: Default::default(),
        .                       access_levels: Default::default(),
        .                   };
        .           
        .                   let root_parent_scope = ParentScope::module(graph_root, &resolver);
        .                   resolver.invocation_parent_scopes.insert(LocalExpnId::ROOT, root_parent_scope);
        .           
        .                   resolver
        9 ( 0.00%)      }
        .           
        .               fn new_module(
        .                   &mut self,
        .                   parent: Option<Module<'a>>,
        .                   kind: ModuleKind,
        .                   expn_id: ExpnId,
        .                   span: Span,
        .                   no_implicit_prelude: bool,
        .               ) -> Module<'a> {
        3 ( 0.00%)          let module_map = &mut self.module_map;
    3,625 ( 0.00%)          self.arenas.new_module(parent, kind, expn_id, span, no_implicit_prelude, module_map)
        .               }
        .           
        .               pub fn next_node_id(&mut self) -> NodeId {
        .                   let next =
   99,700 ( 0.00%)              self.next_node_id.as_u32().checked_add(1).expect("input too large; ran out of NodeIds");
        .                   mem::replace(&mut self.next_node_id, ast::NodeId::from_u32(next))
        .               }
        .           
        .               pub fn lint_buffer(&mut self) -> &mut LintBuffer {
        3 ( 0.00%)          &mut self.lint_buffer
        3 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn arenas() -> ResolverArenas<'a> {
        .                   Default::default()
        1 ( 0.00%)      }
        .           
        9 ( 0.00%)      pub fn into_outputs(self) -> ResolverOutputs {
        .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
        1 ( 0.00%)          let definitions = self.definitions;
        4 ( 0.00%)          let visibilities = self.visibilities;
        4 ( 0.00%)          let extern_crate_map = self.extern_crate_map;
        4 ( 0.00%)          let reexport_map = self.reexport_map;
        4 ( 0.00%)          let maybe_unused_trait_imports = self.maybe_unused_trait_imports;
        4 ( 0.00%)          let maybe_unused_extern_crates = self.maybe_unused_extern_crates;
        4 ( 0.00%)          let glob_map = self.glob_map;
        6 ( 0.00%)          let main_def = self.main_def;
        4 ( 0.00%)          let confused_type_with_std_module = self.confused_type_with_std_module;
        6 ( 0.00%)          let access_levels = self.access_levels;
       37 ( 0.00%)          ResolverOutputs {
        2 ( 0.00%)              definitions,
       11 ( 0.00%)              cstore: Box::new(self.crate_loader.into_cstore()),
        4 ( 0.00%)              visibilities,
        4 ( 0.00%)              access_levels,
        4 ( 0.00%)              extern_crate_map,
        4 ( 0.00%)              reexport_map,
        4 ( 0.00%)              glob_map,
        4 ( 0.00%)              maybe_unused_trait_imports,
        4 ( 0.00%)              maybe_unused_extern_crates,
        .                       extern_prelude: self
        .                           .extern_prelude
        .                           .iter()
        3 ( 0.00%)                  .map(|(ident, entry)| (ident.name, entry.introduced_by_item))
        .                           .collect(),
        6 ( 0.00%)              main_def,
        4 ( 0.00%)              trait_impls: self.trait_impls,
        4 ( 0.00%)              proc_macros,
        4 ( 0.00%)              confused_type_with_std_module,
        5 ( 0.00%)              registered_tools: self.registered_tools,
        .                   }
       19 ( 0.00%)      }
        .           
        .               pub fn clone_outputs(&self) -> ResolverOutputs {
        .                   let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();
        .                   ResolverOutputs {
        .                       definitions: self.definitions.clone(),
        .                       access_levels: self.access_levels.clone(),
        .                       cstore: Box::new(self.cstore().clone()),
        .                       visibilities: self.visibilities.clone(),
-- line 1501 ----------------------------------------
-- line 1513 ----------------------------------------
        .                       trait_impls: self.trait_impls.clone(),
        .                       proc_macros,
        .                       confused_type_with_std_module: self.confused_type_with_std_module.clone(),
        .                       registered_tools: self.registered_tools.clone(),
        .                   }
        .               }
        .           
        .               pub fn cstore(&self) -> &CStore {
   10,094 ( 0.00%)          self.crate_loader.cstore()
        .               }
        .           
        .               fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {
        .                   match macro_kind {
        .                       MacroKind::Bang => self.dummy_ext_bang.clone(),
        .                       MacroKind::Derive => self.dummy_ext_derive.clone(),
        .                       MacroKind::Attr => self.non_macro_attr.clone(),
        .                   }
        .               }
        .           
        .               /// Runs the function on each namespace.
       68 ( 0.00%)      fn per_ns<F: FnMut(&mut Self, Namespace)>(&mut self, mut f: F) {
      118 ( 0.00%)          f(self, TypeNS);
      112 ( 0.00%)          f(self, ValueNS);
      112 ( 0.00%)          f(self, MacroNS);
       60 ( 0.00%)      }
        .           
        .               fn is_builtin_macro(&mut self, res: Res) -> bool {
        .                   self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())
        .               }
        .           
        .               fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {
        .                   loop {
        .                       match ctxt.outer_expn_data().macro_def_id {
        .                           Some(def_id) => return def_id,
        .                           None => ctxt.remove_mark(),
        .                       };
        .                   }
        .               }
        .           
        .               /// Entry point to crate resolution.
        2 ( 0.00%)      pub fn resolve_crate(&mut self, krate: &Crate) {
        4 ( 0.00%)          self.session.time("resolve_crate", || {
        3 ( 0.00%)              self.session.time("finalize_imports", || ImportResolver { r: self }.finalize_imports());
        .                       self.session.time("resolve_access_levels", || {
        3 ( 0.00%)                  AccessLevelsVisitor::compute_access_levels(self, krate)
        .                       });
        2 ( 0.00%)              self.session.time("finalize_macro_resolutions", || self.finalize_macro_resolutions());
        3 ( 0.00%)              self.session.time("late_resolve_crate", || self.late_resolve_crate(krate));
        2 ( 0.00%)              self.session.time("resolve_main", || self.resolve_main());
        3 ( 0.00%)              self.session.time("resolve_check_unused", || self.check_unused(krate));
        3 ( 0.00%)              self.session.time("resolve_report_errors", || self.report_errors(krate));
        4 ( 0.00%)              self.session.time("resolve_postprocess", || self.crate_loader.postprocess(krate));
        .                   });
        .               }
        .           
  123,108 ( 0.00%)      pub fn traits_in_scope(
        .                   &mut self,
        .                   current_trait: Option<Module<'a>>,
        .                   parent_scope: &ParentScope<'a>,
        .                   ctxt: SyntaxContext,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .               ) -> Vec<TraitCandidate> {
        .                   let mut found_traits = Vec::new();
        .           
   20,518 ( 0.00%)          if let Some(module) = current_trait {
        .                       if self.trait_may_have_item(Some(module), assoc_item) {
        .                           let def_id = module.def_id();
       18 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids: smallvec![] });
        .                       }
        .                   }
        .           
        .                   self.visit_scopes(ScopeSet::All(TypeNS, false), parent_scope, ctxt, |this, scope, _, _| {
        .                       match scope {
        .                           Scope::Module(module, _) => {
        .                               this.traits_in_module(module, assoc_item, &mut found_traits);
        .                           }
        .                           Scope::StdLibPrelude => {
   30,777 ( 0.00%)                      if let Some(module) = this.prelude {
        .                                   this.traits_in_module(module, assoc_item, &mut found_traits);
        .                               }
        .                           }
        .                           Scope::ExternPrelude | Scope::ToolPrelude | Scope::BuiltinTypes => {}
        .                           _ => unreachable!(),
        .                       }
        .                       None::<()>
        .                   });
        .           
        .                   found_traits
   82,072 ( 0.00%)      }
        .           
        .               fn traits_in_module(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .                   found_traits: &mut Vec<TraitCandidate>,
        .               ) {
        .                   module.ensure_traits(self);
        .                   let traits = module.traits.borrow();
  575,830 ( 0.01%)          for (trait_name, trait_binding) in traits.as_ref().unwrap().iter() {
        .                       if self.trait_may_have_item(trait_binding.module(), assoc_item) {
        .                           let def_id = trait_binding.res().def_id();
      225 ( 0.00%)                  let import_ids = self.find_transitive_imports(&trait_binding.kind, *trait_name);
      675 ( 0.00%)                  found_traits.push(TraitCandidate { def_id, import_ids });
        .                       }
        .                   }
        .               }
        .           
        .               // List of traits in scope is pruned on best effort basis. We reject traits not having an
        .               // associated item with the given name and namespace (if specified). This is a conservative
        .               // optimization, proper hygienic type-based resolution of associated items is done in typeck.
        .               // We don't reject trait aliases (`trait_module == None`) because we don't have access to their
        .               // associated items.
        .               fn trait_may_have_item(
        .                   &mut self,
        .                   trait_module: Option<Module<'a>>,
        .                   assoc_item: Option<(Symbol, Namespace)>,
        .               ) -> bool {
  277,809 ( 0.00%)          match (trait_module, assoc_item) {
        .                       (Some(trait_module), Some((name, ns))) => {
  555,530 ( 0.01%)                  self.resolutions(trait_module).borrow().iter().any(|resolution| {
        .                               let (&BindingKey { ident: assoc_ident, ns: assoc_ns, .. }, _) = resolution;
2,107,924 ( 0.03%)                      assoc_ns == ns && assoc_ident.name == name
        .                           })
        .                       }
        .                       _ => true,
        .                   }
        .               }
        .           
        .               fn find_transitive_imports(
        .                   &mut self,
        .                   mut kind: &NameBindingKind<'_>,
        .                   trait_name: Ident,
        .               ) -> SmallVec<[LocalDefId; 1]> {
        .                   let mut import_ids = smallvec![];
      160 ( 0.00%)          while let NameBindingKind::Import { import, binding, .. } = kind {
        6 ( 0.00%)              let id = self.local_def_id(import.id);
        .                       self.maybe_unused_trait_imports.insert(id);
        2 ( 0.00%)              self.add_to_glob_map(&import, trait_name);
        .                       import_ids.push(id);
        2 ( 0.00%)              kind = &binding.kind;
        .                   }
        .                   import_ids
        .               }
        .           
        .               fn new_key(&mut self, ident: Ident, ns: Namespace) -> BindingKey {
  107,260 ( 0.00%)          let ident = ident.normalize_to_macros_2_0();
   34,509 ( 0.00%)          let disambiguator = if ident.name == kw::Underscore {
        .                       self.underscore_disambiguator += 1;
        .                       self.underscore_disambiguator
        .                   } else {
        .                       0
        .                   };
        .                   BindingKey { ident, ns, disambiguator }
        .               }
        .           
2,498,096 ( 0.04%)      fn resolutions(&mut self, module: Module<'a>) -> &'a Resolutions<'a> {
  312,262 ( 0.01%)          if module.populate_on_access.get() {
        .                       module.populate_on_access.set(false);
        .                       self.build_reduced_graph_external(module);
        .                   }
  312,262 ( 0.01%)          &module.lazy_resolutions
2,810,358 ( 0.05%)      }
        .           
  310,734 ( 0.01%)      fn resolution(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   key: BindingKey,
        .               ) -> &'a RefCell<NameResolution<'a>> {
  103,578 ( 0.00%)          *self
        .                       .resolutions(module)
        .                       .borrow_mut()
  207,156 ( 0.00%)              .entry(key)
   69,052 ( 0.00%)              .or_insert_with(|| self.arenas.alloc_name_resolution())
  276,208 ( 0.00%)      }
        .           
  121,638 ( 0.00%)      fn record_use(
        .                   &mut self,
        .                   ident: Ident,
        .                   used_binding: &'a NameBinding<'a>,
        .                   is_lexical_scope: bool,
        .               ) {
   33,174 ( 0.00%)          if let Some((b2, kind)) = used_binding.ambiguity {
        .                       self.ambiguity_errors.push(AmbiguityError {
        .                           kind,
        .                           ident,
        .                           b1: used_binding,
        .                           b2,
        .                           misc1: AmbiguityErrorMisc::None,
        .                           misc2: AmbiguityErrorMisc::None,
        .                       });
        .                   }
   22,266 ( 0.00%)          if let NameBindingKind::Import { import, binding, ref used } = used_binding.kind {
        .                       // Avoid marking `extern crate` items that refer to a name from extern prelude,
        .                       // but not introduce it, as used if they are accessed from lexical scope.
      150 ( 0.00%)              if is_lexical_scope {
       11 ( 0.00%)                  if let Some(entry) = self.extern_prelude.get(&ident.normalize_to_macros_2_0()) {
        5 ( 0.00%)                      if let Some(crate_item) = entry.extern_crate_item {
        2 ( 0.00%)                          if ptr::eq(used_binding, crate_item) && !entry.introduced_by_item {
        .                                       return;
        .                                   }
        .                               }
        .                           }
        .                       }
        .                       used.set(true);
        .                       import.used.set(true);
       75 ( 0.00%)              self.used_imports.insert(import.id);
      375 ( 0.00%)              self.add_to_glob_map(&import, ident);
      450 ( 0.00%)              self.record_use(ident, binding, false);
        .                   }
   88,464 ( 0.00%)      }
        .           
        .               #[inline]
      225 ( 0.00%)      fn add_to_glob_map(&mut self, import: &Import<'_>, ident: Ident) {
       77 ( 0.00%)          if import.is_glob() {
       32 ( 0.00%)              let def_id = self.local_def_id(import.id);
        .                       self.glob_map.entry(def_id).or_default().insert(ident.name);
        .                   }
      236 ( 0.00%)      }
        .           
        .               /// A generic scope visitor.
        .               /// Visits scopes in order to resolve some identifier in them or perform other actions.
        .               /// If the callback returns `Some` result, we stop visiting scopes and return it.
        .               fn visit_scopes<T>(
        .                   &mut self,
        .                   scope_set: ScopeSet<'a>,
        .                   parent_scope: &ParentScope<'a>,
-- line 1738 ----------------------------------------
-- line 1780 ----------------------------------------
        .                   //    ambiguities with `macro_rules`.
        .                   // 4. `macro_use` prelude (open, the open part is from macro expansions, not controlled).
        .                   // 4a. User-defined prelude from macro-use
        .                   //    (open, the open part is from macro expansions, not controlled).
        .                   // 4b. "Standard library prelude" part implemented through `macro-use` (closed, controlled).
        .                   // 4c. Standard library prelude (de-facto closed, controlled).
        .                   // 6. Language prelude: builtin attributes (closed, controlled).
        .           
  221,514 ( 0.00%)          let rust_2015 = ctxt.edition() == Edition::Edition2015;
        .                   let (ns, macro_kind, is_absolute_path) = match scope_set {
        .                       ScopeSet::All(ns, _) => (ns, None, false),
        .                       ScopeSet::AbsolutePath(ns) => (ns, None, true),
        .                       ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),
        .                       ScopeSet::Late(ns, ..) => (ns, None, false),
        .                   };
  593,404 ( 0.01%)          let module = match scope_set {
        .                       // Start with the specified module.
        .                       ScopeSet::Late(_, module, _) => module,
        .                       // Jump out of trait or enum modules, they do not act as scopes.
   10,555 ( 0.00%)              _ => parent_scope.module.nearest_item_scope(),
        .                   };
   42,386 ( 0.00%)          let mut scope = match ns {
  105,965 ( 0.00%)              _ if is_absolute_path => Scope::CrateRoot,
        .                       TypeNS | ValueNS => Scope::Module(module, None),
      834 ( 0.00%)              MacroNS => Scope::DeriveHelpers(parent_scope.expansion),
        .                   };
   62,904 ( 0.00%)          let mut ctxt = ctxt.normalize_to_macros_2_0();
  207,880 ( 0.00%)          let mut use_prelude = !module.no_implicit_prelude;
        .           
        .                   loop {
  675,552 ( 0.01%)              let visit = match scope {
        .                           // Derive helpers are not in scope when resolving derives in the same container.
        .                           Scope::DeriveHelpers(expn_id) => {
      900 ( 0.00%)                      !(expn_id == parent_scope.expansion && macro_kind == Some(MacroKind::Derive))
        .                           }
        .                           Scope::DeriveHelpersCompat => true,
        .                           Scope::MacroRules(macro_rules_scope) => {
        .                               // Use "path compression" on `macro_rules` scope chains. This is an optimization
        .                               // used to avoid long scope chains, see the comments on `MacroRulesScopeRef`.
        .                               // As another consequence of this optimization visitors never observe invocation
        .                               // scopes for macros that were already expanded.
      628 ( 0.00%)                      while let MacroRulesScope::Invocation(invoc_id) = macro_rules_scope.get() {
        .                                   if let Some(next_scope) = self.output_macro_rules_scopes.get(&invoc_id) {
        .                                       macro_rules_scope.set(next_scope.get());
        .                                   } else {
        .                                       break;
        .                                   }
        .                               }
        .                               true
        .                           }
        .                           Scope::CrateRoot => true,
        .                           Scope::Module(..) => true,
      278 ( 0.00%)                  Scope::RegisteredAttrs => use_prelude,
        .                           Scope::MacroUsePrelude => use_prelude || rust_2015,
        .                           Scope::BuiltinAttrs => true,
      738 ( 0.00%)                  Scope::ExternPrelude => use_prelude || is_absolute_path,
      222 ( 0.00%)                  Scope::ToolPrelude => use_prelude,
   85,828 ( 0.00%)                  Scope::StdLibPrelude => use_prelude || ns == MacroNS,
        .                           Scope::BuiltinTypes => true,
        .                       };
        .           
    1,306 ( 0.00%)              if visit {
   34,492 ( 0.00%)                  if let break_result @ Some(..) = visitor(self, scope, use_prelude, ctxt) {
        .                               return break_result;
        .                           }
        .                       }
        .           
  225,590 ( 0.00%)              scope = match scope {
        .                           Scope::DeriveHelpers(LocalExpnId::ROOT) => Scope::DeriveHelpersCompat,
        .                           Scope::DeriveHelpers(expn_id) => {
        .                               // Derive helpers are not visible to code generated by bang or derive macros.
        .                               let expn_data = expn_id.expn_data();
    1,593 ( 0.00%)                      match expn_data.kind {
        .                                   ExpnKind::Root
        .                                   | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {
        .                                       Scope::DeriveHelpersCompat
        .                                   }
       66 ( 0.00%)                          _ => Scope::DeriveHelpers(expn_data.parent.expect_local()),
        .                               }
        .                           }
      834 ( 0.00%)                  Scope::DeriveHelpersCompat => Scope::MacroRules(parent_scope.macro_rules),
      556 ( 0.00%)                  Scope::MacroRules(macro_rules_scope) => match macro_rules_scope.get() {
        .                               MacroRulesScope::Binding(binding) => {
        .                                   Scope::MacroRules(binding.parent_macro_rules_scope)
        .                               }
        .                               MacroRulesScope::Invocation(invoc_id) => {
        .                                   Scope::MacroRules(self.invocation_parent_scopes[&invoc_id].macro_rules)
        .                               }
        .                               MacroRulesScope::Empty => Scope::Module(module, None),
        .                           },
-- line 1869 ----------------------------------------
-- line 1870 ----------------------------------------
        .                           Scope::CrateRoot => match ns {
        .                               TypeNS => {
        .                                   ctxt.adjust(ExpnId::root());
        .                                   Scope::ExternPrelude
        .                               }
        .                               ValueNS | MacroNS => break,
        .                           },
        .                           Scope::Module(module, prev_lint_id) => {
   65,278 ( 0.00%)                      use_prelude = !module.no_implicit_prelude;
        .                               let derive_fallback_lint_id = match scope_set {
        .                                   ScopeSet::Late(.., lint_id) => lint_id,
        .                                   _ => None,
        .                               };
  139,137 ( 0.00%)                      match self.hygienic_lexical_parent(module, &mut ctxt, derive_fallback_lint_id) {
        .                                   Some((parent_module, lint_id)) => {
        .                                       Scope::Module(parent_module, lint_id.or(prev_lint_id))
        .                                   }
        .                                   None => {
  116,104 ( 0.00%)                              ctxt.adjust(ExpnId::root());
   43,148 ( 0.00%)                              match ns {
        .                                           TypeNS => Scope::ExternPrelude,
        .                                           ValueNS => Scope::StdLibPrelude,
        .                                           MacroNS => Scope::RegisteredAttrs,
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                           Scope::RegisteredAttrs => Scope::MacroUsePrelude,
        .                           Scope::MacroUsePrelude => Scope::StdLibPrelude,
        .                           Scope::BuiltinAttrs => break, // nowhere else to search
      444 ( 0.00%)                  Scope::ExternPrelude if is_absolute_path => break,
        .                           Scope::ExternPrelude => Scope::ToolPrelude,
        .                           Scope::ToolPrelude => Scope::StdLibPrelude,
   42,350 ( 0.00%)                  Scope::StdLibPrelude => match ns {
        .                               TypeNS => Scope::BuiltinTypes,
        .                               ValueNS => break, // nowhere else to search
        .                               MacroNS => Scope::BuiltinAttrs,
        .                           },
        .                           Scope::BuiltinTypes => break, // nowhere else to search
        .                       };
        .                   }
        .           
-- line 1911 ----------------------------------------
-- line 1924 ----------------------------------------
        .               ///    let g = || {};
        .               ///    fn g() {}
        .               ///    g(); // This resolves to the local variable `g` since it shadows the item.
        .               /// }
        .               /// ```
        .               ///
        .               /// Invariant: This must only be called during main resolution, not during
        .               /// import resolution.
  217,530 ( 0.00%)      fn resolve_ident_in_lexical_scope(
        .                   &mut self,
        .                   mut ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used_id: Option<NodeId>,
        .                   path_span: Span,
        .                   ribs: &[Rib<'a>],
        .               ) -> Option<LexicalScopeBinding<'a>> {
   43,506 ( 0.00%)          assert!(ns == TypeNS || ns == ValueNS);
        .                   let orig_ident = ident;
  152,271 ( 0.00%)          if ident.name == kw::Empty {
        .                       return Some(LexicalScopeBinding::Res(Res::Err));
        .                   }
        .                   let (general_span, normalized_span) = if ident.name == kw::SelfUpper {
        .                       // FIXME(jseyfried) improve `Self` hygiene
        .                       let empty_span = ident.span.with_ctxt(SyntaxContext::root());
        .                       (empty_span, empty_span)
   21,649 ( 0.00%)          } else if ns == TypeNS {
   52,345 ( 0.00%)              let normalized_span = ident.span.normalize_to_macros_2_0();
        .                       (normalized_span, normalized_span)
        .                   } else {
   55,900 ( 0.00%)              (ident.span.normalize_to_macro_rules(), ident.span.normalize_to_macros_2_0())
        .                   };
        .                   ident.span = general_span;
        .                   let normalized_ident = Ident { span: normalized_span, ..ident };
        .           
        .                   // Walk backwards up the ribs in scope.
        .                   let record_used = record_used_id.is_some();
   65,259 ( 0.00%)          let mut module = self.graph_root;
        .                   for i in (0..ribs.len()).rev() {
        .                       debug!("walk rib\n{:?}", ribs[i].bindings);
        .                       // Use the rib kind to determine whether we are resolving parameters
        .                       // (macro 2.0 hygiene) or local variables (`macro_rules` hygiene).
   67,895 ( 0.00%)              let rib_ident = if ribs[i].kind.contains_params() { normalized_ident } else { ident };
        .                       if let Some((original_rib_ident_def, res)) = ribs[i].bindings.get_key_value(&rib_ident)
        .                       {
        .                           // The ident resolves to a type parameter or local variable.
    8,976 ( 0.00%)                  return Some(LexicalScopeBinding::Res(self.validate_res_from_ribs(
        .                               i,
    1,496 ( 0.00%)                      rib_ident,
    3,740 ( 0.00%)                      *res,
        .                               record_used,
        .                               path_span,
        .                               *original_rib_ident_def,
        .                               ribs,
        .                           )));
        .                       }
        .           
  385,369 ( 0.01%)              module = match ribs[i].kind {
   21,165 ( 0.00%)                  ModuleRibKind(module) => module,
        .                           MacroDefinition(def) if def == self.macro_def(ident.span.ctxt()) => {
        .                               // If an invocation of this macro created `ident`, give up on `ident`
        .                               // and switch to `ident`'s source from the macro definition.
        .                               ident.span.remove_mark();
        .                               continue;
        .                           }
        .                           _ => continue,
        .                       };
        .           
   63,495 ( 0.00%)              match module.kind {
        .                           ModuleKind::Block(..) => {} // We can see through blocks
        .                           _ => break,
        .                       }
        .           
        .                       let item = self.resolve_ident_in_module_unadjusted(
        .                           ModuleOrUniformRoot::Module(module),
        .                           ident,
        .                           ns,
        .                           parent_scope,
        .                           record_used,
        .                           path_span,
        .                       );
        .                       if let Ok(binding) = item {
        .                           // The ident resolves to an item.
      132 ( 0.00%)                  return Some(LexicalScopeBinding::Item(binding));
        .                       }
        .                   }
  356,337 ( 0.01%)          self.early_resolve_ident_in_lexical_scope(
        .                       orig_ident,
        .                       ScopeSet::Late(ns, module, record_used_id),
        .                       parent_scope,
        .                       record_used,
        .                       record_used,
        .                       path_span,
        .                   )
        .                   .ok()
        .                   .map(LexicalScopeBinding::Item)
  195,777 ( 0.00%)      }
        .           
  236,192 ( 0.00%)      fn hygienic_lexical_parent(
        .                   &mut self,
        .                   module: Module<'a>,
        .                   ctxt: &mut SyntaxContext,
        .                   derive_fallback_lint_id: Option<NodeId>,
        .               ) -> Option<(Module<'a>, Option<NodeId>)> {
  150,304 ( 0.00%)          if !module.expansion.outer_expn_is_descendant_of(*ctxt) {
    1,470 ( 0.00%)              return Some((self.expn_def_scope(ctxt.remove_mark()), None));
        .                   }
        .           
   42,454 ( 0.00%)          if let ModuleKind::Block(..) = module.kind {
       58 ( 0.00%)              return Some((module.parent.unwrap().nearest_item_scope(), None));
        .                   }
        .           
        .                   // We need to support the next case under a deprecation warning
        .                   // ```
        .                   // struct MyStruct;
        .                   // ---- begin: this comes from a proc macro derive
        .                   // mod implementation_details {
        .                   //     // Note that `MyStruct` is not in scope here.
        .                   //     impl SomeTrait for MyStruct { ... }
        .                   // }
        .                   // ---- end
        .                   // ```
        .                   // So we have to fall back to the module's parent during lexical resolution in this case.
   21,169 ( 0.00%)          if derive_fallback_lint_id.is_some() {
      768 ( 0.00%)              if let Some(parent) = module.parent {
        .                           // Inner module is inside the macro, parent module is outside of the macro.
      215 ( 0.00%)                  if module.expansion != parent.expansion
        .                               && module.expansion.is_descendant_of(parent.expansion)
        .                           {
        .                               // The macro is a proc macro derive
        .                               if let Some(def_id) = module.expansion.expn_data().macro_def_id {
        .                                   let ext = self.get_macro_by_def_id(def_id);
        .                                   if ext.builtin_name.is_none()
        .                                       && ext.macro_kind() == MacroKind::Derive
        .                                       && parent.expansion.outer_expn_is_descendant_of(*ctxt)
-- line 2058 ----------------------------------------
-- line 2060 ----------------------------------------
        .                                       return Some((parent, derive_fallback_lint_id));
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   None
  214,720 ( 0.00%)      }
        .           
        .               fn resolve_ident_in_module(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, Determinacy> {
    5,700 ( 0.00%)          self.resolve_ident_in_module_ext(module, ident, ns, parent_scope, record_used, path_span)
        .                       .map_err(|(determinacy, _)| determinacy)
        .               }
        .           
   12,720 ( 0.00%)      fn resolve_ident_in_module_ext(
        .                   &mut self,
        .                   module: ModuleOrUniformRoot<'a>,
        .                   mut ident: Ident,
        .                   ns: Namespace,
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .               ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {
        .                   let tmp_parent_scope;
        .                   let mut adjusted_parent_scope = parent_scope;
        .                   match module {
        .                       ModuleOrUniformRoot::Module(m) => {
    3,822 ( 0.00%)                  if let Some(def) = ident.span.normalize_to_macros_2_0_and_adjust(m.expansion) {
    1,120 ( 0.00%)                      tmp_parent_scope =
    1,344 ( 0.00%)                          ParentScope { module: self.expn_def_scope(def), ..*parent_scope };
        .                               adjusted_parent_scope = &tmp_parent_scope;
        .                           }
        .                       }
        .                       ModuleOrUniformRoot::ExternPrelude => {
        .                           ident.span.normalize_to_macros_2_0_and_adjust(ExpnId::root());
        .                       }
        .                       ModuleOrUniformRoot::CrateRootAndExternPrelude | ModuleOrUniformRoot::CurrentScope => {
        .                           // No adjustments
        .                       }
        .                   }
    7,006 ( 0.00%)          self.resolve_ident_in_module_unadjusted_ext(
        .                       module,
    1,274 ( 0.00%)              ident,
        .                       ns,
        .                       adjusted_parent_scope,
        .                       false,
        .                       record_used,
        .                       path_span,
        .                   )
    4,452 ( 0.00%)      }
        .           
    2,440 ( 0.00%)      fn resolve_crate_root(&mut self, ident: Ident) -> Module<'a> {
        .                   debug!("resolve_crate_root({:?})", ident);
      244 ( 0.00%)          let mut ctxt = ident.span.ctxt();
      244 ( 0.00%)          let mark = if ident.name == kw::DollarCrate {
        .                       // When resolving `$crate` from a `macro_rules!` invoked in a `macro`,
        .                       // we don't want to pretend that the `macro_rules!` definition is in the `macro`
        .                       // as described in `SyntaxContext::apply_mark`, so we ignore prepended opaque marks.
        .                       // FIXME: This is only a guess and it doesn't work correctly for `macro_rules!`
        .                       // definitions actually produced by `macro` and `macro` definitions produced by
        .                       // `macro_rules!`, but at least such configurations are not stable yet.
      484 ( 0.00%)              ctxt = ctxt.normalize_to_macro_rules();
        .                       debug!(
        .                           "resolve_crate_root: marks={:?}",
        .                           ctxt.marks().into_iter().map(|(i, t)| (i.expn_data(), t)).collect::<Vec<_>>()
        .                       );
      484 ( 0.00%)              let mut iter = ctxt.marks().into_iter().rev().peekable();
        .                       let mut result = None;
        .                       // Find the last opaque mark from the end if it exists.
    1,428 ( 0.00%)              while let Some(&(mark, transparency)) = iter.peek() {
        .                           if transparency == Transparency::Opaque {
        .                               result = Some(mark);
        .                               iter.next();
        .                           } else {
        .                               break;
        .                           }
        .                       }
        .                       debug!(
        .                           "resolve_crate_root: found opaque mark {:?} {:?}",
        .                           result,
        .                           result.map(|r| r.expn_data())
        .                       );
        .                       // Then find the last semi-transparent mark from the end if it exists.
      726 ( 0.00%)              for (mark, transparency) in iter {
        .                           if transparency == Transparency::SemiTransparent {
        .                               result = Some(mark);
        .                           } else {
        .                               break;
        .                           }
        .                       }
        .                       debug!(
        .                           "resolve_crate_root: found semi-transparent mark {:?} {:?}",
        .                           result,
        .                           result.map(|r| r.expn_data())
        .                       );
        .                       result
        .                   } else {
        .                       debug!("resolve_crate_root: not DollarCrate");
        2 ( 0.00%)              ctxt = ctxt.normalize_to_macros_2_0();
       14 ( 0.00%)              ctxt.adjust(ExpnId::root())
        .                   };
      488 ( 0.00%)          let module = match mark {
    1,195 ( 0.00%)              Some(def) => self.expn_def_scope(def),
        .                       None => {
        .                           debug!(
        .                               "resolve_crate_root({:?}): found no mark (ident.span = {:?})",
        .                               ident, ident.span
        .                           );
       10 ( 0.00%)                  return self.graph_root;
        .                       }
        .                   };
        .                   let module = self.expect_module(
        .                       module.opt_def_id().map_or(LOCAL_CRATE, |def_id| def_id.krate).as_def_id(),
        .                   );
        .                   debug!(
        .                       "resolve_crate_root({:?}): got module {:?} ({:?}) (ident.span = {:?})",
        .                       ident,
        .                       module,
        .                       module.kind.name(),
        .                       ident.span
        .                   );
        .                   module
    1,708 ( 0.00%)      }
        .           
        .               fn resolve_self(&mut self, ctxt: &mut SyntaxContext, module: Module<'a>) -> Module<'a> {
        .                   let mut module = self.expect_module(module.nearest_parent_mod());
        .                   while module.span.ctxt().normalize_to_macros_2_0() != *ctxt {
        .                       let parent = module.parent.unwrap_or_else(|| self.expn_def_scope(ctxt.remove_mark()));
        .                       module = self.expect_module(parent.nearest_parent_mod());
        .                   }
        .                   module
-- line 2199 ----------------------------------------
-- line 2203 ----------------------------------------
        .                   &mut self,
        .                   path: &[Segment],
        .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .                   crate_lint: CrateLint,
        .               ) -> PathResult<'a> {
      210 ( 0.00%)          self.resolve_path_with_ribs(
        .                       path,
        .                       opt_ns,
        .                       parent_scope,
        .                       record_used,
        .                       path_span,
        .                       crate_lint,
        .                       None,
        .                   )
        .               }
        .           
  323,160 ( 0.01%)      fn resolve_path_with_ribs(
        .                   &mut self,
        .                   path: &[Segment],
        .                   opt_ns: Option<Namespace>, // `None` indicates a module path in import
        .                   parent_scope: &ParentScope<'a>,
        .                   record_used: bool,
        .                   path_span: Span,
        .                   crate_lint: CrateLint,
        .                   ribs: Option<&PerNS<Vec<Rib<'a>>>>,
        .               ) -> PathResult<'a> {
   21,544 ( 0.00%)          let mut module = None;
        .                   let mut allow_super = true;
        .                   let mut second_binding = None;
        .           
        .                   debug!(
        .                       "resolve_path(path={:?}, opt_ns={:?}, record_used={:?}, \
        .                        path_span={:?}, crate_lint={:?})",
        .                       path, opt_ns, record_used, path_span, crate_lint,
        .                   );
        .           
  132,792 ( 0.00%)          for (i, &Segment { ident, id, has_generic_args: _ }) in path.iter().enumerate() {
        .                       debug!("resolve_path ident {} {:?} {:?}", i, ident, id);
  114,572 ( 0.00%)              let record_segment_res = |this: &mut Self, res| {
    3,912 ( 0.00%)                  if record_used {
    6,415 ( 0.00%)                      if let Some(id) = id {
    2,566 ( 0.00%)                          if !this.partial_res_map.contains_key(&id) {
    2,338 ( 0.00%)                              assert!(id != ast::DUMMY_NODE_ID, "Trying to resolve dummy id");
    4,676 ( 0.00%)                              this.record_partial_res(id, PartialRes::new(res));
        .                                   }
        .                               }
        .                           }
    5,216 ( 0.00%)              };
        .           
   65,368 ( 0.00%)              let is_last = i == path.len() - 1;
  110,660 ( 0.00%)              let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };
   22,132 ( 0.00%)              let name = ident.name;
        .           
   33,262 ( 0.00%)              allow_super &= ns == TypeNS && (name == kw::SelfLower || name == kw::Super);
        .           
        .                       if ns == TypeNS {
   22,260 ( 0.00%)                  if allow_super && name == kw::Super {
        .                               let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
        .                               let self_module = match i {
        .                                   0 => Some(self.resolve_self(&mut ctxt, parent_scope.module)),
        .                                   _ => match module {
        .                                       Some(ModuleOrUniformRoot::Module(module)) => Some(module),
        .                                       _ => None,
        .                                   },
        .                               };
-- line 2270 ----------------------------------------
-- line 2279 ----------------------------------------
        .                               let msg = "there are too many leading `super` keywords".to_string();
        .                               return PathResult::Failed {
        .                                   span: ident.span,
        .                                   label: msg,
        .                                   suggestion: None,
        .                                   is_error_from_last_segment: false,
        .                               };
        .                           }
   22,260 ( 0.00%)                  if i == 0 {
   32,061 ( 0.00%)                      if name == kw::SelfLower {
        .                                   let mut ctxt = ident.span.ctxt().normalize_to_macros_2_0();
        .                                   module = Some(ModuleOrUniformRoot::Module(
        .                                       self.resolve_self(&mut ctxt, parent_scope.module),
        .                                   ));
        .                                   continue;
        .                               }
        .                               if name == kw::PathRoot && ident.span.rust_2018() {
        .                                   module = Some(ModuleOrUniformRoot::ExternPrelude);
-- line 2296 ----------------------------------------
-- line 2298 ----------------------------------------
        .                               }
        .                               if name == kw::PathRoot && ident.span.rust_2015() && self.session.rust_2018() {
        .                                   // `::a::b` from 2015 macro on 2018 global edition
        .                                   module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);
        .                                   continue;
        .                               }
        .                               if name == kw::PathRoot || name == kw::Crate || name == kw::DollarCrate {
        .                                   // `::a::b`, `crate::a::b` or `$crate::a::b`
      804 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(self.resolve_crate_root(ident)));
        .                                   continue;
        .                               }
        .                           }
        .                       }
        .           
        .                       // Report special messages for path segment keywords in wrong positions.
  109,989 ( 0.00%)              if ident.is_path_segment_keyword() && i != 0 {
        .                           let name_str = if name == kw::PathRoot {
        .                               "crate root".to_string()
        .                           } else {
        .                               format!("`{}`", name)
        .                           };
        .                           let label = if i == 1 && path[0].ident.name == kw::PathRoot {
        .                               format!("global paths cannot start with {}", name_str)
        .                           } else {
-- line 2321 ----------------------------------------
-- line 2328 ----------------------------------------
        .                               is_error_from_last_segment: false,
        .                           };
        .                       }
        .           
        .                       enum FindBindingResult<'a> {
        .                           Binding(Result<&'a NameBinding<'a>, Determinacy>),
        .                           PathResult(PathResult<'a>),
        .                       }
  701,792 ( 0.01%)              let find_binding_in_ns = |this: &mut Self, ns| {
   88,312 ( 0.00%)                  let binding = if let Some(module) = module {
        .                               this.resolve_ident_in_module(
        .                                   module,
    1,764 ( 0.00%)                          ident,
        .                                   ns,
        .                                   parent_scope,
    1,176 ( 0.00%)                          record_used,
      588 ( 0.00%)                          path_span,
        .                               )
  127,986 ( 0.00%)                  } else if ribs.is_none() || opt_ns.is_none() || opt_ns == Some(MacroNS) {
        .                               let scopes = ScopeSet::All(ns, opt_ns.is_none());
      306 ( 0.00%)                      this.early_resolve_ident_in_lexical_scope(
       54 ( 0.00%)                          ident,
        .                                   scopes,
       18 ( 0.00%)                          parent_scope,
       36 ( 0.00%)                          record_used,
        .                                   record_used,
       18 ( 0.00%)                          path_span,
        .                               )
        .                           } else {
   85,300 ( 0.00%)                      let record_used_id = if record_used {
   11,247 ( 0.00%)                          crate_lint.node_id().or(Some(CRATE_NODE_ID))
        .                               } else {
        .                                   None
        .                               };
  318,529 ( 0.01%)                      match this.resolve_ident_in_lexical_scope(
   63,975 ( 0.00%)                          ident,
        .                                   ns,
   21,325 ( 0.00%)                          parent_scope,
        .                                   record_used_id,
   42,650 ( 0.00%)                          path_span,
        .                                   &ribs.unwrap()[ns],
        .                               ) {
        .                                   // we found a locally-imported or available item/module
   31,731 ( 0.00%)                          Some(LexicalScopeBinding::Item(binding)) => Ok(binding),
        .                                   // we found a local variable or type param
        .                                   Some(LexicalScopeBinding::Res(res))
    1,346 ( 0.00%)                              if opt_ns == Some(TypeNS) || opt_ns == Some(ValueNS) =>
        .                                   {
    6,057 ( 0.00%)                              record_segment_res(this, res);
    5,384 ( 0.00%)                              return FindBindingResult::PathResult(PathResult::NonModule(
    4,711 ( 0.00%)                                  PartialRes::with_unresolved_segments(res, path.len() - 1),
        .                                       ));
        .                                   }
   30,225 ( 0.00%)                          _ => Err(Determinacy::determined(record_used)),
        .                               }
        .                           };
  148,806 ( 0.00%)                  FindBindingResult::Binding(binding)
  175,448 ( 0.00%)              };
  153,517 ( 0.00%)              let binding = match find_binding_in_ns(self, ns) {
    9,422 ( 0.00%)                  FindBindingResult::PathResult(x) => return x,
        .                           FindBindingResult::Binding(binding) => binding,
        .                       };
   72,741 ( 0.00%)              match binding {
        .                           Ok(binding) => {
   55,915 ( 0.00%)                      if i == 1 {
        .                                   second_binding = Some(binding);
        .                               }
        .                               let res = binding.res();
  111,830 ( 0.00%)                      let maybe_assoc = opt_ns != Some(MacroNS) && PathSource::Type.is_expected(res);
        .                               if let Some(next_module) = binding.module() {
    1,262 ( 0.00%)                          module = Some(ModuleOrUniformRoot::Module(next_module));
    5,679 ( 0.00%)                          record_segment_res(self, res);
   73,864 ( 0.00%)                      } else if res == Res::ToolMod && i + 1 != path.len() {
        .                                   if binding.is_import() {
        .                                       self.session
        .                                           .struct_span_err(
        .                                               ident.span,
        .                                               "cannot use a tool module through an import",
        .                                           )
        .                                           .span_note(binding.span, "the tool module imported here")
        .                                           .emit();
        .                                   }
        .                                   let res = Res::NonMacroAttr(NonMacroAttrKind::Tool);
        .                                   return PathResult::NonModule(PartialRes::new(res));
   52,760 ( 0.00%)                      } else if res == Res::Err {
        .                                   return PathResult::NonModule(PartialRes::new(Res::Err));
   31,656 ( 0.00%)                      } else if opt_ns.is_some() && (is_last || maybe_assoc) {
   73,864 ( 0.00%)                          self.lint_if_path_starts_with_module(
   21,104 ( 0.00%)                              crate_lint,
        .                                       path,
   10,552 ( 0.00%)                              path_span,
        .                                       second_binding,
        .                                   );
   31,656 ( 0.00%)                          return PathResult::NonModule(PartialRes::with_unresolved_segments(
   42,208 ( 0.00%)                              res,
   42,208 ( 0.00%)                              path.len() - i - 1,
        .                                   ));
        .                               } else {
        .                                   let label = format!(
        .                                       "`{}` is {} {}, not a module",
        .                                       ident,
        .                                       res.article(),
        .                                       res.descr(),
        .                                   );
-- line 2431 ----------------------------------------
-- line 2433 ----------------------------------------
        .                                   return PathResult::Failed {
        .                                       span: ident.span,
        .                                       label,
        .                                       suggestion: None,
        .                                       is_error_from_last_segment: is_last,
        .                                   };
        .                               }
        .                           }
   20,150 ( 0.00%)                  Err(Undetermined) => return PathResult::Indeterminate,
        .                           Err(Determined) => {
        .                               if let Some(ModuleOrUniformRoot::Module(module)) = module {
        .                                   if opt_ns.is_some() && !module.is_normal() {
        .                                       return PathResult::NonModule(PartialRes::with_unresolved_segments(
        .                                           module.res().unwrap(),
        .                                           path.len() - i,
        .                                       ));
        .                                   }
-- line 2449 ----------------------------------------
-- line 2612 ----------------------------------------
        .                                   label,
        .                                   suggestion,
        .                                   is_error_from_last_segment: is_last,
        .                               };
        .                           }
        .                       }
        .                   }
        .           
    2,684 ( 0.00%)          self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);
        .           
    1,464 ( 0.00%)          PathResult::Module(match module {
      488 ( 0.00%)              Some(module) => module,
        .                       None if path.is_empty() => ModuleOrUniformRoot::CurrentScope,
        .                       _ => span_bug!(path_span, "resolve_path: non-empty path `{:?}` has no module", path),
        .                   })
  193,896 ( 0.00%)      }
        .           
  129,576 ( 0.00%)      fn lint_if_path_starts_with_module(
        .                   &mut self,
        .                   crate_lint: CrateLint,
        .                   path: &[Segment],
        .                   path_span: Span,
        .                   second_binding: Option<&NameBinding<'_>>,
        .               ) {
   53,990 ( 0.00%)          let (diag_id, diag_span) = match crate_lint {
        .                       CrateLint::No => return,
        .                       CrateLint::SimplePath(id) => (id, path_span),
        .                       CrateLint::UsePath { root_id, root_span } => (root_id, root_span),
        .                       CrateLint::QPathTrait { qpath_id, qpath_span } => (qpath_id, qpath_span),
        .                   };
        .           
   10,795 ( 0.00%)          let first_name = match path.get(0) {
        .                       // In the 2018 edition this lint is a hard error, so nothing to do
   21,590 ( 0.00%)              Some(seg) if seg.ident.span.rust_2015() && self.session.rust_2015() => seg.ident.name,
        .                       _ => return,
        .                   };
        .           
        .                   // We're only interested in `use` paths which should start with
        .                   // `{{root}}` currently.
        .                   if first_name != kw::PathRoot {
        .                       return;
        .                   }
-- line 2653 ----------------------------------------
-- line 2679 ----------------------------------------
        .                   self.lint_buffer.buffer_lint_with_diagnostic(
        .                       lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,
        .                       diag_id,
        .                       diag_span,
        .                       "absolute paths must start with `self`, `super`, \
        .                        `crate`, or an external crate name in the 2018 edition",
        .                       diag,
        .                   );
   86,384 ( 0.00%)      }
        .           
        .               // Validate a local resolution (from ribs).
        .               fn validate_res_from_ribs(
        .                   &mut self,
        .                   rib_index: usize,
        .                   rib_ident: Ident,
        .                   mut res: Res,
        .                   record_used: bool,
        .                   span: Span,
        .                   original_rib_ident_def: Ident,
        .                   all_ribs: &[Rib<'a>],
        .               ) -> Res {
        .                   const CG_BUG_STR: &str = "min_const_generics resolve check didn't stop compilation";
        .                   debug!("validate_res_from_ribs({:?})", res);
    1,496 ( 0.00%)          let ribs = &all_ribs[rib_index + 1..];
        .           
        .                   // An invalid forward use of a generic parameter from a previous default.
    2,992 ( 0.00%)          if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {
        .                       if record_used {
        .                           let res_error = if rib_ident.name == kw::SelfUpper {
        .                               ResolutionError::SelfInGenericParamDefault
        .                           } else {
        .                               ResolutionError::ForwardDeclaredGenericParam
        .                           };
        .                           self.report_error(span, res_error);
        .                       }
        .                       assert_eq!(res, Res::Err);
        .                       return Res::Err;
        .                   }
        .           
    5,039 ( 0.00%)          match res {
        .                       Res::Local(_) => {
        .                           use ResolutionError::*;
      633 ( 0.00%)                  let mut res_err = None;
        .           
        .                           for rib in ribs {
    6,240 ( 0.00%)                      match rib.kind {
        .                                   NormalRibKind
        .                                   | ClosureOrAsyncRibKind
        .                                   | ModuleRibKind(..)
        .                                   | MacroDefinition(..)
        .                                   | ForwardGenericParamBanRibKind => {
        .                                       // Nothing to do. Continue.
        .                                   }
        .                                   ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {
        .                                       // This was an attempt to access an upvar inside a
        .                                       // named function item. This is not allowed, so we
        .                                       // report an error.
      505 ( 0.00%)                              if record_used {
        .                                           // We don't immediately trigger a resolve error, because
        .                                           // we want certain other resolution errors (namely those
        .                                           // emitted for `ConstantItemRibKind` below) to take
        .                                           // precedence.
        .                                           res_err = Some(CannotCaptureDynamicEnvironmentInFnItem);
        .                                       }
        .                                   }
        .                                   ConstantItemRibKind(_, item) => {
-- line 2744 ----------------------------------------
-- line 2773 ----------------------------------------
        .                                   ConstParamTyRibKind => {
        .                                       if record_used {
        .                                           self.report_error(span, ParamInTyOfConstParam(rib_ident.name));
        .                                       }
        .                                       return Res::Err;
        .                                   }
        .                               }
        .                           }
      998 ( 0.00%)                  if let Some(res_err) = res_err {
        .                               self.report_error(span, res_err);
        .                               return Res::Err;
        .                           }
        .                       }
        .                       Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {
        .                           for rib in ribs {
      728 ( 0.00%)                      let has_generic_params: HasGenericParams = match rib.kind {
        .                                   NormalRibKind
        .                                   | ClosureOrAsyncRibKind
        .                                   | AssocItemRibKind
        .                                   | ModuleRibKind(..)
        .                                   | MacroDefinition(..)
        .                                   | ForwardGenericParamBanRibKind => {
        .                                       // Nothing to do. Continue.
        .                                       continue;
-- line 2796 ----------------------------------------
-- line 2799 ----------------------------------------
        .                                   ConstantItemRibKind(trivial, _) => {
        .                                       let features = self.session.features_untracked();
        .                                       // HACK(min_const_generics): We currently only allow `N` or `{ N }`.
        .                                       if !(trivial || features.generic_const_exprs) {
        .                                           // HACK(min_const_generics): If we encounter `Self` in an anonymous constant
        .                                           // we can't easily tell if it's generic at this stage, so we instead remember
        .                                           // this and then enforce the self type to be concrete later on.
        .                                           if let Res::SelfTy(trait_def, Some((impl_def, _))) = res {
      104 ( 0.00%)                                      res = Res::SelfTy(trait_def, Some((impl_def, true)));
        .                                           } else {
        .                                               if record_used {
        .                                                   self.report_error(
        .                                                       span,
        .                                                       ResolutionError::ParamInNonTrivialAnonConst {
        .                                                           name: rib_ident.name,
        .                                                           is_type: true,
        .                                                       },
-- line 2815 ----------------------------------------
-- line 2912 ----------------------------------------
        .                                       ),
        .                                   );
        .                               }
        .                               return Res::Err;
        .                           }
        .                       }
        .                       _ => {}
        .                   }
    2,992 ( 0.00%)          res
        .               }
        .           
        .               fn record_partial_res(&mut self, node_id: NodeId, resolution: PartialRes) {
        .                   debug!("(recording res) recording {:?} for {}", resolution, node_id);
   26,654 ( 0.00%)          if let Some(prev_res) = self.partial_res_map.insert(node_id, resolution) {
        .                       panic!("path resolved multiple times ({:?} before, {:?} now)", prev_res, resolution);
        .                   }
        .               }
        .           
        .               fn record_pat_span(&mut self, node: NodeId, span: Span) {
        .                   debug!("(recording pat) recording {:?} for {:?}", node, span);
        .                   self.pat_span_map.insert(node, span);
        .               }
        .           
      160 ( 0.00%)      fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {
   67,416 ( 0.00%)          vis.is_accessible_from(module.nearest_parent_mod(), self)
      144 ( 0.00%)      }
        .           
        .               fn set_binding_parent_module(&mut self, binding: &'a NameBinding<'a>, module: Module<'a>) {
    5,024 ( 0.00%)          if let Some(old_module) = self.binding_parent_modules.insert(PtrKey(binding), module) {
        .                       if !ptr::eq(module, old_module) {
        .                           span_bug!(binding.span, "parent module is reset for binding");
        .                       }
        .                   }
        .               }
        .           
        .               fn disambiguate_macro_rules_vs_modularized(
        .                   &self,
-- line 2948 ----------------------------------------
-- line 2959 ----------------------------------------
        .                       (Some(macro_rules), Some(modularized)) => {
        .                           macro_rules.nearest_parent_mod() == modularized.nearest_parent_mod()
        .                               && modularized.is_ancestor_of(macro_rules)
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        7 ( 0.00%)      fn report_errors(&mut self, krate: &Crate) {
        .                   self.report_with_use_injections(krate);
        .           
        6 ( 0.00%)          for &(span_use, span_def) in &self.macro_expanded_macro_export_errors {
        .                       let msg = "macro-expanded `macro_export` macros from the current crate \
        .                                  cannot be referred to by absolute paths";
        .                       self.lint_buffer.buffer_lint_with_diagnostic(
        .                           lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS,
        .                           CRATE_NODE_ID,
        .                           span_use,
        .                           msg,
        .                           BuiltinLintDiagnostics::MacroExpandedMacroExportsAccessedByAbsolutePaths(span_def),
-- line 2978 ----------------------------------------
-- line 2984 ----------------------------------------
        .                   }
        .           
        .                   let mut reported_spans = FxHashSet::default();
        .                   for error in &self.privacy_errors {
        .                       if reported_spans.insert(error.dedup_span) {
        .                           self.report_privacy_error(error);
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               fn report_with_use_injections(&mut self, krate: &Crate) {
        .                   for UseError { mut err, candidates, def_id, instead, suggestion } in
       10 ( 0.00%)              self.use_injections.drain(..)
        .                   {
        .                       let (span, found_use) = if let Some(def_id) = def_id.as_local() {
        .                           UsePlacementFinder::check(krate, self.def_id_to_node_id[def_id])
        .                       } else {
        .                           (None, false)
        .                       };
        .                       if !candidates.is_empty() {
        .                           diagnostics::show_candidates(
-- line 3004 ----------------------------------------
-- line 3284 ----------------------------------------
        .                       }
        .           
        .                       return;
        .                   }
        .           
        .                   err.span_suggestion(span, message, String::new(), Applicability::MachineApplicable);
        .               }
        .           
    2,440 ( 0.00%)      fn extern_prelude_get(
        .                   &mut self,
        .                   ident: Ident,
        .                   speculative: bool,
        .               ) -> Option<&'a NameBinding<'a>> {
    1,220 ( 0.00%)          if ident.is_path_segment_keyword() {
        .                       // Make sure `self`, `super` etc produce an error when passed to here.
        .                       return None;
        .                   }
    2,196 ( 0.00%)          self.extern_prelude.get(&ident.normalize_to_macros_2_0()).cloned().and_then(|entry| {
       64 ( 0.00%)              if let Some(binding) = entry.extern_crate_item {
        .                           if !speculative && entry.introduced_by_item {
        .                               self.record_use(ident, binding, false);
        .                           }
        .                           Some(binding)
        .                       } else {
       64 ( 0.00%)                  let crate_id = if !speculative {
       16 ( 0.00%)                      let Some(crate_id) =
       24 ( 0.00%)                          self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };
        .                               crate_id
        .                           } else {
       96 ( 0.00%)                      self.crate_loader.maybe_process_path_extern(ident.name)?
        .                           };
        .                           let crate_root = self.expect_module(crate_id.as_def_id());
        .                           Some(
        .                               (crate_root, ty::Visibility::Public, DUMMY_SP, LocalExpnId::ROOT)
       32 ( 0.00%)                          .to_name_binding(self.arenas),
        .                           )
        .                       }
        .                   })
    1,952 ( 0.00%)      }
        .           
        .               /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`
        .               /// isn't something that can be returned because it can't be made to live that long,
        .               /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,
        .               /// just that an error occurred.
        .               // FIXME(Manishearth): intra-doc links won't get warned of epoch changes.
        .               pub fn resolve_str_path_error(
        .                   &mut self,
-- line 3330 ----------------------------------------
-- line 3422 ----------------------------------------
        .               #[inline]
        .               pub fn opt_span(&self, def_id: DefId) -> Option<Span> {
        .                   def_id.as_local().map(|def_id| self.definitions.def_span(def_id))
        .               }
        .           
        .               /// Checks if an expression refers to a function marked with
        .               /// `#[rustc_legacy_const_generics]` and returns the argument index list
        .               /// from the attribute.
  161,648 ( 0.00%)      pub fn legacy_const_generic_args(&mut self, expr: &Expr) -> Option<Vec<usize>> {
   80,824 ( 0.00%)          if let ExprKind::Path(None, path) = &expr.kind {
        .                       // Don't perform legacy const generics rewriting if the path already
        .                       // has generic arguments.
   20,206 ( 0.00%)              if path.segments.last().unwrap().args.is_some() {
        .                           return None;
        .                       }
        .           
        .                       let partial_res = self.partial_res_map.get(&expr.id)?;
   40,412 ( 0.00%)              if partial_res.unresolved_segments() != 0 {
        .                           return None;
        .                       }
        .           
    1,152 ( 0.00%)              if let Res::Def(def::DefKind::Fn, def_id) = partial_res.base_res() {
        .                           // We only support cross-crate argument rewriting. Uses
        .                           // within the same crate should be updated to use the new
        .                           // const generics style.
      126 ( 0.00%)                  if def_id.is_local() {
        .                               return None;
        .                           }
        .           
        .                           if let Some(v) = self.legacy_const_generic_args.get(&def_id) {
        .                               return v.clone();
        .                           }
        .           
      156 ( 0.00%)                  let attr = self
        .                               .cstore()
       52 ( 0.00%)                      .item_attrs_untracked(def_id, self.session)
        .                               .find(|a| a.has_name(sym::rustc_legacy_const_generics))?;
        .                           let mut ret = Vec::new();
        .                           for meta in attr.meta_item_list()? {
        .                               match meta.literal()?.kind {
        .                                   LitKind::Int(a, _) => ret.push(a as usize),
        .                                   _ => panic!("invalid arg index"),
        .                               }
        .                           }
        .                           // Cache the lookup to avoid parsing attributes for an iterm multiple times.
        .                           self.legacy_const_generic_args.insert(def_id, Some(ret.clone()));
        .                           return Some(ret);
        .                       }
        .                   }
        .                   None
  181,854 ( 0.00%)      }
        .           
        7 ( 0.00%)      fn resolve_main(&mut self) {
        2 ( 0.00%)          let module = self.graph_root;
        .                   let ident = Ident::with_dummy_span(sym::main);
        .                   let parent_scope = &ParentScope::module(module, self);
        .           
        .                   let name_binding = match self.resolve_ident_in_module(
        .                       ModuleOrUniformRoot::Module(module),
        .                       ident,
        .                       ValueNS,
        .                       parent_scope,
-- line 3483 ----------------------------------------
-- line 3490 ----------------------------------------
        .           
        .                   let res = name_binding.res();
        .                   let is_import = name_binding.is_import();
        .                   let span = name_binding.span;
        .                   if let Res::Def(DefKind::Fn, _) = res {
        .                       self.record_use(ident, name_binding, false);
        .                   }
        .                   self.main_def = Some(MainDefinition { res, is_import, span });
        8 ( 0.00%)      }
        .           }
        .           
        .           fn names_to_string(names: &[Symbol]) -> String {
        .               let mut result = String::new();
        .               for (i, name) in names.iter().filter(|name| **name != kw::PathRoot).enumerate() {
        .                   if i > 0 {
        .                       result.push_str("::");
        .                   }
-- line 3506 ----------------------------------------
-- line 3558 ----------------------------------------
        .               /// This is the "trait item" from a fully qualified path. For example,
        .               /// we might be resolving  `X::Y::Z` from a path like `<T as X::Y>::Z`.
        .               /// The `path_span` is the span of the to the trait itself (`X::Y`).
        .               QPathTrait { qpath_id: NodeId, qpath_span: Span },
        .           }
        .           
        .           impl CrateLint {
        .               fn node_id(&self) -> Option<NodeId> {
   33,741 ( 0.00%)          match *self {
        .                       CrateLint::No => None,
        .                       CrateLint::SimplePath(id)
        .                       | CrateLint::UsePath { root_id: id, .. }
        .                       | CrateLint::QPathTrait { qpath_id: id, .. } => Some(id),
        .                   }
        .               }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        .               late::lifetimes::provide(providers);
        1 ( 0.00%)  }

1,904,150 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_resolve/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
2,797,735 ( 0.05%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
   10,879 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      496 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
        6 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   34,145 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
3,560,898 ( 0.06%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
1,129,642 ( 0.02%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
1,664,914 ( 0.03%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        2 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
   18,774 ( 0.00%)          let _ = &self[a];
   30,796 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    3,307 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
      312 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   14,904 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    2,261 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      202 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
    3,953 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
   15,761 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
5,936,357 ( 0.10%)          while left < right {
7,120,202 ( 0.12%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  816,369 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
1,864,636 ( 0.03%)              if cmp == Less {
3,266,889 ( 0.05%)                  left = mid + 1;
1,089,553 ( 0.02%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
5,548,075 ( 0.09%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
  277,316 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
    8,310 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    8,310 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    8,310 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------

4,077,813 ( 0.07%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs
--------------------------------------------------------------------------------
Ir                 

-- line 83 ----------------------------------------
        .                   if $self.is_proc_macro {
        .                       return Lazy::empty();
        .                   }
        .               };
        .           }
        .           
        .           macro_rules! encoder_methods {
        .               ($($name:ident($ty:ty);)*) => {
    9,956 ( 0.00%)          $(fn $name(&mut self, value: $ty) -> Result<(), Self::Error> {
        .                       self.opaque.$name(value)
   12,180 ( 0.00%)          })*
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {
        .               type Error = <opaque::Encoder as Encoder>::Error;
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> Result<(), Self::Error> {
-- line 101 ----------------------------------------
-- line 125 ----------------------------------------
        .                   emit_raw_bytes(&[u8]);
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<T>
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    1,745 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<[T]>
        .           {
       10 ( 0.00%)      fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      244 ( 0.00%)          if self.meta == 0 {
        .                       return Ok(());
        .                   }
      618 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, I: Idx, T: Encodable<EncodeContext<'a, 'tcx>>> Encodable<EncodeContext<'a, 'tcx>>
        .               for Lazy<Table<I, T>>
        .           where
        .               Option<T>: FixedSizeEncoding,
        .           {
        .               fn encode(&self, e: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   e.emit_usize(self.meta)?;
      144 ( 0.00%)          e.emit_lazy_distance(*self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for CrateNum {
    3,647 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
    8,966 ( 0.00%)          if *self != LOCAL_CRATE && s.is_proc_macro {
        .                       panic!("Attempted to encode non-local CrateNum {:?} for proc-macro crate", self);
        .                   }
        .                   s.emit_u32(self.as_u32())
    3,126 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for DefIndex {
    2,125 ( 0.00%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
    2,550 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnIndex {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
        .                   s.emit_u32(self.as_u32())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for SyntaxContext {
  697,585 ( 0.01%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  418,551 ( 0.01%)          rustc_span::hygiene::raw_encode_syntax_context(*self, &s.hygiene_ctxt, s)
  837,102 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for ExpnId {
        .               fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
      416 ( 0.00%)          if self.krate == LOCAL_CRATE {
        .                       // We will only write details for local expansions.  Non-local expansions will fetch
        .                       // data from the corresponding crate's metadata.
        .                       // FIXME(#43047) FIXME(#74731) We may eventually want to avoid relying on external
        .                       // metadata from proc-macro crates.
    1,558 ( 0.00%)              s.hygiene_ctxt.schedule_expn_data_for_encoding(*self);
        .                   }
    1,079 ( 0.00%)          self.krate.encode(s)?;
        .                   self.local_id.encode(s)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {
1,114,768 ( 0.02%)      fn encode(&self, s: &mut EncodeContext<'a, 'tcx>) -> opaque::EncodeResult {
  836,076 ( 0.01%)          let span = self.data();
        .           
        .                   // Don't serialize any `SyntaxContext`s from a proc-macro crate,
        .                   // since we don't load proc-macro dependencies during serialization.
        .                   // This means that any hygiene information from macros used *within*
        .                   // a proc-macro crate (e.g. invoking a macro that expands to a proc-macro
        .                   // definition) will be lost.
        .                   //
        .                   // This can show up in two ways:
-- line 211 ----------------------------------------
-- line 228 ----------------------------------------
        .                   // None of these user-visible effects should result in any
        .                   // cross-crate inconsistencies (getting one behavior in the same
        .                   // crate, and a different behavior in another crate) due to the
        .                   // limited surface that proc-macros can expose.
        .                   //
        .                   // IMPORTANT: If this is ever changed, be sure to update
        .                   // `rustc_span::hygiene::raw_encode_expn_id` to handle
        .                   // encoding `ExpnData` for proc-macro crates.
  278,692 ( 0.00%)          if s.is_proc_macro {
        .                       SyntaxContext::root().encode(s)?;
        .                   } else {
  139,346 ( 0.00%)              span.ctxt.encode(s)?;
        .                   }
        .           
  139,346 ( 0.00%)          if self.is_dummy() {
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   // The Span infrastructure should make sure that this invariant holds:
        .                   debug_assert!(span.lo <= span.hi);
        .           
  696,057 ( 0.01%)          if !s.source_file_cache.0.contains(span.lo) {
      262 ( 0.00%)              let source_map = s.tcx.sess.source_map();
      524 ( 0.00%)              let source_file_index = source_map.lookup_source_file_idx(span.lo);
      262 ( 0.00%)              s.source_file_cache =
      524 ( 0.00%)                  (source_map.files()[source_file_index].clone(), source_file_index);
        .                   }
        .           
  418,235 ( 0.01%)          if !s.source_file_cache.0.contains(span.hi) {
        .                       // Unfortunately, macro expansion still sometimes generates Spans
        .                       // that malformed in this way.
        .                       return TAG_PARTIAL_SPAN.encode(s);
        .                   }
        .           
        .                   let source_files = s.required_source_files.as_mut().expect("Already encoded SourceMap!");
        .                   // Record the fact that we need to encode the data for this `SourceFile`
  139,237 ( 0.00%)          source_files.insert(s.source_file_cache.1);
        .           
        .                   // There are two possible cases here:
        .                   // 1. This span comes from a 'foreign' crate - e.g. some crate upstream of the
        .                   // crate we are writing metadata for. When the metadata for *this* crate gets
        .                   // deserialized, the deserializer will need to know which crate it originally came
        .                   // from. We use `TAG_VALID_SPAN_FOREIGN` to indicate that a `CrateNum` should
        .                   // be deserialized after the rest of the span data, which tells the deserializer
        .                   // which crate contains the source map information.
-- line 272 ----------------------------------------
-- line 274 ----------------------------------------
        .                   // write `TAG_VALID_SPAN_LOCAL` to let the deserializer know that it should use
        .                   // our own source map information.
        .                   //
        .                   // If we're a proc-macro crate, we always treat this as a local `Span`.
        .                   // In `encode_source_map`, we serialize foreign `SourceFile`s into our metadata
        .                   // if we're a proc-macro crate.
        .                   // This allows us to avoid loading the dependencies of proc-macro crates: all of
        .                   // the information we need to decode `Span`s is stored in the proc-macro crate.
  835,422 ( 0.01%)          let (tag, lo, hi) = if s.source_file_cache.0.is_imported() && !s.is_proc_macro {
        .                       // To simplify deserialization, we 'rebase' this span onto the crate it originally came from
        .                       // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values
        .                       // are relative to the source map information for the 'foreign' crate whose CrateNum
        .                       // we write into the metadata. This allows `imported_source_files` to binary
        .                       // search through the 'foreign' crate's source map information, using the
        .                       // deserialized 'lo' and 'hi' values directly.
        .                       //
        .                       // All of this logic ensures that the final result of deserialization is a 'normal'
        .                       // Span that can be used without any additional trouble.
        .                       let external_start_pos = {
        .                           // Introduce a new scope so that we drop the 'lock()' temporary
      120 ( 0.00%)                  match &*s.source_file_cache.0.external_src.lock() {
       40 ( 0.00%)                      ExternalSource::Foreign { original_start_pos, .. } => *original_start_pos,
        .                               src => panic!("Unexpected external source {:?}", src),
        .                           }
        .                       };
      120 ( 0.00%)              let lo = (span.lo - s.source_file_cache.0.start_pos) + external_start_pos;
       40 ( 0.00%)              let hi = (span.hi - s.source_file_cache.0.start_pos) + external_start_pos;
        .           
        .                       (TAG_VALID_SPAN_FOREIGN, lo, hi)
        .                   } else {
  417,591 ( 0.01%)              (TAG_VALID_SPAN_LOCAL, span.lo, span.hi)
        .                   };
        .           
        .                   tag.encode(s)?;
        .                   lo.encode(s)?;
        .           
        .                   // Encode length which is usually less than span.hi and profits more
        .                   // from the variable-length integer encoding that we use.
        .                   let len = hi - lo;
        .                   len.encode(s)?;
        .           
  278,474 ( 0.00%)          if tag == TAG_VALID_SPAN_FOREIGN {
        .                       // This needs to be two lines to avoid holding the `s.source_file_cache`
        .                       // while calling `cnum.encode(s)`
      160 ( 0.00%)              let cnum = s.source_file_cache.0.cnum;
      120 ( 0.00%)              cnum.encode(s)?;
        .                   }
        .           
        .                   Ok(())
1,114,768 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> TyEncoder<'tcx> for EncodeContext<'a, 'tcx> {
        .               const CLEAR_CROSS_CRATE: bool = true;
        .           
        .               fn position(&self) -> usize {
        .                   self.opaque.position()
        .               }
-- line 331 ----------------------------------------
-- line 361 ----------------------------------------
        .           }
        .           
        .           /// Helper trait to allow overloading `EncodeContext::lazy` for iterators.
        .           trait EncodeContentsForLazy<'a, 'tcx, T: ?Sized + LazyMeta> {
        .               fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> T::Meta;
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for &T {
    3,784 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    1,509 ( 0.00%)          self.encode(ecx).unwrap()
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, T> for T {
   11,328 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) {
    3,799 ( 0.00%)          self.encode(ecx).unwrap()
    8,026 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx, I, T: Encodable<EncodeContext<'a, 'tcx>>> EncodeContentsForLazy<'a, 'tcx, [T]> for I
        .           where
        .               I: IntoIterator,
        .               I::Item: EncodeContentsForLazy<'a, 'tcx, T>,
        .           {
      602 ( 0.00%)      fn encode_contents_for_lazy(self, ecx: &mut EncodeContext<'a, 'tcx>) -> usize {
    6,024 ( 0.00%)          self.into_iter().map(|value| value.encode_contents_for_lazy(ecx)).count()
      774 ( 0.00%)      }
        .           }
        .           
        .           // Shorthand for `$self.$tables.$table.set($def_id.index, $self.lazy($value))`, which would
        .           // normally need extra variables to avoid errors about multiple mutable borrows.
        .           macro_rules! record {
        .               ($self:ident.$tables:ident.$table:ident[$def_id:expr] <- $value:expr) => {{
        .                   {
        .                       let value = $value;
        .                       let lazy = $self.lazy(value);
        .                       $self.$tables.$table.set($def_id.index, lazy);
        .                   }
        .               }};
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
    2,060 ( 0.00%)      fn emit_lazy_distance<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   lazy: Lazy<T>,
        .               ) -> Result<(), <Self as Encoder>::Error> {
        .                   let pos = lazy.position.get();
    1,340 ( 0.00%)          let distance = match self.lazy_state {
        .                       LazyState::NoNode => bug!("emit_lazy_distance: outside of a metadata node"),
      360 ( 0.00%)              LazyState::NodeStart(start) => {
        .                           let start = start.get();
      720 ( 0.00%)                  assert!(pos <= start);
        .                           start - pos
        .                       }
       52 ( 0.00%)              LazyState::Previous(last_pos) => {
       52 ( 0.00%)                  assert!(
        .                               last_pos <= lazy.position,
        .                               "make sure that the calls to `lazy*` \
        .                                are in the same order as the metadata fields",
        .                           );
      156 ( 0.00%)                  lazy.position.get() - last_pos.get()
        .                       }
        .                   };
      824 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(pos).unwrap());
        .                   self.emit_usize(distance)
    2,060 ( 0.00%)      }
        .           
    3,932 ( 0.00%)      fn lazy<T: ?Sized + LazyMeta>(
        .                   &mut self,
        .                   value: impl EncodeContentsForLazy<'a, 'tcx, T>,
        .               ) -> Lazy<T> {
        .                   let pos = NonZeroUsize::new(self.position()).unwrap();
        .           
    4,891 ( 0.00%)          assert_eq!(self.lazy_state, LazyState::NoNode);
   14,139 ( 0.00%)          self.lazy_state = LazyState::NodeStart(pos);
   10,459 ( 0.00%)          let meta = value.encode_contents_for_lazy(self);
    5,994 ( 0.00%)          self.lazy_state = LazyState::NoNode;
        .           
   10,261 ( 0.00%)          assert!(pos.get() <= self.position());
        .           
        .                   Lazy::from_position_and_meta(pos, meta)
    5,723 ( 0.00%)      }
        .           
        .               fn encode_info_for_items(&mut self) {
        9 ( 0.00%)          self.encode_info_for_mod(CRATE_DEF_ID, self.tcx.hir().root_module());
        .           
        .                   // Proc-macro crates only export proc-macro items, which are looked
        .                   // up using `proc_macro_data`
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        6 ( 0.00%)          self.tcx.hir().visit_all_item_likes(&mut self.as_deep_visitor());
        .               }
        .           
        .               fn encode_def_path_table(&mut self) {
        4 ( 0.00%)          let table = self.tcx.resolutions(()).definitions.def_path_table();
        2 ( 0.00%)          if self.is_proc_macro {
        .                       for def_index in std::iter::once(CRATE_DEF_INDEX)
        .                           .chain(self.tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index))
        .                       {
        .                           let def_key = self.lazy(table.def_key(def_index));
        .                           let def_path_hash = self.lazy(table.def_path_hash(def_index));
        .                           self.tables.def_keys.set(def_index, def_key);
        .                           self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   } else {
        5 ( 0.00%)              for (def_index, def_key, def_path_hash) in table.enumerated_keys_and_path_hashes() {
        .                           let def_key = self.lazy(def_key);
        .                           let def_path_hash = self.lazy(def_path_hash);
    1,496 ( 0.00%)                  self.tables.def_keys.set(def_index, def_key);
    1,496 ( 0.00%)                  self.tables.def_path_hashes.set(def_index, def_path_hash);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_def_path_hash_map(&mut self) -> Lazy<DefPathHashMapRef<'tcx>> {
        .                   self.lazy(DefPathHashMapRef::BorrowedFromTcx(
        2 ( 0.00%)              self.tcx.resolutions(()).definitions.def_path_hash_to_def_index_map(),
        .                   ))
        .               }
        .           
        .               fn encode_source_map(&mut self) -> Lazy<[rustc_span::SourceFile]> {
        2 ( 0.00%)          let source_map = self.tcx.sess.source_map();
        3 ( 0.00%)          let all_source_files = source_map.files();
        .           
        .                   // By replacing the `Option` with `None`, we ensure that we can't
        .                   // accidentally serialize any more `Span`s after the source map encoding
        .                   // is done.
        .                   let required_source_files = self.required_source_files.take().unwrap();
        .           
        .                   let adapted = all_source_files
        .                       .iter()
        .                       .enumerate()
        .                       .filter(|(idx, source_file)| {
        .                           // Only serialize `SourceFile`s that were used
        .                           // during the encoding of a `Span`
    1,055 ( 0.00%)                  required_source_files.contains(*idx) &&
        .                           // Don't serialize imported `SourceFile`s, unless
        .                           // we're in a proc-macro crate.
       51 ( 0.00%)                  (!source_file.is_imported() || self.is_proc_macro)
        .                       })
        .                       .map(|(_, source_file)| {
        6 ( 0.00%)                  let mut adapted = match source_file.name {
        .                               FileName::Real(ref realname) => {
        4 ( 0.00%)                          let mut adapted = (**source_file).clone();
       32 ( 0.00%)                          adapted.name = FileName::Real(match realname {
        .                                       RealFileName::LocalPath(path_to_file) => {
        .                                           // Prepend path of working directory onto potentially
        .                                           // relative paths, because they could become relative
        .                                           // to a wrong directory.
        .                                           // We include `working_dir` as part of the crate hash,
        .                                           // so it's okay for us to use it as part of the encoded
        .                                           // metadata.
        4 ( 0.00%)                                  let working_dir = &self.tcx.sess.opts.working_dir;
        4 ( 0.00%)                                  match working_dir {
        .                                               RealFileName::LocalPath(absolute) => {
        .                                                   // Although neither working_dir or the file name were subject
        .                                                   // to path remapping, the concatenation between the two may
        .                                                   // be. Hence we need to do a remapping here.
        .                                                   let joined = Path::new(absolute).join(path_to_file);
       14 ( 0.00%)                                          let (joined, remapped) =
       22 ( 0.00%)                                              source_map.path_mapping().map_prefix(joined);
        4 ( 0.00%)                                          if remapped {
        .                                                       RealFileName::Remapped {
        .                                                           local_path: None,
        .                                                           virtual_name: joined,
        .                                                       }
        .                                                   } else {
        .                                                       RealFileName::LocalPath(joined)
        .                                                   }
        .                                               }
-- line 532 ----------------------------------------
-- line 544 ----------------------------------------
        .                                       RealFileName::Remapped { local_path: _, virtual_name } => {
        .                                           RealFileName::Remapped {
        .                                               // We do not want any local path to be exported into metadata
        .                                               local_path: None,
        .                                               virtual_name: virtual_name.clone(),
        .                                           }
        .                                       }
        .                                   });
        4 ( 0.00%)                          adapted.name_hash = {
        .                                       let mut hasher: StableHasher = StableHasher::new();
        2 ( 0.00%)                              adapted.name.hash(&mut hasher);
        .                                       hasher.finish::<u128>()
        .                                   };
        2 ( 0.00%)                          Lrc::new(adapted)
        .                               }
        .           
        .                               // expanded code, not from a file
        .                               _ => source_file.clone(),
        .                           };
        .           
        .                           // We're serializing this `SourceFile` into our crate metadata,
        .                           // so mark it as coming from this crate.
        .                           // This also ensures that we don't try to deserialize the
        .                           // `CrateNum` for a proc-macro dependency - since proc macro
        .                           // dependencies aren't loaded when we deserialize a proc-macro,
        .                           // trying to remap the `CrateNum` would fail.
        4 ( 0.00%)                  if self.is_proc_macro {
        .                               Lrc::make_mut(&mut adapted).cnum = LOCAL_CRATE;
        .                           }
        .                           adapted
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   self.lazy(adapted.iter().map(|rc| &**rc))
        .               }
        .           
        8 ( 0.00%)      fn encode_crate_root(&mut self) -> Lazy<CrateRoot<'tcx>> {
        .                   let mut i = self.position();
        .           
        .                   // Encode the crate deps
        .                   let crate_deps = self.encode_crate_deps();
        .                   let dylib_dependency_formats = self.encode_dylib_dependency_formats();
        5 ( 0.00%)          let dep_bytes = self.position() - i;
        .           
        .                   // Encode the lib features.
        .                   i = self.position();
        .                   let lib_features = self.encode_lib_features();
        7 ( 0.00%)          let lib_feature_bytes = self.position() - i;
        .           
        .                   // Encode the language items.
        .                   i = self.position();
        .                   let lang_items = self.encode_lang_items();
        .                   let lang_items_missing = self.encode_lang_items_missing();
        5 ( 0.00%)          let lang_item_bytes = self.position() - i;
        .           
        .                   // Encode the diagnostic items.
        .                   i = self.position();
        .                   let diagnostic_items = self.encode_diagnostic_items();
        5 ( 0.00%)          let diagnostic_item_bytes = self.position() - i;
        .           
        .                   // Encode the native libraries used
        .                   i = self.position();
        .                   let native_libraries = self.encode_native_libraries();
        4 ( 0.00%)          let native_lib_bytes = self.position() - i;
        .           
        .                   let foreign_modules = self.encode_foreign_modules();
        .           
        .                   // Encode DefPathTable
        .                   i = self.position();
        .                   self.encode_def_path_table();
        5 ( 0.00%)          let def_path_table_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of traits, for rustdoc and diagnostics.
        .                   i = self.position();
        .                   let traits = self.encode_traits();
        5 ( 0.00%)          let traits_bytes = self.position() - i;
        .           
        .                   // Encode the def IDs of impls, for coherence checking.
        .                   i = self.position();
        .                   let impls = self.encode_impls();
        5 ( 0.00%)          let impls_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let tcx = self.tcx;
        .           
        .                   // Encode MIR.
        .                   i = self.position();
        .                   self.encode_mir();
        5 ( 0.00%)          let mir_bytes = self.position() - i;
        .           
        .                   // Encode the items.
        .                   i = self.position();
        .                   self.encode_def_ids();
        .                   self.encode_info_for_items();
        4 ( 0.00%)          let item_bytes = self.position() - i;
        .           
        .                   // Encode the allocation index
        .                   let interpret_alloc_index = {
        .                       let mut interpret_alloc_index = Vec::new();
        .                       let mut n = 0;
        .                       trace!("beginning to encode alloc ids");
        .                       loop {
        .                           let new_n = self.interpret_allocs.len();
        .                           // if we have found new ids, serialize those, too
        2 ( 0.00%)                  if n == new_n {
        .                               // otherwise, abort
        .                               break;
        .                           }
        .                           trace!("encoding {} further alloc ids", new_n - n);
        .                           for idx in n..new_n {
        .                               let id = self.interpret_allocs[idx];
        .                               let pos = self.position() as u32;
        .                               interpret_alloc_index.push(pos);
        .                               interpret::specialized_encode_alloc_id(self, tcx, id).unwrap();
        .                           }
        .                           n = new_n;
        .                       }
        6 ( 0.00%)              self.lazy(interpret_alloc_index)
        .                   };
        .           
        .                   // Encode the proc macro data. This affects 'tables',
        .                   // so we need to do this before we encode the tables
        .                   i = self.position();
        .                   let proc_macro_data = self.encode_proc_macros();
        4 ( 0.00%)          let proc_macro_data_bytes = self.position() - i;
        .           
        .                   i = self.position();
        4 ( 0.00%)          let tables = self.tables.encode(&mut self.opaque);
        4 ( 0.00%)          let tables_bytes = self.position() - i;
        .           
        .                   // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode
        .                   // this as late as possible to give the prefetching as much time as possible to complete.
        .                   i = self.position();
        .                   let exported_symbols = tcx.exported_symbols(LOCAL_CRATE);
        .                   let exported_symbols = self.encode_exported_symbols(&exported_symbols);
        4 ( 0.00%)          let exported_symbols_bytes = self.position() - i;
        .           
        .                   // Encode the hygiene data,
        .                   // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process
        .                   // of encoding other items (e.g. `optimized_mir`) may cause us to load
        .                   // data from the incremental cache. If this causes us to deserialize a `Span`,
        .                   // then we may load additional `SyntaxContext`s into the global `HygieneData`.
        .                   // Therefore, we need to encode the hygiene data last to ensure that we encode
        .                   // any `SyntaxContext`s that might be used.
        .                   i = self.position();
        .                   let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();
        5 ( 0.00%)          let hygiene_bytes = self.position() - i;
        .           
        .                   i = self.position();
        .                   let def_path_hash_map = self.encode_def_path_hash_map();
        1 ( 0.00%)          let def_path_hash_map_bytes = self.position() - i;
        .           
        .                   // Encode source_map. This needs to be done last,
        .                   // since encoding `Span`s tells us which `SourceFiles` we actually
        .                   // need to encode.
        .                   i = self.position();
        .                   let source_map = self.encode_source_map();
        4 ( 0.00%)          let source_map_bytes = self.position() - i;
        .           
        3 ( 0.00%)          let attrs = tcx.hir().krate_attrs();
        7 ( 0.00%)          let has_default_lib_allocator = tcx.sess.contains_name(&attrs, sym::default_lib_allocator);
        .           
      118 ( 0.00%)          let root = self.lazy(CrateRoot {
        .                       name: tcx.crate_name(LOCAL_CRATE),
        3 ( 0.00%)              extra_filename: tcx.sess.opts.cg.extra_filename.clone(),
        1 ( 0.00%)              triple: tcx.sess.opts.target_triple.clone(),
        .                       hash: tcx.crate_hash(LOCAL_CRATE),
        .                       stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),
        3 ( 0.00%)              panic_strategy: tcx.sess.panic_strategy(),
        3 ( 0.00%)              panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,
        2 ( 0.00%)              edition: tcx.sess.edition(),
        .                       has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),
        .                       has_panic_handler: tcx.has_panic_handler(LOCAL_CRATE),
        .                       has_default_lib_allocator,
        .                       proc_macro_data,
        6 ( 0.00%)              compiler_builtins: tcx.sess.contains_name(&attrs, sym::compiler_builtins),
        6 ( 0.00%)              needs_allocator: tcx.sess.contains_name(&attrs, sym::needs_allocator),
        6 ( 0.00%)              needs_panic_runtime: tcx.sess.contains_name(&attrs, sym::needs_panic_runtime),
        6 ( 0.00%)              no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),
        5 ( 0.00%)              panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),
        5 ( 0.00%)              profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),
        2 ( 0.00%)              symbol_mangling_version: tcx.sess.opts.get_symbol_mangling_version(),
        .           
        .                       crate_deps,
        .                       dylib_dependency_formats,
        .                       lib_features,
        .                       lang_items,
        .                       diagnostic_items,
        .                       lang_items_missing,
        .                       native_libraries,
        .                       foreign_modules,
        .                       source_map,
        .                       traits,
        .                       impls,
        .                       exported_symbols,
        .                       interpret_alloc_index,
        2 ( 0.00%)              tables,
        .                       syntax_contexts,
        .                       expn_data,
        .                       expn_hashes,
        .                       def_path_hash_map,
        .                   });
        .           
        1 ( 0.00%)          let total_bytes = self.position();
        .           
        4 ( 0.00%)          if tcx.sess.meta_stats() {
        .                       let mut zero_bytes = 0;
        .                       for e in self.opaque.data.iter() {
        .                           if *e == 0 {
        .                               zero_bytes += 1;
        .                           }
        .                       }
        .           
        .                       eprintln!("metadata stats:");
-- line 756 ----------------------------------------
-- line 770 ----------------------------------------
        .                       eprintln!("            item bytes: {}", item_bytes);
        .                       eprintln!("           table bytes: {}", tables_bytes);
        .                       eprintln!("         hygiene bytes: {}", hygiene_bytes);
        .                       eprintln!("            zero bytes: {}", zero_bytes);
        .                       eprintln!("           total bytes: {}", total_bytes);
        .                   }
        .           
        .                   root
        9 ( 0.00%)      }
        .           }
        .           
        .           fn should_encode_visibility(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Mod
        .                   | DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
-- line 786 ----------------------------------------
-- line 853 ----------------------------------------
        .           /// Whether we should encode MIR.
        .           ///
        .           /// Computing, optimizing and encoding the MIR is a relatively expensive operation.
        .           /// We want to avoid this work when not required. Therefore:
        .           /// - we only compute `mir_for_ctfe` on items with const-eval semantics;
        .           /// - we skip `optimized_mir` for check runs.
        .           ///
        .           /// Return a pair, resp. for CTFE and for LLVM.
    1,449 ( 0.00%)  fn should_encode_mir(tcx: TyCtxt<'_>, def_id: LocalDefId) -> (bool, bool) {
      805 ( 0.00%)      match tcx.def_kind(def_id) {
        .                   // Constructors
        .                   DefKind::Ctor(_, _) => {
       18 ( 0.00%)              let mir_opt_base = tcx.sess.opts.output_types.should_codegen()
        .                           || tcx.sess.opts.debugging_opts.always_encode_mir;
        .                       (true, mir_opt_base)
        .                   }
        .                   // Constants
        .                   DefKind::AnonConst
        .                   | DefKind::InlineConst
        .                   | DefKind::AssocConst
        .                   | DefKind::Static
        .                   | DefKind::Const => (true, false),
        .                   // Full-fledged functions
        .                   DefKind::AssocFn | DefKind::Fn => {
        .                       let generics = tcx.generics_of(def_id);
      538 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
      170 ( 0.00%)                  || tcx.codegen_fn_attrs(def_id).requests_inline())
      162 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
        .                       // The function has a `const` modifier or is annotated with `default_method_body_is_const`.
       92 ( 0.00%)              let is_const_fn = tcx.is_const_fn_raw(def_id.to_def_id())
      445 ( 0.00%)                  || tcx.has_attr(def_id.to_def_id(), sym::default_method_body_is_const);
        .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
      184 ( 0.00%)              (is_const_fn, needs_inline || always_encode_mir)
        .                   }
        .                   // Closures can't be const fn.
        .                   DefKind::Closure => {
        .                       let generics = tcx.generics_of(def_id);
       76 ( 0.00%)              let needs_inline = (generics.requires_monomorphization(tcx)
        .                           || tcx.codegen_fn_attrs(def_id).requests_inline())
       38 ( 0.00%)                  && tcx.sess.opts.output_types.should_codegen();
        .                       let always_encode_mir = tcx.sess.opts.debugging_opts.always_encode_mir;
       38 ( 0.00%)              (false, needs_inline || always_encode_mir)
        .                   }
        .                   // Generators require optimized MIR to compute layout.
        .                   DefKind::Generator => (false, true),
        .                   // The others don't have MIR.
        .                   _ => (false, false),
        .               }
    1,449 ( 0.00%)  }
        .           
        .           fn should_encode_variances(def_kind: DefKind) -> bool {
        .               match def_kind {
        .                   DefKind::Struct
        .                   | DefKind::Union
        .                   | DefKind::Enum
        .                   | DefKind::Variant
        .                   | DefKind::Fn
-- line 909 ----------------------------------------
-- line 969 ----------------------------------------
        .                   | DefKind::LifetimeParam
        .                   | DefKind::GlobalAsm
        .                   | DefKind::ExternCrate => false,
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
        .               fn encode_def_ids(&mut self) {
        2 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        1 ( 0.00%)          let tcx = self.tcx;
        3 ( 0.00%)          let hir = tcx.hir();
       45 ( 0.00%)          for local_id in hir.iter_local_def_id() {
        .                       let def_id = local_id.to_def_id();
        .                       let def_kind = tcx.opt_def_kind(local_id);
    2,244 ( 0.00%)              let def_kind = if let Some(def_kind) = def_kind { def_kind } else { continue };
    5,728 ( 0.00%)              record!(self.tables.def_kind[def_id] <- match def_kind {
        .                           // Replace Ctor by the enclosing object to avoid leaking details in children crates.
        .                           DefKind::Ctor(CtorOf::Struct, _) => DefKind::Struct,
        .                           DefKind::Ctor(CtorOf::Variant, _) => DefKind::Variant,
        .                           def_kind => def_kind,
        .                       });
    1,074 ( 0.00%)              record!(self.tables.span[def_id] <- tcx.def_span(def_id));
    4,296 ( 0.00%)              record!(self.tables.attributes[def_id] <- tcx.get_attrs(def_id));
    2,864 ( 0.00%)              record!(self.tables.expn_that_defined[def_id] <- self.tcx.expn_that_defined(def_id));
        .                       if should_encode_visibility(def_kind) {
    1,680 ( 0.00%)                  record!(self.tables.visibility[def_id] <- self.tcx.visibility(def_id));
        .                       }
        .                       if should_encode_stability(def_kind) {
        .                           self.encode_stability(def_id);
        .                           self.encode_const_stability(def_id);
    1,674 ( 0.00%)                  self.encode_deprecation(def_id);
        .                       }
        .                       if should_encode_variances(def_kind) {
      306 ( 0.00%)                  let v = self.tcx.variances_of(def_id);
    1,071 ( 0.00%)                  record!(self.tables.variances[def_id] <- v);
        .                       }
        .                       if should_encode_generics(def_kind) {
        .                           let g = tcx.generics_of(def_id);
    1,316 ( 0.00%)                  record!(self.tables.generics[def_id] <- g);
    3,948 ( 0.00%)                  record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));
      329 ( 0.00%)                  let inferred_outlives = self.tcx.inferred_outlives_of(def_id);
      363 ( 0.00%)                  if !inferred_outlives.is_empty() {
        .                               record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);
        .                           }
        .                       }
    2,506 ( 0.00%)              if let DefKind::Trait | DefKind::TraitAlias = def_kind {
        .                           record!(self.tables.super_predicates[def_id] <- self.tcx.super_predicates_of(def_id));
        .                       }
        .                   }
        .                   let inherent_impls = tcx.crate_inherent_impls(());
        .                   for (def_id, implementations) in inherent_impls.inherent_impls.iter() {
        7 ( 0.00%)              if implementations.is_empty() {
        .                           continue;
        .                       }
       63 ( 0.00%)              record!(self.tables.inherent_impls[def_id.to_def_id()] <- implementations.iter().map(|&def_id| {
        7 ( 0.00%)                  assert!(def_id.is_local());
        .                           def_id.index
        .                       }));
        .                   }
        .               }
        .           
    2,240 ( 0.00%)      fn encode_item_type(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_item_type({:?})", def_id);
    1,920 ( 0.00%)          record!(self.tables.ty[def_id] <- self.tcx.type_of(def_id));
    2,560 ( 0.00%)      }
        .           
        .               fn encode_enum_variant_info(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
      100 ( 0.00%)          let def_id = variant.def_id;
        .                   debug!("EncodeContext::encode_enum_variant_info({:?})", def_id);
        .           
      150 ( 0.00%)          let data = VariantData {
       25 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
       25 ( 0.00%)              ctor: variant.ctor_def_id.map(|did| did.index),
       25 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
        .                   record!(self.tables.children[def_id] <- variant.fields.iter().map(|f| {
        2 ( 0.00%)              assert!(f.did.is_local());
        .                       f.did.index
        .                   }));
       25 ( 0.00%)          self.encode_ident_span(def_id, variant.ident(tcx));
       25 ( 0.00%)          self.encode_item_type(def_id);
       25 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       // FIXME(eddyb) encode signature only in `encode_enum_variant_ctor`.
        .                       if let Some(ctor_def_id) = variant.ctor_def_id {
        .                           record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {
        .                   let tcx = self.tcx;
        .                   let variant = &def.variants[index];
      115 ( 0.00%)          let def_id = variant.ctor_def_id.unwrap();
        .                   debug!("EncodeContext::encode_enum_variant_ctor({:?})", def_id);
        .           
        .                   // FIXME(eddyb) encode only the `CtorKind` for constructors.
        .                   let data = VariantData {
       23 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
       23 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
       92 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Variant(self.lazy(data)));
       69 ( 0.00%)          self.encode_item_type(def_id);
       23 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
       20 ( 0.00%)      fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {
        4 ( 0.00%)          let tcx = self.tcx;
        .                   let def_id = local_def_id.to_def_id();
        .                   debug!("EncodeContext::encode_info_for_mod({:?})", def_id);
        .           
        .                   // If we are encoding a proc-macro crates, `encode_info_for_mod` will
        .                   // only ever get called for the crate root. We still want to encode
        .                   // the crate root for consistency with other crates (some of the resolver
        .                   // code uses it). However, we skip encoding anything relating to child
        .                   // items - we encode information about proc-macros later on.
        6 ( 0.00%)          let reexports = if !self.is_proc_macro {
        4 ( 0.00%)              match tcx.module_reexports(local_def_id) {
        .                           Some(exports) => self.lazy(exports),
        .                           _ => Lazy::empty(),
        .                       }
        .                   } else {
        .                       Lazy::empty()
        .                   };
        .           
        8 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Mod(reexports));
        4 ( 0.00%)          if self.is_proc_macro {
        .                       // Encode this here because we don't do it in encode_def_ids.
        .                       record!(self.tables.expn_that_defined[def_id] <- tcx.expn_that_defined(local_def_id));
        .                   } else {
        .                       let direct_children = md.item_ids.iter().map(|item_id| item_id.def_id.local_def_index);
        .                       // Foreign items are planted into their parent modules from name resolution point of view.
        4 ( 0.00%)              let tcx = self.tcx;
        .                       let foreign_item_children = md
        .                           .item_ids
        .                           .iter()
      570 ( 0.00%)                  .filter_map(|item_id| match tcx.hir().item(*item_id).kind {
        .                               hir::ItemKind::ForeignMod { items, .. } => {
        .                                   Some(items.iter().map(|fi_ref| fi_ref.id.def_id.local_def_index))
        .                               }
        .                               _ => None,
        .                           })
        .                           .flatten();
        .           
       14 ( 0.00%)              record!(self.tables.children[def_id] <- direct_children.chain(foreign_item_children));
        .                   }
       16 ( 0.00%)      }
        .           
        .               fn encode_field(
        .                   &mut self,
        .                   adt_def: &ty::AdtDef,
        .                   variant_index: VariantIdx,
        .                   field_index: usize,
        .               ) {
        .                   let variant = &adt_def.variants[variant_index];
        .                   let field = &variant.fields[field_index];
        .           
        .                   let def_id = field.did;
        .                   debug!("EncodeContext::encode_field({:?})", def_id);
        .           
        .                   record!(self.tables.kind[def_id] <- EntryKind::Field);
       34 ( 0.00%)          self.encode_ident_span(def_id, field.ident(self.tcx));
       51 ( 0.00%)          self.encode_item_type(def_id);
        .               }
        .           
        .               fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {
        .                   debug!("EncodeContext::encode_struct_ctor({:?})", def_id);
        3 ( 0.00%)          let tcx = self.tcx;
        9 ( 0.00%)          let variant = adt_def.non_enum_variant();
        .           
        .                   let data = VariantData {
        3 ( 0.00%)              ctor_kind: variant.ctor_kind,
        .                       discr: variant.discr,
        .                       ctor: Some(def_id.index),
        3 ( 0.00%)              is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                   };
        .           
       21 ( 0.00%)          record!(self.tables.kind[def_id] <- EntryKind::Struct(self.lazy(data), adt_def.repr));
       15 ( 0.00%)          self.encode_item_type(def_id);
        3 ( 0.00%)          if variant.ctor_kind == CtorKind::Fn {
        3 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
       42 ( 0.00%)      fn encode_explicit_item_bounds(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_explicit_item_bounds({:?})", def_id);
        7 ( 0.00%)          let bounds = self.tcx.explicit_item_bounds(def_id);
        7 ( 0.00%)          if !bounds.is_empty() {
       84 ( 0.00%)              record!(self.tables.explicit_item_bounds[def_id] <- bounds);
        .                   }
        .               }
        .           
        .               fn encode_info_for_trait_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_trait_item({:?})", def_id);
        .                   let tcx = self.tcx;
        .           
        .                   let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());
-- line 1176 ----------------------------------------
-- line 1234 ----------------------------------------
        .                   }
        .                   if trait_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
        .               fn encode_info_for_impl_item(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_info_for_impl_item({:?})", def_id);
      168 ( 0.00%)          let tcx = self.tcx;
        .           
      504 ( 0.00%)          let ast_item = self.tcx.hir().expect_impl_item(def_id.expect_local());
       84 ( 0.00%)          let impl_item = self.tcx.associated_item(def_id);
        .           
      336 ( 0.00%)          let container = match impl_item.defaultness {
        .                       hir::Defaultness::Default { has_value: true } => AssocContainer::ImplDefault,
        .                       hir::Defaultness::Final => AssocContainer::ImplFinal,
        .                       hir::Defaultness::Default { has_value: false } => {
        .                           span_bug!(ast_item.span, "impl items always have values (currently)")
        .                       }
        .                   };
        .           
      504 ( 0.00%)          match impl_item.kind {
        .                       ty::AssocKind::Const => {
        .                           if let hir::ImplItemKind::Const(_, body_id) = ast_item.kind {
        .                               let qualifs = self.tcx.at(ast_item.span).mir_const_qualif(def_id);
        .           
        .                               record!(self.tables.kind[def_id] <- EntryKind::AssocConst(
        .                                   container,
        .                                   qualifs,
        .                                   self.encode_rendered_const_for_body(body_id))
        .                               );
        .                           } else {
        .                               bug!()
        .                           }
        .                       }
        .                       ty::AssocKind::Fn => {
      150 ( 0.00%)                  let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {
        .                               FnData {
        .                                   asyncness: sig.header.asyncness,
        .                                   // Can be inside `impl const Trait`, so using sig.header.constness is not reliable
       75 ( 0.00%)                          constness: if self.tcx.is_const_fn_raw(def_id) {
        .                                       hir::Constness::Const
        .                                   } else {
        .                                       hir::Constness::NotConst
        .                                   },
        .                                   param_names: self.encode_fn_param_names_for_body(body),
        .                               }
        .                           } else {
        .                               bug!()
-- line 1282 ----------------------------------------
-- line 1286 ----------------------------------------
        .                               container,
        .                               has_self: impl_item.fn_has_self_parameter,
        .                           })));
        .                       }
        .                       ty::AssocKind::Type => {
        .                           record!(self.tables.kind[def_id] <- EntryKind::AssocType(container));
        .                       }
        .                   }
      252 ( 0.00%)          self.encode_ident_span(def_id, impl_item.ident(self.tcx));
      420 ( 0.00%)          self.encode_item_type(def_id);
      336 ( 0.00%)          if let Some(trait_item_def_id) = impl_item.trait_item_def_id {
        .                       record!(self.tables.trait_item_def_id[def_id] <- trait_item_def_id);
        .                   }
       84 ( 0.00%)          if impl_item.kind == ty::AssocKind::Fn {
        .                       record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
        .               }
        .           
      136 ( 0.00%)      fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {
      610 ( 0.00%)          self.lazy(self.tcx.hir().body_param_names(body_id))
      136 ( 0.00%)      }
        .           
        .               fn encode_fn_param_names(&mut self, param_names: &[Ident]) -> Lazy<[Ident]> {
        .                   self.lazy(param_names.iter())
        .               }
        .           
        .               fn encode_mir(&mut self) {
        3 ( 0.00%)          if self.is_proc_macro {
        .                       return;
        .                   }
        .           
        .                   let keys_and_jobs = self
        .                       .tcx
        .                       .mir_keys(())
        .                       .iter()
        .                       .filter_map(|&def_id| {
      805 ( 0.00%)                  let (encode_const, encode_opt) = should_encode_mir(self.tcx, def_id);
      861 ( 0.00%)                  if encode_const || encode_opt {
      252 ( 0.00%)                      Some((def_id, encode_const, encode_opt))
        .                           } else {
        .                               None
        .                           }
      322 ( 0.00%)              })
        .                       .collect::<Vec<_>>();
      635 ( 0.00%)          for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {
        .                       debug_assert!(encode_const || encode_opt);
        .           
        .                       debug!("EntryBuilder::encode_mir({:?})", def_id);
      126 ( 0.00%)              if encode_opt {
      304 ( 0.00%)                  record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));
        .                       }
      126 ( 0.00%)              if encode_const {
      212 ( 0.00%)                  record!(self.tables.mir_for_ctfe[def_id.to_def_id()] <- self.tcx.mir_for_ctfe(def_id));
        .           
        .                           // FIXME(generic_const_exprs): this feels wrong to have in `encode_mir`
       53 ( 0.00%)                  let abstract_const = self.tcx.thir_abstract_const(def_id);
      212 ( 0.00%)                  if let Ok(Some(abstract_const)) = abstract_const {
        .                               record!(self.tables.thir_abstract_consts[def_id.to_def_id()] <- abstract_const);
        .                           }
        .                       }
      504 ( 0.00%)              record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));
        .           
        .                       let instance =
        .                           ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));
      126 ( 0.00%)              let unused = self.tcx.unused_generic_params(instance);
      126 ( 0.00%)              if !unused.is_empty() {
        .                           record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
    2,232 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_stability(def_id) {
        .                           record!(self.tables.stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_const_stability(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_const_stability({:?})", def_id);
        .           
        .                   // The query lookup can take a measurable amount of time in crates with many items. Check if
        .                   // the stability attributes are even enabled before using their queries.
    1,953 ( 0.00%)          if self.feat.staged_api || self.tcx.sess.opts.debugging_opts.force_unstable_if_unmarked {
        .                       if let Some(stab) = self.tcx.lookup_const_stability(def_id) {
        .                           record!(self.tables.const_stability[def_id] <- stab)
        .                       }
        .                   }
        .               }
        .           
    1,674 ( 0.00%)      fn encode_deprecation(&mut self, def_id: DefId) {
        .                   debug!("EncodeContext::encode_deprecation({:?})", def_id);
    1,395 ( 0.00%)          if let Some(depr) = self.tcx.lookup_deprecation(def_id) {
        .                       record!(self.tables.deprecation[def_id] <- depr);
        .                   }
    1,395 ( 0.00%)      }
        .           
      282 ( 0.00%)      fn encode_rendered_const_for_body(&mut self, body_id: hir::BodyId) -> Lazy<RenderedConst> {
      141 ( 0.00%)          let hir = self.tcx.hir();
       94 ( 0.00%)          let body = hir.body(body_id);
      376 ( 0.00%)          let rendered = rustc_hir_pretty::to_string(&(&hir as &dyn intravisit::Map<'_>), |s| {
      141 ( 0.00%)              s.print_expr(&body.value)
        .                   });
       94 ( 0.00%)          let rendered_const = &RenderedConst(rendered);
        .                   self.lazy(rendered_const)
      329 ( 0.00%)      }
        .           
    1,053 ( 0.00%)      fn encode_info_for_item(&mut self, def_id: DefId, item: &'tcx hir::Item<'tcx>) {
        .                   let tcx = self.tcx;
        .           
        .                   debug!("EncodeContext::encode_info_for_item({:?})", def_id);
        .           
        .                   self.encode_ident_span(def_id, item.ident);
        .           
      702 ( 0.00%)          let entry_kind = match item.kind {
        .                       hir::ItemKind::Static(_, hir::Mutability::Mut, _) => EntryKind::MutStatic,
        .                       hir::ItemKind::Static(_, hir::Mutability::Not, _) => EntryKind::ImmStatic,
       42 ( 0.00%)              hir::ItemKind::Const(_, body_id) => {
       42 ( 0.00%)                  let qualifs = self.tcx.at(item.span).mir_const_qualif(def_id);
       98 ( 0.00%)                  EntryKind::Const(qualifs, self.encode_rendered_const_for_body(body_id))
        .                       }
       34 ( 0.00%)              hir::ItemKind::Fn(ref sig, .., body) => {
        .                           let data = FnData {
       17 ( 0.00%)                      asyncness: sig.header.asyncness,
       17 ( 0.00%)                      constness: sig.header.constness,
       34 ( 0.00%)                      param_names: self.encode_fn_param_names_for_body(body),
        .                           };
        .           
        .                           EntryKind::Fn(self.lazy(data))
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           EntryKind::MacroDef(self.lazy(macro_def.clone()))
        .                       }
        .                       hir::ItemKind::Mod(ref m) => {
       12 ( 0.00%)                  return self.encode_info_for_mod(item.def_id, m);
        .                       }
        .                       hir::ItemKind::ForeignMod { .. } => EntryKind::ForeignMod,
        .                       hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,
        .                       hir::ItemKind::TyAlias(..) => EntryKind::Type,
        .                       hir::ItemKind::OpaqueTy(..) => {
       35 ( 0.00%)                  self.encode_explicit_item_bounds(def_id);
        .                           EntryKind::OpaqueTy
        .                       }
       18 ( 0.00%)              hir::ItemKind::Enum(..) => EntryKind::Enum(self.tcx.adt_def(def_id).repr),
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
       14 ( 0.00%)                  let adt_def = self.tcx.adt_def(def_id);
       21 ( 0.00%)                  let variant = adt_def.non_enum_variant();
        .           
        .                           // Encode def_ids for each field and method
        .                           // for methods, write all the stuff get_trait_method
        .                           // needs to know
       28 ( 0.00%)                  let ctor = struct_def
        .                               .ctor_hir_id()
       12 ( 0.00%)                      .map(|ctor_hir_id| self.tcx.hir().local_def_id(ctor_hir_id).local_def_index);
        .           
        .                           EntryKind::Struct(
        .                               self.lazy(VariantData {
        7 ( 0.00%)                          ctor_kind: variant.ctor_kind,
       28 ( 0.00%)                          discr: variant.discr,
        .                                   ctor,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
       21 ( 0.00%)                      adt_def.repr,
        .                           )
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let adt_def = self.tcx.adt_def(def_id);
        .                           let variant = adt_def.non_enum_variant();
        .           
        .                           EntryKind::Union(
        .                               self.lazy(VariantData {
-- line 1461 ----------------------------------------
-- line 1462 ----------------------------------------
        .                                   ctor_kind: variant.ctor_kind,
        .                                   discr: variant.discr,
        .                                   ctor: None,
        .                                   is_non_exhaustive: variant.is_field_list_non_exhaustive(),
        .                               }),
        .                               adt_def.repr,
        .                           )
        .                       }
      272 ( 0.00%)              hir::ItemKind::Impl(hir::Impl { defaultness, constness, .. }) => {
      258 ( 0.00%)                  let trait_ref = self.tcx.impl_trait_ref(def_id);
      136 ( 0.00%)                  let polarity = self.tcx.impl_polarity(def_id);
      136 ( 0.00%)                  let parent = if let Some(trait_ref) = trait_ref {
       61 ( 0.00%)                      let trait_def = self.tcx.trait_def(trait_ref.def_id);
      366 ( 0.00%)                      trait_def.ancestors(self.tcx, def_id).ok().and_then(|mut an| {
      366 ( 0.00%)                          an.nth(1).and_then(|node| match node {
        .                                       specialization_graph::Node::Impl(parent) => Some(parent),
        .                                       _ => None,
        .                                   })
        .                               })
        .                           } else {
        .                               None
        .                           };
        .           
        .                           // if this is an impl of `CoerceUnsized`, create its
        .                           // "unsized info", else just store None
        .                           let coerce_unsized_info = trait_ref.and_then(|t| {
      366 ( 0.00%)                      if Some(t.def_id) == self.tcx.lang_items().coerce_unsized_trait() {
        .                                   Some(self.tcx.at(item.span).coerce_unsized_info(def_id))
        .                               } else {
        .                                   None
        .                               }
        .                           });
        .           
        .                           let data = ImplData {
        .                               polarity,
-- line 1496 ----------------------------------------
-- line 1518 ----------------------------------------
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => EntryKind::TraitAlias,
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {
        .                           bug!("cannot encode info for item {:?}", item)
        .                       }
        .                   };
        .                   record!(self.tables.kind[def_id] <- entry_kind);
        .                   // FIXME(eddyb) there should be a nicer way to do this.
      580 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(..) => record!(self.tables.children[def_id] <-
        6 ( 0.00%)                  self.tcx.adt_def(def_id).variants.iter().map(|v| {
       25 ( 0.00%)                      assert!(v.def_id.is_local());
        .                               v.def_id.index
        .                           })
        .                       ),
        .                       hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {
        .                           record!(self.tables.children[def_id] <-
       21 ( 0.00%)                      self.tcx.adt_def(def_id).non_enum_variant().fields.iter().map(|f| {
       15 ( 0.00%)                          assert!(f.did.is_local());
        .                                   f.did.index
        .                               })
        .                           )
        .                       }
        .                       hir::ItemKind::Impl { .. } | hir::ItemKind::Trait(..) => {
      136 ( 0.00%)                  let associated_item_def_ids = self.tcx.associated_item_def_ids(def_id);
        .                           record!(self.tables.children[def_id] <-
        .                               associated_item_def_ids.iter().map(|&def_id| {
       84 ( 0.00%)                          assert!(def_id.is_local());
        .                                   def_id.index
        .                               })
        .                           );
        .                       }
        .                       _ => {}
        .                   }
      310 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::Enum(..)
        .                       | hir::ItemKind::Struct(..)
        .                       | hir::ItemKind::Union(..)
      464 ( 0.00%)              | hir::ItemKind::Impl { .. } => self.encode_item_type(def_id),
        .                       _ => {}
        .                   }
      348 ( 0.00%)          if let hir::ItemKind::Fn(..) = item.kind {
       68 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));
        .                   }
      249 ( 0.00%)          if let hir::ItemKind::Impl { .. } = item.kind {
      340 ( 0.00%)              if let Some(trait_ref) = self.tcx.impl_trait_ref(def_id) {
      305 ( 0.00%)                  record!(self.tables.impl_trait_ref[def_id] <- trait_ref);
        .                       }
        .                   }
      928 ( 0.00%)      }
        .           
        .               fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {
       27 ( 0.00%)          record!(self.tables.kind[def_id] <- kind);
        9 ( 0.00%)          if encode_type {
        .                       self.encode_item_type(def_id);
        .                   }
        .               }
        .           
        .               fn encode_info_for_closure(&mut self, hir_id: hir::HirId) {
      114 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   debug!("EncodeContext::encode_info_for_closure({:?})", def_id);
        .           
        .                   // NOTE(eddyb) `tcx.type_of(def_id)` isn't used because it's fully generic,
        .                   // including on the signature, which is inferred in `typeck.
       57 ( 0.00%)          let ty = self.tcx.typeck(def_id).node_type(hir_id);
        .           
       57 ( 0.00%)          match ty.kind() {
        .                       ty::Generator(..) => {
        .                           let data = self.tcx.generator_kind(def_id).unwrap();
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Generator(data));
        .                       }
        .           
        .                       ty::Closure(..) => {
        .                           record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Closure);
        .                       }
        .           
        .                       _ => bug!("closure that is neither generator nor closure"),
        .                   }
       76 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
       76 ( 0.00%)          if let ty::Closure(def_id, substs) = *ty.kind() {
      171 ( 0.00%)              record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());
        .                   }
        .               }
        .           
        .               fn encode_info_for_anon_const(&mut self, id: hir::HirId) {
      231 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(id);
        .                   debug!("EncodeContext::encode_info_for_anon_const({:?})", def_id);
      165 ( 0.00%)          let body_id = self.tcx.hir().body_owned_by(id);
      132 ( 0.00%)          let const_data = self.encode_rendered_const_for_body(body_id);
       33 ( 0.00%)          let qualifs = self.tcx.mir_const_qualif(def_id);
        .           
      132 ( 0.00%)          record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));
      132 ( 0.00%)          self.encode_item_type(def_id.to_def_id());
        .               }
        .           
        .               fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);
        .                   self.lazy(used_libraries.iter())
        .               }
        .           
        .               fn encode_foreign_modules(&mut self) -> Lazy<[ForeignModule]> {
        5 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let foreign_modules = self.tcx.foreign_modules(LOCAL_CRATE);
        .                   self.lazy(foreign_modules.iter().map(|(_, m)| m).cloned())
        .               }
        .           
        .               fn encode_hygiene(&mut self) -> (SyntaxContextTable, ExpnDataTable, ExpnHashTable) {
        .                   let mut syntax_contexts: TableBuilder<_, _> = Default::default();
        .                   let mut expn_data_table: TableBuilder<_, _> = Default::default();
        .                   let mut expn_hash_table: TableBuilder<_, _> = Default::default();
        .           
        2 ( 0.00%)          let _: Result<(), !> = self.hygiene_ctxt.encode(
        8 ( 0.00%)              &mut (&mut *self, &mut syntax_contexts, &mut expn_data_table, &mut expn_hash_table),
        .                       |(this, syntax_contexts, _, _), index, ctxt_data| {
        .                           syntax_contexts.set(index, this.lazy(ctxt_data));
        .                           Ok(())
        .                       },
        .                       |(this, _, expn_data_table, expn_hash_table), index, expn_data, hash| {
        .                           if let Some(index) = index.as_local() {
      128 ( 0.00%)                      expn_data_table.set(index.as_raw(), this.lazy(expn_data));
      128 ( 0.00%)                      expn_hash_table.set(index.as_raw(), this.lazy(hash));
        .                           }
        .                           Ok(())
        .                       },
        .                   );
        .           
        .                   (
        .                       syntax_contexts.encode(&mut self.opaque),
        .                       expn_data_table.encode(&mut self.opaque),
        .                       expn_hash_table.encode(&mut self.opaque),
        .                   )
        .               }
        .           
        .               fn encode_proc_macros(&mut self) -> Option<ProcMacroData> {
        6 ( 0.00%)          let is_proc_macro = self.tcx.sess.crate_types().contains(&CrateType::ProcMacro);
        .                   if is_proc_macro {
        .                       let tcx = self.tcx;
        .                       let hir = tcx.hir();
        .           
        .                       let proc_macro_decls_static = tcx.proc_macro_decls_static(()).unwrap().local_def_index;
        .                       let stability = tcx.lookup_stability(DefId::local(CRATE_DEF_INDEX)).copied();
        .                       let macros =
        .                           self.lazy(tcx.resolutions(()).proc_macros.iter().map(|p| p.local_def_index));
-- line 1666 ----------------------------------------
-- line 1725 ----------------------------------------
        .           
        .                       Some(ProcMacroData { proc_macro_decls_static, stability, macros })
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               fn encode_crate_deps(&mut self) -> Lazy<[CrateDep]> {
        7 ( 0.00%)          empty_proc_macro!(self);
        .           
        1 ( 0.00%)          let deps = self
        .                       .tcx
        .                       .crates(())
        .                       .iter()
        .                       .map(|&cnum| {
        .                           let dep = CrateDep {
       19 ( 0.00%)                      name: self.tcx.crate_name(cnum),
       19 ( 0.00%)                      hash: self.tcx.crate_hash(cnum),
       19 ( 0.00%)                      host_hash: self.tcx.crate_host_hash(cnum),
       19 ( 0.00%)                      kind: self.tcx.dep_kind(cnum),
       19 ( 0.00%)                      extra_filename: self.tcx.extra_filename(cnum),
        .                           };
       95 ( 0.00%)                  (cnum, dep)
        .                       })
        .                       .collect::<Vec<_>>();
        .           
        .                   {
        .                       // Sanity-check the crate numbers
        .                       let mut expected_cnum = 1;
       38 ( 0.00%)              for &(n, _) in &deps {
       48 ( 0.00%)                  assert_eq!(n, CrateNum::new(expected_cnum));
        .                           expected_cnum += 1;
        .                       }
        .                   }
        .           
        .                   // We're just going to write a list of crate 'name-hash-version's, with
        .                   // the assumption that they are numbered 1 to n.
        .                   // FIXME (#2166): This is not nearly enough to support correct versioning
        .                   // but is enough to get transitive crate dependencies working.
        .                   self.lazy(deps.iter().map(|&(_, ref dep)| dep))
        .               }
        .           
        .               fn encode_lib_features(&mut self) -> Lazy<[(Symbol, Option<Symbol>)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let lib_features = tcx.lib_features(());
        2 ( 0.00%)          self.lazy(lib_features.to_vec())
        .               }
        .           
        .               fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        .                   let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;
        .                   self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))
        .               }
        .           
        .               fn encode_lang_items(&mut self) -> Lazy<[(DefIndex, usize)]> {
        4 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          let lang_items = tcx.lang_items();
        2 ( 0.00%)          let lang_items = lang_items.items().iter();
        .                   self.lazy(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {
      568 ( 0.00%)              if let Some(def_id) = opt_def_id {
        .                           if def_id.is_local() {
        .                               return Some((def_id.index, i));
        .                           }
        .                       }
        .                       None
        .                   }))
        .               }
        .           
        .               fn encode_lang_items_missing(&mut self) -> Lazy<[lang_items::LangItem]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          let tcx = self.tcx;
        1 ( 0.00%)          self.lazy(&tcx.lang_items().missing)
        .               }
        .           
        .               fn encode_traits(&mut self) -> Lazy<[DefIndex]> {
        3 ( 0.00%)          empty_proc_macro!(self);
        1 ( 0.00%)          self.lazy(self.tcx.traits_in_crate(LOCAL_CRATE).iter().map(|def_id| def_id.index))
        .               }
        .           
        .               /// Encodes an index, mapping each trait to its (local) implementations.
        .               fn encode_impls(&mut self) -> Lazy<[TraitImpls]> {
        .                   debug!("EncodeContext::encode_traits_and_impls()");
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let tcx = self.tcx;
        5 ( 0.00%)          let mut visitor = ImplsVisitor { tcx, impls: FxHashMap::default() };
        4 ( 0.00%)          tcx.hir().visit_all_item_likes(&mut visitor);
        .           
        .                   let mut all_impls: Vec<_> = visitor.impls.into_iter().collect();
        .           
        .                   // Bring everything into deterministic order for hashing
       15 ( 0.00%)          all_impls.sort_by_cached_key(|&(trait_def_id, _)| tcx.def_path_hash(trait_def_id));
        .           
        .                   let all_impls: Vec<_> = all_impls
        .                       .into_iter()
      225 ( 0.00%)              .map(|(trait_def_id, mut impls)| {
        .                           // Bring everything into deterministic order for hashing
       14 ( 0.00%)                  impls.sort_by_cached_key(|&(index, _)| {
       60 ( 0.00%)                      tcx.hir().def_path_hash(LocalDefId { local_def_index: index })
        .                           });
        .           
       60 ( 0.00%)                  TraitImpls {
        .                               trait_id: (trait_def_id.krate.as_u32(), trait_def_id.index),
       45 ( 0.00%)                      impls: self.lazy(&impls),
        .                           }
      120 ( 0.00%)              })
        .                       .collect();
        .           
        .                   self.lazy(&all_impls)
        .               }
        .           
        .               // Encodes all symbols exported from this crate into the metadata.
        .               //
        .               // This pass is seeded off the reachability list calculated in the
        .               // middle::reachable module but filters out items that either don't have a
        .               // symbol associated with them (they weren't translated) or if they're an FFI
        .               // definition (as that's not defined in this crate).
        .               fn encode_exported_symbols(
        .                   &mut self,
        .                   exported_symbols: &[(ExportedSymbol<'tcx>, SymbolExportLevel)],
        .               ) -> Lazy<[(ExportedSymbol<'tcx>, SymbolExportLevel)]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        .                   // The metadata symbol name is special. It should not show up in
        .                   // downstream crates.
        9 ( 0.00%)          let metadata_symbol_name = SymbolName::new(self.tcx, &metadata_symbol_name(self.tcx));
        .           
        .                   self.lazy(
        .                       exported_symbols
        .                           .iter()
    1,162 ( 0.00%)                  .filter(|&&(ref exported_symbol, _)| match *exported_symbol {
        .                               ExportedSymbol::NoDefId(symbol_name) => symbol_name != metadata_symbol_name,
        .                               _ => true,
        .                           })
        .                           .cloned(),
        .                   )
        .               }
        .           
        .               fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {
        2 ( 0.00%)          empty_proc_macro!(self);
        2 ( 0.00%)          let formats = self.tcx.dependency_formats(());
        4 ( 0.00%)          for (ty, arr) in formats.iter() {
        2 ( 0.00%)              if *ty != CrateType::Dylib {
        .                           continue;
        .                       }
        .                       return self.lazy(arr.iter().map(|slot| match *slot {
        .                           Linkage::NotLinked | Linkage::IncludedFromDylib => None,
        .           
        .                           Linkage::Dynamic => Some(LinkagePreference::RequireDynamic),
        .                           Linkage::Static => Some(LinkagePreference::RequireStatic),
        .                       }));
-- line 1876 ----------------------------------------
-- line 1914 ----------------------------------------
        .               }
        .           }
        .           
        .           // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.
        .           impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      158 ( 0.00%)          self.tcx.hir()
        .               }
  576,837 ( 0.01%)      fn visit_expr(&mut self, ex: &'tcx hir::Expr<'tcx>) {
   64,093 ( 0.00%)          intravisit::walk_expr(self, ex);
        .                   self.encode_info_for_expr(ex);
  512,744 ( 0.01%)      }
      297 ( 0.00%)      fn visit_anon_const(&mut self, c: &'tcx AnonConst) {
        .                   intravisit::walk_anon_const(self, c);
       66 ( 0.00%)          self.encode_info_for_anon_const(c.hir_id);
      264 ( 0.00%)      }
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      384 ( 0.00%)          intravisit::walk_item(self, item);
      256 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::ExternCrate(_) | hir::ItemKind::Use(..) => {} // ignore these
      468 ( 0.00%)              _ => self.encode_info_for_item(item.def_id.to_def_id(), item),
        .                   }
      512 ( 0.00%)          self.encode_addl_info_for_item(item);
        .               }
        .               fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem<'tcx>) {
        .                   intravisit::walk_foreign_item(self, ni);
        .                   self.encode_info_for_foreign_item(ni.def_id.to_def_id(), ni);
        .               }
    1,611 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   intravisit::walk_generics(self, generics);
        .                   self.encode_info_for_generics(generics);
    1,432 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> EncodeContext<'a, 'tcx> {
       70 ( 0.00%)      fn encode_fields(&mut self, adt_def: &ty::AdtDef) {
        .                   for (variant_index, variant) in adt_def.variants.iter_enumerated() {
        .                       for (field_index, _field) in variant.fields.iter().enumerate() {
        .                           self.encode_field(adt_def, variant_index, field_index);
        .                       }
        .                   }
       80 ( 0.00%)      }
        .           
        .               fn encode_info_for_generics(&mut self, generics: &hir::Generics<'tcx>) {
        .                   for param in generics.params {
      108 ( 0.00%)              let def_id = self.tcx.hir().local_def_id(param.hir_id);
      124 ( 0.00%)              match param.kind {
        .                           GenericParamKind::Lifetime { .. } => continue,
        .                           GenericParamKind::Type { default, .. } => {
        .                               self.encode_info_for_generic_param(
        .                                   def_id.to_def_id(),
        .                                   EntryKind::TypeParam,
        .                                   default.is_some(),
        .                               );
        .                           }
-- line 1970 ----------------------------------------
-- line 1975 ----------------------------------------
        .                                   record!(self.tables.const_defaults[def_id] <- self.tcx.const_param_default(def_id))
        .                               }
        .                           }
        .                       }
        .                   }
        .               }
        .           
        .               fn encode_info_for_expr(&mut self, expr: &hir::Expr<'_>) {
  128,186 ( 0.00%)          if let hir::ExprKind::Closure(..) = expr.kind {
        .                       self.encode_info_for_closure(expr.hir_id);
        .                   }
        .               }
        .           
        .               fn encode_ident_span(&mut self, def_id: DefId, ident: Ident) {
        .                   record!(self.tables.ident_span[def_id] <- ident.span);
        .               }
        .           
        .               /// In some cases, along with the item itself, we also
        .               /// encode some sub-items. Usually we want some info from the item
        .               /// so it's easier to do that here then to wait until we would encounter
        .               /// normally in the visitor walk.
    1,152 ( 0.00%)      fn encode_addl_info_for_item(&mut self, item: &hir::Item<'_>) {
      640 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::Macro(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::ForeignMod { .. }
        .                       | hir::ItemKind::GlobalAsm(..)
        .                       | hir::ItemKind::ExternCrate(..)
        .                       | hir::ItemKind::Use(..)
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::OpaqueTy(..)
        .                       | hir::ItemKind::TraitAlias(..) => {
        .                           // no sub-item recording needed in these cases
        .                       }
        .                       hir::ItemKind::Enum(..) => {
        3 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
        6 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           for (i, variant) in def.variants.iter_enumerated() {
        .                               self.encode_enum_variant_info(def, i);
        .           
       75 ( 0.00%)                      if let Some(_ctor_def_id) = variant.ctor_def_id {
        .                                   self.encode_enum_variant_ctor(def, i);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref struct_def, _) => {
        7 ( 0.00%)                  let def = self.tcx.adt_def(item.def_id.to_def_id());
       14 ( 0.00%)                  self.encode_fields(def);
        .           
        .                           // If the struct has a constructor, encode it.
       28 ( 0.00%)                  if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {
       18 ( 0.00%)                      let ctor_def_id = self.tcx.hir().local_def_id(ctor_hir_id);
        .                               self.encode_struct_ctor(def, ctor_def_id.to_def_id());
        .                           }
        .                       }
        .                       hir::ItemKind::Union(..) => {
        .                           let def = self.tcx.adt_def(item.def_id.to_def_id());
        .                           self.encode_fields(def);
        .                       }
        .                       hir::ItemKind::Impl { .. } => {
      336 ( 0.00%)                  for &trait_item_def_id in
       68 ( 0.00%)                      self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_impl_item(trait_item_def_id);
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(..) => {
        .                           for &item_def_id in self.tcx.associated_item_def_ids(item.def_id.to_def_id()).iter()
        .                           {
        .                               self.encode_info_for_trait_item(item_def_id);
        .                           }
        .                       }
        .                   }
    1,024 ( 0.00%)      }
        .           }
        .           
        .           struct ImplsVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               impls: FxHashMap<DefId, Vec<(DefIndex, Option<SimplifiedType>)>>,
        .           }
        .           
        .           impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplsVisitor<'tcx> {
      896 ( 0.00%)      fn visit_item(&mut self, item: &hir::Item<'_>) {
      256 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Impl(..) => {
      258 ( 0.00%)                  if let Some(trait_ref) = self.tcx.impl_trait_ref(item.def_id.to_def_id()) {
      366 ( 0.00%)                      let simplified_self_ty = fast_reject::simplify_type(
        .                                   self.tcx,
        .                                   trait_ref.self_ty(),
        .                                   SimplifyParams::No,
        .                                   StripReferences::No,
        .                               );
        .           
        .                               self.impls
        .                                   .entry(trait_ref.def_id)
        .                                   .or_default()
        .                                   .push((item.def_id.local_def_index, simplified_self_ty));
        .                           }
        .                       }
        .                       _ => {}
        .                   }
    1,024 ( 0.00%)      }
        .           
        .               fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}
        .           
        .               fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem<'v>) {
        .                   // handled in `visit_item` above
        .               }
        .           
        .               fn visit_foreign_item(&mut self, _foreign_item: &'v hir::ForeignItem<'v>) {}
-- line 2088 ----------------------------------------
-- line 2146 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn raw_data(&self) -> &[u8] {
        .                   &self.raw_data
        .               }
        .           }
        .           
       10 ( 0.00%)  pub fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {
        5 ( 0.00%)      let _prof_timer = tcx.prof.verbose_generic_activity("generate_crate_metadata");
        .           
        .               // Since encoding metadata is not in a query, and nothing is cached,
        .               // there's no need to do dep-graph tracking for any of it.
        .               tcx.dep_graph.assert_ignored();
        .           
        7 ( 0.00%)      join(
        3 ( 0.00%)          || encode_metadata_impl(tcx),
        .                   || {
        5 ( 0.00%)              if tcx.sess.threads() == 1 {
        .                           return;
        .                       }
        .                       // Prefetch some queries used by metadata encoding.
        .                       // This is not necessary for correctness, but is only done for performance reasons.
        .                       // It can be removed if it turns out to cause trouble or be detrimental to performance.
        .                       join(|| prefetch_mir(tcx), || tcx.exported_symbols(LOCAL_CRATE));
        .                   },
        .               )
        .               .0
        9 ( 0.00%)  }
        .           
        9 ( 0.00%)  fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {
        1 ( 0.00%)      let mut encoder = opaque::Encoder::new(vec![]);
        .               encoder.emit_raw_bytes(METADATA_HEADER).unwrap();
        .           
        .               // Will be filled with the root position after encoding everything.
        .               encoder.emit_raw_bytes(&[0, 0, 0, 0]).unwrap();
        .           
        2 ( 0.00%)      let source_map_files = tcx.sess.source_map().files();
        3 ( 0.00%)      let source_file_cache = (source_map_files[0].clone(), 0);
        2 ( 0.00%)      let required_source_files = Some(GrowableBitSet::with_capacity(source_map_files.len()));
        .               drop(source_map_files);
        .           
        .               let hygiene_ctxt = HygieneEncodeContext::default();
        .           
       35 ( 0.00%)      let mut ecx = EncodeContext {
        4 ( 0.00%)          opaque: encoder,
        .                   tcx,
        2 ( 0.00%)          feat: tcx.features(),
        .                   tables: Default::default(),
        .                   lazy_state: LazyState::NoNode,
        .                   type_shorthands: Default::default(),
        .                   predicate_shorthands: Default::default(),
        4 ( 0.00%)          source_file_cache,
        .                   interpret_allocs: Default::default(),
        4 ( 0.00%)          required_source_files,
        2 ( 0.00%)          is_proc_macro: tcx.sess.crate_types().contains(&CrateType::ProcMacro),
        .                   hygiene_ctxt: &hygiene_ctxt,
        .               };
        .           
        .               // Encode the rustc version string in a predictable location.
        .               rustc_version().encode(&mut ecx).unwrap();
        .           
        .               // Encode all the entries and extra information in the crate,
        .               // culminating in the `CrateRoot` which points to all of it.
        1 ( 0.00%)      let root = ecx.encode_crate_root();
        .           
        7 ( 0.00%)      let mut result = ecx.opaque.into_inner();
        .           
        .               // Encode the root position.
        .               let header = METADATA_HEADER.len();
        .               let pos = root.position.get();
        3 ( 0.00%)      result[header + 0] = (pos >> 24) as u8;
        3 ( 0.00%)      result[header + 1] = (pos >> 16) as u8;
        1 ( 0.00%)      result[header + 2] = (pos >> 8) as u8;
        5 ( 0.00%)      result[header + 3] = (pos >> 0) as u8;
        .           
        .               // Record metadata size for self-profiling
        .               tcx.prof.artifact_size("crate_metadata", "crate_metadata", result.len() as u64);
        .           
        5 ( 0.00%)      EncodedMetadata { raw_data: result }
       12 ( 0.00%)  }
        .           
        .           pub fn provide(providers: &mut Providers) {
        2 ( 0.00%)      *providers = Providers {
        .                   traits_in_crate: |tcx, cnum| {
        1 ( 0.00%)              assert_eq!(cnum, LOCAL_CRATE);
        .           
        1 ( 0.00%)              #[derive(Default)]
        .                       struct TraitsVisitor {
        .                           traits: Vec<DefId>,
        .                       }
        .                       impl ItemLikeVisitor<'_> for TraitsVisitor {
        .                           fn visit_item(&mut self, item: &hir::Item<'_>) {
      512 ( 0.00%)                      if let hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) = item.kind {
        .                                   self.traits.push(item.def_id.to_def_id());
        .                               }
        .                           }
        .                           fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}
        .                           fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}
        .                           fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}
        .                       }
        .           
        .                       let mut visitor = TraitsVisitor::default();
        4 ( 0.00%)              tcx.hir().visit_all_item_likes(&mut visitor);
        .                       // Bring everything into deterministic order.
        .                       visitor.traits.sort_by_cached_key(|&def_id| tcx.def_path_hash(def_id));
        .                       tcx.arena.alloc_slice(&visitor.traits)
        .                   },
        .           
        .                   ..*providers
        .               };
        .           }
-- line 2257 ----------------------------------------

  298,014 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/encoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .                   RingBuffer { data: VecDeque::new(), offset: 0 }
        .               }
        .           
        .               pub fn is_empty(&self) -> bool {
        .                   self.data.is_empty()
        .               }
        .           
        .               pub fn push(&mut self, value: T) -> usize {
  734,502 ( 0.01%)          let index = self.offset + self.data.len();
2,264,854 ( 0.04%)          self.data.push_back(value);
        .                   index
        .               }
        .           
        .               pub fn clear(&mut self) {
       52 ( 0.00%)          self.data.clear();
        .               }
        .           
        .               pub fn index_of_first(&self) -> usize {
        .                   self.offset
        .               }
        .           
        .               pub fn first(&self) -> Option<&T> {
        .                   self.data.front()
        .               }
        .           
        .               pub fn first_mut(&mut self) -> Option<&mut T> {
        .                   self.data.front_mut()
        .               }
        .           
1,836,255 ( 0.03%)      pub fn pop_first(&mut self) -> Option<T> {
        .                   let first = self.data.pop_front()?;
1,469,004 ( 0.02%)          self.offset += 1;
2,203,506 ( 0.04%)          Some(first)
2,570,757 ( 0.04%)      }
        .           
        .               pub fn last(&self) -> Option<&T> {
        .                   self.data.back()
        .               }
        .           
        .               pub fn last_mut(&mut self) -> Option<&mut T> {
        .                   self.data.back_mut()
        .               }
-- line 63 ----------------------------------------

1,836,255 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_ast_pretty/src/pp/ring.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs
--------------------------------------------------------------------------------
Ir                 

-- line 77 ----------------------------------------
        .           //
        .           // FIXME(pnkfelix): this currently derives `PartialOrd` and `Ord` to
        .           // placate the same deriving in `ty::FreeRegion`, but we may want to
        .           // actually attach a more meaningful ordering to scopes than the one
        .           // generated via deriving here.
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct Scope {
   65,805 ( 0.00%)      pub id: hir::ItemLocalId,
1,208,624 ( 0.02%)      pub data: ScopeData,
        .           }
        .           
        .           impl fmt::Debug for Scope {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.data {
        .                       ScopeData::Node => write!(fmt, "Node({:?})", self.id),
        .                       ScopeData::CallSite => write!(fmt, "CallSite({:?})", self.id),
        .                       ScopeData::Arguments => write!(fmt, "Arguments({:?})", self.id),
-- line 94 ----------------------------------------
-- line 99 ----------------------------------------
        .                           "Remainder {{ block: {:?}, first_statement_index: {}}}",
        .                           self.id,
        .                           fsi.as_u32(),
        .                       ),
        .                   }
        .               }
        .           }
        .           
5,557,180 ( 0.09%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum ScopeData {
        .               Node,
        .           
        .               /// Scope of the call-site for a function or closure
        .               /// (outlives the arguments as well as the body).
        .               CallSite,
        .           
-- line 115 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// N.B., likely to be replaced as API is refined; e.g., pnkfelix
        .               /// anticipates `fn entry_node_id` and `fn each_exit_node_id`.
        .               pub fn item_local_id(&self) -> hir::ItemLocalId {
        .                   self.id
        .               }
        .           
        .               pub fn hir_id(&self, scope_tree: &ScopeTree) -> Option<hir::HirId> {
   22,532 ( 0.00%)          scope_tree
        .                       .root_body
        .                       .map(|hir_id| hir::HirId { owner: hir_id.owner, local_id: self.item_local_id() })
        .               }
        .           
        .               /// Returns the span of this `Scope`. Note that in general the
        .               /// returned span may not correspond to the span of any `NodeId` in
        .               /// the AST.
  157,724 ( 0.00%)      pub fn span(&self, tcx: TyCtxt<'_>, scope_tree: &ScopeTree) -> Span {
   45,064 ( 0.00%)          let hir_id = match self.hir_id(scope_tree) {
        .                       Some(hir_id) => hir_id,
        .                       None => return DUMMY_SP,
        .                   };
   90,128 ( 0.00%)          let span = tcx.hir().span(hir_id);
   90,128 ( 0.00%)          if let ScopeData::Remainder(first_statement_index) = self.data {
      804 ( 0.00%)              if let Node::Block(ref blk) = tcx.hir().get(hir_id) {
        .                           // Want span for scope starting after the
        .                           // indexed statement and ending at end of
        .                           // `blk`; reuse span of `blk` and shift `lo`
        .                           // forward to end of indexed statement.
        .                           //
        .                           // (This is the special case alluded to in the
        .                           // doc-comment for this method)
        .           
    1,072 ( 0.00%)                  let stmt_span = blk.stmts[first_statement_index.index()].span;
        .           
        .                           // To avoid issues with macro-generated spans, the span
        .                           // of the statement must be nested in that of the block.
      265 ( 0.00%)                  if span.lo() <= stmt_span.lo() && stmt_span.lo() <= span.hi() {
      464 ( 0.00%)                      return span.with_lo(stmt_span.lo());
        .                           }
        .                       }
        .                   }
        .                   span
  202,788 ( 0.00%)      }
        .           }
        .           
        .           pub type ScopeDepth = u32;
        .           
        .           /// The region scope tree encodes information about region relationships.
        .           #[derive(Default, Debug)]
        .           pub struct ScopeTree {
        .               /// If not empty, this body is the root of this region hierarchy.
-- line 209 ----------------------------------------
-- line 321 ----------------------------------------
        .               /// The `Span` of the yield.
        .               pub span: Span,
        .               /// The number of expressions and patterns appearing before the `yield` in the body, plus one.
        .               pub expr_and_pat_count: usize,
        .               pub source: hir::YieldSource,
        .           }
        .           
        .           impl ScopeTree {
  399,642 ( 0.01%)      pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {
        .                   debug!("{:?}.parent = {:?}", child, parent);
        .           
  133,214 ( 0.00%)          if let Some(p) = parent {
        .                       let prev = self.parent_map.insert(child, p);
   66,315 ( 0.00%)              assert!(prev.is_none());
        .                   }
        .           
        .                   // Record the destruction scopes for later so we can query them.
  133,214 ( 0.00%)          if let ScopeData::Destruction = child.data {
        .                       self.destruction_scopes.insert(child.item_local_id(), child);
        .                   }
  263,292 ( 0.00%)      }
        .           
  129,062 ( 0.00%)      pub fn opt_destruction_scope(&self, n: hir::ItemLocalId) -> Option<Scope> {
        .                   self.destruction_scopes.get(&n).cloned()
  129,062 ( 0.00%)      }
        .           
        .               pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {
        .                   debug!("record_var_scope(sub={:?}, sup={:?})", var, lifetime);
      331 ( 0.00%)          assert!(var != lifetime.item_local_id());
        .                   self.var_map.insert(var, lifetime);
        .               }
        .           
        .               pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {
        .                   debug!("record_rvalue_scope(sub={:?}, sup={:?})", var, lifetime);
       16 ( 0.00%)          if let Some(lifetime) = lifetime {
        .                       assert!(var != lifetime.item_local_id());
        .                   }
        .                   self.rvalue_scopes.insert(var, lifetime);
        .               }
        .           
        .               /// Returns the narrowest scope that encloses `id`, if any.
        .               pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {
        .                   self.parent_map.get(&id).cloned().map(|(p, _)| p)
        .               }
        .           
        .               /// Returns the lifetime of the local variable `var_id`
      748 ( 0.00%)      pub fn var_scope(&self, var_id: hir::ItemLocalId) -> Scope {
        .                   self.var_map
        .                       .get(&var_id)
        .                       .cloned()
        .                       .unwrap_or_else(|| bug!("no enclosing scope for id {:?}", var_id))
      748 ( 0.00%)      }
        .           
        .               /// Returns the scope when the temp created by `expr_id` will be cleaned up.
  898,688 ( 0.01%)      pub fn temporary_scope(&self, expr_id: hir::ItemLocalId) -> Option<Scope> {
        .                   // Check for a designated rvalue scope.
       30 ( 0.00%)          if let Some(&s) = self.rvalue_scopes.get(&expr_id) {
        .                       debug!("temporary_scope({:?}) = {:?} [custom]", expr_id, s);
        .                       return s;
        .                   }
        .           
        .                   // Otherwise, locate the innermost terminating scope
        .                   // if there's one. Static items, for instance, won't
        .                   // have an enclosing scope, hence no scope will be
        .                   // returned.
  128,374 ( 0.00%)          let mut id = Scope { id: expr_id, data: ScopeData::Node };
        .           
2,952,081 ( 0.05%)          while let Some(&(p, _)) = self.parent_map.get(&id) {
1,007,362 ( 0.02%)              match p.data {
        .                           ScopeData::Destruction => {
        .                               debug!("temporary_scope({:?}) = {:?} [enclosing]", expr_id, id);
        .                               return Some(id);
        .                           }
  311,691 ( 0.01%)                  _ => id = p,
        .                       }
        .                   }
        .           
        .                   debug!("temporary_scope({:?}) = None", expr_id);
        .                   None
1,027,072 ( 0.02%)      }
        .           
        .               /// Returns `true` if `subscope` is equal to or is lexically nested inside `superscope`, and
        .               /// `false` otherwise.
        .               ///
        .               /// Used by clippy.
        .               pub fn is_subscope_of(&self, subscope: Scope, superscope: Scope) -> bool {
        .                   let mut s = subscope;
        .                   debug!("is_subscope_of({:?}, {:?})", subscope, superscope);
-- line 408 ----------------------------------------

2,092,253 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/middle/region.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 59 ----------------------------------------
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy>;
        .           
        .               /// Not overridden, but used to actually visit types and traits.
        .               fn skeleton(&mut self) -> DefIdVisitorSkeleton<'_, 'tcx, Self> {
  723,967 ( 0.01%)          DefIdVisitorSkeleton {
        .                       def_id_visitor: self,
        .                       visited_opaque_tys: Default::default(),
        .                       dummy: Default::default(),
        .                   }
        .               }
      612 ( 0.00%)      fn visit(&mut self, ty_fragment: impl TypeFoldable<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   ty_fragment.visit_with(&mut self.skeleton())
    1,020 ( 0.00%)      }
      366 ( 0.00%)      fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<Self::BreakTy> {
        .                   self.skeleton().visit_trait(trait_ref)
      366 ( 0.00%)      }
        .               fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
       40 ( 0.00%)          self.skeleton().visit_projection_ty(projection)
        .               }
        .               fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<Self::BreakTy> {
      299 ( 0.00%)          self.skeleton().visit_predicates(predicates)
        .               }
        .           }
        .           
        .           struct DefIdVisitorSkeleton<'v, 'tcx, V: ?Sized> {
        .               def_id_visitor: &'v mut V,
        .               visited_opaque_tys: FxHashSet<DefId>,
        .               dummy: PhantomData<TyCtxt<'tcx>>,
        .           }
        .           
        .           impl<'tcx, V> DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> ControlFlow<V::BreakTy> {
       61 ( 0.00%)          let TraitRef { def_id, substs } = trait_ref;
    8,641 ( 0.00%)          self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref.print_only_trait_path())?;
       61 ( 0.00%)          if self.def_id_visitor.shallow() { ControlFlow::CONTINUE } else { substs.visit_with(self) }
        .               }
        .           
    1,600 ( 0.00%)      fn visit_projection_ty(
        .                   &mut self,
        .                   projection: ty::ProjectionTy<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
    1,280 ( 0.00%)          let (trait_ref, assoc_substs) =
      320 ( 0.00%)              projection.trait_ref_and_own_substs(self.def_id_visitor.tcx());
        .                   self.visit_trait(trait_ref)?;
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
        .                       assoc_substs.iter().try_for_each(|subst| subst.visit_with(self))
        .                   }
    1,440 ( 0.00%)      }
        .           
        .               fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {
      367 ( 0.00%)          match predicate.kind().skip_binder() {
        .                       ty::PredicateKind::Trait(ty::TraitPredicate {
        .                           trait_ref,
        .                           constness: _,
        .                           polarity: _,
        .                       }) => self.visit_trait(trait_ref),
        .                       ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, term }) => {
       64 ( 0.00%)                  term.visit_with(self)?;
      452 ( 0.00%)                  self.visit_projection_ty(projection_ty)
        .                       }
        .                       ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty, _region)) => {
        .                           ty.visit_with(self)
        .                       }
        .                       ty::PredicateKind::RegionOutlives(..) => ControlFlow::CONTINUE,
        .                       ty::PredicateKind::ConstEvaluatable(uv)
        .                           if self.def_id_visitor.tcx().features().generic_const_exprs =>
        .                       {
-- line 140 ----------------------------------------
-- line 157 ----------------------------------------
        .                       ACNode::Leaf(leaf) => self.visit_const(leaf),
        .                       ACNode::Cast(_, _, ty) => self.visit_ty(ty),
        .                       ACNode::Binop(..) | ACNode::UnaryOp(..) | ACNode::FunctionCall(_, _) => {
        .                           ControlFlow::CONTINUE
        .                       }
        .                   })
        .               }
        .           
    2,247 ( 0.00%)      fn visit_predicates(
        .                   &mut self,
        .                   predicates: ty::GenericPredicates<'tcx>,
        .               ) -> ControlFlow<V::BreakTy> {
        .                   let ty::GenericPredicates { parent: _, predicates } = predicates;
        .                   predicates.iter().try_for_each(|&(predicate, _span)| self.visit_predicate(predicate))
    2,568 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, V> TypeVisitor<'tcx> for DefIdVisitorSkeleton<'_, 'tcx, V>
        .           where
        .               V: DefIdVisitor<'tcx> + ?Sized,
        .           {
        .               type BreakTy = V::BreakTy;
        .           
1,430,290 ( 0.02%)      fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<V::BreakTy> {
  159,096 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
        .                   // InternalSubsts are not visited here because they are visited below in `super_visit_with`.
  794,380 ( 0.01%)          match *ty.kind() {
  135,449 ( 0.00%)              ty::Adt(&ty::AdtDef { did: def_id, .. }, ..)
        .                       | ty::Foreign(def_id)
        .                       | ty::FnDef(def_id, ..)
        .                       | ty::Closure(def_id, ..)
        .                       | ty::Generator(def_id, ..) => {
  769,884 ( 0.01%)                  self.def_id_visitor.visit_def_id(def_id, "type", &ty)?;
        .                           if self.def_id_visitor.shallow() {
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // Default type visitor doesn't visit signatures of fn types.
        .                           // Something like `fn() -> Priv {my_func}` is considered a private type even if
        .                           // `my_func` is public, so we need to visit signatures.
  165,832 ( 0.00%)                  if let ty::FnDef(..) = ty.kind() {
        .                               tcx.fn_sig(def_id).visit_with(self)?;
        .                           }
        .                           // Inherent static methods don't have self type in substs.
        .                           // Something like `fn() {my_method}` type of the method
        .                           // `impl Pub<Priv> { pub fn my_method() {} }` is considered a private type,
        .                           // so we need to visit the self type additionally.
  223,808 ( 0.00%)                  if let Some(assoc_item) = tcx.opt_associated_item(def_id) {
   41,294 ( 0.00%)                      if let ty::ImplContainer(impl_def_id) = assoc_item.container {
   20,268 ( 0.00%)                          tcx.type_of(impl_def_id).visit_with(self)?;
        .                               }
        .                           }
        .                       }
       90 ( 0.00%)              ty::Projection(proj) => {
        .                           if self.def_id_visitor.skip_assoc_tys() {
        .                               // Visitors searching for minimal visibility/reachability want to
        .                               // conservatively approximate associated types like `<Type as Trait>::Alias`
        .                               // as visible/reachable even if both `Type` and `Trait` are private.
        .                               // Ideally, associated types should be substituted in the same way as
        .                               // free type aliases, but this isn't done yet.
        .                               return ControlFlow::CONTINUE;
        .                           }
        .                           // This will also visit substs if necessary, so we don't need to recurse.
      450 ( 0.00%)                  return self.visit_projection_ty(proj);
        .                       }
       14 ( 0.00%)              ty::Dynamic(predicates, ..) => {
        .                           // All traits in the list are considered the "primary" part of the type
        .                           // and are visited by shallow visitors.
      112 ( 0.00%)                  for predicate in predicates {
       84 ( 0.00%)                      let trait_ref = match predicate.skip_binder() {
       84 ( 0.00%)                          ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,
        .                                   ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),
        .                                   ty::ExistentialPredicate::AutoTrait(def_id) => {
        .                                       ty::ExistentialTraitRef { def_id, substs: InternalSubsts::empty() }
        .                                   }
        .                               };
       28 ( 0.00%)                      let ty::ExistentialTraitRef { def_id, substs: _ } = trait_ref;
      168 ( 0.00%)                      self.def_id_visitor.visit_def_id(def_id, "trait", &trait_ref)?;
        .                           }
        .                       }
      858 ( 0.00%)              ty::Opaque(def_id, ..) => {
        .                           // Skip repeated `Opaque`s to avoid infinite recursion.
      858 ( 0.00%)                  if self.visited_opaque_tys.insert(def_id) {
        .                               // The intent is to treat `impl Trait1 + Trait2` identically to
        .                               // `dyn Trait1 + Trait2`. Therefore we ignore def-id of the opaque type itself
        .                               // (it either has no visibility, or its visibility is insignificant, like
        .                               // visibilities of type aliases) and recurse into bounds instead to go
        .                               // through the trait list (default type visitor doesn't visit those traits).
        .                               // All traits in the list are considered the "primary" part of the type
        .                               // and are visited by shallow visitors.
       44 ( 0.00%)                      self.visit_predicates(ty::GenericPredicates {
        .                                   parent: None,
        .                                   predicates: tcx.explicit_item_bounds(def_id),
        .                               })?;
        .                           }
        .                       }
        .                       // These types don't have their own def-ids (but may have subcomponents
        .                       // with def-ids that should be visited recursively).
        .                       ty::Bool
-- line 254 ----------------------------------------
-- line 270 ----------------------------------------
        .                       ty::Bound(..) | ty::Placeholder(..) | ty::Infer(..) => {
        .                           bug!("unexpected type: {:?}", ty)
        .                       }
        .                   }
        .           
        .                   if self.def_id_visitor.shallow() {
        .                       ControlFlow::CONTINUE
        .                   } else {
  474,173 ( 0.01%)              ty.super_visit_with(self)
        .                   }
1,427,101 ( 0.02%)      }
        .           
        .               fn visit_const(&mut self, c: &'tcx Const<'tcx>) -> ControlFlow<Self::BreakTy> {
  121,152 ( 0.00%)          self.visit_ty(c.ty)?;
   20,192 ( 0.00%)          let tcx = self.def_id_visitor.tcx();
  141,344 ( 0.00%)          if let Ok(Some(ct)) = AbstractConst::from_const(tcx, c) {
        .                       self.visit_abstract_const_expr(tcx, ct)?;
        .                   }
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           fn min(vis1: ty::Visibility, vis2: ty::Visibility, tcx: TyCtxt<'_>) -> ty::Visibility {
      213 ( 0.00%)      if vis1.is_at_least(vis2, tcx) { vis2 } else { vis1 }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine if pub(restricted) is used anywhere in the crate.
        .           ///
        .           /// This is done so that `private_in_public` warnings can be turned into hard errors
        .           /// in crates that have been updated to use pub(restricted).
        .           ////////////////////////////////////////////////////////////////////////////////
-- line 301 ----------------------------------------
-- line 303 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PubRestrictedVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
      370 ( 0.00%)          self.tcx.hir()
        .               }
        .               fn visit_vis(&mut self, vis: &'tcx hir::Visibility<'tcx>) {
    1,162 ( 0.00%)          self.has_pub_restricted = self.has_pub_restricted || vis.node.is_pub_restricted();
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// Visitor used to determine impl visibility and reachability.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct FindMin<'a, 'tcx, VL: VisibilityLike> {
-- line 322 ----------------------------------------
-- line 336 ----------------------------------------
        .                   true
        .               }
        .               fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
    2,049 ( 0.00%)          self.min = VL::new_min(self, def_id);
        .                   ControlFlow::CONTINUE
        .               }
        .           }
        .           
        .           trait VisibilityLike: Sized {
        .               const MAX: Self;
        .               const SHALLOW: bool = false;
        .               fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self;
        .           
        .               // Returns an over-approximation (`skip_assoc_tys` = true) of visibility due to
        .               // associated types for which we can't determine visibility precisely.
    1,428 ( 0.00%)      fn of_impl(def_id: LocalDefId, tcx: TyCtxt<'_>, access_levels: &AccessLevels) -> Self {
      680 ( 0.00%)          let mut find = FindMin { tcx, access_levels, min: Self::MAX };
      204 ( 0.00%)          find.visit(tcx.type_of(def_id));
      612 ( 0.00%)          if let Some(trait_ref) = tcx.impl_trait_ref(def_id) {
       61 ( 0.00%)              find.visit_trait(trait_ref);
        .                   }
      164 ( 0.00%)          find.min
    1,632 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for ty::Visibility {
        .               const MAX: Self = ty::Visibility::Public;
    1,400 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
      600 ( 0.00%)          min(find.tcx.visibility(def_id), find.min, find.tcx)
    2,000 ( 0.00%)      }
        .           }
        .           impl VisibilityLike for Option<AccessLevel> {
        .               const MAX: Self = Some(AccessLevel::Public);
        .               // Type inference is very smart sometimes.
        .               // It can make an impl reachable even some components of its type or trait are unreachable.
        .               // E.g. methods of `impl ReachableTrait<UnreachableTy> for ReachableTy<UnreachableTy> { ... }`
        .               // can be usable from other crates (#57264). So we skip substs when calculating reachability
        .               // and consider an impl reachable if its "shallow" type and trait are reachable.
        .               //
        .               // The assumption we make here is that type-inference won't let you use an impl without knowing
        .               // both "shallow" version of its self type and "shallow" version of its trait if it exists
        .               // (which require reaching the `DefId`s in them).
        .               const SHALLOW: bool = true;
      774 ( 0.00%)      fn new_min(find: &FindMin<'_, '_, Self>, def_id: DefId) -> Self {
        .                   cmp::min(
      774 ( 0.00%)              if let Some(def_id) = def_id.as_local() {
      272 ( 0.00%)                  find.access_levels.map.get(&def_id).copied()
        .                       } else {
        .                           Self::MAX
        .                       },
      478 ( 0.00%)              find.min,
        .                   )
    1,032 ( 0.00%)      }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           /// The embargo visitor, used to determine the exports of the AST.
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           struct EmbargoVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
-- line 400 ----------------------------------------
-- line 422 ----------------------------------------
        .           
        .           struct ReachEverythingInTheInterfaceVisitor<'a, 'tcx> {
        .               access_level: Option<AccessLevel>,
        .               item_def_id: LocalDefId,
        .               ev: &'a mut EmbargoVisitor<'tcx>,
        .           }
        .           
        .           impl<'tcx> EmbargoVisitor<'tcx> {
    2,160 ( 0.00%)      fn get(&self, def_id: LocalDefId) -> Option<AccessLevel> {
        .                   self.access_levels.map.get(&def_id).copied()
    2,160 ( 0.00%)      }
        .           
        .               fn update_with_hir_id(
        .                   &mut self,
        .                   hir_id: hir::HirId,
        .                   level: Option<AccessLevel>,
        .               ) -> Option<AccessLevel> {
      578 ( 0.00%)          let def_id = self.tcx.hir().local_def_id(hir_id);
        .                   self.update(def_id, level)
        .               }
        .           
        .               /// Updates node level and returns the updated level.
        .               fn update(&mut self, def_id: LocalDefId, level: Option<AccessLevel>) -> Option<AccessLevel> {
    2,428 ( 0.00%)          let old_level = self.get(def_id);
        .                   // Accessibility levels can only grow.
        .                   if level > old_level {
        .                       self.access_levels.map.insert(def_id, level.unwrap());
       73 ( 0.00%)              self.changed = true;
        .                       level
        .                   } else {
        .                       old_level
        .                   }
        .               }
        .           
        .               fn reach(
        .                   &mut self,
-- line 457 ----------------------------------------
-- line 458 ----------------------------------------
        .                   def_id: LocalDefId,
        .                   access_level: Option<AccessLevel>,
        .               ) -> ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .                   ReachEverythingInTheInterfaceVisitor {
        .                       access_level: cmp::min(access_level, Some(AccessLevel::Reachable)),
        .                       item_def_id: def_id,
        .                       ev: self,
        .                   }
      548 ( 0.00%)      }
        .           
        .               // We have to make sure that the items that macros might reference
        .               // are reachable, since they might be exported transitively.
        .               fn update_reachability_from_macro(&mut self, local_def_id: LocalDefId, md: &MacroDef) {
        .                   // Non-opaque macros cannot make other items more accessible than they already are.
        .           
        .                   let hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);
        .                   let attrs = self.tcx.hir().attrs(hir_id);
-- line 474 ----------------------------------------
-- line 630 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for EmbargoVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      740 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    2,304 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      512 ( 0.00%)          let item_level = match item.kind {
        .                       hir::ItemKind::Impl { .. } => {
        .                           let impl_level =
      816 ( 0.00%)                      Option::<AccessLevel>::of_impl(item.def_id, self.tcx, &self.access_levels);
      136 ( 0.00%)                  self.update(item.def_id, impl_level)
        .                       }
      480 ( 0.00%)              _ => self.get(item.def_id),
        .                   };
        .           
        .                   // Update levels of nested things.
    1,308 ( 0.00%)          match item.kind {
        .                       hir::ItemKind::Enum(ref def, _) => {
        6 ( 0.00%)                  for variant in def.variants {
      150 ( 0.00%)                      let variant_level = self.update_with_hir_id(variant.id, item_level);
      200 ( 0.00%)                      if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {
        .                                   self.update_with_hir_id(ctor_hir_id, item_level);
        .                               }
      100 ( 0.00%)                      for field in variant.data.fields() {
        8 ( 0.00%)                          self.update_with_hir_id(field.hir_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Impl(ref impl_) => {
      408 ( 0.00%)                  for impl_item_ref in impl_.items {
      754 ( 0.00%)                      if impl_.of_trait.is_some()
      112 ( 0.00%)                          || self.tcx.visibility(impl_item_ref.id.def_id) == ty::Visibility::Public
        .                               {
      304 ( 0.00%)                          self.update(impl_item_ref.id.def_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           for trait_item_ref in trait_item_refs {
        .                               self.update(trait_item_ref.id.def_id, item_level);
        .                           }
        .                       }
        .                       hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {
       56 ( 0.00%)                  if let Some(ctor_hir_id) = def.ctor_hir_id() {
        .                               self.update_with_hir_id(ctor_hir_id, item_level);
        .                           }
       28 ( 0.00%)                  for field in def.fields() {
      120 ( 0.00%)                      if field.vis.node.is_pub() {
        .                                   self.update_with_hir_id(field.hir_id, item_level);
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::Macro(ref macro_def) => {
        .                           self.update_reachability_from_macro(item.def_id, macro_def);
        .                       }
        .                       hir::ItemKind::ForeignMod { items, .. } => {
-- line 691 ----------------------------------------
-- line 704 ----------------------------------------
        .                       | hir::ItemKind::TyAlias(..)
        .                       | hir::ItemKind::Mod(..)
        .                       | hir::ItemKind::TraitAlias(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::ExternCrate(..) => {}
        .                   }
        .           
        .                   // Mark all items in interfaces of reachable items as reachable.
    1,280 ( 0.00%)          match item.kind {
        .                       // The interface is empty.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Handled in the access level of in rustc_resolve
        .                       hir::ItemKind::Use(..) => {}
        .                       // The interface is empty.
        .                       hir::ItemKind::GlobalAsm(..) => {}
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // HACK(jynelson): trying to infer the type of `impl trait` breaks `async-std` (and `pub async fn` in general)
        .                           // Since rustdoc never needs to do codegen and doesn't care about link-time reachability,
        .                           // mark this as unreachable.
        .                           // See https://github.com/rust-lang/rust/issues/75100
       56 ( 0.00%)                  if !self.tcx.sess.opts.actually_rustdoc {
        .                               // FIXME: This is some serious pessimization intended to workaround deficiencies
        .                               // in the reachability pass (`middle/reachable.rs`). Types are marked as link-time
        .                               // reachable if they are returned via `impl Trait`, even from private functions.
        .                               let exist_level =
        .                                   cmp::max(item_level, Some(AccessLevel::ReachableFromImplTrait));
       42 ( 0.00%)                      self.reach(item.def_id, exist_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Visit everything.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
       62 ( 0.00%)                  if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates().ty();
        .                           }
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .           
        .                               for trait_item_ref in trait_item_refs {
-- line 748 ----------------------------------------
-- line 761 ----------------------------------------
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           if item_level.is_some() {
        .                               self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        .                       }
        .                       // Visit everything except for private impl items.
        .                       hir::ItemKind::Impl(ref impl_) => {
      136 ( 0.00%)                  if item_level.is_some() {
      560 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates().ty().trait_ref();
        .           
       56 ( 0.00%)                      for impl_item_ref in impl_.items {
      252 ( 0.00%)                          let impl_item_level = self.get(impl_item_ref.id.def_id);
      324 ( 0.00%)                          if impl_item_level.is_some() {
      820 ( 0.00%)                              self.reach(impl_item_ref.id.def_id, impl_item_level)
        .                                           .generics()
        .                                           .predicates()
        .                                           .ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .           
        .                       // Visit everything, but enum variants have their own levels.
        .                       hir::ItemKind::Enum(ref def, _) => {
        6 ( 0.00%)                  if item_level.is_some() {
       32 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        .                           }
        6 ( 0.00%)                  for variant in def.variants {
      450 ( 0.00%)                      let variant_level = self.get(self.tcx.hir().local_def_id(variant.id));
       50 ( 0.00%)                      if variant_level.is_some() {
       72 ( 0.00%)                          for field in variant.data.fields() {
        .                                       self.reach(self.tcx.hir().local_def_id(field.hir_id), variant_level)
        .                                           .ty();
        .                                   }
        .                                   // Corner case: if the variant is reachable, but its
        .                                   // enum is not, make the enum reachable as well.
       72 ( 0.00%)                          self.update(item.def_id, variant_level);
        .                               }
        .                           }
        .                       }
        .                       // Visit everything, but foreign items have their own levels.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let foreign_item_level = self.get(foreign_item.id.def_id);
        .                               if foreign_item_level.is_some() {
-- line 806 ----------------------------------------
-- line 808 ----------------------------------------
        .                                       .generics()
        .                                       .predicates()
        .                                       .ty();
        .                               }
        .                           }
        .                       }
        .                       // Visit everything except for private fields.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       14 ( 0.00%)                  if item_level.is_some() {
       32 ( 0.00%)                      self.reach(item.def_id, item_level).generics().predicates();
        8 ( 0.00%)                      for field in struct_def.fields() {
      112 ( 0.00%)                          let def_id = self.tcx.hir().local_def_id(field.hir_id);
       48 ( 0.00%)                          let field_level = self.get(def_id);
       16 ( 0.00%)                          if field_level.is_some() {
        .                                       self.reach(def_id, field_level).ty();
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   }
        .           
        .                   let orig_level = mem::replace(&mut self.prev_level, item_level);
      768 ( 0.00%)          intravisit::walk_item(self, item);
      256 ( 0.00%)          self.prev_level = orig_level;
    2,048 ( 0.00%)      }
        .           
        .               fn visit_block(&mut self, b: &'tcx hir::Block<'tcx>) {
        .                   // Blocks can have public items, for example impls, but they always
        .                   // start as completely private regardless of publicity of a function,
        .                   // constant, type, field, etc., in which this block resides.
        .                   let orig_level = mem::replace(&mut self.prev_level, None);
        .                   intravisit::walk_block(self, b);
        .                   self.prev_level = orig_level;
        .               }
        .           }
        .           
        .           impl ReachEverythingInTheInterfaceVisitor<'_, '_> {
    1,120 ( 0.00%)      fn generics(&mut self) -> &mut Self {
      640 ( 0.00%)          for param in &self.ev.tcx.generics_of(self.item_def_id).params {
      180 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
        2 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        2 ( 0.00%)                      if has_default {
        .                                   self.visit(self.ev.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           GenericParamDefKind::Const { has_default, .. } => {
        .                               self.visit(self.ev.tcx.type_of(param.def_id));
        .                               if has_default {
        .                                   self.visit(self.ev.tcx.const_param_default(param.def_id));
        .                               }
        .                           }
        .                       }
        .                   }
        .                   self
    1,440 ( 0.00%)      }
        .           
      800 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
      480 ( 0.00%)          self.visit_predicates(self.ev.tcx.predicates_of(self.item_def_id));
        .                   self
      960 ( 0.00%)      }
        .           
      760 ( 0.00%)      fn ty(&mut self) -> &mut Self {
      456 ( 0.00%)          self.visit(self.ev.tcx.type_of(self.item_def_id));
        .                   self
      912 ( 0.00%)      }
        .           
        .               fn trait_ref(&mut self) -> &mut Self {
      336 ( 0.00%)          if let Some(trait_ref) = self.ev.tcx.impl_trait_ref(self.item_def_id) {
        .                       self.visit_trait(trait_ref);
        .                   }
        .                   self
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
    2,324 ( 0.00%)          self.ev.tcx
        .               }
    2,730 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   _kind: &str,
        .                   _descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
    1,638 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
    1,533 ( 0.00%)              if let (ty::Visibility::Public, _) | (_, Some(AccessLevel::ReachableFromImplTrait)) =
      384 ( 0.00%)                  (self.tcx().visibility(def_id.to_def_id()), self.access_level)
        .                       {
        .                           self.ev.update(def_id, self.access_level);
        .                       }
        .                   }
        .                   ControlFlow::CONTINUE
    3,822 ( 0.00%)      }
        .           }
        .           
        .           //////////////////////////////////////////////////////////////////////////////////////
        .           /// Name privacy visitor, checks privacy and reports violations.
        .           /// Most of name privacy checks are performed during the main resolution phase,
        .           /// or later in type checking when field accesses and associated items are resolved.
        .           /// This pass performs remaining checks for fields in struct expressions and patterns.
        .           //////////////////////////////////////////////////////////////////////////////////////
-- line 909 ----------------------------------------
-- line 920 ----------------------------------------
        .               /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).
        .               #[track_caller]
        .               fn typeck_results(&self) -> &'tcx ty::TypeckResults<'tcx> {
        .                   self.maybe_typeck_results
        .                       .expect("`NamePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               // Checks that a field in a struct constructor (expression or pattern) is accessible.
    1,350 ( 0.00%)      fn check_field(
        .                   &mut self,
        .                   use_ctxt: Span,        // syntax context of the field name at the use site
        .                   span: Span,            // span of the field pattern, e.g., `x: 0`
        .                   def: &'tcx ty::AdtDef, // definition of the struct or enum
        .                   field: &'tcx ty::FieldDef,
        .                   in_update_syntax: bool,
        .               ) {
      270 ( 0.00%)          if def.is_enum() {
        .                       return;
        .                   }
        .           
        .                   // definition of the field
        .                   let ident = Ident::new(kw::Empty, use_ctxt);
      216 ( 0.00%)          let hir_id = self.tcx.hir().local_def_id_to_hir_id(self.current_item);
      756 ( 0.00%)          let def_id = self.tcx.adjust_ident_and_get_scope(ident, def.did, hir_id).1;
      108 ( 0.00%)          if !field.vis.is_accessible_from(def_id, self.tcx) {
        .                       let label = if in_update_syntax {
        .                           format!("field `{}` is private", field.name)
        .                       } else {
        .                           "private field".to_string()
        .                       };
        .           
        .                       struct_span_err!(
        .                           self.tcx.sess,
-- line 952 ----------------------------------------
-- line 955 ----------------------------------------
        .                           "field `{}` of {} `{}` is private",
        .                           field.name,
        .                           def.variant_descr(),
        .                           self.tcx.def_path_str(def.did)
        .                       )
        .                       .span_label(span, label)
        .                       .emit();
        .                   }
    1,080 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      210 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
        .               fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
      845 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
      948 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
       81 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
        .               }
        .           
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
      382 ( 0.00%)          intravisit::walk_item(self, item);
      128 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           
  576,837 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  128,186 ( 0.00%)          if let hir::ExprKind::Struct(qpath, fields, ref base) = expr.kind {
      174 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, expr.hir_id);
       87 ( 0.00%)              let adt = self.typeck_results().expr_ty(expr).ty_adt_def().unwrap();
      261 ( 0.00%)              let variant = adt.variant_of_res(res);
      116 ( 0.00%)              if let Some(base) = *base {
        .                           // If the expression uses FRU we need to make sure all the unmentioned fields
        .                           // are checked for privacy (RFC 736). Rather than computing the set of
        .                           // unmentioned fields, just check them all.
        .                           for (vf_index, variant_field) in variant.fields.iter().enumerate() {
        .                               let field = fields.iter().find(|f| {
        .                                   self.tcx.field_index(f.hir_id, self.typeck_results()) == vf_index
        .                               });
        .                               let (use_ctxt, span) = match field {
        .                                   Some(field) => (field.ident.span, field.span),
        .                                   None => (base.span, base.span),
        .                               };
        .                               self.check_field(use_ctxt, span, adt, variant_field, true);
        .                           }
        .                       } else {
        .                           for field in fields {
       63 ( 0.00%)                      let use_ctxt = field.ident.span;
      460 ( 0.00%)                      let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      693 ( 0.00%)                      self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                           }
        .                       }
        .                   }
        .           
  640,930 ( 0.01%)          intravisit::walk_expr(self, expr);
        .               }
        .           
    4,856 ( 0.00%)      fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {
    1,251 ( 0.00%)          if let PatKind::Struct(ref qpath, fields, _) = pat.kind {
      259 ( 0.00%)              let res = self.typeck_results().qpath_res(qpath, pat.hir_id);
      148 ( 0.00%)              let adt = self.typeck_results().pat_ty(pat).ty_adt_def().unwrap();
      296 ( 0.00%)              let variant = adt.variant_of_res(res);
        .                       for field in fields {
       72 ( 0.00%)                  let use_ctxt = field.ident.span;
      450 ( 0.00%)                  let index = self.tcx.field_index(field.hir_id, self.typeck_results());
      720 ( 0.00%)                  self.check_field(use_ctxt, field.span, adt, &variant.fields[index], false);
        .                       }
        .                   }
        .           
    5,463 ( 0.00%)          intravisit::walk_pat(self, pat);
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////////////////
        .           /// Type privacy visitor, checks types for privacy and reports violations.
        .           /// Both explicitly written types and inferred types of expressions and patterns are checked.
        .           /// Checks are performed on "semantic" types regardless of names and their hygiene.
        .           ////////////////////////////////////////////////////////////////////////////////////////////
-- line 1045 ----------------------------------------
-- line 1061 ----------------------------------------
        .                       .expect("`TypePrivacyVisitor::typeck_results` called outside of body")
        .               }
        .           
        .               fn item_is_accessible(&self, did: DefId) -> bool {
        .                   self.tcx.visibility(did).is_accessible_from(self.current_item.to_def_id(), self.tcx)
        .               }
        .           
        .               // Take node-id of an expression or pattern and check its type for privacy.
  453,964 ( 0.01%)      fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {
   64,852 ( 0.00%)          self.span = span;
   64,852 ( 0.00%)          let typeck_results = self.typeck_results();
        .                   let result: ControlFlow<()> = try {
  259,408 ( 0.00%)              self.visit(typeck_results.node_type(id))?;
  518,816 ( 0.01%)              self.visit(typeck_results.node_substs(id))?;
  583,668 ( 0.01%)              if let Some(adjustments) = typeck_results.adjustments().get(id) {
        .                           adjustments.iter().try_for_each(|adjustment| self.visit(adjustment.target))?;
        .                       }
        .                   };
        .                   result.is_break()
  518,816 ( 0.01%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
  109,802 ( 0.00%)          let is_error = !self.item_is_accessible(def_id);
        .                   if is_error {
        .                       self.tcx
        .                           .sess
        .                           .struct_span_err(self.span, &format!("{} `{}` is private", kind, descr))
        .                           .span_label(self.span, &format!("private {}", kind))
        .                           .emit();
        .                   }
        .                   is_error
-- line 1091 ----------------------------------------
-- line 1093 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      210 ( 0.00%)          self.tcx.hir()
        .               }
        .           
        .               fn visit_mod(&mut self, _m: &'tcx hir::Mod<'tcx>, _s: Span, _n: hir::HirId) {
        .                   // Don't visit nested modules, since we run a separate visitor walk
        .                   // for each module in `privacy_access_levels`
        .               }
        .           
    1,580 ( 0.00%)      fn visit_nested_body(&mut self, body: hir::BodyId) {
        .                   let old_maybe_typeck_results =
      474 ( 0.00%)              self.maybe_typeck_results.replace(self.tcx.typeck_body(body));
      948 ( 0.00%)          let body = self.tcx.hir().body(body);
        .                   self.visit_body(body);
      158 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
    1,264 ( 0.00%)      }
        .           
        .               fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {
      515 ( 0.00%)          match generic_arg {
      196 ( 0.00%)              hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_infer(inf),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
   74,396 ( 0.00%)      fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'tcx>) {
   21,256 ( 0.00%)          self.span = hir_ty.span;
   31,884 ( 0.00%)          if let Some(typeck_results) = self.maybe_typeck_results {
        .                       // Types in bodies.
   30,141 ( 0.00%)              if self.visit(typeck_results.node_type(hir_ty.hir_id)).is_break() {
        .                           return;
        .                       }
        .                   } else {
        .                       // Types in signatures.
        .                       // FIXME: This is very ineffective. Ideally each HIR type should be converted
        .                       // into a semantic type only once and the result should be cached somehow.
    1,743 ( 0.00%)              if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, hir_ty)).is_break() {
        .                           return;
        .                       }
        .                   }
        .           
   31,884 ( 0.00%)          intravisit::walk_ty(self, hir_ty);
   63,768 ( 0.00%)      }
        .           
        .               fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {
        .                   self.span = inf.span;
        .                   if let Some(typeck_results) = self.maybe_typeck_results {
        .                       if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {
        .                           if self.visit(ty).is_break() {
        .                               return;
        .                           }
-- line 1150 ----------------------------------------
-- line 1152 ----------------------------------------
        .                           // We don't do anything for const infers here.
        .                       }
        .                   } else {
        .                       bug!("visit_infer without typeck_results");
        .                   }
        .                   intravisit::walk_inf(self, inf);
        .               }
        .           
      640 ( 0.00%)      fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {
      240 ( 0.00%)          self.span = trait_ref.path.span;
       80 ( 0.00%)          if self.maybe_typeck_results.is_none() {
        .                       // Avoid calling `hir_trait_to_predicates` in bodies, it will ICE.
        .                       // The traits' privacy in bodies is already checked as a part of trait object types.
       80 ( 0.00%)              let bounds = rustc_typeck::hir_trait_to_predicates(
       80 ( 0.00%)                  self.tcx,
        .                           trait_ref,
        .                           // NOTE: This isn't really right, but the actual type doesn't matter here. It's
        .                           // just required by `ty::TraitRef`.
      240 ( 0.00%)                  self.tcx.types.never,
        .                       );
        .           
      720 ( 0.00%)              for (trait_predicate, _, _) in bounds.trait_bounds {
      560 ( 0.00%)                  if self.visit_trait(trait_predicate.skip_binder()).is_break() {
        .                               return;
        .                           }
        .                       }
        .           
      550 ( 0.00%)              for (poly_predicate, _) in bounds.projection_bounds {
       60 ( 0.00%)                  let pred = poly_predicate.skip_binder();
        .                           let poly_pred_term = self.visit(pred.term);
       40 ( 0.00%)                  if poly_pred_term.is_break()
        .                               || self.visit_projection_ty(pred.projection_ty).is_break()
        .                           {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
        .                   intravisit::walk_trait_ref(self, trait_ref);
      640 ( 0.00%)      }
        .           
        .               // Check types of expressions
  576,837 ( 0.01%)      fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {
  576,837 ( 0.01%)          if self.check_expr_pat_type(expr.hir_id, expr.span) {
        .                       // Do not check nested expressions if the error already happened.
        .                       return;
        .                   }
  447,677 ( 0.01%)          match expr.kind {
      121 ( 0.00%)              hir::ExprKind::Assign(_, rhs, _) | hir::ExprKind::Match(rhs, ..) => {
        .                           // Do not report duplicate errors for `x = y` and `match x { ... }`.
      644 ( 0.00%)                  if self.check_expr_pat_type(rhs.hir_id, rhs.span) {
        .                               return;
        .                           }
        .                       }
      212 ( 0.00%)              hir::ExprKind::MethodCall(segment, ..) => {
        .                           // Method calls have to be checked specially.
      424 ( 0.00%)                  self.span = segment.ident.span;
    1,272 ( 0.00%)                  if let Some(def_id) = self.typeck_results().type_dependent_def_id(expr.hir_id) {
      636 ( 0.00%)                      if self.visit(self.tcx.type_of(def_id)).is_break() {
        .                                   return;
        .                               }
        .                           } else {
        .                               self.tcx
        .                                   .sess
        .                                   .delay_span_bug(expr.span, "no type-dependent def for method call");
        .                           }
        .                       }
        .                       _ => {}
        .                   }
        .           
  192,279 ( 0.00%)          intravisit::walk_expr(self, expr);
  512,744 ( 0.01%)      }
        .           
        .               // Prohibit access to associated items with insufficient nominal visibility.
        .               //
        .               // Additionally, until better reachability analysis for macros 2.0 is available,
        .               // we prohibit access to private statics from other crates, this allows to give
        .               // more code internal visibility at link time. (Access to private functions
        .               // is already prohibited by type privacy for function types.)
  214,130 ( 0.00%)      fn visit_qpath(&mut self, qpath: &'tcx hir::QPath<'tcx>, id: hir::HirId, span: Span) {
   42,826 ( 0.00%)          let def = match qpath {
   34,158 ( 0.00%)              hir::QPath::Resolved(_, path) => match path.res {
   63,030 ( 0.00%)                  Res::Def(kind, def_id) => Some((kind, def_id)),
        .                           _ => None,
        .                       },
   10,027 ( 0.00%)              hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .maybe_typeck_results
   90,243 ( 0.00%)                  .and_then(|typeck_results| typeck_results.type_dependent_def(id)),
        .                   };
        .                   let def = def.filter(|(kind, _)| {
   41,064 ( 0.00%)              matches!(
        .                           kind,
        .                           DefKind::AssocFn | DefKind::AssocConst | DefKind::AssocTy | DefKind::Static
        .                       )
        .                   });
        .                   if let Some((kind, def_id)) = def {
        .                       let is_local_static =
   39,980 ( 0.00%)                  if let DefKind::Static = kind { def_id.is_local() } else { false };
   59,690 ( 0.00%)              if !self.item_is_accessible(def_id) && !is_local_static {
        .                           let sess = self.tcx.sess;
        .                           let sm = sess.source_map();
        .                           let name = match qpath {
        .                               hir::QPath::Resolved(..) | hir::QPath::LangItem(..) => {
        .                                   sm.span_to_snippet(qpath.span()).ok()
        .                               }
        .                               hir::QPath::TypeRelative(_, segment) => Some(segment.ident.to_string()),
        .                           };
-- line 1258 ----------------------------------------
-- line 1263 ----------------------------------------
        .                           };
        .                           sess.struct_span_err(span, &msg)
        .                               .span_label(span, &format!("private {}", kind))
        .                               .emit();
        .                           return;
        .                       }
        .                   }
        .           
  235,543 ( 0.00%)          intravisit::walk_qpath(self, qpath, id, span);
        .               }
        .           
        .               // Check types of patterns.
        .               fn visit_pat(&mut self, pattern: &'tcx hir::Pat<'tcx>) {
    3,808 ( 0.00%)          if self.check_expr_pat_type(pattern.hir_id, pattern.span) {
        .                       // Do not check nested patterns if the error already happened.
        .                       return;
        .                   }
        .           
    2,019 ( 0.00%)          intravisit::walk_pat(self, pattern);
        .               }
        .           
      375 ( 0.00%)      fn visit_local(&mut self, local: &'tcx hir::Local<'tcx>) {
      225 ( 0.00%)          if let Some(init) = local.init {
      420 ( 0.00%)              if self.check_expr_pat_type(init.hir_id, init.span) {
        .                           // Do not report duplicate errors for `let x = y`.
        .                           return;
        .                       }
        .                   }
        .           
        .                   intravisit::walk_local(self, local);
      232 ( 0.00%)      }
        .           
        .               // Check types in item interfaces.
        .               fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          let orig_current_item = mem::replace(&mut self.current_item, item.def_id);
        .                   let old_maybe_typeck_results = self.maybe_typeck_results.take();
      382 ( 0.00%)          intravisit::walk_item(self, item);
      128 ( 0.00%)          self.maybe_typeck_results = old_maybe_typeck_results;
      142 ( 0.00%)          self.current_item = orig_current_item;
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for TypePrivacyVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
  354,600 ( 0.01%)          self.tcx
        .               }
  823,515 ( 0.01%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
  494,109 ( 0.01%)      }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////////
        .           /// Obsolete visitors for checking for private items in public interfaces.
        .           /// These visitors are supposed to be kept in frozen state and produce an
        .           /// "old error node set". For backward compatibility the new visitor reports
        .           /// warnings instead of hard errors when the erroneous node is not in this old set.
        .           ///////////////////////////////////////////////////////////////////////////////
-- line 1328 ----------------------------------------
-- line 1342 ----------------------------------------
        .               /// Whether we've recurred at all (i.e., if we're pointing at the
        .               /// first type on which `visit_ty` was called).
        .               at_outer_type: bool,
        .               /// Whether that first type is a public path.
        .               outer_type_is_public_path: bool,
        .           }
        .           
        .           impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
      140 ( 0.00%)      fn path_is_private_type(&self, path: &hir::Path<'_>) -> bool {
      420 ( 0.00%)          let did = match path.res {
        .                       Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => return false,
      564 ( 0.00%)              res => res.def_id(),
        .                   };
        .           
        .                   // A path can only be private if:
        .                   // it's in this crate...
       94 ( 0.00%)          if let Some(did) = did.as_local() {
        .                       // .. and it corresponds to a private type in the AST (this returns
        .                       // `None` for type parameters).
      420 ( 0.00%)              match self.tcx.hir().find(self.tcx.hir().local_def_id_to_hir_id(did)) {
      336 ( 0.00%)                  Some(Node::Item(item)) => !item.vis.node.is_pub(),
        .                           Some(_) | None => false,
        .                       }
        .                   } else {
        .                       false
        .                   }
      280 ( 0.00%)      }
        .           
        .               fn trait_is_public(&self, trait_id: LocalDefId) -> bool {
        .                   // FIXME: this would preferably be using `exported_items`, but all
        .                   // traits are exported currently (see `EmbargoVisitor.exported_trait`).
        .                   self.access_levels.is_public(trait_id)
        .               }
        .           
        .               fn check_generic_bound(&mut self, bound: &hir::GenericBound<'_>) {
-- line 1376 ----------------------------------------
-- line 1377 ----------------------------------------
        .                   if let hir::GenericBound::Trait(ref trait_ref, _) = *bound {
        .                       if self.path_is_private_type(trait_ref.trait_ref.path) {
        .                           self.old_error_set.insert(trait_ref.trait_ref.hir_ref_id);
        .                       }
        .                   }
        .               }
        .           
        .               fn item_is_public(&self, def_id: LocalDefId, vis: &hir::Visibility<'_>) -> bool {
      104 ( 0.00%)          self.access_levels.is_reachable(def_id) || vis.node.is_pub()
        .               }
        .           }
        .           
        .           impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {
        .               fn visit_generic_arg(&mut self, generic_arg: &'v hir::GenericArg<'v>) {
        .                   match generic_arg {
        .                       hir::GenericArg::Type(t) => self.visit_ty(t),
        .                       hir::GenericArg::Infer(inf) => self.visit_ty(&inf.to_ty()),
        .                       hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, ty: &hir::Ty<'_>) {
      320 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = ty.kind {
      256 ( 0.00%)              if self.inner.path_is_private_type(path) {
        .                           self.contains_private = true;
        .                           // Found what we're looking for, so let's stop working.
        .                           return;
        .                       }
        .                   }
        .                   if let hir::TyKind::Path(_) = ty.kind {
        .                       if self.at_outer_type {
       59 ( 0.00%)                  self.outer_type_is_public_path = true;
        .                       }
        .                   }
      118 ( 0.00%)          self.at_outer_type = false;
      118 ( 0.00%)          intravisit::walk_ty(self, ty)
      236 ( 0.00%)      }
        .           
        .               // Don't want to recurse into `[, .. expr]`.
        .               fn visit_expr(&mut self, _: &hir::Expr<'_>) {}
        .           }
        .           
        .           impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {
        .               type NestedFilter = nested_filter::All;
        .           
        .               /// We want to visit items in the context of their containing
        .               /// module and so forth, so supply a crate for doing a deep walk.
        .               fn nested_visit_map(&mut self) -> Self::Map {
      166 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    1,062 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      472 ( 0.00%)          match item.kind {
        .                       // Contents of a private mod can be re-exported, so we need
        .                       // to check internals.
        .                       hir::ItemKind::Mod(_) => {}
        .           
        .                       // An `extern {}` doesn't introduce a new privacy
        .                       // namespace (the contents have their own privacies).
        .                       hir::ItemKind::ForeignMod { .. } => {}
        .           
-- line 1437 ----------------------------------------
-- line 1454 ----------------------------------------
        .                           // `impl [... for] Private` is never visible.
        .                           let self_contains_private;
        .                           // `impl [... for] Public<...>`, but not `impl [... for]
        .                           // Vec<Public>` or `(Public,)`, etc.
        .                           let self_is_public_path;
        .           
        .                           // Check the properties of the `Self` type:
        .                           {
      256 ( 0.00%)                      let mut visitor = ObsoleteCheckTypeForPrivatenessVisitor {
        .                                   inner: self,
        .                                   contains_private: false,
        .                                   at_outer_type: true,
        .                                   outer_type_is_public_path: false,
        .                               };
       64 ( 0.00%)                      visitor.visit_ty(impl_.self_ty);
        .                               self_contains_private = visitor.contains_private;
        .                               self_is_public_path = visitor.outer_type_is_public_path;
        .                           }
        .           
        .                           // Miscellaneous info about the impl:
        .           
        .                           // `true` iff this is `impl Private for ...`.
        .                           let not_private_trait = impl_.of_trait.as_ref().map_or(
        .                               true, // no trait counts as public trait
        .                               |tr| {
      171 ( 0.00%)                          if let Some(def_id) = tr.path.res.def_id().as_local() {
        .                                       self.trait_is_public(def_id)
        .                                   } else {
        .                                       true // external traits must be public
        .                                   }
        .                               },
        .                           );
        .           
        .                           // `true` iff this is a trait impl or at least one method is public.
-- line 1487 ----------------------------------------
-- line 1488 ----------------------------------------
        .                           //
        .                           // `impl Public { $( fn ...() {} )* }` is not visible.
        .                           //
        .                           // This is required over just using the methods' privacy
        .                           // directly because we might have `impl<T: Foo<Private>> ...`,
        .                           // and we shouldn't warn about the generics if all the methods
        .                           // are private (because `T` won't be visible externally).
        .                           let trait_or_some_public_method = impl_.of_trait.is_some()
        7 ( 0.00%)                      || impl_.items.iter().any(|impl_item_ref| {
       36 ( 0.00%)                          let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
       53 ( 0.00%)                          match impl_item.kind {
        .                                       hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..) => {
        .                                           self.access_levels.is_reachable(impl_item_ref.id.def_id)
        .                                       }
        .                                       hir::ImplItemKind::TyAlias(_) => false,
        .                                   }
        .                               });
        .           
      116 ( 0.00%)                  if !self_contains_private && not_private_trait && trait_or_some_public_method {
        .                               intravisit::walk_generics(self, &impl_.generics);
        .           
      112 ( 0.00%)                      match impl_.of_trait {
        .                                   None => {
        1 ( 0.00%)                              for impl_item_ref in impl_.items {
        .                                           // This is where we choose whether to walk down
        .                                           // further into the impl to check its items. We
        .                                           // should only walk into public items so that we
        .                                           // don't erroneously report errors for private
        .                                           // types in private items.
      120 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      105 ( 0.00%)                                  match impl_item.kind {
        .                                               hir::ImplItemKind::Const(..) | hir::ImplItemKind::Fn(..)
       40 ( 0.00%)                                          if self
       20 ( 0.00%)                                              .item_is_public(impl_item.def_id, &impl_item.vis) =>
        .                                               {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               hir::ImplItemKind::TyAlias(..) => {
        .                                                   intravisit::walk_impl_item(self, impl_item)
        .                                               }
        .                                               _ => {}
        .                                           }
-- line 1529 ----------------------------------------
-- line 1538 ----------------------------------------
        .                                       //
        .                                       // Those in 1. can only occur if the trait is in
        .                                       // this crate and will've been warned about on the
        .                                       // trait definition (there's no need to warn twice
        .                                       // so we don't check the methods).
        .                                       //
        .                                       // Those in 2. are warned via walk_generics and this
        .                                       // call here.
      165 ( 0.00%)                              intravisit::walk_path(self, tr.path);
        .           
        .                                       // Those in 3. are warned with this call.
       55 ( 0.00%)                              for impl_item_ref in impl_.items {
      245 ( 0.00%)                                  let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
      371 ( 0.00%)                                  if let hir::ImplItemKind::TyAlias(ty) = impl_item.kind {
        .                                               self.visit_ty(ty);
        .                                           }
        .                                       }
        .                                   }
        .                               }
       24 ( 0.00%)                  } else if impl_.of_trait.is_none() && self_is_public_path {
        .                               // `impl Public<Private> { ... }`. Any public static
        .                               // methods will be visible as `Public::foo`.
        .                               let mut found_pub_static = false;
        3 ( 0.00%)                      for impl_item_ref in impl_.items {
       12 ( 0.00%)                          if self.access_levels.is_reachable(impl_item_ref.id.def_id)
        6 ( 0.00%)                              || self.tcx.visibility(impl_item_ref.id.def_id)
        .                                           == ty::Visibility::Public
        .                                   {
        .                                       let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);
        .                                       match impl_item_ref.kind {
        .                                           AssocItemKind::Const => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
-- line 1571 ----------------------------------------
-- line 1572 ----------------------------------------
        .                                           AssocItemKind::Fn { has_self: false } => {
        .                                               found_pub_static = true;
        .                                               intravisit::walk_impl_item(self, impl_item);
        .                                           }
        .                                           _ => {}
        .                                       }
        .                                   }
        .                               }
        6 ( 0.00%)                      if found_pub_static {
        .                                   intravisit::walk_generics(self, &impl_.generics)
        .                               }
        .                           }
        .                           return;
        .                       }
        .           
        .                       // `type ... = ...;` can contain private types, because
        .                       // we're introducing a new name.
        .                       hir::ItemKind::TyAlias(..) => return,
        .           
        .                       // Not at all public, so we don't care.
      345 ( 0.00%)              _ if !self.item_is_public(item.def_id, &item.vis) => {
        .                           return;
        .                       }
        .           
        .                       _ => {}
        .                   }
        .           
        .                   // We've carefully constructed it so that if we're here, then
        .                   // any `visit_ty`'s will be called on things that are in
        .                   // public signatures, i.e., things that we're interested in for
        .                   // this visitor.
      210 ( 0.00%)          intravisit::walk_item(self, item);
      776 ( 0.00%)      }
        .           
      208 ( 0.00%)      fn visit_generics(&mut self, generics: &'tcx hir::Generics<'tcx>) {
        .                   for param in generics.params {
        .                       for bound in param.bounds {
        .                           self.check_generic_bound(bound);
        .                       }
        .                   }
       26 ( 0.00%)          for predicate in generics.where_clause.predicates {
        .                       match predicate {
        .                           hir::WherePredicate::BoundPredicate(bound_pred) => {
        .                               for bound in bound_pred.bounds.iter() {
        .                                   self.check_generic_bound(bound)
        .                               }
        .                           }
        .                           hir::WherePredicate::RegionPredicate(_) => {}
        .                           hir::WherePredicate::EqPredicate(eq_pred) => {
        .                               self.visit_ty(eq_pred.rhs_ty);
        .                           }
        .                       }
        .                   }
      208 ( 0.00%)      }
        .           
        .               fn visit_foreign_item(&mut self, item: &'tcx hir::ForeignItem<'tcx>) {
        .                   if self.access_levels.is_reachable(item.def_id) {
        .                       intravisit::walk_foreign_item(self, item)
        .                   }
        .               }
        .           
        .               fn visit_ty(&mut self, t: &'tcx hir::Ty<'tcx>) {
      327 ( 0.00%)          if let hir::TyKind::Path(hir::QPath::Resolved(_, path)) = t.kind {
      148 ( 0.00%)              if self.path_is_private_type(path) {
        .                           self.old_error_set.insert(t.hir_id);
        .                       }
        .                   }
      579 ( 0.00%)          intravisit::walk_ty(self, t)
        .               }
        .           
      144 ( 0.00%)      fn visit_variant(
        .                   &mut self,
        .                   v: &'tcx hir::Variant<'tcx>,
        .                   g: &'tcx hir::Generics<'tcx>,
        .                   item_id: hir::HirId,
        .               ) {
      180 ( 0.00%)          if self.access_levels.is_reachable(self.tcx.hir().local_def_id(v.id)) {
       18 ( 0.00%)              self.in_variant = true;
        .                       intravisit::walk_variant(self, v, g, item_id);
       18 ( 0.00%)              self.in_variant = false;
        .                   }
      126 ( 0.00%)      }
        .           
       50 ( 0.00%)      fn visit_field_def(&mut self, s: &'tcx hir::FieldDef<'tcx>) {
       60 ( 0.00%)          if s.vis.node.is_pub() || self.in_variant {
        .                       intravisit::walk_field_def(self, s);
        .                   }
       40 ( 0.00%)      }
        .           
        .               // We don't need to introspect into these at all: an
        .               // expression/block context can't possibly contain exported things.
        .               // (Making them no-ops stops us from traversing the whole AST without
        .               // having to be super careful about our `walk_...` calls above.)
        .               fn visit_block(&mut self, _: &'tcx hir::Block<'tcx>) {}
        .               fn visit_expr(&mut self, _: &'tcx hir::Expr<'tcx>) {}
        .           }
-- line 1667 ----------------------------------------
-- line 1679 ----------------------------------------
        .               /// The visitor checks that each component type is at least this visible.
        .               required_visibility: ty::Visibility,
        .               has_pub_restricted: bool,
        .               has_old_errors: bool,
        .               in_assoc_ty: bool,
        .           }
        .           
        .           impl SearchInterfaceForPrivateItemsVisitor<'_> {
      973 ( 0.00%)      fn generics(&mut self) -> &mut Self {
      417 ( 0.00%)          for param in &self.tcx.generics_of(self.item_def_id).params {
      135 ( 0.00%)              match param.kind {
        .                           GenericParamDefKind::Lifetime => {}
        9 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
        9 ( 0.00%)                      if has_default {
        .                                   self.visit(self.tcx.type_of(param.def_id));
        .                               }
        .                           }
        .                           // FIXME(generic_const_exprs): May want to look inside const here
        .                           GenericParamDefKind::Const { .. } => {
        .                               self.visit(self.tcx.type_of(param.def_id));
        .                           }
        .                       }
        .                   }
        .                   self
    1,112 ( 0.00%)      }
        .           
      660 ( 0.00%)      fn predicates(&mut self) -> &mut Self {
        .                   // N.B., we use `explicit_predicates_of` and not `predicates_of`
        .                   // because we don't want to report privacy errors due to where
        .                   // clauses that the compiler inferred. We only want to
        .                   // consider the ones that the user wrote. This is important
        .                   // for the inferred outlives rules; see
        .                   // `src/test/ui/rfc-2093-infer-outlives/privacy.rs`.
      264 ( 0.00%)          self.visit_predicates(self.tcx.explicit_predicates_of(self.item_def_id));
        .                   self
      792 ( 0.00%)      }
        .           
       35 ( 0.00%)      fn bounds(&mut self) -> &mut Self {
        .                   self.visit_predicates(ty::GenericPredicates {
        .                       parent: None,
       14 ( 0.00%)              predicates: self.tcx.explicit_item_bounds(self.item_def_id),
        .                   });
        .                   self
       35 ( 0.00%)      }
        .           
      660 ( 0.00%)      fn ty(&mut self) -> &mut Self {
      264 ( 0.00%)          self.visit(self.tcx.type_of(self.item_def_id));
        .                   self
      660 ( 0.00%)      }
        .           
        .               fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {
    1,996 ( 0.00%)          if self.leaks_private_dep(def_id) {
        .                       self.tcx.struct_span_lint_hir(
        .                           lint::builtin::EXPORTED_PRIVATE_DEPENDENCIES,
        .                           self.tcx.hir().local_def_id_to_hir_id(self.item_def_id),
        .                           self.tcx.def_span(self.item_def_id.to_def_id()),
        .                           |lint| {
        .                               lint.build(&format!(
        .                                   "{} `{}` from private dependency '{}' in public \
        .                                                           interface",
-- line 1738 ----------------------------------------
-- line 1740 ----------------------------------------
        .                                   descr,
        .                                   self.tcx.crate_name(def_id.krate)
        .                               ))
        .                               .emit()
        .                           },
        .                       );
        .                   }
        .           
    1,008 ( 0.00%)          let hir_id = match def_id.as_local() {
      290 ( 0.00%)              Some(def_id) => self.tcx.hir().local_def_id_to_hir_id(def_id),
        .                       None => return false,
        .                   };
        .           
        .                   let vis = self.tcx.visibility(def_id);
      519 ( 0.00%)          if !vis.is_at_least(self.required_visibility, self.tcx) {
        .                       let vis_descr = match vis {
        .                           ty::Visibility::Public => "public",
        .                           ty::Visibility::Invisible => "private",
        .                           ty::Visibility::Restricted(vis_def_id) => {
        .                               if vis_def_id == self.tcx.parent_module(hir_id).to_def_id() {
        .                                   "private"
        .                               } else if vis_def_id.is_top_level_module() {
        .                                   "crate-private"
-- line 1762 ----------------------------------------
-- line 1792 ----------------------------------------
        .                   false
        .               }
        .           
        .               /// An item is 'leaked' from a private dependency if all
        .               /// of the following are true:
        .               /// 1. It's contained within a public type
        .               /// 2. It comes from a private crate
        .               fn leaks_private_dep(&self, item_id: DefId) -> bool {
    1,284 ( 0.00%)          let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);
        .           
        .                   tracing::debug!("leaks_private_dep(item_id={:?})={}", item_id, ret);
        .                   ret
        .               }
        .           }
        .           
        .           impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {
        .               fn tcx(&self) -> TyCtxt<'tcx> {
      962 ( 0.00%)          self.tcx
        .               }
    6,848 ( 0.00%)      fn visit_def_id(
        .                   &mut self,
        .                   def_id: DefId,
        .                   kind: &str,
        .                   descr: &dyn fmt::Display,
        .               ) -> ControlFlow<Self::BreakTy> {
        .                   if self.check_def_id(def_id, kind, descr) {
        .                       ControlFlow::BREAK
        .                   } else {
        .                       ControlFlow::CONTINUE
        .                   }
    3,852 ( 0.00%)      }
        .           }
        .           
        .           struct PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               tcx: TyCtxt<'tcx>,
        .               has_pub_restricted: bool,
        .               old_error_set_ancestry: LocalDefIdSet,
        .           }
        .           
        .           impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               fn check(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   required_visibility: ty::Visibility,
        .               ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {
    1,225 ( 0.00%)          SearchInterfaceForPrivateItemsVisitor {
      101 ( 0.00%)              tcx: self.tcx,
        .                       item_def_id: def_id,
        .                       required_visibility,
      173 ( 0.00%)              has_pub_restricted: self.has_pub_restricted,
        .                       has_old_errors: self.old_error_set_ancestry.contains(&def_id),
        .                       in_assoc_ty: false,
        .                   }
        .               }
        .           
    1,092 ( 0.00%)      fn check_assoc_item(
        .                   &self,
        .                   def_id: LocalDefId,
        .                   assoc_item_kind: AssocItemKind,
        .                   defaultness: hir::Defaultness,
        .                   vis: ty::Visibility,
        .               ) {
        .                   let mut check = self.check(def_id, vis);
        .           
      168 ( 0.00%)          let (check_ty, is_assoc_ty) = match assoc_item_kind {
        .                       AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),
       18 ( 0.00%)              AssocItemKind::Type => (defaultness.has_value(), true),
        .                   };
      168 ( 0.00%)          check.in_assoc_ty = is_assoc_ty;
      336 ( 0.00%)          check.generics().predicates();
       18 ( 0.00%)          if check_ty {
       84 ( 0.00%)              check.ty();
        .                   }
      672 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {
        .               type NestedFilter = nested_filter::OnlyBodies;
        .           
        .               fn nested_visit_map(&mut self) -> Self::Map {
       98 ( 0.00%)          self.tcx.hir()
        .               }
        .           
    1,152 ( 0.00%)      fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {
      128 ( 0.00%)          let tcx = self.tcx;
      128 ( 0.00%)          let item_visibility = tcx.visibility(item.def_id);
        .           
      640 ( 0.00%)          match item.kind {
        .                       // Crates are always public.
        .                       hir::ItemKind::ExternCrate(..) => {}
        .                       // All nested items are checked by `visit_item`.
        .                       hir::ItemKind::Mod(..) => {}
        .                       // Checked in resolve.
        .                       hir::ItemKind::Use(..) => {}
        .                       // No subitems.
        .                       hir::ItemKind::Macro(..) | hir::ItemKind::GlobalAsm(..) => {}
        .                       // Subitems of these items have inherited publicity.
        .                       hir::ItemKind::Const(..)
        .                       | hir::ItemKind::Static(..)
        .                       | hir::ItemKind::Fn(..)
        .                       | hir::ItemKind::TyAlias(..) => {
      186 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates().ty();
        .                       }
        .                       hir::ItemKind::OpaqueTy(..) => {
        .                           // `ty()` for opaque types is the underlying type,
        .                           // it's not a part of interface, so we skip it.
       35 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().bounds();
        .                       }
        .                       hir::ItemKind::Trait(.., trait_item_refs) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .           
        .                           for trait_item_ref in trait_item_refs {
        .                               self.check_assoc_item(
        .                                   trait_item_ref.id.def_id,
        .                                   trait_item_ref.kind,
-- line 1906 ----------------------------------------
-- line 1912 ----------------------------------------
        .                                   self.check(trait_item_ref.id.def_id, item_visibility).bounds();
        .                               }
        .                           }
        .                       }
        .                       hir::ItemKind::TraitAlias(..) => {
        .                           self.check(item.def_id, item_visibility).generics().predicates();
        .                       }
        .                       hir::ItemKind::Enum(ref def, _) => {
       12 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
        3 ( 0.00%)                  for variant in def.variants {
       25 ( 0.00%)                      for field in variant.data.fields() {
       24 ( 0.00%)                          self.check(self.tcx.hir().local_def_id(field.hir_id), item_visibility).ty();
        .                               }
        .                           }
        .                       }
        .                       // Subitems of foreign modules have their own publicity.
        .                       hir::ItemKind::ForeignMod { items, .. } => {
        .                           for foreign_item in items {
        .                               let vis = tcx.visibility(foreign_item.id.def_id);
        .                               self.check(foreign_item.id.def_id, vis).generics().predicates().ty();
        .                           }
        .                       }
        .                       // Subitems of structs and unions have their own publicity.
        .                       hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {
       28 ( 0.00%)                  self.check(item.def_id, item_visibility).generics().predicates();
        .           
       21 ( 0.00%)                  for field in struct_def.fields() {
       90 ( 0.00%)                      let def_id = tcx.hir().local_def_id(field.hir_id);
        .                               let field_visibility = tcx.visibility(def_id);
       45 ( 0.00%)                      self.check(def_id, min(item_visibility, field_visibility, tcx)).ty();
        .                           }
        .                       }
        .                       // An inherent impl is public when its type is public
        .                       // Subitems of inherent impls have their own publicity.
        .                       // A trait impl is public when both its type and its trait are public
        .                       // Subitems of trait impls have inherited publicity.
        .                       hir::ItemKind::Impl(ref impl_) => {
      272 ( 0.00%)                  let impl_vis = ty::Visibility::of_impl(item.def_id, tcx, &Default::default());
        .                           // check that private components do not appear in the generics or predicates of inherent impls
        .                           // this check is intentionally NOT performed for impls of traits, per #90586
      136 ( 0.00%)                  if impl_.of_trait.is_none() {
       35 ( 0.00%)                      self.check(item.def_id, impl_vis).generics().predicates();
        .                           }
       68 ( 0.00%)                  for impl_item_ref in impl_.items {
       91 ( 0.00%)                      let impl_item_vis = if impl_.of_trait.is_none() {
       28 ( 0.00%)                          min(tcx.visibility(impl_item_ref.id.def_id), impl_vis, tcx)
        .                               } else {
        .                                   impl_vis
        .                               };
      476 ( 0.00%)                      self.check_assoc_item(
       84 ( 0.00%)                          impl_item_ref.id.def_id,
        .                                   impl_item_ref.kind,
        .                                   impl_item_ref.defaultness,
        .                                   impl_item_vis,
        .                               );
        .                           }
        .                       }
        .                   }
    1,024 ( 0.00%)      }
        .           }
        .           
        .           pub fn provide(providers: &mut Providers) {
        8 ( 0.00%)      *providers = Providers {
        .                   visibility,
        .                   privacy_access_levels,
        .                   check_private_in_public,
        .                   check_mod_privacy,
        .                   ..*providers
        .               };
        1 ( 0.00%)  }
        .           
    2,700 ( 0.00%)  fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {
      300 ( 0.00%)      let def_id = def_id.expect_local();
        .               match tcx.resolutions(()).visibilities.get(&def_id) {
      436 ( 0.00%)          Some(vis) => *vis,
        .                   None => {
        .                       let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);
      917 ( 0.00%)              match tcx.hir().get(hir_id) {
        .                           // Unique types created for closures participate in type privacy checking.
        .                           // They have visibilities inherited from the module they are defined in.
        .                           Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {
      114 ( 0.00%)                      ty::Visibility::Restricted(tcx.parent_module(hir_id).to_def_id())
        .                           }
        .                           // - AST lowering may clone `use` items and the clones don't
        .                           //   get their entries in the resolver's visibility table.
        .                           // - AST lowering also creates opaque type items with inherited visibilies.
        .                           //   Visibility on them should have no effect, but to avoid the visibility
        .                           //   query failing on some items, we provide it for opaque types as well.
        .                           Node::Item(hir::Item {
        7 ( 0.00%)                      vis,
        .                               kind: hir::ItemKind::Use(..) | hir::ItemKind::OpaqueTy(..),
        .                               ..
       42 ( 0.00%)                  }) => ty::Visibility::from_hir(vis, hir_id, tcx),
        .                           // Visibilities of trait impl items are inherited from their traits
        .                           // and are not filled in resolve.
        .                           Node::ImplItem(impl_item) => {
      728 ( 0.00%)                      match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {
        .                                   Node::Item(hir::Item {
        .                                       kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),
        .                                       ..
       56 ( 0.00%)                          }) => tr.path.res.opt_def_id().map_or_else(
        .                                       || {
        .                                           tcx.sess.delay_span_bug(tr.path.span, "trait without a def-id");
        .                                           ty::Visibility::Public
        .                                       },
        .                                       |def_id| tcx.visibility(def_id),
        .                                   ),
        .                                   _ => span_bug!(impl_item.span, "the parent is not a trait impl"),
        .                               }
-- line 2021 ----------------------------------------
-- line 2023 ----------------------------------------
        .                           _ => span_bug!(
        .                               tcx.def_span(def_id),
        .                               "visibility table unexpectedly missing a def-id: {:?}",
        .                               def_id,
        .                           ),
        .                       }
        .                   }
        .               }
    2,400 ( 0.00%)  }
        .           
       16 ( 0.00%)  fn check_mod_privacy(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {
        .               // Check privacy of names not checked in previous compilation stages.
        .               let mut visitor =
        8 ( 0.00%)          NamePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id };
       18 ( 0.00%)      let (module, span, hir_id) = tcx.hir().get_module(module_def_id);
        .           
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
        .           
        .               // Check privacy of explicitly written types and traits as well as
        .               // inferred types of expressions and patterns.
        .               let mut visitor =
       12 ( 0.00%)          TypePrivacyVisitor { tcx, maybe_typeck_results: None, current_item: module_def_id, span };
        .               intravisit::walk_mod(&mut visitor, module, hir_id);
       16 ( 0.00%)  }
        .           
        7 ( 0.00%)  fn privacy_access_levels(tcx: TyCtxt<'_>, (): ()) -> &AccessLevels {
        .               // Build up a set of all exported items in the AST. This is a set of all
        .               // items which are reachable from external crates based on visibility.
        9 ( 0.00%)      let mut visitor = EmbargoVisitor {
        .                   tcx,
        .                   access_levels: tcx.resolutions(()).access_levels.clone(),
        .                   macro_reachable: Default::default(),
        .                   prev_level: Some(AccessLevel::Public),
        .                   changed: false,
        .               };
        .           
        .               loop {
        .                   tcx.hir().walk_toplevel_module(&mut visitor);
        4 ( 0.00%)          if visitor.changed {
        3 ( 0.00%)              visitor.changed = false;
        .                   } else {
        .                       break;
        .                   }
        .               }
        .           
        1 ( 0.00%)      tcx.arena.alloc(visitor.access_levels)
        9 ( 0.00%)  }
        .           
        8 ( 0.00%)  fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {
        .               let access_levels = tcx.privacy_access_levels(());
        .           
        9 ( 0.00%)      let mut visitor = ObsoleteVisiblePrivateTypesVisitor {
        .                   tcx,
        .                   access_levels,
        .                   in_variant: false,
        .                   old_error_set: Default::default(),
        .               };
        .               tcx.hir().walk_toplevel_module(&mut visitor);
        .           
        .               let has_pub_restricted = {
        5 ( 0.00%)          let mut pub_restricted_visitor = PubRestrictedVisitor { tcx, has_pub_restricted: false };
        .                   tcx.hir().walk_toplevel_module(&mut pub_restricted_visitor);
        1 ( 0.00%)          pub_restricted_visitor.has_pub_restricted
        .               };
        .           
        .               let mut old_error_set_ancestry = HirIdSet::default();
        9 ( 0.00%)      for mut id in visitor.old_error_set.iter().copied() {
        .                   loop {
        .                       if !old_error_set_ancestry.insert(id) {
        .                           break;
        .                       }
        .                       let parent = tcx.hir().get_parent_node(id);
        .                       if parent == id {
        .                           break;
        .                       }
        .                       id = parent;
        .                   }
        .               }
        .           
        .               // Check for private types and traits in public interfaces.
        8 ( 0.00%)      let mut visitor = PrivateItemsInPublicInterfacesVisitor {
        .                   tcx,
        .                   has_pub_restricted,
        .                   // Only definition IDs are ever searched in `old_error_set_ancestry`,
        .                   // so we can filter away all non-definition IDs at this point.
        .                   old_error_set_ancestry: old_error_set_ancestry
        .                       .into_iter()
        .                       .filter_map(|hir_id| tcx.hir().opt_local_def_id(hir_id))
        .                       .collect(),
        .               };
        6 ( 0.00%)      tcx.hir().visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));
        8 ( 0.00%)  }

  848,808 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_privacy/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 294 ----------------------------------------
        .           #[allow(deprecated)]
        .           impl From<LayoutErr> for CollectionAllocErr {
        .               fn from(_: LayoutErr) -> Self {
        .                   CollectionAllocErr::CapacityOverflow
        .               }
        .           }
        .           
        .           fn infallible<T>(result: Result<T, CollectionAllocErr>) -> T {
  607,522 ( 0.01%)      match result {
        .                   Ok(x) => x,
        .                   Err(CollectionAllocErr::CapacityOverflow) => panic!("capacity overflow"),
        .                   Err(CollectionAllocErr::AllocErr { layout }) => alloc::alloc::handle_alloc_error(layout),
        .               }
        .           }
        .           
        .           /// FIXME: use `Layout::array` when we require a Rust version where it’s stable
        .           /// https://github.com/rust-lang/rust/issues/55724
-- line 310 ----------------------------------------
-- line 422 ----------------------------------------
        .           #[cfg(feature = "union")]
        .           impl<A: Array> SmallVecData<A> {
        .               #[inline]
        .               unsafe fn inline(&self) -> *const A::Item {
        .                   self.inline.as_ptr() as *const A::Item
        .               }
        .               #[inline]
        .               unsafe fn inline_mut(&mut self) -> *mut A::Item {
  157,268 ( 0.00%)          self.inline.as_mut_ptr() as *mut A::Item
        .               }
        .               #[inline]
        .               fn from_inline(inline: MaybeUninit<A>) -> SmallVecData<A> {
        .                   SmallVecData {
        .                       inline: core::mem::ManuallyDrop::new(inline),
        .                   }
        .               }
        .               #[inline]
        .               unsafe fn into_inline(self) -> MaybeUninit<A> {
        .                   core::mem::ManuallyDrop::into_inner(self.inline)
        .               }
        .               #[inline]
        .               unsafe fn heap(&self) -> (*mut A::Item, usize) {
    2,766 ( 0.00%)          self.heap
        .               }
        .               #[inline]
        .               unsafe fn heap_mut(&mut self) -> &mut (*mut A::Item, usize) {
        .                   &mut self.heap
        .               }
        .               #[inline]
        .               fn from_heap(ptr: *mut A::Item, len: usize) -> SmallVecData<A> {
        .                   SmallVecData { heap: (ptr, len) }
-- line 452 ----------------------------------------
-- line 557 ----------------------------------------
        .               #[inline]
        .               pub fn new() -> SmallVec<A> {
        .                   // Try to detect invalid custom implementations of `Array`. Hopefully,
        .                   // this check should be optimized away entirely for valid ones.
        .                   assert!(
        .                       mem::size_of::<A>() == A::size() * mem::size_of::<A::Item>()
        .                           && mem::align_of::<A>() >= mem::align_of::<A::Item>()
        .                   );
  846,166 ( 0.01%)          SmallVec {
        .                       capacity: 0,
        .                       data: SmallVecData::from_inline(MaybeUninit::uninit()),
        .                   }
        .               }
        .           
        .               /// Construct an empty vector with enough capacity pre-allocated to store at least `n`
        .               /// elements.
        .               ///
-- line 573 ----------------------------------------
-- line 597 ----------------------------------------
        .               ///
        .               /// let vec = vec![1, 2, 3, 4, 5];
        .               /// let small_vec: SmallVec<[_; 3]> = SmallVec::from_vec(vec);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_vec(mut vec: Vec<A::Item>) -> SmallVec<A> {
      562 ( 0.00%)          if vec.capacity() <= Self::inline_capacity() {
        .                       unsafe {
        .                           let mut data = SmallVecData::<A>::from_inline(MaybeUninit::uninit());
        .                           let len = vec.len();
        .                           vec.set_len(0);
        .                           ptr::copy_nonoverlapping(vec.as_ptr(), data.inline_mut(), len);
        .           
        .                           SmallVec {
        .                               capacity: len,
        .                               data,
        .                           }
        .                       }
        .                   } else {
        .                       let (ptr, cap, len) = (vec.as_mut_ptr(), vec.capacity(), vec.len());
        .                       mem::forget(vec);
        .           
      933 ( 0.00%)              SmallVec {
        .                           capacity: cap,
        .                           data: SmallVecData::from_heap(ptr, len),
        .                       }
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements.
-- line 629 ----------------------------------------
-- line 635 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf(buf);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf(buf: A) -> SmallVec<A> {
        .                   SmallVec {
        .                       capacity: A::size(),
   71,540 ( 0.00%)              data: SmallVecData::from_inline(MaybeUninit::new(buf)),
        .                   }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length, which must be less or
        .               /// equal to the size of `buf`.
        .               ///
        .               /// ```rust
-- line 651 ----------------------------------------
-- line 653 ----------------------------------------
        .               ///
        .               /// let buf = [1, 2, 3, 4, 5, 0, 0, 0];
        .               /// let small_vec: SmallVec<_> = SmallVec::from_buf_and_len(buf, 5);
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub fn from_buf_and_len(buf: A, len: usize) -> SmallVec<A> {
   14,496 ( 0.00%)          assert!(len <= A::size());
   43,488 ( 0.00%)          unsafe { SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), len) }
        .               }
        .           
        .               /// Constructs a new `SmallVec` on the stack from an `A` without
        .               /// copying elements. Also sets the length. The user is responsible
        .               /// for ensuring that `len <= A::size()`.
        .               ///
        .               /// ```rust
        .               /// use smallvec::SmallVec;
-- line 670 ----------------------------------------
-- line 674 ----------------------------------------
        .               /// let small_vec: SmallVec<_> = unsafe {
        .               ///     SmallVec::from_buf_and_len_unchecked(MaybeUninit::new(buf), 5)
        .               /// };
        .               ///
        .               /// assert_eq!(&*small_vec, &[1, 2, 3, 4, 5]);
        .               /// ```
        .               #[inline]
        .               pub unsafe fn from_buf_and_len_unchecked(buf: MaybeUninit<A>, len: usize) -> SmallVec<A> {
    7,248 ( 0.00%)          SmallVec {
        .                       capacity: len,
        .                       data: SmallVecData::from_inline(buf),
        .                   }
        .               }
        .           
        .               /// Sets the length of a vector.
        .               ///
        .               /// This will explicitly set the size of the vector, without actually
        .               /// modifying its buffers, so it is up to the caller to ensure that the
        .               /// vector is actually the specified size.
        .               pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   let (_, len_ptr, _) = self.triple_mut();
   65,944 ( 0.00%)          *len_ptr = new_len;
        .               }
        .           
        .               /// The maximum number of elements this vector can hold inline
        .               #[inline]
        .               fn inline_capacity() -> usize {
        .                   if mem::size_of::<A::Item>() > 0 {
        .                       A::size()
        .                   } else {
-- line 703 ----------------------------------------
-- line 725 ----------------------------------------
        .               #[inline]
        .               pub fn len(&self) -> usize {
        .                   self.triple().1
        .               }
        .           
        .               /// Returns `true` if the vector is empty
        .               #[inline]
        .               pub fn is_empty(&self) -> bool {
  106,758 ( 0.00%)          self.len() == 0
        .               }
        .           
        .               /// The number of items the vector can hold without reallocating
        .               #[inline]
        .               pub fn capacity(&self) -> usize {
        .                   self.triple().2
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len, capacity)
        .               /// Useful to get all SmallVec properties with a single check of the current storage variant.
        .               #[inline]
        .               fn triple(&self) -> (*const A::Item, usize, usize) {
        .                   unsafe {
5,693,882 ( 0.09%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           (ptr, len, self.capacity)
        .                       } else {
        .                           (self.data.inline(), self.capacity, Self::inline_capacity())
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns a tuple with (data ptr, len ptr, capacity)
        .               #[inline]
        .               fn triple_mut(&mut self) -> (*mut A::Item, &mut usize, usize) {
        .                   unsafe {
7,244,918 ( 0.12%)              if self.spilled() {
   98,977 ( 0.00%)                  let &mut (ptr, ref mut len_ptr) = self.data.heap_mut();
        .                           (ptr, len_ptr, self.capacity)
        .                       } else {
        .                           (
        .                               self.data.inline_mut(),
        .                               &mut self.capacity,
        .                               Self::inline_capacity(),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns `true` if the data has spilled into a separate heap-allocated buffer.
        .               #[inline]
        .               pub fn spilled(&self) -> bool {
9,696,572 ( 0.16%)          self.capacity > Self::inline_capacity()
        .               }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// Note 1: The element range is removed even if the iterator is only
        .               /// partially consumed or not consumed at all.
        .               ///
-- line 784 ----------------------------------------
-- line 821 ----------------------------------------
        .                           iter: range_slice.iter(),
        .                           vec: NonNull::from(self),
        .                       }
        .                   }
        .               }
        .           
        .               /// Append an item to the vector.
        .               #[inline]
  146,030 ( 0.00%)      pub fn push(&mut self, value: A::Item) {
        .                   unsafe {
        .                       let (mut ptr, mut len, cap) = self.triple_mut();
1,050,263 ( 0.02%)              if *len == cap {
      202 ( 0.00%)                  self.reserve(1);
    2,539 ( 0.00%)                  let &mut (heap_ptr, ref mut heap_len) = self.data.heap_mut();
        .                           ptr = heap_ptr;
        .                           len = heap_len;
        .                       }
    2,255 ( 0.00%)              ptr::write(ptr.add(*len), value);
2,024,277 ( 0.03%)              *len += 1;
        .                   }
  116,824 ( 0.00%)      }
        .           
        .               /// Remove an item from the end of the vector and return it, or None if empty.
        .               #[inline]
        .               pub fn pop(&mut self) -> Option<A::Item> {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
  511,908 ( 0.01%)              if *len_ptr == 0 {
        .                           return None;
        .                       }
  115,644 ( 0.00%)              let last_index = *len_ptr - 1;
  115,668 ( 0.00%)              *len_ptr = last_index;
  115,074 ( 0.00%)              Some(ptr::read(ptr.add(last_index)))
        .                   }
        1 ( 0.00%)      }
        .           
        .               /// Moves all the elements of `other` into `self`, leaving `other` empty.
        .               ///
        .               /// # Example
        .               ///
        .               /// ```
        .               /// # use smallvec::{SmallVec, smallvec};
        .               /// let mut v0: SmallVec<[u8; 16]> = smallvec![1, 2, 3];
-- line 863 ----------------------------------------
-- line 879 ----------------------------------------
        .               /// or if the capacity computation overflows `usize`.
        .               pub fn grow(&mut self, new_cap: usize) {
        .                   infallible(self.try_grow(new_cap))
        .               }
        .           
        .               /// Re-allocate to set the capacity to `max(new_cap, inline_size())`.
        .               ///
        .               /// Panics if `new_cap` is less than the vector's length
    4,190 ( 0.00%)      pub fn try_grow(&mut self, new_cap: usize) -> Result<(), CollectionAllocErr> {
        .                   unsafe {
       34 ( 0.00%)              let (ptr, &mut len, cap) = self.triple_mut();
        .                       let unspilled = !self.spilled();
    5,600 ( 0.00%)              assert!(new_cap >= len);
    5,600 ( 0.00%)              if new_cap <= self.inline_size() {
        .                           if unspilled {
        .                               return Ok(());
        .                           }
        .                           self.data = SmallVecData::from_inline(MaybeUninit::uninit());
        .                           ptr::copy_nonoverlapping(ptr, self.data.inline_mut(), len);
        .                           self.capacity = len;
        .                           deallocate(ptr, cap);
    5,600 ( 0.00%)              } else if new_cap != cap {
    4,979 ( 0.00%)                  let layout = layout_array::<A::Item>(new_cap)?;
        .                           debug_assert!(layout.size() > 0);
        .                           let new_alloc;
    2,800 ( 0.00%)                  if unspilled {
        .                               new_alloc = NonNull::new(alloc::alloc::alloc(layout))
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                               ptr::copy_nonoverlapping(ptr, new_alloc, len);
        .                           } else {
        .                               // This should never fail since the same succeeded
        .                               // when previously allocating `ptr`.
    1,459 ( 0.00%)                      let old_layout = layout_array::<A::Item>(cap)?;
        .           
        .                               let new_ptr = alloc::alloc::realloc(ptr as *mut u8, old_layout, layout.size());
        .                               new_alloc = NonNull::new(new_ptr)
        .                                   .ok_or(CollectionAllocErr::AllocErr { layout })?
        .                                   .cast()
        .                                   .as_ptr();
        .                           }
    5,600 ( 0.00%)                  self.data = SmallVecData::from_heap(new_alloc, len);
    7,660 ( 0.00%)                  self.capacity = new_cap;
        .                       }
        .                       Ok(())
        .                   }
    4,224 ( 0.00%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
        .               ///
        .               /// Panics if the capacity computation overflows `usize`.
        .               #[inline]
  345,369 ( 0.01%)      pub fn reserve(&mut self, additional: usize) {
  617,066 ( 0.01%)          infallible(self.try_reserve(additional))
  393,720 ( 0.01%)      }
        .           
        .               /// Reserve capacity for `additional` more elements to be inserted.
        .               ///
        .               /// May reserve more space to avoid frequent reallocations.
2,640,289 ( 0.04%)      pub fn try_reserve(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   // prefer triple_mut() even if triple() would work
        .                   // so that the optimizer removes duplicated calls to it
        .                   // from callers like insert()
    2,196 ( 0.00%)          let (_, &mut len, cap) = self.triple_mut();
2,006,458 ( 0.03%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .and_then(usize::checked_next_power_of_two)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      367 ( 0.00%)          self.try_grow(new_cap)
2,731,624 ( 0.05%)      }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               ///
        .               /// Panics if the new capacity overflows `usize`.
        .               pub fn reserve_exact(&mut self, additional: usize) {
        .                   infallible(self.try_reserve_exact(additional))
        .               }
        .           
        .               /// Reserve the minimum capacity for `additional` more elements to be inserted.
        .               pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), CollectionAllocErr> {
        .                   let (_, &mut len, cap) = self.triple_mut();
   87,171 ( 0.00%)          if cap - len >= additional {
        .                       return Ok(());
        .                   }
        .                   let new_cap = len
        .                       .checked_add(additional)
        .                       .ok_or(CollectionAllocErr::CapacityOverflow)?;
      377 ( 0.00%)          self.try_grow(new_cap)
      377 ( 0.00%)      }
        .           
        .               /// Shrink the capacity of the vector as much as possible.
        .               ///
        .               /// When possible, this will move data from an external heap buffer to the vector's inline
        .               /// storage.
        .               pub fn shrink_to_fit(&mut self) {
        .                   if !self.spilled() {
        .                       return;
-- line 981 ----------------------------------------
-- line 999 ----------------------------------------
        .               /// If `len` is greater than or equal to the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// This does not re-allocate.  If you want the vector's capacity to shrink, call
        .               /// `shrink_to_fit` after truncating.
        .               pub fn truncate(&mut self, len: usize) {
        .                   unsafe {
        .                       let (ptr, len_ptr, _) = self.triple_mut();
   11,864 ( 0.00%)              while len < *len_ptr {
        .                           let last_index = *len_ptr - 1;
        .                           *len_ptr = last_index;
        .                           ptr::drop_in_place(ptr.add(last_index));
        .                       }
        .                   }
        .               }
        .           
        .               /// Extracts a slice containing the entire vector.
-- line 1015 ----------------------------------------
-- line 1044 ----------------------------------------
        .               pub fn clear(&mut self) {
        .                   self.truncate(0);
        .               }
        .           
        .               /// Remove and return the element at position `index`, shifting all elements after it to the
        .               /// left.
        .               ///
        .               /// Panics if `index` is out of bounds.
       16 ( 0.00%)      pub fn remove(&mut self, index: usize) -> A::Item {
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
      940 ( 0.00%)              let len = *len_ptr;
    3,192 ( 0.00%)              assert!(index < len);
   50,738 ( 0.00%)              *len_ptr = len - 1;
        .                       ptr = ptr.add(index);
        .                       let item = ptr::read(ptr);
    2,128 ( 0.00%)              ptr::copy(ptr.add(1), ptr, len - index - 1);
        .                       item
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Insert an element at position `index`, shifting all elements after it to the right.
        .               ///
        .               /// Panics if `index` is out of bounds.
   25,969 ( 0.00%)      pub fn insert(&mut self, index: usize, element: A::Item) {
        .                   self.reserve(1);
        .           
        .                   unsafe {
        .                       let (mut ptr, len_ptr, _) = self.triple_mut();
    2,387 ( 0.00%)              let len = *len_ptr;
    4,750 ( 0.00%)              assert!(index <= len);
    9,500 ( 0.00%)              *len_ptr = len + 1;
        .                       ptr = ptr.add(index);
    4,750 ( 0.00%)              ptr::copy(ptr, ptr.add(1), len - index);
        .                       ptr::write(ptr, element);
        .                   }
   16,528 ( 0.00%)      }
        .           
        .               /// Insert multiple elements at position `index`, shifting all following elements toward the
        .               /// back.
        .               pub fn insert_many<I: IntoIterator<Item = A::Item>>(&mut self, index: usize, iterable: I) {
        .                   let mut iter = iterable.into_iter();
        .                   if index == self.len() {
        .                       return self.extend(iter);
        .                   }
-- line 1088 ----------------------------------------
-- line 1201 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place and preserves the order of the retained
        .               /// elements.
   27,261 ( 0.00%)      pub fn retain<F: FnMut(&mut A::Item) -> bool>(&mut self, mut f: F) {
        .                   let mut del = 0;
        .                   let len = self.len();
        .                   for i in 0..len {
    6,664 ( 0.00%)              if !f(&mut self[i]) {
       76 ( 0.00%)                  del += 1;
    1,964 ( 0.00%)              } else if del > 0 {
       24 ( 0.00%)                  self.swap(i - del, i);
        .                       }
        .                   }
    6,058 ( 0.00%)          self.truncate(len - del);
   24,232 ( 0.00%)      }
        .           
        .               /// Removes consecutive duplicate elements.
        .               pub fn dedup(&mut self)
        .               where
        .                   A::Item: PartialEq<A::Item>,
        .               {
        .                   self.dedup_by(|a, b| a == b);
        .               }
-- line 1228 ----------------------------------------
-- line 1418 ----------------------------------------
        .                           capacity: len,
        .                           data: SmallVecData::from_inline(unsafe {
        .                               let mut data: MaybeUninit<A> = MaybeUninit::uninit();
        .                               ptr::copy_nonoverlapping(
        .                                   slice.as_ptr(),
        .                                   data.as_mut_ptr() as *mut A::Item,
        .                                   len,
        .                               );
      232 ( 0.00%)                      data
        .                           }),
        .                       }
        .                   } else {
        .                       let mut b = slice.to_vec();
        .                       let (ptr, cap) = (b.as_mut_ptr(), b.capacity());
        .                       mem::forget(b);
        .                       SmallVec {
        .                           capacity: cap,
-- line 1434 ----------------------------------------
-- line 1436 ----------------------------------------
        .                       }
        .                   }
        .               }
        .           
        .               /// Copy elements from a slice into the vector at position `index`, shifting any following
        .               /// elements toward the back.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `insert`.
  107,073 ( 0.00%)      pub fn insert_from_slice(&mut self, index: usize, slice: &[A::Item]) {
        .                   self.reserve(slice.len());
        .           
        .                   let len = self.len();
   33,627 ( 0.00%)          assert!(index <= len);
        .           
        .                   unsafe {
        .                       let slice_ptr = slice.as_ptr();
        .                       let ptr = self.as_mut_ptr().add(index);
        .                       ptr::copy(ptr, ptr.add(slice.len()), len - index);
        .                       ptr::copy_nonoverlapping(slice_ptr, ptr, slice.len());
   22,418 ( 0.00%)              self.set_len(len + slice.len());
        .                   }
   89,672 ( 0.00%)      }
        .           
        .               /// Copy elements from a slice and append them to the vector.
        .               ///
        .               /// For slices of `Copy` types, this is more efficient than `extend`.
        .               #[inline]
        .               pub fn extend_from_slice(&mut self, slice: &[A::Item]) {
        .                   let len = self.len();
   26,038 ( 0.00%)          self.insert_from_slice(len, slice);
        .               }
        .           }
        .           
        .           impl<A: Array> SmallVec<A>
        .           where
        .               A::Item: Clone,
        .           {
        .               /// Resizes the vector so that its length is equal to `len`.
-- line 1473 ----------------------------------------
-- line 1489 ----------------------------------------
        .               /// Creates a `SmallVec` with `n` copies of `elem`.
        .               /// ```
        .               /// use smallvec::SmallVec;
        .               ///
        .               /// let v = SmallVec::<[char; 128]>::from_elem('d', 2);
        .               /// assert_eq!(v, SmallVec::from_buf(['d', 'd']));
        .               /// ```
        .               pub fn from_elem(elem: A::Item, n: usize) -> Self {
    3,172 ( 0.00%)          if n > Self::inline_capacity() {
        .                       vec![elem; n].into()
        .                   } else {
        .                       let mut v = SmallVec::<A>::new();
        .                       unsafe {
        .                           let (ptr, len_ptr, _) = v.triple_mut();
        .                           let mut local_len = SetLenOnDrop::new(len_ptr);
        .           
        .                           for i in 0..n {
        .                               ::core::ptr::write(ptr.add(i), elem.clone());
        .                               local_len.increment_len(1);
        .                           }
        .                       }
    4,668 ( 0.00%)              v
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::Deref for SmallVec<A> {
        .               type Target = [A::Item];
        .               #[inline]
        .               fn deref(&self) -> &[A::Item] {
-- line 1518 ----------------------------------------
-- line 1522 ----------------------------------------
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> ops::DerefMut for SmallVec<A> {
        .               #[inline]
        .               fn deref_mut(&mut self) -> &mut [A::Item] {
        .                   unsafe {
   10,580 ( 0.00%)              let (ptr, &mut len, _) = self.triple_mut();
        .                       slice::from_raw_parts_mut(ptr, len)
        .                   }
        .               }
        .           }
        .           
        .           impl<A: Array> AsRef<[A::Item]> for SmallVec<A> {
        .               #[inline]
        .               fn as_ref(&self) -> &[A::Item] {
-- line 1538 ----------------------------------------
-- line 1716 ----------------------------------------
        .                   SmallVec::extend_from_slice(self, other)
        .               }
        .           }
        .           
        .           impl<A: Array> FromIterator<A::Item> for SmallVec<A> {
        .               #[inline]
        .               fn from_iter<I: IntoIterator<Item = A::Item>>(iterable: I) -> SmallVec<A> {
        .                   let mut v = SmallVec::new();
  930,402 ( 0.02%)          v.extend(iterable);
        .                   v
        .               }
        .           }
        .           
        .           impl<A: Array> Extend<A::Item> for SmallVec<A> {
3,664,870 ( 0.06%)      fn extend<I: IntoIterator<Item = A::Item>>(&mut self, iterable: I) {
  149,354 ( 0.00%)          let mut iter = iterable.into_iter();
        .                   let (lower_size_bound, _) = iter.size_hint();
   51,706 ( 0.00%)          self.reserve(lower_size_bound);
        .           
        .                   unsafe {
        .                       let (ptr, len_ptr, cap) = self.triple_mut();
        .                       let mut len = SetLenOnDrop::new(len_ptr);
1,457,851 ( 0.02%)              while len.get() < cap {
  272,872 ( 0.00%)                  if let Some(out) = iter.next() {
        .                               ptr::write(ptr.add(len.get()), out);
        .                               len.increment_len(1);
        .                           } else {
        .                               return;
        .                           }
        .                       }
        .                   }
        .           
   26,136 ( 0.00%)          for elem in iter {
    2,176 ( 0.00%)              self.push(elem);
        .                   }
3,036,236 ( 0.05%)      }
        .           }
        .           
        .           impl<A: Array> fmt::Debug for SmallVec<A>
        .           where
        .               A::Item: fmt::Debug,
        .           {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.debug_list().entries(self.iter()).finish()
-- line 1759 ----------------------------------------
-- line 1764 ----------------------------------------
        .               #[inline]
        .               fn default() -> SmallVec<A> {
        .                   SmallVec::new()
        .               }
        .           }
        .           
        .           #[cfg(feature = "may_dangle")]
        .           unsafe impl<#[may_dangle] A: Array> Drop for SmallVec<A> {
  691,057 ( 0.01%)      fn drop(&mut self) {
        .                   unsafe {
2,051,227 ( 0.03%)              if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
        .                           Vec::from_raw_parts(ptr, len, self.capacity);
        .                       } else {
        .                           ptr::drop_in_place(&mut self[..]);
        .                       }
        .                   }
  806,774 ( 0.01%)      }
        .           }
        .           
        .           #[cfg(not(feature = "may_dangle"))]
        .           impl<A: Array> Drop for SmallVec<A> {
        .               fn drop(&mut self) {
        .                   unsafe {
        .                       if self.spilled() {
        .                           let (ptr, len) = self.data.heap();
-- line 1789 ----------------------------------------
-- line 1888 ----------------------------------------
        .               A::Item: Clone,
        .           {
        .               fn clone(&self) -> IntoIter<A> {
        .                   SmallVec::from(self.as_slice()).into_iter()
        .               }
        .           }
        .           
        .           impl<A: Array> Drop for IntoIter<A> {
      793 ( 0.00%)      fn drop(&mut self) {
   52,938 ( 0.00%)          for _ in self {}
      728 ( 0.00%)      }
        .           }
        .           
        .           impl<A: Array> Iterator for IntoIter<A> {
        .               type Item = A::Item;
        .           
        .               #[inline]
        .               fn next(&mut self) -> Option<A::Item> {
  192,036 ( 0.00%)          if self.current == self.end {
        .                       None
        .                   } else {
        .                       unsafe {
        .                           let current = self.current;
   78,375 ( 0.00%)                  self.current += 1;
    1,120 ( 0.00%)                  Some(ptr::read(self.data.as_ptr().add(current)))
        .                       }
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
    2,792 ( 0.00%)          let size = self.end - self.current;
        .                   (size, Some(size))
        .               }
        .           }
        .           
        .           impl<A: Array> DoubleEndedIterator for IntoIter<A> {
        .               #[inline]
        .               fn next_back(&mut self) -> Option<A::Item> {
        .                   if self.current == self.end {
-- line 1927 ----------------------------------------
-- line 1955 ----------------------------------------
        .           impl<A: Array> IntoIterator for SmallVec<A> {
        .               type IntoIter = IntoIter<A>;
        .               type Item = A::Item;
        .               fn into_iter(mut self) -> Self::IntoIter {
        .                   unsafe {
        .                       // Set SmallVec len to zero as `IntoIter` drop handles dropping of the elements
        .                       let len = self.len();
        .                       self.set_len(0);
   12,723 ( 0.00%)              IntoIter {
  170,722 ( 0.00%)                  data: self,
        .                           current: 0,
        .                           end: len,
        .                       }
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, A: Array> IntoIterator for &'a SmallVec<A> {
-- line 1972 ----------------------------------------
-- line 2000 ----------------------------------------
        .               len: &'a mut usize,
        .               local_len: usize,
        .           }
        .           
        .           impl<'a> SetLenOnDrop<'a> {
        .               #[inline]
        .               fn new(len: &'a mut usize) -> Self {
        .                   SetLenOnDrop {
  381,459 ( 0.01%)              local_len: *len,
        .                       len,
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn get(&self) -> usize {
        .                   self.local_len
        .               }
        .           
        .               #[inline]
        .               fn increment_len(&mut self, increment: usize) {
  145,651 ( 0.00%)          self.local_len += increment;
        .               }
        .           }
        .           
        .           impl<'a> Drop for SetLenOnDrop<'a> {
        .               #[inline]
        .               fn drop(&mut self) {
  390,543 ( 0.01%)          *self.len = self.local_len;
        .               }
        .           }
        .           
        .           #[cfg(feature = "const_new")]
        .           impl<T, const N: usize> SmallVec<[T; N]> {
        .               /// Construct an empty vector.
        .               ///
        .               /// This is a `const` version of [`SmallVec::new`] that is enabled by the feature `const_new`, with the limitation that it only works for arrays.
-- line 2035 ----------------------------------------

5,876,103 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/smallvec-1.7.0/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs
--------------------------------------------------------------------------------
Ir                  

-- line 30 ----------------------------------------
         .               // Both start and end are inclusive.
         .               let start = match range.start_bound().cloned() {
         .                   Bound::Included(start) => start.index(),
         .                   Bound::Excluded(start) => start.index() + 1,
         .                   Bound::Unbounded => 0,
         .               };
         .               let end = match range.end_bound().cloned() {
         .                   Bound::Included(end) => end.index(),
        20 ( 0.00%)          Bound::Excluded(end) => end.index().checked_sub(1)?,
         .                   Bound::Unbounded => domain - 1,
         .               };
        40 ( 0.00%)      assert!(end < domain);
        40 ( 0.00%)      if start > end {
         .                   return None;
         .               }
         .               Some((start, end))
         .           }
         .           
         .           macro_rules! bit_relations_inherent_impls {
         .               () => {
         .                   /// Sets `self = self | other` and returns `true` if `self` changed
         .                   /// (i.e., if new bits were added).
   563,452 ( 0.01%)          pub fn union<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::union(self, other)
   428,453 ( 0.01%)          }
         .           
         .                   /// Sets `self = self - other` and returns `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
    29,320 ( 0.00%)          pub fn subtract<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::subtract(self, other)
    29,320 ( 0.00%)          }
         .           
         .                   /// Sets `self = self & other` and return `true` if `self` changed.
         .                   /// (i.e., if any bits were removed).
         .                   pub fn intersect<Rhs>(&mut self, other: &Rhs) -> bool
         .                   where
         .                       Self: BitRelations<Rhs>,
         .                   {
         .                       <Self as BitRelations<Rhs>>::intersect(self, other)
-- line 74 ----------------------------------------
-- line 92 ----------------------------------------
         .               domain_size: usize,
         .               words: Vec<Word>,
         .               marker: PhantomData<T>,
         .           }
         .           
         .           impl<T> BitSet<T> {
         .               /// Gets the domain size.
         .               pub fn domain_size(&self) -> usize {
       197 ( 0.00%)          self.domain_size
         .               }
         .           }
         .           
         .           impl<T: Idx> BitSet<T> {
         .               /// Creates a new, empty bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_empty(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
    42,675 ( 0.00%)          BitSet { domain_size, words: vec![0; num_words], marker: PhantomData }
         .               }
         .           
         .               /// Creates a new, filled bitset with a given `domain_size`.
         .               #[inline]
         .               pub fn new_filled(domain_size: usize) -> BitSet<T> {
         .                   let num_words = num_words(domain_size);
    51,580 ( 0.00%)          let mut result = BitSet { domain_size, words: vec![!0; num_words], marker: PhantomData };
         .                   result.clear_excess_bits();
         .                   result
         .               }
         .           
         .               /// Clear all elements.
         .               #[inline]
         .               pub fn clear(&mut self) {
         .                   for word in &mut self.words {
       364 ( 0.00%)              *word = 0;
         .                   }
         .               }
         .           
         .               /// Clear excess bits in the final word.
         .               fn clear_excess_bits(&mut self) {
       345 ( 0.00%)          let num_bits_in_final_word = self.domain_size % WORD_BITS;
    21,322 ( 0.00%)          if num_bits_in_final_word > 0 {
    20,975 ( 0.00%)              let mask = (1 << num_bits_in_final_word) - 1;
    42,295 ( 0.00%)              let final_word_idx = self.words.len() - 1;
    10,660 ( 0.00%)              self.words[final_word_idx] &= mask;
         .                   }
         .               }
         .           
         .               /// Count the number of set bits in the set.
         .               pub fn count(&self) -> usize {
         .                   self.words.iter().map(|e| e.count_ones() as usize).sum()
         .               }
         .           
         .               /// Returns `true` if `self` contains `elem`.
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
   933,839 ( 0.02%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
 1,181,719 ( 0.02%)          (self.words[word_index] & mask) != 0
         .               }
         .           
         .               /// Is `self` is a (non-strict) superset of `other`?
         .               #[inline]
         .               pub fn superset(&self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   self.words.iter().zip(&other.words).all(|(a, b)| (a & b) == *b)
         .               }
-- line 157 ----------------------------------------
-- line 160 ----------------------------------------
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.words.iter().all(|a| *a == 0)
         .               }
         .           
         .               /// Insert `elem`. Returns whether the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
 2,458,123 ( 0.04%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
   687,969 ( 0.01%)          let word = *word_ref;
 1,375,938 ( 0.02%)          let new_word = word | mask;
 1,261,742 ( 0.02%)          *word_ref = new_word;
   726,508 ( 0.01%)          new_word != word
         .               }
         .           
         .               #[inline]
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   let Some((start, end)) = inclusive_start_end(elems, self.domain_size) else {
         .                       return;
         .                   };
         .           
-- line 182 ----------------------------------------
-- line 199 ----------------------------------------
         .                   } else {
         .                       self.words[start_word_index] |= end_mask | (end_mask - start_mask);
         .                   }
         .               }
         .           
         .               /// Sets all bits to true.
         .               pub fn insert_all(&mut self) {
         .                   for word in &mut self.words {
       690 ( 0.00%)              *word = !0;
         .                   }
         .                   self.clear_excess_bits();
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
 1,404,274 ( 0.02%)          assert!(elem.index() < self.domain_size);
         .                   let (word_index, mask) = word_index_and_mask(elem);
         .                   let word_ref = &mut self.words[word_index];
     8,598 ( 0.00%)          let word = *word_ref;
 1,385,824 ( 0.02%)          let new_word = word & !mask;
   723,502 ( 0.01%)          *word_ref = new_word;
    17,196 ( 0.00%)          new_word != word
         .               }
         .           
         .               /// Gets a slice of the underlying words.
         .               pub fn words(&self) -> &[Word] {
         .                   &self.words
         .               }
         .           
         .               /// Iterates over the indices of set bits in a sorted order.
-- line 229 ----------------------------------------
-- line 273 ----------------------------------------
         .                   not_already |= (self.words[current_index] ^ new_bit_mask) != 0;
         .                   // Any bits in the tail? Note `clear_excess_bits` before.
         .                   not_already |= self.words[current_index + 1..].iter().any(|&x| x != 0);
         .           
         .                   not_already
         .               }
         .           
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
        20 ( 0.00%)          let (start, end) = inclusive_start_end(range, self.domain_size)?;
         .                   let (start_word_index, _) = word_index_and_mask(start);
         .                   let (end_word_index, end_mask) = word_index_and_mask(end);
         .           
       100 ( 0.00%)          let end_word = self.words[end_word_index] & (end_mask | (end_mask - 1));
        40 ( 0.00%)          if end_word != 0 {
        54 ( 0.00%)              let pos = max_bit(end_word) + WORD_BITS * end_word_index;
        36 ( 0.00%)              if start <= pos {
         .                           return Some(T::new(pos));
         .                       }
         .                   }
         .           
         .                   // We exclude end_word_index from the range here, because we don't want
         .                   // to limit ourselves to *just* the last word: the bits set it in may be
         .                   // after `end`, so it may not work out.
         .                   if let Some(offset) =
         1 ( 0.00%)              self.words[start_word_index..end_word_index].iter().rposition(|&w| w != 0)
         .                   {
         2 ( 0.00%)              let word_idx = start_word_index + offset;
         1 ( 0.00%)              let start_word = self.words[word_idx];
         5 ( 0.00%)              let pos = max_bit(start_word) + WORD_BITS * word_idx;
         2 ( 0.00%)              if start <= pos {
         .                           return Some(T::new(pos));
         .                       }
         .                   }
         .           
         .                   None
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           // dense REL dense
         .           impl<T: Idx> BitRelations<BitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &BitSet<T>) -> bool {
   404,997 ( 0.01%)          assert_eq!(self.domain_size, other.domain_size);
10,746,533 ( 0.18%)          bitwise(&mut self.words, &other.words, |a, b| a | b)
         .               }
         .           
         .               fn subtract(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
       561 ( 0.00%)          bitwise(&mut self.words, &other.words, |a, b| a & !b)
         .               }
         .           
         .               fn intersect(&mut self, other: &BitSet<T>) -> bool {
         .                   assert_eq!(self.domain_size, other.domain_size);
         .                   bitwise(&mut self.words, &other.words, |a, b| a & b)
         .               }
         .           }
         .           
         .           // Applies a function to mutate a bitset, and returns true if any
         .           // of the applications return true
         .           fn sequential_update<T: Idx>(
         .               mut self_update: impl FnMut(T) -> bool,
         .               it: impl Iterator<Item = T>,
         .           ) -> bool {
         .               let mut changed = false;
    13,986 ( 0.00%)      for elem in it {
    41,958 ( 0.00%)          changed |= self_update(elem);
         .               }
         .               changed
    23,284 ( 0.00%)  }
         .           
         .           // Optimization of intersection for SparseBitSet that's generic
         .           // over the RHS
         .           fn sparse_intersect<T: Idx>(
         .               set: &mut SparseBitSet<T>,
         .               other_contains: impl Fn(&T) -> bool,
         .           ) -> bool {
         .               let size = set.elems.len();
-- line 350 ----------------------------------------
-- line 413 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => dense.intersect(other),
         .                   }
         .               }
         .           }
         .           
         .           // dense REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for BitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
    23,456 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
    11,728 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.insert(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.union(dense),
         .                   }
         .               }
         .           
         .               fn subtract(&mut self, other: &HybridBitSet<T>) -> bool {
    23,456 ( 0.00%)          assert_eq!(self.domain_size, other.domain_size());
    11,728 ( 0.00%)          match other {
         .                       HybridBitSet::Sparse(sparse) => {
         .                           sequential_update(|elem| self.remove(elem), sparse.iter().cloned())
         .                       }
         .                       HybridBitSet::Dense(dense) => self.subtract(dense),
         .                   }
         .               }
         .           
         .               fn intersect(&mut self, other: &HybridBitSet<T>) -> bool {
-- line 440 ----------------------------------------
-- line 455 ----------------------------------------
         .                       HybridBitSet::Dense(dense) => self.intersect(dense),
         .                   }
         .               }
         .           }
         .           
         .           // hybrid REL hybrid
         .           impl<T: Idx> BitRelations<HybridBitSet<T>> for HybridBitSet<T> {
         .               fn union(&mut self, other: &HybridBitSet<T>) -> bool {
     2,502 ( 0.00%)          assert_eq!(self.domain_size(), other.domain_size());
       834 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(_) => {
       834 ( 0.00%)                  match other {
         .                               HybridBitSet::Sparse(other_sparse) => {
         .                                   // Both sets are sparse. Add the elements in
         .                                   // `other_sparse` to `self` one at a time. This
         .                                   // may or may not cause `self` to be densified.
         .                                   let mut changed = false;
         .                                   for elem in other_sparse.iter() {
     2,520 ( 0.00%)                              changed |= self.insert(*elem);
         .                                   }
         .                                   changed
         .                               }
         .           
         .                               HybridBitSet::Dense(other_dense) => self.union(other_dense),
         .                           }
         .                       }
         .           
-- line 481 ----------------------------------------
-- line 511 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T> Clone for BitSet<T> {
         .               fn clone(&self) -> Self {
         .                   BitSet { domain_size: self.domain_size, words: self.words.clone(), marker: PhantomData }
         .               }
         .           
   645,946 ( 0.01%)      fn clone_from(&mut self, from: &Self) {
   423,336 ( 0.01%)          if self.domain_size != from.domain_size {
         .                       self.words.resize(from.domain_size, 0);
         .                       self.domain_size = from.domain_size;
         .                   }
         .           
         .                   self.words.copy_from_slice(&from.words);
         .               }
         .           }
         .           
-- line 528 ----------------------------------------
-- line 599 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<'a, T: Idx> Iterator for BitIter<'a, T> {
         .               type Item = T;
         .               fn next(&mut self) -> Option<T> {
         .                   loop {
   235,943 ( 0.00%)              if self.word != 0 {
         .                           // Get the position of the next set bit in the current word,
         .                           // then clear the bit.
         .                           let bit_pos = self.word.trailing_zeros() as usize;
         .                           let bit = 1 << bit_pos;
         .                           self.word ^= bit;
    85,719 ( 0.00%)                  return Some(T::new(bit_pos + self.offset));
         .                       }
         .           
         .                       // Move onto the next word. `wrapping_add()` is needed to handle
         .                       // the degenerate initial value given to `offset` in `new()`.
         .                       let word = self.iter.next()?;
     7,591 ( 0.00%)              self.word = *word;
         .                       self.offset = self.offset.wrapping_add(WORD_BITS);
         .                   }
         .               }
         .           }
         .           
         .           #[inline]
         .           fn bitwise<Op>(out_vec: &mut [Word], in_vec: &[Word], op: Op) -> bool
         .           where
         .               Op: Fn(Word, Word) -> Word,
         .           {
   540,340 ( 0.01%)      assert_eq!(out_vec.len(), in_vec.len());
         .               let mut changed = 0;
   229,480 ( 0.00%)      for (out_elem, in_elem) in iter::zip(out_vec, in_vec) {
10,858,135 ( 0.18%)          let old_val = *out_elem;
10,621,731 ( 0.18%)          let new_val = op(old_val, *in_elem);
10,746,750 ( 0.18%)          *out_elem = new_val;
         .                   // This is essentially equivalent to a != with changed being a bool, but
         .                   // in practice this code gets auto-vectorized by the compiler for most
         .                   // operators. Using != here causes us to generate quite poor code as the
         .                   // compiler tries to go back to a boolean on each loop iteration.
21,716,342 ( 0.36%)          changed |= old_val ^ new_val;
         .               }
         .               changed != 0
         .           }
         .           
         .           const SPARSE_MAX: usize = 8;
         .           
         .           /// A fixed-size bitset type with a sparse representation and a maximum of
         .           /// `SPARSE_MAX` elements. The elements are stored as a sorted `ArrayVec` with
         .           /// no duplicates.
         .           ///
         .           /// This type is used by `HybridBitSet`; do not use directly.
         .           #[derive(Clone, Debug)]
         .           pub struct SparseBitSet<T> {
     8,430 ( 0.00%)      domain_size: usize,
         .               elems: ArrayVec<T, SPARSE_MAX>,
         .           }
         .           
         .           impl<T: Idx> SparseBitSet<T> {
         .               fn new_empty(domain_size: usize) -> Self {
         .                   SparseBitSet { domain_size, elems: ArrayVec::new() }
         .               }
         .           
         .               fn len(&self) -> usize {
    33,802 ( 0.00%)          self.elems.len()
         .               }
         .           
         .               fn is_empty(&self) -> bool {
         .                   self.elems.len() == 0
         .               }
         .           
         .               fn contains(&self, elem: T) -> bool {
       289 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   self.elems.contains(&elem)
         .               }
         .           
         .               fn insert(&mut self, elem: T) -> bool {
    33,666 ( 0.00%)          assert!(elem.index() < self.domain_size);
    14,265 ( 0.00%)          let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {
     6,818 ( 0.00%)              if self.elems[i] == elem {
         .                           // `elem` is already in the set.
         .                           false
         .                       } else {
         .                           // `elem` is smaller than one or more existing elements.
         .                           self.elems.insert(i, elem);
         .                           true
         .                       }
         .                   } else {
         .                       // `elem` is larger than all existing elements.
         .                       self.elems.push(elem);
         .                       true
         .                   };
    33,666 ( 0.00%)          assert!(self.len() <= SPARSE_MAX);
         .                   changed
         .               }
         .           
         .               fn remove(&mut self, elem: T) -> bool {
    26,720 ( 0.00%)          assert!(elem.index() < self.domain_size);
         .                   if let Some(i) = self.elems.iter().position(|&e| e == elem) {
     9,184 ( 0.00%)              self.elems.remove(i);
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               fn to_dense(&self) -> BitSet<T> {
         .                   let mut dense = BitSet::new_empty(self.domain_size);
         .                   for elem in self.elems.iter() {
       488 ( 0.00%)              dense.insert(*elem);
         .                   }
         .                   dense
         .               }
         .           
         .               fn iter(&self) -> slice::Iter<'_, T> {
     4,414 ( 0.00%)          self.elems.iter()
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           impl<T: Idx + Ord> SparseBitSet<T> {
         .               fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {
         .                   let mut last_leq = None;
-- line 723 ----------------------------------------
-- line 738 ----------------------------------------
         .           /// number of elements, but a large `domain_size`, and are cleared frequently.
         .           ///
         .           /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also
         .           /// just be `usize`.
         .           ///
         .           /// All operations that involve an element will panic if the element is equal
         .           /// to or greater than the domain size. All operations that involve two bitsets
         .           /// will panic if the bitsets have differing domain sizes.
    77,590 ( 0.00%)  #[derive(Clone)]
         .           pub enum HybridBitSet<T> {
         .               Sparse(SparseBitSet<T>),
         .               Dense(BitSet<T>),
         .           }
         .           
         .           impl<T: Idx> fmt::Debug for HybridBitSet<T> {
         .               fn fmt(&self, w: &mut fmt::Formatter<'_>) -> fmt::Result {
         .                   match self {
-- line 754 ----------------------------------------
-- line 755 ----------------------------------------
         .                       Self::Sparse(b) => b.fmt(w),
         .                       Self::Dense(b) => b.fmt(w),
         .                   }
         .               }
         .           }
         .           
         .           impl<T: Idx> HybridBitSet<T> {
         .               pub fn new_empty(domain_size: usize) -> Self {
       328 ( 0.00%)          HybridBitSet::Sparse(SparseBitSet::new_empty(domain_size))
         .               }
         .           
         .               pub fn domain_size(&self) -> usize {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.domain_size,
         .                       HybridBitSet::Dense(dense) => dense.domain_size,
         .                   }
         .               }
         .           
         .               pub fn clear(&mut self) {
         .                   let domain_size = self.domain_size();
     1,822 ( 0.00%)          *self = HybridBitSet::new_empty(domain_size);
         .               }
         .           
         .               pub fn contains(&self, elem: T) -> bool {
       170 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.contains(elem),
         .                       HybridBitSet::Dense(dense) => dense.contains(elem),
         .                   }
         .               }
         .           
         .               pub fn superset(&self, other: &HybridBitSet<T>) -> bool {
         .                   match (self, other) {
         .                       (HybridBitSet::Dense(self_dense), HybridBitSet::Dense(other_dense)) => {
-- line 787 ----------------------------------------
-- line 799 ----------------------------------------
         .                       HybridBitSet::Sparse(sparse) => sparse.is_empty(),
         .                       HybridBitSet::Dense(dense) => dense.is_empty(),
         .                   }
         .               }
         .           
         .               /// Returns the previous element present in the bitset from `elem`,
         .               /// inclusively of elem. That is, will return `Some(elem)` if elem is in the
         .               /// bitset.
     4,454 ( 0.00%)      pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>
         .               where
         .                   T: Ord,
         .               {
     4,454 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),
         .                       HybridBitSet::Dense(dense) => dense.last_set_in(range),
         .                   }
     6,681 ( 0.00%)      }
         .           
   154,899 ( 0.00%)      pub fn insert(&mut self, elem: T) -> bool {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
    34,422 ( 0.00%)          match self {
    33,802 ( 0.00%)              HybridBitSet::Sparse(sparse) if sparse.len() < SPARSE_MAX => {
         .                           // The set is sparse and has space for `elem`.
         .                           sparse.insert(elem)
         .                       }
         .                       HybridBitSet::Sparse(sparse) if sparse.contains(elem) => {
         .                           // The set is sparse and does not have space for `elem`, but
         .                           // that doesn't matter because `elem` is already present.
         .                           false
         .                       }
         .                       HybridBitSet::Sparse(sparse) => {
         .                           // The set is sparse and full. Convert to a dense set.
         .                           let mut dense = sparse.to_dense();
         .                           let changed = dense.insert(elem);
        61 ( 0.00%)                  assert!(changed);
       366 ( 0.00%)                  *self = HybridBitSet::Dense(dense);
         .                           changed
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert(elem),
         .                   }
   137,688 ( 0.00%)      }
         .           
         .               pub fn insert_range(&mut self, elems: impl RangeBounds<T>) {
         .                   // No need to check `elem` against `self.domain_size` here because all
         .                   // the match cases check it, one way or another.
         .                   let start = match elems.start_bound().cloned() {
         .                       Bound::Included(start) => start.index(),
         .                       Bound::Excluded(start) => start.index() + 1,
         .                       Bound::Unbounded => 0,
-- line 848 ----------------------------------------
-- line 879 ----------------------------------------
         .                   match self {
         .                       HybridBitSet::Sparse(_) => {
         .                           *self = HybridBitSet::Dense(BitSet::new_filled(domain_size));
         .                       }
         .                       HybridBitSet::Dense(dense) => dense.insert_all(),
         .                   }
         .               }
         .           
    13,296 ( 0.00%)      pub fn remove(&mut self, elem: T) -> bool {
         .                   // Note: we currently don't bother going from Dense back to Sparse.
    26,754 ( 0.00%)          match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.remove(elem),
         .                       HybridBitSet::Dense(dense) => dense.remove(elem),
         .                   }
    26,592 ( 0.00%)      }
         .           
         .               /// Converts to a dense set, consuming itself in the process.
         .               pub fn to_dense(self) -> BitSet<T> {
         .                   match self {
         .                       HybridBitSet::Sparse(sparse) => sparse.to_dense(),
         .                       HybridBitSet::Dense(dense) => dense,
         .                   }
         .               }
         .           
         .               pub fn iter(&self) -> HybridIter<'_, T> {
     1,224 ( 0.00%)          match self {
     2,470 ( 0.00%)              HybridBitSet::Sparse(sparse) => HybridIter::Sparse(sparse.iter()),
         .                       HybridBitSet::Dense(dense) => HybridIter::Dense(dense.iter()),
         .                   }
         .               }
         .           
         .               bit_relations_inherent_impls! {}
         .           }
         .           
         .           pub enum HybridIter<'a, T: Idx> {
-- line 913 ----------------------------------------
-- line 935 ----------------------------------------
         .           /// to or greater than the domain size.
         .           #[derive(Clone, Debug, PartialEq)]
         .           pub struct GrowableBitSet<T: Idx> {
         .               bit_set: BitSet<T>,
         .           }
         .           
         .           impl<T: Idx> GrowableBitSet<T> {
         .               /// Ensure that the set can hold at least `min_domain_size` elements.
   982,576 ( 0.02%)      pub fn ensure(&mut self, min_domain_size: usize) {
   280,736 ( 0.00%)          if self.bit_set.domain_size < min_domain_size {
       193 ( 0.00%)              self.bit_set.domain_size = min_domain_size;
         .                   }
         .           
         .                   let min_num_words = num_words(min_domain_size);
   561,472 ( 0.01%)          if self.bit_set.words.len() < min_num_words {
         .                       self.bit_set.words.resize(min_num_words, 0)
         .                   }
   842,208 ( 0.01%)      }
         .           
         .               pub fn new_empty() -> GrowableBitSet<T> {
       168 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(0) }
         .               }
         .           
         .               pub fn with_capacity(capacity: usize) -> GrowableBitSet<T> {
         8 ( 0.00%)          GrowableBitSet { bit_set: BitSet::new_empty(capacity) }
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn insert(&mut self, elem: T) -> bool {
   697,540 ( 0.01%)          self.ensure(elem.index() + 1);
         .                   self.bit_set.insert(elem)
         .               }
         .           
         .               /// Returns `true` if the set has changed.
         .               #[inline]
         .               pub fn remove(&mut self, elem: T) -> bool {
         .                   self.ensure(elem.index() + 1);
         .                   self.bit_set.remove(elem)
-- line 973 ----------------------------------------
-- line 976 ----------------------------------------
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
         .                   self.bit_set.is_empty()
         .               }
         .           
         .               #[inline]
         .               pub fn contains(&self, elem: T) -> bool {
         .                   let (word_index, mask) = word_index_and_mask(elem);
     2,337 ( 0.00%)          self.bit_set.words.get(word_index).map_or(false, |word| (word & mask) != 0)
         .               }
         .           }
         .           
         .           /// A fixed-size 2D bit matrix type with a dense representation.
         .           ///
         .           /// `R` and `C` are index types used to identify rows and columns respectively;
         .           /// typically newtyped `usize` wrappers, but they can also just be `usize`.
         .           ///
-- line 992 ----------------------------------------
-- line 1001 ----------------------------------------
         .           }
         .           
         .           impl<R: Idx, C: Idx> BitMatrix<R, C> {
         .               /// Creates a new `rows x columns` matrix, initially empty.
         .               pub fn new(num_rows: usize, num_columns: usize) -> BitMatrix<R, C> {
         .                   // For every element, we need one bit for every other
         .                   // element. Round up to an even number of words.
         .                   let words_per_row = num_words(num_columns);
     1,336 ( 0.00%)          BitMatrix {
         .                       num_rows,
         .                       num_columns,
       972 ( 0.00%)              words: vec![0; num_rows * words_per_row],
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Creates a new matrix, with `row` used as the value for every row.
         .               pub fn from_row_n(row: &BitSet<C>, num_rows: usize) -> BitMatrix<R, C> {
         .                   let num_columns = row.domain_size();
         .                   let words_per_row = num_words(num_columns);
-- line 1020 ----------------------------------------
-- line 1029 ----------------------------------------
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   (0..self.num_rows).map(R::new)
         .               }
         .           
         .               /// The range of bits for a given row.
         .               fn range(&self, row: R) -> (usize, usize) {
         .                   let words_per_row = num_words(self.num_columns);
    19,584 ( 0.00%)          let start = row.index() * words_per_row;
    16,566 ( 0.00%)          (start, start + words_per_row)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
    10,502 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
         .                   let words = &mut self.words[..];
    10,530 ( 0.00%)          let word = words[start + word_index];
     4,212 ( 0.00%)          let new_word = word | mask;
     2,106 ( 0.00%)          words[start + word_index] = new_word;
     4,212 ( 0.00%)          word != new_word
         .               }
         .           
         .               /// Do the bits from `row` contain `column`? Put another way, is
         .               /// the matrix cell at `(row, column)` true?  Put yet another way,
         .               /// if the matrix represents (transitive) reachability, can
         .               /// `row` reach `column`?
       912 ( 0.00%)      pub fn contains(&self, row: R, column: C) -> bool {
     4,560 ( 0.00%)          assert!(row.index() < self.num_rows && column.index() < self.num_columns);
         .                   let (start, _) = self.range(row);
         .                   let (word_index, mask) = word_index_and_mask(column);
     4,560 ( 0.00%)          (self.words[start + word_index] & mask) != 0
     1,824 ( 0.00%)      }
         .           
         .               /// Returns those indices that are true in rows `a` and `b`. This
         .               /// is an *O*(*n*) operation where *n* is the number of elements
         .               /// (somewhat independent from the actual size of the
         .               /// intersection, in particular).
         .               pub fn intersect_rows(&self, row1: R, row2: R) -> Vec<C> {
         .                   assert!(row1.index() < self.num_rows && row2.index() < self.num_rows);
         .                   let (row1_start, row1_end) = self.range(row1);
-- line 1073 ----------------------------------------
-- line 1090 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
     2,078 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    10,530 ( 0.00%)          assert!(read.index() < self.num_rows && write.index() < self.num_rows);
     2,106 ( 0.00%)          let (read_start, read_end) = self.range(read);
         .                   let (write_start, write_end) = self.range(write);
         .                   let words = &mut self.words[..];
         .                   let mut changed = false;
         .                   for (read_index, write_index) in iter::zip(read_start..read_end, write_start..write_end) {
    10,754 ( 0.00%)              let word = words[write_index];
     6,318 ( 0.00%)              let new_word = word | words[read_index];
     2,106 ( 0.00%)              words[write_index] = new_word;
    10,558 ( 0.00%)              changed |= word != new_word;
         .                   }
         .                   changed
     6,234 ( 0.00%)      }
         .           
         .               /// Adds the bits from `with` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               pub fn union_row_with(&mut self, with: &BitSet<C>, write: R) -> bool {
         .                   assert!(write.index() < self.num_rows);
         .                   assert_eq!(with.domain_size(), self.num_columns);
         .                   let (write_start, write_end) = self.range(write);
         .                   let mut changed = false;
-- line 1119 ----------------------------------------
-- line 1209 ----------------------------------------
         .               /// Creates a new empty sparse bit matrix with no rows or columns.
         .               pub fn new(num_columns: usize) -> Self {
         .                   Self { num_columns, rows: IndexVec::new() }
         .               }
         .           
         .               fn ensure_row(&mut self, row: R) -> &mut HybridBitSet<C> {
         .                   // Instantiate any missing rows up to and including row `row` with an empty HybridBitSet.
         .                   // Then replace row `row` with a full HybridBitSet if necessary.
       959 ( 0.00%)          self.rows.get_or_insert_with(row, || HybridBitSet::new_empty(self.num_columns))
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to true. Put another way, insert
         .               /// `column` to the bitset for `row`.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn insert(&mut self, row: R, column: C) -> bool {
     1,164 ( 0.00%)          self.ensure_row(row).insert(column)
         .               }
         .           
         .               /// Sets the cell at `(row, column)` to false. Put another way, delete
         .               /// `column` from the bitset for `row`. Has no effect if `row` does not
         .               /// exist.
         .               ///
         .               /// Returns `true` if this changed the matrix.
         .               pub fn remove(&mut self, row: R, column: C) -> bool {
-- line 1233 ----------------------------------------
-- line 1255 ----------------------------------------
         .           
         .               /// Adds the bits from row `read` to the bits from row `write`, and
         .               /// returns `true` if anything changed.
         .               ///
         .               /// This is used when computing transitive reachability because if
         .               /// you have an edge `write -> read`, because in that case
         .               /// `write` can reach everything that `read` can (and
         .               /// potentially more).
    71,750 ( 0.00%)      pub fn union_rows(&mut self, read: R, write: R) -> bool {
    10,250 ( 0.00%)          if read == write || self.row(read).is_none() {
         .                       return false;
         .                   }
         .           
         .                   self.ensure_row(write);
     4,587 ( 0.00%)          if let (Some(read_row), Some(write_row)) = self.rows.pick2_mut(read, write) {
         .                       write_row.union(read_row)
         .                   } else {
         .                       unreachable!()
         .                   }
    92,250 ( 0.00%)      }
         .           
         .               /// Insert all bits in the given row.
         .               pub fn insert_all_into_row(&mut self, row: R) {
         .                   self.ensure_row(row).insert_all();
         .               }
         .           
         .               pub fn rows(&self) -> impl Iterator<Item = R> {
         .                   self.rows.indices()
-- line 1282 ----------------------------------------
-- line 1284 ----------------------------------------
         .           
         .               /// Iterates through all the columns set to true in a given row of
         .               /// the matrix.
         .               pub fn iter<'a>(&'a self, row: R) -> impl Iterator<Item = C> + 'a {
         .                   self.row(row).into_iter().flat_map(|r| r.iter())
         .               }
         .           
         .               pub fn row(&self, row: R) -> Option<&HybridBitSet<C>> {
    26,194 ( 0.00%)          if let Some(Some(row)) = self.rows.get(row) { Some(row) } else { None }
         .               }
         .           
         .               /// Interescts `row` with `set`. `set` can be either `BitSet` or
         .               /// `HybridBitSet`. Has no effect if `row` does not exist.
         .               ///
         .               /// Returns true if the row was changed.
         .               pub fn intersect_row<Set>(&mut self, row: R, set: &Set) -> bool
         .               where
-- line 1300 ----------------------------------------
-- line 1329 ----------------------------------------
         .                   HybridBitSet<C>: BitRelations<Set>,
         .               {
         .                   self.ensure_row(row).union(set)
         .               }
         .           }
         .           
         .           #[inline]
         .           fn num_words<T: Idx>(domain_size: T) -> usize {
   754,555 ( 0.01%)      (domain_size.index() + WORD_BITS - 1) / WORD_BITS
         .           }
         .           
         .           #[inline]
         .           fn word_index_and_mask<T: Idx>(elem: T) -> (usize, Word) {
         .               let elem = elem.index();
 4,533,369 ( 0.08%)      let word_index = elem / WORD_BITS;
 1,083,190 ( 0.02%)      let mask = 1 << (elem % WORD_BITS);
         .               (word_index, mask)
         .           }
         .           
         .           #[inline]
         .           fn max_bit(word: Word) -> usize {
         2 ( 0.00%)      WORD_BITS - 1 - word.leading_zeros() as usize
         .           }
         .           
         .           /// Integral type used to represent the bit set.
         .           pub trait FiniteBitSetTy:
         .               BitAnd<Output = Self>
         .               + BitAndAssign
         .               + BitOrAssign
         .               + Clone
-- line 1358 ----------------------------------------

 1,551,057 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_index/src/bit_set.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           pub fn move_path_children_matching<'tcx, F>(
        .               move_data: &MoveData<'tcx>,
        .               path: MovePathIndex,
        .               mut cond: F,
        .           ) -> Option<MovePathIndex>
        .           where
        .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
        .           {
        7 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
       26 ( 0.00%)      while let Some(child_index) = next_child {
        .                   let move_path_children = &move_data.move_paths[child_index];
       14 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
       22 ( 0.00%)              if cond(elem) {
        .                           return Some(child_index);
        .                       }
        .                   }
        .                   next_child = move_path_children.next_sibling;
        .               }
        .           
        .               None
        .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
        .           //
        .           // FIXME: we have to do something for moving slice patterns.
        .           fn place_contents_drop_state_cannot_differ<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               place: mir::Place<'tcx>,
        .           ) -> bool {
        .               let ty = place.ty(body, tcx).ty;
2,752,548 ( 0.05%)      match ty.kind() {
        .                   ty::Array(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
        .                           place, ty
        .                       );
        .                       false
        .                   }
        .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
1,835,037 ( 0.03%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
        .                       debug!(
        .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
        .                           place, ty
        .                       );
        .                       true
        .                   }
        .                   _ => false,
        .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               lookup_result: LookupResult,
        .               each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  126,672 ( 0.00%)      match lookup_result {
        .                   LookupResult::Parent(..) => {
        .                       // access to untracked value - do not touch children
        .                   }
        .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
        .               }
        .           }
        .           
        .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               move_path_index: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
3,717,368 ( 0.06%)      fn is_terminal_path<'tcx>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   path: MovePathIndex,
        .               ) -> bool {
  929,342 ( 0.02%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
3,717,368 ( 0.06%)      }
        .           
4,231,815 ( 0.07%)      fn on_all_children_bits<'tcx, F>(
        .                   tcx: TyCtxt<'tcx>,
        .                   body: &Body<'tcx>,
        .                   move_data: &MoveData<'tcx>,
        .                   move_path_index: MovePathIndex,
        .                   each_child: &mut F,
        .               ) where
        .                   F: FnMut(MovePathIndex),
        .               {
   88,760 ( 0.00%)          each_child(move_path_index);
        .           
3,252,778 ( 0.05%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
        .                       return;
        .                   }
        .           
  446,768 ( 0.01%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
  894,293 ( 0.01%)          while let Some(child_index) = next_child_index {
    1,512 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
      252 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
        .                   }
3,582,186 ( 0.06%)      }
2,815,734 ( 0.05%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
        .           }
        .           
        .           pub fn on_all_drop_children_bits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               path: MovePathIndex,
        .               mut each_child: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
    1,531 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
      724 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
      181 ( 0.00%)          let ty = place.ty(body, tcx).ty;
        .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
        .           
        8 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
    1,103 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
      121 ( 0.00%)              each_child(child);
        .                   } else {
        .                       debug!("on_all_drop_children_bits - skipping")
        .                   }
        .               })
        .           }
        .           
   11,891 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
    1,064 ( 0.00%)      for arg in body.args_iter() {
    1,992 ( 0.00%)          let place = mir::Place::from(arg);
    2,988 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
        .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
    1,002 ( 0.00%)              callback(mpi, DropFlagState::Present)
        .                   });
        .               }
    8,512 ( 0.00%)  }
        .           
4,966,236 ( 0.08%)  pub fn drop_flag_effects_for_location<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               ctxt: &MoveDataParamEnv<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex, DropFlagState),
        .           {
        .               let move_data = &ctxt.move_data;
        .               debug!("drop_flag_effects_for_location({:?})", loc);
        .           
        .               // first, move out of the RHS
  207,201 ( 0.00%)      for mi in &move_data.loc_map[loc] {
1,204,339 ( 0.02%)          let path = mi.move_path_index(move_data);
        .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
        .           
  312,197 ( 0.01%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
        .               }
        .           
        .               debug!("drop_flag_effects: assignment for location({:?})", loc);
        .           
   88,760 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
3,861,896 ( 0.06%)  }
        .           
        .           pub fn for_location_inits<'tcx, F>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               loc: Location,
        .               mut callback: F,
        .           ) where
        .               F: FnMut(MovePathIndex),
        .           {
  207,201 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
  643,388 ( 0.01%)          let init = move_data.inits[*ii];
  466,344 ( 0.01%)          match init.kind {
        .                       InitKind::Deep => {
        .                           let path = init.path;
        .           
        .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
        .                       }
        .                       InitKind::Shallow => {
        .                           let mpi = init.path;
        .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
        .               }
        .           }
        .           
        .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
        .           /// `Downcast` to a variant besides the `active_variant`.
        .           ///
        .           /// NOTE: If there are no move paths corresponding to an inactive variant,
        .           /// `handle_inactive_variant` will not be called for that variant.
    6,552 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
        .               tcx: TyCtxt<'tcx>,
        .               body: &mir::Body<'tcx>,
        .               move_data: &MoveData<'tcx>,
        .               enum_place: mir::Place<'tcx>,
        .               active_variant: VariantIdx,
        .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
        .           ) {
    2,730 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
        .                   LookupResult::Exact(mpi) => mpi,
        .                   LookupResult::Parent(_) => return,
        .               };
        .           
        .               let enum_path = &move_data.move_paths[enum_mpi];
      810 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
        .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
        .                   // projection than `enum_place`. This additional projection must be a downcast since the
        .                   // base is an enum.
        .                   let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
        .                   assert_eq!(enum_place.projection.len(), base_proj.len());
        .           
        .                   let variant_idx = match *downcast {
        .                       mir::ProjectionElem::Downcast(_, idx) => idx,
-- line 260 ----------------------------------------
-- line 262 ----------------------------------------
        .                   };
        .           
        .                   if variant_idx != active_variant {
        .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
        .                           handle_inactive_variant(mpi)
        .                       });
        .                   }
        .               }
    4,368 ( 0.00%)  }

3,362,725 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
1,195,727,659 (19.82%)  events annotated

