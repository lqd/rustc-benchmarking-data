--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name async_global_executor --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="async-io" --cfg feature="default" -C metadata=62aca7e4a7e088a1 -C extra-filename=-62aca7e4a7e088a1 --out-dir /usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps --extern async_channel=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libasync_channel-99c1286b49ede700.rmeta --extern async_executor=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libasync_executor-d44f5dccfb6bdc30.rmeta --extern async_io=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libasync_io-eb55638cd3b4861a.rmeta --extern async_mutex=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libasync_mutex-19b97630fa01706e.rmeta --extern blocking=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libblocking-047240f1c862b0ed.rmeta --extern futures_lite=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libfutures_lite-d126a8383ae4c21f.rmeta --extern num_cpus=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libnum_cpus-6c418dc8cdad9aca.rmeta --extern once_cell=/usr/home/liquid/tmp/.tmpeWFg6i/target/debug/deps/libonce_cell-fc4b62a6778a2354.rmeta -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-async-global-executor-2.0.2-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
4,329,519,990 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                    file:function
--------------------------------------------------------------------------------
243,386,902 ( 5.62%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
142,726,308 ( 3.30%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
116,041,396 ( 2.68%)  ./malloc/malloc.c:_int_malloc
104,030,218 ( 2.40%)  ./malloc/malloc.c:_int_free
 64,837,897 ( 1.50%)  ./malloc/malloc.c:malloc
 59,364,792 ( 1.37%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
 56,435,302 ( 1.30%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
 55,704,674 ( 1.29%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
 51,465,593 ( 1.19%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
 50,690,910 ( 1.17%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
 49,282,157 ( 1.14%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
 47,877,107 ( 1.11%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
 44,305,652 ( 1.02%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
 41,310,701 ( 0.95%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
 33,294,873 ( 0.77%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
 31,706,265 ( 0.73%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 30,534,223 ( 0.71%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 30,226,734 ( 0.70%)  ./malloc/malloc.c:free
 28,333,455 ( 0.65%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
 26,051,004 ( 0.60%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 24,730,736 ( 0.57%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 24,696,911 ( 0.57%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 24,456,293 ( 0.56%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 22,203,415 ( 0.51%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 20,495,447 ( 0.47%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 20,207,810 ( 0.47%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 19,475,577 ( 0.45%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 18,825,564 ( 0.43%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 18,777,007 ( 0.43%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 18,765,929 ( 0.43%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
 18,498,680 ( 0.43%)  ???:llvm::DAGTypeLegalizer::run()
 18,443,360 ( 0.43%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 18,348,065 ( 0.42%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 18,246,861 ( 0.42%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 18,037,922 ( 0.42%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 17,811,281 ( 0.41%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 17,519,780 ( 0.40%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 17,379,848 ( 0.40%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 17,174,245 ( 0.40%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 16,676,580 ( 0.39%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 16,305,246 ( 0.38%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 16,235,515 ( 0.37%)  ???:llvm::SelectionDAG::Legalize()
 16,039,234 ( 0.37%)  ./malloc/malloc.c:malloc_consolidate
 15,989,917 ( 0.37%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 15,733,554 ( 0.36%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 15,663,806 ( 0.36%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 14,937,615 ( 0.35%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 14,821,013 ( 0.34%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 14,702,063 ( 0.34%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
 14,676,147 ( 0.34%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
 14,329,878 ( 0.33%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 13,769,561 ( 0.32%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
 13,759,361 ( 0.32%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 13,746,101 ( 0.32%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
 12,731,095 ( 0.29%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
 12,729,800 ( 0.29%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
 12,588,253 ( 0.29%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 11,266,429 ( 0.26%)  ???:llvm::MDString::get(llvm::LLVMContext&, llvm::StringRef)
 10,656,994 ( 0.25%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
 10,655,388 ( 0.25%)  ./stdlib/msort.c:msort_with_tmp.part.0
 10,553,581 ( 0.24%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 10,425,249 ( 0.24%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
 10,384,719 ( 0.24%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
 10,309,062 ( 0.24%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
 10,197,663 ( 0.24%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
 10,131,809 ( 0.23%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
  9,913,270 ( 0.23%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
  9,867,398 ( 0.23%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
  9,723,334 ( 0.22%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
  9,677,672 ( 0.22%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
  9,487,706 ( 0.22%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
  9,260,450 ( 0.21%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
  9,160,709 ( 0.21%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
  9,104,220 ( 0.21%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
  9,073,943 ( 0.21%)  ???:(anonymous namespace)::CFIInstrInserter::runOnMachineFunction(llvm::MachineFunction&)
  8,901,871 ( 0.21%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
  8,786,865 ( 0.20%)  ???:llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&)
  8,689,336 ( 0.20%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
  8,555,329 ( 0.20%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
  8,450,937 ( 0.20%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::runSemiNCA(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, unsigned int)
  8,437,083 ( 0.19%)  ???:llvm::MCELFStreamer::emitLabel(llvm::MCSymbol*, llvm::SMLoc)
  8,300,482 ( 0.19%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
  8,181,575 ( 0.19%)  ???:llvm::SelectionDAG::getRegister(unsigned int, llvm::EVT)
  8,121,546 ( 0.19%)  ???:llvm::X86TargetMachine::getTargetTransformInfo(llvm::Function const&)
  8,104,175 ( 0.19%)  ???:llvm::MCStreamer::emitULEB128IntValue(unsigned long, unsigned int)
  8,062,973 ( 0.19%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
  7,913,065 ( 0.18%)  ???:(anonymous namespace)::X86AsmBackend::applyFixup(llvm::MCAssembler const&, llvm::MCFixup const&, llvm::MCValue const&, llvm::MutableArrayRef<char>, unsigned long, bool, llvm::MCSubtargetInfo const*) const
  7,843,105 ( 0.18%)  ???:char* llvm::hashing::detail::hash_combine_recursive_helper::combine_data<llvm::Metadata*>(unsigned long&, char*, char*, llvm::Metadata*)
  7,731,377 ( 0.18%)  ???:llvm::hashing::detail::hash_combine_recursive_helper::combine(unsigned long, char*, char*)
  7,722,395 ( 0.18%)  ???:(anonymous namespace)::RegAllocFast::markRegUsedInInstr(unsigned short)
  7,693,215 ( 0.18%)  ???:llvm::SmallPtrSetImplBase::insert_imp_big(void const*)
  7,684,545 ( 0.18%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
  7,641,624 ( 0.18%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
  7,603,663 ( 0.18%)  ???:llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::Allocate(unsigned long, llvm::Align)
  7,517,182 ( 0.17%)  ???:llvm::MachineFunctionPass::runOnFunction(llvm::Function&)
  7,429,483 ( 0.17%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
  7,339,750 ( 0.17%)  ???:llvm::AsmPrinter::emitFunctionBody()
  7,274,329 ( 0.17%)  ???:llvm::ScheduleDAGSDNodes::EmitSchedule(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>&)
  7,179,175 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
  7,038,971 ( 0.16%)  ???:llvm::MCELFStreamer::emitInstToData(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
  7,017,370 ( 0.16%)  ???:llvm::MCDwarfLineAddr::Encode(llvm::MCContext&, llvm::MCDwarfLineTableParams, long, unsigned long, llvm::raw_ostream&)
  6,979,091 ( 0.16%)  ???:???
  6,888,080 ( 0.16%)  ???:(anonymous namespace)::VarLocBasedLDV::collectIDsForRegs(llvm::SmallSet<unsigned int, 32u, std::less<unsigned int> >&, llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> > const&, llvm::CoalescingBitVector<unsigned long> const&, (anonymous namespace)::VarLocBasedLDV::VarLocMap const&)
  6,811,286 ( 0.16%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:memcpy@GLIBC_2.2.5
  6,552,050 ( 0.15%)  ???:llvm::MCAssembler::layoutSectionOnce(llvm::MCAsmLayout&, llvm::MCSection&)
  6,526,717 ( 0.15%)  ???:llvm::MCObjectStreamer::emitInstruction(llvm::MCInst const&, llvm::MCSubtargetInfo const&)
  6,517,076 ( 0.15%)  ???:llvm::InstrEmitter::EmitCopyFromReg(llvm::SDNode*, unsigned int, bool, bool, llvm::Register, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
  6,486,877 ( 0.15%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitMemModRMByte(llvm::MCInst const&, unsigned int, unsigned int, unsigned long, bool, unsigned long, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&, bool) const
  6,466,680 ( 0.15%)  ???:llvm::DIEAbbrev::Profile(llvm::FoldingSetNodeID&) const
  6,445,237 ( 0.15%)  ???:llvm::MCObjectStreamer::emitValueImpl(llvm::MCExpr const*, unsigned int, llvm::SMLoc)
  6,277,269 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_line
  6,277,269 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::SourceFile>::line_begin_pos
  6,254,640 ( 0.14%)  ???:llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl(llvm::DICompositeType const*)
  6,144,864 ( 0.14%)  ???:llvm::X86RegisterInfo::eliminateFrameIndex(llvm::MachineInstrBundleIterator<llvm::MachineInstr, false>, int, unsigned int, llvm::RegScavenger*) const
  6,064,247 ( 0.14%)  ???:llvm::SelectionDAG::clear()
  6,031,504 ( 0.14%)  ???:llvm::DILocation::getImpl(llvm::LLVMContext&, unsigned int, unsigned int, llvm::Metadata*, llvm::Metadata*, bool, llvm::Metadata::StorageType, bool)
  5,869,851 ( 0.14%)  ???:llvm::CoalescingBitVector<unsigned long>::find(unsigned long) const
  5,821,553 ( 0.13%)  ???:llvm::FoldingSet<llvm::SDNode>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
  5,584,856 ( 0.13%)  ???:(anonymous namespace)::X86AsmBackend::getFixupKindInfo(llvm::MCFixupKind) const
  5,535,933 ( 0.13%)  ???:llvm::LoopBase<llvm::BasicBlock, llvm::Loop>::getExitBlocks(llvm::SmallVectorImpl<llvm::BasicBlock*>&) const
  5,503,490 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs:<core::str::lossy::Utf8LossyChunksIter as core::iter::traits::iterator::Iterator>::next
  5,503,316 ( 0.13%)  ???:llvm::LazyCallGraph::Node::populateSlow()
  5,487,538 ( 0.13%)  ???:llvm::MDTuple::getImpl(llvm::LLVMContext&, llvm::ArrayRef<llvm::Metadata*>, llvm::Metadata::StorageType, bool)
  5,459,289 ( 0.13%)  ???:llvm::Function::dropAllReferences()
  5,420,818 ( 0.13%)  ???:llvm::DIEValueList::addValue(llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>&, llvm::DIEValue const&)
  5,368,179 ( 0.12%)  ???:llvm::MDNode::dropAllReferences()
  5,356,724 ( 0.12%)  ???:llvm::X86RegisterInfo::getReservedRegs(llvm::MachineFunction const&) const
  5,247,486 ( 0.12%)  ???:(anonymous namespace)::RegAllocFast::setPhysReg(llvm::MachineInstr&, llvm::MachineOperand&, unsigned short)
  5,201,260 ( 0.12%)  ???:llvm::SelectionDAG::getNode(unsigned int, llvm::SDLoc const&, llvm::EVT, llvm::SDValue, llvm::SDValue, llvm::SDNodeFlags)
  5,164,362 ( 0.12%)  ./malloc/malloc.c:realloc
  5,040,637 ( 0.12%)  ???:llvm::InlineFunction(llvm::CallBase&, llvm::InlineFunctionInfo&, llvm::AAResults*, bool, llvm::Function*)
  5,033,743 ( 0.12%)  ???:llvm::MDString* llvm::DINode::getOperandAs<llvm::MDString>(unsigned int) const
  4,977,230 ( 0.11%)  ???:bool llvm::DenseMapBase<llvm::DenseMap<llvm::DILocation*, llvm::detail::DenseSetEmpty, llvm::MDNodeInfo<llvm::DILocation>, llvm::detail::DenseSetPair<llvm::DILocation*> >, llvm::DILocation*, llvm::detail::DenseSetEmpty, llvm::MDNodeInfo<llvm::DILocation>, llvm::detail::DenseSetPair<llvm::DILocation*> >::LookupBucketFor<llvm::DILocation*>(llvm::DILocation* const&, llvm::detail::DenseSetPair<llvm::DILocation*> const*&) const
  4,947,976 ( 0.11%)  ???:llvm::X86TargetMachine::getSubtargetImpl(llvm::Function const&) const
  4,907,019 ( 0.11%)  ???:llvm::MCAssembler::writeSectionData(llvm::raw_ostream&, llvm::MCSection const*, llvm::MCAsmLayout const&) const
  4,845,537 ( 0.11%)  ./elf/dl-lookup.c:do_lookup_x
  4,813,910 ( 0.11%)  ./nptl/pthread_rwlock_common.c:pthread_rwlock_unlock
  4,792,222 ( 0.11%)  ???:llvm::X86FrameLowering::getFrameIndexReference(llvm::MachineFunction const&, int, llvm::Register&) const
  4,772,569 ( 0.11%)  ???:(anonymous namespace)::RemoveRedundantDebugValues::runOnMachineFunction(llvm::MachineFunction&)
  4,759,896 ( 0.11%)  ???:llvm::MCSymbolRefExpr::create(llvm::MCSymbol const*, llvm::MCSymbolRefExpr::VariantKind, llvm::MCContext&, llvm::SMLoc)
  4,753,362 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
  4,752,553 ( 0.11%)  ???:llvm::Module::getOrInsertFunction(llvm::StringRef, llvm::FunctionType*)
  4,731,226 ( 0.11%)  ???:llvm::LexicalScopes::extractLexicalScopes(llvm::SmallVectorImpl<std::pair<llvm::MachineInstr const*, llvm::MachineInstr const*> >&, llvm::DenseMap<llvm::MachineInstr const*, llvm::LexicalScope*, llvm::DenseMapInfo<llvm::MachineInstr const*>, llvm::detail::DenseMapPair<llvm::MachineInstr const*, llvm::LexicalScope*> >&)
  4,721,560 ( 0.11%)  ???:(anonymous namespace)::RegAllocFast::allocVirtReg(llvm::MachineInstr&, (anonymous namespace)::RegAllocFast::LiveReg&, llvm::Register, bool)
  4,713,562 ( 0.11%)  ???:llvm::SelectionDAG::RemoveDeadNodes()
  4,712,526 ( 0.11%)  ???:llvm::SelectionDAGISel::DoInstructionSelection()
  4,684,245 ( 0.11%)  ???:(anonymous namespace)::X86AsmBackend::emitInstructionBegin(llvm::MCObjectStreamer&, llvm::MCInst const&)
  4,648,426 ( 0.11%)  ???:(anonymous namespace)::RegAllocFast::freePhysReg(unsigned short)
  4,595,827 ( 0.11%)  ???:llvm::MetadataAsValue::get(llvm::LLVMContext&, llvm::Metadata*)
  4,524,078 ( 0.10%)  ???:llvm::AnalysisManager<llvm::Function>::getResultImpl(llvm::AnalysisKey*, llvm::Function&)
  4,520,145 ( 0.10%)  ???:llvm::MCAssembler::isThumbFunc(llvm::MCSymbol const*) const
  4,516,463 ( 0.10%)  ???:(anonymous namespace)::RegAllocFast::isRegUsedInInstr(unsigned short, bool) const
  4,445,462 ( 0.10%)  ???:llvm::TargetLoweringBase::ArgListEntry::setAttributes(llvm::CallBase const*, unsigned int)
  4,412,048 ( 0.10%)  ???:llvm::SmallDenseMap<llvm::SDNode*, llvm::detail::DenseSetEmpty, 32u, llvm::DenseMapInfo<llvm::SDNode*>, llvm::detail::DenseSetPair<llvm::SDNode*> >::grow(unsigned int)
  4,386,164 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
  4,367,622 ( 0.10%)  ???:llvm::CallBase::getArgOperand(unsigned int) const
  4,355,649 ( 0.10%)  ???:(anonymous namespace)::X86AsmBackend::finishLayout(llvm::MCAssembler const&, llvm::MCAsmLayout&) const

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs
--------------------------------------------------------------------------------
Ir                 

-- line 8 ----------------------------------------
        .           /// Lossy UTF-8 string.
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           pub struct Utf8Lossy {
        .               bytes: [u8],
        .           }
        .           
        .           impl Utf8Lossy {
        .               #[must_use]
   20,368 ( 0.00%)      pub fn from_bytes(bytes: &[u8]) -> &Utf8Lossy {
        .                   // SAFETY: Both use the same memory layout, and UTF-8 correctness isn't required.
        .                   unsafe { mem::transmute(bytes) }
   10,184 ( 0.00%)      }
        .           
   20,362 ( 0.00%)      pub fn chunks(&self) -> Utf8LossyChunksIter<'_> {
        .                   Utf8LossyChunksIter { source: &self.bytes }
   10,181 ( 0.00%)      }
        .           }
        .           
        .           /// Iterator over lossy UTF-8 string
        .           #[must_use = "iterators are lazy and do nothing unless consumed"]
        .           #[unstable(feature = "str_internals", issue = "none")]
        .           #[allow(missing_debug_implementations)]
        .           pub struct Utf8LossyChunksIter<'a> {
        .               source: &'a [u8],
-- line 31 ----------------------------------------
-- line 40 ----------------------------------------
        .               /// Single broken char, empty if none.
        .               /// Empty iff iterator item is last.
        .               pub broken: &'a [u8],
        .           }
        .           
        .           impl<'a> Iterator for Utf8LossyChunksIter<'a> {
        .               type Item = Utf8LossyChunk<'a>;
        .           
   30,552 ( 0.00%)      fn next(&mut self) -> Option<Utf8LossyChunk<'a>> {
   20,368 ( 0.00%)          if self.source.is_empty() {
        .                       return None;
        .                   }
        .           
        .                   const TAG_CONT_U8: u8 = 128;
        .                   fn safe_get(xs: &[u8], i: usize) -> u8 {
        .                       *xs.get(i).unwrap_or(&0)
        .                   }
        .           
        .                   let mut i = 0;
        .                   let mut valid_up_to = 0;
1,508,412 ( 0.03%)          while i < self.source.len() {
        .                       // SAFETY: `i < self.source.len()` per previous line.
        .                       // For some reason the following are both significantly slower:
        .                       // while let Some(&byte) = self.source.get(i) {
        .                       // while let Some(byte) = self.source.get(i).copied() {
  754,206 ( 0.02%)              let byte = unsafe { *self.source.get_unchecked(i) };
  754,206 ( 0.02%)              i += 1;
        .           
1,508,412 ( 0.03%)              if byte < 128 {
        .                           // This could be a `1 => ...` case in the match below, but for
        .                           // the common case of all-ASCII inputs, we bypass loading the
        .                           // sizeable UTF8_CHAR_WIDTH table into cache.
        .                       } else {
        .                           let w = utf8_char_width(byte);
        .           
        .                           match w {
        .                               2 => {
-- line 76 ----------------------------------------
-- line 121 ----------------------------------------
        .                   // via `i += 1` and in between every single one of those increments, `i`
        .                   // is compared against `self.source.len()`. That happens either
        .                   // literally by `i < self.source.len()` in the while-loop's condition,
        .                   // or indirectly by `safe_get(self.source, i) & 192 != TAG_CONT_U8`. The
        .                   // loop is terminated as soon as the latest `i += 1` has made `i` no
        .                   // longer less than `self.source.len()`, which means it'll be at most
        .                   // equal to `self.source.len()`.
        .                   let (inspected, remaining) = unsafe { self.source.split_at_unchecked(i) };
   20,368 ( 0.00%)          self.source = remaining;
        .           
        .                   // SAFETY: `valid_up_to <= i` because it is only ever assigned via
        .                   // `valid_up_to = i` and `i` only increases.
        .                   let (valid, broken) = unsafe { inspected.split_at_unchecked(valid_up_to) };
        .           
   50,920 ( 0.00%)          Some(Utf8LossyChunk {
        .                       // SAFETY: All bytes up to `valid_up_to` are valid UTF-8.
        .                       valid: unsafe { from_utf8_unchecked(valid) },
        .                       broken,
        .                   })
   50,920 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Display for Utf8Lossy {
       24 ( 0.00%)      fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   // If we're the empty string then our iterator won't actually yield
        .                   // anything, so perform the formatting manually
        3 ( 0.00%)          if self.bytes.is_empty() {
        .                       return "".fmt(f);
        .                   }
        .           
       33 ( 0.00%)          for Utf8LossyChunk { valid, broken } in self.chunks() {
        .                       // If we successfully decoded the whole chunk as a valid string then
        .                       // we can return a direct formatting of the string which will also
        .                       // respect various formatting flags if possible.
        6 ( 0.00%)              if valid.len() == self.bytes.len() {
        3 ( 0.00%)                  assert!(broken.is_empty());
        .                           return valid.fmt(f);
        .                       }
        .           
        .                       f.write_str(valid)?;
        .                       if !broken.is_empty() {
        .                           f.write_char(char::REPLACEMENT_CHARACTER)?;
        .                       }
        .                   }
        .                   Ok(())
       27 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for Utf8Lossy {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   f.write_char('"')?;
        .           
        .                   for Utf8LossyChunk { valid, broken } in self.chunks() {
        .                       // Valid part.
-- line 174 ----------------------------------------

  805,135 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/str/lossy.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  284,822 ( 0.01%)      ptr: NonZeroUsize,
  563,878 ( 0.01%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
  117,232 ( 0.00%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
   28,192 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
   28,192 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
   88,760 ( 0.00%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
   28,192 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   36,748 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   36,748 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  168,322 ( 0.00%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  168,322 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
        2 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
        2 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
3,285,516 ( 0.08%)              match ptr & TAG_MASK {
   14,451 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
  873,870 ( 0.02%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      488 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   23,908 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
   11,487 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
  140,960 ( 0.00%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
  140,960 ( 0.00%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
    5,290 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
    5,290 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    3,100 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
      880 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    2,790 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
   23,725 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
    8,924 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
    4,176 ( 0.00%)          tcx.intern_substs(&substs)
   23,832 ( 0.00%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
   33,303 ( 0.00%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   13,984 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    1,600 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
   26,160 ( 0.00%)      }
        .           
        .               pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   16,007 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
-- line 281 ----------------------------------------
-- line 301 ----------------------------------------
        .               ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
       72 ( 0.00%)      pub fn type_at(&self, i: usize) -> Ty<'tcx> {
   71,940 ( 0.00%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
       48 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
        .                   if let GenericArgKind::Lifetime(lt) = self[i].unpack() {
        .                       lt
        .                   } else {
        .                       bug!("expected region for param #{} in {:?}", i, self);
        .                   }
-- line 323 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
    3,444 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
      984 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
    3,936 ( 0.00%)      }
        .           
    1,743 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
    3,486 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
  192,773 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
  696,314 ( 0.02%)          match self.len() {
        .                       1 => {
  104,170 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
  333,624 ( 0.01%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
   34,623 ( 0.00%)                  let param0 = self[0].try_fold_with(folder)?;
   89,374 ( 0.00%)                  let param1 = self[1].try_fold_with(folder)?;
   88,894 ( 0.00%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
   58,283 ( 0.00%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   66,744 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    1,766 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
    2,999 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
  226,975 ( 0.01%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
   83,022 ( 0.00%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  768,046 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  149,332 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
   44,092 ( 0.00%)          self.binders_passed += 1;
    4,239 ( 0.00%)          let t = t.super_fold_with(self);
   44,092 ( 0.00%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  154,668 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   51,556 ( 0.00%)          match *r {
   11,198 ( 0.00%)              ty::ReEarlyBound(data) => {
   11,198 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    5,599 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  180,446 ( 0.00%)      }
        .           
  802,632 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  267,544 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  363,360 ( 0.01%)          match *t.kind() {
  471,430 ( 0.01%)              ty::Param(p) => self.ty_for_param(p, t),
  524,364 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  900,750 ( 0.02%)      }
        .           
   94,073 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
   26,878 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
  120,951 ( 0.00%)              c.super_fold_with(self)
        .                   }
        .               }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  188,572 ( 0.00%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  308,688 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   13,379 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
      422 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
      207 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
       42 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

1,273,262 ( 0.03%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 141 ----------------------------------------
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  301,336 ( 0.01%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
      397 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      104 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
       31 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
    4,339 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
   42,128 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
  263,816 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 448 ----------------------------------------
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
        .               pub const fn as_ptr(&self) -> *const T {
  485,799 ( 0.01%)          self as *const [T] as *const T
        .               }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
-- line 464 ----------------------------------------
-- line 476 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
        .               pub const fn as_mut_ptr(&mut self) -> *mut T {
        7 ( 0.00%)          self as *mut [T] as *mut T
        .               }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
-- line 492 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
    8,768 ( 0.00%)          let _ = &self[a];
   22,626 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    9,438 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
      336 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
    4,960 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    1,693 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
       28 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2142 ----------------------------------------
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let n = needle.len();
   32,867 ( 0.00%)          self.len() >= n && needle == &self[..n]
        .               }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2158 ----------------------------------------
-- line 2171 ----------------------------------------
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
        .                   let (m, n) = (self.len(), needle.len());
   96,344 ( 0.00%)          m >= n && needle == &self[m - n..]
        .               }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
-- line 2187 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
3,203,690 ( 0.07%)          while left < right {
5,629,918 ( 0.13%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  563,928 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
1,428,976 ( 0.03%)              if cmp == Less {
3,299,540 ( 0.08%)                  left = mid + 1;
  740,397 ( 0.02%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
4,249,783 ( 0.10%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3203 ----------------------------------------
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
   36,712 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
        .                       ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
-- line 3219 ----------------------------------------
-- line 3382 ----------------------------------------
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
        .                   let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
    4,054 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    4,054 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    4,054 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------

2,244,416 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 1,268,473 ( 0.03%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
    87,944 ( 0.00%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
17,418,511 ( 0.40%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   177,192 ( 0.00%)          self.stride += Group::WIDTH;
   177,192 ( 0.00%)          self.pos += self.stride;
   147,499 ( 0.00%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
    47,436 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
    70,785 ( 0.00%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    57,366 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   137,555 ( 0.00%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    63,378 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
    79,027 ( 0.00%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   119,806 ( 0.00%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
        76 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 422 ----------------------------------------
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         .               pub fn new_in(alloc: A) -> Self {
        90 ( 0.00%)          Self {
         .                       table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         .               }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
-- line 438 ----------------------------------------
-- line 440 ----------------------------------------
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
        60 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     4,653 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
     3,478 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
     3,478 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
     6,956 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     1,294 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
     5,662 ( 0.00%)          self.erase_no_drop(&item);
         8 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   298,498 ( 0.01%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,750 ( 0.00%)          match self.find(hash, eq) {
     1,043 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    10,583 ( 0.00%)              None => None,
         .                   }
   419,638 ( 0.01%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     3,410 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 642 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   196,903 ( 0.00%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
    80,001 ( 0.00%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
         .               }
         .           
-- line 660 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   190,568 ( 0.00%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   117,368 ( 0.00%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,805,804 ( 0.04%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     1,452 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 1,255,927 ( 0.03%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 1,333,188 ( 0.03%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
   377,392 ( 0.01%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
       344 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   283,044 ( 0.01%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
       796 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   267,665 ( 0.01%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     3,096 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
   539,059 ( 0.01%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   415,469 ( 0.01%)          self.table.items += 1;
         .                   bucket
     1,587 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    64,444 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
    22,701 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    28,911 ( 0.00%)              eq(self.bucket(index).as_ref())
     7,347 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
     2,920 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
    73,784 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    21,383 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
    11,473 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    31,803 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
    13,364 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 920 ----------------------------------------
         .               #[inline]
         .               pub fn len(&self) -> usize {
         .                   self.table.items
         .               }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         .               pub fn is_empty(&self) -> bool {
   384,955 ( 0.01%)          self.len() == 0
         .               }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
-- line 936 ----------------------------------------
-- line 938 ----------------------------------------
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
         .               pub unsafe fn iter(&self) -> RawIter<T> {
         .                   let data = Bucket::from_base_index(self.data_end(), 0);
         .                   RawIter {
         .                       iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    17,046 ( 0.00%)              items: self.table.items,
         .                   }
         .               }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
-- line 954 ----------------------------------------
-- line 995 ----------------------------------------
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
         .               pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
         .                   debug_assert_eq!(iter.len(), self.len());
         .           
         .                   let alloc = self.table.alloc.clone();
     1,584 ( 0.00%)          let allocation = self.into_allocation();
     1,188 ( 0.00%)          RawIntoIter {
     1,980 ( 0.00%)              iter,
         .                       allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
         .               }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
       510 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         .                       None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       188 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
         .                   mem::forget(self);
         .                   alloc
         .               }
         .           }
         .           
-- line 1033 ----------------------------------------
-- line 1042 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
         .               const fn new_in(alloc: A) -> Self {
   214,683 ( 0.00%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
         .                       ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
         .               }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   117,688 ( 0.00%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    38,276 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
    66,684 ( 0.00%)          Ok(Self {
         .                       ctrl,
    34,844 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
    85,868 ( 0.00%)      }
         .           
         .               #[inline]
    15,087 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     3,798 ( 0.00%)          if capacity == 0 {
     2,978 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
    53,492 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
     7,780 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    15,087 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
    87,153 ( 0.00%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
    87,153 ( 0.00%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   174,306 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
   831,236 ( 0.02%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 2,420,387 ( 0.06%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,120,718 ( 0.03%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    61,256 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 2,125,625 ( 0.05%)              for bit in group.match_byte(h2_hash) {
 4,240,208 ( 0.10%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 3,078,360 ( 0.07%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
   652,967 ( 0.02%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         6 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
         .                       let group = Group::load_aligned(self.ctrl(i));
         .                       let group = group.convert_special_to_empty_and_full_to_deleted();
         .                       group.store_aligned(self.ctrl(i));
         .                   }
         .           
         .                   // Fix up the trailing control bytes. See the comments in set_ctrl
         .                   // for the handling of tables smaller than the group width.
         6 ( 0.00%)          if self.buckets() < Group::WIDTH {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
         .                   } else {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
         .                   }
         .               }
         .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 3,121,464 ( 0.07%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
14,042,758 ( 0.32%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 1,578,269 ( 0.04%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 1,255,888 ( 0.03%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        66 ( 0.00%)          probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
         .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
         .                   self.set_ctrl(index, h2(hash));
         .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 2,380,225 ( 0.05%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
   792,099 ( 0.02%)          *self.ctrl(index) = ctrl;
   792,161 ( 0.02%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
         .               fn buckets(&self) -> usize {
    79,941 ( 0.00%)          self.bucket_mask + 1
         .               }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
    60,559 ( 0.00%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
         .               fn is_empty_singleton(&self) -> bool {
   406,973 ( 0.01%)          self.bucket_mask == 0
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     2,181 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
    50,342 ( 0.00%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    23,147 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
    46,298 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
    46,298 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
    96,658 ( 0.00%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         3 ( 0.00%)              Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    23,147 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
     5,327 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   461,727 ( 0.01%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    23,147 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
         .                       }
         .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
         .                   });
         .           
         .                   // At this point, DELETED elements are elements that we haven't
         .                   // rehashed yet. Find them and re-insert them at their ideal
         .                   // position.
         .                   'outer: for i in 0..guard.buckets() {
       128 ( 0.00%)              if *guard.ctrl(i) != DELETED {
         .                           continue;
         .                       }
         .           
         .                       let i_p = guard.bucket_ptr(i, size_of);
         .           
         .                       'inner: loop {
         .                           // Hash the current item
         .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
         .                           let new_i = guard.find_insert_slot(hash);
         .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
         .           
         .                           // Probing works by scanning through all of the control
         .                           // bytes in groups, which may not be aligned to the group
         .                           // size. If both the new and old position fall within the
         .                           // same unaligned group, then there is no benefit in moving
         .                           // it and we can just continue to the next item.
        22 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
         .                               guard.set_ctrl_h2(i, hash);
         .                               continue 'outer;
         .                           }
         .           
         .                           // We are moving the current item to a new position. Write
         .                           // our H2 to the control byte of the new position.
         .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
         .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
         .                               // swapped into the old slot.
         .                               debug_assert_eq!(prev_ctrl, DELETED);
         .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
         .                               continue 'inner;
         .                           }
         .                       }
         .                   }
         .           
         6 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    14,679 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     1,102 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
     1,497 ( 0.00%)          self.items = 0;
     1,182 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
    72,142 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   288,568 ( 0.01%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   359,205 ( 0.01%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   288,568 ( 0.01%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
       256 ( 0.00%)      fn clone(&self) -> Self {
        46 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
       288 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        24 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   252,787 ( 0.01%)      fn drop(&mut self) {
   176,677 ( 0.00%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   275,586 ( 0.01%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,584 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
         .                       let iter = self.iter();
         .                       self.into_iter_from(iter)
         .                   }
     1,980 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1934 ----------------------------------------
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
    87,917 ( 0.00%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    15,102 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    24,268 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
    47,948 ( 0.00%)                  if self.next_ctrl >= self.end {
         .                               return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     2,682 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     2,016 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
     5,921 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
         .               }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
-- line 1966 ----------------------------------------
-- line 2102 ----------------------------------------
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
         .               unsafe fn drop_elements(&mut self) {
       564 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
-- line 2118 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    13,867 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    42,760 ( 0.00%)          if let Some(b) = self.iter.next() {
   134,691 ( 0.00%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         .                       None
         .                   }
    27,734 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   (self.items, Some(self.items))
         .               }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
-- line 2151 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,082 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
         .           
         .                       // Free the table
     2,364 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       262 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,938 ( 0.00%)      fn next(&mut self) -> Option<T> {
       186 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     5,643 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         4 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
        80 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
        10 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
        80 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

 6,983,309 ( 0.16%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                 

-- line 21 ----------------------------------------
        .           use rustc_target::spec::abi;
        .           use std::borrow::Cow;
        .           use std::cmp::Ordering;
        .           use std::marker::PhantomData;
        .           use std::ops::Range;
        .           use ty::util::IntTypeExt;
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       90 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct TypeAndMut<'tcx> {
    8,831 ( 0.00%)      pub ty: Ty<'tcx>,
   44,155 ( 0.00%)      pub mutbl: hir::Mutability,
        .           }
        .           
        .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
        .           #[derive(HashStable)]
        .           /// A "free" region `fr` can be interpreted as "some region
        .           /// at least as big as the scope `fr.scope`".
        .           pub struct FreeRegion {
      429 ( 0.00%)      pub scope: DefId,
      807 ( 0.00%)      pub bound_region: BoundRegionKind,
        .           }
        .           
  134,134 ( 0.00%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
    1,170 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundRegionKind {
        .               /// An anonymous region parameter for a given fn (&T)
   12,135 ( 0.00%)      BrAnon(u32),
        .           
        .               /// Named region parameters for functions (a in &'a T)
        .               ///
        .               /// The `DefId` is needed to distinguish free regions in
        .               /// the event of shadowing.
      122 ( 0.00%)      BrNamed(DefId, Symbol),
        .           
        .               /// Anonymous region for the implicit env pointer parameter
        .               /// to a closure
        .               BrEnv,
        .           }
        .           
      906 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           #[derive(HashStable)]
        .           pub struct BoundRegion {
   29,232 ( 0.00%)      pub var: BoundVar,
   23,312 ( 0.00%)      pub kind: BoundRegionKind,
        .           }
        .           
        .           impl BoundRegionKind {
        .               pub fn is_named(&self) -> bool {
        .                   match *self {
        .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
        .                       _ => false,
        .                   }
        .               }
        .           }
        .           
        .           /// Defines the kinds of types.
        .           ///
        .           /// N.B., if you change this, you'll probably want to change the corresponding
        .           /// AST structure in `rustc_ast/src/ast.rs` as well.
5,376,405 ( 0.12%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
  298,770 ( 0.01%)  #[derive(HashStable)]
        .           #[rustc_diagnostic_item = "TyKind"]
        .           pub enum TyKind<'tcx> {
        .               /// The primitive boolean type. Written as `bool`.
        .               Bool,
        .           
        .               /// The primitive character type; holds a Unicode scalar value
        .               /// (a non-surrogate code point). Written as `char`.
        .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
        .               Float(ty::FloatTy),
        .           
        .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
        .               ///
        .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
        .               /// That is, even after substitution it is possible that there are type
        .               /// variables. This happens when the `Adt` corresponds to an ADT
        .               /// definition and not a concrete use of it.
  700,594 ( 0.02%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
        .           
        .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
        .               Foreign(DefId),
        .           
        .               /// The pointee of a string slice. Written as `str`.
        .               Str,
        .           
        .               /// An array with the given length. Written as `[T; n]`.
    1,848 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
        .           
        .               /// The pointee of an array slice. Written as `[T]`.
        .               Slice(Ty<'tcx>),
        .           
        .               /// A raw pointer. Written as `*mut T` or `*const T`
        .               RawPtr(TypeAndMut<'tcx>),
        .           
        .               /// A reference; a pointer with an associated lifetime. Written as
        .               /// `&'a mut T` or `&'a T`.
  309,351 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
        .           
        .               /// The anonymous type of a function declaration/definition. Each
        .               /// function has a unique type, which is output (for a function
        .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
        .               ///
        .               /// For example the type of `bar` here:
        .               ///
        .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .               ///
        .               /// ```rust
        .               /// fn foo() -> i32 { 1 }
        .               /// let bar: fn() -> i32 = foo;
        .               /// ```
        .               FnPtr(PolyFnSig<'tcx>),
        .           
        .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
    5,840 ( 0.00%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
        .           
        .               /// The anonymous type of a closure. Used to represent the type of
        .               /// `|a| a`.
        .               Closure(DefId, SubstsRef<'tcx>),
        .           
        .               /// The anonymous type of a generator. Used to represent the type of
        .               /// `|a| yield a`.
   57,348 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
        .           
        .               /// A type representing the types stored inside a generator.
        .               /// This should only appear in GeneratorInteriors.
        .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
        .           
        .               /// The never type `!`.
        .               Never,
        .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
        .               /// The substitutions are for the generics of the function in question.
        .               /// After typeck, the concrete type can be found in the `types` map.
        .               Opaque(DefId, SubstsRef<'tcx>),
        .           
        .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
        .               Param(ParamTy),
        .           
        .               /// Bound type variable, used only when preparing a trait query.
      291 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
        .           
        .               /// A placeholder type - universally quantified higher-ranked type.
        .               Placeholder(ty::PlaceholderType),
        .           
        .               /// A type variable used during type checking.
        .               Infer(InferTy),
        .           
        .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
        .               pub closure_kind_ty: T,
        .               pub closure_sig_as_fn_ptr_ty: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> ClosureSubsts<'tcx> {
        .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
        .               /// for the closure parent, alongside additional closure-specific components.
       13 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> ClosureSubsts<'tcx> {
        .                   ClosureSubsts {
        .                       substs: tcx.mk_substs(
       26 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       52 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
        .                                   .iter()
        .                                   .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       26 ( 0.00%)      }
        .           
        .               /// Divides the closure substs into their respective components.
        .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
    2,117 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
   10,818 ( 0.00%)              [
    3,199 ( 0.00%)                  ref parent_substs @ ..,
    3,437 ( 0.00%)                  closure_kind_ty,
    1,038 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
    3,055 ( 0.00%)                  tupled_upvars_ty,
    8,468 ( 0.00%)              ] => ClosureSubstsParts {
        .                           parent_substs,
        .                           closure_kind_ty,
        .                           closure_sig_as_fn_ptr_ty,
        .                           tupled_upvars_ty,
        .                       },
        .                       _ => bug!("closure substs missing synthetics"),
        .                   }
    6,351 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `ClosureSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle closure
        .               /// types that haven't had their synthetic types substituted in.
        4 ( 0.00%)      pub fn is_valid(self) -> bool {
        8 ( 0.00%)          self.substs.len() >= 3
        8 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        8 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the closure's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the closure.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
    2,358 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
    2,145 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
    1,074 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
    1,572 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this closure.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
   11,106 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; may return a type
        .               /// variable during inference. To get the closure kind during
        .               /// inference, use `infcx.closure_kind(substs)`.
      485 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_kind_ty.expect_ty()
      970 ( 0.00%)      }
        .           
        .               /// Returns the `fn` pointer type representing the closure signature for this
        .               /// closure.
        .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
        .               // type is known at the time of the creation of `ClosureSubsts`,
        .               // see `rustc_typeck::check::closure`.
        .               pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
        .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
        .               }
        .           
        .               /// Returns the closure kind for this closure; only usable outside
        .               /// of an inference context, because in that context we know that
        .               /// there are no type variables.
        .               ///
        .               /// If you have an inference context, use `infcx.closure_kind()`.
        6 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
      140 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
       12 ( 0.00%)      }
        .           
        .               /// Extracts the signature from the closure.
      497 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
        .                   let ty = self.sig_as_fn_ptr_ty();
      994 ( 0.00%)          match ty.kind() {
    1,988 ( 0.00%)              ty::FnPtr(sig) => *sig,
        .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
        .                   }
    1,491 ( 0.00%)      }
        .           }
        .           
        .           /// Similar to `ClosureSubsts`; see the above documentation for more.
        .           #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GeneratorSubsts<'tcx> {
        .               pub substs: SubstsRef<'tcx>,
        .           }
        .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
        .               pub return_ty: T,
        .               pub witness: T,
        .               pub tupled_upvars_ty: T,
        .           }
        .           
        .           impl<'tcx> GeneratorSubsts<'tcx> {
        .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
        .               /// for the generator parent, alongside additional generator-specific components.
        7 ( 0.00%)      pub fn new(
        .                   tcx: TyCtxt<'tcx>,
        .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
        .               ) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts {
        .                       substs: tcx.mk_substs(
       14 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       21 ( 0.00%)                      [
        7 ( 0.00%)                          parts.resume_ty,
        .                                   parts.yield_ty,
        7 ( 0.00%)                          parts.return_ty,
        .                                   parts.witness,
        7 ( 0.00%)                          parts.tupled_upvars_ty,
        .                               ]
        .                               .iter()
        .                               .map(|&ty| ty.into()),
        .                           ),
        .                       ),
        .                   }
       14 ( 0.00%)      }
        .           
        .               /// Divides the generator substs into their respective components.
        .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
    1,119 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
        .                   match self.substs[..] {
   11,235 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
    5,595 ( 0.00%)                  GeneratorSubstsParts {
        .                               parent_substs,
        .                               resume_ty,
        .                               yield_ty,
        .                               return_ty,
        .                               witness,
        .                               tupled_upvars_ty,
        .                           }
        .                       }
        .                       _ => bug!("generator substs missing synthetics"),
        .                   }
    3,357 ( 0.00%)      }
        .           
        .               /// Returns `true` only if enough of the synthetic types are known to
        .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
        .               ///
        .               /// Used primarily by `ty::print::pretty` to be able to handle generator
        .               /// types that haven't had their synthetic types substituted in.
        7 ( 0.00%)      pub fn is_valid(self) -> bool {
       14 ( 0.00%)          self.substs.len() >= 5
       14 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
       14 ( 0.00%)      }
        .           
        .               /// Returns the substitutions of the generator's parent.
        .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
        .                   self.split().parent_substs
        .               }
        .           
        .               /// This describes the types that can be contained in a generator.
        .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
        .               /// It contains a tuple of all the types that could end up on a generator frame.
        .               /// The state transformation MIR pass may only produce layouts which mention types
        .               /// in this tuple. Upvars are not counted here.
       80 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
        .                   self.split().witness.expect_ty()
      160 ( 0.00%)      }
        .           
        .               /// Returns an iterator over the list of types of captured paths by the generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
      216 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
    1,647 ( 0.00%)          match self.tupled_upvars_ty().kind() {
        .                       TyKind::Error(_) => None,
    1,016 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
      144 ( 0.00%)      }
        .           
        .               /// Returns the tuple type representing the upvars for this generator.
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
    4,056 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
        .               }
        .           
        .               /// Returns the type representing the resume type of the generator.
       14 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
        .                   self.split().resume_ty.expect_ty()
       28 ( 0.00%)      }
        .           
        .               /// Returns the type representing the yield type of the generator.
        7 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
        .                   self.split().yield_ty.expect_ty()
       14 ( 0.00%)      }
        .           
        .               /// Returns the type representing the return type of the generator.
        7 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
        .                   self.split().return_ty.expect_ty()
       14 ( 0.00%)      }
        .           
        .               /// Returns the "generator signature", which consists of its yield
        .               /// and return types.
        .               ///
        .               /// N.B., some bits of the code prefers to see this wrapped in a
        .               /// binder, but it never contains bound regions. Probably this
        .               /// function should be removed.
    1,372 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
      364 ( 0.00%)          ty::Binder::dummy(self.sig())
    1,372 ( 0.00%)      }
        .           
        .               /// Returns the "generator signature", which consists of its resume, yield
        .               /// and return types.
      371 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
    1,113 ( 0.00%)          ty::GenSig {
        .                       resume_ty: self.resume_ty(),
        .                       yield_ty: self.yield_ty(),
        .                       return_ty: self.return_ty(),
        .                   }
    1,113 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GeneratorSubsts<'tcx> {
        .               /// Generator has not been resumed yet.
        .               pub const UNRESUMED: usize = 0;
        .               /// Generator has returned or is completed.
        .               pub const RETURNED: usize = 1;
        .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 589 ----------------------------------------
        .               const UNRESUMED_NAME: &'static str = "Unresumed";
        .               const RETURNED_NAME: &'static str = "Returned";
        .               const POISONED_NAME: &'static str = "Panicked";
        .           
        .               /// The valid variant indices of this generator.
        .               #[inline]
        .               pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {
        .                   // FIXME requires optimized MIR
    1,520 ( 0.00%)          let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();
        .                   VariantIdx::new(0)..VariantIdx::new(num_variants)
        .               }
        .           
        .               /// The discriminant for the given variant. Panics if the `variant_index` is
        .               /// out of range.
        .               #[inline]
        .               pub fn discriminant_for_variant(
        .                   &self,
        .                   def_id: DefId,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Discr<'tcx> {
        .                   // Generators don't support explicit discriminant values, so they are
        .                   // the same as the variant index.
       91 ( 0.00%)          assert!(self.variant_range(def_id, tcx).contains(&variant_index));
      182 ( 0.00%)          Discr { val: variant_index.as_usize() as u128, ty: self.discr_ty(tcx) }
        .               }
        .           
        .               /// The set of all discriminants for the generator, enumerated with their
        .               /// variant indices.
        .               #[inline]
        .               pub fn discriminants(
        .                   self,
        .                   def_id: DefId,
-- line 621 ----------------------------------------
-- line 623 ----------------------------------------
        .               ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {
        .                   self.variant_range(def_id, tcx).map(move |index| {
        .                       (index, Discr { val: index.as_usize() as u128, ty: self.discr_ty(tcx) })
        .                   })
        .               }
        .           
        .               /// Calls `f` with a reference to the name of the enumerator for the given
        .               /// variant `v`.
    2,169 ( 0.00%)      pub fn variant_name(v: VariantIdx) -> Cow<'static, str> {
    3,426 ( 0.00%)          match v.as_usize() {
        .                       Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),
        .                       Self::RETURNED => Cow::from(Self::RETURNED_NAME),
        .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
    1,869 ( 0.00%)              _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
        .                   }
    2,892 ( 0.00%)      }
        .           
        .               /// The type of the state discriminant used in the generator type.
        .               #[inline]
        .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
      290 ( 0.00%)          tcx.types.u32
        .               }
        .           
        .               /// This returns the types of the MIR locals which had to be stored across suspension points.
        .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
        .               /// All the types here must be in the tuple in GeneratorInterior.
        .               ///
        .               /// The locals are grouped by their variant number. Note that some locals may
        .               /// be repeated in multiple variants.
        .               #[inline]
        .               pub fn state_tys(
        .                   self,
        .                   def_id: DefId,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {
    4,312 ( 0.00%)          let layout = tcx.generator_layout(def_id).unwrap();
        .                   layout.variant_fields.iter().map(move |variant| {
    4,692 ( 0.00%)              variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
        .                   })
        .               }
        .           
        .               /// This is the types of the fields of a generator which are not stored in a
        .               /// variant.
        .               #[inline]
    2,734 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
        .                   self.upvar_tys()
    1,884 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Debug, Copy, Clone, HashStable)]
        .           pub enum UpvarSubsts<'tcx> {
        .               Closure(SubstsRef<'tcx>),
        .               Generator(SubstsRef<'tcx>),
        .           }
        .           
        .           impl<'tcx> UpvarSubsts<'tcx> {
        .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
        .               /// In case there was a type error in figuring out the types of the captured path, an
        .               /// empty iterator is returned.
        .               #[inline]
        .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       64 ( 0.00%)          let tupled_tys = match self {
       51 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       33 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   };
        .           
      136 ( 0.00%)          match tupled_tys.kind() {
        .                       TyKind::Error(_) => None,
      116 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
        .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
        .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
        .                   }
        .                   .into_iter()
        .                   .flatten()
        .               }
        .           
        .               #[inline]
        .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
      104 ( 0.00%)          match self {
       71 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
       47 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
        .                   }
        .               }
        .           }
        .           
        .           /// An inline const is modeled like
        .           ///
        .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
        .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
        .               }
        .           
        .               /// Returns the type of this inline const.
        .               pub fn ty(self) -> Ty<'tcx> {
        .                   self.split().ty.expect_ty()
        .               }
        .           }
        .           
   23,692 ( 0.00%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   13,240 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub enum ExistentialPredicate<'tcx> {
        .               /// E.g., `Iterator`.
        .               Trait(ExistentialTraitRef<'tcx>),
        .               /// E.g., `Iterator::Item = T`.
        .               Projection(ExistentialProjection<'tcx>),
        .               /// E.g., `Send`.
      766 ( 0.00%)      AutoTrait(DefId),
        .           }
        .           
        .           impl<'tcx> ExistentialPredicate<'tcx> {
        .               /// Compares via an ordering that will not change if modules are reordered or other changes are
        .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    5,385 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
        .                   use self::ExistentialPredicate::*;
    8,146 ( 0.00%)          match (*self, *other) {
        .                       (Trait(_), Trait(_)) => Ordering::Equal,
        .                       (Projection(ref a), Projection(ref b)) => {
        .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
        .                       }
        .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
        .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
        .                       }
        .                       (Trait(_), _) => Ordering::Less,
        .                       (Projection(_), Trait(_)) => Ordering::Greater,
        .                       (Projection(_), _) => Ordering::Less,
        .                       (AutoTrait(_), _) => Ordering::Greater,
        .                   }
    6,462 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
      909 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
        .                   use crate::ty::ToPredicate;
      737 ( 0.00%)          match self.skip_binder() {
        .                       ExistentialPredicate::Trait(tr) => {
        .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::Projection(p) => {
        4 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
        .                       }
        .                       ExistentialPredicate::AutoTrait(did) => {
      162 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
        .                               def_id: did,
        .                               substs: tcx.mk_substs_trait(self_ty, &[]),
        .                           });
        .                           trait_ref.without_const().to_predicate(tcx)
        .                       }
        .                   }
      808 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
        .               /// Returns the "principal `DefId`" of this set of existential predicates.
        .               ///
        .               /// A Rust trait object type consists (in addition to a lifetime bound)
        .               /// of a set of trait bounds, which are separated into any number
        .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
        .               /// are the set `{Sync}`.
        .               ///
        .               /// It is also possible to have a "trivial" trait object that
        .               /// consists only of auto traits, with no principal - for example,
        .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
        .               /// is `{Send, Sync}`, while there is no principal. These trait objects
        .               /// have a "trivial" vtable consisting of just the size, alignment,
        .               /// and destructor.
      158 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
      807 ( 0.00%)          self[0]
      317 ( 0.00%)              .map_bound(|this| match this {
        .                           ExistentialPredicate::Trait(tr) => Some(tr),
        .                           _ => None,
      632 ( 0.00%)              })
        .                       .transpose()
      474 ( 0.00%)      }
        .           
       43 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
        .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       86 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn projection_bounds<'a>(
        .                   &'a self,
        .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
        .                   self.iter().filter_map(|predicate| {
      108 ( 0.00%)              predicate
    1,108 ( 0.00%)                  .map_bound(|pred| match pred {
      206 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
        .                               _ => None,
        .                           })
        .                           .transpose()
        .                   })
        .               }
        .           
        .               #[inline]
        .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
       23 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
        .                       ExistentialPredicate::AutoTrait(did) => Some(did),
        .                       _ => None,
        .                   })
        .               }
        .           }
        .           
        .           /// A complete reference to a trait. These take numerous guises in syntax,
        .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
        .           ///     T: Foo<U>
        .           ///
        .           /// This would be represented by a trait-reference where the `DefId` is the
        .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
        .           /// and `U` as parameter 1.
        .           ///
        .           /// Trait references also appear in object types like `Foo<U>`, but in
        .           /// that case the `Self` parameter is absent from the substitutions.
   17,019 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
  118,626 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct TraitRef<'tcx> {
      581 ( 0.00%)      pub def_id: DefId,
   96,834 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> TraitRef<'tcx> {
      106 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
        .                   TraitRef { def_id, substs }
      424 ( 0.00%)      }
        .           
        .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
        .               /// are the parameters defined on trait.
      639 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
      284 ( 0.00%)          ty::Binder::dummy(TraitRef {
        .                       def_id,
      426 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
        .                   })
      568 ( 0.00%)      }
        .           
        .               #[inline]
        6 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
        .                   self.substs.type_at(0)
        4 ( 0.00%)      }
        .           
    3,752 ( 0.00%)      pub fn from_method(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_id: DefId,
        .                   substs: SubstsRef<'tcx>,
        .               ) -> ty::TraitRef<'tcx> {
        .                   let defs = tcx.generics_of(trait_id);
        .           
      469 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
    5,159 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyTraitRef<'tcx> {
        .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
        .                   self.map_bound_ref(|tr| tr.self_ty())
        .               }
        .           
        .               pub fn def_id(&self) -> DefId {
    1,770 ( 0.00%)          self.skip_binder().def_id
      590 ( 0.00%)      }
        .           
      998 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
    1,996 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
        .                       trait_ref,
        .                       constness: ty::BoundConstness::NotConst,
        .                       polarity: ty::ImplPolarity::Positive,
        .                   })
      998 ( 0.00%)      }
        .           }
        .           
        .           /// An existential reference to a trait, where `Self` is erased.
        .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
        .           ///
        .           ///     exists T. T: Trait<'a, 'b, X, Y>
        .           ///
        .           /// The substitutions don't include the erased `Self`, only trait
        .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
      216 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    2,209 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialTraitRef<'tcx> {
      424 ( 0.00%)      pub def_id: DefId,
    3,025 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           }
        .           
        .           impl<'tcx> ExistentialTraitRef<'tcx> {
      200 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_ref: ty::TraitRef<'tcx>,
        .               ) -> ty::ExistentialTraitRef<'tcx> {
        .                   // Assert there is a Self.
        .                   trait_ref.substs.type_at(0);
        .           
        .                   ty::ExistentialTraitRef {
        .                       def_id: trait_ref.def_id,
        .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
        .                   }
      200 ( 0.00%)      }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
       46 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
        .                   // otherwise the escaping vars would be captured by the binder
        .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
        .           
       23 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
      115 ( 0.00%)      }
        .           }
        .           
        .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
        .           
        .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
        .               pub fn def_id(&self) -> DefId {
        .                   self.skip_binder().def_id
        .               }
        .           
        .               /// Object types don't have a self type specified. Therefore, when
        .               /// we convert the principal trait-ref into a normal trait-ref,
        .               /// you must give *some* self type. A common choice is `mk_err()`
        .               /// or some placeholder type.
      123 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
      179 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
      164 ( 0.00%)      }
        .           }
        .           
   49,388 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    1,091 ( 0.00%)  #[derive(HashStable)]
        .           pub enum BoundVariableKind {
        .               Ty(BoundTyKind),
        .               Region(BoundRegionKind),
        .               Const,
        .           }
        .           
        .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
        .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
        .           /// (which would be represented by the type `PolyTraitRef ==
        .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
        .           /// erase, or otherwise "discharge" these bound vars, we change the
        .           /// type from `Binder<'tcx, T>` to just `T` (see
        .           /// e.g., `liberate_late_bound_regions`).
        .           ///
        .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   17,795 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
  102,980 ( 0.00%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
        .           
        .           impl<'tcx, T> Binder<'tcx, T>
        .           where
        .               T: TypeFoldable<'tcx>,
        .           {
        .               /// Wraps `value` in a binder, asserting that `value` does not
        .               /// contain any bound vars that would be bound by the
        .               /// binder. This is commonly used to 'inject' a value T into a
        .               /// different binding level.
    3,752 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    9,761 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   26,386 ( 0.00%)          Binder(value, ty::List::empty())
    3,720 ( 0.00%)      }
        .           
        .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(vars);
        .                       value.visit_with(&mut validator);
        .                   }
   16,813 ( 0.00%)          Binder(value, vars)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Binder<'tcx, T> {
        .               /// Skips the binder and returns the "bound" value. This is a
        .               /// risky thing to do because it's easy to get confused about
        .               /// De Bruijn indices and the like. It is usually better to
        .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
        .               /// accounting.
        .               ///
        .               /// Some examples where `skip_binder` is reasonable:
        .               ///
        .               /// - extracting the `DefId` from a PolyTraitRef;
        .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
        .               ///   a type parameter `X`, since the type `X` does not reference any regions
        .               pub fn skip_binder(self) -> T {
  194,389 ( 0.00%)          self.0
        .               }
        .           
        .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
      798 ( 0.00%)          self.1
        .               }
        .           
        .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
    1,447 ( 0.00%)          Binder(&self.0, self.1)
        .               }
        .           
        .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   let value = f(&self.0);
        .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .           
        .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(&T) -> U,
        .               {
        .                   self.as_ref().map_bound(f)
        .               }
        .           
    1,196 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
        .               where
        .                   F: FnOnce(T) -> U,
        .               {
   16,963 ( 0.00%)          let value = f(self.0);
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
   43,960 ( 0.00%)          Binder(value, self.1)
    1,438 ( 0.00%)      }
        .           
        .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
        .               where
        .                   F: FnOnce(T) -> Result<U, E>,
        .               {
        .                   let value = f(self.0)?;
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.1);
        .                       value.visit_with(&mut validator);
        .                   }
    5,273 ( 0.00%)          Ok(Binder(value, self.1))
        .               }
        .           
        .               /// Wraps a `value` in a binder, using the same bound variables as the
        .               /// current `Binder`. This should not be used if the new value *changes*
        .               /// the bound variables. Note: the (old or new) value itself does not
        .               /// necessarily need to *name* all the bound variables.
        .               ///
        .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
        .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
        .               where
        .                   U: TypeFoldable<'tcx>,
        .               {
        .                   if cfg!(debug_assertions) {
        .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
        .                       value.visit_with(&mut validator);
        .                   }
    5,217 ( 0.00%)          Binder(value, self.1)
        .               }
        .           
        .               /// Unwraps and returns the value within, but only if it contains
        .               /// no bound vars at all. (In other words, if this binder --
        .               /// and indeed any enclosing binder -- doesn't bind anything at
        .               /// all.) Otherwise, returns `None`.
        .               ///
        .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
        .               /// binder, but permits late-bound vars bound by enclosing
        .               /// binders, but that would require adjusting the debruijn
        .               /// indices, and given the shallow binding structure we often use,
        .               /// would not be that useful.)
        .               pub fn no_bound_vars(self) -> Option<T>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   28,458 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
      120 ( 0.00%)      }
        .           
        .               /// Splits the contents into two things that share the same binder
        .               /// level as the original, returning two distinct binders.
        .               ///
        .               /// `f` should consider bound regions at depth 1 to be free, and
        .               /// anything it produces with bound regions at depth 1 will be
        .               /// bound in the resulting return values.
        .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
        .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
        .                   let bound_vars = self.1;
        .                   self.0.map(|v| Binder(v, bound_vars))
        .               }
        .           }
        .           
        .           /// Represents the projection of an associated type. In explicit UFCS
        .           /// form this would be written `<T as Trait<..>>::N`.
      499 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
   15,457 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ProjectionTy<'tcx> {
        .               /// The parameters of the associated item.
    7,157 ( 0.00%)      pub substs: SubstsRef<'tcx>,
        .           
        .               /// The `DefId` of the `TraitItem` for the associated type `N`.
        .               ///
        .               /// Note that this is not the `DefId` of the `TraitRef` containing this
        .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
   10,240 ( 0.00%)      pub item_def_id: DefId,
        .           }
        .           
        .           impl<'tcx> ProjectionTy<'tcx> {
    4,536 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
    1,296 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    5,184 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference and own substs from this projection.
        .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
        .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
    2,135 ( 0.00%)      pub fn trait_ref_and_own_substs(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
      915 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
        .                   let trait_generics = tcx.generics_of(def_id);
    1,525 ( 0.00%)          (
        .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
        .                       &self.substs[trait_generics.count()..],
        .                   )
    2,745 ( 0.00%)      }
        .           
        .               /// Extracts the underlying trait reference from this projection.
        .               /// For example, if this is a projection of `<T as Iterator>::Item`,
        .               /// then this function would return a `T: Iterator` trait reference.
        .               ///
        .               /// WARNING: This will drop the substs for generic associated types
        .               /// consider calling [Self::trait_ref_and_own_substs] to get those
        .               /// as well.
    5,634 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
      626 ( 0.00%)          let def_id = self.trait_def_id(tcx);
      626 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    6,886 ( 0.00%)      }
        .           
    1,331 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    3,993 ( 0.00%)          self.substs.type_at(0)
    2,662 ( 0.00%)      }
        .           }
        .           
    1,454 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
        .           pub struct GenSig<'tcx> {
        .               pub resume_ty: Ty<'tcx>,
        .               pub yield_ty: Ty<'tcx>,
        .               pub return_ty: Ty<'tcx>,
        .           }
        .           
        .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
        .           
        .           /// Signature of a function type, which we have arbitrarily
        .           /// decided to use to refer to the input/output types.
        .           ///
        .           /// - `inputs`: is the list of arguments and their modes.
        .           /// - `output`: is the return type.
        .           /// - `c_variadic`: indicates whether this is a C-variadic function.
   29,671 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
   16,232 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct FnSig<'tcx> {
    1,362 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
   13,003 ( 0.00%)      pub c_variadic: bool,
    2,389 ( 0.00%)      pub unsafety: hir::Unsafety,
   11,934 ( 0.00%)      pub abi: abi::Abi,
        .           }
        .           
        .           impl<'tcx> FnSig<'tcx> {
    9,314 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
   46,382 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
   18,628 ( 0.00%)      }
        .           
    4,075 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
   42,728 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    8,150 ( 0.00%)      }
        .           
        .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
        .               // method.
        .               fn fake() -> FnSig<'tcx> {
        .                   FnSig {
        .                       inputs_and_output: List::empty(),
        .                       c_variadic: false,
        .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
        .               }
        .           }
        .           
        .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
        .           
        .           impl<'tcx> PolyFnSig<'tcx> {
        .               #[inline]
        .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
    3,933 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
        .               }
        .               #[inline]
        .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
      391 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
        .               }
        .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
        .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       38 ( 0.00%)      }
        .               #[inline]
        .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
      376 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
        .               }
        .               pub fn c_variadic(&self) -> bool {
       74 ( 0.00%)          self.skip_binder().c_variadic
       37 ( 0.00%)      }
        .               pub fn unsafety(&self) -> hir::Unsafety {
      364 ( 0.00%)          self.skip_binder().unsafety
      182 ( 0.00%)      }
        .               pub fn abi(&self) -> abi::Abi {
   31,564 ( 0.00%)          self.skip_binder().abi
    7,891 ( 0.00%)      }
        .           }
        .           
        .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
        .           
       44 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
      932 ( 0.00%)  #[derive(HashStable)]
        .           pub struct ParamTy {
        .               pub index: u32,
        .               pub name: Symbol,
        .           }
        .           
        .           impl<'tcx> ParamTy {
       22 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
        .                   ParamTy { index, name }
       11 ( 0.00%)      }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        .                   ParamTy::new(def.index, def.name)
        .               }
        .           
        .               #[inline]
        .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        .                   tcx.mk_ty_param(self.index, self.name)
        .               }
        .           }
        .           
        .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
        .           #[derive(HashStable)]
        .           pub struct ParamConst {
       90 ( 0.00%)      pub index: u32,
       90 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           impl ParamConst {
        .               pub fn new(index: u32, name: Symbol) -> ParamConst {
        .                   ParamConst { index, name }
        .               }
        .           
        .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
        .           /// the inference variable is supposed to satisfy the relation
        .           /// *for every value of the placeholder region*. To ensure that doesn't
        .           /// happen, you can use `leak_check`. This is more clearly explained
        .           /// by the [rustc dev guide].
        .           ///
        .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
        .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
        .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
  794,443 ( 0.02%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    5,660 ( 0.00%)  pub enum RegionKind {
        .               /// Region bound in a type or fn declaration which will be
        .               /// substituted 'early' -- that is, at the same time when type
        .               /// parameters are substituted.
        .               ReEarlyBound(EarlyBoundRegion),
        .           
        .               /// Region bound in a function scope, which will be substituted when the
        .               /// function is called.
   46,534 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
        .           
        .               /// When checking a function body, the types of all arguments and so forth
        .               /// that refer to bound region parameters are modified to refer to free
        .               /// region parameters.
        .               ReFree(FreeRegion),
        .           
        .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
        .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
        .               /// regions visible from `U`, but not less than regions not visible
        .               /// from `U`.
        .               ReEmpty(ty::UniverseIndex),
        .           
        .               /// Erased region, used by trait selection, in MIR and during codegen.
        .               ReErased,
        .           }
        .           
   13,206 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
        .           pub struct EarlyBoundRegion {
      148 ( 0.00%)      pub def_id: DefId,
    4,463 ( 0.00%)      pub index: u32,
    4,787 ( 0.00%)      pub name: Symbol,
        .           }
        .           
        .           /// A **`const`** **v**ariable **ID**.
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
        .           pub struct ConstVid<'tcx> {
       99 ( 0.00%)      pub index: u32,
        .               pub phantom: PhantomData<&'tcx ()>,
        .           }
        .           
        .           rustc_index::newtype_index! {
        .               /// A **region** (lifetime) **v**ariable **ID**.
        .               pub struct RegionVid {
        .                   DEBUG_FORMAT = custom,
        .               }
-- line 1504 ----------------------------------------
-- line 1513 ----------------------------------------
        .           rustc_index::newtype_index! {
        .               pub struct BoundVar { .. }
        .           }
        .           
        .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub struct BoundTy {
        .               pub var: BoundVar,
      291 ( 0.00%)      pub kind: BoundTyKind,
        .           }
        .           
    5,007 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        .           #[derive(HashStable)]
        .           pub enum BoundTyKind {
        .               Anon,
        .               Param(Symbol),
        .           }
        .           
        .           impl From<BoundVar> for BoundTy {
        .               fn from(var: BoundVar) -> Self {
        .                   BoundTy { var, kind: BoundTyKind::Anon }
        .               }
        .           }
        .           
        .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
       26 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    1,705 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
        .           pub struct ExistentialProjection<'tcx> {
      232 ( 0.00%)      pub item_def_id: DefId,
    1,872 ( 0.00%)      pub substs: SubstsRef<'tcx>,
      468 ( 0.00%)      pub term: Term<'tcx>,
        .           }
        .           
        .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
        .           
        .           impl<'tcx> ExistentialProjection<'tcx> {
        .               /// Extracts the underlying existential trait reference from this projection.
        .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
        .               /// then this function would return an `exists T. T: Iterator` existential trait
        .               /// reference.
      196 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
       84 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
       56 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
       28 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
        .                   ty::ExistentialTraitRef { def_id, substs }
      252 ( 0.00%)      }
        .           
        .               pub fn with_self_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   self_ty: Ty<'tcx>,
        .               ) -> ty::ProjectionPredicate<'tcx> {
        .                   // otherwise the escaping regions would be captured by the binders
        .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1569 ----------------------------------------
        .                       projection_ty: ty::ProjectionTy {
        .                           item_def_id: self.item_def_id,
        .                           substs: tcx.mk_substs_trait(self_ty, self.substs),
        .                       },
        .                       term: self.term,
        .                   }
        .               }
        .           
       35 ( 0.00%)      pub fn erase_self_ty(
        .                   tcx: TyCtxt<'tcx>,
        .                   projection_predicate: ty::ProjectionPredicate<'tcx>,
        .               ) -> Self {
        .                   // Assert there is a Self.
       21 ( 0.00%)          projection_predicate.projection_ty.substs.type_at(0);
        .           
       28 ( 0.00%)          Self {
       14 ( 0.00%)              item_def_id: projection_predicate.projection_ty.item_def_id,
        .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
        7 ( 0.00%)              term: projection_predicate.term,
        .                   }
       49 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> PolyExistentialProjection<'tcx> {
       50 ( 0.00%)      pub fn with_self_ty(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   self_ty: Ty<'tcx>,
        .               ) -> ty::PolyProjectionPredicate<'tcx> {
       50 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
       60 ( 0.00%)      }
        .           
        .               pub fn item_def_id(&self) -> DefId {
       18 ( 0.00%)          self.skip_binder().item_def_id
        9 ( 0.00%)      }
        .           }
        .           
        .           /// Region utilities
        .           impl RegionKind {
        .               /// Is this region named by the user?
        .               pub fn has_name(&self) -> bool {
        .                   match *self {
        .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
        .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
        .                       RegionKind::ReEmpty(_) => false,
        .                       RegionKind::ReErased => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_late_bound(&self) -> bool {
      414 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_placeholder(&self) -> bool {
        .                   matches!(*self, ty::RePlaceholder(..))
        .               }
        .           
        .               #[inline]
        .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
   14,273 ( 0.00%)          match *self {
        .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               pub fn type_flags(&self) -> TypeFlags {
        .                   let mut flags = TypeFlags::empty();
        .           
   41,287 ( 0.00%)          match *self {
        .                       ty::ReVar(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
        .                           flags = flags | TypeFlags::HAS_RE_INFER;
        .                       }
        .                       ty::RePlaceholder(..) => {
        .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
        .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
        .                       ty::ReErased => {
        .                           flags = flags | TypeFlags::HAS_RE_ERASED;
        .                       }
        .                   }
        .           
        .                   debug!("type_flags({:?}) = {:?}", self, flags);
        .           
        .                   flags
    2,838 ( 0.00%)      }
        .           
        .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
        .               /// For example, consider the regions in this snippet of code:
        .               ///
        .               /// ```
        .               /// impl<'a> Foo {
        .               ///      ^^ -- early bound, declared on an impl
        .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
        .           
        .               #[inline(always)]
        .               pub fn flags(&self) -> TypeFlags {
        .                   self.flags
        .               }
        .           
        .               #[inline]
        .               pub fn is_unit(&self) -> bool {
      868 ( 0.00%)          match self.kind() {
      165 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_never(&self) -> bool {
    2,468 ( 0.00%)          matches!(self.kind(), Never)
        .               }
        .           
        .               #[inline]
        .               pub fn is_primitive(&self) -> bool {
        .                   self.kind().is_primitive()
        .               }
        .           
        .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn is_ref(&self) -> bool {
        .                   matches!(self.kind(), Ref(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_var(&self) -> bool {
    7,143 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    4,424 ( 0.00%)          match self.kind() {
      601 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_ty_infer(&self) -> bool {
       60 ( 0.00%)          matches!(self.kind(), Infer(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_phantom_data(&self) -> bool {
        .                   if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
        .               }
        .           
        .               #[inline]
-- line 1770 ----------------------------------------
-- line 1775 ----------------------------------------
        .               /// Returns `true` if this type is a `str`.
        .               #[inline]
        .               pub fn is_str(&self) -> bool {
        .                   *self.kind() == Str
        .               }
        .           
        .               #[inline]
        .               pub fn is_param(&self, index: u32) -> bool {
       73 ( 0.00%)          match self.kind() {
        .                       ty::Param(ref data) => data.index == index,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_slice(&self) -> bool {
        .                   match self.kind() {
        .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_array(&self) -> bool {
        9 ( 0.00%)          matches!(self.kind(), Array(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_simd(&self) -> bool {
        .                   match self.kind() {
        .                       Adt(def, _) => def.repr.simd(),
        .                       _ => false,
        .                   }
        .               }
        .           
        4 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        8 ( 0.00%)          match self.kind() {
        .                       Array(ty, _) | Slice(ty) => ty,
        .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
        .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
        .                   }
        4 ( 0.00%)      }
        .           
        .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
        .                   match self.kind() {
        .                       Adt(def, substs) => {
        .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
        .                           let variant = def.non_enum_variant();
        .                           let f0_ty = variant.fields[0].ty(tcx, substs);
        .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
        .                   match self.kind() {
        .                       Ref(_, _, mutability) => Some(*mutability),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn is_unsafe_ptr(&self) -> bool {
    3,575 ( 0.00%)          matches!(self.kind(), RawPtr(_))
        .               }
        .           
        .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
        .               #[inline]
        .               pub fn is_any_ptr(&self) -> bool {
        8 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
        .               }
        .           
        .               #[inline]
        .               pub fn is_box(&self) -> bool {
    3,770 ( 0.00%)          match self.kind() {
      662 ( 0.00%)              Adt(def, _) => def.is_box(),
        .                       _ => false,
        .                   }
        .               }
        .           
        .               /// Panics if called on any type other than `Box<T>`.
      970 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
      970 ( 0.00%)          match self.kind() {
    2,425 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
        .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
        .                   }
      970 ( 0.00%)      }
        .           
        .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
        .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
        .               /// contents are abstract to rustc.)
        .               #[inline]
        .               pub fn is_scalar(&self) -> bool {
       18 ( 0.00%)          matches!(
       38 ( 0.00%)              self.kind(),
        .                       Bool | Char
        .                           | Int(_)
        .                           | Float(_)
        .                           | Uint(_)
        .                           | FnDef(..)
        .                           | FnPtr(_)
        .                           | RawPtr(_)
        .                           | Infer(IntVar(_) | FloatVar(_))
        .                   )
        .               }
        .           
        .               /// Returns `true` if this type is a floating point type.
        .               #[inline]
        .               pub fn is_floating_point(&self) -> bool {
    2,265 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_trait(&self) -> bool {
      286 ( 0.00%)          matches!(self.kind(), Dynamic(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_enum(&self) -> bool {
       84 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
        .               }
        .           
        .               #[inline]
        .               pub fn is_union(&self) -> bool {
      481 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
        .               }
        .           
        .               #[inline]
        .               pub fn is_closure(&self) -> bool {
       90 ( 0.00%)          matches!(self.kind(), Closure(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_generator(&self) -> bool {
      202 ( 0.00%)          matches!(self.kind(), Generator(..))
        .               }
        .           
        .               #[inline]
        .               pub fn is_integral(&self) -> bool {
      306 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh_ty(&self) -> bool {
        .                   matches!(self.kind(), Infer(FreshTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fresh(&self) -> bool {
    1,665 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
        .               }
        .           
        .               #[inline]
        .               pub fn is_char(&self) -> bool {
        .                   matches!(self.kind(), Char)
        .               }
        .           
        .               #[inline]
        .               pub fn is_numeric(&self) -> bool {
        .                   self.is_integral() || self.is_floating_point()
        .               }
        .           
        .               #[inline]
        .               pub fn is_signed(&self) -> bool {
      427 ( 0.00%)          matches!(self.kind(), Int(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_ptr_sized_integral(&self) -> bool {
       48 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
        .               }
        .           
        .               #[inline]
        .               pub fn has_concrete_skeleton(&self) -> bool {
        .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
        .               }
        .           
        .               /// Returns the type and mutability of `*ty`.
        .               ///
        .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
        .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
    4,493 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
   27,668 ( 0.00%)          match self.kind() {
      628 ( 0.00%)              Adt(def, _) if def.is_box() => {
      166 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
        .                       }
   10,050 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
    4,544 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
        .                       _ => None,
        .                   }
    8,986 ( 0.00%)      }
        .           
        .               /// Returns the type of `ty[i]`.
        .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
        .                   match self.kind() {
        .                       Array(ty, _) | Slice(ty) => Some(ty),
        .                       _ => None,
        .                   }
        .               }
        .           
   70,800 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
   35,400 ( 0.00%)          match self.kind() {
   26,031 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
      865 ( 0.00%)              FnPtr(f) => *f,
        .                       Error(_) => {
        .                           // ignore errors (#54954)
        .                           ty::Binder::dummy(FnSig::fake())
        .                       }
        .                       Closure(..) => bug!(
        .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
        .                       ),
        .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
        .                   }
   79,650 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn is_fn(&self) -> bool {
   11,721 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_fn_ptr(&self) -> bool {
        .                   matches!(self.kind(), FnPtr(_))
        .               }
        .           
        .               #[inline]
        .               pub fn is_impl_trait(&self) -> bool {
        .                   matches!(self.kind(), Opaque(..))
        .               }
        .           
        .               #[inline]
        .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
    2,621 ( 0.00%)          match self.kind() {
        .                       Adt(adt, _) => Some(adt),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               /// Iterates over tuple fields.
        .               /// Panics when called on anything but a tuple.
    1,134 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
    3,096 ( 0.00%)          match self.kind() {
    3,621 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
    2,268 ( 0.00%)      }
        .           
        .               /// Get the `i`-th element of a tuple.
        .               /// Panics when called on anything but a tuple.
       28 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       56 ( 0.00%)          match self.kind() {
       56 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
        .                       _ => bug!("tuple_fields called on non-tuple"),
        .                   }
       56 ( 0.00%)      }
        .           
        .               /// If the type contains variants, returns the valid range of variant indices.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
        .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
        .                   match self.kind() {
        .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
        .                   }
        .               }
        .           
        .               /// If the type contains variants, returns the variant for `variant_index`.
        .               /// Panics if `variant_index` is out of range.
        .               //
        .               // FIXME: This requires the optimized MIR in the case of generators.
        .               #[inline]
    9,470 ( 0.00%)      pub fn discriminant_for_variant(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Option<Discr<'tcx>> {
    9,116 ( 0.00%)          match self.kind() {
    1,822 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
        .                           // This can actually happen during CTFE, see
        .                           // https://github.com/rust-lang/rust/issues/89765.
        .                           None
        .                       }
      911 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
        .                           Some(adt.discriminant_for_variant(tcx, variant_index))
        .                       }
        .                       TyKind::Generator(def_id, substs, _) => {
    3,040 ( 0.00%)                  Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
        .                       }
        .                       _ => None,
        .                   }
    7,576 ( 0.00%)      }
        .           
        .               /// Returns the type of the discriminant of this type.
    6,010 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
    3,005 ( 0.00%)          match self.kind() {
    4,432 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
        .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
        .           
        .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
        .                           let assoc_items = tcx.associated_item_def_ids(
        .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
        .                           );
        .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
        .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
        .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(_)
        .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
    4,808 ( 0.00%)      }
        .           
        .               /// Returns the type of metadata for (potentially fat) pointers to this type.
       54 ( 0.00%)      pub fn ptr_metadata_ty(
        .                   &'tcx self,
        .                   tcx: TyCtxt<'tcx>,
        .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
        .               ) -> Ty<'tcx> {
       54 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
       30 ( 0.00%)          match tail.kind() {
        .                       // Sized types
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
        .                       | ty::Foreign(..)
        .                       // If returned by `struct_tail_without_normalization` this is a unit struct
        .                       // without any fields, or not a struct, and therefore is Sized.
        .                       | ty::Adt(..)
        .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
        .                       // a.k.a. unit type, which is Sized
        .                       | ty::Tuple(..) => tcx.types.unit,
        .           
       12 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
        .                       ty::Dynamic(..) => {
        .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
        .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
        .                       },
        .           
        .                       ty::Projection(_)
        .                       | ty::Param(_)
        .                       | ty::Opaque(..)
        .                       | ty::Infer(ty::TyVar(_))
        .                       | ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
        .                       }
        .                   }
       48 ( 0.00%)      }
        .           
        .               /// When we create a closure, we record its kind (i.e., what trait
        .               /// it implements) into its `ClosureSubsts` using a type
        .               /// parameter. This is kind of a phantom type, except that the
        .               /// most convenient thing for us to are the integral types. This
        .               /// function converts such a special type into the closure
        .               /// kind. To go the other way, use
        .               /// `tcx.closure_kind_ty(closure_kind)`.
        .               ///
        .               /// Note that during type checking, we use an inference variable
        .               /// to represent the closure kind, because it has not yet been
        .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
        .               /// is complete, that type variable will be unified.
    1,556 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
    3,112 ( 0.00%)          match self.kind() {
    3,104 ( 0.00%)              Int(int_ty) => match int_ty {
        .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
        .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
        .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
        .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                       },
        .           
        .                       // "Bound" types appear in canonical queries when the
        .                       // closure type is not yet known
        .                       Bound(..) | Infer(_) => None,
        .           
        .                       Error(_) => Some(ty::ClosureKind::Fn),
        .           
        .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
        .                   }
    1,556 ( 0.00%)      }
        .           
        .               /// Fast path helper for testing if a type is `Sized`.
        .               ///
        .               /// Returning true means the type is known to be sized. Returning
        .               /// `false` means nothing -- could be sized, might not be.
        .               ///
        .               /// Note that we could never rely on the fact that a type such as `[_]` is
        .               /// trivially `!Sized` because we could be in a type environment with a
        .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
        .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
        .               /// this method doesn't return `Option<bool>`.
   89,919 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
   59,946 ( 0.00%)          match self.kind() {
        .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
        .                       | ty::Uint(_)
        .                       | ty::Int(_)
        .                       | ty::Bool
        .                       | ty::Float(_)
        .                       | ty::FnDef(..)
        .                       | ty::FnPtr(_)
        .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
        .                       | ty::GeneratorWitness(..)
        .                       | ty::Array(..)
        .                       | ty::Closure(..)
        .                       | ty::Never
        .                       | ty::Error(_) => true,
        .           
        .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
        .           
      525 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
        .           
   14,115 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
        .           
        .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
        .           
        .                       ty::Infer(ty::TyVar(_)) => false,
        .           
        .                       ty::Bound(..)
        .                       | ty::Placeholder(..)
        .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
        .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
        .                       }
        .                   }
   89,919 ( 0.00%)      }
        .           }
        .           
        .           /// Extra information about why we ended up with a particular variance.
        .           /// This is only used to add more information to error messages, and
        .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
        .           /// may lead to confusing notes in error messages, it will never cause
        .           /// a miscompilation or unsoundness.
        .           ///
-- line 2280 ----------------------------------------
-- line 2295 ----------------------------------------
        .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
        .                   param_index: u32,
        .               },
        .           }
        .           
        .           impl<'tcx> VarianceDiagInfo<'tcx> {
        .               /// Mirrors `Variance::xform` - used to 'combine' the existing
        .               /// and new `VarianceDiagInfo`s when our variance changes.
    3,870 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
        .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    5,805 ( 0.00%)          match self {
        .                       VarianceDiagInfo::None => other,
        .                       VarianceDiagInfo::Invariant { .. } => self,
        .                   }
    1,935 ( 0.00%)      }
        .           }

5,469,841 ( 0.13%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/dl-lookup.c
  ./malloc/malloc.c
  ./nptl/pthread_rwlock_common.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
120,030,782 ( 2.77%)  events annotated

