--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 4-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         67108864 B, 64 B, 64-way associative
Command:          /usr/home/liquid/.rustup/toolchains/w-profiling/bin/rustc --crate-name jsonrpc_client_transports --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg feature="default" --cfg feature="http" --cfg feature="hyper" --cfg feature="hyper-tls" --cfg feature="tls" --cfg feature="tokio" --cfg feature="websocket" --cfg feature="ws" -C metadata=9f4dc4bb0308f95e -C extra-filename=-9f4dc4bb0308f95e --out-dir /usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps -L dependency=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps --extern derive_more=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libderive_more-16aae143f44e58a3.so --extern futures=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libfutures-6e97bc5e6e2c4b6e.rmeta --extern hyper=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libhyper-c4646adf36973526.rlib --extern hyper_tls=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libhyper_tls-673ede41515f646d.rmeta --extern jsonrpc_core=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libjsonrpc_core-97a3e50bd6861cfb.rmeta --extern jsonrpc_pubsub=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libjsonrpc_pubsub-34bb4eb7505fd64b.rmeta --extern log=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/liblog-714d106490a098c8.rmeta --extern serde=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libserde-d7fb0fd87cc4f20a.rmeta --extern serde_json=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libserde_json-d8e041394f689b41.rmeta --extern tokio=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libtokio-0c18b765c16c1beb.rmeta --extern url=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/liburl-e2b4cd238b1e4a2c.rmeta --extern websocket=/usr/home/liquid/tmp/.tmpYbDu8m/target/debug/deps/libwebsocket-b1fd76f700d4c4ab.rmeta -L native=/usr/home/liquid/.linuxbrew/Cellar/openssl@1.1/1.1.1m/lib -Adeprecated -Aunknown-lints -Zincremental-verify-ich
Data file:        results/cgout-w-profiling-jsonrpc-client-transports-18.0.0-Debug-Full
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       0.1
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
2,987,030,639 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   file:function
--------------------------------------------------------------------------------
85,834,590 ( 2.87%)  ???:llvm::FPPassManager::runOnFunction(llvm::Function&)
80,725,686 ( 2.70%)  ./malloc/malloc.c:_int_malloc
77,516,849 ( 2.60%)  ./malloc/malloc.c:_int_free
48,627,752 ( 1.63%)  ./elf/dl-lookup.c:_dl_lookup_symbol_x
47,455,959 ( 1.59%)  ???:llvm::SelectionDAG::Combine(llvm::CombineLevel, llvm::AAResults*, llvm::CodeGenOpt::Level)
47,346,002 ( 1.59%)  ./malloc/malloc.c:malloc
41,560,211 ( 1.39%)  ./elf/dl-lookup.c:do_lookup_x
32,368,405 ( 1.08%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
25,046,195 ( 0.84%)  ???:llvm::AttributeList::addAttributes(llvm::LLVMContext&, unsigned int, llvm::AttrBuilder const&) const
22,660,685 ( 0.76%)  ???:(anonymous namespace)::Verifier::visitMDNode(llvm::MDNode const&, (anonymous namespace)::Verifier::AreDebugLocsAllowed)
22,341,068 ( 0.75%)  ./malloc/malloc.c:free
19,357,257 ( 0.65%)  ???:llvm::raw_svector_ostream::write_impl(char const*, unsigned long)
19,345,624 ( 0.65%)  ???:(anonymous namespace)::Verifier::visitInstruction(llvm::Instruction&)
18,226,434 ( 0.61%)  ???:llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*)
17,962,301 ( 0.60%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
17,390,469 ( 0.58%)  ???:llvm::SelectionDAGISel::SelectCodeCommon(llvm::SDNode*, unsigned char const*, unsigned int)
16,897,387 ( 0.57%)  ???:llvm::MachineInstr::addOperand(llvm::MachineFunction&, llvm::MachineOperand const&)
16,104,113 ( 0.54%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_erms
15,288,037 ( 0.51%)  ???:(anonymous namespace)::RegAllocFast::allocateBasicBlock(llvm::MachineBasicBlock&)
13,863,746 ( 0.46%)  ???:llvm::MCExpr::evaluateAsRelocatableImpl(llvm::MCValue&, llvm::MCAssembler const*, llvm::MCAsmLayout const*, llvm::MCFixup const*, llvm::DenseMap<llvm::MCSection const*, unsigned long, llvm::DenseMapInfo<llvm::MCSection const*>, llvm::detail::DenseMapPair<llvm::MCSection const*, unsigned long> > const*, bool) const
12,647,127 ( 0.42%)  ./malloc/malloc.c:malloc_consolidate
11,965,775 ( 0.40%)  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S:__memcmp_avx2_movbe
11,194,277 ( 0.37%)  ???:llvm::StringMapImpl::LookupBucketFor(llvm::StringRef)
11,010,663 ( 0.37%)  ???:llvm::MCObjectStreamer::emitBytes(llvm::StringRef)
 9,950,687 ( 0.33%)  ???:llvm::MCAsmLayout::getSymbolOffset(llvm::MCSymbol const&) const
 9,754,870 ( 0.33%)  ???:llvm::ScheduleDAGSDNodes::BuildSchedUnits()
 9,659,407 ( 0.32%)  ???:llvm::FoldingSetNodeID::AddInteger(unsigned int)
 9,338,201 ( 0.31%)  ./malloc/malloc.c:unlink_chunk.constprop.0
 8,575,239 ( 0.29%)  ???:(anonymous namespace)::VarLocBasedLDV::process(llvm::MachineInstr&, (anonymous namespace)::VarLocBasedLDV::OpenRangesSet&, (anonymous namespace)::VarLocBasedLDV::VarLocMap&, llvm::SmallVector<(anonymous namespace)::VarLocBasedLDV::TransferDebugPair, 4u>&)
 8,554,656 ( 0.29%)  ???:llvm::TargetLoweringBase::getTypeConversion(llvm::LLVMContext&, llvm::EVT) const
 8,106,162 ( 0.27%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 7,980,407 ( 0.27%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
 7,963,724 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::CtxtInterners>::intern_ty
 7,960,931 ( 0.27%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::cmp::PartialEq>::eq
 7,691,990 ( 0.26%)  ???:(anonymous namespace)::Verifier::verifyFunctionAttrs(llvm::FunctionType*, llvm::AttributeList, llvm::Value const*, bool)
 7,577,502 ( 0.25%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_sse2_unaligned_erms
 7,311,061 ( 0.24%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 7,253,500 ( 0.24%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<rustc_middle::ty::sty::TyKind as core::hash::Hash>::hash::<rustc_hash::FxHasher>
 7,174,066 ( 0.24%)  ???:llvm::FoldingSetBase::FindNodeOrInsertPos(llvm::FoldingSetNodeID const&, void*&, llvm::FoldingSetBase::FoldingSetInfo const&)
 7,164,168 ( 0.24%)  ???:llvm::TargetRegisterInfo::checkAllSuperRegsMarked(llvm::BitVector const&, llvm::ArrayRef<unsigned short>) const
 7,109,990 ( 0.24%)  ???:llvm::coro::declaresIntrinsics(llvm::Module const&, std::initializer_list<llvm::StringRef>)
 6,785,375 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 6,733,035 ( 0.23%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 6,711,774 ( 0.22%)  ???:(anonymous namespace)::Verifier::visitCallBase(llvm::CallBase&)
 6,628,322 ( 0.22%)  ???:llvm::MCAsmLayout::getFragmentOffset(llvm::MCFragment const*) const
 6,614,322 ( 0.22%)  ???:llvm::TargetRegisterInfo::shouldRealignStack(llvm::MachineFunction const&) const
 6,551,541 ( 0.22%)  ???:llvm::SelectionDAG::MorphNodeTo(llvm::SDNode*, unsigned int, llvm::SDVTList, llvm::ArrayRef<llvm::SDValue>)
 6,522,106 ( 0.22%)  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:__strncmp_avx2
 6,472,112 ( 0.22%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs:<rustc_middle::ty::context::TyCtxt>::_intern_substs
 6,249,981 ( 0.21%)  ???:(anonymous namespace)::ELFObjectWriter::recordRelocation(llvm::MCAssembler&, llvm::MCAsmLayout const&, llvm::MCFragment const*, llvm::MCFixup const&, llvm::MCValue, unsigned long&) [clone .llvm.14145361893594770252]
 6,184,303 ( 0.21%)  ???:llvm::InstrEmitter::EmitMachineNode(llvm::SDNode*, bool, bool, llvm::DenseMap<llvm::SDValue, llvm::Register, llvm::DenseMapInfo<llvm::SDValue>, llvm::detail::DenseMapPair<llvm::SDValue, llvm::Register> >&)
 6,167,182 ( 0.21%)  ???:(anonymous namespace)::TwoAddressInstructionPass::runOnMachineFunction(llvm::MachineFunction&)
 6,106,641 ( 0.20%)  ???:llvm::DAGTypeLegalizer::run()
 6,091,257 ( 0.20%)  ???:llvm::SmallSet<llvm::Register, 32u, std::less<llvm::Register> >::insert(llvm::Register const&)
 6,076,845 ( 0.20%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<[rustc_middle::ty::subst::GenericArg], rustc_middle::ty::context::Interned<rustc_middle::ty::list::List<rustc_middle::ty::subst::GenericArg>>>::{closure#0}>
 6,051,778 ( 0.20%)  ./malloc/malloc.c:realloc
 6,030,086 ( 0.20%)  ???:(anonymous namespace)::SelectionDAGLegalize::LegalizeOp(llvm::SDNode*) [clone .llvm.8386621111310650999]
 5,932,556 ( 0.20%)  ???:(anonymous namespace)::Verifier::verify(llvm::Function const&) [clone .llvm.4153962086227604281]
 5,809,371 ( 0.19%)  ???:(anonymous namespace)::X86MCCodeEmitter::emitPrefixImpl(unsigned int&, llvm::MCInst const&, llvm::MCSubtargetInfo const&, llvm::raw_ostream&) const
 5,726,325 ( 0.19%)  ???:multikeySort(llvm::MutableArrayRef<std::pair<llvm::CachedHashStringRef, unsigned long>*>, int)
 5,722,172 ( 0.19%)  ???:llvm::MDNode::MDNode(llvm::LLVMContext&, unsigned int, llvm::Metadata::StorageType, llvm::ArrayRef<llvm::Metadata*>, llvm::ArrayRef<llvm::Metadata*>)
 5,589,072 ( 0.19%)  ???:llvm::MDString::get(llvm::LLVMContext&, llvm::StringRef)
 5,481,202 ( 0.18%)  ???:llvm::SelectionDAG::getConstant(llvm::ConstantInt const&, llvm::SDLoc const&, llvm::EVT, bool, bool)
 5,435,942 ( 0.18%)  ???:llvm::MetadataTracking::track(void*, llvm::Metadata&, llvm::PointerUnion<llvm::MetadataAsValue*, llvm::Metadata*>)
 5,362,805 ( 0.18%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_serialize::opaque::Decoder as rustc_serialize::serialize::Decoder>::read_usize
 5,152,038 ( 0.17%)  ???:llvm::MCContext::getOrCreateSymbol(llvm::Twine const&)
 5,086,938 ( 0.17%)  ???:(anonymous namespace)::VarLocBasedLDV::ExtendRanges(llvm::MachineFunction&, llvm::TargetPassConfig*) [clone .llvm.4451506318407214204]
 4,994,633 ( 0.17%)  ???:llvm::SelectionDAG::Legalize()
 4,977,069 ( 0.17%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 4,943,587 ( 0.17%)  ???:llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(llvm::FoldingSetBase const*, llvm::FoldingSetBase::Node*, llvm::FoldingSetNodeID const&, unsigned int, llvm::FoldingSetNodeID&)
 4,879,122 ( 0.16%)  ???:llvm::calculateDbgEntityHistory(llvm::MachineFunction const*, llvm::TargetRegisterInfo const*, llvm::DbgValueHistoryMap&, llvm::DbgLabelInstrMap&)
 4,836,738 ( 0.16%)  ???:(anonymous namespace)::DAGCombiner::combine(llvm::SDNode*)
 4,680,811 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs:<rustc_infer::infer::InferCtxt>::shallow_resolve_ty
 4,664,202 ( 0.16%)  /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 4,623,928 ( 0.15%)  ???:llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::CalculateFromScratch(llvm::DominatorTreeBase<llvm::BasicBlock, false>&, llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<llvm::BasicBlock, false> >::BatchUpdateInfo*)
 4,481,111 ( 0.15%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::Binder<rustc_middle::ty::PredicateKind>, rustc_middle::ty::context::Interned<rustc_middle::ty::PredicateInner>>::{closure#0}>
 4,389,506 ( 0.15%)  ???:(anonymous namespace)::PEI::runOnMachineFunction(llvm::MachineFunction&)
 4,388,965 ( 0.15%)  ???:(anonymous namespace)::ScheduleDAGRRList::Schedule() [clone .llvm.6953762222372402862]
 4,347,399 ( 0.15%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs:<hashbrown::map::RawEntryBuilderMut<rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>, (), core::hash::BuildHasherDefault<rustc_hash::FxHasher>>>::from_hash::<hashbrown::map::equivalent<rustc_middle::ty::sty::TyKind, rustc_middle::ty::context::Interned<rustc_middle::ty::TyS>>::{closure#0}>
 4,295,871 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs:<rustc_span::SourceFile as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 4,255,023 ( 0.14%)  ./malloc/malloc.c:_int_realloc
 4,251,008 ( 0.14%)  ???:llvm::PassRegistry::enumerateWith(llvm::PassRegistrationListener*)
 4,224,011 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs:__rdl_alloc
 4,113,967 ( 0.14%)  ???:llvm::PMDataManager::removeNotPreservedAnalysis(llvm::Pass*)
 4,095,717 ( 0.14%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs:rustc_middle::ty::relate::super_relate_tys::<rustc_infer::infer::combine::Generalizer>
 4,021,101 ( 0.13%)  ???:llvm::MCAssembler::layout(llvm::MCAsmLayout&)
 4,019,095 ( 0.13%)  ???:(anonymous namespace)::ELFWriter::writeObject(llvm::MCAssembler&, llvm::MCAsmLayout const&)
 3,964,538 ( 0.13%)  ???:llvm::hashing::detail::hash_combine_recursive_helper::combine(unsigned long, char*, char*)
 3,914,341 ( 0.13%)  ???:llvm::raw_ostream::write(char const*, unsigned long)
 3,908,927 ( 0.13%)  ???:char* llvm::hashing::detail::hash_combine_recursive_helper::combine_data<llvm::Metadata*>(unsigned long&, char*, char*, llvm::Metadata*)
 3,838,232 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs:<rustc_span::source_map::SourceMap>::lookup_source_file_idx
 3,837,009 ( 0.13%)  ???:llvm::MCStreamer::emitULEB128IntValue(unsigned long, unsigned int)
 3,809,041 ( 0.13%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs:<rustc_middle::ty::subst::SubstFolder as rustc_middle::ty::fold::TypeFolder>::fold_ty
 3,779,450 ( 0.13%)  ???:(anonymous namespace)::X86MCInstLower::Lower(llvm::MachineInstr const*, llvm::MCInst&) const
 3,730,722 ( 0.12%)  ./stdlib/msort.c:msort_with_tmp.part.0
 3,690,678 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs:<rustc_infer::infer::combine::Generalizer as rustc_middle::ty::relate::TypeRelation>::tys
 3,637,846 ( 0.12%)  ???:(anonymous namespace)::Verifier::visitFunction(llvm::Function const&)::$_3::operator()(llvm::Instruction const&, llvm::MDNode const*) const
 3,568,496 ( 0.12%)  ???:llvm::X86TargetLowering::X86TargetLowering(llvm::X86TargetMachine const&, llvm::X86Subtarget const&)
 3,493,756 ( 0.12%)  ???:llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator, 4096ul, 4096ul, 128ul>::Allocate(unsigned long, llvm::Align)
 3,482,608 ( 0.12%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs:<rustc_span::span_encoding::Span as rustc_serialize::serialize::Decodable<rustc_metadata::rmeta::decoder::DecodeContext>>::decode
 3,474,020 ( 0.12%)  ???:llvm::X86FrameLowering::hasFP(llvm::MachineFunction const&) const
 3,454,790 ( 0.12%)  ???:llvm::AttributeSetNode::get(llvm::LLVMContext&, llvm::AttrBuilder const&)
 3,452,046 ( 0.12%)  ???:(anonymous namespace)::X86MCCodeEmitter::encodeInstruction(llvm::MCInst const&, llvm::raw_ostream&, llvm::SmallVectorImpl<llvm::MCFixup>&, llvm::MCSubtargetInfo const&) const
 3,449,706 ( 0.12%)  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:__memset_avx2_unaligned_erms
 3,380,399 ( 0.11%)  ???:llvm::ScheduleDAGSDNodes::AddSchedEdges()
 3,371,059 ( 0.11%)  ???:llvm::LLVMContextImpl::~LLVMContextImpl()
 3,324,882 ( 0.11%)  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc:operator new(unsigned long)
 3,304,219 ( 0.11%)  ???:llvm::FunctionLoweringInfo::set(llvm::Function const&, llvm::MachineFunction&, llvm::SelectionDAG*)
 3,292,682 ( 0.11%)  ./elf/do-rel.h:_dl_relocate_object
 3,279,207 ( 0.11%)  ???:llvm::DwarfDebug::beginInstruction(llvm::MachineInstr const*)
 3,253,055 ( 0.11%)  ???:llvm::MachineFunction::CreateMachineInstr(llvm::MCInstrDesc const&, llvm::DebugLoc const&, bool)
 3,236,562 ( 0.11%)  ???:llvm::MDNodeKeyImpl<llvm::DICompositeType>::MDNodeKeyImpl(llvm::DICompositeType const*)
 3,229,209 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs:<rustc_metadata::rmeta::decoder::DecodeContext as rustc_serialize::serialize::Decoder>::read_u32
 3,208,295 ( 0.11%)  ???:llvm::Twine::printOneChild(llvm::raw_ostream&, llvm::Twine::Child, llvm::Twine::NodeKind) const
 3,162,028 ( 0.11%)  ???:llvm::SelectionDAG::AssignTopologicalOrder()
 3,152,605 ( 0.11%)  ./elf/dl-lookup.c:check_match
 3,146,450 ( 0.11%)  ???:(anonymous namespace)::X86AsmBackend::applyFixup(llvm::MCAssembler const&, llvm::MCFixup const&, llvm::MCValue const&, llvm::MutableArrayRef<char>, unsigned long, bool, llvm::MCSubtargetInfo const*) const
 3,139,661 ( 0.11%)  /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs:<rustc_data_structures::sip128::SipHasher128>::short_write_process_buffer::<u64>
 3,121,687 ( 0.10%)  ???:llvm::DataLayout::getAlignment(llvm::Type*, bool) const
 3,116,155 ( 0.10%)  ???:llvm::MCELFStreamer::emitLabel(llvm::MCSymbol*, llvm::SMLoc)
 3,109,753 ( 0.10%)  /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs:<hashbrown::raw::RawTable<(rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>)>>::remove_entry::<hashbrown::map::equivalent_key<rustc_span::def_id::DefId, rustc_span::def_id::DefId, rustc_query_system::query::plumbing::QueryResult<rustc_middle::dep_graph::dep_node::DepKind>>::{closure#0}>
 3,075,700 ( 0.10%)  /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs:rustc_mir_dataflow::drop_flag_effects::on_all_children_bits::is_terminal_path
 3,052,960 ( 0.10%)  ???:llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetRegisterInfo const*)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs
--------------------------------------------------------------------------------
Ir               

-- line 56 ----------------------------------------
      .           #[derive(Copy, Clone, Debug)]
      .           pub enum RelationDir {
      .               SubtypeOf,
      .               SupertypeOf,
      .               EqTo,
      .           }
      .           
      .           impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {
129,816 ( 0.00%)      pub fn super_combine_tys<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: Ty<'tcx>,
      .                   b: Ty<'tcx>,
      .               ) -> RelateResult<'tcx, Ty<'tcx>>
      .               where
      .                   R: TypeRelation<'tcx>,
      .               {
      .                   let a_is_expected = relation.a_is_expected();
      .           
127,326 ( 0.00%)          match (a.kind(), b.kind()) {
      .                       // Relate integral variables to other types
      .                       (&ty::Infer(ty::IntVar(a_id)), &ty::Infer(ty::IntVar(b_id))) => {
      .                           self.inner
      .                               .borrow_mut()
      .                               .int_unification_table()
      .                               .unify_var_var(a_id, b_id)
      .                               .map_err(|e| int_unification_error(a_is_expected, e))?;
      .                           Ok(a)
      .                       }
      .                       (&ty::Infer(ty::IntVar(v_id)), &ty::Int(v)) => {
      .                           self.unify_integral_variable(a_is_expected, v_id, IntType(v))
      .                       }
      .                       (&ty::Int(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, IntType(v))
      .                       }
      3 ( 0.00%)              (&ty::Infer(ty::IntVar(v_id)), &ty::Uint(v)) => {
      6 ( 0.00%)                  self.unify_integral_variable(a_is_expected, v_id, UintType(v))
      .                       }
      .                       (&ty::Uint(v), &ty::Infer(ty::IntVar(v_id))) => {
      .                           self.unify_integral_variable(!a_is_expected, v_id, UintType(v))
      .                       }
      .           
      .                       // Relate floating-point variables to other types
      .                       (&ty::Infer(ty::FloatVar(a_id)), &ty::Infer(ty::FloatVar(b_id))) => {
      .                           self.inner
-- line 100 ----------------------------------------
-- line 108 ----------------------------------------
      .                           self.unify_float_variable(a_is_expected, v_id, v)
      .                       }
      .                       (&ty::Float(v), &ty::Infer(ty::FloatVar(v_id))) => {
      .                           self.unify_float_variable(!a_is_expected, v_id, v)
      .                       }
      .           
      .                       // All other cases of inference are errors
      .                       (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
      5 ( 0.00%)                  Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))
      .                       }
      .           
125,148 ( 0.00%)              _ => ty::relate::super_relate_tys(relation, a, b),
      .                   }
129,816 ( 0.00%)      }
      .           
      .               pub fn super_combine_consts<R>(
      .                   &self,
      .                   relation: &mut R,
      .                   a: &'tcx ty::Const<'tcx>,
      .                   b: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>>
      .               where
      .                   R: ConstEquateRelation<'tcx>,
      .               {
      .                   debug!("{}.consts({:?}, {:?})", relation.tag(), a, b);
  1,905 ( 0.00%)          if a == b {
      .                       return Ok(a);
      .                   }
      .           
      .                   let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);
      .                   let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);
      .           
      .                   let a_is_expected = relation.a_is_expected();
      .           
-- line 141 ----------------------------------------
-- line 255 ----------------------------------------
      .                               },
      .                               val: ConstVariableValue::Known { value },
      .                           },
      .                       )
      .                       .map(|()| value)
      .                       .map_err(|e| const_unification_error(vid_is_expected, e))
      .               }
      .           
     18 ( 0.00%)      fn unify_integral_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::IntVid,
      .                   val: ty::IntVarValue,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
     24 ( 0.00%)          self.inner
      .                       .borrow_mut()
      .                       .int_unification_table()
      .                       .unify_var_value(vid, Some(val))
      .                       .map_err(|e| int_unification_error(vid_is_expected, e))?;
      6 ( 0.00%)          match val {
      .                       IntType(v) => Ok(self.tcx.mk_mach_int(v)),
      9 ( 0.00%)              UintType(v) => Ok(self.tcx.mk_mach_uint(v)),
      .                   }
     24 ( 0.00%)      }
      .           
      .               fn unify_float_variable(
      .                   &self,
      .                   vid_is_expected: bool,
      .                   vid: ty::FloatVid,
      .                   val: ty::FloatTy,
      .               ) -> RelateResult<'tcx, Ty<'tcx>> {
      .                   self.inner
-- line 286 ----------------------------------------
-- line 289 ----------------------------------------
      .                       .unify_var_value(vid, Some(ty::FloatVarValue(val)))
      .                       .map_err(|e| float_unification_error(vid_is_expected, e))?;
      .                   Ok(self.tcx.mk_mach_float(val))
      .               }
      .           }
      .           
      .           impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {
      .               pub fn tcx(&self) -> TyCtxt<'tcx> {
 30,636 ( 0.00%)          self.infcx.tcx
      .               }
      .           
      .               pub fn equate<'a>(&'a mut self, a_is_expected: bool) -> Equate<'a, 'infcx, 'tcx> {
      .                   Equate::new(self, a_is_expected)
      .               }
      .           
 32,970 ( 0.00%)      pub fn sub<'a>(&'a mut self, a_is_expected: bool) -> Sub<'a, 'infcx, 'tcx> {
      .                   Sub::new(self, a_is_expected)
 16,485 ( 0.00%)      }
      .           
      .               pub fn lub<'a>(&'a mut self, a_is_expected: bool) -> Lub<'a, 'infcx, 'tcx> {
      .                   Lub::new(self, a_is_expected)
      .               }
      .           
 40,736 ( 0.00%)      pub fn glb<'a>(&'a mut self, a_is_expected: bool) -> Glb<'a, 'infcx, 'tcx> {
      .                   Glb::new(self, a_is_expected)
 20,368 ( 0.00%)      }
      .           
      .               /// Here, `dir` is either `EqTo`, `SubtypeOf`, or `SupertypeOf`.
      .               /// The idea is that we should ensure that the type `a_ty` is equal
      .               /// to, a subtype of, or a supertype of (respectively) the type
      .               /// to which `b_vid` is bound.
      .               ///
      .               /// Since `b_vid` has not yet been instantiated with a type, we
      .               /// will first instantiate `b_vid` with a *generalized* version
      .               /// of `a_ty`. Generalization introduces other inference
      .               /// variables wherever subtyping could occur.
175,692 ( 0.01%)      pub fn instantiate(
      .                   &mut self,
      .                   a_ty: Ty<'tcx>,
      .                   dir: RelationDir,
      .                   b_vid: ty::TyVid,
      .                   a_is_expected: bool,
      .               ) -> RelateResult<'tcx, ()> {
      .                   use self::RelationDir::*;
      .           
-- line 333 ----------------------------------------
-- line 342 ----------------------------------------
      .                   // - `a_ty == &'x ?1`, where `'x` is some free region and `?1` is an
      .                   //   inference variable,
      .                   // - and `dir` == `SubtypeOf`.
      .                   //
      .                   // Then the generalized form `b_ty` would be `&'?2 ?3`, where
      .                   // `'?2` and `?3` are fresh region/type inference
      .                   // variables. (Down below, we will relate `a_ty <: b_ty`,
      .                   // adding constraints like `'x: '?2` and `?1 <: ?3`.)
 15,972 ( 0.00%)          let Generalization { ty: b_ty, needs_wf } = self.generalize(a_ty, b_vid, dir)?;
      .                   debug!(
      .                       "instantiate(a_ty={:?}, dir={:?}, b_vid={:?}, generalized b_ty={:?})",
      .                       a_ty, dir, b_vid, b_ty
      .                   );
111,804 ( 0.00%)          self.infcx.inner.borrow_mut().type_variables().instantiate(b_vid, b_ty);
      .           
 15,972 ( 0.00%)          if needs_wf {
      .                       self.obligations.push(Obligation::new(
      .                           self.trace.cause.clone(),
      .                           self.param_env,
      .                           ty::Binder::dummy(ty::PredicateKind::WellFormed(b_ty.into()))
      .                               .to_predicate(self.infcx.tcx),
      .                       ));
      .                   }
      .           
      .                   // Finally, relate `b_ty` to `a_ty`, as described in previous comment.
      .                   //
      .                   // FIXME(#16847): This code is non-ideal because all these subtype
      .                   // relations wind up attributed to the same spans. We need
      .                   // to associate causes/spans with each of the relations in
      .                   // the stack to get this right.
 60,664 ( 0.00%)          match dir {
 64,360 ( 0.00%)              EqTo => self.equate(a_is_expected).relate(a_ty, b_ty),
  8,060 ( 0.00%)              SubtypeOf => self.sub(a_is_expected).relate(a_ty, b_ty),
  2,976 ( 0.00%)              SupertypeOf => self.sub(a_is_expected).relate_with_variance(
      .                           ty::Contravariant,
      .                           ty::VarianceDiagInfo::default(),
      .                           a_ty,
      .                           b_ty,
      .                       ),
      .                   }?;
      .           
 15,972 ( 0.00%)          Ok(())
127,776 ( 0.00%)      }
      .           
      .               /// Attempts to generalize `ty` for the type variable `for_vid`.
      .               /// This checks for cycle -- that is, whether the type `ty`
      .               /// references `for_vid`. The `dir` is the "direction" for which we
      .               /// a performing the generalization (i.e., are we producing a type
      .               /// that can be used as a supertype etc).
      .               ///
      .               /// Preconditions:
-- line 392 ----------------------------------------
-- line 401 ----------------------------------------
      .                   debug!("generalize(ty={:?}, for_vid={:?}, dir={:?}", ty, for_vid, dir);
      .                   // Determine the ambient variance within which `ty` appears.
      .                   // The surrounding equation is:
      .                   //
      .                   //     ty [op] ty2
      .                   //
      .                   // where `op` is either `==`, `<:`, or `:>`. This maps quite
      .                   // naturally.
 63,888 ( 0.00%)          let ambient_variance = match dir {
      .                       RelationDir::EqTo => ty::Invariant,
      .                       RelationDir::SubtypeOf => ty::Covariant,
      .                       RelationDir::SupertypeOf => ty::Contravariant,
      .                   };
      .           
      .                   debug!("generalize: ambient_variance = {:?}", ambient_variance);
      .           
159,720 ( 0.01%)          let for_universe = match self.infcx.inner.borrow_mut().type_variables().probe(for_vid) {
      .                       v @ TypeVariableValue::Known { .. } => {
      .                           bug!("instantiating {:?} which has a known value {:?}", for_vid, v,)
      .                       }
      .                       TypeVariableValue::Unknown { universe } => universe,
      .                   };
      .           
      .                   debug!("generalize: for_universe = {:?}", for_universe);
      .                   debug!("generalize: trace = {:?}", self.trace);
      .           
159,720 ( 0.01%)          let mut generalize = Generalizer {
      .                       infcx: self.infcx,
      .                       cause: &self.trace.cause,
      .                       for_vid_sub_root: self.infcx.inner.borrow_mut().type_variables().sub_root_var(for_vid),
      .                       for_universe,
      .                       ambient_variance,
      .                       needs_wf: false,
      .                       root_ty: ty,
 15,972 ( 0.00%)              param_env: self.param_env,
      .                       cache: SsoHashMap::new(),
      .                   };
      .           
 31,944 ( 0.00%)          let ty = match generalize.relate(ty, ty) {
 15,972 ( 0.00%)              Ok(ty) => ty,
      .                       Err(e) => {
      .                           debug!("generalize: failure {:?}", e);
      .                           return Err(e);
      .                       }
      .                   };
 15,972 ( 0.00%)          let needs_wf = generalize.needs_wf;
      .                   debug!("generalize: success {{ {:?}, {:?} }}", ty, needs_wf);
      .                   Ok(Generalization { ty, needs_wf })
      .               }
      .           
      .               pub fn add_const_equate_obligation(
      .                   &mut self,
      .                   a_is_expected: bool,
      .                   a: &'tcx ty::Const<'tcx>,
-- line 454 ----------------------------------------
-- line 528 ----------------------------------------
      .               /// will force the calling code to check that `WF(Foo<?C, ?D>)`
      .               /// holds, which in turn implies that `?C::Item == ?D`. So once
      .               /// `?C` is constrained, that should suffice to restrict `?D`.
      .               needs_wf: bool,
      .           }
      .           
      .           impl<'tcx> TypeRelation<'tcx> for Generalizer<'_, 'tcx> {
      .               fn tcx(&self) -> TyCtxt<'tcx> {
116,052 ( 0.00%)          self.infcx.tcx
      .               }
      .               fn param_env(&self) -> ty::ParamEnv<'tcx> {
    146 ( 0.00%)          self.param_env
      .               }
      .           
      .               fn tag(&self) -> &'static str {
      .                   "Generalizer"
      .               }
      .           
      .               fn a_is_expected(&self) -> bool {
      .                   true
      .               }
      .           
 45,897 ( 0.00%)      fn binders<T>(
      .                   &mut self,
      .                   a: ty::Binder<'tcx, T>,
      .                   b: ty::Binder<'tcx, T>,
      .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>>
      .               where
      .                   T: Relate<'tcx>,
      .               {
 63,307 ( 0.00%)          Ok(a.rebind(self.relate(a.skip_binder(), b.skip_binder())?))
 46,036 ( 0.00%)      }
      .           
463,089 ( 0.02%)      fn relate_item_substs(
      .                   &mut self,
      .                   item_def_id: DefId,
      .                   a_subst: SubstsRef<'tcx>,
      .                   b_subst: SubstsRef<'tcx>,
      .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
 42,099 ( 0.00%)          if self.ambient_variance == ty::Variance::Invariant {
      .                       // Avoid fetching the variance if we are in an invariant
      .                       // context; no need, and it can induce dependency cycles
      .                       // (e.g., #41849).
 38,379 ( 0.00%)              relate::relate_substs(self, None, a_subst, b_subst)
      .                   } else {
      .                       let tcx = self.tcx();
      .                       let opt_variances = tcx.variances_of(item_def_id);
 18,600 ( 0.00%)              relate::relate_substs(self, Some((item_def_id, &opt_variances)), a_subst, b_subst)
      .                   }
378,891 ( 0.01%)      }
      .           
 15,624 ( 0.00%)      fn relate_with_variance<T: Relate<'tcx>>(
      .                   &mut self,
      .                   variance: ty::Variance,
      .                   _info: ty::VarianceDiagInfo<'tcx>,
      .                   a: T,
      .                   b: T,
      .               ) -> RelateResult<'tcx, T> {
    952 ( 0.00%)          let old_ambient_variance = self.ambient_variance;
304,088 ( 0.01%)          self.ambient_variance = self.ambient_variance.xform(variance);
      .           
      .                   let result = self.relate(a, b);
 57,528 ( 0.00%)          self.ambient_variance = old_ambient_variance;
      .                   result
 12,152 ( 0.00%)      }
      .           
677,547 ( 0.02%)      fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {
 75,283 ( 0.00%)          assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
451,698 ( 0.02%)          if let Some(result) = self.cache.get(&t) {
 22,616 ( 0.00%)              return result.clone();
      .                   }
      .                   debug!("generalize: t={:?}", t);
      .           
      .                   // Check to see whether the type we are generalizing references
      .                   // any other type variable related to `vid` via
      .                   // subtyping. This is basically our "occurs check", preventing
      .                   // us from creating infinitely sized types.
218,733 ( 0.01%)          let result = match *t.kind() {
  1,639 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
  1,639 ( 0.00%)                  let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);
  1,639 ( 0.00%)                  let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);
  1,639 ( 0.00%)                  if sub_vid == self.for_vid_sub_root {
      .                               // If sub-roots are equal, then `for_vid` and
      .                               // `vid` are related via subtyping.
      .                               Err(TypeError::CyclicTy(self.root_ty))
      .                           } else {
  9,834 ( 0.00%)                      let probe = self.infcx.inner.borrow_mut().type_variables().probe(vid);
  3,278 ( 0.00%)                      match probe {
      .                                   TypeVariableValue::Known { value: u } => {
      .                                       debug!("generalize: known value {:?}", u);
      .                                       self.relate(u, u)
      .                                   }
      .                                   TypeVariableValue::Unknown { universe } => {
  7,820 ( 0.00%)                              match self.ambient_variance {
      .                                           // Invariant: no need to make a fresh type variable.
      .                                           ty::Invariant => {
  6,800 ( 0.00%)                                      if self.for_universe.can_name(universe) {
  5,368 ( 0.00%)                                          return Ok(t);
      .                                               }
      .                                           }
      .           
      .                                           // Bivariant: make a fresh var, but we
      .                                           // may need a WF predicate. See
      .                                           // comment on `needs_wf` field for
      .                                           // more info.
      .                                           ty::Bivariant => self.needs_wf = true,
      .           
      .                                           // Co/contravariant: this will be
      .                                           // sufficiently constrained later on.
      .                                           ty::Covariant | ty::Contravariant => (),
      .                                       }
      .           
      .                                       let origin =
  1,998 ( 0.00%)                                  *self.infcx.inner.borrow_mut().type_variables().var_origin(vid);
  1,554 ( 0.00%)                              let new_var_id = self
      .                                           .infcx
      .                                           .inner
      .                                           .borrow_mut()
      .                                           .type_variables()
  1,554 ( 0.00%)                                  .new_var(self.for_universe, origin);
      .                                       let u = self.tcx().mk_ty_var(new_var_id);
      .           
      .                                       // Record that we replaced `vid` with `new_var_id` as part of a generalization
      .                                       // operation. This is needed to detect cyclic types. To see why, see the
      .                                       // docs in the `type_variables` module.
  1,110 ( 0.00%)                              self.infcx.inner.borrow_mut().type_variables().sub(vid, new_var_id);
      .                                       debug!("generalize: replacing original vid={:?} with new={:?}", vid, u);
    444 ( 0.00%)                              Ok(u)
      .                                   }
      .                               }
      .                           }
      .                       }
      .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {
      .                           // No matter what mode we are in,
      .                           // integer/floating-point types must be equal to be
      .                           // relatable.
      3 ( 0.00%)                  Ok(t)
      .                       }
203,961 ( 0.01%)              _ => relate::super_relate_tys(self, t, t),
      .                   };
      .           
682,870 ( 0.02%)          self.cache.insert(t, result.clone());
409,722 ( 0.01%)          return result;
677,547 ( 0.02%)      }
      .           
 48,288 ( 0.00%)      fn regions(
      .                   &mut self,
      .                   r: ty::Region<'tcx>,
      .                   r2: ty::Region<'tcx>,
      .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
  4,804 ( 0.00%)          assert_eq!(r, r2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   debug!("generalize: regions r={:?}", r);
      .           
  9,608 ( 0.00%)          match *r {
      .                       // Never make variables for regions bound within the type itself,
      .                       // nor for erased regions.
      .                       ty::ReLateBound(..) | ty::ReErased => {
      .                           return Ok(r);
      .                       }
      .           
      .                       ty::RePlaceholder(..)
      .                       | ty::ReVar(..)
-- line 691 ----------------------------------------
-- line 697 ----------------------------------------
      .                       }
      .                   }
      .           
      .                   // If we are in an invariant context, we can re-use the region
      .                   // as is, unless it happens to be in some universe that we
      .                   // can't name. (In the case of a region *variable*, we could
      .                   // use it if we promoted it into our universe, but we don't
      .                   // bother.)
 10,730 ( 0.00%)          if let ty::Invariant = self.ambient_variance {
 13,479 ( 0.00%)              let r_universe = self.infcx.universe_of_region(r);
 31,451 ( 0.00%)              if self.for_universe.can_name(r_universe) {
      .                           return Ok(r);
      .                       }
      .                   }
      .           
      .                   // FIXME: This is non-ideal because we don't give a
      .                   // very descriptive origin for this region variable.
  8,720 ( 0.00%)          Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.cause.span), self.for_universe))
 48,288 ( 0.00%)      }
      .           
  1,314 ( 0.00%)      fn consts(
      .                   &mut self,
      .                   c: &'tcx ty::Const<'tcx>,
      .                   c2: &'tcx ty::Const<'tcx>,
      .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    438 ( 0.00%)          assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==
      .           
      .                   match c.val {
      .                       ty::ConstKind::Infer(InferConst::Var(vid)) => {
      .                           let mut inner = self.infcx.inner.borrow_mut();
      .                           let variable_table = &mut inner.const_unification_table();
      .                           let var_value = variable_table.probe_value(vid);
      .                           match var_value.val {
      .                               ConstVariableValue::Known { value: u } => {
-- line 730 ----------------------------------------
-- line 754 ----------------------------------------
      .                               substs,
      .                               substs,
      .                           )?;
      .                           Ok(self.tcx().mk_const(ty::Const {
      .                               ty: c.ty,
      .                               val: ty::ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }),
      .                           }))
      .                       }
    730 ( 0.00%)              _ => relate::super_relate_consts(self, c, c),
      .                   }
  1,314 ( 0.00%)      }
      .           }
      .           
      .           pub trait ConstEquateRelation<'tcx>: TypeRelation<'tcx> {
      .               /// Register an obligation that both constants must be equal to each other.
      .               ///
      .               /// If they aren't equal then the relation doesn't hold.
      .               fn const_equate_obligation(&mut self, a: &'tcx ty::Const<'tcx>, b: &'tcx ty::Const<'tcx>);
      .           }
-- line 772 ----------------------------------------

342,657 ( 0.01%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/combine.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 416 ----------------------------------------
        .               /// ```
        .               /// # #![allow(unused_mut)]
        .               /// let mut vec: Vec<i32> = Vec::new();
        .               /// ```
        .               #[inline]
        .               #[rustc_const_stable(feature = "const_vec_new", since = "1.39.0")]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
      992 ( 0.00%)      pub const fn new() -> Self {
1,904,285 ( 0.06%)          Vec { buf: RawVec::NEW, len: 0 }
    1,369 ( 0.00%)      }
        .           
        .               /// Constructs a new, empty `Vec<T>` with the specified capacity.
        .               ///
        .               /// The vector will be able to hold exactly `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the vector will not allocate.
        .               ///
        .               /// It is important to note that although the returned vector has the
        .               /// *capacity* specified, the vector will have a zero *length*. For an
-- line 434 ----------------------------------------
-- line 461 ----------------------------------------
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[must_use]
       64 ( 0.00%)      pub fn with_capacity(capacity: usize) -> Self {
       16 ( 0.00%)          Self::with_capacity_in(capacity, Global)
       32 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 479 ----------------------------------------
-- line 529 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts(p, len, cap);
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
       54 ( 0.00%)      pub unsafe fn from_raw_parts(ptr: *mut T, length: usize, capacity: usize) -> Self {
        9 ( 0.00%)          unsafe { Self::from_raw_parts_in(ptr, length, capacity, Global) }
       18 ( 0.00%)      }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               /// Constructs a new, empty `Vec<T, A>`.
        .               ///
        .               /// The vector will not allocate until elements are pushed onto it.
        .               ///
        .               /// # Examples
-- line 547 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// // ...but this may make the vector reallocate
        .               /// vec.push(11);
        .               /// assert_eq!(vec.len(), 11);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
    1,358 ( 0.00%)      pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
  876,887 ( 0.03%)          Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
      388 ( 0.00%)      }
        .           
        .               /// Creates a `Vec<T, A>` directly from the raw components of another vector.
        .               ///
        .               /// # Safety
        .               ///
        .               /// This is highly unsafe, due to the number of invariants that aren't
        .               /// checked:
        .               ///
-- line 618 ----------------------------------------
-- line 676 ----------------------------------------
        .               ///
        .               ///     // Put everything back together into a Vec
        .               ///     let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());
        .               ///     assert_eq!(rebuilt, [4, 5, 6]);
        .               /// }
        .               /// ```
        .               #[inline]
        .               #[unstable(feature = "allocator_api", issue = "32838")]
      403 ( 0.00%)      pub unsafe fn from_raw_parts_in(ptr: *mut T, length: usize, capacity: usize, alloc: A) -> Self {
   38,022 ( 0.00%)          unsafe { Vec { buf: RawVec::from_raw_parts_in(ptr, capacity, alloc), len: length } }
       62 ( 0.00%)      }
        .           
        .               /// Decomposes a `Vec<T>` into its raw components.
        .               ///
        .               /// Returns the raw pointer to the underlying data, the length of
        .               /// the vector (in elements), and the allocated capacity of the
        .               /// data (in elements). These are the same arguments in the same
        .               /// order as the arguments to [`from_raw_parts`].
        .               ///
-- line 694 ----------------------------------------
-- line 777 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let vec: Vec<i32> = Vec::with_capacity(10);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      480 ( 0.00%)      pub fn capacity(&self) -> usize {
  223,428 ( 0.01%)          self.buf.capacity()
      240 ( 0.00%)      }
        .           
        .               /// Reserves capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
        .               /// # Panics
-- line 795 ----------------------------------------
-- line 800 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      680 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
  314,302 ( 0.01%)          self.buf.reserve(self.len, additional);
      272 ( 0.00%)      }
        .           
        .               /// Reserves the minimum capacity for exactly `additional` more elements to
        .               /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,
        .               /// capacity will be greater than or equal to `self.len() + additional`.
        .               /// Does nothing if the capacity is already sufficient.
        .               ///
        .               /// Note that the allocator may give the collection more space than it
        .               /// requests. Therefore, capacity can not be relied upon to be precisely
-- line 818 ----------------------------------------
-- line 829 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1];
        .               /// vec.reserve_exact(10);
        .               /// assert!(vec.capacity() >= 11);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn reserve_exact(&mut self, additional: usize) {
    5,204 ( 0.00%)          self.buf.reserve_exact(self.len, additional);
        .               }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `Vec<T>`. The collection may reserve more space to avoid
        .               /// frequent reallocations. After calling `try_reserve`, capacity will be
        .               /// greater than or equal to `self.len() + additional`. Does nothing if
        .               /// capacity is already sufficient.
        .               ///
-- line 845 ----------------------------------------
-- line 926 ----------------------------------------
        .               /// let mut vec = Vec::with_capacity(10);
        .               /// vec.extend([1, 2, 3]);
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// vec.shrink_to_fit();
        .               /// assert!(vec.capacity() >= 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      300 ( 0.00%)      pub fn shrink_to_fit(&mut self) {
        .                   // The capacity is never less than the length, and there's nothing to do when
        .                   // they are equal, so we can avoid the panic case in `RawVec::shrink_to_fit`
        .                   // by only calling it with a greater capacity.
   13,381 ( 0.00%)          if self.capacity() > self.len {
    6,221 ( 0.00%)              self.buf.shrink_to_fit(self.len);
        .                   }
      200 ( 0.00%)      }
        .           
        .               /// Shrinks the capacity of the vector with a lower bound.
        .               ///
        .               /// The capacity will remain at least as large as both the length
        .               /// and the supplied value.
        .               ///
        .               /// If the current capacity is less than the lower limit, this is a no-op.
        .               ///
-- line 949 ----------------------------------------
-- line 987 ----------------------------------------
        .               /// vec.extend([1, 2, 3]);
        .               ///
        .               /// assert_eq!(vec.capacity(), 10);
        .               /// let slice = vec.into_boxed_slice();
        .               /// assert_eq!(slice.into_vec().capacity(), 3);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
      200 ( 0.00%)      pub fn into_boxed_slice(mut self) -> Box<[T], A> {
        .                   unsafe {
      600 ( 0.00%)              self.shrink_to_fit();
    4,286 ( 0.00%)              let me = ManuallyDrop::new(self);
    1,000 ( 0.00%)              let buf = ptr::read(&me.buf);
      500 ( 0.00%)              let len = me.len();
    1,300 ( 0.00%)              buf.into_box(len).assume_init()
      100 ( 0.00%)          }
      200 ( 0.00%)      }
        .           
        .               /// Shortens the vector, keeping the first `len` elements and dropping
        .               /// the rest.
        .               ///
        .               /// If `len` is greater than the vector's current length, this has no
        .               /// effect.
        .               ///
        .               /// The [`drain`] method can emulate `truncate`, but causes the excess
-- line 1011 ----------------------------------------
-- line 1040 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.truncate(0);
        .               /// assert_eq!(vec, []);
        .               /// ```
        .               ///
        .               /// [`clear`]: Vec::clear
        .               /// [`drain`]: Vec::drain
        .               #[stable(feature = "rust1", since = "1.0.0")]
   93,708 ( 0.00%)      pub fn truncate(&mut self, len: usize) {
        .                   // This is safe because:
        .                   //
        .                   // * the slice passed to `drop_in_place` is valid; the `len > self.len`
        .                   //   case avoids creating an invalid slice, and
        .                   // * the `len` of the vector is shrunk before calling `drop_in_place`,
        .                   //   such that no value will be dropped twice in case `drop_in_place`
        .                   //   were to panic once (if it panics twice, the program aborts).
        .                   unsafe {
        .                       // Note: It's intentional that this is `>` and not `>=`.
        .                       //       Changing it to `>=` has negative performance
        .                       //       implications in some cases. See #78884 for more.
   86,443 ( 0.00%)              if len > self.len {
        .                           return;
        .                       }
        .                       let remaining_len = self.len - len;
        .                       let s = ptr::slice_from_raw_parts_mut(self.as_mut_ptr().add(len), remaining_len);
  136,803 ( 0.00%)              self.len = len;
    3,246 ( 0.00%)              ptr::drop_in_place(s);
        .                   }
  112,430 ( 0.00%)      }
        .           
        .               /// Extracts a slice containing the entire vector.
        .               ///
        .               /// Equivalent to `&s[..]`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 1076 ----------------------------------------
-- line 1123 ----------------------------------------
        .               ///         assert_eq!(*x_ptr.add(i), 1 << i);
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: Vec::as_mut_ptr
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
    2,312 ( 0.00%)      pub fn as_ptr(&self) -> *const T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref`, which creates an intermediate reference.
3,117,339 ( 0.10%)          let ptr = self.buf.ptr();
        .                   unsafe {
    1,156 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
    2,312 ( 0.00%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the vector's buffer.
        .               ///
        .               /// The caller must ensure that the vector outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               /// Modifying the vector may cause its buffer to be reallocated,
        .               /// which would also make any pointers to it invalid.
        .               ///
-- line 1147 ----------------------------------------
-- line 1159 ----------------------------------------
        .               ///         *x_ptr.add(i) = i as i32;
        .               ///     }
        .               ///     x.set_len(size);
        .               /// }
        .               /// assert_eq!(&*x, &[0, 1, 2, 3]);
        .               /// ```
        .               #[stable(feature = "vec_as_ptr", since = "1.37.0")]
        .               #[inline]
    8,450 ( 0.00%)      pub fn as_mut_ptr(&mut self) -> *mut T {
        .                   // We shadow the slice method of the same name to avoid going through
        .                   // `deref_mut`, which creates an intermediate reference.
2,804,654 ( 0.09%)          let ptr = self.buf.ptr();
        .                   unsafe {
    4,225 ( 0.00%)              assume(!ptr.is_null());
        .                   }
        .                   ptr
    8,450 ( 0.00%)      }
        .           
        .               /// Returns a reference to the underlying allocator.
        .               #[unstable(feature = "allocator_api", issue = "32838")]
        .               #[inline]
      558 ( 0.00%)      pub fn allocator(&self) -> &A {
      558 ( 0.00%)          self.buf.allocator()
      558 ( 0.00%)      }
        .           
        .               /// Forces the length of the vector to `new_len`.
        .               ///
        .               /// This is a low-level operation that maintains none of the normal
        .               /// invariants of the type. Normally changing the length of a vector
        .               /// is done using one of the safe operations instead, such as
        .               /// [`truncate`], [`resize`], [`extend`], or [`clear`].
        .               ///
-- line 1190 ----------------------------------------
-- line 1256 ----------------------------------------
        .               ///     vec.set_len(0);
        .               /// }
        .               /// ```
        .               ///
        .               /// Normally, here, one would use [`clear`] instead to correctly drop
        .               /// the contents and thus not leak memory.
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,326 ( 0.00%)      pub unsafe fn set_len(&mut self, new_len: usize) {
        .                   debug_assert!(new_len <= self.capacity());
        .           
  526,698 ( 0.02%)          self.len = new_len;
   14,351 ( 0.00%)      }
        .           
        .               /// Removes an element from the vector and returns it.
        .               ///
        .               /// The removed element is replaced by the last element of the vector.
        .               ///
        .               /// This does not preserve ordering, but is *O*(1).
        .               /// If you need to preserve the element order, use [`remove`] instead.
        .               ///
-- line 1276 ----------------------------------------
-- line 1305 ----------------------------------------
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // We replace self[index] with the last element. Note that if the
        .                       // bounds check above succeeds there must be a last element (which
        .                       // can be self[index] itself).
        .                       let value = ptr::read(self.as_ptr().add(index));
        .                       let base_ptr = self.as_mut_ptr();
        9 ( 0.00%)              ptr::copy(base_ptr.add(len - 1), base_ptr.add(index), 1);
        .                       self.set_len(len - 1);
        .                       value
        .                   }
        .               }
        .           
        .               /// Inserts an element at position `index` within the vector, shifting all
        .               /// elements after it to the right.
        .               ///
-- line 1321 ----------------------------------------
-- line 1329 ----------------------------------------
        .               /// let mut vec = vec![1, 2, 3];
        .               /// vec.insert(1, 4);
        .               /// assert_eq!(vec, [1, 4, 2, 3]);
        .               /// vec.insert(4, 5);
        .               /// assert_eq!(vec, [1, 4, 2, 3, 5]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    7,777 ( 0.00%)      pub fn insert(&mut self, index: usize, element: T) {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("insertion index (is {}) should be <= len (is {})", index, len);
        .                   }
        .           
    1,135 ( 0.00%)          let len = self.len();
    2,498 ( 0.00%)          if index > len {
        .                       assert_failed(index, len);
        .                   }
        .           
        .                   // space for the new element
    3,352 ( 0.00%)          if len == self.buf.capacity() {
        .                       self.reserve(1);
        .                   }
        .           
        .                   unsafe {
        .                       // infallible
        .                       // The spot to put the new value
        .                       {
        .                           let p = self.as_mut_ptr().add(index);
        .                           // Shift everything over to make space. (Duplicating the
        .                           // `index`th element into two consecutive places.)
    4,353 ( 0.00%)                  ptr::copy(p, p.offset(1), len - index);
        .                           // Write it in, overwriting the first copy of the `index`th
        .                           // element.
        .                           ptr::write(p, element);
        .                       }
    2,974 ( 0.00%)              self.set_len(len + 1);
        .                   }
    6,666 ( 0.00%)      }
        .           
        .               /// Removes and returns the element at position `index` within the vector,
        .               /// shifting all elements after it to the left.
        .               ///
        .               /// Note: Because this shifts over the remaining elements, it has a
        .               /// worst-case performance of *O*(*n*). If you don't need the order of elements
        .               /// to be preserved, use [`swap_remove`] instead. If you'd like to remove
        .               /// elements from the beginning of the `Vec`, consider using
-- line 1376 ----------------------------------------
-- line 1387 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let mut v = vec![1, 2, 3];
        .               /// assert_eq!(v.remove(1), 2);
        .               /// assert_eq!(v, [1, 3]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[track_caller]
      414 ( 0.00%)      pub fn remove(&mut self, index: usize) -> T {
        .                   #[cold]
        .                   #[inline(never)]
        .                   #[track_caller]
        .                   fn assert_failed(index: usize, len: usize) -> ! {
        .                       panic!("removal index (is {}) should be < len (is {})", index, len);
        .                   }
        .           
      416 ( 0.00%)          let len = self.len();
    1,500 ( 0.00%)          if index >= len {
        .                       assert_failed(index, len);
        .                   }
        .                   unsafe {
        .                       // infallible
        .                       let ret;
        .                       {
        .                           // the place we are taking from.
        .                           let ptr = self.as_mut_ptr().add(index);
        .                           // copy it out, unsafely having a copy of the value on
        .                           // the stack and in the vector at the same time.
    1,194 ( 0.00%)                  ret = ptr::read(ptr);
        .           
        .                           // Shift everything down to fill in that spot.
      984 ( 0.00%)                  ptr::copy(ptr.offset(1), ptr, len - index - 1);
        .                       }
      423 ( 0.00%)              self.set_len(len - 1);
        .                       ret
        .                   }
      690 ( 0.00%)      }
        .           
        .               /// Retains only the elements specified by the predicate.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1431 ----------------------------------------
-- line 1442 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3, 4, 5];
        .               /// let keep = [false, true, true, false, true];
        .               /// let mut iter = keep.iter();
        .               /// vec.retain(|_| *iter.next().unwrap());
        .               /// assert_eq!(vec, [2, 3, 5]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
  272,298 ( 0.01%)      pub fn retain<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&T) -> bool,
        .               {
    6,976 ( 0.00%)          self.retain_mut(|elem| f(elem));
  267,296 ( 0.01%)      }
        .           
        .               /// Retains only the elements specified by the predicate, passing a mutable reference to it.
        .               ///
        .               /// In other words, remove all elements `e` such that `f(&mut e)` returns `false`.
        .               /// This method operates in place, visiting each element exactly once in the
        .               /// original order, and preserves the order of the retained elements.
        .               ///
        .               /// # Examples
-- line 1463 ----------------------------------------
-- line 1474 ----------------------------------------
        .               /// });
        .               /// assert_eq!(vec, [2, 3, 4]);
        .               /// ```
        .               #[unstable(feature = "vec_retain_mut", issue = "90829")]
        .               pub fn retain_mut<F>(&mut self, mut f: F)
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
   34,024 ( 0.00%)          let original_len = self.len();
        .                   // Avoid double drop if the drop guard is not executed,
        .                   // since we may make some holes during the process.
        .                   unsafe { self.set_len(0) };
        .           
        .                   // Vec: [Kept, Kept, Hole, Hole, Hole, Hole, Unchecked, Unchecked]
        .                   //      |<-              processed len   ->| ^- next to check
        .                   //                  |<-  deleted cnt     ->|
        .                   //      |<-              original_len                          ->|
-- line 1490 ----------------------------------------
-- line 1499 ----------------------------------------
        .                       v: &'a mut Vec<T, A>,
        .                       processed_len: usize,
        .                       deleted_cnt: usize,
        .                       original_len: usize,
        .                   }
        .           
        .                   impl<T, A: Allocator> Drop for BackshiftOnDrop<'_, T, A> {
        .                       fn drop(&mut self) {
   30,591 ( 0.00%)                  if self.deleted_cnt > 0 {
        .                               // SAFETY: Trailing unchecked items must be valid since we never touch them.
        .                               unsafe {
        .                                   ptr::copy(
        .                                       self.v.as_ptr().add(self.processed_len),
   26,449 ( 0.00%)                              self.v.as_mut_ptr().add(self.processed_len - self.deleted_cnt),
        .                                       self.original_len - self.processed_len,
        .                                   );
        .                               }
        .                           }
        .                           // SAFETY: After filling holes, all items are in contiguous memory.
        .                           unsafe {
        2 ( 0.00%)                      self.v.set_len(self.original_len - self.deleted_cnt);
        .                           }
        .                       }
        .                   }
        .           
        .                   let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };
        .           
        .                   fn process_loop<F, T, A: Allocator, const DELETED: bool>(
        .                       original_len: usize,
        .                       f: &mut F,
        .                       g: &mut BackshiftOnDrop<'_, T, A>,
        .                   ) where
        .                       F: FnMut(&mut T) -> bool,
        .                   {
  383,339 ( 0.01%)              while g.processed_len != original_len {
        .                           // SAFETY: Unchecked element must be valid.
        .                           let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };
  123,163 ( 0.00%)                  if !f(cur) {
        .                               // Advance early to avoid double drop if `drop_in_place` panicked.
   23,242 ( 0.00%)                      g.processed_len += 1;
   14,604 ( 0.00%)                      g.deleted_cnt += 1;
        .                               // SAFETY: We never touch this element again after dropped.
      808 ( 0.00%)                      unsafe { ptr::drop_in_place(cur) };
        .                               // We already advanced the counter.
        .                               if DELETED {
        .                                   continue;
        .                               } else {
        .                                   break;
        .                               }
        .                           }
        .                           if DELETED {
        .                               // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.
        .                               // We use copy for move, and never touch this element again.
        .                               unsafe {
   15,834 ( 0.00%)                          let hole_slot = g.v.as_mut_ptr().add(g.processed_len - g.deleted_cnt);
        .                                   ptr::copy_nonoverlapping(cur, hole_slot, 1);
        .                               }
        .                           }
   13,947 ( 0.00%)                  g.processed_len += 1;
        .                       }
        .                   }
        .           
        .                   // Stage 1: Nothing was deleted.
        .                   process_loop::<F, T, A, false>(original_len, &mut f, &mut g);
        .           
        .                   // Stage 2: Some elements were deleted.
        .                   process_loop::<F, T, A, true>(original_len, &mut f, &mut g);
-- line 1565 ----------------------------------------
-- line 1606 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec!["foo", "bar", "Bar", "baz", "bar"];
        .               ///
        .               /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));
        .               ///
        .               /// assert_eq!(vec, ["foo", "bar", "baz", "bar"]);
        .               /// ```
        .               #[stable(feature = "dedup_by", since = "1.16.0")]
   55,713 ( 0.00%)      pub fn dedup_by<F>(&mut self, mut same_bucket: F)
        .               where
        .                   F: FnMut(&mut T, &mut T) -> bool,
        .               {
    8,654 ( 0.00%)          let len = self.len();
   17,930 ( 0.00%)          if len <= 1 {
        .                       return;
        .                   }
        .           
        .                   /* INVARIANT: vec.len() > read >= write > write-1 >= 0 */
        .                   struct FillGapOnDrop<'a, T, A: core::alloc::Allocator> {
        .                       /* Offset of the element we want to check if it is duplicate */
        .                       read: usize,
        .           
-- line 1627 ----------------------------------------
-- line 1670 ----------------------------------------
        .                   let ptr = gap.vec.as_mut_ptr();
        .           
        .                   /* Drop items while going through Vec, it should be more efficient than
        .                    * doing slice partition_dedup + truncate */
        .           
        .                   /* SAFETY: Because of the invariant, read_ptr, prev_ptr and write_ptr
        .                    * are always in-bounds and read_ptr never aliases prev_ptr */
        .                   unsafe {
   43,372 ( 0.00%)              while gap.read < len {
        .                           let read_ptr = ptr.add(gap.read);
        .                           let prev_ptr = ptr.add(gap.write.wrapping_sub(1));
        .           
      541 ( 0.00%)                  if same_bucket(&mut *read_ptr, &mut *prev_ptr) {
        .                               // Increase `gap.read` now since the drop may panic.
        .                               gap.read += 1;
        .                               /* We have found duplicate, drop it in-place */
        .                               ptr::drop_in_place(read_ptr);
        .                           } else {
        .                               let write_ptr = ptr.add(gap.write);
        .           
        .                               /* Because `read_ptr` can be equal to `write_ptr`, we either
        .                                * have to use `copy` or conditional `copy_nonoverlapping`.
        .                                * Looks like the first option is faster. */
        .                               ptr::copy(read_ptr, write_ptr, 1);
        .           
        .                               /* We have filled that place, so go further */
   33,112 ( 0.00%)                      gap.write += 1;
        .                               gap.read += 1;
        .                           }
        .                       }
        .           
        .                       /* Technically we could let `gap` clean up with its Drop, but
        .                        * when `same_bucket` is guaranteed to not panic, this bloats a little
        .                        * the codegen, so we just do it manually */
        .                       gap.vec.set_len(gap.write);
        .                       mem::forget(gap);
        .                   }
   63,672 ( 0.00%)      }
        .           
        .               /// Appends an element to the back of a collection.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the new capacity exceeds `isize::MAX` bytes.
        .               ///
        .               /// # Examples
-- line 1715 ----------------------------------------
-- line 1717 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2];
        .               /// vec.push(3);
        .               /// assert_eq!(vec, [1, 2, 3]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
   12,180 ( 0.00%)      pub fn push(&mut self, value: T) {
        .                   // This will panic or abort if we would allocate > isize::MAX bytes
        .                   // or if the length increment would overflow for zero-sized types.
4,439,601 ( 0.15%)          if self.len == self.buf.capacity() {
  292,397 ( 0.01%)              self.buf.reserve_for_push(self.len);
        .                   }
        .                   unsafe {
  148,412 ( 0.00%)              let end = self.as_mut_ptr().add(self.len);
   16,940 ( 0.00%)              ptr::write(end, value);
5,526,710 ( 0.19%)              self.len += 1;
        .                   }
    4,634 ( 0.00%)      }
        .           
        .               /// Removes the last element from a vector and returns it, or [`None`] if it
        .               /// is empty.
        .               ///
        .               /// If you'd like to pop the first element, consider using
        .               /// [`VecDeque::pop_front`] instead.
        .               ///
        .               /// [`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front
-- line 1744 ----------------------------------------
-- line 1748 ----------------------------------------
        .               /// ```
        .               /// let mut vec = vec![1, 2, 3];
        .               /// assert_eq!(vec.pop(), Some(3));
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn pop(&mut self) -> Option<T> {
  823,298 ( 0.03%)          if self.len == 0 {
       82 ( 0.00%)              None
        .                   } else {
        .                       unsafe {
  582,376 ( 0.02%)                  self.len -= 1;
  144,340 ( 0.00%)                  Some(ptr::read(self.as_ptr().add(self.len())))
        .                       }
        .                   }
        .               }
        .           
        .               /// Moves all the elements of `other` into `Self`, leaving `other` empty.
        .               ///
        .               /// # Panics
        .               ///
-- line 1769 ----------------------------------------
-- line 1776 ----------------------------------------
        .               /// let mut vec2 = vec![4, 5, 6];
        .               /// vec.append(&mut vec2);
        .               /// assert_eq!(vec, [1, 2, 3, 4, 5, 6]);
        .               /// assert_eq!(vec2, []);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "append", since = "1.4.0")]
      266 ( 0.00%)      pub fn append(&mut self, other: &mut Self) {
        .                   unsafe {
        .                       self.append_elements(other.as_slice() as _);
        .                       other.set_len(0);
        .                   }
      228 ( 0.00%)      }
        .           
        .               /// Appends elements to `Self` from other buffer.
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
    1,250 ( 0.00%)      unsafe fn append_elements(&mut self, other: *const [T]) {
      125 ( 0.00%)          let count = unsafe { (*other).len() };
      125 ( 0.00%)          self.reserve(count);
   76,749 ( 0.00%)          let len = self.len();
      439 ( 0.00%)          unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
  578,331 ( 0.02%)          self.len += count;
      250 ( 0.00%)      }
        .           
        .               /// Creates a draining iterator that removes the specified range in the vector
        .               /// and yields the removed items.
        .               ///
        .               /// When the iterator **is** dropped, all elements in the range are removed
        .               /// from the vector, even if the iterator was not fully consumed. If the
        .               /// iterator **is not** dropped (with [`mem::forget`] for example), it is
        .               /// unspecified how many elements are removed.
-- line 1808 ----------------------------------------
-- line 1820 ----------------------------------------
        .               /// assert_eq!(v, &[1]);
        .               /// assert_eq!(u, &[2, 3]);
        .               ///
        .               /// // A full range clears the vector
        .               /// v.drain(..);
        .               /// assert_eq!(v, &[]);
        .               /// ```
        .               #[stable(feature = "drain", since = "1.6.0")]
    1,764 ( 0.00%)      pub fn drain<R>(&mut self, range: R) -> Drain<'_, T, A>
        .               where
        .                   R: RangeBounds<usize>,
        .               {
        .                   // Memory safety
        .                   //
        .                   // When the Drain is first created, it shortens the length of
        .                   // the source vector to make sure no uninitialized or moved-from elements
        .                   // are accessible at all if the Drain's destructor never gets to run.
        .                   //
        .                   // Drain will ptr::read out the values to remove.
        .                   // When finished, remaining tail of the vec is copied back to cover
        .                   // the hole, and the vector length is restored to the new length.
        .                   //
   16,875 ( 0.00%)          let len = self.len();
    3,780 ( 0.00%)          let Range { start, end } = slice::range(range, ..len);
        .           
        .                   unsafe {
        .                       // set self.vec length's to start, to be safe in case Drain is leaked
      756 ( 0.00%)              self.set_len(start);
        .                       // Use the borrow in the IterMut to indicate borrowing behavior of the
        .                       // whole Drain iterator (like &mut T).
    4,669 ( 0.00%)              let range_slice = slice::from_raw_parts_mut(self.as_mut_ptr().add(start), end - start);
    2,914 ( 0.00%)              Drain {
        .                           tail_start: end,
    1,730 ( 0.00%)                  tail_len: len - end,
    1,260 ( 0.00%)                  iter: range_slice.iter(),
    1,008 ( 0.00%)                  vec: NonNull::from(self),
        .                       }
        .                   }
      504 ( 0.00%)      }
        .           
        .               /// Clears the vector, removing all values.
        .               ///
        .               /// Note that this method has no effect on the allocated capacity
        .               /// of the vector.
        .               ///
        .               /// # Examples
        .               ///
-- line 1866 ----------------------------------------
-- line 1869 ----------------------------------------
        .               ///
        .               /// v.clear();
        .               ///
        .               /// assert!(v.is_empty());
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn clear(&mut self) {
  166,345 ( 0.01%)          self.truncate(0)
        .               }
        .           
        .               /// Returns the number of elements in the vector, also referred to
        .               /// as its 'length'.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = vec![1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[inline]
        .               #[stable(feature = "rust1", since = "1.0.0")]
    2,780 ( 0.00%)      pub fn len(&self) -> usize {
    1,390 ( 0.00%)          self.len
    2,780 ( 0.00%)      }
        .           
        .               /// Returns `true` if the vector contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let mut v = Vec::new();
        .               /// assert!(v.is_empty());
        .               ///
        .               /// v.push(1);
        .               /// assert!(!v.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
      996 ( 0.00%)      pub fn is_empty(&self) -> bool {
  256,426 ( 0.01%)          self.len() == 0
    1,992 ( 0.00%)      }
        .           
        .               /// Splits the collection into two at the given index.
        .               ///
        .               /// Returns a newly allocated vector containing the elements in the range
        .               /// `[at, len)`. After the call, the original vector will be left containing
        .               /// the elements `[0, at)` with its previous capacity unchanged.
        .               ///
        .               /// # Panics
-- line 1917 ----------------------------------------
-- line 1935 ----------------------------------------
        .                   A: Clone,
        .               {
        .                   #[cold]
        .                   #[inline(never)]
        .                   fn assert_failed(at: usize, len: usize) -> ! {
        .                       panic!("`at` split index (is {}) should be <= len (is {})", at, len);
        .                   }
        .           
      400 ( 0.00%)          if at > self.len() {
        .                       assert_failed(at, self.len());
        .                   }
        .           
      321 ( 0.00%)          if at == 0 {
        .                       // the new vector can take over the original buffer and avoid the copy
        .                       return mem::replace(
        .                           self,
        .                           Vec::with_capacity_in(self.capacity(), self.allocator().clone()),
        .                       );
        .                   }
        .           
       16 ( 0.00%)          let other_len = self.len - at;
        .                   let mut other = Vec::with_capacity_in(other_len, self.allocator().clone());
        .           
        .                   // Unsafely `set_len` and copy items to `other`.
        .                   unsafe {
        .                       self.set_len(at);
        .                       other.set_len(other_len);
        .           
        .                       ptr::copy_nonoverlapping(self.as_ptr().add(at), other.as_mut_ptr(), other.len());
        .                   }
       28 ( 0.00%)          other
        .               }
        .           
        .               /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.
        .               ///
        .               /// If `new_len` is greater than `len`, the `Vec` is extended by the
        .               /// difference, with each additional slot filled with the result of
        .               /// calling the closure `f`. The return values from `f` will end up
        .               /// in the `Vec` in the order they have been generated.
-- line 1973 ----------------------------------------
-- line 1988 ----------------------------------------
        .               ///
        .               /// let mut vec = vec![];
        .               /// let mut p = 1;
        .               /// vec.resize_with(4, || { p *= 2; p });
        .               /// assert_eq!(vec, [2, 4, 8, 16]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize_with", since = "1.33.0")]
   13,473 ( 0.00%)      pub fn resize_with<F>(&mut self, new_len: usize, f: F)
        .               where
        .                   F: FnMut() -> T,
        .               {
    1,833 ( 0.00%)          let len = self.len();
    3,666 ( 0.00%)          if new_len > len {
   10,770 ( 0.00%)              self.extend_with(new_len - len, ExtendFunc(f));
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
   11,640 ( 0.00%)      }
        .           
        .               /// Consumes and leaks the `Vec`, returning a mutable reference to the contents,
        .               /// `&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime
        .               /// `'a`. If the type has only static references, or none at all, then this
        .               /// may be chosen to be `'static`.
        .               ///
        .               /// As of Rust 1.57, this method does not reallocate or shrink the `Vec`,
        .               /// so the leaked allocation may include unused capacity that is not part
-- line 2014 ----------------------------------------
-- line 2064 ----------------------------------------
        .               /// unsafe {
        .               ///     v.set_len(3);
        .               /// }
        .               ///
        .               /// assert_eq!(&v, &[0, 1, 2]);
        .               /// ```
        .               #[stable(feature = "vec_spare_capacity", since = "1.60.0")]
        .               #[inline]
      432 ( 0.00%)      pub fn spare_capacity_mut(&mut self) -> &mut [MaybeUninit<T>] {
        .                   // Note:
        .                   // This method is not implemented in terms of `split_at_spare_mut`,
        .                   // to prevent invalidation of pointers to the buffer.
        .                   unsafe {
      576 ( 0.00%)              slice::from_raw_parts_mut(
    1,018 ( 0.00%)                  self.as_mut_ptr().add(self.len) as *mut MaybeUninit<T>,
      985 ( 0.00%)                  self.buf.capacity() - self.len,
        .                       )
        .                   }
      288 ( 0.00%)      }
        .           
        .               /// Returns vector content as a slice of `T`, along with the remaining spare
        .               /// capacity of the vector as a slice of `MaybeUninit<T>`.
        .               ///
        .               /// The returned spare capacity slice can be used to fill the vector with data
        .               /// (e.g. by reading from a file) before marking the data as initialized using
        .               /// the [`set_len`] method.
        .               ///
-- line 2090 ----------------------------------------
-- line 2189 ----------------------------------------
        .               /// assert_eq!(vec, ["hello", "world", "world"]);
        .               ///
        .               /// let mut vec = vec![1, 2, 3, 4];
        .               /// vec.resize(2, 0);
        .               /// assert_eq!(vec, [1, 2]);
        .               /// ```
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_resize", since = "1.5.0")]
   21,860 ( 0.00%)      pub fn resize(&mut self, new_len: usize, value: T) {
    2,186 ( 0.00%)          let len = self.len();
        .           
    6,558 ( 0.00%)          if new_len > len {
    2,748 ( 0.00%)              self.extend_with(new_len - len, ExtendElement(value))
        .                   } else {
        .                       self.truncate(new_len);
        .                   }
    3,306 ( 0.00%)      }
        .           
        .               /// Clones and appends all elements in a slice to the `Vec`.
        .               ///
        .               /// Iterates over the slice `other`, clones each element, and then appends
        .               /// it to this `Vec`. The `other` slice is traversed in-order.
        .               ///
        .               /// Note that this function is same as [`extend`] except that it is
        .               /// specialized to work with slices instead. If and when Rust gets
-- line 2213 ----------------------------------------
-- line 2220 ----------------------------------------
        .               /// let mut vec = vec![1];
        .               /// vec.extend_from_slice(&[2, 3, 4]);
        .               /// assert_eq!(vec, [1, 2, 3, 4]);
        .               /// ```
        .               ///
        .               /// [`extend`]: Vec::extend
        .               #[cfg(not(no_global_oom_handling))]
        .               #[stable(feature = "vec_extend_from_slice", since = "1.6.0")]
    1,375 ( 0.00%)      pub fn extend_from_slice(&mut self, other: &[T]) {
      500 ( 0.00%)          self.spec_extend(other.iter())
      250 ( 0.00%)      }
        .           
        .               /// Copies elements from `src` range to the end of the vector.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if the starting point is greater than the end point or if
        .               /// the end point is greater than the length of the vector.
        .               ///
-- line 2238 ----------------------------------------
-- line 2271 ----------------------------------------
        .           trait ExtendWith<T> {
        .               fn next(&mut self) -> T;
        .               fn last(self) -> T;
        .           }
        .           
        .           struct ExtendElement<T>(T);
        .           impl<T: Clone> ExtendWith<T> for ExtendElement<T> {
        .               fn next(&mut self) -> T {
      791 ( 0.00%)          self.0.clone()
        .               }
        .               fn last(self) -> T {
        .                   self.0
        .               }
        .           }
        .           
        .           struct ExtendFunc<F>(F);
        .           impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {
-- line 2287 ----------------------------------------
-- line 2291 ----------------------------------------
        .               fn last(mut self) -> T {
        .                   (self.0)()
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               #[cfg(not(no_global_oom_handling))]
        .               /// Extend the vector by `n` values, using the given generator.
  165,891 ( 0.01%)      fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {
        .                   self.reserve(n);
        .           
        .                   unsafe {
    2,153 ( 0.00%)              let mut ptr = self.as_mut_ptr().add(self.len());
        .                       // Use SetLenOnDrop to work around bug where compiler
        .                       // might not realize the store through `ptr` through self.set_len()
        .                       // don't alias.
        .                       let mut local_len = SetLenOnDrop::new(&mut self.len);
        .           
        .                       // Write all elements except the last one
        .                       for _ in 1..n {
        .                           ptr::write(ptr, value.next());
        .                           ptr = ptr.offset(1);
        .                           // Increment the length in every step in case next() panics
        .                           local_len.increment_len(1);
        .                       }
        .           
  144,106 ( 0.00%)              if n > 0 {
        .                           // We can write the last element directly without cloning needlessly
        .                           ptr::write(ptr, value.last());
        .                           local_len.increment_len(1);
        .                       }
        .           
        .                       // len set by scope guard
        .                   }
  131,947 ( 0.00%)      }
        .           }
        .           
        .           impl<T: PartialEq, A: Allocator> Vec<T, A> {
        .               /// Removes consecutive repeated elements in the vector according to the
        .               /// [`PartialEq`] trait implementation.
        .               ///
        .               /// If the vector is sorted, this removes all duplicates.
        .               ///
-- line 2333 ----------------------------------------
-- line 2338 ----------------------------------------
        .               ///
        .               /// vec.dedup();
        .               ///
        .               /// assert_eq!(vec, [1, 2, 3, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn dedup(&mut self) {
    7,961 ( 0.00%)          self.dedup_by(|a, b| a == b)
        .               }
        .           }
        .           
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Internal methods and functions
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
   39,144 ( 0.00%)  pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
  213,647 ( 0.01%)      <T as SpecFromElem>::from_elem(elem, n, Global)
   48,182 ( 0.00%)  }
        .           
        .           #[doc(hidden)]
        .           #[cfg(not(no_global_oom_handling))]
        .           #[unstable(feature = "allocator_api", issue = "32838")]
        .           pub fn from_elem_in<T: Clone, A: Allocator>(elem: T, n: usize, alloc: A) -> Vec<T, A> {
        .               <T as SpecFromElem>::from_elem(elem, n, alloc)
        .           }
        .           
-- line 2367 ----------------------------------------
-- line 2423 ----------------------------------------
        .           ////////////////////////////////////////////////////////////////////////////////
        .           // Common trait implementations for Vec
        .           ////////////////////////////////////////////////////////////////////////////////
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::Deref for Vec<T, A> {
        .               type Target = [T];
        .           
    3,468 ( 0.00%)      fn deref(&self) -> &[T] {
5,037,218 ( 0.17%)          unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    2,497 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> ops::DerefMut for Vec<T, A> {
       54 ( 0.00%)      fn deref_mut(&mut self) -> &mut [T] {
1,330,591 ( 0.04%)          unsafe { slice::from_raw_parts_mut(self.as_mut_ptr(), self.len) }
       36 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           trait SpecCloneFrom {
        .               fn clone_from(this: &mut Self, other: &Self);
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
-- line 2448 ----------------------------------------
-- line 2468 ----------------------------------------
        .                   this.extend_from_slice(other);
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T: Clone, A: Allocator + Clone> Clone for Vec<T, A> {
        .               #[cfg(not(test))]
  121,280 ( 0.00%)      fn clone(&self) -> Self {
      720 ( 0.00%)          let alloc = self.allocator().clone();
    1,298 ( 0.00%)          <[T]>::to_vec_in(&**self, alloc)
  153,061 ( 0.01%)      }
        .           
        .               // HACK(japaric): with cfg(test) the inherent `[T]::to_vec` method, which is
        .               // required for this method definition, is not available. Instead use the
        .               // `slice::to_vec`  function which is only available with cfg(test)
        .               // NB see the slice::hack module in slice.rs for more information
        .               #[cfg(test)]
        .               fn clone(&self) -> Self {
        .                   let alloc = self.allocator().clone();
-- line 2487 ----------------------------------------
-- line 2517 ----------------------------------------
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> Index<I> for Vec<T, A> {
        .               type Output = I::Output;
        .           
        .               #[inline]
       80 ( 0.00%)      fn index(&self, index: I) -> &Self::Output {
   95,821 ( 0.00%)          Index::index(&**self, index)
       32 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_on_unimplemented(
        .               message = "vector indices are of type `usize` or ranges of `usize`",
        .               label = "vector indices are of type `usize` or ranges of `usize`"
        .           )]
        .           impl<T, I: SliceIndex<[T]>, A: Allocator> IndexMut<I> for Vec<T, A> {
        .               #[inline]
        .               fn index_mut(&mut self, index: I) -> &mut Self::Output {
    1,280 ( 0.00%)          IndexMut::index_mut(&mut **self, index)
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T> FromIterator<T> for Vec<T> {
        .               #[inline]
       57 ( 0.00%)      fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Vec<T> {
1,218,559 ( 0.04%)          <Self as SpecFromIter<T, I::IntoIter>>::from_iter(iter.into_iter())
       38 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> IntoIterator for Vec<T, A> {
        .               type Item = T;
        .               type IntoIter = IntoIter<T, A>;
        .           
        .               /// Creates a consuming iterator, that is, one that moves each value out of
-- line 2556 ----------------------------------------
-- line 2562 ----------------------------------------
        .               /// ```
        .               /// let v = vec!["a".to_string(), "b".to_string()];
        .               /// for s in v.into_iter() {
        .               ///     // s has type String, not &String
        .               ///     println!("{}", s);
        .               /// }
        .               /// ```
        .               #[inline]
      405 ( 0.00%)      fn into_iter(self) -> IntoIter<T, A> {
        .                   unsafe {
  404,126 ( 0.01%)              let mut me = ManuallyDrop::new(self);
      270 ( 0.00%)              let alloc = ptr::read(me.allocator());
      656 ( 0.00%)              let begin = me.as_mut_ptr();
      405 ( 0.00%)              let end = if mem::size_of::<T>() == 0 {
        .                           arith_offset(begin as *const i8, me.len() as isize) as *const T
        .                       } else {
      638 ( 0.00%)                  begin.add(me.len()) as *const T
        .                       };
      135 ( 0.00%)              let cap = me.buf.capacity();
  216,941 ( 0.01%)              IntoIter {
      521 ( 0.00%)                  buf: NonNull::new_unchecked(begin),
        .                           phantom: PhantomData,
        .                           cap,
        .                           alloc,
        .                           ptr: begin,
      135 ( 0.00%)                  end,
        .                       }
        .                   }
      270 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a Vec<T, A> {
        .               type Item = &'a T;
        .               type IntoIter = slice::Iter<'a, T>;
        .           
      124 ( 0.00%)      fn into_iter(self) -> slice::Iter<'a, T> {
    3,175 ( 0.00%)          self.iter()
      124 ( 0.00%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<'a, T, A: Allocator> IntoIterator for &'a mut Vec<T, A> {
        .               type Item = &'a mut T;
        .               type IntoIter = slice::IterMut<'a, T>;
        .           
       12 ( 0.00%)      fn into_iter(self) -> slice::IterMut<'a, T> {
    3,206 ( 0.00%)          self.iter_mut()
       12 ( 0.00%)      }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl<T, A: Allocator> Extend<T> for Vec<T, A> {
        .               #[inline]
    5,982 ( 0.00%)      fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
  451,952 ( 0.02%)          <Self as SpecExtend<T, I::IntoIter>>::spec_extend(self, iter.into_iter())
    5,972 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, item: T) {
       64 ( 0.00%)          self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
        .                   self.reserve(additional);
        .               }
        .           }
        .           
        .           impl<T, A: Allocator> Vec<T, A> {
        .               // leaf method to which various SpecFrom/SpecExtend implementations delegate when
        .               // they have no further optimizations to apply
        .               #[cfg(not(no_global_oom_handling))]
       40 ( 0.00%)      fn extend_desugared<I: Iterator<Item = T>>(&mut self, mut iterator: I) {
        .                   // This is the case for a general iterator.
        .                   //
        .                   // This function should be the moral equivalent of:
        .                   //
        .                   //      for item in iterator {
        .                   //          self.push(item);
        .                   //      }
  156,674 ( 0.01%)          while let Some(element) = iterator.next() {
   15,071 ( 0.00%)              let len = self.len();
  270,548 ( 0.01%)              if len == self.capacity() {
    1,018 ( 0.00%)                  let (lower, _) = iterator.size_hint();
        .                           self.reserve(lower.saturating_add(1));
        .                       }
        .                       unsafe {
       28 ( 0.00%)                  ptr::write(self.as_mut_ptr().add(len), element);
        .                           // Since next() executes user code which can panic we have to bump the length
        .                           // after each step.
        .                           // NB can't overflow since we would have had to alloc the address space
  204,857 ( 0.01%)                  self.set_len(len + 1);
        .                       }
        2 ( 0.00%)          }
    1,698 ( 0.00%)      }
        .           
        .               /// Creates a splicing iterator that replaces the specified range in the vector
        .               /// with the given `replace_with` iterator and yields the removed items.
        .               /// `replace_with` does not need to be the same length as `range`.
        .               ///
        .               /// `range` is removed even if the iterator is not consumed until the end.
        .               ///
        .               /// It is unspecified how many elements are removed from the vector
-- line 2666 ----------------------------------------
-- line 2693 ----------------------------------------
        .               #[cfg(not(no_global_oom_handling))]
        .               #[inline]
        .               #[stable(feature = "vec_splice", since = "1.21.0")]
        .               pub fn splice<R, I>(&mut self, range: R, replace_with: I) -> Splice<'_, I::IntoIter, A>
        .               where
        .                   R: RangeBounds<usize>,
        .                   I: IntoIterator<Item = T>,
        .               {
    1,837 ( 0.00%)          Splice { drain: self.drain(range), replace_with: replace_with.into_iter() }
        .               }
        .           
        .               /// Creates an iterator which uses a closure to determine if an element should be removed.
        .               ///
        .               /// If the closure returns true, then the element is removed and yielded.
        .               /// If the closure returns false, the element will remain in the vector and will not be yielded
        .               /// by the iterator.
        .               ///
-- line 2709 ----------------------------------------
-- line 2745 ----------------------------------------
        .               /// assert_eq!(evens, vec![2, 4, 6, 8, 14]);
        .               /// assert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);
        .               /// ```
        .               #[unstable(feature = "drain_filter", reason = "recently added", issue = "43244")]
        .               pub fn drain_filter<F>(&mut self, filter: F) -> DrainFilter<'_, T, F, A>
        .               where
        .                   F: FnMut(&mut T) -> bool,
        .               {
    3,622 ( 0.00%)          let old_len = self.len();
        .           
        .                   // Guard against us getting leaked (leak amplification)
        .                   unsafe {
        .                       self.set_len(0);
        .                   }
        .           
   18,904 ( 0.00%)          DrainFilter { vec: self, idx: 0, del: 0, old_len, pred: filter, panic_flag: false }
        .               }
        .           }
        .           
        .           /// Extend implementation that copies elements out of references before pushing them onto the Vec.
        .           ///
        .           /// This implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to
        .           /// append the entire slice at once.
        .           ///
        .           /// [`copy_from_slice`]: slice::copy_from_slice
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "extend_ref", since = "1.2.0")]
        .           impl<'a, T: Copy + 'a, A: Allocator + 'a> Extend<&'a T> for Vec<T, A> {
    5,416 ( 0.00%)      fn extend<I: IntoIterator<Item = &'a T>>(&mut self, iter: I) {
        .                   self.spec_extend(iter.into_iter())
    4,062 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn extend_one(&mut self, &item: &'a T) {
        .                   self.push(item);
        .               }
        .           
        .               #[inline]
        .               fn extend_reserve(&mut self, additional: usize) {
-- line 2783 ----------------------------------------
-- line 2803 ----------------------------------------
        .               #[inline]
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   Ord::cmp(&**self, &**other)
        .               }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
  480,153 ( 0.02%)      fn drop(&mut self) {
        .                   unsafe {
        .                       // use drop for [T]
        .                       // use a raw slice to refer to the elements of the vector as weakest necessary type;
        .                       // could avoid questions of validity in certain cases
  239,459 ( 0.01%)              ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
        .                   }
        .                   // RawVec handles deallocation
  563,128 ( 0.02%)      }
        .           }
        .           
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           #[rustc_const_unstable(feature = "const_default_impls", issue = "87864")]
        .           impl<T> const Default for Vec<T> {
        .               /// Creates an empty `Vec<T>`.
        .               fn default() -> Vec<T> {
        .                   Vec::new()
-- line 2827 ----------------------------------------
-- line 2976 ----------------------------------------
        .               /// newly-allocated buffer with exactly the right capacity.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// assert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());
        .               /// ```
        .               fn from(v: Vec<T, A>) -> Self {
        4 ( 0.00%)          v.into_boxed_slice()
        .               }
        .           }
        .           
        .           #[cfg(not(no_global_oom_handling))]
        .           #[stable(feature = "rust1", since = "1.0.0")]
        .           impl From<&str> for Vec<u8> {
        .               /// Allocate a `Vec<u8>` and fill it with a UTF-8 string.
        .               ///
-- line 2992 ----------------------------------------

1,317,186 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/alloc/src/vec/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs
--------------------------------------------------------------------------------
Ir                  

-- line 70 ----------------------------------------
         .           
         .                   impl<'a, T> $name<'a, T> {
         .                       // Helper function for creating a slice from the iterator.
         .                       #[inline(always)]
         .                       fn make_slice(&self) -> &'a [T] {
         .                           // SAFETY: the iterator was created from a slice with pointer
         .                           // `self.ptr` and length `len!(self)`. This guarantees that all
         .                           // the prerequisites for `from_raw_parts` are fulfilled.
    30,270 ( 0.00%)                  unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
         .                       }
         .           
         .                       // Helper function for moving the start of the iterator forwards by `offset` elements,
         .                       // returning the old start.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn post_inc_start(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
    15,354 ( 0.00%)                      let old = self.ptr.as_ptr();
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // so this new pointer is inside `self` and thus guaranteed to be non-null.
   241,627 ( 0.01%)                      self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
     2,559 ( 0.00%)                      old
         .                           }
     5,118 ( 0.00%)              }
         .           
         .                       // Helper function for moving the end of the iterator backwards by `offset` elements,
         .                       // returning the new end.
         .                       // Unsafe because the offset must not exceed `self.len()`.
         .                       #[inline(always)]
         .                       unsafe fn pre_dec_end(&mut self, offset: isize) -> * $raw_mut T {
         .                           if mem::size_of::<T>() == 0 {
         .                               zst_shrink!(self, offset);
         .                               self.ptr.as_ptr()
         .                           } else {
         .                               // SAFETY: the caller guarantees that `offset` doesn't exceed `self.len()`,
         .                               // which is guaranteed to not overflow an `isize`. Also, the resulting pointer
         .                               // is in bounds of `slice`, which fulfills the other requirements for `offset`.
     4,581 ( 0.00%)                      self.end = unsafe { self.end.offset(-offset) };
       668 ( 0.00%)                      self.end
         .                           }
       668 ( 0.00%)              }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<T> ExactSizeIterator for $name<'_, T> {
         .                       #[inline(always)]
         .                       fn len(&self) -> usize {
    55,220 ( 0.00%)                  len!(self)
       528 ( 0.00%)              }
         .           
         .                       #[inline(always)]
         .                       fn is_empty(&self) -> bool {
         .                           is_empty!(self)
         .                       }
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> Iterator for $name<'a, T> {
         .                       type Item = $elem;
         .           
         .                       #[inline]
    11,043 ( 0.00%)              fn next(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer
         .                           // must be non-null, and slices over non-ZSTs must also have a
         .                           // non-null end pointer. The call to `next_unchecked!` is safe
         .                           // since we check if the iterator is empty first.
         .                           unsafe {
   162,849 ( 0.01%)                      assume(!self.ptr.as_ptr().is_null());
    18,405 ( 0.00%)                      if mem::size_of::<T>() != 0 {
    43,401 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
30,426,035 ( 1.02%)                      if is_empty!(self) {
     1,122 ( 0.00%)                          None
         .                               } else {
     5,120 ( 0.00%)                          Some(next_unchecked!(self))
         .                               }
         .                           }
    11,043 ( 0.00%)              }
         .           
         .                       #[inline]
        10 ( 0.00%)              fn size_hint(&self) -> (usize, Option<usize>) {
   870,330 ( 0.03%)                  let exact = len!(self);
        18 ( 0.00%)                  (exact, Some(exact))
         4 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn count(self) -> usize {
         .                           len!(self)
         .                       }
         .           
         .                       #[inline]
         .                       fn nth(&mut self, n: usize) -> Option<$elem> {
    16,650 ( 0.00%)                  if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               if mem::size_of::<T>() == 0 {
         .                                   // We have to do it this way as `ptr` may never be 0, but `end`
         .                                   // could be (due to wrapping).
         .                                   self.end = self.ptr.as_ptr();
         .                               } else {
         .                                   // SAFETY: end can't be 0 if T isn't ZST because ptr isn't 0 and end >= ptr
         .                                   unsafe {
-- line 175 ----------------------------------------
-- line 203 ----------------------------------------
         .                       // faster to compile.
         .                       #[inline]
         .                       fn for_each<F>(mut self, mut f: F)
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item),
         .                       {
         .                           while let Some(x) = self.next() {
     1,748 ( 0.00%)                      f(x);
         .                           }
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
         .                       fn all<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
     1,423 ( 0.00%)                  while let Some(x) = self.next() {
    34,371 ( 0.00%)                      if !f(x) {
         .                                   return false;
         .                               }
         .                           }
         .                           true
         .                       }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       328 ( 0.00%)              fn any<F>(&mut self, mut f: F) -> bool
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> bool,
         .                       {
   219,070 ( 0.01%)                  while let Some(x) = self.next() {
   324,170 ( 0.01%)                      if f(x) {
         .                                   return true;
         .                               }
         .                           }
         .                           false
       328 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       122 ( 0.00%)              fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item>
         .                       where
         .                           Self: Sized,
         .                           P: FnMut(&Self::Item) -> bool,
         .                       {
    40,094 ( 0.00%)                  while let Some(x) = self.next() {
   258,718 ( 0.01%)                      if predicate(&x) {
        24 ( 0.00%)                          return Some(x);
         .                               }
         .                           }
        13 ( 0.00%)                  None
   145,350 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile.
         .                       #[inline]
       147 ( 0.00%)              fn find_map<B, F>(&mut self, mut f: F) -> Option<B>
         .                       where
         .                           Self: Sized,
         .                           F: FnMut(Self::Item) -> Option<B>,
         .                       {
    47,965 ( 0.00%)                  while let Some(x) = self.next() {
    80,140 ( 0.00%)                      if let Some(y) = f(x) {
    11,956 ( 0.00%)                          return Some(y);
         .                               }
         4 ( 0.00%)                  }
         9 ( 0.00%)                  None
     1,623 ( 0.00%)              }
         .           
         .                       // We override the default implementation, which uses `try_fold`,
         .                       // because this simple implementation generates less LLVM IR and is
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       #[rustc_inherit_overflow_checks]
         .                       fn position<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           Self: Sized,
         .                           P: FnMut(Self::Item) -> bool,
         .                       {
         .                           let n = len!(self);
         .                           let mut i = 0;
         .                           while let Some(x) = self.next() {
   228,048 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: we are guaranteed to be in bounds by the loop invariant:
         .                                   // when `i >= n`, `self.next()` returns `None` and the loop breaks.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                               i += 1;
         .                           }
         .                           None
-- line 303 ----------------------------------------
-- line 308 ----------------------------------------
         .                       // faster to compile. Also, the `assume` avoids a bounds check.
         .                       #[inline]
         .                       fn rposition<P>(&mut self, mut predicate: P) -> Option<usize> where
         .                           P: FnMut(Self::Item) -> bool,
         .                           Self: Sized + ExactSizeIterator + DoubleEndedIterator
         .                       {
         .                           let n = len!(self);
         .                           let mut i = n;
    16,361 ( 0.00%)                  while let Some(x) = self.next_back() {
   267,647 ( 0.01%)                      i -= 1;
   228,079 ( 0.01%)                      if predicate(x) {
         .                                   // SAFETY: `i` must be lower than `n` since it starts at `n`
         .                                   // and is only decreasing.
         .                                   unsafe { assume(i < n) };
         .                                   return Some(i);
         .                               }
         .                           }
         .                           None
         .                       }
-- line 326 ----------------------------------------
-- line 332 ----------------------------------------
         .                           // the returned references is guaranteed to refer to an element
         .                           // of the slice and thus guaranteed to be valid.
         .                           //
         .                           // Also note that the caller also guarantees that we're never
         .                           // called with the same index again, and that no other methods
         .                           // that will access this subslice are called, so it is valid
         .                           // for the returned reference to be mutable in the case of
         .                           // `IterMut`
   127,307 ( 0.00%)                  unsafe { & $( $mut_ )? * self.ptr.as_ptr().add(idx) }
         .                       }
         .           
         .                       $($extra)*
         .                   }
         .           
         .                   #[stable(feature = "rust1", since = "1.0.0")]
         .                   impl<'a, T> DoubleEndedIterator for $name<'a, T> {
         .                       #[inline]
     1,002 ( 0.00%)              fn next_back(&mut self) -> Option<$elem> {
         .                           // could be implemented with slices, but this avoids bounds checks
         .           
         .                           // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,
         .                           // and slices over non-ZSTs must also have a non-null end pointer.
         .                           // The call to `next_back_unchecked!` is safe since we check if the iterator is
         .                           // empty first.
         .                           unsafe {
     4,830 ( 0.00%)                      assume(!self.ptr.as_ptr().is_null());
     1,670 ( 0.00%)                      if mem::size_of::<T>() != 0 {
     4,296 ( 0.00%)                          assume(!self.end.is_null());
         .                               }
   538,768 ( 0.02%)                      if is_empty!(self) {
         .                                   None
         .                               } else {
       668 ( 0.00%)                          Some(next_back_unchecked!(self))
         .                               }
         .                           }
     1,002 ( 0.00%)              }
         .           
         .                       #[inline]
         .                       fn nth_back(&mut self, n: usize) -> Option<$elem> {
         .                           if n >= len!(self) {
         .                               // This iterator is now empty.
         .                               self.end = self.ptr.as_ptr();
         .                               return None;
         .                           }
-- line 375 ----------------------------------------

 4,965,727 ( 0.17%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/iter/macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs
--------------------------------------------------------------------------------
Ir                 

-- line 57 ----------------------------------------
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::from_str_radix(\"A\", 16), Ok(10));")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
      206 ( 0.00%)          pub fn from_str_radix(src: &str, radix: u32) -> Result<Self, ParseIntError> {
      103 ( 0.00%)              from_str_radix(src, radix)
      309 ( 0.00%)          }
        .           
        .                   /// Returns the number of ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
        .                   /// ```
-- line 75 ----------------------------------------
-- line 80 ----------------------------------------
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[doc(alias = "popcount")]
        .                   #[doc(alias = "popcnt")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn count_ones(self) -> u32 {
  152,475 ( 0.01%)              intrinsics::ctpop(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of zeros in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 96 ----------------------------------------
-- line 118 ----------------------------------------
        .                   /// assert_eq!(n.leading_zeros(), 2);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn leading_zeros(self) -> u32 {
  499,878 ( 0.02%)              intrinsics::ctlz(self as $ActualT) as u32
        .                   }
        .           
        .                   /// Returns the number of trailing zeros in the binary representation
        .                   /// of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 134 ----------------------------------------
-- line 139 ----------------------------------------
        .                   /// assert_eq!(n.trailing_zeros(), 3);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn trailing_zeros(self) -> u32 {
  428,493 ( 0.01%)              intrinsics::cttz(self) as u32
        .                   }
        .           
        .                   /// Returns the number of leading ones in the binary representation of `self`.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 155 ----------------------------------------
-- line 204 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(n.rotate_left(", $rot, "), m);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn rotate_left(self, n: u32) -> Self {
8,346,458 ( 0.28%)              intrinsics::rotate_left(self, n as $SelfT)
        .                   }
        .           
        .                   /// Shifts the bits to the right by a specified amount, `n`,
        .                   /// wrapping the truncated bits to the beginning of the resulting
        .                   /// integer.
        .                   ///
        .                   /// Please note this isn't the same operation as the `>>` shifting operator!
        .                   ///
-- line 220 ----------------------------------------
-- line 429 ----------------------------------------
        .                   )]
        .                   #[doc = concat!("assert_eq!((", stringify!($SelfT), "::MAX - 2).checked_add(3), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
    3,770 ( 0.00%)          pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    3,042 ( 0.00%)              let (a, b) = self.overflowing_add(rhs);
    7,540 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    3,016 ( 0.00%)          }
        .           
        .                   /// Unchecked integer addition. Computes `self + rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self + rhs > ", stringify!($SelfT), "::MAX` or `self + rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 448 ----------------------------------------
-- line 456 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_add`.
1,226,155 ( 0.04%)              unsafe { intrinsics::unchecked_add(self, rhs) }
        .                   }
        .           
        .                   /// Checked addition with a signed integer. Computes `self + rhs`,
        .                   /// returning `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 472 ----------------------------------------
-- line 525 ----------------------------------------
        .                   )]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_unstable(feature = "const_inherent_unchecked_arith", issue = "85122")]
        .                   #[inline(always)]
        .                   pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {
        .                       // SAFETY: the caller must uphold the safety contract for
        .                       // `unchecked_sub`.
   74,577 ( 0.00%)              unsafe { intrinsics::unchecked_sub(self, rhs) }
        .                   }
        .           
        .                   /// Checked integer multiplication. Computes `self * rhs`, returning
        .                   /// `None` if overflow occurred.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 541 ----------------------------------------
-- line 544 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".checked_mul(1), Some(5));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.checked_mul(2), None);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_checked_int_methods", since = "1.47.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
    5,688 ( 0.00%)          pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    3,792 ( 0.00%)              let (a, b) = self.overflowing_mul(rhs);
    9,480 ( 0.00%)              if unlikely!(b) {None} else {Some(a)}
    3,792 ( 0.00%)          }
        .           
        .                   /// Unchecked integer multiplication. Computes `self * rhs`, assuming overflow
        .                   /// cannot occur.
        .                   ///
        .                   /// # Safety
        .                   ///
        .                   /// This results in undefined behavior when
        .                   #[doc = concat!("`self * rhs > ", stringify!($SelfT), "::MAX` or `self * rhs < ", stringify!($SelfT), "::MIN`,")]
-- line 563 ----------------------------------------
-- line 596 ----------------------------------------
        .                                 without modifying the original"]
        .                   #[inline]
        .                   pub const fn checked_div(self, rhs: Self) -> Option<Self> {
        .                       if unlikely!(rhs == 0) {
        .                           None
        .                       } else {
        .                           // SAFETY: div by zero has been checked above and unsigned types have no other
        .                           // failure modes for division
    2,040 ( 0.00%)                  Some(unsafe { intrinsics::unchecked_div(self, rhs) })
        .                       }
        .                   }
        .           
        .                   /// Checked Euclidean division. Computes `self.div_euclid(rhs)`, returning `None`
        .                   /// if `rhs == 0`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 612 ----------------------------------------
-- line 1035 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.saturating_add(127), ", stringify!($SelfT), "::MAX);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_add(self, rhs: Self) -> Self {
  175,073 ( 0.01%)              intrinsics::saturating_add(self, rhs)
       10 ( 0.00%)          }
        .           
        .                   /// Saturating addition with a signed integer. Computes `self + rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
        .                   ///
-- line 1052 ----------------------------------------
-- line 1084 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(13", stringify!($SelfT), ".saturating_sub(127), 0);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[rustc_const_stable(feature = "const_saturating_int_methods", since = "1.47.0")]
        .                   #[inline(always)]
        .                   pub const fn saturating_sub(self, rhs: Self) -> Self {
    8,773 ( 0.00%)              intrinsics::saturating_sub(self, rhs)
        .                   }
        .           
        .                   /// Saturating integer multiplication. Computes `self * rhs`,
        .                   /// saturating at the numeric bounds instead of overflowing.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1100 ----------------------------------------
-- line 1175 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(200", stringify!($SelfT), ".wrapping_add(", stringify!($SelfT), "::MAX), 199);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_add(self, rhs: Self) -> Self {
2,594,893 ( 0.09%)              intrinsics::wrapping_add(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) addition with a signed integer. Computes
        .                   /// `self + rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(100", stringify!($SelfT), ".wrapping_sub(", stringify!($SelfT), "::MAX), 101);")]
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_sub(self, rhs: Self) -> Self {
2,070,459 ( 0.07%)              intrinsics::wrapping_sub(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) multiplication. Computes `self *
        .                   /// rhs`, wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
        .                   /// Basic usage:
-- line 1233 ----------------------------------------
-- line 1240 ----------------------------------------
        .                   /// assert_eq!(25u8.wrapping_mul(12), 44);
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_mul(self, rhs: Self) -> Self {
7,908,445 ( 0.26%)              intrinsics::wrapping_mul(self, rhs)
        .                   }
        .           
        .                   /// Wrapping (modular) division. Computes `self / rhs`.
        .                   /// Wrapped division on unsigned types is just normal division.
        .                   /// There's no way wrapping could ever happen.
        .                   /// This function exists, so that all operations
        .                   /// are accounted for in the wrapping operations.
        .                   ///
-- line 1256 ----------------------------------------
-- line 1397 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shl(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
       24 ( 0.00%)                  intrinsics::unchecked_shl(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Panic-free bitwise shift-right; yields `self >> mask(rhs)`,
        .                   /// where `mask` removes any high-order bits of `rhs` that
        .                   /// would cause the shift to exceed the bitwidth of the type.
        .                   ///
        .                   /// Note that this is *not* the same as a rotate-right; the
-- line 1413 ----------------------------------------
-- line 1429 ----------------------------------------
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn wrapping_shr(self, rhs: u32) -> Self {
        .                       // SAFETY: the masking by the bitsize of the type ensures that we do not shift
        .                       // out of bounds
        .                       unsafe {
        9 ( 0.00%)                  intrinsics::unchecked_shr(self, (rhs & ($BITS - 1)) as $SelfT)
        .                       }
        .                   }
        .           
        .                   /// Wrapping (modular) exponentiation. Computes `self.pow(exp)`,
        .                   /// wrapping around at the boundary of the type.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 1445 ----------------------------------------
-- line 1491 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_add(2), (7, false));")]
        .                   #[doc = concat!("assert_eq!(", stringify!($SelfT), "::MAX.overflowing_add(1), (0, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
       29 ( 0.00%)          pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
  736,877 ( 0.02%)              let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    1,508 ( 0.00%)              (a as Self, b)
    3,074 ( 0.00%)          }
        .           
        .                   /// Calculates `self + rhs + carry` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary addition" which takes in an extra bit to add, and may return an
        .                   /// additional bit of overflow. This allows for chaining together multiple additions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   #[doc = concat!("This can be thought of as a ", stringify!($BITS), "-bit \"full adder\", in the electronics sense.")]
-- line 1510 ----------------------------------------
-- line 1587 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(5", stringify!($SelfT), ".overflowing_sub(2), (3, false));")]
        .                   #[doc = concat!("assert_eq!(0", stringify!($SelfT), ".overflowing_sub(1), (", stringify!($SelfT), "::MAX, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        3 ( 0.00%)          pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
  263,639 ( 0.01%)              let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
        .                       (a as Self, b)
        6 ( 0.00%)          }
        .           
        .                   /// Calculates `self - rhs - borrow` without the ability to overflow.
        .                   ///
        .                   /// Performs "ternary subtraction" which takes in an extra bit to subtract, and may return
        .                   /// an additional bit of overflow. This allows for chaining together multiple subtractions
        .                   /// to create "big integers" which represent larger values.
        .                   ///
        .                   /// # Examples
-- line 1606 ----------------------------------------
-- line 1673 ----------------------------------------
        .                   /// assert_eq!(5u32.overflowing_mul(2), (10, false));
        .                   /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                     without modifying the original"]
        .                   #[inline(always)]
        4 ( 0.00%)          pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
1,214,102 ( 0.04%)              let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    1,896 ( 0.00%)              (a as Self, b)
    3,794 ( 0.00%)          }
        .           
        .                   /// Calculates the divisor when `self` is divided by `rhs`.
        .                   ///
        .                   /// Returns a tuple of the divisor along with a boolean indicating
        .                   /// whether an arithmetic overflow would occur. Note that for unsigned
        .                   /// integers overflow never occurs, so the second value is always
        .                   /// `false`.
        .                   ///
-- line 1692 ----------------------------------------
-- line 1863 ----------------------------------------
        .                   #[doc = concat!("assert_eq!(0x10", stringify!($SelfT), ".overflowing_shr(132), (0x1, true));")]
        .                   /// ```
        .                   #[stable(feature = "wrapping", since = "1.7.0")]
        .                   #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline(always)]
        .                   pub const fn overflowing_shr(self, rhs: u32) -> (Self, bool) {
        2 ( 0.00%)              (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))
        .                   }
        .           
        .                   /// Raises self to the power of `exp`, using exponentiation by squaring.
        .                   ///
        .                   /// Returns a tuple of the exponentiation along with a bool indicating
        .                   /// whether an overflow happened.
        .                   ///
        .                   /// # Examples
-- line 1879 ----------------------------------------
-- line 2132 ----------------------------------------
        .                   #[doc = concat!("assert!(16", stringify!($SelfT), ".is_power_of_two());")]
        .                   #[doc = concat!("assert!(!10", stringify!($SelfT), ".is_power_of_two());")]
        .                   /// ```
        .                   #[must_use]
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_is_power_of_two", since = "1.32.0")]
        .                   #[inline(always)]
        .                   pub const fn is_power_of_two(self) -> bool {
      864 ( 0.00%)              self.count_ones() == 1
        .                   }
        .           
        .                   // Returns one less than next power of two.
        .                   // (For 8u8 next power of two is 8u8 and for 6u8 it is 8u8)
        .                   //
        .                   // 8u8.one_less_than_next_power_of_two() == 7
        .                   // 6u8.one_less_than_next_power_of_two() == 7
        .                   //
        .                   // This method cannot overflow, as in the `next_power_of_two`
        .                   // overflow cases it instead ends up returning the maximum value
        .                   // of the type, and can return 0 for 0.
        .                   #[inline]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   const fn one_less_than_next_power_of_two(self) -> Self {
   10,442 ( 0.00%)              if self <= 1 { return 0; }
        .           
   21,360 ( 0.00%)              let p = self - 1;
        .                       // SAFETY: Because `p > 0`, it cannot consist entirely of leading zeros.
        .                       // That means the shift is always in-bounds, and some processors
        .                       // (such as intel pre-haswell) have more efficient ctlz
        .                       // intrinsics when the argument is non-zero.
   63,951 ( 0.00%)              let z = unsafe { intrinsics::ctlz_nonzero(p) };
   21,321 ( 0.00%)              <$SelfT>::MAX >> z
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `self`.
        .                   ///
        .                   /// When return value overflows (i.e., `self > (1 << (N-1))` for type
        .                   /// `uN`), it panics in debug mode and the return value is wrapped to 0 in
        .                   /// release mode (the only situation in which method can return 0).
        .                   ///
-- line 2171 ----------------------------------------
-- line 2179 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_const_stable(feature = "const_int_pow", since = "1.50.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
        .                   #[rustc_inherit_overflow_checks]
        .                   pub const fn next_power_of_two(self) -> Self {
   32,194 ( 0.00%)              self.one_less_than_next_power_of_two() + 1
        .                   }
        .           
        .                   /// Returns the smallest power of two greater than or equal to `n`. If
        .                   /// the next power of two is greater than the type's maximum value,
        .                   /// `None` is returned, otherwise the power of two is wrapped in `Some`.
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2195 ----------------------------------------
-- line 2264 ----------------------------------------
        .                   #[doc = concat!("let bytes = ", $swap_op, stringify!($SelfT), ".to_le_bytes();")]
        .                   #[doc = concat!("assert_eq!(bytes, ", $le_bytes, ");")]
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   #[inline]
       15 ( 0.00%)          pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {
       12 ( 0.00%)              self.to_le().to_ne_bytes()
        9 ( 0.00%)          }
        .           
        .                   /// Return the memory representation of this integer as a byte array in
        .                   /// native byte order.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// should use [`to_be_bytes`] or [`to_le_bytes`], as appropriate,
        .                   /// instead.
        .                   ///
-- line 2282 ----------------------------------------
-- line 2300 ----------------------------------------
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use = "this returns the result of the operation, \
        .                                 without modifying the original"]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute them to arrays of bytes
        .                   #[inline]
        6 ( 0.00%)          pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute them to
        .                       // arrays of bytes
        3 ( 0.00%)              unsafe { mem::transmute(self) }
        9 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its representation
        .                   /// as a byte array in big endian.
        .                   ///
        .                   #[doc = $from_xe_bytes_doc]
        .                   ///
        .                   /// # Examples
        .                   ///
-- line 2320 ----------------------------------------
-- line 2360 ----------------------------------------
        .                   ///     *input = rest;
        .                   #[doc = concat!("    ", stringify!($SelfT), "::from_le_bytes(int_bytes.try_into().unwrap())")]
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   #[inline]
       12 ( 0.00%)          pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
       15 ( 0.00%)              Self::from_le(Self::from_ne_bytes(bytes))
        6 ( 0.00%)          }
        .           
        .                   /// Create a native endian integer value from its memory representation
        .                   /// as a byte array in native endianness.
        .                   ///
        .                   /// As the target platform's native endianness is used, portable code
        .                   /// likely wants to use [`from_be_bytes`] or [`from_le_bytes`], as
        .                   /// appropriate instead.
        .                   ///
-- line 2378 ----------------------------------------
-- line 2402 ----------------------------------------
        .                   /// }
        .                   /// ```
        .                   #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        .                   #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        .                   #[must_use]
        .                   // SAFETY: const sound because integers are plain old datatypes so we can always
        .                   // transmute to them
        .                   #[inline]
       12 ( 0.00%)          pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
        .                       // SAFETY: integers are plain old datatypes so we can always transmute to them
       18 ( 0.00%)              unsafe { mem::transmute(bytes) }
        6 ( 0.00%)          }
        .           
        .                   /// New code should prefer to use
        .                   #[doc = concat!("[`", stringify!($SelfT), "::MIN", "`] instead.")]
        .                   ///
        .                   /// Returns the smallest value that can be represented by this integer type.
        .                   #[stable(feature = "rust1", since = "1.0.0")]
        .                   #[rustc_promotable]
        .                   #[inline(always)]
-- line 2421 ----------------------------------------

   94,086 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/num/uint_macros.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs
--------------------------------------------------------------------------------
Ir                 

-- line 5 ----------------------------------------
        .           #[stable(feature = "alloc_system_type", since = "1.28.0")]
        .           unsafe impl GlobalAlloc for System {
        .               #[inline]
        .               unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
        .                   // jemalloc provides alignment less than MIN_ALIGN for small allocations.
        .                   // So only rely on MIN_ALIGN if size >= align.
        .                   // Also see <https://github.com/rust-lang/rust/issues/45955> and
        .                   // <https://github.com/rust-lang/rust/issues/62251#issuecomment-507580914>.
2,413,718 ( 0.08%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
1,810,287 ( 0.06%)              libc::malloc(layout.size()) as *mut u8
        .                   } else {
        .                       #[cfg(target_os = "macos")]
        .                       {
        .                           if layout.align() > (1 << 31) {
        .                               return ptr::null_mut();
        .                           }
        .                       }
        .                       aligned_malloc(&layout)
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
        .                   // See the comment above in `alloc` for why this check looks the way it does.
   77,144 ( 0.00%)          if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {
  115,716 ( 0.00%)              libc::calloc(layout.size(), 1) as *mut u8
        .                   } else {
        .                       let ptr = self.alloc(layout);
        .                       if !ptr.is_null() {
        .                           ptr::write_bytes(ptr, 0, layout.size());
        .                       }
        .                       ptr
        .                   }
        .               }
        .           
        .               #[inline]
        .               unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {
  622,704 ( 0.02%)          libc::free(ptr as *mut libc::c_void)
        .               }
        .           
        .               #[inline]
        .               unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
  239,032 ( 0.01%)          if layout.align() <= MIN_ALIGN && layout.align() <= new_size {
  478,064 ( 0.02%)              libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8
        .                   } else {
        .                       realloc_fallback(self, ptr, layout, new_size)
        .                   }
        .               }
        .           }
        .           
        .           cfg_if::cfg_if! {
        .               if #[cfg(any(
-- line 56 ----------------------------------------
-- line 84 ----------------------------------------
        .               } else if #[cfg(target_os = "wasi")] {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        .                       libc::aligned_alloc(layout.align(), layout.size()) as *mut u8
        .                   }
        .               } else {
        .                   #[inline]
        .                   unsafe fn aligned_malloc(layout: &Layout) -> *mut u8 {
        1 ( 0.00%)              let mut out = ptr::null_mut();
        .                       // posix_memalign requires that the alignment be a multiple of `sizeof(void*)`.
        .                       // Since these are all powers of 2, we can just use max.
        .                       let align = layout.align().max(crate::mem::size_of::<usize>());
        2 ( 0.00%)              let ret = libc::posix_memalign(&mut out, align, layout.size());
        2 ( 0.00%)              if ret != 0 { ptr::null_mut() } else { out as *mut u8 }
        .                   }
        .               }
        .           }

        1 ( 0.00%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/std/src/sys/unix/alloc.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs
--------------------------------------------------------------------------------
Ir                 

-- line 176 ----------------------------------------
        .               }
        .               fn sess(self) -> Option<&'tcx Session> {
        .                   None
        .               }
        .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
        .                   None
        .               }
        .           
   23,955 ( 0.00%)      fn decoder(self, pos: usize) -> DecodeContext<'a, 'tcx> {
    7,985 ( 0.00%)          let tcx = self.tcx();
  960,650 ( 0.03%)          DecodeContext {
  105,814 ( 0.00%)              opaque: opaque::Decoder::new(self.blob(), pos),
    7,985 ( 0.00%)              cdata: self.cdata(),
        .                       blob: self.blob(),
   39,986 ( 0.00%)              sess: self.sess().or(tcx.map(|tcx| tcx.sess)),
        .                       tcx,
        .                       last_source_file_index: 0,
        .                       lazy_state: LazyState::NoNode,
        .                       alloc_decoding_session: self
        .                           .cdata()
   92,281 ( 0.00%)                  .map(|cdata| cdata.cdata.alloc_decoding_state.new_decoding_session()),
        .                   }
   23,955 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Metadata<'a, 'tcx> for &'a MetadataBlob {
        .               #[inline]
        .               fn blob(self) -> &'a MetadataBlob {
        .                   self
        .               }
        .           }
-- line 206 ----------------------------------------
-- line 255 ----------------------------------------
        .               }
        .               #[inline]
        .               fn tcx(self) -> Option<TyCtxt<'tcx>> {
        .                   Some(self.1)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<T> {
  143,944 ( 0.00%)      fn decode<M: Metadata<'a, 'tcx>>(self, metadata: M) -> T {
   91,037 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
  282,547 ( 0.01%)          dcx.lazy_state = LazyState::NodeStart(self.position);
   88,311 ( 0.00%)          T::decode(&mut dcx)
  184,238 ( 0.01%)      }
        .           }
        .           
        .           impl<'a: 'x, 'tcx: 'x, 'x, T: Decodable<DecodeContext<'a, 'tcx>>> Lazy<[T]> {
        .               fn decode<M: Metadata<'a, 'tcx>>(
        .                   self,
        .                   metadata: M,
        .               ) -> impl ExactSizeIterator<Item = T> + Captures<'a> + Captures<'tcx> + 'x {
    1,134 ( 0.00%)          let mut dcx = metadata.decoder(self.position.get());
      324 ( 0.00%)          dcx.lazy_state = LazyState::NodeStart(self.position);
  216,783 ( 0.01%)          (0..self.meta).map(move |_| T::decode(&mut dcx))
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> DecodeContext<'a, 'tcx> {
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   debug_assert!(self.tcx.is_some(), "missing TyCtxt in DecodeContext");
        .                   self.tcx.unwrap()
-- line 285 ----------------------------------------
-- line 292 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn cdata(&self) -> CrateMetadataRef<'a> {
        .                   debug_assert!(self.cdata.is_some(), "missing CrateMetadata in DecodeContext");
        .                   self.cdata.unwrap()
        .               }
        .           
        .               fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {
  424,332 ( 0.01%)          if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }
        .               }
        .           
  160,749 ( 0.01%)      fn read_lazy_with_meta<T: ?Sized + LazyMeta>(&mut self, meta: T::Meta) -> Lazy<T> {
        .                   let distance = self.read_usize();
  154,889 ( 0.01%)          let position = match self.lazy_state {
        .                       LazyState::NoNode => bug!("read_lazy_with_meta: outside of a metadata node"),
   20,723 ( 0.00%)              LazyState::NodeStart(start) => {
        .                           let start = start.get();
   41,446 ( 0.00%)                  assert!(distance <= start);
        .                           start - distance
        .                       }
   55,632 ( 0.00%)              LazyState::Previous(last_pos) => last_pos.get() + distance,
        .                   };
   78,534 ( 0.00%)          self.lazy_state = LazyState::Previous(NonZeroUsize::new(position).unwrap());
        .                   Lazy::from_position_and_meta(NonZeroUsize::new(position).unwrap(), meta)
  160,749 ( 0.01%)      }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {
        .                   self.opaque.read_raw_bytes(len)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {
-- line 324 ----------------------------------------
-- line 326 ----------------------------------------
        .           
        .               #[inline]
        .               fn tcx(&self) -> TyCtxt<'tcx> {
        .                   self.tcx.expect("missing TyCtxt in DecodeContext")
        .               }
        .           
        .               #[inline]
        .               fn peek_byte(&self) -> u8 {
  816,815 ( 0.03%)          self.opaque.data[self.opaque.position()]
        .               }
        .           
        .               #[inline]
        .               fn position(&self) -> usize {
        .                   self.opaque.position()
        .               }
        .           
  745,325 ( 0.02%)      fn cached_ty_for_shorthand<F>(&mut self, shorthand: usize, or_insert_with: F) -> Ty<'tcx>
        .               where
        .                   F: FnOnce(&mut Self) -> Ty<'tcx>,
        .               {
  106,475 ( 0.00%)          let tcx = self.tcx();
        .           
  106,475 ( 0.00%)          let key = ty::CReaderCacheKey { cnum: Some(self.cdata().cnum), pos: shorthand };
        .           
  353,648 ( 0.01%)          if let Some(&ty) = tcx.ty_rcache.borrow().get(&key) {
        .                       return ty;
        .                   }
        .           
   18,063 ( 0.00%)          let ty = or_insert_with(self);
        .                   tcx.ty_rcache.borrow_mut().insert(key, ty);
        .                   ty
  958,275 ( 0.03%)      }
        .           
        .               fn with_position<F, R>(&mut self, pos: usize, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   let new_opaque = opaque::Decoder::new(self.opaque.data, pos);
        .                   let old_opaque = mem::replace(&mut self.opaque, new_opaque);
        .                   let old_state = mem::replace(&mut self.lazy_state, LazyState::NoNode);
        .                   let r = f(self);
   96,210 ( 0.00%)          self.opaque = old_opaque;
   19,242 ( 0.00%)          self.lazy_state = old_state;
        .                   r
        .               }
        .           
        .               fn decode_alloc_id(&mut self) -> rustc_middle::mir::interpret::AllocId {
        .                   if let Some(alloc_decoding_session) = self.alloc_decoding_session {
        .                       alloc_decoding_session.decode_alloc_id(self)
        .                   } else {
        .                       bug!("Attempting to decode interpret::AllocId without CrateMetadata")
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for CrateNum {
        .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> CrateNum {
  306,824 ( 0.01%)          let cnum = CrateNum::from_u32(d.read_u32());
        .                   d.map_encoded_cnum_to_current(cnum)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for DefIndex {
      984 ( 0.00%)      fn decode(d: &mut DecodeContext<'a, 'tcx>) -> DefIndex {
  491,201 ( 0.02%)          DefIndex::from_u32(d.read_u32())
    1,968 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnIndex {
        .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> ExpnIndex {
        .                   ExpnIndex::from_u32(d.read_u32())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for SyntaxContext {
  266,660 ( 0.01%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> SyntaxContext {
   66,665 ( 0.00%)          let cdata = decoder.cdata();
   66,665 ( 0.00%)          let sess = decoder.sess.unwrap();
  133,330 ( 0.00%)          let cname = cdata.root.name;
        .                   rustc_span::hygiene::decode_syntax_context(decoder, &cdata.hygiene_context, |_, id| {
        .                       debug!("SpecializedDecoder<SyntaxContext>: decoding {}", id);
    5,604 ( 0.00%)              cdata
        .                           .root
        .                           .syntax_contexts
        .                           .get(cdata, id)
        .                           .unwrap_or_else(|| panic!("Missing SyntaxContext {:?} for crate {:?}", id, cname))
        .                           .decode((cdata, sess))
        .                   })
  333,325 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for ExpnId {
   25,718 ( 0.00%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> ExpnId {
    3,674 ( 0.00%)          let local_cdata = decoder.cdata();
    3,674 ( 0.00%)          let sess = decoder.sess.unwrap();
        .           
        .                   let cnum = CrateNum::decode(decoder);
        .                   let index = u32::decode(decoder);
        .           
        .                   let expn_id = rustc_span::hygiene::decode_expn_id(cnum, index, |expn_id| {
        .                       let ExpnId { krate: cnum, local_id: index } = expn_id;
        .                       // Lookup local `ExpnData`s in our own crate data. Foreign `ExpnData`s
        .                       // are stored in the owning crate, to avoid duplication.
        .                       debug_assert_ne!(cnum, LOCAL_CRATE);
    1,483 ( 0.00%)              let crate_data = if cnum == local_cdata.cnum {
        .                           local_cdata
        .                       } else {
        .                           local_cdata.cstore.get_crate_data(cnum)
        .                       };
    7,415 ( 0.00%)              let expn_data = crate_data
        .                           .root
        .                           .expn_data
        .                           .get(crate_data, index)
        .                           .unwrap()
        .                           .decode((crate_data, sess));
    7,415 ( 0.00%)              let expn_hash = crate_data
        .                           .root
        .                           .expn_hashes
        .                           .get(crate_data, index)
        .                           .unwrap()
        .                           .decode((crate_data, sess));
   14,830 ( 0.00%)              (expn_data, expn_hash)
        .                   });
        .                   expn_id
   29,392 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for Span {
  499,696 ( 0.02%)      fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Span {
   62,462 ( 0.00%)          let ctxt = SyntaxContext::decode(decoder);
        .                   let tag = u8::decode(decoder);
        .           
  124,924 ( 0.00%)          if tag == TAG_PARTIAL_SPAN {
        .                       return DUMMY_SP.with_ctxt(ctxt);
        .                   }
        .           
        .                   debug_assert!(tag == TAG_VALID_SPAN_LOCAL || tag == TAG_VALID_SPAN_FOREIGN);
        .           
        .                   let lo = BytePos::decode(decoder);
        .                   let len = BytePos::decode(decoder);
        .                   let hi = lo + len;
        .           
  186,903 ( 0.01%)          let Some(sess) = decoder.sess else {
        .                       bug!("Cannot decode Span without Session.")
        .                   };
        .           
        .                   // There are two possibilities here:
        .                   // 1. This is a 'local span', which is located inside a `SourceFile`
        .                   // that came from this crate. In this case, we use the source map data
        .                   // encoded in this crate. This branch should be taken nearly all of the time.
        .                   // 2. This is a 'foreign span', which is located inside a `SourceFile`
-- line 476 ----------------------------------------
-- line 492 ----------------------------------------
        .                   // a transitive dependency.
        .                   //
        .                   // When we encode a foreign span, we adjust its 'lo' and 'high' values
        .                   // to be based on the *foreign* crate (e.g. crate C), not the crate
        .                   // we are writing metadata for (e.g. crate B). This allows us to
        .                   // treat the 'local' and 'foreign' cases almost identically during deserialization:
        .                   // we can call `imported_source_files` for the proper crate, and binary search
        .                   // through the returned slice using our span.
  137,611 ( 0.00%)          let imported_source_files = if tag == TAG_VALID_SPAN_LOCAL {
        .                       decoder.cdata().imported_source_files(sess)
        .                   } else {
        .                       // When we encode a proc-macro crate, all `Span`s should be encoded
        .                       // with `TAG_VALID_SPAN_LOCAL`
    2,405 ( 0.00%)              if decoder.cdata().root.is_proc_macro_crate() {
        .                           // Decode `CrateNum` as u32 - using `CrateNum::decode` will ICE
        .                           // since we don't have `cnum_map` populated.
        .                           let cnum = u32::decode(decoder);
        .                           panic!(
        .                               "Decoding of crate {:?} tried to access proc-macro dep {:?}",
        .                               decoder.cdata().root.name,
        .                               cnum
        .                           );
-- line 513 ----------------------------------------
-- line 518 ----------------------------------------
        .                           "SpecializedDecoder<Span>::specialized_decode: loading source files from cnum {:?}",
        .                           cnum
        .                       );
        .           
        .                       // Decoding 'foreign' spans should be rare enough that it's
        .                       // not worth it to maintain a per-CrateNum cache for `last_source_file_index`.
        .                       // We just set it to 0, to ensure that we don't try to access something out
        .                       // of bounds for our initial 'guess'
    4,810 ( 0.00%)              decoder.last_source_file_index = 0;
        .           
    2,405 ( 0.00%)              let foreign_data = decoder.cdata().cstore.get_crate_data(cnum);
        .                       foreign_data.imported_source_files(sess)
        .                   };
        .           
        .                   let source_file = {
        .                       // Optimize for the case that most spans within a translated item
        .                       // originate from the same source_file.
  186,903 ( 0.01%)              let last_source_file = &imported_source_files[decoder.last_source_file_index];
        .           
  248,647 ( 0.01%)              if lo >= last_source_file.original_start_pos && lo <= last_source_file.original_end_pos
        .                       {
        .                           last_source_file
        .                       } else {
        .                           let index = imported_source_files
        .                               .binary_search_by_key(&lo, |source_file| source_file.original_start_pos)
   25,998 ( 0.00%)                      .unwrap_or_else(|index| index - 1);
        .           
        .                           // Don't try to cache the index for foreign spans,
        .                           // as this would require a map from CrateNums to indices
   13,009 ( 0.00%)                  if tag == TAG_VALID_SPAN_LOCAL {
   12,473 ( 0.00%)                      decoder.last_source_file_index = index;
        .                           }
   26,018 ( 0.00%)                  &imported_source_files[index]
        .                       }
        .                   };
        .           
        .                   // Make sure our binary search above is correct.
        .                   debug_assert!(
        .                       lo >= source_file.original_start_pos && lo <= source_file.original_end_pos,
        .                       "Bad binary search: lo={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
        .                       lo,
-- line 558 ----------------------------------------
-- line 565 ----------------------------------------
        .                       hi >= source_file.original_start_pos && hi <= source_file.original_end_pos,
        .                       "Bad binary search: hi={:?} source_file.original_start_pos={:?} source_file.original_end_pos={:?}",
        .                       hi,
        .                       source_file.original_start_pos,
        .                       source_file.original_end_pos
        .                   );
        .           
        .                   let lo =
  249,204 ( 0.01%)              (lo + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
        .                   let hi =
        .                       (hi + source_file.translated_source_file.start_pos) - source_file.original_start_pos;
        .           
        .                   // Do not try to decode parent for foreign spans.
        .                   Span::new(lo, hi, ctxt, None)
  562,158 ( 0.02%)      }
        .           }
        .           
        .           impl<'a, 'tcx> Decodable<DecodeContext<'a, 'tcx>> for &'tcx [thir::abstract_const::Node<'tcx>] {
        .               fn decode(d: &mut DecodeContext<'a, 'tcx>) -> Self {
        .                   ty::codec::RefDecodable::decode(d)
        .               }
        .           }
        .           
-- line 587 ----------------------------------------
-- line 590 ----------------------------------------
        .                   ty::codec::RefDecodable::decode(d)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
        .               for Lazy<T>
        .           {
        .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
   36,859 ( 0.00%)          decoder.read_lazy_with_meta(())
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
        .               for Lazy<[T]>
        .           {
        .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
        .                   let len = decoder.read_usize();
   59,618 ( 0.00%)          if len == 0 { Lazy::empty() } else { decoder.read_lazy_with_meta(len) }
        .               }
        .           }
        .           
        .           impl<'a, 'tcx, I: Idx, T: Decodable<DecodeContext<'a, 'tcx>>> Decodable<DecodeContext<'a, 'tcx>>
        .               for Lazy<Table<I, T>>
        .           where
        .               Option<T>: FixedSizeEncoding,
        .           {
        .               fn decode(decoder: &mut DecodeContext<'a, 'tcx>) -> Self {
        .                   let len = decoder.read_usize();
   70,304 ( 0.00%)          decoder.read_lazy_with_meta(len)
        .               }
        .           }
        .           
        .           implement_ty_decoder!(DecodeContext<'a, 'tcx>);
        .           
        .           impl<'tcx> MetadataBlob {
        .               crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {
        .                   MetadataBlob(Lrc::new(metadata_ref))
-- line 626 ----------------------------------------
-- line 630 ----------------------------------------
        .                   self.blob().starts_with(METADATA_HEADER)
        .               }
        .           
        .               crate fn get_rustc_version(&self) -> String {
        .                   Lazy::<String>::from_position(NonZeroUsize::new(METADATA_HEADER.len() + 4).unwrap())
        .                       .decode(self)
        .               }
        .           
    1,248 ( 0.00%)      crate fn get_root(&self) -> CrateRoot<'tcx> {
      416 ( 0.00%)          let slice = &self.blob()[..];
        .                   let offset = METADATA_HEADER.len();
    2,080 ( 0.00%)          let pos = (((slice[offset + 0] as u32) << 24)
      832 ( 0.00%)              | ((slice[offset + 1] as u32) << 16)
    1,664 ( 0.00%)              | ((slice[offset + 2] as u32) << 8)
    1,248 ( 0.00%)              | ((slice[offset + 3] as u32) << 0)) as usize;
        .                   Lazy::<CrateRoot<'tcx>>::from_position(NonZeroUsize::new(pos).unwrap()).decode(self)
    2,080 ( 0.00%)      }
        .           
        .               crate fn list_crate_metadata(&self, out: &mut dyn io::Write) -> io::Result<()> {
        .                   let root = self.get_root();
        .                   writeln!(out, "Crate info:")?;
        .                   writeln!(out, "name {}{}", root.name, root.extra_filename)?;
        .                   writeln!(out, "hash {} stable_crate_id {:?}", root.hash, root.stable_crate_id)?;
        .                   writeln!(out, "proc_macro {:?}", root.proc_macro_data.is_some())?;
        .                   writeln!(out, "=External Dependencies=")?;
-- line 654 ----------------------------------------
-- line 666 ----------------------------------------
        .                   }
        .                   write!(out, "\n")?;
        .                   Ok(())
        .               }
        .           }
        .           
        .           impl CrateRoot<'_> {
        .               crate fn is_proc_macro_crate(&self) -> bool {
      270 ( 0.00%)          self.proc_macro_data.is_some()
        .               }
        .           
        .               crate fn name(&self) -> Symbol {
       14 ( 0.00%)          self.name
        .               }
        .           
        .               crate fn hash(&self) -> Svh {
      137 ( 0.00%)          self.hash
        .               }
        .           
        .               crate fn stable_crate_id(&self) -> StableCrateId {
      286 ( 0.00%)          self.stable_crate_id
        .               }
        .           
        .               crate fn triple(&self) -> &TargetTriple {
        .                   &self.triple
        .               }
        .           
        .               crate fn decode_crate_deps<'a>(
        .                   &self,
        .                   metadata: &'a MetadataBlob,
        .               ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {
      266 ( 0.00%)          self.crate_deps.decode(metadata)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> CrateMetadataRef<'a> {
      357 ( 0.00%)      fn raw_proc_macro(self, id: DefIndex) -> &'a ProcMacro {
        .                   // DefIndex's in root.proc_macro_data have a one-to-one correspondence
        .                   // with items in 'raw_proc_macros'.
      102 ( 0.00%)          let pos = self
        .                       .root
        .                       .proc_macro_data
        .                       .as_ref()
        .                       .unwrap()
        .                       .macros
        .                       .decode(self)
        .                       .position(|i| i == id)
        .                       .unwrap();
      204 ( 0.00%)          &self.raw_proc_macros.unwrap()[pos]
      459 ( 0.00%)      }
        .           
   83,908 ( 0.00%)      fn opt_item_ident(self, item_index: DefIndex, sess: &Session) -> Option<Ident> {
   63,194 ( 0.00%)          let name = self.def_key(item_index).disambiguated_data.data.get_opt_name()?;
   43,645 ( 0.00%)          let span = match self.root.tables.ident_span.get(self, item_index) {
        .                       Some(lazy_span) => lazy_span.decode((self, sess)),
        .                       None => {
        .                           // FIXME: this weird case of a name with no span is specific to `extern crate`
        .                           // items, which are supposed to be treated like `use` items and only be encoded
        .                           // to metadata as `Export`s, return `None` because that's what all the callers
        .                           // expect in this case.
      459 ( 0.00%)                  assert_eq!(self.def_kind(item_index), DefKind::ExternCrate);
        .                           return None;
        .                       }
        .                   };
        .                   Some(Ident::new(name, span))
  107,660 ( 0.00%)      }
        .           
      936 ( 0.00%)      fn item_ident(self, item_index: DefIndex, sess: &Session) -> Ident {
   20,286 ( 0.00%)          self.opt_item_ident(item_index, sess).expect("no encoded ident for item")
    1,872 ( 0.00%)      }
        .           
        .               fn maybe_kind(self, item_id: DefIndex) -> Option<EntryKind> {
   36,786 ( 0.00%)          self.root.tables.kind.get(self, item_id).map(|k| k.decode(self))
        .               }
        .           
  147,144 ( 0.00%)      fn kind(self, item_id: DefIndex) -> EntryKind {
        .                   self.maybe_kind(item_id).unwrap_or_else(|| {
        .                       bug!(
        .                           "CrateMetadata::kind({:?}): id not found, in crate {:?} with number {}",
        .                           item_id,
        .                           self.root.name,
        .                           self.cnum,
        .                       )
        .                   })
  110,358 ( 0.00%)      }
        .           
   25,193 ( 0.00%)      fn def_kind(self, item_id: DefIndex) -> DefKind {
   23,491 ( 0.00%)          self.root.tables.def_kind.get(self, item_id).map(|k| k.decode(self)).unwrap_or_else(|| {
        .                       bug!(
        .                           "CrateMetadata::def_kind({:?}): id not found, in crate {:?} with number {}",
        .                           item_id,
        .                           self.root.name,
        .                           self.cnum,
        .                       )
        .                   })
   14,396 ( 0.00%)      }
        .           
    8,424 ( 0.00%)      fn get_span(self, index: DefIndex, sess: &Session) -> Span {
   14,403 ( 0.00%)          self.root
        .                       .tables
        .                       .span
        .                       .get(self, index)
        .                       .unwrap_or_else(|| panic!("Missing span for {:?}", index))
        .                       .decode((self, sess))
    4,680 ( 0.00%)      }
        .           
        .               fn load_proc_macro(self, id: DefIndex, sess: &Session) -> SyntaxExtension {
       48 ( 0.00%)          let (name, kind, helper_attrs) = match *self.raw_proc_macro(id) {
       30 ( 0.00%)              ProcMacro::CustomDerive { trait_name, attributes, client } => {
        .                           let helper_attrs =
        .                               attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();
        .                           (
        .                               trait_name,
        .                               SyntaxExtensionKind::Derive(Box::new(ProcMacroDerive { client })),
       18 ( 0.00%)                      helper_attrs,
        .                           )
        .                       }
        .                       ProcMacro::Attr { name, client } => {
        .                           (name, SyntaxExtensionKind::Attr(Box::new(AttrProcMacro { client })), Vec::new())
        .                       }
        .                       ProcMacro::Bang { name, client } => {
        .                           (name, SyntaxExtensionKind::Bang(Box::new(BangProcMacro { client })), Vec::new())
        .                       }
        .                   };
        .           
       15 ( 0.00%)          let attrs: Vec<_> = self.get_item_attrs(id, sess).collect();
       36 ( 0.00%)          SyntaxExtension::new(
        .                       sess,
       15 ( 0.00%)              kind,
        .                       self.get_span(id, sess),
       12 ( 0.00%)              helper_attrs,
        9 ( 0.00%)              self.root.edition,
        3 ( 0.00%)              Symbol::intern(name),
        .                       &attrs,
        .                   )
        .               }
        .           
    1,092 ( 0.00%)      fn get_trait_def(self, item_id: DefIndex, sess: &Session) -> ty::TraitDef {
      336 ( 0.00%)          match self.kind(item_id) {
       84 ( 0.00%)              EntryKind::Trait(data) => {
      504 ( 0.00%)                  let data = data.decode((self, sess));
    1,344 ( 0.00%)                  ty::TraitDef::new(
        .                               self.local_def_id(item_id),
      168 ( 0.00%)                      data.unsafety,
      168 ( 0.00%)                      data.paren_sugar,
      168 ( 0.00%)                      data.has_auto_impl,
      168 ( 0.00%)                      data.is_marker,
       84 ( 0.00%)                      data.skip_array_during_method_dispatch,
       84 ( 0.00%)                      data.specialization_kind,
      336 ( 0.00%)                      self.def_path_hash(item_id),
       84 ( 0.00%)                      data.must_implement_one_of,
        .                           )
        .                       }
        .                       EntryKind::TraitAlias => ty::TraitDef::new(
        .                           self.local_def_id(item_id),
        .                           hir::Unsafety::Normal,
        .                           false,
        .                           false,
        .                           false,
        .                           false,
        .                           ty::trait_def::TraitSpecializationKind::None,
        .                           self.def_path_hash(item_id),
        .                           None,
        .                       ),
        .                       _ => bug!("def-index does not refer to trait or trait alias"),
        .                   }
      756 ( 0.00%)      }
        .           
    6,354 ( 0.00%)      fn get_variant(
        .                   self,
        .                   kind: &EntryKind,
        .                   index: DefIndex,
        .                   parent_did: DefId,
        .                   sess: &Session,
        .               ) -> ty::VariantDef {
    2,824 ( 0.00%)          let data = match kind {
        .                       EntryKind::Variant(data) | EntryKind::Struct(data, _) | EntryKind::Union(data, _) => {
    3,530 ( 0.00%)                  data.decode(self)
        .                       }
        .                       _ => bug!(),
        .                   };
        .           
    2,006 ( 0.00%)          let adt_kind = match kind {
        .                       EntryKind::Variant(_) => ty::AdtKind::Enum,
        .                       EntryKind::Struct(..) => ty::AdtKind::Struct,
        .                       EntryKind::Union(..) => ty::AdtKind::Union,
        .                       _ => bug!(),
        .                   };
        .           
        .                   let variant_did =
        .                       if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };
    1,412 ( 0.00%)          let ctor_did = data.ctor.map(|index| self.local_def_id(index));
        .           
   15,532 ( 0.00%)          ty::VariantDef::new(
        .                       self.item_ident(index, sess).name,
        .                       variant_did,
        .                       ctor_did,
    2,824 ( 0.00%)              data.discr,
    4,236 ( 0.00%)              self.root
        .                           .tables
        .                           .children
        .                           .get(self, index)
        .                           .unwrap_or_else(Lazy::empty)
        .                           .decode(self)
        .                           .map(|index| ty::FieldDef {
      729 ( 0.00%)                      did: self.local_def_id(index),
    1,458 ( 0.00%)                      name: self.item_ident(index, sess).name,
    1,458 ( 0.00%)                      vis: self.get_visibility(index),
        .                           })
        .                           .collect(),
        .                       data.ctor_kind,
        .                       adt_kind,
        .                       parent_did,
        .                       false,
      706 ( 0.00%)              data.is_non_exhaustive,
        .                   )
    6,354 ( 0.00%)      }
        .           
    5,580 ( 0.00%)      fn get_adt_def(self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {
    1,488 ( 0.00%)          let kind = self.kind(item_id);
      744 ( 0.00%)          let did = self.local_def_id(item_id);
        .           
    1,710 ( 0.00%)          let (adt_kind, repr) = match kind {
        .                       EntryKind::Enum(repr) => (ty::AdtKind::Enum, repr),
        .                       EntryKind::Struct(_, repr) => (ty::AdtKind::Struct, repr),
        .                       EntryKind::Union(_, repr) => (ty::AdtKind::Union, repr),
        .                       _ => bug!("get_adt_def called on a non-ADT {:?}", did),
        .                   };
        .           
        .                   let variants = if let ty::AdtKind::Enum = adt_kind {
      380 ( 0.00%)              self.root
        .                           .tables
        .                           .children
        .                           .get(self, item_id)
        .                           .unwrap_or_else(Lazy::empty)
        .                           .decode(self)
    6,970 ( 0.00%)                  .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))
        .                           .collect()
        .                   } else {
    2,368 ( 0.00%)              std::iter::once(self.get_variant(&kind, item_id, did, tcx.sess)).collect()
        .                   };
        .           
    5,588 ( 0.00%)          tcx.alloc_adt_def(did, adt_kind, variants, repr)
    2,604 ( 0.00%)      }
        .           
        .               fn get_explicit_predicates(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> ty::GenericPredicates<'tcx> {
    8,045 ( 0.00%)          self.root.tables.explicit_predicates.get(self, item_id).unwrap().decode((self, tcx))
        .               }
        .           
        .               fn get_inferred_outlives(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
    8,045 ( 0.00%)          self.root
        .                       .tables
        .                       .inferred_outlives
        .                       .get(self, item_id)
       44 ( 0.00%)              .map(|predicates| tcx.arena.alloc_from_iter(predicates.decode((self, tcx))))
        .                       .unwrap_or_default()
        .               }
        .           
        .               fn get_super_predicates(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> ty::GenericPredicates<'tcx> {
      455 ( 0.00%)          self.root.tables.super_predicates.get(self, item_id).unwrap().decode((self, tcx))
        .               }
        .           
        .               fn get_explicit_item_bounds(
        .                   self,
        .                   item_id: DefIndex,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> &'tcx [(ty::Predicate<'tcx>, Span)] {
       70 ( 0.00%)          self.root
        .                       .tables
        .                       .explicit_item_bounds
        .                       .get(self, item_id)
       56 ( 0.00%)              .map(|bounds| tcx.arena.alloc_from_iter(bounds.decode((self, tcx))))
        .                       .unwrap_or_default()
        .               }
        .           
        .               fn get_generics(self, item_id: DefIndex, sess: &Session) -> ty::Generics {
    9,361 ( 0.00%)          self.root.tables.generics.get(self, item_id).unwrap().decode((self, sess))
        .               }
        .           
        .               fn get_type(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
   25,670 ( 0.00%)          self.root
        .                       .tables
        .                       .ty
        .                       .get(self, id)
        .                       .unwrap_or_else(|| panic!("Not a type: {:?}", id))
        .                       .decode((self, tcx))
        .               }
        .           
        .               fn get_stability(self, id: DefIndex) -> Option<attr::Stability> {
      655 ( 0.00%)          self.root.tables.stability.get(self, id).map(|stab| stab.decode(self))
        .               }
        .           
        .               fn get_const_stability(self, id: DefIndex) -> Option<attr::ConstStability> {
        5 ( 0.00%)          self.root.tables.const_stability.get(self, id).map(|stab| stab.decode(self))
        .               }
        .           
        .               fn get_deprecation(self, id: DefIndex) -> Option<attr::Deprecation> {
    1,345 ( 0.00%)          self.root.tables.deprecation.get(self, id).map(|depr| depr.decode(self))
        .               }
        .           
      288 ( 0.00%)      fn get_visibility(self, id: DefIndex) -> ty::Visibility {
   19,646 ( 0.00%)          self.root.tables.visibility.get(self, id).unwrap().decode(self)
      192 ( 0.00%)      }
        .           
        .               fn get_impl_data(self, id: DefIndex) -> ImplData {
   74,400 ( 0.00%)          match self.kind(id) {
   62,000 ( 0.00%)              EntryKind::Impl(data) => data.decode(self),
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               fn get_parent_impl(self, id: DefIndex) -> Option<DefId> {
   35,358 ( 0.00%)          self.get_impl_data(id).parent_impl
        .               }
        .           
        .               fn get_impl_polarity(self, id: DefIndex) -> ty::ImplPolarity {
      452 ( 0.00%)          self.get_impl_data(id).polarity
        .               }
        .           
        .               fn get_impl_defaultness(self, id: DefIndex) -> hir::Defaultness {
      128 ( 0.00%)          self.get_impl_data(id).defaultness
        .               }
        .           
        .               fn get_impl_constness(self, id: DefIndex) -> hir::Constness {
       34 ( 0.00%)          self.get_impl_data(id).constness
        .               }
        .           
        .               fn get_trait_item_def_id(self, id: DefIndex) -> Option<DefId> {
   15,215 ( 0.00%)          self.root.tables.trait_item_def_id.get(self, id).map(|d| d.decode(self))
        .               }
        .           
        .               fn get_coerce_unsized_info(self, id: DefIndex) -> Option<ty::adjustment::CoerceUnsizedInfo> {
        .                   self.get_impl_data(id).coerce_unsized_info
        .               }
        .           
        .               fn get_impl_trait(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> Option<ty::TraitRef<'tcx>> {
  144,611 ( 0.00%)          self.root.tables.impl_trait_ref.get(self, id).map(|tr| tr.decode((self, tcx)))
        .               }
        .           
        .               fn get_expn_that_defined(self, id: DefIndex, sess: &Session) -> ExpnId {
    3,950 ( 0.00%)          self.root.tables.expn_that_defined.get(self, id).unwrap().decode((self, sess))
        .               }
        .           
        .               fn get_const_param_default(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   id: DefIndex,
        .               ) -> rustc_middle::ty::Const<'tcx> {
        .                   self.root.tables.const_defaults.get(self, id).unwrap().decode((self, tcx))
-- line 1026 ----------------------------------------
-- line 1028 ----------------------------------------
        .           
        .               /// Iterates over all the stability attributes in the given crate.
        .               fn get_lib_features(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Option<Symbol>)] {
        .                   tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))
        .               }
        .           
        .               /// Iterates over the language items in the given crate.
        .               fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {
      411 ( 0.00%)          tcx.arena.alloc_from_iter(
      274 ( 0.00%)              self.root
        .                           .lang_items
        .                           .decode(self)
      564 ( 0.00%)                  .map(|(def_index, index)| (self.local_def_id(def_index), index)),
        .                   )
        .               }
        .           
        .               /// Iterates over the diagnostic items in the given crate.
        .               fn get_diagnostic_items(self) -> DiagnosticItems {
        .                   let mut id_to_name = FxHashMap::default();
      274 ( 0.00%)          let name_to_id = self
        .                       .root
        .                       .diagnostic_items
        .                       .decode(self)
        .                       .map(|(name, def_index)| {
      130 ( 0.00%)                  let id = self.local_def_id(def_index);
      130 ( 0.00%)                  id_to_name.insert(id, name);
        .                           (name, id)
        .                       })
        .                       .collect();
    1,233 ( 0.00%)          DiagnosticItems { id_to_name, name_to_id }
        .               }
        .           
        .               /// Iterates over all named children of the given module,
        .               /// including both proper items and reexports.
        .               /// Module here is understood in name resolution sense - it can be a `mod` item,
        .               /// or a crate root, or an enum, or a trait.
        .               fn for_each_module_child(
        .                   self,
        .                   id: DefIndex,
        .                   mut callback: impl FnMut(ModChild),
        .                   sess: &Session,
        .               ) {
      436 ( 0.00%)          if let Some(data) = &self.root.proc_macro_data {
        .                       // If we are loading as a proc macro, we want to return
        .                       // the view of this crate as a proc macro crate.
        1 ( 0.00%)              if id == CRATE_DEF_INDEX {
       15 ( 0.00%)                  for def_index in data.macros.decode(self) {
      144 ( 0.00%)                      let raw_macro = self.raw_proc_macro(def_index);
        .                               let res = Res::Def(
        .                                   DefKind::Macro(macro_kind(raw_macro)),
        .                                   self.local_def_id(def_index),
        .                               );
        .                               let ident = self.item_ident(def_index, sess);
        .                               callback(ModChild {
        .                                   ident,
        .                                   res,
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
        .                                   span: ident.span,
        .                               });
        .                           }
        .                       }
        .                       return;
        .                   }
        .           
        .                   // Iterate over all children.
      864 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    1,728 ( 0.00%)              for child_index in children.decode((self, sess)) {
   17,112 ( 0.00%)                  if let Some(ident) = self.opt_item_ident(child_index, sess) {
    3,573 ( 0.00%)                      let kind = self.def_kind(child_index);
    2,382 ( 0.00%)                      if matches!(kind, DefKind::Macro(..)) {
        .                                   // FIXME: Macros are currently encoded twice, once as items and once as
        .                                   // reexports. We ignore the items here and only use the reexports.
        .                                   continue;
        .                               }
        .                               let def_id = self.local_def_id(child_index);
        .                               let res = Res::Def(kind, def_id);
        .                               let vis = self.get_visibility(child_index);
        .                               let span = self.get_span(child_index, sess);
        .           
        .                               callback(ModChild { ident, res, vis, span });
        .           
        .                               // For non-re-export structs and variants add their constructors to children.
        .                               // Re-export lists automatically contain constructors when necessary.
    4,624 ( 0.00%)                      match kind {
        .                                   DefKind::Struct => {
       54 ( 0.00%)                              if let Some((ctor_def_id, ctor_kind)) =
        .                                           self.get_ctor_def_id_and_kind(child_index)
        .                                       {
        .                                           let ctor_res =
        .                                               Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);
        .                                           let vis = self.get_visibility(ctor_def_id.index);
        .                                           callback(ModChild { ident, res: ctor_res, vis, span });
        .                                       }
        .                                   }
        .                                   DefKind::Variant => {
        .                                       // Braced variants, unlike structs, generate unusable names in
        .                                       // value namespace, they are reserved for possible future use.
        .                                       // It's ok to use the variant's id as a ctor id since an
        .                                       // error will be reported on any use of such resolution anyway.
      102 ( 0.00%)                              let (ctor_def_id, ctor_kind) = self
        .                                           .get_ctor_def_id_and_kind(child_index)
        .                                           .unwrap_or((def_id, CtorKind::Fictive));
        .                                       let ctor_res =
        .                                           Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);
        .                                       let mut vis = self.get_visibility(ctor_def_id.index);
       40 ( 0.00%)                              if ctor_def_id == def_id && vis.is_public() {
        .                                           // For non-exhaustive variants lower the constructor visibility to
        .                                           // within the crate. We only need this for fictive constructors,
        .                                           // for other constructors correct visibilities
        .                                           // were already encoded in metadata.
        6 ( 0.00%)                                  let mut attrs = self.get_item_attrs(def_id.index, sess);
        2 ( 0.00%)                                  if attrs.any(|item| item.has_name(sym::non_exhaustive)) {
        .                                               let crate_def_id = self.local_def_id(CRATE_DEF_INDEX);
        .                                               vis = ty::Visibility::Restricted(crate_def_id);
        .                                           }
        .                                       }
        .                                       callback(ModChild { ident, res: ctor_res, vis, span });
        .                                   }
        .                                   _ => {}
        .                               }
        .                           }
        .                       }
        .                   }
        .           
    1,046 ( 0.00%)          match self.kind(id) {
       98 ( 0.00%)              EntryKind::Mod(exports) => {
    3,476 ( 0.00%)                  for exp in exports.decode((self, sess)) {
        .                               callback(exp);
        .                           }
        .                       }
        .                       EntryKind::Enum(..) | EntryKind::Trait(..) => {}
        .                       _ => bug!("`for_each_module_child` is called on a non-module: {:?}", self.def_kind(id)),
        .                   }
        .               }
        .           
        .               fn is_ctfe_mir_available(self, id: DefIndex) -> bool {
      172 ( 0.00%)          self.root.tables.mir_for_ctfe.get(self, id).is_some()
        .               }
        .           
        .               fn is_item_mir_available(self, id: DefIndex) -> bool {
    1,144 ( 0.00%)          self.root.tables.mir.get(self, id).is_some()
        .               }
        .           
        .               fn module_expansion(self, id: DefIndex, sess: &Session) -> ExpnId {
    5,019 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::Mod(_) | EntryKind::Enum(_) | EntryKind::Trait(_) => {
        .                           self.get_expn_that_defined(id, sess)
        .                       }
        .                       _ => panic!("Expected module, found {:?}", self.local_def_id(id)),
        .                   }
        .               }
        .           
        .               fn get_optimized_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
    1,430 ( 0.00%)          self.root
        .                       .tables
        .                       .mir
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           bug!("get_optimized_mir: missing MIR for `{:?}`", self.local_def_id(id))
        .                       })
        .                       .decode((self, tcx))
        .               }
        .           
        .               fn get_mir_for_ctfe(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> Body<'tcx> {
      215 ( 0.00%)          self.root
        .                       .tables
        .                       .mir_for_ctfe
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           bug!("get_mir_for_ctfe: missing MIR for `{:?}`", self.local_def_id(id))
        .                       })
        .                       .decode((self, tcx))
        .               }
-- line 1200 ----------------------------------------
-- line 1216 ----------------------------------------
        .                       .tables
        .                       .unused_generic_params
        .                       .get(self, id)
        .                       .map(|params| params.decode(self))
        .                       .unwrap_or_default()
        .               }
        .           
        .               fn get_promoted_mir(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> IndexVec<Promoted, Body<'tcx>> {
       65 ( 0.00%)          self.root
        .                       .tables
        .                       .promoted_mir
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           bug!("get_promoted_mir: missing MIR for `{:?}`", self.local_def_id(id))
        .                       })
        .                       .decode((self, tcx))
        .               }
        .           
        .               fn mir_const_qualif(self, id: DefIndex) -> mir::ConstQualifs {
        8 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::AnonConst(qualif, _)
        .                       | EntryKind::Const(qualif, _)
        .                       | EntryKind::AssocConst(
        .                           AssocContainer::ImplDefault
        .                           | AssocContainer::ImplFinal
        .                           | AssocContainer::TraitWithDefault,
        .                           qualif,
        .                           _,
        .                       ) => qualif,
        .                       _ => bug!("mir_const_qualif: unexpected kind"),
        .                   }
        .               }
        .           
        .               fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {
    1,500 ( 0.00%)          match self.kind(id) {
    1,200 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).has_self,
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn get_associated_item_def_ids(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [DefId] {
    2,786 ( 0.00%)          if let Some(children) = self.root.tables.children.get(self, id) {
    1,194 ( 0.00%)              tcx.arena.alloc_from_iter(
      398 ( 0.00%)                  children.decode((self, tcx.sess)).map(|child_index| self.local_def_id(child_index)),
        .                       )
        .                   } else {
        .                       &[]
        .                   }
        .               }
        .           
   27,948 ( 0.00%)      fn get_associated_item(self, id: DefIndex, sess: &Session) -> ty::AssocItem {
   16,303 ( 0.00%)          let def_key = self.def_key(id);
        .                   let parent = self.local_def_id(def_key.parent.unwrap());
        .                   let ident = self.item_ident(id, sess);
        .           
   16,943 ( 0.00%)          let (kind, container, has_self) = match self.kind(id) {
      240 ( 0.00%)              EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),
    2,069 ( 0.00%)              EntryKind::AssocFn(data) => {
        .                           let data = data.decode(self);
   14,483 ( 0.00%)                  (ty::AssocKind::Fn, data.container, data.has_self)
        .                       }
      400 ( 0.00%)              EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),
        .                       _ => bug!("cannot get associated-item of `{:?}`", def_key),
        .                   };
        .           
   41,922 ( 0.00%)          ty::AssocItem {
        .                       name: ident.name,
        .                       kind,
        .                       vis: self.get_visibility(id),
        .                       defaultness: container.defaultness(),
        .                       def_id: self.local_def_id(id),
        .                       trait_item_def_id: self.get_trait_item_def_id(id),
        .                       container: container.with_def_id(parent),
        .                       fn_has_self_parameter: has_self,
        .                   }
   20,961 ( 0.00%)      }
        .           
        .               fn get_item_variances(self, id: DefIndex) -> impl Iterator<Item = ty::Variance> + 'a {
      570 ( 0.00%)          self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self)
        .               }
        .           
        .               fn get_ctor_def_id_and_kind(self, node_id: DefIndex) -> Option<(DefId, CtorKind)> {
    4,375 ( 0.00%)          match self.kind(node_id) {
        .                       EntryKind::Struct(data, _) | EntryKind::Variant(data) => {
    1,873 ( 0.00%)                  let vdata = data.decode(self);
    1,035 ( 0.00%)                  vdata.ctor.map(|index| (self.local_def_id(index), vdata.ctor_kind))
        .                       }
        .                       _ => None,
        .                   }
    2,739 ( 0.00%)      }
        .           
    2,352 ( 0.00%)      fn get_item_attrs(
        .                   self,
        .                   id: DefIndex,
        .                   sess: &'a Session,
        .               ) -> impl Iterator<Item = ast::Attribute> + 'a {
    6,726 ( 0.00%)          self.root
        .                       .tables
        .                       .attributes
        .                       .get(self, id)
        .                       .unwrap_or_else(|| {
        .                           // Structure and variant constructors don't have any attributes encoded for them,
        .                           // but we assume that someone passing a constructor ID actually wants to look at
        .                           // the attributes on the corresponding struct or variant.
        .                           let def_key = self.def_key(id);
-- line 1320 ----------------------------------------
-- line 1322 ----------------------------------------
        .                           let parent_id = def_key.parent.expect("no parent for a constructor");
        .                           self.root
        .                               .tables
        .                               .attributes
        .                               .get(self, parent_id)
        .                               .expect("no encoded attributes for a structure or variant")
        .                       })
        .                       .decode((self, sess))
    1,764 ( 0.00%)      }
        .           
        .               fn get_struct_field_names(
        .                   self,
        .                   id: DefIndex,
        .                   sess: &'a Session,
        .               ) -> impl Iterator<Item = Spanned<Symbol>> + 'a {
    2,540 ( 0.00%)          self.root
        .                       .tables
        .                       .children
        .                       .get(self, id)
        .                       .unwrap_or_else(Lazy::empty)
        .                       .decode(self)
    9,360 ( 0.00%)              .map(move |index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))
        .               }
        .           
        .               fn get_struct_field_visibilities(self, id: DefIndex) -> impl Iterator<Item = Visibility> + 'a {
      315 ( 0.00%)          self.root
        .                       .tables
        .                       .children
        .                       .get(self, id)
        .                       .unwrap_or_else(Lazy::empty)
        .                       .decode(self)
       96 ( 0.00%)              .map(move |field_index| self.get_visibility(field_index))
        .               }
        .           
        .               fn get_inherent_implementations_for_type(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   id: DefIndex,
        .               ) -> &'tcx [DefId] {
      208 ( 0.00%)          tcx.arena.alloc_from_iter(
      260 ( 0.00%)              self.root
        .                           .tables
        .                           .inherent_impls
        .                           .get(self, id)
        .                           .unwrap_or_else(Lazy::empty)
        .                           .decode(self)
    2,238 ( 0.00%)                  .map(|index| self.local_def_id(index)),
        .                   )
        .               }
        .           
        .               fn get_traits(self) -> impl Iterator<Item = DefId> + 'a {
        .                   self.root.traits.decode(self).map(move |index| self.local_def_id(index))
        .               }
        .           
        .               fn get_trait_impls(self) -> impl Iterator<Item = (DefId, DefId, Option<SimplifiedType>)> + 'a {
-- line 1376 ----------------------------------------
-- line 1380 ----------------------------------------
        .                           index: *trait_index,
        .                       };
        .                       impls.decode(self).map(move |(impl_index, simplified_self_ty)| {
        .                           (trait_def_id, self.local_def_id(impl_index), simplified_self_ty)
        .                       })
        .                   })
        .               }
        .           
  123,300 ( 0.00%)      fn get_implementations_of_trait(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   trait_def_id: DefId,
        .               ) -> &'tcx [(DefId, Option<SimplifiedType>)] {
   13,700 ( 0.00%)          if self.trait_impls.is_empty() {
        .                       return &[];
        .                   }
        .           
        .                   // Do a reverse lookup beforehand to avoid touching the crate_num
        .                   // hash map in the loop below.
   12,112 ( 0.00%)          let key = match self.reverse_translate_def_id(trait_def_id) {
        .                       Some(def_id) => (def_id.krate.as_u32(), def_id.index),
        .                       None => return &[],
        .                   };
        .           
        .                   if let Some(impls) = self.trait_impls.get(&key) {
    5,308 ( 0.00%)              tcx.arena.alloc_from_iter(
    2,654 ( 0.00%)                  impls
        .                               .decode(self)
   17,021 ( 0.00%)                      .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),
        .                       )
        .                   } else {
        .                       &[]
        .                   }
  109,600 ( 0.00%)      }
        .           
        .               fn get_trait_of_item(self, id: DefIndex) -> Option<DefId> {
    2,228 ( 0.00%)          let def_key = self.def_key(id);
    2,785 ( 0.00%)          match def_key.disambiguated_data.data {
        .                       DefPathData::TypeNs(..) | DefPathData::ValueNs(..) => (),
        .                       // Not an associated item
        .                       _ => return None,
        .                   }
    4,941 ( 0.00%)          def_key.parent.and_then(|parent_index| match self.kind(parent_index) {
        .                       EntryKind::Trait(_) | EntryKind::TraitAlias => Some(self.local_def_id(parent_index)),
        .                       _ => None,
        .                   })
        .               }
        .           
        .               fn get_native_libraries(self, sess: &'a Session) -> impl Iterator<Item = NativeLib> + 'a {
      274 ( 0.00%)          self.root.native_libraries.decode((self, sess))
        .               }
        .           
        .               fn get_proc_macro_quoted_span(self, index: usize, sess: &Session) -> Span {
        .                   self.root
        .                       .tables
        .                       .proc_macro_quoted_spans
        .                       .get(self, index)
        .                       .unwrap_or_else(|| panic!("Missing proc macro quoted span: {:?}", index))
-- line 1437 ----------------------------------------
-- line 1450 ----------------------------------------
        .                       self.root.dylib_dependency_formats.decode(self).enumerate().flat_map(|(i, link)| {
        .                           let cnum = CrateNum::new(i + 1);
        .                           link.map(|link| (self.cnum_map[cnum], link))
        .                       }),
        .                   )
        .               }
        .           
        .               fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {
      685 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))
        .               }
        .           
        .               fn get_fn_param_names(self, tcx: TyCtxt<'tcx>, id: DefIndex) -> &'tcx [Ident] {
        .                   let param_names = match self.kind(id) {
        .                       EntryKind::Fn(data) | EntryKind::ForeignFn(data) => data.decode(self).param_names,
        .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.param_names,
        .                       _ => Lazy::empty(),
        .                   };
        .                   tcx.arena.alloc_from_iter(param_names.decode((self, tcx)))
        .               }
        .           
        .               fn exported_symbols(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .               ) -> &'tcx [(ExportedSymbol<'tcx>, SymbolExportLevel)] {
      822 ( 0.00%)          tcx.arena.alloc_from_iter(self.root.exported_symbols.decode((self, tcx)))
        .               }
        .           
        .               fn get_rendered_const(self, id: DefIndex) -> String {
        .                   match self.kind(id) {
        .                       EntryKind::AnonConst(_, data)
        .                       | EntryKind::Const(_, data)
        .                       | EntryKind::AssocConst(_, _, data) => data.decode(self).0,
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               fn get_macro(self, id: DefIndex, sess: &Session) -> MacroDef {
      168 ( 0.00%)          match self.kind(id) {
       28 ( 0.00%)              EntryKind::MacroDef(macro_def) => macro_def.decode((self, sess)),
        .                       _ => bug!(),
        .                   }
        .               }
        .           
        .               // This replicates some of the logic of the crate-local `is_const_fn_raw` query, because we
        .               // don't serialize constness for tuple variant and tuple struct constructors.
        .               fn is_const_fn_raw(self, id: DefIndex) -> bool {
      162 ( 0.00%)          let constness = match self.kind(id) {
       34 ( 0.00%)              EntryKind::AssocFn(data) => data.decode(self).fn_data.constness,
        6 ( 0.00%)              EntryKind::Fn(data) => data.decode(self).constness,
        .                       EntryKind::ForeignFn(data) => data.decode(self).constness,
        .                       EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,
        .                       _ => hir::Constness::NotConst,
        .                   };
        .                   constness == hir::Constness::Const
        .               }
        .           
        .               fn asyncness(self, id: DefIndex) -> hir::IsAsync {
-- line 1506 ----------------------------------------
-- line 1508 ----------------------------------------
        .                       EntryKind::Fn(data) => data.decode(self).asyncness,
        .                       EntryKind::AssocFn(data) => data.decode(self).fn_data.asyncness,
        .                       EntryKind::ForeignFn(data) => data.decode(self).asyncness,
        .                       _ => bug!("asyncness: expected function kind"),
        .                   }
        .               }
        .           
        .               fn is_foreign_item(self, id: DefIndex) -> bool {
    4,675 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::ForeignImmStatic | EntryKind::ForeignMutStatic | EntryKind::ForeignFn(_) => {
        .                           true
        .                       }
        .                       _ => false,
        .                   }
        .               }
        .           
        .               fn static_mutability(self, id: DefIndex) -> Option<hir::Mutability> {
      594 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::ImmStatic | EntryKind::ForeignImmStatic => Some(hir::Mutability::Not),
        .                       EntryKind::MutStatic | EntryKind::ForeignMutStatic => Some(hir::Mutability::Mut),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn generator_kind(self, id: DefIndex) -> Option<hir::GeneratorKind> {
       30 ( 0.00%)          match self.kind(id) {
        .                       EntryKind::Generator(data) => Some(data),
        .                       _ => None,
        .                   }
        .               }
        .           
        .               fn fn_sig(self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {
    3,235 ( 0.00%)          self.root.tables.fn_sig.get(self, id).unwrap().decode((self, tcx))
        .               }
        .           
        .               #[inline]
  444,661 ( 0.01%)      fn def_key(self, index: DefIndex) -> DefKey {
  127,330 ( 0.00%)          *self
        .                       .def_key_cache
        .                       .lock()
        .                       .entry(index)
   37,330 ( 0.00%)              .or_insert_with(|| self.root.tables.def_keys.get(self, index).unwrap().decode(self))
  508,184 ( 0.02%)      }
        .           
        .               // Returns the path leading to the thing with this `id`.
        .               fn def_path(self, id: DefIndex) -> DefPath {
        .                   debug!("def_path(cnum={:?}, id={:?})", self.cnum, id);
      220 ( 0.00%)          DefPath::make(self.cnum, id, |parent| self.def_key(parent))
        .               }
        .           
        .               fn def_path_hash_unlocked(
        .                   self,
        .                   index: DefIndex,
        .                   def_path_hashes: &mut FxHashMap<DefIndex, DefPathHash>,
        .               ) -> DefPathHash {
   25,420 ( 0.00%)          *def_path_hashes.entry(index).or_insert_with(|| {
    8,935 ( 0.00%)              self.root.tables.def_path_hashes.get(self, index).unwrap().decode(self)
        .                   })
        .               }
        .           
        .               #[inline]
   88,970 ( 0.00%)      fn def_path_hash(self, index: DefIndex) -> DefPathHash {
        .                   let mut def_path_hashes = self.def_path_hash_cache.lock();
        .                   self.def_path_hash_unlocked(index, &mut def_path_hashes)
  101,680 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn def_path_hash_to_def_index(self, hash: DefPathHash) -> DefIndex {
        .                   self.def_path_hash_map.def_path_hash_to_def_index(&hash)
        .               }
        .           
        .               fn expn_hash_to_expn_id(self, sess: &Session, index_guess: u32, hash: ExpnHash) -> ExpnId {
        .                   debug_assert_eq!(ExpnId::from_hash(hash), None);
-- line 1580 ----------------------------------------
-- line 1635 ----------------------------------------
        .               /// Proc macro crates don't currently export spans, so this function does not have
        .               /// to work for them.
        .               fn imported_source_files(self, sess: &Session) -> &'a [ImportedSourceFile] {
        .                   // Translate the virtual `/rustc/$hash` prefix back to a real directory
        .                   // that should hold actual sources, where possible.
        .                   //
        .                   // NOTE: if you update this, you might need to also update bootstrap's code for generating
        .                   // the `rust-src` component in `Src::run` in `src/bootstrap/dist.rs`.
  124,602 ( 0.00%)          let virtual_rust_source_base_dir = option_env!("CFG_VIRTUAL_RUST_SOURCE_BASE_DIR")
        .                       .map(Path::new)
        .                       .filter(|_| {
        .                           // Only spend time on further checks if we have what to translate *to*.
        .                           sess.opts.real_rust_source_base_dir.is_some()
        .                       })
        .                       .filter(|virtual_dir| {
        .                           // Don't translate away `/rustc/$hash` if we're still remapping to it,
        .                           // since that means we're still building `std`/`rustc` that need it,
        .                           // and we don't want the real path to leak into codegen/debuginfo.
        .                           !sess.opts.remap_path_prefix.iter().any(|(_from, to)| to == virtual_dir)
        .                       });
  124,602 ( 0.00%)          let try_to_translate_virtual_to_real = |name: &mut rustc_span::FileName| {
        .                       debug!(
        .                           "try_to_translate_virtual_to_real(name={:?}): \
        .                            virtual_rust_source_base_dir={:?}, real_rust_source_base_dir={:?}",
        .                           name, virtual_rust_source_base_dir, sess.opts.real_rust_source_base_dir,
        .                       );
        .           
    7,925 ( 0.00%)              if let Some(virtual_dir) = virtual_rust_source_base_dir {
        .                           if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
        .                               if let rustc_span::FileName::Real(old_name) = name {
        .                                   if let rustc_span::RealFileName::Remapped { local_path: _, virtual_name } =
        .                                       old_name
        .                                   {
        .                                       if let Ok(rest) = virtual_name.strip_prefix(virtual_dir) {
        .                                           let virtual_name = virtual_name.clone();
        .           
-- line 1670 ----------------------------------------
-- line 1709 ----------------------------------------
        .                                           *old_name = new_name;
        .                                       }
        .                                   }
        .                               }
        .                           }
        .                       }
        .                   };
        .           
  122,197 ( 0.00%)          self.cdata.source_map_import_info.get_or_init(|| {
      177 ( 0.00%)              let external_source_map = self.root.source_map.decode(self);
        .           
        .                       external_source_map
        .                           .map(|source_file_to_import| {
        .                               // We can't reuse an existing SourceFile, so allocate a new one
        .                               // containing the information we need.
        .                               let rustc_span::SourceFile {
   33,285 ( 0.00%)                          mut name,
    9,510 ( 0.00%)                          src_hash,
    1,585 ( 0.00%)                          start_pos,
    3,170 ( 0.00%)                          end_pos,
    7,925 ( 0.00%)                          mut lines,
    7,925 ( 0.00%)                          mut multibyte_chars,
    9,510 ( 0.00%)                          mut non_narrow_chars,
    7,925 ( 0.00%)                          mut normalized_pos,
    9,510 ( 0.00%)                          name_hash,
        .                                   ..
        .                               } = source_file_to_import;
        .           
        .                               // If this file is under $sysroot/lib/rustlib/src/ but has not been remapped
        .                               // during rust bootstrapping by `remap-debuginfo = true`, and the user
        .                               // wish to simulate that behaviour by -Z simulate-remapped-rust-src-base,
        .                               // then we change `name` to a similar state as if the rust was bootstrapped
        .                               // with `remap-debuginfo = true`.
        .                               // This is useful for testing so that tests about the effects of
        .                               // `try_to_translate_virtual_to_real` don't have to worry about how the
        .                               // compiler is bootstrapped.
    3,170 ( 0.00%)                      if let Some(virtual_dir) =
        .                                   &sess.opts.debugging_opts.simulate_remapped_rust_src_base
        .                               {
        .                                   if let Some(real_dir) = &sess.opts.real_rust_source_base_dir {
        .                                       if let rustc_span::FileName::Real(ref mut old_name) = name {
        .                                           if let rustc_span::RealFileName::LocalPath(local) = old_name {
        .                                               if let Ok(rest) = local.strip_prefix(real_dir) {
        .                                                   *old_name = rustc_span::RealFileName::Remapped {
        .                                                       local_path: None,
-- line 1753 ----------------------------------------
-- line 1767 ----------------------------------------
        .                               let source_length = (end_pos - start_pos).to_usize();
        .           
        .                               // Translate line-start positions and multibyte character
        .                               // position into frame of reference local to file.
        .                               // `SourceMap::new_imported_source_file()` will then translate those
        .                               // coordinates to their new global frame of reference when the
        .                               // offset of the SourceFile is known.
        .                               for pos in &mut lines {
1,329,912 ( 0.04%)                          *pos = *pos - start_pos;
        .                               }
        .                               for mbc in &mut multibyte_chars {
    1,840 ( 0.00%)                          mbc.pos = mbc.pos - start_pos;
        .                               }
        .                               for swc in &mut non_narrow_chars {
   79,068 ( 0.00%)                          *swc = *swc - start_pos;
        .                               }
        .                               for np in &mut normalized_pos {
    4,050 ( 0.00%)                          np.pos = np.pos - start_pos;
        .                               }
        .           
   28,530 ( 0.00%)                      let local_version = sess.source_map().new_imported_source_file(
   20,605 ( 0.00%)                          name,
   11,095 ( 0.00%)                          src_hash,
        .                                   name_hash,
        .                                   source_length,
    3,170 ( 0.00%)                          self.cnum,
    7,925 ( 0.00%)                          lines,
    9,510 ( 0.00%)                          multibyte_chars,
    7,925 ( 0.00%)                          non_narrow_chars,
    6,340 ( 0.00%)                          normalized_pos,
        .                                   start_pos,
        .                                   end_pos,
        .                               );
        .                               debug!(
        .                                   "CrateMetaData::imported_source_files alloc \
        .                                    source_file {:?} original (start_pos {:?} end_pos {:?}) \
        .                                    translated (start_pos {:?} end_pos {:?})",
        .                                   local_version.name,
-- line 1804 ----------------------------------------
-- line 1808 ----------------------------------------
        .                                   local_version.end_pos
        .                               );
        .           
        .                               ImportedSourceFile {
        .                                   original_start_pos: start_pos,
        .                                   original_end_pos: end_pos,
        .                                   translated_source_file: local_version,
        .                               }
    4,755 ( 0.00%)                  })
        .                           .collect()
        .                   })
        .               }
        .           }
        .           
        .           impl CrateMetadata {
    1,644 ( 0.00%)      crate fn new(
        .                   sess: &Session,
        .                   blob: MetadataBlob,
        .                   root: CrateRoot<'static>,
        .                   raw_proc_macros: Option<&'static [ProcMacro]>,
        .                   cnum: CrateNum,
        .                   cnum_map: CrateNumMap,
        .                   dep_kind: CrateDepKind,
        .                   source: CrateSource,
        .                   private_dep: bool,
        .                   host_hash: Option<Svh>,
        .               ) -> CrateMetadata {
      411 ( 0.00%)          let trait_impls = root
        .                       .impls
        .                       .decode((&blob, sess))
        .                       .map(|trait_impls| (trait_impls.trait_id, trait_impls.impls))
        .                       .collect();
        .                   let alloc_decoding_state =
      411 ( 0.00%)              AllocDecodingState::new(root.interpret_alloc_index.decode(&blob).collect());
        .                   let dependencies = Lock::new(cnum_map.iter().cloned().collect());
        .           
        .                   // Pre-decode the DefPathHash->DefIndex table. This is a cheap operation
        .                   // that does not copy any data. It just does some data verification.
      137 ( 0.00%)          let def_path_hash_map = root.def_path_hash_map.decode(&blob);
        .           
    3,151 ( 0.00%)          CrateMetadata {
      137 ( 0.00%)              blob,
      411 ( 0.00%)              root,
      548 ( 0.00%)              trait_impls,
        .                       raw_proc_macros,
        .                       source_map_import_info: OnceCell::new(),
      548 ( 0.00%)              def_path_hash_map,
        .                       expn_hash_map: Default::default(),
      959 ( 0.00%)              alloc_decoding_state,
        .                       cnum,
      548 ( 0.00%)              cnum_map,
      685 ( 0.00%)              dependencies,
        .                       dep_kind: Lock::new(dep_kind),
    1,644 ( 0.00%)              source,
        .                       private_dep,
        .                       host_hash,
        .                       extern_crate: Lock::new(None),
        .                       hygiene_context: Default::default(),
        .                       def_key_cache: Default::default(),
        .                       def_path_hash_cache: Default::default(),
        .                   }
    1,233 ( 0.00%)      }
        .           
        .               crate fn dependencies(&self) -> LockGuard<'_, Vec<CrateNum>> {
        .                   self.dependencies.borrow()
        .               }
        .           
        .               crate fn add_dependency(&self, cnum: CrateNum) {
        .                   self.dependencies.borrow_mut().push(cnum);
        .               }
        .           
        .               crate fn update_extern_crate(&self, new_extern_crate: ExternCrate) -> bool {
        .                   let mut extern_crate = self.extern_crate.borrow_mut();
        .                   let update = Some(new_extern_crate.rank()) > extern_crate.as_ref().map(ExternCrate::rank);
        .                   if update {
      715 ( 0.00%)              *extern_crate = Some(new_extern_crate);
        .                   }
        .                   update
        .               }
        .           
        .               crate fn source(&self) -> &CrateSource {
    1,412 ( 0.00%)          &self.source
        .               }
        .           
        .               crate fn dep_kind(&self) -> CrateDepKind {
        .                   *self.dep_kind.lock()
        .               }
        .           
        .               crate fn update_dep_kind(&self, f: impl FnOnce(CrateDepKind) -> CrateDepKind) {
    2,756 ( 0.00%)          self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))
        .               }
        .           
        .               crate fn panic_strategy(&self) -> PanicStrategy {
        .                   self.root.panic_strategy
        .               }
        .           
        .               crate fn needs_panic_runtime(&self) -> bool {
        .                   self.root.needs_panic_runtime
-- line 1905 ----------------------------------------
-- line 1909 ----------------------------------------
        .                   self.root.panic_runtime
        .               }
        .           
        .               crate fn is_profiler_runtime(&self) -> bool {
        .                   self.root.profiler_runtime
        .               }
        .           
        .               crate fn needs_allocator(&self) -> bool {
        5 ( 0.00%)          self.root.needs_allocator
        .               }
        .           
        .               crate fn has_global_allocator(&self) -> bool {
        .                   self.root.has_global_allocator
        .               }
        .           
        .               crate fn has_default_lib_allocator(&self) -> bool {
        .                   self.root.has_default_lib_allocator
        .               }
        .           
        .               crate fn is_proc_macro_crate(&self) -> bool {
        .                   self.root.is_proc_macro_crate()
        .               }
        .           
        .               crate fn name(&self) -> Symbol {
    8,947 ( 0.00%)          self.root.name
        .               }
        .           
        .               crate fn stable_crate_id(&self) -> StableCrateId {
        .                   self.root.stable_crate_id
        .               }
        .           
        .               crate fn hash(&self) -> Svh {
        .                   self.root.hash
        .               }
        .           
        .               fn num_def_ids(&self) -> usize {
        .                   self.root.tables.def_keys.size()
        .               }
        .           
        .               fn local_def_id(&self, index: DefIndex) -> DefId {
   36,641 ( 0.00%)          DefId { krate: self.cnum, index }
        .               }
        .           
        .               // Translate a DefId from the current compilation environment to a DefId
        .               // for an external crate.
        .               fn reverse_translate_def_id(&self, did: DefId) -> Option<DefId> {
        .                   for (local, &global) in self.cnum_map.iter_enumerated() {
  194,349 ( 0.01%)              if global == did.krate {
        .                           return Some(DefId { krate: local, index: did.index });
        .                       }
        .                   }
        .           
        .                   None
        .               }
        .           }
        .           
        .           // Cannot be implemented on 'ProcMacro', as libproc_macro
        .           // does not depend on librustc_ast
        .           fn macro_kind(raw: &ProcMacro) -> MacroKind {
      144 ( 0.00%)      match raw {
        .                   ProcMacro::CustomDerive { .. } => MacroKind::Derive,
        .                   ProcMacro::Attr { .. } => MacroKind::Attr,
        .                   ProcMacro::Bang { .. } => MacroKind::Bang,
        .               }
        .           }

1,875,626 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_metadata/src/rmeta/decoder.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs
--------------------------------------------------------------------------------
Ir                  

-- line 21 ----------------------------------------
         .           use rustc_target::spec::abi;
         .           use std::borrow::Cow;
         .           use std::cmp::Ordering;
         .           use std::marker::PhantomData;
         .           use std::ops::Range;
         .           use ty::util::IntTypeExt;
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
        19 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
         .           pub struct TypeAndMut<'tcx> {
     3,569 ( 0.00%)      pub ty: Ty<'tcx>,
    17,845 ( 0.00%)      pub mutbl: hir::Mutability,
         .           }
         .           
         .           #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
         .           #[derive(HashStable)]
         .           /// A "free" region `fr` can be interpreted as "some region
         .           /// at least as big as the scope `fr.scope`".
         .           pub struct FreeRegion {
     7,679 ( 0.00%)      pub scope: DefId,
    11,721 ( 0.00%)      pub bound_region: BoundRegionKind,
         .           }
         .           
   168,728 ( 0.01%)  #[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, TyEncodable, TyDecodable, Copy)]
       114 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundRegionKind {
         .               /// An anonymous region parameter for a given fn (&T)
    16,115 ( 0.00%)      BrAnon(u32),
         .           
         .               /// Named region parameters for functions (a in &'a T)
         .               ///
         .               /// The `DefId` is needed to distinguish free regions in
         .               /// the event of shadowing.
       676 ( 0.00%)      BrNamed(DefId, Symbol),
         .           
         .               /// Anonymous region for the implicit env pointer parameter
         .               /// to a closure
         .               BrEnv,
         .           }
         .           
       314 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           #[derive(HashStable)]
         .           pub struct BoundRegion {
    33,075 ( 0.00%)      pub var: BoundVar,
    28,269 ( 0.00%)      pub kind: BoundRegionKind,
         .           }
         .           
         .           impl BoundRegionKind {
         .               pub fn is_named(&self) -> bool {
         .                   match *self {
         .                       BoundRegionKind::BrNamed(_, name) => name != kw::UnderscoreLifetime,
         .                       _ => false,
         .                   }
         .               }
         .           }
         .           
         .           /// Defines the kinds of types.
         .           ///
         .           /// N.B., if you change this, you'll probably want to change the corresponding
         .           /// AST structure in `rustc_ast/src/ast.rs` as well.
11,222,025 ( 0.38%)  #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable, Debug)]
   138,223 ( 0.00%)  #[derive(HashStable)]
         .           #[rustc_diagnostic_item = "TyKind"]
         .           pub enum TyKind<'tcx> {
         .               /// The primitive boolean type. Written as `bool`.
         .               Bool,
         .           
         .               /// The primitive character type; holds a Unicode scalar value
         .               /// (a non-surrogate code point). Written as `char`.
         .               Char,
-- line 90 ----------------------------------------
-- line 99 ----------------------------------------
         .               Float(ty::FloatTy),
         .           
         .               /// Algebraic data types (ADT). For example: structures, enumerations and unions.
         .               ///
         .               /// InternalSubsts here, possibly against intuition, *may* contain `Param`s.
         .               /// That is, even after substitution it is possible that there are type
         .               /// variables. This happens when the `Adt` corresponds to an ADT
         .               /// definition and not a concrete use of it.
 1,894,827 ( 0.06%)      Adt(&'tcx AdtDef, SubstsRef<'tcx>),
         .           
         .               /// An unsized FFI type that is opaque to Rust. Written as `extern type T`.
         .               Foreign(DefId),
         .           
         .               /// The pointee of a string slice. Written as `str`.
         .               Str,
         .           
         .               /// An array with the given length. Written as `[T; n]`.
    14,107 ( 0.00%)      Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),
         .           
         .               /// The pointee of an array slice. Written as `[T]`.
         .               Slice(Ty<'tcx>),
         .           
         .               /// A raw pointer. Written as `*mut T` or `*const T`
         .               RawPtr(TypeAndMut<'tcx>),
         .           
         .               /// A reference; a pointer with an associated lifetime. Written as
         .               /// `&'a mut T` or `&'a T`.
   423,083 ( 0.01%)      Ref(Region<'tcx>, Ty<'tcx>, hir::Mutability),
         .           
         .               /// The anonymous type of a function declaration/definition. Each
         .               /// function has a unique type, which is output (for a function
         .               /// named `foo` returning an `i32`) as `fn() -> i32 {foo}`.
         .               ///
         .               /// For example the type of `bar` here:
         .               ///
         .               /// ```rust
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
         .               ///
         .               /// ```rust
         .               /// fn foo() -> i32 { 1 }
         .               /// let bar: fn() -> i32 = foo;
         .               /// ```
         .               FnPtr(PolyFnSig<'tcx>),
         .           
         .               /// A trait object. Written as `dyn for<'b> Trait<'b, Assoc = u32> + Send + 'a`.
   157,671 ( 0.01%)      Dynamic(&'tcx List<Binder<'tcx, ExistentialPredicate<'tcx>>>, ty::Region<'tcx>),
         .           
         .               /// The anonymous type of a closure. Used to represent the type of
         .               /// `|a| a`.
         .               Closure(DefId, SubstsRef<'tcx>),
         .           
         .               /// The anonymous type of a generator. Used to represent the type of
         .               /// `|a| yield a`.
    18,992 ( 0.00%)      Generator(DefId, SubstsRef<'tcx>, hir::Movability),
         .           
         .               /// A type representing the types stored inside a generator.
         .               /// This should only appear in GeneratorInteriors.
         .               GeneratorWitness(Binder<'tcx, &'tcx List<Ty<'tcx>>>),
         .           
         .               /// The never type `!`.
         .               Never,
         .           
-- line 167 ----------------------------------------
-- line 180 ----------------------------------------
         .               /// The substitutions are for the generics of the function in question.
         .               /// After typeck, the concrete type can be found in the `types` map.
         .               Opaque(DefId, SubstsRef<'tcx>),
         .           
         .               /// A type parameter; for example, `T` in `fn f<T>(x: T) {}`.
         .               Param(ParamTy),
         .           
         .               /// Bound type variable, used only when preparing a trait query.
     2,059 ( 0.00%)      Bound(ty::DebruijnIndex, BoundTy),
         .           
         .               /// A placeholder type - universally quantified higher-ranked type.
         .               Placeholder(ty::PlaceholderType),
         .           
         .               /// A type variable used during type checking.
         .               Infer(InferTy),
         .           
         .               /// A placeholder for a type which could not be computed; this is
-- line 196 ----------------------------------------
-- line 330 ----------------------------------------
         .               pub closure_kind_ty: T,
         .               pub closure_sig_as_fn_ptr_ty: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> ClosureSubsts<'tcx> {
         .               /// Construct `ClosureSubsts` from `ClosureSubstsParts`, containing `Substs`
         .               /// for the closure parent, alongside additional closure-specific components.
        35 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: ClosureSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> ClosureSubsts<'tcx> {
         .                   ClosureSubsts {
         .                       substs: tcx.mk_substs(
        70 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
       140 ( 0.00%)                      [parts.closure_kind_ty, parts.closure_sig_as_fn_ptr_ty, parts.tupled_upvars_ty]
         .                                   .iter()
         .                                   .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        70 ( 0.00%)      }
         .           
         .               /// Divides the closure substs into their respective components.
         .               /// The ordering assumed here must match that used by `ClosureSubsts::new` above.
       993 ( 0.00%)      fn split(self) -> ClosureSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
    20,004 ( 0.00%)              [
     5,993 ( 0.00%)                  ref parent_substs @ ..,
     4,123 ( 0.00%)                  closure_kind_ty,
     3,333 ( 0.00%)                  closure_sig_as_fn_ptr_ty,
     3,559 ( 0.00%)                  tupled_upvars_ty,
     3,972 ( 0.00%)              ] => ClosureSubstsParts {
         .                           parent_substs,
         .                           closure_kind_ty,
         .                           closure_sig_as_fn_ptr_ty,
         .                           tupled_upvars_ty,
         .                       },
         .                       _ => bug!("closure substs missing synthetics"),
         .                   }
     2,979 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `ClosureSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle closure
         .               /// types that haven't had their synthetic types substituted in.
        20 ( 0.00%)      pub fn is_valid(self) -> bool {
        40 ( 0.00%)          self.substs.len() >= 3
        40 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        40 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the closure's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the closure.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       222 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       548 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       284 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       148 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this closure.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     4,503 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the closure kind for this closure; may return a type
         .               /// variable during inference. To get the closure kind during
         .               /// inference, use `infcx.closure_kind(substs)`.
       536 ( 0.00%)      pub fn kind_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_kind_ty.expect_ty()
     1,072 ( 0.00%)      }
         .           
         .               /// Returns the `fn` pointer type representing the closure signature for this
         .               /// closure.
         .               // FIXME(eddyb) this should be unnecessary, as the shallowly resolved
         .               // type is known at the time of the creation of `ClosureSubsts`,
         .               // see `rustc_typeck::check::closure`.
         1 ( 0.00%)      pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {
         .                   self.split().closure_sig_as_fn_ptr_ty.expect_ty()
         2 ( 0.00%)      }
         .           
         .               /// Returns the closure kind for this closure; only usable outside
         .               /// of an inference context, because in that context we know that
         .               /// there are no type variables.
         .               ///
         .               /// If you have an inference context, use `infcx.closure_kind()`.
        10 ( 0.00%)      pub fn kind(self) -> ty::ClosureKind {
        17 ( 0.00%)          self.kind_ty().to_opt_closure_kind().unwrap()
        20 ( 0.00%)      }
         .           
         .               /// Extracts the signature from the closure.
       832 ( 0.00%)      pub fn sig(self) -> ty::PolyFnSig<'tcx> {
         .                   let ty = self.sig_as_fn_ptr_ty();
     1,664 ( 0.00%)          match ty.kind() {
     3,328 ( 0.00%)              ty::FnPtr(sig) => *sig,
         .                       _ => bug!("closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}", ty.kind()),
         .                   }
     2,496 ( 0.00%)      }
         .           }
         .           
         .           /// Similar to `ClosureSubsts`; see the above documentation for more.
         .           #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GeneratorSubsts<'tcx> {
         .               pub substs: SubstsRef<'tcx>,
         .           }
         .           
-- line 448 ----------------------------------------
-- line 453 ----------------------------------------
         .               pub return_ty: T,
         .               pub witness: T,
         .               pub tupled_upvars_ty: T,
         .           }
         .           
         .           impl<'tcx> GeneratorSubsts<'tcx> {
         .               /// Construct `GeneratorSubsts` from `GeneratorSubstsParts`, containing `Substs`
         .               /// for the generator parent, alongside additional generator-specific components.
         6 ( 0.00%)      pub fn new(
         .                   tcx: TyCtxt<'tcx>,
         .                   parts: GeneratorSubstsParts<'tcx, Ty<'tcx>>,
         .               ) -> GeneratorSubsts<'tcx> {
         .                   GeneratorSubsts {
         .                       substs: tcx.mk_substs(
        12 ( 0.00%)                  parts.parent_substs.iter().copied().chain(
        18 ( 0.00%)                      [
         6 ( 0.00%)                          parts.resume_ty,
         .                                   parts.yield_ty,
         6 ( 0.00%)                          parts.return_ty,
         .                                   parts.witness,
         6 ( 0.00%)                          parts.tupled_upvars_ty,
         .                               ]
         .                               .iter()
         .                               .map(|&ty| ty.into()),
         .                           ),
         .                       ),
         .                   }
        12 ( 0.00%)      }
         .           
         .               /// Divides the generator substs into their respective components.
         .               /// The ordering assumed here must match that used by `GeneratorSubsts::new` above.
       278 ( 0.00%)      fn split(self) -> GeneratorSubstsParts<'tcx, GenericArg<'tcx>> {
         .                   match self.substs[..] {
     4,594 ( 0.00%)              [ref parent_substs @ .., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {
     1,390 ( 0.00%)                  GeneratorSubstsParts {
         .                               parent_substs,
         .                               resume_ty,
         .                               yield_ty,
         .                               return_ty,
         .                               witness,
         .                               tupled_upvars_ty,
         .                           }
         .                       }
         .                       _ => bug!("generator substs missing synthetics"),
         .                   }
       834 ( 0.00%)      }
         .           
         .               /// Returns `true` only if enough of the synthetic types are known to
         .               /// allow using all of the methods on `GeneratorSubsts` without panicking.
         .               ///
         .               /// Used primarily by `ty::print::pretty` to be able to handle generator
         .               /// types that haven't had their synthetic types substituted in.
         6 ( 0.00%)      pub fn is_valid(self) -> bool {
        12 ( 0.00%)          self.substs.len() >= 5
        12 ( 0.00%)              && matches!(self.split().tupled_upvars_ty.expect_ty().kind(), Tuple(_))
        12 ( 0.00%)      }
         .           
         .               /// Returns the substitutions of the generator's parent.
         .               pub fn parent_substs(self) -> &'tcx [GenericArg<'tcx>] {
         .                   self.split().parent_substs
         .               }
         .           
         .               /// This describes the types that can be contained in a generator.
         .               /// It will be a type variable initially and unified in the last stages of typeck of a body.
         .               /// It contains a tuple of all the types that could end up on a generator frame.
         .               /// The state transformation MIR pass may only produce layouts which mention types
         .               /// in this tuple. Upvars are not counted here.
        32 ( 0.00%)      pub fn witness(self) -> Ty<'tcx> {
         .                   self.split().witness.expect_ty()
        64 ( 0.00%)      }
         .           
         .               /// Returns an iterator over the list of types of captured paths by the generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
       168 ( 0.00%)      pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       342 ( 0.00%)          match self.tupled_upvars_ty().kind() {
         .                       TyKind::Error(_) => None,
       220 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
       112 ( 0.00%)      }
         .           
         .               /// Returns the tuple type representing the upvars for this generator.
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
     1,069 ( 0.00%)          self.split().tupled_upvars_ty.expect_ty()
         .               }
         .           
         .               /// Returns the type representing the resume type of the generator.
        13 ( 0.00%)      pub fn resume_ty(self) -> Ty<'tcx> {
         .                   self.split().resume_ty.expect_ty()
        26 ( 0.00%)      }
         .           
         .               /// Returns the type representing the yield type of the generator.
         7 ( 0.00%)      pub fn yield_ty(self) -> Ty<'tcx> {
         .                   self.split().yield_ty.expect_ty()
        14 ( 0.00%)      }
         .           
         .               /// Returns the type representing the return type of the generator.
         7 ( 0.00%)      pub fn return_ty(self) -> Ty<'tcx> {
         .                   self.split().return_ty.expect_ty()
        14 ( 0.00%)      }
         .           
         .               /// Returns the "generator signature", which consists of its yield
         .               /// and return types.
         .               ///
         .               /// N.B., some bits of the code prefers to see this wrapped in a
         .               /// binder, but it never contains bound regions. Probably this
         .               /// function should be removed.
       296 ( 0.00%)      pub fn poly_sig(self) -> PolyGenSig<'tcx> {
        74 ( 0.00%)          ty::Binder::dummy(self.sig())
       296 ( 0.00%)      }
         .           
         .               /// Returns the "generator signature", which consists of its resume, yield
         .               /// and return types.
        80 ( 0.00%)      pub fn sig(self) -> GenSig<'tcx> {
       240 ( 0.00%)          ty::GenSig {
         .                       resume_ty: self.resume_ty(),
         .                       yield_ty: self.yield_ty(),
         .                       return_ty: self.return_ty(),
         .                   }
       240 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> GeneratorSubsts<'tcx> {
         .               /// Generator has not been resumed yet.
         .               pub const UNRESUMED: usize = 0;
         .               /// Generator has returned or is completed.
         .               pub const RETURNED: usize = 1;
         .               /// Generator has been poisoned.
-- line 586 ----------------------------------------
-- line 589 ----------------------------------------
         .               const UNRESUMED_NAME: &'static str = "Unresumed";
         .               const RETURNED_NAME: &'static str = "Returned";
         .               const POISONED_NAME: &'static str = "Panicked";
         .           
         .               /// The valid variant indices of this generator.
         .               #[inline]
         .               pub fn variant_range(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> Range<VariantIdx> {
         .                   // FIXME requires optimized MIR
        44 ( 0.00%)          let num_variants = tcx.generator_layout(def_id).unwrap().variant_fields.len();
         .                   VariantIdx::new(0)..VariantIdx::new(num_variants)
         .               }
         .           
         .               /// The discriminant for the given variant. Panics if the `variant_index` is
         .               /// out of range.
         .               #[inline]
         .               pub fn discriminant_for_variant(
         .                   &self,
         .                   def_id: DefId,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Discr<'tcx> {
         .                   // Generators don't support explicit discriminant values, so they are
         .                   // the same as the variant index.
         8 ( 0.00%)          assert!(self.variant_range(def_id, tcx).contains(&variant_index));
        16 ( 0.00%)          Discr { val: variant_index.as_usize() as u128, ty: self.discr_ty(tcx) }
         .               }
         .           
         .               /// The set of all discriminants for the generator, enumerated with their
         .               /// variant indices.
         .               #[inline]
         .               pub fn discriminants(
         .                   self,
         .                   def_id: DefId,
-- line 621 ----------------------------------------
-- line 623 ----------------------------------------
         .               ) -> impl Iterator<Item = (VariantIdx, Discr<'tcx>)> + Captures<'tcx> {
         .                   self.variant_range(def_id, tcx).map(move |index| {
         .                       (index, Discr { val: index.as_usize() as u128, ty: self.discr_ty(tcx) })
         .                   })
         .               }
         .           
         .               /// Calls `f` with a reference to the name of the enumerator for the given
         .               /// variant `v`.
        42 ( 0.00%)      pub fn variant_name(v: VariantIdx) -> Cow<'static, str> {
        60 ( 0.00%)          match v.as_usize() {
         .                       Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),
         .                       Self::RETURNED => Cow::from(Self::RETURNED_NAME),
         .                       Self::POISONED => Cow::from(Self::POISONED_NAME),
        14 ( 0.00%)              _ => Cow::from(format!("Suspend{}", v.as_usize() - 3)),
         .                   }
        56 ( 0.00%)      }
         .           
         .               /// The type of the state discriminant used in the generator type.
         .               #[inline]
         .               pub fn discr_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
        40 ( 0.00%)          tcx.types.u32
         .               }
         .           
         .               /// This returns the types of the MIR locals which had to be stored across suspension points.
         .               /// It is calculated in rustc_const_eval::transform::generator::StateTransform.
         .               /// All the types here must be in the tuple in GeneratorInterior.
         .               ///
         .               /// The locals are grouped by their variant number. Note that some locals may
         .               /// be repeated in multiple variants.
         .               #[inline]
         .               pub fn state_tys(
         .                   self,
         .                   def_id: DefId,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> impl Iterator<Item = impl Iterator<Item = Ty<'tcx>> + Captures<'tcx>> {
        16 ( 0.00%)          let layout = tcx.generator_layout(def_id).unwrap();
         .                   layout.variant_fields.iter().map(move |variant| {
        12 ( 0.00%)              variant.iter().map(move |field| layout.field_tys[*field].subst(tcx, self.substs))
         .                   })
         .               }
         .           
         .               /// This is the types of the fields of a generator which are not stored in a
         .               /// variant.
         .               #[inline]
       314 ( 0.00%)      pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {
         .                   self.upvar_tys()
       228 ( 0.00%)      }
         .           }
         .           
         .           #[derive(Debug, Copy, Clone, HashStable)]
         .           pub enum UpvarSubsts<'tcx> {
         .               Closure(SubstsRef<'tcx>),
         .               Generator(SubstsRef<'tcx>),
         .           }
         .           
         .           impl<'tcx> UpvarSubsts<'tcx> {
         .               /// Returns an iterator over the list of types of captured paths by the closure/generator.
         .               /// In case there was a type error in figuring out the types of the captured path, an
         .               /// empty iterator is returned.
         .               #[inline]
         .               pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {
       114 ( 0.00%)          let tupled_tys = match self {
       125 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        30 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   };
         .           
       253 ( 0.00%)          match tupled_tys.kind() {
         .                       TyKind::Error(_) => None,
       212 ( 0.00%)              TyKind::Tuple(..) => Some(self.tupled_upvars_ty().tuple_fields()),
         .                       TyKind::Infer(_) => bug!("upvar_tys called before capture types are inferred"),
         .                       ty => bug!("Unexpected representation of upvar types tuple {:?}", ty),
         .                   }
         .                   .into_iter()
         .                   .flatten()
         .               }
         .           
         .               #[inline]
         .               pub fn tupled_upvars_ty(self) -> Ty<'tcx> {
       196 ( 0.00%)          match self {
       173 ( 0.00%)              UpvarSubsts::Closure(substs) => substs.as_closure().tupled_upvars_ty(),
        57 ( 0.00%)              UpvarSubsts::Generator(substs) => substs.as_generator().tupled_upvars_ty(),
         .                   }
         .               }
         .           }
         .           
         .           /// An inline const is modeled like
         .           ///
         .           ///     const InlineConst<'l0...'li, T0...Tj, R>: R;
         .           ///
-- line 711 ----------------------------------------
-- line 760 ----------------------------------------
         .               }
         .           
         .               /// Returns the type of this inline const.
         .               pub fn ty(self) -> Ty<'tcx> {
         .                   self.split().ty.expect_ty()
         .               }
         .           }
         .           
   427,323 ( 0.01%)  #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]
   206,451 ( 0.01%)  #[derive(HashStable, TypeFoldable)]
         .           pub enum ExistentialPredicate<'tcx> {
         .               /// E.g., `Iterator`.
         .               Trait(ExistentialTraitRef<'tcx>),
         .               /// E.g., `Iterator::Item = T`.
         .               Projection(ExistentialProjection<'tcx>),
         .               /// E.g., `Send`.
     9,710 ( 0.00%)      AutoTrait(DefId),
         .           }
         .           
         .           impl<'tcx> ExistentialPredicate<'tcx> {
         .               /// Compares via an ordering that will not change if modules are reordered or other changes are
         .               /// made to the tree. In particular, this ordering is preserved across incremental compilations.
    85,595 ( 0.00%)      pub fn stable_cmp(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Ordering {
         .                   use self::ExistentialPredicate::*;
   124,262 ( 0.00%)          match (*self, *other) {
         .                       (Trait(_), Trait(_)) => Ordering::Equal,
         .                       (Projection(ref a), Projection(ref b)) => {
         .                           tcx.def_path_hash(a.item_def_id).cmp(&tcx.def_path_hash(b.item_def_id))
         .                       }
         .                       (AutoTrait(ref a), AutoTrait(ref b)) => {
         .                           tcx.def_path_hash(*a).cmp(&tcx.def_path_hash(*b))
         .                       }
         .                       (Trait(_), _) => Ordering::Less,
         .                       (Projection(_), Trait(_)) => Ordering::Greater,
         .                       (Projection(_), _) => Ordering::Less,
         .                       (AutoTrait(_), _) => Ordering::Greater,
         .                   }
   102,714 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> Binder<'tcx, ExistentialPredicate<'tcx>> {
     3,753 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::Predicate<'tcx> {
         .                   use crate::ty::ToPredicate;
     2,861 ( 0.00%)          match self.skip_binder() {
         .                       ExistentialPredicate::Trait(tr) => {
         .                           self.rebind(tr).with_self_ty(tcx, self_ty).without_const().to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::Projection(p) => {
         2 ( 0.00%)                  self.rebind(p.with_self_ty(tcx, self_ty)).to_predicate(tcx)
         .                       }
         .                       ExistentialPredicate::AutoTrait(did) => {
       576 ( 0.00%)                  let trait_ref = self.rebind(ty::TraitRef {
         .                               def_id: did,
         .                               substs: tcx.mk_substs_trait(self_ty, &[]),
         .                           });
         .                           trait_ref.without_const().to_predicate(tcx)
         .                       }
         .                   }
     3,336 ( 0.00%)      }
         .           }
         .           
         .           impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
         .               /// Returns the "principal `DefId`" of this set of existential predicates.
         .               ///
         .               /// A Rust trait object type consists (in addition to a lifetime bound)
         .               /// of a set of trait bounds, which are separated into any number
         .               /// of auto-trait bounds, and at most one non-auto-trait bound. The
-- line 826 ----------------------------------------
-- line 839 ----------------------------------------
         .               /// are the set `{Sync}`.
         .               ///
         .               /// It is also possible to have a "trivial" trait object that
         .               /// consists only of auto traits, with no principal - for example,
         .               /// `dyn Send + Sync`. In that case, the set of auto-trait bounds
         .               /// is `{Send, Sync}`, while there is no principal. These trait objects
         .               /// have a "trivial" vtable consisting of just the size, alignment,
         .               /// and destructor.
       384 ( 0.00%)      pub fn principal(&self) -> Option<ty::Binder<'tcx, ExistentialTraitRef<'tcx>>> {
     2,331 ( 0.00%)          self[0]
     1,179 ( 0.00%)              .map_bound(|this| match this {
         .                           ExistentialPredicate::Trait(tr) => Some(tr),
         .                           _ => None,
     1,536 ( 0.00%)              })
         .                       .transpose()
     1,152 ( 0.00%)      }
         .           
       227 ( 0.00%)      pub fn principal_def_id(&self) -> Option<DefId> {
         .                   self.principal().map(|trait_ref| trait_ref.skip_binder().def_id)
       454 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn projection_bounds<'a>(
         .                   &'a self,
         .               ) -> impl Iterator<Item = ty::Binder<'tcx, ExistentialProjection<'tcx>>> + 'a {
         .                   self.iter().filter_map(|predicate| {
       750 ( 0.00%)              predicate
     1,420 ( 0.00%)                  .map_bound(|pred| match pred {
       236 ( 0.00%)                      ExistentialPredicate::Projection(projection) => Some(projection),
         .                               _ => None,
         .                           })
         .                           .transpose()
         .                   })
         .               }
         .           
         .               #[inline]
         .               pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {
        84 ( 0.00%)          self.iter().filter_map(|predicate| match predicate.skip_binder() {
         .                       ExistentialPredicate::AutoTrait(did) => Some(did),
         .                       _ => None,
         .                   })
         .               }
         .           }
         .           
         .           /// A complete reference to a trait. These take numerous guises in syntax,
         .           /// but perhaps the most recognizable form is in a where-clause:
-- line 884 ----------------------------------------
-- line 886 ----------------------------------------
         .           ///     T: Foo<U>
         .           ///
         .           /// This would be represented by a trait-reference where the `DefId` is the
         .           /// `DefId` for the trait `Foo` and the substs define `T` as parameter 0,
         .           /// and `U` as parameter 1.
         .           ///
         .           /// Trait references also appear in object types like `Foo<U>`, but in
         .           /// that case the `Self` parameter is absent from the substitutions.
    36,344 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
 1,165,379 ( 0.04%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct TraitRef<'tcx> {
    37,905 ( 0.00%)      pub def_id: DefId,
   772,006 ( 0.03%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> TraitRef<'tcx> {
       618 ( 0.00%)      pub fn new(def_id: DefId, substs: SubstsRef<'tcx>) -> TraitRef<'tcx> {
         .                   TraitRef { def_id, substs }
     2,472 ( 0.00%)      }
         .           
         .               /// Returns a `TraitRef` of the form `P0: Foo<P1..Pn>` where `Pi`
         .               /// are the parameters defined on trait.
     1,458 ( 0.00%)      pub fn identity(tcx: TyCtxt<'tcx>, def_id: DefId) -> Binder<'tcx, TraitRef<'tcx>> {
       648 ( 0.00%)          ty::Binder::dummy(TraitRef {
         .                       def_id,
       972 ( 0.00%)              substs: InternalSubsts::identity_for_item(tcx, def_id),
         .                   })
     1,296 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn self_ty(&self) -> Ty<'tcx> {
         .                   self.substs.type_at(0)
         .               }
         .           
     2,720 ( 0.00%)      pub fn from_method(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_id: DefId,
         .                   substs: SubstsRef<'tcx>,
         .               ) -> ty::TraitRef<'tcx> {
         .                   let defs = tcx.generics_of(trait_id);
         .           
       340 ( 0.00%)          ty::TraitRef { def_id: trait_id, substs: tcx.intern_substs(&substs[..defs.params.len()]) }
     3,740 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyTraitRef<'tcx> = Binder<'tcx, TraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyTraitRef<'tcx> {
         .               pub fn self_ty(&self) -> Binder<'tcx, Ty<'tcx>> {
         .                   self.map_bound_ref(|tr| tr.self_ty())
         .               }
         .           
         .               pub fn def_id(&self) -> DefId {
     5,832 ( 0.00%)          self.skip_binder().def_id
     1,944 ( 0.00%)      }
         .           
     2,976 ( 0.00%)      pub fn to_poly_trait_predicate(&self) -> ty::PolyTraitPredicate<'tcx> {
     5,952 ( 0.00%)          self.map_bound(|trait_ref| ty::TraitPredicate {
         .                       trait_ref,
         .                       constness: ty::BoundConstness::NotConst,
         .                       polarity: ty::ImplPolarity::Positive,
         .                   })
     2,976 ( 0.00%)      }
         .           }
         .           
         .           /// An existential reference to a trait, where `Self` is erased.
         .           /// For example, the trait object `Trait<'a, 'b, X, Y>` is:
         .           ///
         .           ///     exists T. T: Trait<'a, 'b, X, Y>
         .           ///
         .           /// The substitutions don't include the erased `Self`, only trait
         .           /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).
     1,228 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    57,193 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialTraitRef<'tcx> {
     9,776 ( 0.00%)      pub def_id: DefId,
    76,033 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           }
         .           
         .           impl<'tcx> ExistentialTraitRef<'tcx> {
     1,452 ( 0.00%)      pub fn erase_self_ty(
         .                   tcx: TyCtxt<'tcx>,
         .                   trait_ref: ty::TraitRef<'tcx>,
         .               ) -> ty::ExistentialTraitRef<'tcx> {
         .                   // Assert there is a Self.
         .                   trait_ref.substs.type_at(0);
         .           
         .                   ty::ExistentialTraitRef {
         .                       def_id: trait_ref.def_id,
         .                       substs: tcx.intern_substs(&trait_ref.substs[1..]),
         .                   }
     1,452 ( 0.00%)      }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       440 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::TraitRef<'tcx> {
         .                   // otherwise the escaping vars would be captured by the binder
         .                   // debug_assert!(!self_ty.has_escaping_bound_vars());
         .           
       220 ( 0.00%)          ty::TraitRef { def_id: self.def_id, substs: tcx.mk_substs_trait(self_ty, self.substs) }
     1,100 ( 0.00%)      }
         .           }
         .           
         .           pub type PolyExistentialTraitRef<'tcx> = Binder<'tcx, ExistentialTraitRef<'tcx>>;
         .           
         .           impl<'tcx> PolyExistentialTraitRef<'tcx> {
         .               pub fn def_id(&self) -> DefId {
         .                   self.skip_binder().def_id
         .               }
         .           
         .               /// Object types don't have a self type specified. Therefore, when
         .               /// we convert the principal trait-ref into a normal trait-ref,
         .               /// you must give *some* self type. A common choice is `mk_err()`
         .               /// or some placeholder type.
       216 ( 0.00%)      pub fn with_self_ty(&self, tcx: TyCtxt<'tcx>, self_ty: Ty<'tcx>) -> ty::PolyTraitRef<'tcx> {
       284 ( 0.00%)          self.map_bound(|trait_ref| trait_ref.with_self_ty(tcx, self_ty))
       288 ( 0.00%)      }
         .           }
         .           
    58,610 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
       165 ( 0.00%)  #[derive(HashStable)]
         .           pub enum BoundVariableKind {
         .               Ty(BoundTyKind),
         .               Region(BoundRegionKind),
         .               Const,
         .           }
         .           
         .           /// Binder is a binder for higher-ranked lifetimes or types. It is part of the
         .           /// compiler's representation for things like `for<'a> Fn(&'a isize)`
         .           /// (which would be represented by the type `PolyTraitRef ==
         .           /// Binder<'tcx, TraitRef>`). Note that when we instantiate,
         .           /// erase, or otherwise "discharge" these bound vars, we change the
         .           /// type from `Binder<'tcx, T>` to just `T` (see
         .           /// e.g., `liberate_late_bound_regions`).
         .           ///
         .           /// `Decodable` and `Encodable` are implemented for `Binder<T>` using the `impl_binder_encode_decode!` macro.
   334,040 ( 0.01%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
   409,606 ( 0.01%)  pub struct Binder<'tcx, T>(T, &'tcx List<BoundVariableKind>);
         .           
         .           impl<'tcx, T> Binder<'tcx, T>
         .           where
         .               T: TypeFoldable<'tcx>,
         .           {
         .               /// Wraps `value` in a binder, asserting that `value` does not
         .               /// contain any bound vars that would be bound by the
         .               /// binder. This is commonly used to 'inject' a value T into a
         .               /// different binding level.
    13,154 ( 0.00%)      pub fn dummy(value: T) -> Binder<'tcx, T> {
    45,508 ( 0.00%)          assert!(!value.has_escaping_bound_vars());
   114,747 ( 0.00%)          Binder(value, ty::List::empty())
    13,071 ( 0.00%)      }
         .           
         .               pub fn bind_with_vars(value: T, vars: &'tcx List<BoundVariableKind>) -> Binder<'tcx, T> {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(vars);
         .                       value.visit_with(&mut validator);
         .                   }
    40,397 ( 0.00%)          Binder(value, vars)
         .               }
         .           }
         .           
         .           impl<'tcx, T> Binder<'tcx, T> {
         .               /// Skips the binder and returns the "bound" value. This is a
         .               /// risky thing to do because it's easy to get confused about
         .               /// De Bruijn indices and the like. It is usually better to
         .               /// discharge the binder using `no_bound_vars` or
-- line 1053 ----------------------------------------
-- line 1059 ----------------------------------------
         .               /// accounting.
         .               ///
         .               /// Some examples where `skip_binder` is reasonable:
         .               ///
         .               /// - extracting the `DefId` from a PolyTraitRef;
         .               /// - comparing the self type of a PolyTraitRef to see if it is equal to
         .               ///   a type parameter `X`, since the type `X` does not reference any regions
         .               pub fn skip_binder(self) -> T {
 1,029,851 ( 0.03%)          self.0
         .               }
         .           
         .               pub fn bound_vars(&self) -> &'tcx List<BoundVariableKind> {
     2,717 ( 0.00%)          self.1
         .               }
         .           
         .               pub fn as_ref(&self) -> Binder<'tcx, &T> {
     7,676 ( 0.00%)          Binder(&self.0, self.1)
         .               }
         .           
         .               pub fn map_bound_ref_unchecked<F, U>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   let value = f(&self.0);
         .                   Binder(value, self.1)
-- line 1083 ----------------------------------------
-- line 1085 ----------------------------------------
         .           
         .               pub fn map_bound_ref<F, U: TypeFoldable<'tcx>>(&self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(&T) -> U,
         .               {
         .                   self.as_ref().map_bound(f)
         .               }
         .           
       643 ( 0.00%)      pub fn map_bound<F, U: TypeFoldable<'tcx>>(self, f: F) -> Binder<'tcx, U>
         .               where
         .                   F: FnOnce(T) -> U,
         .               {
    63,201 ( 0.00%)          let value = f(self.0);
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
   178,993 ( 0.01%)          Binder(value, self.1)
       712 ( 0.00%)      }
         .           
         .               pub fn try_map_bound<F, U: TypeFoldable<'tcx>, E>(self, f: F) -> Result<Binder<'tcx, U>, E>
         .               where
         .                   F: FnOnce(T) -> Result<U, E>,
         .               {
         .                   let value = f(self.0)?;
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.1);
         .                       value.visit_with(&mut validator);
         .                   }
    13,444 ( 0.00%)          Ok(Binder(value, self.1))
         .               }
         .           
         .               /// Wraps a `value` in a binder, using the same bound variables as the
         .               /// current `Binder`. This should not be used if the new value *changes*
         .               /// the bound variables. Note: the (old or new) value itself does not
         .               /// necessarily need to *name* all the bound variables.
         .               ///
         .               /// This currently doesn't do anything different than `bind`, because we
-- line 1122 ----------------------------------------
-- line 1126 ----------------------------------------
         .               pub fn rebind<U>(&self, value: U) -> Binder<'tcx, U>
         .               where
         .                   U: TypeFoldable<'tcx>,
         .               {
         .                   if cfg!(debug_assertions) {
         .                       let mut validator = ValidateBoundVars::new(self.bound_vars());
         .                       value.visit_with(&mut validator);
         .                   }
    25,070 ( 0.00%)          Binder(value, self.1)
         .               }
         .           
         .               /// Unwraps and returns the value within, but only if it contains
         .               /// no bound vars at all. (In other words, if this binder --
         .               /// and indeed any enclosing binder -- doesn't bind anything at
         .               /// all.) Otherwise, returns `None`.
         .               ///
         .               /// (One could imagine having a method that just unwraps a single
-- line 1142 ----------------------------------------
-- line 1143 ----------------------------------------
         .               /// binder, but permits late-bound vars bound by enclosing
         .               /// binders, but that would require adjusting the debruijn
         .               /// indices, and given the shallow binding structure we often use,
         .               /// would not be that useful.)
         .               pub fn no_bound_vars(self) -> Option<T>
         .               where
         .                   T: TypeFoldable<'tcx>,
         .               {
   106,452 ( 0.00%)          if self.0.has_escaping_bound_vars() { None } else { Some(self.skip_binder()) }
       125 ( 0.00%)      }
         .           
         .               /// Splits the contents into two things that share the same binder
         .               /// level as the original, returning two distinct binders.
         .               ///
         .               /// `f` should consider bound regions at depth 1 to be free, and
         .               /// anything it produces with bound regions at depth 1 will be
         .               /// bound in the resulting return values.
         .               pub fn split<U, V, F>(self, f: F) -> (Binder<'tcx, U>, Binder<'tcx, V>)
-- line 1160 ----------------------------------------
-- line 1170 ----------------------------------------
         .               pub fn transpose(self) -> Option<Binder<'tcx, T>> {
         .                   let bound_vars = self.1;
         .                   self.0.map(|v| Binder(v, bound_vars))
         .               }
         .           }
         .           
         .           /// Represents the projection of an associated type. In explicit UFCS
         .           /// form this would be written `<T as Trait<..>>::N`.
     1,453 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    83,481 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ProjectionTy<'tcx> {
         .               /// The parameters of the associated item.
    38,683 ( 0.00%)      pub substs: SubstsRef<'tcx>,
         .           
         .               /// The `DefId` of the `TraitItem` for the associated type `N`.
         .               ///
         .               /// Note that this is not the `DefId` of the `TraitRef` containing this
         .               /// associated type, which is in `tcx.associated_item(item_def_id).container`.
    44,972 ( 0.00%)      pub item_def_id: DefId,
         .           }
         .           
         .           impl<'tcx> ProjectionTy<'tcx> {
    21,476 ( 0.00%)      pub fn trait_def_id(&self, tcx: TyCtxt<'tcx>) -> DefId {
     6,136 ( 0.00%)          tcx.associated_item(self.item_def_id).container.id()
    24,544 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference and own substs from this projection.
         .               /// For example, if this is a projection of `<T as StreamingIterator>::Item<'a>`,
         .               /// then this function would return a `T: Iterator` trait reference and `['a]` as the own substs
     5,089 ( 0.00%)      pub fn trait_ref_and_own_substs(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .               ) -> (ty::TraitRef<'tcx>, &'tcx [ty::GenericArg<'tcx>]) {
     2,181 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
         .                   let trait_generics = tcx.generics_of(def_id);
     3,635 ( 0.00%)          (
         .                       ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, trait_generics) },
         .                       &self.substs[trait_generics.count()..],
         .                   )
     6,543 ( 0.00%)      }
         .           
         .               /// Extracts the underlying trait reference from this projection.
         .               /// For example, if this is a projection of `<T as Iterator>::Item`,
         .               /// then this function would return a `T: Iterator` trait reference.
         .               ///
         .               /// WARNING: This will drop the substs for generic associated types
         .               /// consider calling [Self::trait_ref_and_own_substs] to get those
         .               /// as well.
    27,234 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {
     3,026 ( 0.00%)          let def_id = self.trait_def_id(tcx);
     3,026 ( 0.00%)          ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }
    33,286 ( 0.00%)      }
         .           
     5,819 ( 0.00%)      pub fn self_ty(&self) -> Ty<'tcx> {
    17,457 ( 0.00%)          self.substs.type_at(0)
    11,638 ( 0.00%)      }
         .           }
         .           
       334 ( 0.00%)  #[derive(Copy, Clone, Debug, TypeFoldable)]
         .           pub struct GenSig<'tcx> {
         .               pub resume_ty: Ty<'tcx>,
         .               pub yield_ty: Ty<'tcx>,
         .               pub return_ty: Ty<'tcx>,
         .           }
         .           
         .           pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;
         .           
         .           /// Signature of a function type, which we have arbitrarily
         .           /// decided to use to refer to the input/output types.
         .           ///
         .           /// - `inputs`: is the list of arguments and their modes.
         .           /// - `output`: is the return type.
         .           /// - `c_variadic`: indicates whether this is a C-variadic function.
    45,942 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
    17,534 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct FnSig<'tcx> {
     4,246 ( 0.00%)      pub inputs_and_output: &'tcx List<Ty<'tcx>>,
    49,298 ( 0.00%)      pub c_variadic: bool,
    10,668 ( 0.00%)      pub unsafety: hir::Unsafety,
    38,917 ( 0.00%)      pub abi: abi::Abi,
         .           }
         .           
         .           impl<'tcx> FnSig<'tcx> {
    19,890 ( 0.00%)      pub fn inputs(&self) -> &'tcx [Ty<'tcx>] {
    88,800 ( 0.00%)          &self.inputs_and_output[..self.inputs_and_output.len() - 1]
    39,780 ( 0.00%)      }
         .           
    11,056 ( 0.00%)      pub fn output(&self) -> Ty<'tcx> {
    88,260 ( 0.00%)          self.inputs_and_output[self.inputs_and_output.len() - 1]
    22,112 ( 0.00%)      }
         .           
         .               // Creates a minimal `FnSig` to be used when encountering a `TyKind::Error` in a fallible
         .               // method.
         .               fn fake() -> FnSig<'tcx> {
         .                   FnSig {
         .                       inputs_and_output: List::empty(),
         .                       c_variadic: false,
         .                       unsafety: hir::Unsafety::Normal,
-- line 1267 ----------------------------------------
-- line 1270 ----------------------------------------
         .               }
         .           }
         .           
         .           pub type PolyFnSig<'tcx> = Binder<'tcx, FnSig<'tcx>>;
         .           
         .           impl<'tcx> PolyFnSig<'tcx> {
         .               #[inline]
         .               pub fn inputs(&self) -> Binder<'tcx, &'tcx [Ty<'tcx>]> {
     2,207 ( 0.00%)          self.map_bound_ref_unchecked(|fn_sig| fn_sig.inputs())
         .               }
         .               #[inline]
         .               pub fn input(&self, index: usize) -> ty::Binder<'tcx, Ty<'tcx>> {
     4,847 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.inputs()[index])
         .               }
         .               pub fn inputs_and_output(&self) -> ty::Binder<'tcx, &'tcx List<Ty<'tcx>>> {
         .                   self.map_bound_ref(|fn_sig| fn_sig.inputs_and_output)
       108 ( 0.00%)      }
         .               #[inline]
         .               pub fn output(&self) -> ty::Binder<'tcx, Ty<'tcx>> {
     2,782 ( 0.00%)          self.map_bound_ref(|fn_sig| fn_sig.output())
         .               }
         .               pub fn c_variadic(&self) -> bool {
       214 ( 0.00%)          self.skip_binder().c_variadic
       107 ( 0.00%)      }
         .               pub fn unsafety(&self) -> hir::Unsafety {
     1,594 ( 0.00%)          self.skip_binder().unsafety
       797 ( 0.00%)      }
         .               pub fn abi(&self) -> abi::Abi {
    17,132 ( 0.00%)          self.skip_binder().abi
     4,283 ( 0.00%)      }
         .           }
         .           
         .           pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;
         .           
       124 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
       960 ( 0.00%)  #[derive(HashStable)]
         .           pub struct ParamTy {
       296 ( 0.00%)      pub index: u32,
         .               pub name: Symbol,
         .           }
         .           
         .           impl<'tcx> ParamTy {
       134 ( 0.00%)      pub fn new(index: u32, name: Symbol) -> ParamTy {
         .                   ParamTy { index, name }
        67 ( 0.00%)      }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamTy {
        54 ( 0.00%)          ParamTy::new(def.index, def.name)
        27 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn to_ty(self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
         .                   tcx.mk_ty_param(self.index, self.name)
         .               }
         .           }
         .           
         .           #[derive(Copy, Clone, Hash, TyEncodable, TyDecodable, Eq, PartialEq, Ord, PartialOrd)]
         .           #[derive(HashStable)]
         .           pub struct ParamConst {
        86 ( 0.00%)      pub index: u32,
        86 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           impl ParamConst {
         .               pub fn new(index: u32, name: Symbol) -> ParamConst {
         .                   ParamConst { index, name }
         .               }
         .           
         .               pub fn for_def(def: &ty::GenericParamDef) -> ParamConst {
-- line 1338 ----------------------------------------
-- line 1440 ----------------------------------------
         .           /// the inference variable is supposed to satisfy the relation
         .           /// *for every value of the placeholder region*. To ensure that doesn't
         .           /// happen, you can use `leak_check`. This is more clearly explained
         .           /// by the [rustc dev guide].
         .           ///
         .           /// [1]: https://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/
         .           /// [2]: https://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/
         .           /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html
 1,889,216 ( 0.06%)  #[derive(Clone, PartialEq, Eq, Hash, Copy, TyEncodable, TyDecodable, PartialOrd, Ord)]
    20,216 ( 0.00%)  pub enum RegionKind {
         .               /// Region bound in a type or fn declaration which will be
         .               /// substituted 'early' -- that is, at the same time when type
         .               /// parameters are substituted.
         .               ReEarlyBound(EarlyBoundRegion),
         .           
         .               /// Region bound in a function scope, which will be substituted when the
         .               /// function is called.
    56,250 ( 0.00%)      ReLateBound(ty::DebruijnIndex, BoundRegion),
         .           
         .               /// When checking a function body, the types of all arguments and so forth
         .               /// that refer to bound region parameters are modified to refer to free
         .               /// region parameters.
         .               ReFree(FreeRegion),
         .           
         .               /// Static data that has an "infinite" lifetime. Top in the region lattice.
         .               ReStatic,
-- line 1465 ----------------------------------------
-- line 1478 ----------------------------------------
         .               /// regions visible from `U`, but not less than regions not visible
         .               /// from `U`.
         .               ReEmpty(ty::UniverseIndex),
         .           
         .               /// Erased region, used by trait selection, in MIR and during codegen.
         .               ReErased,
         .           }
         .           
    23,076 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, PartialOrd, Ord)]
         .           pub struct EarlyBoundRegion {
       627 ( 0.00%)      pub def_id: DefId,
    11,034 ( 0.00%)      pub index: u32,
     8,649 ( 0.00%)      pub name: Symbol,
         .           }
         .           
         .           /// A **`const`** **v**ariable **ID**.
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]
         .           pub struct ConstVid<'tcx> {
       468 ( 0.00%)      pub index: u32,
         1 ( 0.00%)      pub phantom: PhantomData<&'tcx ()>,
         .           }
         .           
         .           rustc_index::newtype_index! {
         .               /// A **region** (lifetime) **v**ariable **ID**.
         .               pub struct RegionVid {
         .                   DEBUG_FORMAT = custom,
         .               }
         .           }
-- line 1505 ----------------------------------------
-- line 1513 ----------------------------------------
         .           rustc_index::newtype_index! {
         .               pub struct BoundVar { .. }
         .           }
         .           
         .           #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub struct BoundTy {
         .               pub var: BoundVar,
     2,059 ( 0.00%)      pub kind: BoundTyKind,
         .           }
         .           
    35,189 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
         .           #[derive(HashStable)]
         .           pub enum BoundTyKind {
         .               Anon,
         .               Param(Symbol),
         .           }
         .           
         .           impl From<BoundVar> for BoundTy {
         .               fn from(var: BoundVar) -> Self {
         .                   BoundTy { var, kind: BoundTyKind::Anon }
         .               }
         .           }
         .           
         .           /// A `ProjectionPredicate` for an `ExistentialTraitRef`.
        91 ( 0.00%)  #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]
    13,619 ( 0.00%)  #[derive(HashStable, TypeFoldable)]
         .           pub struct ExistentialProjection<'tcx> {
     5,204 ( 0.00%)      pub item_def_id: DefId,
    22,878 ( 0.00%)      pub substs: SubstsRef<'tcx>,
     5,544 ( 0.00%)      pub term: Term<'tcx>,
         .           }
         .           
         .           pub type PolyExistentialProjection<'tcx> = Binder<'tcx, ExistentialProjection<'tcx>>;
         .           
         .           impl<'tcx> ExistentialProjection<'tcx> {
         .               /// Extracts the underlying existential trait reference from this projection.
         .               /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,
         .               /// then this function would return an `exists T. T: Iterator` existential trait
         .               /// reference.
       364 ( 0.00%)      pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {
       156 ( 0.00%)          let def_id = tcx.associated_item(self.item_def_id).container.id();
       104 ( 0.00%)          let subst_count = tcx.generics_of(def_id).count() - 1;
        52 ( 0.00%)          let substs = tcx.intern_substs(&self.substs[..subst_count]);
         .                   ty::ExistentialTraitRef { def_id, substs }
       468 ( 0.00%)      }
         .           
         .               pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::ProjectionPredicate<'tcx> {
         .                   // otherwise the escaping regions would be captured by the binders
         .                   debug_assert!(!self_ty.has_escaping_bound_vars());
-- line 1566 ----------------------------------------
-- line 1585 ----------------------------------------
         .                       item_def_id: projection_predicate.projection_ty.item_def_id,
         .                       substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),
         .                       term: projection_predicate.term,
         .                   }
         .               }
         .           }
         .           
         .           impl<'tcx> PolyExistentialProjection<'tcx> {
       310 ( 0.00%)      pub fn with_self_ty(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   self_ty: Ty<'tcx>,
         .               ) -> ty::PolyProjectionPredicate<'tcx> {
       310 ( 0.00%)          self.map_bound(|p| p.with_self_ty(tcx, self_ty))
       372 ( 0.00%)      }
         .           
         .               pub fn item_def_id(&self) -> DefId {
       236 ( 0.00%)          self.skip_binder().item_def_id
       118 ( 0.00%)      }
         .           }
         .           
         .           /// Region utilities
         .           impl RegionKind {
         .               /// Is this region named by the user?
         .               pub fn has_name(&self) -> bool {
         .                   match *self {
         .                       RegionKind::ReEarlyBound(ebr) => ebr.has_name(),
-- line 1611 ----------------------------------------
-- line 1616 ----------------------------------------
         .                       RegionKind::RePlaceholder(placeholder) => placeholder.name.is_named(),
         .                       RegionKind::ReEmpty(_) => false,
         .                       RegionKind::ReErased => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_late_bound(&self) -> bool {
     1,224 ( 0.00%)          matches!(*self, ty::ReLateBound(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_placeholder(&self) -> bool {
         .                   matches!(*self, ty::RePlaceholder(..))
         .               }
         .           
         .               #[inline]
         .               pub fn bound_at_or_above_binder(&self, index: ty::DebruijnIndex) -> bool {
    41,933 ( 0.00%)          match *self {
         .                       ty::ReLateBound(debruijn, _) => debruijn >= index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               pub fn type_flags(&self) -> TypeFlags {
         .                   let mut flags = TypeFlags::empty();
         .           
   106,206 ( 0.00%)          match *self {
         .                       ty::ReVar(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
         .                           flags = flags | TypeFlags::HAS_RE_INFER;
         .                       }
         .                       ty::RePlaceholder(..) => {
         .                           flags = flags | TypeFlags::HAS_FREE_REGIONS;
         .                           flags = flags | TypeFlags::HAS_FREE_LOCAL_REGIONS;
-- line 1651 ----------------------------------------
-- line 1669 ----------------------------------------
         .                       ty::ReErased => {
         .                           flags = flags | TypeFlags::HAS_RE_ERASED;
         .                       }
         .                   }
         .           
         .                   debug!("type_flags({:?}) = {:?}", self, flags);
         .           
         .                   flags
     5,674 ( 0.00%)      }
         .           
         .               /// Given an early-bound or free region, returns the `DefId` where it was bound.
         .               /// For example, consider the regions in this snippet of code:
         .               ///
         .               /// ```
         .               /// impl<'a> Foo {
         .               ///      ^^ -- early bound, declared on an impl
         .               ///
-- line 1685 ----------------------------------------
-- line 1713 ----------------------------------------
         .           
         .               #[inline(always)]
         .               pub fn flags(&self) -> TypeFlags {
         .                   self.flags
         .               }
         .           
         .               #[inline]
         .               pub fn is_unit(&self) -> bool {
     1,051 ( 0.00%)          match self.kind() {
       317 ( 0.00%)              Tuple(ref tys) => tys.is_empty(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_never(&self) -> bool {
    11,587 ( 0.00%)          matches!(self.kind(), Never)
         .               }
         .           
         .               #[inline]
         .               pub fn is_primitive(&self) -> bool {
         .                   self.kind().is_primitive()
         .               }
         .           
         .               #[inline]
-- line 1737 ----------------------------------------
-- line 1741 ----------------------------------------
         .           
         .               #[inline]
         .               pub fn is_ref(&self) -> bool {
         .                   matches!(self.kind(), Ref(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_var(&self) -> bool {
    22,625 ( 0.00%)          matches!(self.kind(), Infer(TyVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_vid(&self) -> Option<ty::TyVid> {
    18,520 ( 0.00%)          match self.kind() {
     2,266 ( 0.00%)              &Infer(TyVar(vid)) => Some(vid),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_ty_infer(&self) -> bool {
       123 ( 0.00%)          matches!(self.kind(), Infer(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_phantom_data(&self) -> bool {
         3 ( 0.00%)          if let Adt(def, _) = self.kind() { def.is_phantom_data() } else { false }
         .               }
         .           
         .               #[inline]
         .               pub fn is_bool(&self) -> bool {
         .                   *self.kind() == Bool
         .               }
         .           
         .               /// Returns `true` if this type is a `str`.
         .               #[inline]
         .               pub fn is_str(&self) -> bool {
         .                   *self.kind() == Str
         .               }
         .           
         .               #[inline]
         .               pub fn is_param(&self, index: u32) -> bool {
       289 ( 0.00%)          match self.kind() {
         .                       ty::Param(ref data) => data.index == index,
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_slice(&self) -> bool {
         .                   match self.kind() {
         .                       RawPtr(TypeAndMut { ty, .. }) | Ref(_, ty, _) => matches!(ty.kind(), Slice(_) | Str),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_array(&self) -> bool {
       105 ( 0.00%)          matches!(self.kind(), Array(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_simd(&self) -> bool {
         .                   match self.kind() {
         .                       Adt(def, _) => def.repr.simd(),
         .                       _ => false,
         .                   }
         .               }
         .           
       158 ( 0.00%)      pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
       316 ( 0.00%)          match self.kind() {
         .                       Array(ty, _) | Slice(ty) => ty,
         .                       Str => tcx.mk_mach_uint(ty::UintTy::U8),
         .                       _ => bug!("`sequence_element_type` called on non-sequence value: {}", self),
         .                   }
       158 ( 0.00%)      }
         .           
         .               pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {
         .                   match self.kind() {
         .                       Adt(def, substs) => {
         .                           assert!(def.repr.simd(), "`simd_size_and_type` called on non-SIMD type");
         .                           let variant = def.non_enum_variant();
         .                           let f0_ty = variant.fields[0].ty(tcx, substs);
         .           
-- line 1824 ----------------------------------------
-- line 1861 ----------------------------------------
         .                   match self.kind() {
         .                       Ref(_, _, mutability) => Some(*mutability),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               #[inline]
         .               pub fn is_unsafe_ptr(&self) -> bool {
     2,730 ( 0.00%)          matches!(self.kind(), RawPtr(_))
         .               }
         .           
         .               /// Tests if this is any kind of primitive pointer type (reference, raw pointer, fn pointer).
         .               #[inline]
         .               pub fn is_any_ptr(&self) -> bool {
         2 ( 0.00%)          self.is_region_ptr() || self.is_unsafe_ptr() || self.is_fn_ptr()
         .               }
         .           
         .               #[inline]
         .               pub fn is_box(&self) -> bool {
    20,010 ( 0.00%)          match self.kind() {
     5,089 ( 0.00%)              Adt(def, _) => def.is_box(),
         .                       _ => false,
         .                   }
         .               }
         .           
         .               /// Panics if called on any type other than `Box<T>`.
       544 ( 0.00%)      pub fn boxed_ty(&self) -> Ty<'tcx> {
       544 ( 0.00%)          match self.kind() {
     1,360 ( 0.00%)              Adt(def, substs) if def.is_box() => substs.type_at(0),
         .                       _ => bug!("`boxed_ty` is called on non-box type {:?}", self),
         .                   }
       544 ( 0.00%)      }
         .           
         .               /// A scalar type is one that denotes an atomic datum, with no sub-components.
         .               /// (A RawPtr is scalar because it represents a non-managed pointer, so its
         .               /// contents are abstract to rustc.)
         .               #[inline]
         .               pub fn is_scalar(&self) -> bool {
       198 ( 0.00%)          matches!(
       458 ( 0.00%)              self.kind(),
         .                       Bool | Char
         .                           | Int(_)
         .                           | Float(_)
         .                           | Uint(_)
         .                           | FnDef(..)
         .                           | FnPtr(_)
         .                           | RawPtr(_)
         .                           | Infer(IntVar(_) | FloatVar(_))
         .                   )
         .               }
         .           
         .               /// Returns `true` if this type is a floating point type.
         .               #[inline]
         .               pub fn is_floating_point(&self) -> bool {
       290 ( 0.00%)          matches!(self.kind(), Float(_) | Infer(FloatVar(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_trait(&self) -> bool {
       130 ( 0.00%)          matches!(self.kind(), Dynamic(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_enum(&self) -> bool {
       860 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_enum())
         .               }
         .           
         .               #[inline]
         .               pub fn is_union(&self) -> bool {
     2,495 ( 0.00%)          matches!(self.kind(), Adt(adt_def, _) if adt_def.is_union())
         .               }
         .           
         .               #[inline]
         .               pub fn is_closure(&self) -> bool {
       690 ( 0.00%)          matches!(self.kind(), Closure(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_generator(&self) -> bool {
     1,221 ( 0.00%)          matches!(self.kind(), Generator(..))
         .               }
         .           
         .               #[inline]
         .               pub fn is_integral(&self) -> bool {
     1,226 ( 0.00%)          matches!(self.kind(), Infer(IntVar(_)) | Int(_) | Uint(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh_ty(&self) -> bool {
         .                   matches!(self.kind(), Infer(FreshTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fresh(&self) -> bool {
     5,024 ( 0.00%)          matches!(self.kind(), Infer(FreshTy(_) | FreshIntTy(_) | FreshFloatTy(_)))
         .               }
         .           
         .               #[inline]
         .               pub fn is_char(&self) -> bool {
         .                   matches!(self.kind(), Char)
         .               }
         .           
         .               #[inline]
         .               pub fn is_numeric(&self) -> bool {
         .                   self.is_integral() || self.is_floating_point()
         .               }
         .           
         .               #[inline]
         .               pub fn is_signed(&self) -> bool {
        75 ( 0.00%)          matches!(self.kind(), Int(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_ptr_sized_integral(&self) -> bool {
        36 ( 0.00%)          matches!(self.kind(), Int(ty::IntTy::Isize) | Uint(ty::UintTy::Usize))
         .               }
         .           
         .               #[inline]
         .               pub fn has_concrete_skeleton(&self) -> bool {
         .                   !matches!(self.kind(), Param(_) | Infer(_) | Error(_))
         .               }
         .           
         .               /// Returns the type and mutability of `*ty`.
         .               ///
         .               /// The parameter `explicit` indicates if this is an *explicit* dereference.
         .               /// Some types -- notably unsafe ptrs -- can only be dereferenced explicitly.
     3,026 ( 0.00%)      pub fn builtin_deref(&self, explicit: bool) -> Option<TypeAndMut<'tcx>> {
    20,848 ( 0.00%)          match self.kind() {
       626 ( 0.00%)              Adt(def, _) if def.is_box() => {
       283 ( 0.00%)                  Some(TypeAndMut { ty: self.boxed_ty(), mutbl: hir::Mutability::Not })
         .                       }
     9,982 ( 0.00%)              Ref(_, ty, mutbl) => Some(TypeAndMut { ty, mutbl: *mutbl }),
     1,540 ( 0.00%)              RawPtr(mt) if explicit => Some(*mt),
         .                       _ => None,
         .                   }
     6,052 ( 0.00%)      }
         .           
         .               /// Returns the type of `ty[i]`.
         .               pub fn builtin_index(&self) -> Option<Ty<'tcx>> {
         .                   match self.kind() {
         .                       Array(ty, _) | Slice(ty) => Some(ty),
         .                       _ => None,
         .                   }
         .               }
         .           
    50,360 ( 0.00%)      pub fn fn_sig(&self, tcx: TyCtxt<'tcx>) -> PolyFnSig<'tcx> {
    25,180 ( 0.00%)          match self.kind() {
    18,606 ( 0.00%)              FnDef(def_id, substs) => tcx.fn_sig(*def_id).subst(tcx, substs),
       465 ( 0.00%)              FnPtr(f) => *f,
         .                       Error(_) => {
         .                           // ignore errors (#54954)
         .                           ty::Binder::dummy(FnSig::fake())
         .                       }
         .                       Closure(..) => bug!(
         .                           "to get the signature of a closure, use `substs.as_closure().sig()` not `fn_sig()`",
         .                       ),
         .                       _ => bug!("Ty::fn_sig() called on non-fn type: {:?}", self),
         .                   }
    56,655 ( 0.00%)      }
         .           
         .               #[inline]
         .               pub fn is_fn(&self) -> bool {
     4,455 ( 0.00%)          matches!(self.kind(), FnDef(..) | FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_fn_ptr(&self) -> bool {
         .                   matches!(self.kind(), FnPtr(_))
         .               }
         .           
         .               #[inline]
         .               pub fn is_impl_trait(&self) -> bool {
         .                   matches!(self.kind(), Opaque(..))
         .               }
         .           
         .               #[inline]
         .               pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {
     3,824 ( 0.00%)          match self.kind() {
         .                       Adt(adt, _) => Some(adt),
         .                       _ => None,
         .                   }
         .               }
         .           
         .               /// Iterates over tuple fields.
         .               /// Panics when called on anything but a tuple.
       396 ( 0.00%)      pub fn tuple_fields(&self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> {
     2,246 ( 0.00%)          match self.kind() {
     1,818 ( 0.00%)              Tuple(substs) => substs.iter().map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       792 ( 0.00%)      }
         .           
         .               /// Get the `i`-th element of a tuple.
         .               /// Panics when called on anything but a tuple.
        59 ( 0.00%)      pub fn tuple_element_ty(&self, i: usize) -> Option<Ty<'tcx>> {
       118 ( 0.00%)          match self.kind() {
       118 ( 0.00%)              Tuple(substs) => substs.iter().nth(i).map(|field| field.expect_ty()),
         .                       _ => bug!("tuple_fields called on non-tuple"),
         .                   }
       118 ( 0.00%)      }
         .           
         .               /// If the type contains variants, returns the valid range of variant indices.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
         .               pub fn variant_range(&self, tcx: TyCtxt<'tcx>) -> Option<Range<VariantIdx>> {
         .                   match self.kind() {
         .                       TyKind::Adt(adt, _) => Some(adt.variant_range()),
-- line 2068 ----------------------------------------
-- line 2073 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// If the type contains variants, returns the variant for `variant_index`.
         .               /// Panics if `variant_index` is out of range.
         .               //
         .               // FIXME: This requires the optimized MIR in the case of generators.
         .               #[inline]
     3,210 ( 0.00%)      pub fn discriminant_for_variant(
         .                   &self,
         .                   tcx: TyCtxt<'tcx>,
         .                   variant_index: VariantIdx,
         .               ) -> Option<Discr<'tcx>> {
     6,033 ( 0.00%)          match self.kind() {
     2,942 ( 0.00%)              TyKind::Adt(adt, _) if adt.variants.is_empty() => {
         .                           // This can actually happen during CTFE, see
         .                           // https://github.com/rust-lang/rust/issues/89765.
         .                           None
         .                       }
     1,471 ( 0.00%)              TyKind::Adt(adt, _) if adt.is_enum() => {
         .                           Some(adt.discriminant_for_variant(tcx, variant_index))
         .                       }
         .                       TyKind::Generator(def_id, substs, _) => {
        88 ( 0.00%)                  Some(substs.as_generator().discriminant_for_variant(*def_id, tcx, variant_index))
         .                       }
         .                       _ => None,
         .                   }
     2,568 ( 0.00%)      }
         .           
         .               /// Returns the type of the discriminant of this type.
     5,420 ( 0.00%)      pub fn discriminant_ty(&'tcx self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {
     2,710 ( 0.00%)          match self.kind() {
     4,288 ( 0.00%)              ty::Adt(adt, _) if adt.is_enum() => adt.repr.discr_type().to_ty(tcx),
         .                       ty::Generator(_, substs, _) => substs.as_generator().discr_ty(tcx),
         .           
         .                       ty::Param(_) | ty::Projection(_) | ty::Opaque(..) | ty::Infer(ty::TyVar(_)) => {
         .                           let assoc_items = tcx.associated_item_def_ids(
         .                               tcx.require_lang_item(hir::LangItem::DiscriminantKind, None),
         .                           );
         .                           tcx.mk_projection(assoc_items[0], tcx.intern_substs(&[self.into()]))
         .                       }
-- line 2113 ----------------------------------------
-- line 2135 ----------------------------------------
         .                       | ty::Infer(IntVar(_) | FloatVar(_)) => tcx.types.u8,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(_)
         .                       | ty::Infer(FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`discriminant_ty` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
     4,336 ( 0.00%)      }
         .           
         .               /// Returns the type of metadata for (potentially fat) pointers to this type.
        18 ( 0.00%)      pub fn ptr_metadata_ty(
         .                   &'tcx self,
         .                   tcx: TyCtxt<'tcx>,
         .                   normalize: impl FnMut(Ty<'tcx>) -> Ty<'tcx>,
         .               ) -> Ty<'tcx> {
        18 ( 0.00%)          let tail = tcx.struct_tail_with_normalize(self, normalize);
        10 ( 0.00%)          match tail.kind() {
         .                       // Sized types
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
-- line 2160 ----------------------------------------
-- line 2170 ----------------------------------------
         .                       | ty::Foreign(..)
         .                       // If returned by `struct_tail_without_normalization` this is a unit struct
         .                       // without any fields, or not a struct, and therefore is Sized.
         .                       | ty::Adt(..)
         .                       // If returned by `struct_tail_without_normalization` this is the empty tuple,
         .                       // a.k.a. unit type, which is Sized
         .                       | ty::Tuple(..) => tcx.types.unit,
         .           
         4 ( 0.00%)              ty::Str | ty::Slice(_) => tcx.types.usize,
         .                       ty::Dynamic(..) => {
         .                           let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();
         .                           tcx.type_of(dyn_metadata).subst(tcx, &[tail.into()])
         .                       },
         .           
         .                       ty::Projection(_)
         .                       | ty::Param(_)
         .                       | ty::Opaque(..)
         .                       | ty::Infer(ty::TyVar(_))
         .                       | ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`ptr_metadata_ty` applied to unexpected type: {:?}", tail)
         .                       }
         .                   }
        16 ( 0.00%)      }
         .           
         .               /// When we create a closure, we record its kind (i.e., what trait
         .               /// it implements) into its `ClosureSubsts` using a type
         .               /// parameter. This is kind of a phantom type, except that the
         .               /// most convenient thing for us to are the integral types. This
         .               /// function converts such a special type into the closure
         .               /// kind. To go the other way, use
         .               /// `tcx.closure_kind_ty(closure_kind)`.
         .               ///
         .               /// Note that during type checking, we use an inference variable
         .               /// to represent the closure kind, because it has not yet been
         .               /// inferred. Once upvar inference (in `rustc_typeck/src/check/upvar.rs`)
         .               /// is complete, that type variable will be unified.
     1,258 ( 0.00%)      pub fn to_opt_closure_kind(&self) -> Option<ty::ClosureKind> {
     2,516 ( 0.00%)          match self.kind() {
     2,504 ( 0.00%)              Int(int_ty) => match int_ty {
         .                           ty::IntTy::I8 => Some(ty::ClosureKind::Fn),
         .                           ty::IntTy::I16 => Some(ty::ClosureKind::FnMut),
         .                           ty::IntTy::I32 => Some(ty::ClosureKind::FnOnce),
         .                           _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                       },
         .           
         .                       // "Bound" types appear in canonical queries when the
         .                       // closure type is not yet known
         .                       Bound(..) | Infer(_) => None,
         .           
         .                       Error(_) => Some(ty::ClosureKind::Fn),
         .           
         .                       _ => bug!("cannot convert type `{:?}` to a closure kind", self),
         .                   }
     1,258 ( 0.00%)      }
         .           
         .               /// Fast path helper for testing if a type is `Sized`.
         .               ///
         .               /// Returning true means the type is known to be sized. Returning
         .               /// `false` means nothing -- could be sized, might not be.
         .               ///
         .               /// Note that we could never rely on the fact that a type such as `[_]` is
         .               /// trivially `!Sized` because we could be in a type environment with a
         .               /// bound such as `[_]: Copy`. A function with such a bound obviously never
         .               /// can be called, but that doesn't mean it shouldn't typecheck. This is why
         .               /// this method doesn't return `Option<bool>`.
    90,567 ( 0.00%)      pub fn is_trivially_sized(&self, tcx: TyCtxt<'tcx>) -> bool {
    60,378 ( 0.00%)          match self.kind() {
         .                       ty::Infer(ty::IntVar(_) | ty::FloatVar(_))
         .                       | ty::Uint(_)
         .                       | ty::Int(_)
         .                       | ty::Bool
         .                       | ty::Float(_)
         .                       | ty::FnDef(..)
         .                       | ty::FnPtr(_)
         .                       | ty::RawPtr(..)
-- line 2246 ----------------------------------------
-- line 2250 ----------------------------------------
         .                       | ty::GeneratorWitness(..)
         .                       | ty::Array(..)
         .                       | ty::Closure(..)
         .                       | ty::Never
         .                       | ty::Error(_) => true,
         .           
         .                       ty::Str | ty::Slice(_) | ty::Dynamic(..) | ty::Foreign(..) => false,
         .           
     1,606 ( 0.00%)              ty::Tuple(tys) => tys.iter().all(|ty| ty.expect_ty().is_trivially_sized(tcx)),
         .           
    12,768 ( 0.00%)              ty::Adt(def, _substs) => def.sized_constraint(tcx).is_empty(),
         .           
         .                       ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,
         .           
         .                       ty::Infer(ty::TyVar(_)) => false,
         .           
         .                       ty::Bound(..)
         .                       | ty::Placeholder(..)
         .                       | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {
         .                           bug!("`is_trivially_sized` applied to unexpected type: {:?}", self)
         .                       }
         .                   }
    90,567 ( 0.00%)      }
         .           }
         .           
         .           /// Extra information about why we ended up with a particular variance.
         .           /// This is only used to add more information to error messages, and
         .           /// has no effect on soundness. While choosing the 'wrong' `VarianceDiagInfo`
         .           /// may lead to confusing notes in error messages, it will never cause
         .           /// a miscompilation or unsoundness.
         .           ///
         .           /// When in doubt, use `VarianceDiagInfo::default()`
       123 ( 0.00%)  #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
         .           pub enum VarianceDiagInfo<'tcx> {
         .               /// No additional information - this is the default.
         .               /// We will not add any additional information to error messages.
         .               #[default]
         .               None,
         .               /// We switched our variance because a generic argument occurs inside
         .               /// the invariant generic argument of another type.
         .               Invariant {
-- line 2290 ----------------------------------------
-- line 2295 ----------------------------------------
         .                   /// (e.g. `0` for `*mut T`, `1` for `MyStruct<'CovariantParam, 'InvariantParam>`)
         .                   param_index: u32,
         .               },
         .           }
         .           
         .           impl<'tcx> VarianceDiagInfo<'tcx> {
         .               /// Mirrors `Variance::xform` - used to 'combine' the existing
         .               /// and new `VarianceDiagInfo`s when our variance changes.
    20,388 ( 0.00%)      pub fn xform(self, other: VarianceDiagInfo<'tcx>) -> VarianceDiagInfo<'tcx> {
         .                   // For now, just use the first `VarianceDiagInfo::Invariant` that we see
    30,582 ( 0.00%)          match self {
         .                       VarianceDiagInfo::None => other,
         .                       VarianceDiagInfo::Invariant { .. } => self,
         .                   }
    10,194 ( 0.00%)      }
         .           }

10,872,708 ( 0.36%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/sty.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs
--------------------------------------------------------------------------------
Ir                 

-- line 14 ----------------------------------------
        .           
        .           pub type EncodeResult = Result<(), !>;
        .           
        .           pub struct Encoder {
        .               pub data: Vec<u8>,
        .           }
        .           
        .           impl Encoder {
        1 ( 0.00%)      pub fn new(data: Vec<u8>) -> Encoder {
        4 ( 0.00%)          Encoder { data }
        1 ( 0.00%)      }
        .           
        1 ( 0.00%)      pub fn into_inner(self) -> Vec<u8> {
        4 ( 0.00%)          self.data
        1 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn position(&self) -> usize {
   13,591 ( 0.00%)          self.data.len()
        .               }
        .           }
        .           
        .           macro_rules! write_leb128 {
        .               ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{
        .                   const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);
        .                   let old_len = $enc.data.len();
        .           
-- line 40 ----------------------------------------
-- line 67 ----------------------------------------
        .           
        .               #[inline]
        .               fn emit_unit(&mut self) -> EncodeResult {
        .                   Ok(())
        .               }
        .           
        .               #[inline]
        .               fn emit_usize(&mut self, v: usize) -> EncodeResult {
  650,522 ( 0.02%)          write_leb128!(self, v, usize, write_usize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u128(&mut self, v: u128) -> EncodeResult {
   11,333 ( 0.00%)          write_leb128!(self, v, u128, write_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u64(&mut self, v: u64) -> EncodeResult {
    6,307 ( 0.00%)          write_leb128!(self, v, u64, write_u64_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u32(&mut self, v: u32) -> EncodeResult {
  602,972 ( 0.02%)          write_leb128!(self, v, u32, write_u32_leb128)
        .               }
        .           
        .               #[inline]
        .               fn emit_u16(&mut self, v: u16) -> EncodeResult {
        .                   self.data.extend_from_slice(&v.to_le_bytes());
        .                   Ok(())
        .               }
        .           
-- line 98 ----------------------------------------
-- line 131 ----------------------------------------
        .               #[inline]
        .               fn emit_i8(&mut self, v: i8) -> EncodeResult {
        .                   let as_u8: u8 = unsafe { std::mem::transmute(v) };
        .                   self.emit_u8(as_u8)
        .               }
        .           
        .               #[inline]
        .               fn emit_bool(&mut self, v: bool) -> EncodeResult {
    8,986 ( 0.00%)          self.emit_u8(if v { 1 } else { 0 })
        .               }
        .           
        .               #[inline]
        .               fn emit_f64(&mut self, v: f64) -> EncodeResult {
        .                   let as_u64: u64 = v.to_bits();
        .                   self.emit_u64(as_u64)
        .               }
        .           
-- line 147 ----------------------------------------
-- line 549 ----------------------------------------
        .               #[inline]
        .               pub fn advance(&mut self, bytes: usize) {
        .                   self.position += bytes;
        .               }
        .           
        .               #[inline]
        .               pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {
        .                   let start = self.position;
      137 ( 0.00%)          self.position += bytes;
      137 ( 0.00%)          &self.data[start..self.position]
        .               }
        .           }
        .           
        .           macro_rules! read_leb128 {
        .               ($dec:expr, $fun:ident) => {{ leb128::$fun($dec.data, &mut $dec.position) }};
        .           }
        .           
        .           impl<'a> serialize::Decoder for Decoder<'a> {
        .               #[inline]
        .               fn read_unit(&mut self) -> () {
        .                   ()
        .               }
        .           
        .               #[inline]
        .               fn read_u128(&mut self) -> u128 {
    3,607 ( 0.00%)          read_leb128!(self, read_u128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_u64(&mut self) -> u64 {
   21,731 ( 0.00%)          read_leb128!(self, read_u64_leb128)
        .               }
        .           
        .               #[inline]
  160,522 ( 0.01%)      fn read_u32(&mut self) -> u32 {
  790,265 ( 0.03%)          read_leb128!(self, read_u32_leb128)
  321,044 ( 0.01%)      }
        .           
        .               #[inline]
        .               fn read_u16(&mut self) -> u16 {
  567,532 ( 0.02%)          let bytes = [self.data[self.position], self.data[self.position + 1]];
   81,548 ( 0.00%)          let value = u16::from_le_bytes(bytes);
  163,908 ( 0.01%)          self.position += 2;
        .                   value
        .               }
        .           
        .               #[inline]
        .               fn read_u8(&mut self) -> u8 {
4,366,773 ( 0.15%)          let value = self.data[self.position];
  914,249 ( 0.03%)          self.position += 1;
        .                   value
        .               }
        .           
        .               #[inline]
1,249,651 ( 0.04%)      fn read_usize(&mut self) -> usize {
1,250,297 ( 0.04%)          read_leb128!(self, read_usize_leb128)
2,499,302 ( 0.08%)      }
        .           
        .               #[inline]
        .               fn read_i128(&mut self) -> i128 {
        .                   read_leb128!(self, read_i128_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_i64(&mut self) -> i64 {
-- line 613 ----------------------------------------
-- line 637 ----------------------------------------
        .               #[inline]
        .               fn read_isize(&mut self) -> isize {
        .                   read_leb128!(self, read_isize_leb128)
        .               }
        .           
        .               #[inline]
        .               fn read_bool(&mut self) -> bool {
        .                   let value = self.read_u8();
   57,894 ( 0.00%)          value != 0
        .               }
        .           
        .               #[inline]
        .               fn read_f64(&mut self) -> f64 {
        .                   let bits = self.read_u64();
        .                   f64::from_bits(bits)
        .               }
        .           
-- line 653 ----------------------------------------
-- line 660 ----------------------------------------
        .               #[inline]
        .               fn read_char(&mut self) -> char {
        .                   let bits = self.read_u32();
        .                   std::char::from_u32(bits).unwrap()
        .               }
        .           
        .               #[inline]
        .               fn read_str(&mut self) -> Cow<'_, str> {
  166,305 ( 0.01%)          let len = self.read_usize();
  823,726 ( 0.03%)          let sentinel = self.data[self.position + len];
  206,416 ( 0.01%)          assert!(sentinel == STR_SENTINEL);
        .                   let s = unsafe {
        .                       std::str::from_utf8_unchecked(&self.data[self.position..self.position + len])
        .                   };
  516,040 ( 0.02%)          self.position += len + 1;
  188,952 ( 0.01%)          Cow::Borrowed(s)
        .               }
        .           
        .               #[inline]
        .               fn read_raw_bytes_into(&mut self, s: &mut [u8]) {
    1,787 ( 0.00%)          let start = self.position;
   11,597 ( 0.00%)          self.position += s.len();
    1,787 ( 0.00%)          s.copy_from_slice(&self.data[start..self.position]);
        .               }
        .           }
        .           
        .           // Specializations for contiguous byte sequences follow. The default implementations for slices
        .           // encode and decode each element individually. This isn't necessary for `u8` slices when using
        .           // opaque encoders and decoders, because each `u8` is unchanged by encoding and decoding.
        .           // Therefore, we can use more efficient implementations that process the entire sequence at once.
        .           
-- line 690 ----------------------------------------

2,584,804 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/opaque.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs
--------------------------------------------------------------------------------
Ir                 

-- line 28 ----------------------------------------
        .           
        .               /// Returns a static string we can use for printouts.
        .               fn tag(&self) -> &'static str;
        .           
        .               /// Returns `true` if the value `a` is the "expected" type in the
        .               /// relation. Just affects error messages.
        .               fn a_is_expected(&self) -> bool;
        .           
   30,984 ( 0.00%)      fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R
        .               where
        .                   F: FnOnce(&mut Self) -> R,
        .               {
        .                   f(self)
   27,162 ( 0.00%)      }
        .           
        .               /// Generic relation routine suitable for most anything.
  158,277 ( 0.01%)      fn relate<T: Relate<'tcx>>(&mut self, a: T, b: T) -> RelateResult<'tcx, T> {
  434,173 ( 0.01%)          Relate::relate(self, a, b)
  134,704 ( 0.00%)      }
        .           
        .               /// Relate the two substitutions for the given item. The default
        .               /// is to look up the variance for the item and proceed
        .               /// accordingly.
   40,100 ( 0.00%)      fn relate_item_substs(
        .                   &mut self,
        .                   item_def_id: DefId,
        .                   a_subst: SubstsRef<'tcx>,
        .                   b_subst: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
        .                   debug!(
        .                       "relate_item_substs(item_def_id={:?}, a_subst={:?}, b_subst={:?})",
        .                       item_def_id, a_subst, b_subst
        .                   );
        .           
        .                   let tcx = self.tcx();
        .                   let opt_variances = tcx.variances_of(item_def_id);
   16,040 ( 0.00%)          relate_substs(self, Some((item_def_id, opt_variances)), a_subst, b_subst)
   36,090 ( 0.00%)      }
        .           
        .               /// Switch variance for the purpose of relating `a` and `b`.
        .               fn relate_with_variance<T: Relate<'tcx>>(
        .                   &mut self,
        .                   variance: ty::Variance,
        .                   info: ty::VarianceDiagInfo<'tcx>,
        .                   a: T,
        .                   b: T,
-- line 73 ----------------------------------------
-- line 108 ----------------------------------------
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self>;
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Relate impls
        .           
   46,407 ( 0.00%)  pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: ty::TypeAndMut<'tcx>,
        .               b: ty::TypeAndMut<'tcx>,
        .               base_ty: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, ty::TypeAndMut<'tcx>> {
        .               debug!("{}.mts({:?}, {:?})", relation.tag(), a, b);
    8,632 ( 0.00%)      if a.mutbl != b.mutbl {
       84 ( 0.00%)          Err(TypeError::Mutability)
        .               } else {
        .                   let mutbl = a.mutbl;
        .                   let (variance, info) = match mutbl {
        .                       ast::Mutability::Not => (ty::Covariant, ty::VarianceDiagInfo::None),
        .                       ast::Mutability::Mut => {
        .                           (ty::Invariant, ty::VarianceDiagInfo::Invariant { ty: base_ty, param_index: 0 })
        .                       }
        .                   };
    3,372 ( 0.00%)          let ty = relation.relate_with_variance(variance, info, a.ty, b.ty)?;
   20,455 ( 0.00%)          Ok(ty::TypeAndMut { ty, mutbl })
        .               }
   46,489 ( 0.00%)  }
        .           
    2,520 ( 0.00%)  pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               variances: Option<(DefId, &[ty::Variance])>,
        .               a_subst: SubstsRef<'tcx>,
        .               b_subst: SubstsRef<'tcx>,
        .           ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
  134,407 ( 0.00%)      let tcx = relation.tcx();
   75,719 ( 0.00%)      let mut cached_ty = None;
        .           
        .               let params = iter::zip(a_subst, b_subst).enumerate().map(|(i, (a, b))| {
  468,208 ( 0.02%)          let (variance, variance_info) = match variances {
   15,506 ( 0.00%)              Some((ty_def_id, variances)) => {
   23,259 ( 0.00%)                  let variance = variances[i];
    7,753 ( 0.00%)                  let variance_info = if variance == ty::Invariant {
        .                               let ty =
    2,606 ( 0.00%)                          cached_ty.get_or_insert_with(|| tcx.type_of(ty_def_id).subst(tcx, a_subst));
        .                               ty::VarianceDiagInfo::Invariant { ty, param_index: i.try_into().unwrap() }
        .                           } else {
        .                               ty::VarianceDiagInfo::default()
        .                           };
        .                           (variance, variance_info)
        .                       }
        .                       None => (ty::Invariant, ty::VarianceDiagInfo::default()),
        .                   };
   89,351 ( 0.00%)          relation.relate_with_variance(variance, variance_info, a, b)
        .               });
        .           
        .               tcx.mk_substs(params)
    3,024 ( 0.00%)  }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {
   33,956 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::FnSig<'tcx>,
        .                   b: ty::FnSig<'tcx>,
        .               ) -> RelateResult<'tcx, ty::FnSig<'tcx>> {
        .                   let tcx = relation.tcx();
        .           
   15,672 ( 0.00%)          if a.c_variadic != b.c_variadic {
        .                       return Err(TypeError::VariadicMismatch(expected_found(
        .                           relation,
        .                           a.c_variadic,
        .                           b.c_variadic,
        .                       )));
        .                   }
   10,662 ( 0.00%)          let unsafety = relation.relate(a.unsafety, b.unsafety)?;
        .                   let abi = relation.relate(a.abi, b.abi)?;
        .           
   23,401 ( 0.00%)          if a.inputs().len() != b.inputs().len() {
        .                       return Err(TypeError::ArgCount);
        .                   }
        .           
   23,508 ( 0.00%)          let inputs_and_output = iter::zip(a.inputs(), b.inputs())
   10,412 ( 0.00%)              .map(|(&a, &b)| ((a, b), false))
   20,896 ( 0.00%)              .chain(iter::once(((a.output(), b.output()), true)))
    5,058 ( 0.00%)              .map(|((a, b), is_output)| {
    5,058 ( 0.00%)                  if is_output {
      124 ( 0.00%)                      relation.relate(a, b)
        .                           } else {
        .                               relation.relate_with_variance(
        .                                   ty::Contravariant,
        .                                   ty::VarianceDiagInfo::default(),
        .                                   a,
        .                                   b,
        .                               )
        .                           }
        .                       })
        .                       .enumerate()
   10,992 ( 0.00%)              .map(|(i, r)| match r {
        .                           Err(TypeError::Sorts(exp_found) | TypeError::ArgumentSorts(exp_found, _)) => {
        .                               Err(TypeError::ArgumentSorts(exp_found, i))
        .                           }
        .                           Err(TypeError::Mutability | TypeError::ArgumentMutability(_)) => {
        .                               Err(TypeError::ArgumentMutability(i))
        .                           }
   25,840 ( 0.00%)                  r => r,
        .                       });
   18,391 ( 0.00%)          Ok(ty::FnSig {
        .                       inputs_and_output: tcx.mk_type_list(inputs_and_output)?,
    2,612 ( 0.00%)              c_variadic: a.c_variadic,
        .                       unsafety,
        .                       abi,
        .                   })
   23,508 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::BoundConstness {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::BoundConstness,
        .                   b: ty::BoundConstness,
        .               ) -> RelateResult<'tcx, ty::BoundConstness> {
-- line 229 ----------------------------------------
-- line 236 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ast::Unsafety {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ast::Unsafety,
        .                   b: ast::Unsafety,
        .               ) -> RelateResult<'tcx, ast::Unsafety> {
    2,612 ( 0.00%)          if a != b {
        .                       Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for abi::Abi {
-- line 252 ----------------------------------------
-- line 255 ----------------------------------------
        .                   a: abi::Abi,
        .                   b: abi::Abi,
        .               ) -> RelateResult<'tcx, abi::Abi> {
        .                   if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {
   14,571 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionTy<'tcx>,
        .                   b: ty::ProjectionTy<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionTy<'tcx>> {
    3,435 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let substs = relation.relate(a.substs, b.substs)?;
    4,300 ( 0.00%)              Ok(ty::ProjectionTy { item_def_id: a.item_def_id, substs: &substs })
        .                   }
    9,719 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {
   11,213 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialProjection<'tcx>,
        .                   b: ty::ExistentialProjection<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialProjection<'tcx>> {
    7,231 ( 0.00%)          if a.item_def_id != b.item_def_id {
        .                       Err(TypeError::ProjectionMismatched(expected_found(
        .                           relation,
        .                           a.item_def_id,
        .                           b.item_def_id,
        .                       )))
        .                   } else {
        .                       let term = relation.relate_with_variance(
        .                           ty::Invariant,
        .                           ty::VarianceDiagInfo::default(),
    3,094 ( 0.00%)                  a.term,
    4,054 ( 0.00%)                  b.term,
        .                       )?;
      252 ( 0.00%)              let substs = relation.relate_with_variance(
        .                           ty::Invariant,
        .                           ty::VarianceDiagInfo::default(),
    1,033 ( 0.00%)                  a.substs,
    1,033 ( 0.00%)                  b.substs,
        .                       )?;
   10,257 ( 0.00%)              Ok(ty::ExistentialProjection { item_def_id: a.item_def_id, substs, term })
        .                   }
    9,297 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {
  194,718 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitRef<'tcx>,
        .                   b: ty::TraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {
        .                   // Different traits cannot be related.
   41,633 ( 0.00%)          if a.def_id != b.def_id {
      177 ( 0.00%)              Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
   13,858 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
   45,336 ( 0.00%)              Ok(ty::TraitRef { def_id: a.def_id, substs })
        .                   }
  125,173 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {
    1,067 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ExistentialTraitRef<'tcx>,
        .                   b: ty::ExistentialTraitRef<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {
        .                   // Different traits cannot be related.
   11,757 ( 0.00%)          if a.def_id != b.def_id {
        .                       Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))
        .                   } else {
    4,213 ( 0.00%)              let substs = relate_substs(relation, None, a.substs, b.substs)?;
    7,482 ( 0.00%)              Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })
        .                   }
      679 ( 0.00%)      }
        .           }
        .           
        .           #[derive(Copy, Debug, Clone, TypeFoldable)]
        .           struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);
        .           
        .           impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GeneratorWitness<'tcx>,
        .                   b: GeneratorWitness<'tcx>,
        .               ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {
      556 ( 0.00%)          assert_eq!(a.0.len(), b.0.len());
        .                   let tcx = relation.tcx();
        .                   let types = tcx.mk_type_list(iter::zip(a.0, b.0).map(|(a, b)| relation.relate(a, b)))?;
        .                   Ok(GeneratorWitness(types))
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for Ty<'tcx> {
        .               #[inline]
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> RelateResult<'tcx, Ty<'tcx>> {
  281,365 ( 0.01%)          relation.tys(a, b)
        .               }
        .           }
        .           
        .           /// The main "type relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
  721,024 ( 0.02%)  pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: Ty<'tcx>,
        .               b: Ty<'tcx>,
        .           ) -> RelateResult<'tcx, Ty<'tcx>> {
        .               let tcx = relation.tcx();
        .               debug!("super_relate_tys: a={:?} b={:?}", a, b);
1,614,442 ( 0.05%)      match (a.kind(), b.kind()) {
        .                   (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_tys")
        .                   }
        .           
        .                   (ty::Bound(..), _) | (_, ty::Bound(..)) => {
        .                       bug!("bound types encountered in super_relate_tys")
        .                   }
-- line 388 ----------------------------------------
-- line 391 ----------------------------------------
        .           
        .                   (&ty::Never, _)
        .                   | (&ty::Char, _)
        .                   | (&ty::Bool, _)
        .                   | (&ty::Int(_), _)
        .                   | (&ty::Uint(_), _)
        .                   | (&ty::Float(_), _)
        .                   | (&ty::Str, _)
    3,931 ( 0.00%)              if a == b =>
        .                   {
        .                       Ok(a)
        .                   }
        .           
   16,610 ( 0.00%)          (&ty::Param(ref a_p), &ty::Param(ref b_p)) if a_p.index == b_p.index => Ok(a),
        .           
        .                   (ty::Placeholder(p1), ty::Placeholder(p2)) if p1 == p2 => Ok(a),
        .           
  522,038 ( 0.02%)          (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs)) if a_def == b_def => {
  162,599 ( 0.01%)              let substs = relation.relate_item_substs(a_def.did, a_substs, b_substs)?;
        .                       Ok(tcx.mk_adt(a_def, substs))
        .                   }
        .           
        .                   (&ty::Foreign(a_id), &ty::Foreign(b_id)) if a_id == b_id => Ok(tcx.mk_foreign(a_id)),
        .           
   27,764 ( 0.00%)          (&ty::Dynamic(a_obj, a_region), &ty::Dynamic(b_obj, b_region)) => {
    7,876 ( 0.00%)              let region_bound = relation.with_cause(Cause::ExistentialRegionBound, |relation| {
        .                           relation.relate_with_variance(
        .                               ty::Contravariant,
        .                               ty::VarianceDiagInfo::default(),
    3,938 ( 0.00%)                      a_region,
        .                               b_region,
        .                           )
        .                       })?;
        .                       Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))
        .                   }
        .           
    1,100 ( 0.00%)          (&ty::Generator(a_id, a_substs, movability), &ty::Generator(b_id, b_substs, _))
    1,375 ( 0.00%)              if a_id == b_id =>
        .                   {
        .                       // All Generator types with the same id represent
        .                       // the (anonymous) type of the same generator expression. So
        .                       // all of their regions should be equated.
      550 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
        .                       Ok(tcx.mk_generator(a_id, substs, movability))
        .                   }
        .           
      735 ( 0.00%)          (&ty::GeneratorWitness(a_types), &ty::GeneratorWitness(b_types)) => {
        .                       // Wrap our types with a temporary GeneratorWitness struct
        .                       // inside the binder so we can related them
        .                       let a_types = a_types.map_bound(GeneratorWitness);
        .                       let b_types = b_types.map_bound(GeneratorWitness);
        .                       // Then remove the GeneratorWitness for the result
        .                       let types = relation.relate(a_types, b_types)?.map_bound(|witness| witness.0);
        .                       Ok(tcx.mk_generator_witness(types))
        .                   }
        .           
   20,872 ( 0.00%)          (&ty::Closure(a_id, a_substs), &ty::Closure(b_id, b_substs)) if a_id == b_id => {
        .                       // All Closure types with the same id represent
        .                       // the (anonymous) type of the same closure expression. So
        .                       // all of their regions should be equated.
    5,218 ( 0.00%)              let substs = relation.relate(a_substs, b_substs)?;
        .                       Ok(tcx.mk_closure(a_id, &substs))
        .                   }
        .           
      192 ( 0.00%)          (&ty::RawPtr(a_mt), &ty::RawPtr(b_mt)) => {
       40 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ptr(mt))
        .                   }
        .           
   84,629 ( 0.00%)          (&ty::Ref(a_r, a_ty, a_mutbl), &ty::Ref(b_r, b_ty, b_mutbl)) => {
   36,071 ( 0.00%)              let r = relation.relate_with_variance(
        .                           ty::Contravariant,
        .                           ty::VarianceDiagInfo::default(),
        .                           a_r,
        .                           b_r,
        .                       )?;
        .                       let a_mt = ty::TypeAndMut { ty: a_ty, mutbl: a_mutbl };
        .                       let b_mt = ty::TypeAndMut { ty: b_ty, mutbl: b_mutbl };
   51,552 ( 0.00%)              let mt = relate_type_and_mut(relation, a_mt, b_mt, a)?;
        .                       Ok(tcx.mk_ref(r, mt))
        .                   }
        .           
    2,635 ( 0.00%)          (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) => {
    1,143 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
    1,054 ( 0.00%)              match relation.relate(sz_a, sz_b) {
    1,581 ( 0.00%)                  Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),
        .                           Err(err) => {
        .                               // Check whether the lengths are both concrete/known values,
        .                               // but are unequal, for better diagnostics.
        .                               //
        .                               // It might seem dubious to eagerly evaluate these constants here,
        .                               // we however cannot end up with errors in `Relate` during both
        .                               // `type_of` and `predicates_of`. This means that evaluating the
        .                               // constants should not cause cycle errors here.
-- line 484 ----------------------------------------
-- line 489 ----------------------------------------
        .                                       TypeError::FixedArraySize(expected_found(relation, sz_a_val, sz_b_val)),
        .                                   ),
        .                                   _ => Err(err),
        .                               }
        .                           }
        .                       }
        .                   }
        .           
    1,560 ( 0.00%)          (&ty::Slice(a_t), &ty::Slice(b_t)) => {
      312 ( 0.00%)              let t = relation.relate(a_t, b_t)?;
        .                       Ok(tcx.mk_slice(t))
        .                   }
        .           
   14,104 ( 0.00%)          (&ty::Tuple(as_), &ty::Tuple(bs)) => {
   14,104 ( 0.00%)              if as_.len() == bs.len() {
        .                           Ok(tcx.mk_tup(
   50,916 ( 0.00%)                      iter::zip(as_, bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),
        .                           )?)
        .                       } else if !(as_.is_empty() || bs.is_empty()) {
        .                           Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))
        .                       } else {
        .                           Err(TypeError::Sorts(expected_found(relation, a, b)))
        .                       }
        .                   }
        .           
      642 ( 0.00%)          (&ty::FnDef(a_def_id, a_substs), &ty::FnDef(b_def_id, b_substs))
    1,070 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
      856 ( 0.00%)              let substs = relation.relate_item_substs(a_def_id, a_substs, b_substs)?;
        .                       Ok(tcx.mk_fn_def(a_def_id, substs))
        .                   }
        .           
        .                   (&ty::FnPtr(a_fty), &ty::FnPtr(b_fty)) => {
    6,668 ( 0.00%)              let fty = relation.relate(a_fty, b_fty)?;
        .                       Ok(tcx.mk_fn_ptr(fty))
        .                   }
        .           
        .                   // these two are already handled downstream in case of lazy normalization
    1,465 ( 0.00%)          (&ty::Projection(a_data), &ty::Projection(b_data)) => {
        .                       let projection_ty = relation.relate(a_data, b_data)?;
        .                       Ok(tcx.mk_projection(projection_ty.item_def_id, projection_ty.substs))
        .                   }
        .           
    1,008 ( 0.00%)          (&ty::Opaque(a_def_id, a_substs), &ty::Opaque(b_def_id, b_substs))
    2,520 ( 0.00%)              if a_def_id == b_def_id =>
        .                   {
    3,024 ( 0.00%)              let substs = relate_substs(relation, None, a_substs, b_substs)?;
        .                       Ok(tcx.mk_opaque(a_def_id, substs))
        .                   }
        .           
        .                   _ => Err(TypeError::Sorts(expected_found(relation, a, b))),
        .               }
  811,152 ( 0.03%)  }
        .           
        .           /// The main "const relation" routine. Note that this does not handle
        .           /// inference artifacts, so you should filter those out before calling
        .           /// it.
    1,460 ( 0.00%)  pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .           ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
        .               debug!("{}.super_relate_consts(a = {:?}, b = {:?})", relation.tag(), a, b);
        .               let tcx = relation.tcx();
        .           
        .               // FIXME(oli-obk): once const generics can have generic types, this assertion
        .               // will likely get triggered. Move to `normalize_erasing_regions` at that point.
      292 ( 0.00%)      let a_ty = tcx.erase_regions(a.ty);
      292 ( 0.00%)      let b_ty = tcx.erase_regions(b.ty);
      146 ( 0.00%)      if a_ty != b_ty {
        .                   relation.tcx().sess.delay_span_bug(
        .                       DUMMY_SP,
        .                       &format!("cannot relate constants of different types: {} != {}", a_ty, b_ty),
        .                   );
        .               }
        .           
        .               let eagerly_eval = |x: &'tcx ty::Const<'tcx>| x.eval(tcx, relation.param_env());
      146 ( 0.00%)      let a = eagerly_eval(a);
      292 ( 0.00%)      let b = eagerly_eval(b);
        .           
        .               // Currently, the values that can be unified are primitive types,
        .               // and those that derive both `PartialEq` and `Eq`, corresponding
        .               // to structural-match types.
    1,606 ( 0.00%)      let is_match = match (a.val, b.val) {
        .                   (ty::ConstKind::Infer(_), _) | (_, ty::ConstKind::Infer(_)) => {
        .                       // The caller should handle these cases!
        .                       bug!("var types encountered in super_relate_consts: {:?} {:?}", a, b)
        .                   }
        .           
        .                   (ty::ConstKind::Error(_), _) => return Ok(a),
        .                   (_, ty::ConstKind::Error(_)) => return Ok(b),
        .           
-- line 580 ----------------------------------------
-- line 608 ----------------------------------------
        .                               substs,
        .                               promoted: au.promoted,
        .                           }),
        .                           ty: a.ty,
        .                       }));
        .                   }
        .                   _ => false,
        .               };
      876 ( 0.00%)      if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }
    1,314 ( 0.00%)  }
        .           
        .           fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(
        .               relation: &mut R,
        .               a_val: ConstValue<'tcx>,
        .               b_val: ConstValue<'tcx>,
        .               // FIXME(oli-obk): these arguments should go away with valtrees
        .               a: &'tcx ty::Const<'tcx>,
        .               b: &'tcx ty::Const<'tcx>,
        .               // FIXME(oli-obk): this should just be `bool` with valtrees
        .           ) -> RelateResult<'tcx, bool> {
      146 ( 0.00%)      let tcx = relation.tcx();
    1,606 ( 0.00%)      Ok(match (a_val, b_val) {
    3,212 ( 0.00%)          (ConstValue::Scalar(Scalar::Int(a_val)), ConstValue::Scalar(Scalar::Int(b_val))) => {
      146 ( 0.00%)              a_val == b_val
        .                   }
        .                   (
        .                       ConstValue::Scalar(Scalar::Ptr(a_val, _a_size)),
        .                       ConstValue::Scalar(Scalar::Ptr(b_val, _b_size)),
        .                   ) => {
        .                       a_val == b_val
        .                           || match (tcx.global_alloc(a_val.provenance), tcx.global_alloc(b_val.provenance)) {
        .                               (GlobalAlloc::Function(a_instance), GlobalAlloc::Function(b_instance)) => {
-- line 639 ----------------------------------------
-- line 672 ----------------------------------------
        .                       }
        .                   }
        .           
        .                   _ => false,
        .               })
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>> {
   39,780 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
    3,978 ( 0.00%)          let tcx = relation.tcx();
        .           
        .                   // FIXME: this is wasteful, but want to do a perf run to see how slow it is.
        .                   // We need to perform this deduplication as we sometimes generate duplicate projections
        .                   // in `a`.
        .                   let mut a_v: Vec<_> = a.into_iter().collect();
        .                   let mut b_v: Vec<_> = b.into_iter().collect();
        .                   // `skip_binder` here is okay because `stable_cmp` doesn't look at binders
   39,816 ( 0.00%)          a_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   a_v.dedup();
        .                   b_v.sort_by(|a, b| a.skip_binder().stable_cmp(tcx, &b.skip_binder()));
        .                   b_v.dedup();
   11,934 ( 0.00%)          if a_v.len() != b_v.len() {
       32 ( 0.00%)              return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));
        .                   }
        .           
   15,880 ( 0.00%)          let v = iter::zip(a_v, b_v).map(|(ep_a, ep_b)| {
        .                       use crate::ty::ExistentialPredicate::*;
   53,510 ( 0.00%)              match (ep_a.skip_binder(), ep_b.skip_binder()) {
   12,840 ( 0.00%)                  (Trait(a), Trait(b)) => Ok(ep_a
      758 ( 0.00%)                      .rebind(Trait(relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder()))),
        .                           (Projection(a), Projection(b)) => Ok(ep_a.rebind(Projection(
    8,132 ( 0.00%)                      relation.relate(ep_a.rebind(a), ep_b.rebind(b))?.skip_binder(),
        .                           ))),
   27,503 ( 0.00%)                  (AutoTrait(a), AutoTrait(b)) if a == b => Ok(ep_a.rebind(AutoTrait(a))),
        .                           _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),
        .                       }
        .                   });
    7,940 ( 0.00%)          tcx.mk_poly_existential_predicates(v)
   31,824 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ClosureSubsts<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ClosureSubsts<'tcx>,
        .                   b: ty::ClosureSubsts<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ClosureSubsts<'tcx>> {
-- line 722 ----------------------------------------
-- line 737 ----------------------------------------
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for SubstsRef<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: SubstsRef<'tcx>,
        .                   b: SubstsRef<'tcx>,
        .               ) -> RelateResult<'tcx, SubstsRef<'tcx>> {
    5,062 ( 0.00%)          relate_substs(relation, None, a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Region<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) -> RelateResult<'tcx, ty::Region<'tcx>> {
   61,090 ( 0.00%)          relation.regions(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for &'tcx ty::Const<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: &'tcx ty::Const<'tcx>,
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> RelateResult<'tcx, &'tcx ty::Const<'tcx>> {
    2,108 ( 0.00%)          relation.consts(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx, T: Relate<'tcx>> Relate<'tcx> for ty::Binder<'tcx, T> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::Binder<'tcx, T>,
        .                   b: ty::Binder<'tcx, T>,
        .               ) -> RelateResult<'tcx, ty::Binder<'tcx, T>> {
   89,027 ( 0.00%)          relation.binders(a, b)
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {
  341,210 ( 0.01%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: GenericArg<'tcx>,
        .                   b: GenericArg<'tcx>,
        .               ) -> RelateResult<'tcx, GenericArg<'tcx>> {
  473,092 ( 0.02%)          match (a.unpack(), b.unpack()) {
        .                       (GenericArgKind::Lifetime(a_lt), GenericArgKind::Lifetime(b_lt)) => {
        .                           Ok(relation.relate(a_lt, b_lt)?.into())
        .                       }
        .                       (GenericArgKind::Type(a_ty), GenericArgKind::Type(b_ty)) => {
    2,253 ( 0.00%)                  Ok(relation.relate(a_ty, b_ty)?.into())
        .                       }
        .                       (GenericArgKind::Const(a_ct), GenericArgKind::Const(b_ct)) => {
        .                           Ok(relation.relate(a_ct, b_ct)?.into())
        .                       }
        .                       (GenericArgKind::Lifetime(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Type(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                       (GenericArgKind::Const(unpacked), x) => {
        .                           bug!("impossible case reached: can't relate: {:?} with {:?}", unpacked, x)
        .                       }
        .                   }
  387,603 ( 0.01%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ImplPolarity {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ImplPolarity,
        .                   b: ty::ImplPolarity,
        .               ) -> RelateResult<'tcx, ty::ImplPolarity> {
-- line 813 ----------------------------------------
-- line 815 ----------------------------------------
        .                       Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))
        .                   } else {
        .                       Ok(a)
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {
      726 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::TraitPredicate<'tcx>,
        .                   b: ty::TraitPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::TraitPredicate<'tcx>> {
        .                   Ok(ty::TraitPredicate {
      330 ( 0.00%)              trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,
        .                       constness: relation.relate(a.constness, b.constness)?,
        .                       polarity: relation.relate(a.polarity, b.polarity)?,
        .                   })
      594 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::Term<'tcx> {
    3,099 ( 0.00%)      fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: Self,
        .                   b: Self,
        .               ) -> RelateResult<'tcx, Self> {
    7,231 ( 0.00%)          Ok(match (a, b) {
      108 ( 0.00%)              (Term::Ty(a), Term::Ty(b)) => relation.relate(a, b)?.into(),
        .                       (Term::Const(a), Term::Const(b)) => relation.relate(a, b)?.into(),
        .                       _ => return Err(TypeError::Mismatch),
        .                   })
    4,132 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {
        .               fn relate<R: TypeRelation<'tcx>>(
        .                   relation: &mut R,
        .                   a: ty::ProjectionPredicate<'tcx>,
        .                   b: ty::ProjectionPredicate<'tcx>,
        .               ) -> RelateResult<'tcx, ty::ProjectionPredicate<'tcx>> {
-- line 855 ----------------------------------------
-- line 862 ----------------------------------------
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Error handling
        .           
        .           pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>
        .           where
        .               R: TypeRelation<'tcx>,
        .           {
      114 ( 0.00%)      ExpectedFound::new(relation.a_is_expected(), a, b)
        .           }

1,778,489 ( 0.06%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/relate.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 108 ----------------------------------------
        .                   suppress_errors: bool,
        .               },
        .           }
        .           
        .           impl RegionckMode {
        .               /// Indicates that the MIR borrowck will repeat these region
        .               /// checks, so we should ignore errors if NLL is (unconditionally)
        .               /// enabled.
       75 ( 0.00%)      pub fn for_item_body(tcx: TyCtxt<'_>) -> Self {
        .                   // FIXME(Centril): Once we actually remove `::Migrate` also make
        .                   // this always `true` and then proceed to eliminate the dead code.
       75 ( 0.00%)          match tcx.borrowck_mode() {
        .                       // If we're on Migrate mode, report AST region errors
        .                       BorrowckMode::Migrate => RegionckMode::Erase { suppress_errors: false },
        .           
        .                       // If we're on MIR, don't report AST region errors as they should be reported by NLL
        .                       BorrowckMode::Mir => RegionckMode::Erase { suppress_errors: true },
        .                   }
      150 ( 0.00%)      }
        .           }
        .           
        .           /// This type contains all the things within `InferCtxt` that sit within a
        .           /// `RefCell` and are involved with taking/rolling back snapshots. Snapshot
        .           /// operations are hot enough that we want only one call to `borrow_mut` per
        .           /// call to `start_snapshot` and `rollback_to`.
        .           pub struct InferCtxtInner<'tcx> {
        .               /// Cache for projections. This cache is snapshotted along with the infcx.
-- line 134 ----------------------------------------
-- line 202 ----------------------------------------
        .               /// type instantiations (`ty::Infer`) to the actual opaque
        .               /// type (`ty::Opaque`). Used during fallback to map unconstrained
        .               /// opaque type inference variables to their corresponding
        .               /// opaque type.
        .               pub opaque_types_vars: FxHashMap<Ty<'tcx>, Ty<'tcx>>,
        .           }
        .           
        .           impl<'tcx> InferCtxtInner<'tcx> {
   56,560 ( 0.00%)      fn new() -> InferCtxtInner<'tcx> {
  384,608 ( 0.01%)          InferCtxtInner {
        .                       projection_cache: Default::default(),
        .                       type_variable_storage: type_variable::TypeVariableStorage::new(),
        .                       undo_log: InferCtxtUndoLogs::default(),
        .                       const_unification_storage: ut::UnificationTableStorage::new(),
        .                       int_unification_storage: ut::UnificationTableStorage::new(),
        .                       float_unification_storage: ut::UnificationTableStorage::new(),
   33,936 ( 0.00%)              region_constraint_storage: Some(RegionConstraintStorage::new()),
        .                       region_obligations: vec![],
        .                       opaque_types: Default::default(),
        .                       opaque_types_vars: Default::default(),
        .                   }
   67,872 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {
        .                   &self.region_obligations
        .               }
        .           
        .               #[inline]
        .               pub fn projection_cache(&mut self) -> traits::ProjectionCache<'_, 'tcx> {
    8,422 ( 0.00%)          self.projection_cache.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn type_variables(&mut self) -> type_variable::TypeVariableTable<'_, 'tcx> {
  283,741 ( 0.01%)          self.type_variable_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn int_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::IntVid,
        .                       &mut ut::UnificationStorage<ty::IntVid>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
       87 ( 0.00%)          self.int_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               fn float_unification_table(
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::FloatVid,
-- line 258 ----------------------------------------
-- line 268 ----------------------------------------
        .                   &mut self,
        .               ) -> ut::UnificationTable<
        .                   ut::InPlace<
        .                       ty::ConstVid<'tcx>,
        .                       &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,
        .                       &mut InferCtxtUndoLogs<'tcx>,
        .                   >,
        .               > {
      579 ( 0.00%)          self.const_unification_storage.with_log(&mut self.undo_log)
        .               }
        .           
        .               #[inline]
        .               pub fn unwrap_region_constraints(&mut self) -> RegionConstraintCollector<'_, 'tcx> {
   45,581 ( 0.00%)          self.region_constraint_storage
        .                       .as_mut()
        .                       .expect("region constraints already solved")
   54,776 ( 0.00%)              .with_log(&mut self.undo_log)
        .               }
        .           }
        .           
        .           pub struct InferCtxt<'a, 'tcx> {
        .               pub tcx: TyCtxt<'tcx>,
        .           
        .               /// The `DefId` of the item in whose context we are performing inference or typeck.
        .               /// It is used to check whether an opaque type use is a defining use.
-- line 292 ----------------------------------------
-- line 361 ----------------------------------------
        .               /// item we are type-checking, and just consider those names as
        .               /// part of the root universe. So this would only get incremented
        .               /// when we enter into a higher-ranked (`for<..>`) type or trait
        .               /// bound.
        .               universe: Cell<ty::UniverseIndex>,
        .           }
        .           
        .           /// See the `error_reporting` module for more details.
   51,776 ( 0.00%)  #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]
        .           pub enum ValuePairs<'tcx> {
        .               Types(ExpectedFound<Ty<'tcx>>),
        .               Regions(ExpectedFound<ty::Region<'tcx>>),
        .               Consts(ExpectedFound<&'tcx ty::Const<'tcx>>),
        .               TraitRefs(ExpectedFound<ty::TraitRef<'tcx>>),
        .               PolyTraitRefs(ExpectedFound<ty::PolyTraitRef<'tcx>>),
        .           }
        .           
-- line 377 ----------------------------------------
-- line 383 ----------------------------------------
        .           pub struct TypeTrace<'tcx> {
        .               cause: ObligationCause<'tcx>,
        .               values: ValuePairs<'tcx>,
        .           }
        .           
        .           /// The origin of a `r1 <= r2` constraint.
        .           ///
        .           /// See `error_reporting` module for more details
   57,946 ( 0.00%)  #[derive(Clone, Debug)]
        .           pub enum SubregionOrigin<'tcx> {
        .               /// Arose from a subtyping relation
    3,077 ( 0.00%)      Subtype(Box<TypeTrace<'tcx>>),
        .           
        .               /// When casting `&'a T` to an `&'b Trait` object,
        .               /// relating `'a` to `'b`
        .               RelateObjectBound(Span),
        .           
        .               /// Some type parameter was instantiated with the given type,
        .               /// and that type must outlive some region.
      716 ( 0.00%)      RelateParamBound(Span, Ty<'tcx>, Option<Span>),
        .           
        .               /// The given region parameter was instantiated with a region
        .               /// that must outlive some other region.
        .               RelateRegionParamBound(Span),
        .           
        .               /// Creating a pointer `b` to contents of another reference
        .               Reborrow(Span),
        .           
        .               /// Creating a pointer `b` to contents of an upvar
        .               ReborrowUpvar(Span, ty::UpvarId),
        .           
        .               /// Data with type `Ty<'tcx>` was borrowed
      542 ( 0.00%)      DataBorrowed(Ty<'tcx>, Span),
        .           
        .               /// (&'a &'b T) where a >= b
      705 ( 0.00%)      ReferenceOutlivesReferent(Ty<'tcx>, Span),
        .           
        .               /// Comparing the signature and requirements of an impl method against
        .               /// the containing trait.
        .               CompareImplMethodObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
        .           
        .               /// Comparing the signature and requirements of an impl associated type
        .               /// against the containing trait
        .               CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },
-- line 426 ----------------------------------------
-- line 554 ----------------------------------------
        .               defining_use_anchor: Option<LocalDefId>,
        .           }
        .           
        .           pub trait TyCtxtInferExt<'tcx> {
        .               fn infer_ctxt(self) -> InferCtxtBuilder<'tcx>;
        .           }
        .           
        .           impl<'tcx> TyCtxtInferExt<'tcx> for TyCtxt<'tcx> {
   11,312 ( 0.00%)      fn infer_ctxt(self) -> InferCtxtBuilder<'tcx> {
   33,936 ( 0.00%)          InferCtxtBuilder { tcx: self, defining_use_anchor: None, fresh_typeck_results: None }
   11,312 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> InferCtxtBuilder<'tcx> {
        .               /// Used only by `rustc_typeck` during body type-checking/inference,
        .               /// will initialize `in_progress_typeck_results` with fresh `TypeckResults`.
        .               /// Will also change the scope for opaque type defining use checks to the given owner.
    1,908 ( 0.00%)      pub fn with_fresh_in_progress_typeck_results(mut self, table_owner: LocalDefId) -> Self {
    2,332 ( 0.00%)          self.fresh_typeck_results = Some(RefCell::new(ty::TypeckResults::new(table_owner)));
    1,060 ( 0.00%)          self.with_opaque_type_inference(table_owner)
    1,484 ( 0.00%)      }
        .           
        .               /// Whenever the `InferCtxt` should be able to handle defining uses of opaque types,
        .               /// you need to call this function. Otherwise the opaque type will be treated opaquely.
        .               ///
        .               /// It is only meant to be called in two places, for typeck
        .               /// (via `with_fresh_in_progress_typeck_results`) and for the inference context used
        .               /// in mir borrowck.
      260 ( 0.00%)      pub fn with_opaque_type_inference(mut self, defining_use_anchor: LocalDefId) -> Self {
      130 ( 0.00%)          self.defining_use_anchor = Some(defining_use_anchor);
      684 ( 0.00%)          self
      390 ( 0.00%)      }
        .           
        .               /// Given a canonical value `C` as a starting point, create an
        .               /// inference context that contains each of the bound values
        .               /// within instantiated as a fresh variable. The `f` closure is
        .               /// invoked with the new infcx, along with the instantiated value
        .               /// `V` and a substitution `S`. This substitution `S` maps from
        .               /// the bound values in `C` to their instantiated values in `V`
        .               /// (in other words, `S(C) = V`).
   32,070 ( 0.00%)      pub fn enter_with_canonical<T, R>(
        .                   &mut self,
        .                   span: Span,
        .                   canonical: &Canonical<'tcx, T>,
        .                   f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>, T, CanonicalVarValues<'tcx>) -> R,
        .               ) -> R
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   self.enter(|infcx| {
   36,458 ( 0.00%)              let (value, subst) =
    1,689 ( 0.00%)                  infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);
   55,750 ( 0.00%)              f(infcx, value, subst)
        .                   })
   34,922 ( 0.00%)      }
        .           
   47,986 ( 0.00%)      pub fn enter<R>(&mut self, f: impl for<'a> FnOnce(InferCtxt<'a, 'tcx>) -> R) -> R {
   31,636 ( 0.00%)          let InferCtxtBuilder { tcx, defining_use_anchor, ref fresh_typeck_results } = *self;
        .                   let in_progress_typeck_results = fresh_typeck_results.as_ref();
  468,707 ( 0.02%)          f(InferCtxt {
        .                       tcx,
        .                       defining_use_anchor,
        .                       in_progress_typeck_results,
   11,312 ( 0.00%)              inner: RefCell::new(InferCtxtInner::new()),
        .                       lexical_region_resolutions: RefCell::new(None),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        .                       reported_trait_errors: Default::default(),
        .                       reported_closure_mismatch: Default::default(),
        .                       tainted_by_errors_flag: Cell::new(false),
   11,312 ( 0.00%)              err_count_on_creation: tcx.sess.err_count(),
        .                       in_snapshot: Cell::new(false),
        .                       skip_leak_check: Cell::new(false),
        .                       universe: Cell::new(ty::UniverseIndex::ROOT),
        .                   })
   51,382 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx, T> InferOk<'tcx, T> {
        .               pub fn unit(self) -> InferOk<'tcx, ()> {
        .                   InferOk { value: (), obligations: self.obligations }
        .               }
        .           
        .               /// Extracts `value`, registering any obligations into `fulfill_cx`.
        .               pub fn into_value_registering_obligations(
        .                   self,
        .                   infcx: &InferCtxt<'_, 'tcx>,
        .                   fulfill_cx: &mut dyn TraitEngine<'tcx>,
        .               ) -> T {
      543 ( 0.00%)          let InferOk { value, obligations } = self;
    2,160 ( 0.00%)          for obligation in obligations {
        .                       fulfill_cx.register_predicate_obligation(infcx, obligation);
        .                   }
        .                   value
        .               }
        .           }
        .           
        .           impl<'tcx> InferOk<'tcx, ()> {
    4,967 ( 0.00%)      pub fn into_obligations(self) -> PredicateObligations<'tcx> {
   19,868 ( 0.00%)          self.obligations
    4,967 ( 0.00%)      }
        .           }
        .           
        .           #[must_use = "once you start a snapshot, you should always consume it"]
        .           pub struct CombinedSnapshot<'a, 'tcx> {
        .               undo_snapshot: Snapshot<'tcx>,
        .               region_constraints_snapshot: RegionSnapshot,
        .               universe: ty::UniverseIndex,
        .               was_in_snapshot: bool,
-- line 662 ----------------------------------------
-- line 674 ----------------------------------------
        .                   let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());
        .                   debug!("canonical consts: {:?}", &canonical.value);
        .           
        .                   self.tcx.try_unify_abstract_consts(canonical.value)
        .               }
        .           
        .               pub fn is_in_snapshot(&self) -> bool {
        .                   self.in_snapshot.get()
   11,910 ( 0.00%)      }
        .           
  139,496 ( 0.00%)      pub fn freshen<T: TypeFoldable<'tcx>>(&self, t: T) -> T {
  156,933 ( 0.01%)          t.fold_with(&mut self.freshener())
  156,933 ( 0.01%)      }
        .           
        .               /// Returns the origin of the type variable identified by `vid`, or `None`
        .               /// if this is not a type variable.
        .               ///
        .               /// No attempt is made to resolve `ty`.
      152 ( 0.00%)      pub fn type_var_origin(&'a self, ty: Ty<'tcx>) -> Option<TypeVariableOrigin> {
      304 ( 0.00%)          match *ty.kind() {
       76 ( 0.00%)              ty::Infer(ty::TyVar(vid)) => {
      304 ( 0.00%)                  Some(*self.inner.borrow_mut().type_variables().var_origin(vid))
        .                       }
        .                       _ => None,
        .                   }
      304 ( 0.00%)      }
        .           
   17,437 ( 0.00%)      pub fn freshener<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, false)
   17,437 ( 0.00%)      }
        .           
        .               /// Like `freshener`, but does not replace `'static` regions.
   38,421 ( 0.00%)      pub fn freshener_keep_static<'b>(&'b self) -> TypeFreshener<'b, 'tcx> {
        .                   freshen::TypeFreshener::new(self, true)
   38,421 ( 0.00%)      }
        .           
      376 ( 0.00%)      pub fn unsolved_variables(&self) -> Vec<Ty<'tcx>> {
      188 ( 0.00%)          let mut inner = self.inner.borrow_mut();
      188 ( 0.00%)          let mut vars: Vec<Ty<'_>> = inner
        .                       .type_variables()
        .                       .unsolved_variables()
        .                       .into_iter()
      152 ( 0.00%)              .map(|t| self.tcx.mk_ty_var(t))
        .                       .collect();
        .                   vars.extend(
        .                       (0..inner.int_unification_table().len())
        .                           .map(|i| ty::IntVid { index: i as u32 })
        8 ( 0.00%)                  .filter(|&vid| inner.int_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_int_var(v)),
        .                   );
        .                   vars.extend(
        .                       (0..inner.float_unification_table().len())
        .                           .map(|i| ty::FloatVid { index: i as u32 })
        .                           .filter(|&vid| inner.float_unification_table().probe_value(vid).is_none())
        .                           .map(|v| self.tcx.mk_float_var(v)),
        .                   );
        .                   vars
      658 ( 0.00%)      }
        .           
   24,421 ( 0.00%)      fn combine_fields(
        .                   &'a self,
        .                   trace: TypeTrace<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .               ) -> CombineFields<'a, 'tcx> {
   97,848 ( 0.00%)          CombineFields {
        .                       infcx: self,
  244,620 ( 0.01%)              trace,
        .                       cause: None,
        .                       param_env,
        .                       obligations: PredicateObligations::new(),
        .                   }
   24,421 ( 0.00%)      }
        .           
        .               /// Clear the "currently in a snapshot" flag, invoke the closure,
        .               /// then restore the flag to its original value. This flag is a
        .               /// debugging measure designed to detect cases where we start a
        .               /// snapshot, create type variables, and register obligations
        .               /// which may involve those type variables in the fulfillment cx,
        .               /// potentially leaving "dangling type variables" behind.
        .               /// In such cases, an assertion will fail when attempting to
-- line 753 ----------------------------------------
-- line 755 ----------------------------------------
        .               /// better than grovelling through megabytes of `RUSTC_LOG` output.
        .               ///
        .               /// HOWEVER, in some cases the flag is unhelpful. In particular, we
        .               /// sometimes create a "mini-fulfilment-cx" in which we enroll
        .               /// obligations. As long as this fulfillment cx is fully drained
        .               /// before we return, this is not a problem, as there won't be any
        .               /// escaping obligations in the main cx. In those cases, you can
        .               /// use this function.
      144 ( 0.00%)      pub fn save_and_restore_in_snapshot_flag<F, R>(&self, func: F) -> R
        .               where
        .                   F: FnOnce(&Self) -> R,
        .               {
        .                   let flag = self.in_snapshot.replace(false);
    3,504 ( 0.00%)          let result = func(self);
        .                   self.in_snapshot.set(flag);
        .                   result
      162 ( 0.00%)      }
        .           
  149,866 ( 0.01%)      fn start_snapshot(&self) -> CombinedSnapshot<'a, 'tcx> {
        .                   debug!("start_snapshot()");
        .           
        .                   let in_snapshot = self.in_snapshot.replace(true);
        .           
        .                   let mut inner = self.inner.borrow_mut();
        .           
  449,598 ( 0.02%)          CombinedSnapshot {
        .                       undo_snapshot: inner.undo_log.start_snapshot(),
        .                       region_constraints_snapshot: inner.unwrap_region_constraints().start_snapshot(),
        .                       universe: self.universe(),
        .                       was_in_snapshot: in_snapshot,
        .                       // Borrow typeck results "in progress" (i.e., during typeck)
        .                       // to ban writes from within a snapshot to them.
   74,933 ( 0.00%)              _in_progress_typeck_results: self
        .                           .in_progress_typeck_results
        .                           .map(|typeck_results| typeck_results.borrow()),
        .                   }
  299,732 ( 0.01%)      }
        .           
  290,818 ( 0.01%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn rollback_to(&self, cause: &str, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   26,438 ( 0.00%)              undo_snapshot,
   26,438 ( 0.00%)              region_constraints_snapshot,
   26,438 ( 0.00%)              universe,
   26,438 ( 0.00%)              was_in_snapshot,
   52,876 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .                   self.universe.set(universe);
        .           
        .                   let mut inner = self.inner.borrow_mut();
   26,438 ( 0.00%)          inner.rollback_to(undo_snapshot);
        .                   inner.unwrap_region_constraints().rollback_to(region_constraints_snapshot);
        .               }
        .           
  727,425 ( 0.02%)      #[instrument(skip(self, snapshot), level = "debug")]
        .               fn commit_from(&self, snapshot: CombinedSnapshot<'a, 'tcx>) {
        .                   let CombinedSnapshot {
   48,495 ( 0.00%)              undo_snapshot,
        .                       region_constraints_snapshot: _,
        .                       universe: _,
   48,495 ( 0.00%)              was_in_snapshot,
   96,990 ( 0.00%)              _in_progress_typeck_results,
        .                   } = snapshot;
        .           
        .                   self.in_snapshot.set(was_in_snapshot);
        .           
        .                   self.inner.borrow_mut().commit(undo_snapshot);
        .               }
        .           
        .               /// Executes `f` and commit the bindings.
   93,346 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  117,975 ( 0.00%)      pub fn commit_unconditionally<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   10,725 ( 0.00%)          let snapshot = self.start_snapshot();
   50,471 ( 0.00%)          let r = f(&snapshot);
   75,075 ( 0.00%)          self.commit_from(snapshot);
   60,005 ( 0.00%)          r
        .               }
        .           
        .               /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.
  319,506 ( 0.01%)      #[instrument(skip(self, f), level = "debug")]
  392,602 ( 0.01%)      pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,
        .               {
   49,925 ( 0.00%)          let snapshot = self.start_snapshot();
  180,674 ( 0.01%)          let r = f(&snapshot);
        .                   debug!("commit_if_ok() -- r.is_ok() = {}", r.is_ok());
   41,586 ( 0.00%)          match r {
        .                       Ok(_) => {
  279,571 ( 0.01%)                  self.commit_from(snapshot);
        .                       }
        .                       Err(_) => {
   74,412 ( 0.00%)                  self.rollback_to("commit_if_ok -- error", snapshot);
        .                       }
        .                   }
  253,533 ( 0.01%)          r
        .               }
        .           
        .               /// Execute `f` then unroll any bindings it creates.
  141,636 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
  160,576 ( 0.01%)      pub fn probe<R, F>(&self, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
   38,143 ( 0.00%)          let snapshot = self.start_snapshot();
   54,784 ( 0.00%)          let r = f(&snapshot);
  173,016 ( 0.01%)          self.rollback_to("probe", snapshot);
   12,223 ( 0.00%)          r
        .               }
        .           
        .               /// If `should_skip` is true, then execute `f` then unroll any bindings it creates.
       72 ( 0.00%)      #[instrument(skip(self, f), level = "debug")]
       96 ( 0.00%)      pub fn probe_maybe_skip_leak_check<R, F>(&self, should_skip: bool, f: F) -> R
        .               where
        .                   F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,
        .               {
       16 ( 0.00%)          let snapshot = self.start_snapshot();
        8 ( 0.00%)          let was_skip_leak_check = self.skip_leak_check.get();
       16 ( 0.00%)          if should_skip {
        .                       self.skip_leak_check.set(true);
        .                   }
       32 ( 0.00%)          let r = f(&snapshot);
       72 ( 0.00%)          self.rollback_to("probe", snapshot);
        .                   self.skip_leak_check.set(was_skip_leak_check);
       96 ( 0.00%)          r
        .               }
        .           
        .               /// Scan the constraints produced since `snapshot` began and returns:
        .               ///
        .               /// - `None` -- if none of them involve "region outlives" constraints
        .               /// - `Some(true)` -- if there are `'a: 'b` constraints where `'a` or `'b` is a placeholder
        .               /// - `Some(false)` -- if there are `'a: 'b` constraints but none involve placeholders
   18,678 ( 0.00%)      pub fn region_constraints_added_in_snapshot(
        .                   &self,
        .                   snapshot: &CombinedSnapshot<'a, 'tcx>,
        .               ) -> Option<bool> {
   37,356 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
        .                       .region_constraints_added_in_snapshot(&snapshot.undo_snapshot)
   28,017 ( 0.00%)      }
        .           
        .               pub fn add_given(&self, sub: ty::Region<'tcx>, sup: ty::RegionVid) {
        .                   self.inner.borrow_mut().unwrap_region_constraints().add_given(sub, sup);
        .               }
        .           
      144 ( 0.00%)      pub fn can_sub<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).sub(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      108 ( 0.00%)      }
        .           
    1,032 ( 0.00%)      pub fn can_eq<T>(&self, param_env: ty::ParamEnv<'tcx>, a: T, b: T) -> UnitResult<'tcx>
        .               where
        .                   T: at::ToTrace<'tcx>,
        .               {
        .                   let origin = &ObligationCause::dummy();
        .                   self.probe(|_| {
        .                       self.at(origin, param_env).eq(a, b).map(|InferOk { obligations: _, .. }| {
        .                           // Ignore obligations, since we are unrolling
        .                           // everything anyway.
        .                       })
        .                   })
      774 ( 0.00%)      }
        .           
   17,880 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn sub_regions(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   b: ty::Region<'tcx>,
        .               ) {
   16,092 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().make_subregion(origin, a, b);
        .               }
        .           
        .               /// Require that the region `r` be equal to one of the regions in
        .               /// the set `regions`.
       20 ( 0.00%)      #[instrument(skip(self), level = "debug")]
        .               pub fn member_constraint(
        .                   &self,
        .                   opaque_type_def_id: DefId,
        .                   definition_span: Span,
        .                   hidden_ty: Ty<'tcx>,
        .                   region: ty::Region<'tcx>,
        .                   in_regions: &Lrc<Vec<ty::Region<'tcx>>>,
        .               ) {
       20 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().member_constraint(
        .                       opaque_type_def_id,
        .                       definition_span,
        .                       hidden_ty,
        .                       region,
        .                       in_regions,
        .                   );
        .               }
        .           
-- line 961 ----------------------------------------
-- line 969 ----------------------------------------
        .               /// to `subtype_predicate` -- that is, "coercing" `a` to `b` winds up
        .               /// actually requiring `a <: b`. This is of course a valid coercion,
        .               /// but it's not as flexible as `FnCtxt::coerce` would be.
        .               ///
        .               /// (We may refactor this in the future, but there are a number of
        .               /// practical obstacles. Among other things, `FnCtxt::coerce` presently
        .               /// records adjustments that are required on the HIR in order to perform
        .               /// the coercion, and we don't currently have a way to manage that.)
       60 ( 0.00%)      pub fn coerce_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolyCoercePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
       40 ( 0.00%)          let subtype_predicate = predicate.map_bound(|p| ty::SubtypePredicate {
        .                       a_is_expected: false, // when coercing from `a` to `b`, `b` is expected
        .                       a: p.a,
        .                       b: p.b,
        .                   });
      100 ( 0.00%)          self.subtype_predicate(cause, param_env, subtype_predicate)
       80 ( 0.00%)      }
        .           
    2,508 ( 0.00%)      pub fn subtype_predicate(
        .                   &self,
        .                   cause: &ObligationCause<'tcx>,
        .                   param_env: ty::ParamEnv<'tcx>,
        .                   predicate: ty::PolySubtypePredicate<'tcx>,
        .               ) -> Option<InferResult<'tcx, ()>> {
        .                   // Check for two unresolved inference variables, in which case we can
        .                   // make no progress. This is partly a micro-optimization, but it's
        .                   // also an opportunity to "sub-unify" the variables. This isn't
-- line 999 ----------------------------------------
-- line 1002 ----------------------------------------
        .                   // earlier that they are sub-unified).
        .                   //
        .                   // Note that we can just skip the binders here because
        .                   // type variables can't (at present, at
        .                   // least) capture any of the things bound by this binder.
        .                   //
        .                   // Note that this sub here is not just for diagnostics - it has semantic
        .                   // effects as well.
      209 ( 0.00%)          let r_a = self.shallow_resolve(predicate.skip_binder().a);
      209 ( 0.00%)          let r_b = self.shallow_resolve(predicate.skip_binder().b);
    1,532 ( 0.00%)          match (r_a.kind(), r_b.kind()) {
      352 ( 0.00%)              (&ty::Infer(ty::TyVar(a_vid)), &ty::Infer(ty::TyVar(b_vid))) => {
        .                           self.inner.borrow_mut().type_variables().sub(a_vid, b_vid);
      352 ( 0.00%)                  return None;
        .                       }
        .                       _ => {}
        .                   }
        .           
        .                   Some(self.commit_if_ok(|_snapshot| {
       33 ( 0.00%)              let ty::SubtypePredicate { a_is_expected, a, b } =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .           
       66 ( 0.00%)              let ok = self.at(cause, param_env).sub_exp(a_is_expected, a, b)?;
        .           
        .                       Ok(ok.unit())
        .                   }))
    1,881 ( 0.00%)      }
        .           
    6,480 ( 0.00%)      pub fn region_outlives_predicate(
        .                   &self,
        .                   cause: &traits::ObligationCause<'tcx>,
        .                   predicate: ty::PolyRegionOutlivesPredicate<'tcx>,
        .               ) -> UnitResult<'tcx> {
        .                   self.commit_if_ok(|_snapshot| {
        .                       let ty::OutlivesPredicate(r_a, r_b) =
        .                           self.replace_bound_vars_with_placeholders(predicate);
        .                       let origin = SubregionOrigin::from_obligation_cause(cause, || {
        .                           RelateRegionParamBound(cause.span)
        .                       });
    5,400 ( 0.00%)              self.sub_regions(origin, r_b, r_a); // `b : a` ==> `a <= b`
        .                       Ok(())
        .                   })
    4,320 ( 0.00%)      }
        .           
        .               /// Number of type variables created so far.
       19 ( 0.00%)      pub fn num_ty_vars(&self) -> usize {
        .                   self.inner.borrow_mut().type_variables().num_vars()
       38 ( 0.00%)      }
        .           
    6,178 ( 0.00%)      pub fn next_ty_var_id(&self, origin: TypeVariableOrigin) -> TyVid {
   30,890 ( 0.00%)          self.inner.borrow_mut().type_variables().new_var(self.universe(), origin)
    9,267 ( 0.00%)      }
        .           
    5,572 ( 0.00%)      pub fn next_ty_var(&self, origin: TypeVariableOrigin) -> Ty<'tcx> {
   21,320 ( 0.00%)          self.tcx.mk_ty_var(self.next_ty_var_id(origin))
    8,358 ( 0.00%)      }
        .           
    1,610 ( 0.00%)      pub fn next_ty_var_in_universe(
        .                   &self,
        .                   origin: TypeVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> Ty<'tcx> {
    8,855 ( 0.00%)          let vid = self.inner.borrow_mut().type_variables().new_var(universe, origin);
      805 ( 0.00%)          self.tcx.mk_ty_var(vid)
    2,415 ( 0.00%)      }
        .           
        .               pub fn next_const_var(
        .                   &self,
        .                   ty: Ty<'tcx>,
        .                   origin: ConstVariableOrigin,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   self.tcx.mk_const_var(self.next_const_var_id(origin), ty)
        .               }
-- line 1074 ----------------------------------------
-- line 1090 ----------------------------------------
        .               pub fn next_const_var_id(&self, origin: ConstVariableOrigin) -> ConstVid<'tcx> {
        .                   self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                       origin,
        .                       val: ConstVariableValue::Unknown { universe: self.universe() },
        .                   })
        .               }
        .           
        .               fn next_int_var_id(&self) -> IntVid {
       10 ( 0.00%)          self.inner.borrow_mut().int_unification_table().new_key(None)
        .               }
        .           
        6 ( 0.00%)      pub fn next_int_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_int_var(self.next_int_var_id())
        8 ( 0.00%)      }
        .           
        .               fn next_float_var_id(&self) -> FloatVid {
        .                   self.inner.borrow_mut().float_unification_table().new_key(None)
        .               }
        .           
        .               pub fn next_float_var(&self) -> Ty<'tcx> {
        .                   self.tcx.mk_float_var(self.next_float_var_id())
        .               }
        .           
        .               /// Creates a fresh region variable with the next available index.
        .               /// The variable will be created in the maximum universe created
        .               /// thus far, allowing it to name any region created thus far.
    2,618 ( 0.00%)      pub fn next_region_var(&self, origin: RegionVariableOrigin) -> ty::Region<'tcx> {
   67,948 ( 0.00%)          self.next_region_var_in_universe(origin, self.universe())
    5,236 ( 0.00%)      }
        .           
        .               /// Creates a fresh region variable with the next available index
        .               /// in the given universe; typically, you can use
        .               /// `next_region_var` and just use the maximal universe.
   30,096 ( 0.00%)      pub fn next_region_var_in_universe(
        .                   &self,
        .                   origin: RegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
        .                   let region_var =
  195,624 ( 0.01%)              self.inner.borrow_mut().unwrap_region_constraints().new_region_var(universe, origin);
   75,240 ( 0.00%)          self.tcx.mk_region(ty::ReVar(region_var))
   45,144 ( 0.00%)      }
        .           
        .               /// Return the universe that the region `r` was created in.  For
        .               /// most regions (e.g., `'static`, named regions from the user,
        .               /// etc) this is the root universe U0. For inference variables or
        .               /// placeholders, however, it will return the universe which which
        .               /// they are associated.
    8,986 ( 0.00%)      pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {
        .                   self.inner.borrow_mut().unwrap_region_constraints().universe(r)
   13,479 ( 0.00%)      }
        .           
        .               /// Number of region variables created so far.
    1,010 ( 0.00%)      pub fn num_region_vars(&self) -> usize {
        .                   self.inner.borrow_mut().unwrap_region_constraints().num_region_vars()
    1,515 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
    5,812 ( 0.00%)      pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {
        .                   self.next_region_var(RegionVariableOrigin::Nll(origin))
   11,624 ( 0.00%)      }
        .           
        .               /// Just a convenient wrapper of `next_region_var` for using during NLL.
      111 ( 0.00%)      pub fn next_nll_region_var_in_universe(
        .                   &self,
        .                   origin: NllRegionVariableOrigin,
        .                   universe: ty::UniverseIndex,
        .               ) -> ty::Region<'tcx> {
    1,061 ( 0.00%)          self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)
      222 ( 0.00%)      }
        .           
  125,768 ( 0.00%)      pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
   73,869 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
        .                           // Create a region inference variable for the given
        .                           // region parameter definition.
    2,368 ( 0.00%)                  self.next_region_var(EarlyBoundRegion(span, param.name)).into()
        .                       }
        .                       GenericParamDefKind::Type { .. } => {
        .                           // Create a type inference variable for the given
        .                           // type parameter definition. The substitutions are
        .                           // for actual parameters that may be referred to by
        .                           // the default of this type parameter, if it exists.
        .                           // e.g., `struct Foo<A, B, C = (A, B)>(...);` when
        .                           // used in a path such as `Foo::<T, U>::new()` will
        .                           // use an inference variable for `C` with `[T, U]`
        .                           // as the substitutions for the default, `(T, U)`.
   53,408 ( 0.00%)                  let ty_var_id = self.inner.borrow_mut().type_variables().new_var(
        .                               self.universe(),
   66,760 ( 0.00%)                      TypeVariableOrigin {
        .                                   kind: TypeVariableOriginKind::TypeParameterDefinition(
   13,352 ( 0.00%)                              param.name,
   13,352 ( 0.00%)                              Some(param.def_id),
        .                                   ),
        .                                   span,
        .                               },
        .                           );
        .           
   13,352 ( 0.00%)                  self.tcx.mk_ty_var(ty_var_id).into()
        .                       }
        .                       GenericParamDefKind::Const { .. } => {
        .                           let origin = ConstVariableOrigin {
        .                               kind: ConstVariableOriginKind::ConstParameterDefinition(
        .                                   param.name,
        .                                   param.def_id,
        .                               ),
        .                               span,
        .                           };
        .                           let const_var_id =
       11 ( 0.00%)                      self.inner.borrow_mut().const_unification_table().new_key(ConstVarValue {
        .                                   origin,
        .                                   val: ConstVariableValue::Unknown { universe: self.universe() },
        .                               });
        1 ( 0.00%)                  self.tcx.mk_const_var(const_var_id, self.tcx.type_of(param.def_id)).into()
        .                       }
        .                   }
        8 ( 0.00%)      }
        .           
        .               /// Given a set of generics defined on a type or impl, returns a substitution mapping each
        .               /// type/region parameter to a fresh inference variable.
   25,974 ( 0.00%)      pub fn fresh_substs_for_item(&self, span: Span, def_id: DefId) -> SubstsRef<'tcx> {
  126,383 ( 0.00%)          InternalSubsts::for_item(self.tcx, def_id, |param, _| self.var_for_def(span, param))
   17,316 ( 0.00%)      }
        .           
        .               /// Returns `true` if errors have been reported since this infcx was
        .               /// created. This is sometimes used as a heuristic to skip
        .               /// reporting errors that often occur as a result of earlier
        .               /// errors, but where it's hard to be 100% sure (e.g., unresolved
        .               /// inference variables, regionck errors).
      358 ( 0.00%)      pub fn is_tainted_by_errors(&self) -> bool {
        .                   debug!(
        .                       "is_tainted_by_errors(err_count={}, err_count_on_creation={}, \
        .                        tainted_by_errors_flag={})",
        .                       self.tcx.sess.err_count(),
        .                       self.err_count_on_creation,
        .                       self.tainted_by_errors_flag.get()
        .                   );
        .           
   17,867 ( 0.00%)          if self.tcx.sess.err_count() > self.err_count_on_creation {
        .                       return true; // errors reported since this infcx was made
        .                   }
        .                   self.tainted_by_errors_flag.get()
      537 ( 0.00%)      }
        .           
        .               /// Set the "tainted by errors" flag to true. We call this when we
        .               /// observe an error from a prior pass.
        .               pub fn set_tainted_by_errors(&self) {
        .                   debug!("set_tainted_by_errors()");
        .                   self.tainted_by_errors_flag.set(true)
        .               }
        .           
        .               /// Process the region constraints and return any any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   19,383 ( 0.00%)      pub fn resolve_regions(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) -> Vec<RegionResolutionError<'tcx>> {
   52,611 ( 0.00%)          let (var_infos, data) = {
        .                       let mut inner = self.inner.borrow_mut();
        .                       let inner = &mut *inner;
    2,769 ( 0.00%)              assert!(
    8,307 ( 0.00%)                  self.is_tainted_by_errors() || inner.region_obligations.is_empty(),
        .                           "region_obligations not empty: {:#?}",
        .                           inner.region_obligations
        .                       );
        .                       inner
        .                           .region_constraint_storage
        .                           .take()
        .                           .expect("regions already resolved")
        .                           .with_log(&mut inner.undo_log)
        .                           .into_infos_and_data()
    2,769 ( 0.00%)          };
        .           
        .                   let region_rels =
    2,769 ( 0.00%)              &RegionRelations::new(self.tcx, region_context, outlives_env.free_region_map());
        .           
   24,921 ( 0.00%)          let (lexical_region_resolutions, errors) =
   66,456 ( 0.00%)              lexical_region_resolve::resolve(region_rels, var_infos, data, mode);
        .           
   11,076 ( 0.00%)          let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));
    2,769 ( 0.00%)          assert!(old_value.is_none());
        .           
        .                   errors
   24,921 ( 0.00%)      }
        .           
        .               /// Process the region constraints and report any errors that
        .               /// result. After this, no more unification operations should be
        .               /// done -- or the compiler will panic -- but it is legal to use
        .               /// `resolve_vars_if_possible` as well as `fully_resolve`.
   27,690 ( 0.00%)      pub fn resolve_regions_and_report_errors(
        .                   &self,
        .                   region_context: DefId,
        .                   outlives_env: &OutlivesEnvironment<'tcx>,
        .                   mode: RegionckMode,
        .               ) {
    5,538 ( 0.00%)          let errors = self.resolve_regions(region_context, outlives_env, mode);
        .           
    8,307 ( 0.00%)          if !self.is_tainted_by_errors() {
        .                       // As a heuristic, just skip reporting region errors
        .                       // altogether if other errors have been reported while
        .                       // this infcx was in use.  This is totally hokey but
        .                       // otherwise we have a hard time separating legit region
        .                       // errors from silly ones.
    5,538 ( 0.00%)              self.report_region_errors(&errors);
        .                   }
   13,845 ( 0.00%)      }
        .           
        .               /// Obtains (and clears) the current set of region
        .               /// constraints. The inference context is still usable: further
        .               /// unifications will simply add new constraints.
        .               ///
        .               /// This method is not meant to be used with normal lexical region
        .               /// resolution. Rather, it is used in the NLL mode as a kind of
        .               /// interim hack: basically we run normal type-check and generate
        .               /// region constraints as normal, but then we take them and
        .               /// translate them into the form that the NLL solver
        .               /// understands. See the NLL module for mode details.
       96 ( 0.00%)      pub fn take_and_reset_region_constraints(&self) -> RegionConstraintData<'tcx> {
       32 ( 0.00%)          assert!(
        .                       self.inner.borrow().region_obligations.is_empty(),
        .                       "region_obligations not empty: {:#?}",
        .                       self.inner.borrow().region_obligations
        .                   );
        .           
      128 ( 0.00%)          self.inner.borrow_mut().unwrap_region_constraints().take_and_reset_data()
      160 ( 0.00%)      }
        .           
        .               /// Gives temporary access to the region constraint data.
        .               pub fn with_region_constraints<R>(
        .                   &self,
        .                   op: impl FnOnce(&RegionConstraintData<'tcx>) -> R,
        .               ) -> R {
        .                   let mut inner = self.inner.borrow_mut();
    9,816 ( 0.00%)          op(inner.unwrap_region_constraints().data())
        .               }
        .           
        .               pub fn region_var_origin(&self, vid: ty::RegionVid) -> RegionVariableOrigin {
        .                   let mut inner = self.inner.borrow_mut();
        .                   let inner = &mut *inner;
        .                   inner
        .                       .region_constraint_storage
        .                       .as_mut()
-- line 1335 ----------------------------------------
-- line 1338 ----------------------------------------
        .                       .var_origin(vid)
        .               }
        .           
        .               /// Takes ownership of the list of variable regions. This implies
        .               /// that all the region constraints have already been taken, and
        .               /// hence that `resolve_regions_and_report_errors` can never be
        .               /// called. This is used only during NLL processing to "hand off" ownership
        .               /// of the set of region variables into the NLL region context.
      580 ( 0.00%)      pub fn take_region_var_origins(&self) -> VarInfos {
        .                   let mut inner = self.inner.borrow_mut();
    2,204 ( 0.00%)          let (var_infos, data) = inner
        .                       .region_constraint_storage
        .                       .take()
        .                       .expect("regions already resolved")
        .                       .with_log(&mut inner.undo_log)
      116 ( 0.00%)              .into_infos_and_data();
      116 ( 0.00%)          assert!(data.is_empty());
        .                   var_infos
      928 ( 0.00%)      }
        .           
        .               pub fn ty_to_string(&self, t: Ty<'tcx>) -> String {
        .                   self.resolve_vars_if_possible(t).to_string()
        .               }
        .           
        .               /// If `TyVar(vid)` resolves to a type, return that type. Else, return the
        .               /// universe index of `TyVar(vid)`.
    5,282 ( 0.00%)      pub fn probe_ty_var(&self, vid: TyVid) -> Result<Ty<'tcx>, ty::UniverseIndex> {
        .                   use self::type_variable::TypeVariableValue;
        .           
   15,846 ( 0.00%)          match self.inner.borrow_mut().type_variables().probe(vid) {
        .                       TypeVariableValue::Known { value } => Ok(value),
        .                       TypeVariableValue::Unknown { universe } => Err(universe),
        .                   }
   18,487 ( 0.00%)      }
        .           
        .               /// Resolve any type variables found in `value` -- but only one
        .               /// level.  So, if the variable `?X` is bound to some type
        .               /// `Foo<?Y>`, then this would return `Foo<?Y>` (but `?Y` may
        .               /// itself be bound to a type).
        .               ///
        .               /// Useful when you only need to inspect the outermost level of
        .               /// the type and don't care about nested types (or perhaps you
        .               /// will be resolving them as well, e.g. in a loop).
        .               pub fn shallow_resolve<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
   85,030 ( 0.00%)          value.fold_with(&mut ShallowResolver { infcx: self })
        .               }
        .           
    6,734 ( 0.00%)      pub fn root_var(&self, var: ty::TyVid) -> ty::TyVid {
        .                   self.inner.borrow_mut().type_variables().root_var(var)
   10,101 ( 0.00%)      }
        .           
        .               /// Where possible, replaces type/const variables in
        .               /// `value` with their final value. Note that region variables
        .               /// are unaffected. If a type/const variable has not been unified, it
        .               /// is left as is. This is an idempotent operation that does
        .               /// not affect inference state in any way and so you can do it
        .               /// at will.
      496 ( 0.00%)      pub fn resolve_vars_if_possible<T>(&self, value: T) -> T
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
  107,929 ( 0.00%)          if !value.needs_infer() {
   95,152 ( 0.00%)              return value; // Avoid duplicated subst-folding.
        .                   }
  102,567 ( 0.00%)          let mut r = resolve::OpportunisticVarResolver::new(self);
  108,348 ( 0.00%)          value.fold_with(&mut r)
      564 ( 0.00%)      }
        .           
        .               /// Returns the first unresolved variable contained in `T`. In the
        .               /// process of visiting `T`, this will resolve (where possible)
        .               /// type variables in `T`, but it never constructs the final,
        .               /// resolved type, so it's more efficient than
        .               /// `resolve_vars_if_possible()`.
        .               pub fn unresolved_type_vars<T>(&self, value: &T) -> Option<(Ty<'tcx>, Option<Span>)>
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
    2,580 ( 0.00%)          value.visit_with(&mut resolve::UnresolvedTypeFinder::new(self)).break_value()
        .               }
        .           
        .               pub fn probe_const_var(
        .                   &self,
        .                   vid: ty::ConstVid<'tcx>,
        .               ) -> Result<&'tcx ty::Const<'tcx>, ty::UniverseIndex> {
        .                   match self.inner.borrow_mut().const_unification_table().probe_value(vid).val {
        .                       ConstVariableValue::Known { value } => Ok(value),
-- line 1426 ----------------------------------------
-- line 1490 ----------------------------------------
        .                   expected: &'tcx ty::Const<'tcx>,
        .                   actual: &'tcx ty::Const<'tcx>,
        .                   err: TypeError<'tcx>,
        .               ) -> DiagnosticBuilder<'tcx> {
        .                   let trace = TypeTrace::consts(cause, true, expected, actual);
        .                   self.report_and_explain_type_error(trace, &err)
        .               }
        .           
    5,436 ( 0.00%)      pub fn replace_bound_vars_with_fresh_vars<T>(
        .                   &self,
        .                   span: Span,
        .                   lbrct: LateBoundRegionConversionTime,
        .                   value: ty::Binder<'tcx, T>,
        .               ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)
        .               where
        .                   T: TypeFoldable<'tcx>,
        .               {
        .                   let fld_r =
   28,604 ( 0.00%)              |br: ty::BoundRegion| self.next_region_var(LateBoundRegion(span, br.kind, lbrct));
        .                   let fld_t = |_| {
        .                       self.next_ty_var(TypeVariableOrigin {
        .                           kind: TypeVariableOriginKind::MiscVariable,
        .                           span,
        .                       })
        .                   };
        .                   let fld_c = |_, ty| {
        .                       self.next_const_var(
        .                           ty,
        .                           ConstVariableOrigin { kind: ConstVariableOriginKind::MiscVariable, span },
        .                       )
        .                   };
  142,272 ( 0.00%)          self.tcx.replace_bound_vars(value, fld_r, fld_t, fld_c)
    3,624 ( 0.00%)      }
        .           
        .               /// See the [`region_constraints::RegionConstraintCollector::verify_generic_bound`] method.
    4,240 ( 0.00%)      pub fn verify_generic_bound(
        .                   &self,
        .                   origin: SubregionOrigin<'tcx>,
        .                   kind: GenericKind<'tcx>,
        .                   a: ty::Region<'tcx>,
        .                   bound: VerifyBound<'tcx>,
        .               ) {
        .                   debug!("verify_generic_bound({:?}, {:?} <: {:?})", kind, a, bound);
        .           
    1,590 ( 0.00%)          self.inner
        .                       .borrow_mut()
        .                       .unwrap_region_constraints()
    9,010 ( 0.00%)              .verify_generic_bound(origin, kind, a, bound);
    3,710 ( 0.00%)      }
        .           
        .               /// Obtains the latest type of the given closure; this may be a
        .               /// closure in the current function, in which case its
        .               /// `ClosureKind` may not yet be known.
    1,070 ( 0.00%)      pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {
    2,140 ( 0.00%)          let closure_kind_ty = closure_substs.as_closure().kind_ty();
        .                   let closure_kind_ty = self.shallow_resolve(closure_kind_ty);
    1,605 ( 0.00%)          closure_kind_ty.to_opt_closure_kind()
        .               }
        .           
        .               /// Clears the selection, evaluation, and projection caches. This is useful when
        .               /// repeatedly attempting to select an `Obligation` while changing only
        .               /// its `ParamEnv`, since `FulfillmentContext` doesn't use probing.
        .               pub fn clear_caches(&self) {
        .                   self.selection_cache.clear();
        .                   self.evaluation_cache.clear();
        .                   self.inner.borrow_mut().projection_cache().clear();
        .               }
        .           
        .               pub fn universe(&self) -> ty::UniverseIndex {
  176,876 ( 0.01%)          self.universe.get()
   53,215 ( 0.00%)      }
        .           
        .               /// Creates and return a fresh universe that extends all previous
        .               /// universes. Updates `self.universe` to that new universe.
      258 ( 0.00%)      pub fn create_next_universe(&self) -> ty::UniverseIndex {
      418 ( 0.00%)          let u = self.universe.get().next_universe();
        .                   self.universe.set(u);
        .                   u
      258 ( 0.00%)      }
        .           
        .               /// Resolves and evaluates a constant.
        .               ///
        .               /// The constant can be located on a trait like `<A as B>::C`, in which case the given
        .               /// substitutions and environment are used to resolve the constant. Alternatively if the
        .               /// constant has generic parameters in scope the substitutions are used to evaluate the value of
        .               /// the constant. For example in `fn foo<T>() { let _ = [0; bar::<T>()]; }` the repeat count
        .               /// constant `bar::<T>()` requires a substitution for `T`, if the substitution for `T` is still
-- line 1576 ----------------------------------------
-- line 1606 ----------------------------------------
        .                   // variables, thus we don't need to substitute back the original values.
        .                   self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)
        .               }
        .           
        .               /// If `typ` is a type variable of some kind, resolve it one level
        .               /// (but do not resolve types found in the result). If `typ` is
        .               /// not a type variable, just return it unmodified.
        .               // FIXME(eddyb) inline into `ShallowResolver::visit_ty`.
1,326,288 ( 0.04%)      fn shallow_resolve_ty(&self, typ: Ty<'tcx>) -> Ty<'tcx> {
  710,307 ( 0.02%)          match *typ.kind() {
        .                       ty::Infer(ty::TyVar(v)) => {
        .                           // Not entirely obvious: if `typ` is a type variable,
        .                           // it can be resolved to an int/float variable, which
        .                           // can then be recursively resolved, hence the
        .                           // recursion. Note though that we prevent type
        .                           // variables from unifying to other type variables
        .                           // directly (though they may be embedded
        .                           // structurally), and we prevent cycles in any case,
        .                           // so this recursion should always be of very limited
        .                           // depth.
        .                           //
        .                           // Note: if these two lines are combined into one we get
        .                           // dynamic borrow errors on `self.inner`.
  359,552 ( 0.01%)                  let known = self.inner.borrow_mut().type_variables().probe(v).known();
        .                           known.map_or(typ, |t| self.shallow_resolve_ty(t))
        .                       }
        .           
      204 ( 0.00%)              ty::Infer(ty::IntVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .int_unification_table()
        .                           .probe_value(v)
       90 ( 0.00%)                  .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       ty::Infer(ty::FloatVar(v)) => self
        .                           .inner
        .                           .borrow_mut()
        .                           .float_unification_table()
        .                           .probe_value(v)
        .                           .map(|v| v.to_type(self.tcx))
        .                           .unwrap_or(typ),
        .           
        .                       _ => typ,
        .                   }
1,492,074 ( 0.05%)      }
        .           
        .               /// `ty_or_const_infer_var_changed` is equivalent to one of these two:
        .               ///   * `shallow_resolve(ty) != ty` (where `ty.kind = ty::Infer(_)`)
        .               ///   * `shallow_resolve(ct) != ct` (where `ct.kind = ty::ConstKind::Infer(_)`)
        .               ///
        .               /// However, `ty_or_const_infer_var_changed` is more efficient. It's always
        .               /// inlined, despite being large, because it has only two call sites that
        .               /// are extremely hot (both in `traits::fulfill`'s checking of `stalled_on`
-- line 1659 ----------------------------------------
-- line 1662 ----------------------------------------
        .               #[inline(always)]
        .               pub fn ty_or_const_infer_var_changed(&self, infer_var: TyOrConstInferVar<'tcx>) -> bool {
        .                   match infer_var {
        .                       TyOrConstInferVar::Ty(v) => {
        .                           use self::type_variable::TypeVariableValue;
        .           
        .                           // If `inlined_probe` returns a `Known` value, it never equals
        .                           // `ty::Infer(ty::TyVar(v))`.
  359,679 ( 0.01%)                  match self.inner.borrow_mut().type_variables().inlined_probe(v) {
        .                               TypeVariableValue::Unknown { .. } => false,
        .                               TypeVariableValue::Known { .. } => true,
        .                           }
        .                       }
        .           
        .                       TyOrConstInferVar::TyInt(v) => {
        .                           // If `inlined_probe_value` returns a value it's always a
        .                           // `ty::Int(_)` or `ty::UInt(_)`, which never matches a
-- line 1678 ----------------------------------------
-- line 1716 ----------------------------------------
        .               /// Equivalent to `ty::ConstKind::Infer(ty::InferConst::Var(_))`.
        .               Const(ConstVid<'tcx>),
        .           }
        .           
        .           impl<'tcx> TyOrConstInferVar<'tcx> {
        .               /// Tries to extract an inference variable from a type or a constant, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`) and
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
    2,314 ( 0.00%)      pub fn maybe_from_generic_arg(arg: GenericArg<'tcx>) -> Option<Self> {
        .                   match arg.unpack() {
        .                       GenericArgKind::Type(ty) => Self::maybe_from_ty(ty),
        .                       GenericArgKind::Const(ct) => Self::maybe_from_const(ct),
        .                       GenericArgKind::Lifetime(_) => None,
        .                   }
    2,314 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a type, returns `None`
        .               /// for types other than `ty::Infer(_)` (or `InferTy::Fresh*`).
      324 ( 0.00%)      pub fn maybe_from_ty(ty: Ty<'tcx>) -> Option<Self> {
   23,665 ( 0.00%)          match *ty.kind() {
    5,254 ( 0.00%)              ty::Infer(ty::TyVar(v)) => Some(TyOrConstInferVar::Ty(v)),
        .                       ty::Infer(ty::IntVar(v)) => Some(TyOrConstInferVar::TyInt(v)),
        .                       ty::Infer(ty::FloatVar(v)) => Some(TyOrConstInferVar::TyFloat(v)),
        .                       _ => None,
        .                   }
      324 ( 0.00%)      }
        .           
        .               /// Tries to extract an inference variable from a constant, returns `None`
        .               /// for constants other than `ty::ConstKind::Infer(_)` (or `InferConst::Fresh`).
        .               pub fn maybe_from_const(ct: &'tcx ty::Const<'tcx>) -> Option<Self> {
        .                   match ct.val {
        .                       ty::ConstKind::Infer(InferConst::Var(v)) => Some(TyOrConstInferVar::Const(v)),
        .                       _ => None,
        .                   }
-- line 1749 ----------------------------------------
-- line 1751 ----------------------------------------
        .           }
        .           
        .           struct ShallowResolver<'a, 'tcx> {
        .               infcx: &'a InferCtxt<'a, 'tcx>,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
        4 ( 0.00%)          self.infcx.tcx
        2 ( 0.00%)      }
        .           
        .               fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {
  246,649 ( 0.01%)          self.infcx.shallow_resolve_ty(ty)
        .               }
        .           
    1,528 ( 0.00%)      fn fold_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
      766 ( 0.00%)          if let ty::Const { val: ty::ConstKind::Infer(InferConst::Var(vid)), .. } = ct {
        5 ( 0.00%)              self.infcx
        .                           .inner
        .                           .borrow_mut()
        .                           .const_unification_table()
        3 ( 0.00%)                  .probe_value(*vid)
        .                           .val
        .                           .known()
        .                           .unwrap_or(ct)
        .                   } else {
        .                       ct
        .                   }
    1,910 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeTrace<'tcx> {
        .               pub fn span(&self) -> Span {
       22 ( 0.00%)          self.cause.span
        .               }
        .           
        .               pub fn types(
        .                   cause: &ObligationCause<'tcx>,
        .                   a_is_expected: bool,
        .                   a: Ty<'tcx>,
        .                   b: Ty<'tcx>,
        .               ) -> TypeTrace<'tcx> {
-- line 1792 ----------------------------------------
-- line 1800 ----------------------------------------
        .                   b: &'tcx ty::Const<'tcx>,
        .               ) -> TypeTrace<'tcx> {
        .                   TypeTrace { cause: cause.clone(), values: Consts(ExpectedFound::new(a_is_expected, a, b)) }
        .               }
        .           }
        .           
        .           impl<'tcx> SubregionOrigin<'tcx> {
        .               pub fn span(&self) -> Span {
       55 ( 0.00%)          match *self {
       11 ( 0.00%)              Subtype(ref a) => a.span(),
        .                       RelateObjectBound(a) => a,
        .                       RelateParamBound(a, ..) => a,
        .                       RelateRegionParamBound(a) => a,
        .                       Reborrow(a) => a,
        .                       ReborrowUpvar(a, _) => a,
        .                       DataBorrowed(_, a) => a,
        .                       ReferenceOutlivesReferent(_, a) => a,
        .                       CompareImplMethodObligation { span, .. } => span,
-- line 1817 ----------------------------------------
-- line 1818 ----------------------------------------
        .                       CompareImplTypeObligation { span, .. } => span,
        .                   }
        .               }
        .           
        .               pub fn from_obligation_cause<F>(cause: &traits::ObligationCause<'tcx>, default: F) -> Self
        .               where
        .                   F: FnOnce() -> Self,
        .               {
    9,941 ( 0.00%)          match *cause.code() {
    1,111 ( 0.00%)              traits::ObligationCauseCode::ReferenceOutlivesReferent(ref_type) => {
    5,555 ( 0.00%)                  SubregionOrigin::ReferenceOutlivesReferent(ref_type, cause.span)
        .                       }
        .           
        .                       traits::ObligationCauseCode::CompareImplMethodObligation {
        .                           impl_item_def_id,
        .                           trait_item_def_id,
        .                       } => SubregionOrigin::CompareImplMethodObligation {
        .                           span: cause.span,
        .                           impl_item_def_id,
-- line 1836 ----------------------------------------

1,148,458 ( 0.04%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_infer/src/infer/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs
--------------------------------------------------------------------------------
Ir                 

-- line 84 ----------------------------------------
        .           pub struct SessionGlobals {
        .               symbol_interner: symbol::Interner,
        .               span_interner: Lock<span_encoding::SpanInterner>,
        .               hygiene_data: Lock<hygiene::HygieneData>,
        .               source_map: Lock<Option<Lrc<SourceMap>>>,
        .           }
        .           
        .           impl SessionGlobals {
       12 ( 0.00%)      pub fn new(edition: Edition) -> SessionGlobals {
       50 ( 0.00%)          SessionGlobals {
        2 ( 0.00%)              symbol_interner: symbol::Interner::fresh(),
        .                       span_interner: Lock::new(span_encoding::SpanInterner::default()),
        6 ( 0.00%)              hygiene_data: Lock::new(hygiene::HygieneData::new(edition)),
        .                       source_map: Lock::new(None),
        .                   }
       10 ( 0.00%)      }
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_globals_then<R>(edition: Edition, f: impl FnOnce() -> R) -> R {
        1 ( 0.00%)      assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
        3 ( 0.00%)      let session_globals = SessionGlobals::new(edition);
        7 ( 0.00%)      SESSION_GLOBALS.set(&session_globals, f)
        1 ( 0.00%)  }
        .           
        .           #[inline]
        .           pub fn set_session_globals_then<R>(session_globals: &SessionGlobals, f: impl FnOnce() -> R) -> R {
        .               assert!(
        .                   !SESSION_GLOBALS.is_set(),
        .                   "SESSION_GLOBALS should never be overwritten! \
        .                    Use another thread if you need another SessionGlobals"
        .               );
-- line 119 ----------------------------------------
-- line 120 ----------------------------------------
        .               SESSION_GLOBALS.set(session_globals, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_if_not_set_then<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        4 ( 0.00%)      create_session_if_not_set_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_session_if_not_set_then<R, F>(edition: Edition, f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
        1 ( 0.00%)      if !SESSION_GLOBALS.is_set() {
        3 ( 0.00%)          let session_globals = SessionGlobals::new(edition);
       11 ( 0.00%)          SESSION_GLOBALS.set(&session_globals, || SESSION_GLOBALS.with(f))
        1 ( 0.00%)      } else {
        .                   SESSION_GLOBALS.with(f)
        .               }
        .           }
        .           
        .           #[inline]
        .           pub fn with_session_globals<R, F>(f: F) -> R
        .           where
        .               F: FnOnce(&SessionGlobals) -> R,
        .           {
  349,511 ( 0.01%)      SESSION_GLOBALS.with(f)
        .           }
        .           
        .           #[inline]
        .           pub fn create_default_session_globals_then<R>(f: impl FnOnce() -> R) -> R {
        .               create_session_globals_then(edition::DEFAULT_EDITION, f)
        .           }
        .           
        .           // If this ever becomes non thread-local, `decode_syntax_context`
        .           // and `decode_expn_id` will need to be updated to handle concurrent
        .           // deserialization.
        .           scoped_tls::scoped_thread_local!(static SESSION_GLOBALS: SessionGlobals);
        .           
        .           // FIXME: We should use this enum or something like it to get rid of the
        .           // use of magic `/rust/1.x/...` paths across the board.
      118 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd)]
    3,152 ( 0.00%)  #[derive(Decodable)]
        .           pub enum RealFileName {
       19 ( 0.00%)      LocalPath(PathBuf),
        .               /// For remapped paths (namely paths into libstd that have been mapped
        .               /// to the appropriate spot on the local host's file system, and local file
        .               /// system paths that have been remapped with `FilePathMapping`),
        .               Remapped {
        .                   /// `local_path` is the (host-dependent) local path to the file. This is
        .                   /// None if the file was imported from another crate
        .                   local_path: Option<PathBuf>,
        .                   /// `virtual_name` is the stable path rustc will store internally within
-- line 175 ----------------------------------------
-- line 179 ----------------------------------------
        .           }
        .           
        .           impl Hash for RealFileName {
        .               fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        .                   // To prevent #70924 from happening again we should only hash the
        .                   // remapped (virtualized) path if that exists. This is because
        .                   // virtualized paths to sysroot crates (/rust/$hash or /rust/$version)
        .                   // remain stable even if the corresponding local_path changes
    8,000 ( 0.00%)          self.remapped_path_if_available().hash(state)
        .               }
        .           }
        .           
        .           // This is functionally identical to #[derive(Encodable)], with the exception of
        .           // an added assert statement
        .           impl<S: Encoder> Encodable<S> for RealFileName {
        .               fn encode(&self, encoder: &mut S) -> Result<(), S::Error> {
       12 ( 0.00%)          encoder.emit_enum(|encoder| match *self {
        .                       RealFileName::LocalPath(ref local_path) => {
       48 ( 0.00%)                  encoder.emit_enum_variant("LocalPath", 0, 1, |encoder| {
        .                               encoder.emit_enum_variant_arg(true, |encoder| local_path.encode(encoder))?;
        .                               Ok(())
        .                           })
        .                       }
        .           
        .                       RealFileName::Remapped { ref local_path, ref virtual_name } => encoder
        .                           .emit_enum_variant("Remapped", 1, 2, |encoder| {
        .                               // For privacy and build reproducibility, we must not embed host-dependant path in artifacts
-- line 205 ----------------------------------------
-- line 224 ----------------------------------------
        .                           p.as_ref().map(PathBuf::as_path)
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        2 ( 0.00%)      pub fn into_local_path(self) -> Option<PathBuf> {
        2 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p) => Some(p),
        .                       RealFileName::Remapped { local_path: p, virtual_name: _ } => p,
        .                   }
        3 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for embedding into build artifacts. This would still
        .               /// be a local path if it has not been remapped. A remapped path will not correspond
        .               /// to a valid file system path: see `local_path_if_available()` for something that
        .               /// is more likely to return paths into the local host file system.
        .               pub fn remapped_path_if_available(&self) -> &Path {
   11,878 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(p)
        .                       | RealFileName::Remapped { local_path: _, virtual_name: p } => &p,
        .                   }
        7 ( 0.00%)      }
        .           
        .               /// Returns the path suitable for reading from the file system on the local host,
        .               /// if this information exists. Otherwise returns the remapped name.
        .               /// Avoid embedding this in build artifacts; see `remapped_path_if_available()` for that.
        .               pub fn local_path_if_available(&self) -> &Path {
        6 ( 0.00%)          match self {
        .                       RealFileName::LocalPath(path)
        .                       | RealFileName::Remapped { local_path: None, virtual_name: path }
        .                       | RealFileName::Remapped { local_path: Some(path), virtual_name: _ } => path,
        .                   }
        .               }
        .           
      528 ( 0.00%)      pub fn to_string_lossy(&self, display_pref: FileNameDisplayPreference) -> Cow<'_, str> {
    3,019 ( 0.00%)          match display_pref {
        .                       FileNameDisplayPreference::Local => self.local_path_if_available().to_string_lossy(),
        .                       FileNameDisplayPreference::Remapped => {
        .                           self.remapped_path_if_available().to_string_lossy()
        .                       }
        .                   }
      792 ( 0.00%)      }
        .           }
        .           
        .           /// Differentiates between real files and common virtual files.
   16,655 ( 0.00%)  #[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash)]
   19,035 ( 0.00%)  #[derive(Decodable, Encodable)]
        .           pub enum FileName {
        .               Real(RealFileName),
        .               /// Call to `quote!`.
        8 ( 0.00%)      QuoteExpansion(u64),
        .               /// Command line.
        .               Anon(u64),
        .               /// Hack in `src/librustc_ast/parse.rs`.
        .               // FIXME(jseyfried)
        .               MacroExpansion(u64),
        .               ProcMacroSourceCode(u64),
        .               /// Strings provided as `--cfg [cfgspec]` stored in a `crate_cfg`.
        .               CfgSpec(u64),
-- line 285 ----------------------------------------
-- line 288 ----------------------------------------
        .               /// Custom sources for explicit parser calls from plugins and drivers.
        .               Custom(String),
        .               DocTest(PathBuf, isize),
        .               /// Post-substitution inline assembly from LLVM.
        .               InlineAsm(u64),
        .           }
        .           
        .           impl From<PathBuf> for FileName {
       42 ( 0.00%)      fn from(p: PathBuf) -> Self {
       12 ( 0.00%)          assert!(!p.to_string_lossy().ends_with('>'));
       36 ( 0.00%)          FileName::Real(RealFileName::LocalPath(p))
       42 ( 0.00%)      }
        .           }
        .           
       34 ( 0.00%)  #[derive(Clone, Copy, Eq, PartialEq, Hash, Debug)]
        .           pub enum FileNameDisplayPreference {
        .               Remapped,
        .               Local,
        .           }
        .           
        .           pub struct FileNameDisplay<'a> {
        .               inner: &'a FileName,
        .               display_pref: FileNameDisplayPreference,
        .           }
        .           
        .           impl fmt::Display for FileNameDisplay<'_> {
    9,688 ( 0.00%)      fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        .                   use FileName::*;
   14,532 ( 0.00%)          match *self.inner {
        .                       Real(ref name) => {
   14,532 ( 0.00%)                  write!(fmt, "{}", name.to_string_lossy(self.display_pref))
        .                       }
        .                       QuoteExpansion(_) => write!(fmt, "<quote expansion>"),
        .                       MacroExpansion(_) => write!(fmt, "<macro expansion>"),
        .                       Anon(_) => write!(fmt, "<anon>"),
        .                       ProcMacroSourceCode(_) => write!(fmt, "<proc-macro source code>"),
        .                       CfgSpec(_) => write!(fmt, "<cfgspec>"),
        .                       CliCrateAttr(_) => write!(fmt, "<crate attribute>"),
        .                       Custom(ref s) => write!(fmt, "<{}>", s),
        .                       DocTest(ref path, _) => write!(fmt, "{}", path.display()),
        .                       InlineAsm(_) => write!(fmt, "<inline asm>"),
        .                   }
   12,110 ( 0.00%)      }
        .           }
        .           
        .           impl FileNameDisplay<'_> {
      276 ( 0.00%)      pub fn to_string_lossy(&self) -> Cow<'_, str> {
      207 ( 0.00%)          match self.inner {
       69 ( 0.00%)              FileName::Real(ref inner) => inner.to_string_lossy(self.display_pref),
        .                       _ => Cow::from(format!("{}", self)),
        .                   }
      276 ( 0.00%)      }
        .           }
        .           
        .           impl FileName {
        .               pub fn is_real(&self) -> bool {
        .                   use FileName::*;
    7,732 ( 0.00%)          match *self {
        .                       Real(_) => true,
        .                       Anon(_)
        .                       | MacroExpansion(_)
        .                       | ProcMacroSourceCode(_)
        .                       | CfgSpec(_)
        .                       | CliCrateAttr(_)
        .                       | Custom(_)
        .                       | QuoteExpansion(_)
        .                       | DocTest(_, _)
        .                       | InlineAsm(_) => false,
        .                   }
        .               }
        .           
    2,471 ( 0.00%)      pub fn prefer_remapped(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Remapped }
    4,942 ( 0.00%)      }
        .           
        .               // This may include transient local filesystem information.
        .               // Must not be embedded in build outputs.
        6 ( 0.00%)      pub fn prefer_local(&self) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref: FileNameDisplayPreference::Local }
       12 ( 0.00%)      }
        .           
        .               pub fn display(&self, display_pref: FileNameDisplayPreference) -> FileNameDisplay<'_> {
        .                   FileNameDisplay { inner: self, display_pref }
        .               }
        .           
        .               pub fn macro_expansion_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
-- line 375 ----------------------------------------
-- line 383 ----------------------------------------
        .               }
        .           
        .               pub fn proc_macro_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::ProcMacroSourceCode(hasher.finish())
        .               }
        .           
       40 ( 0.00%)      pub fn cfg_spec_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
       16 ( 0.00%)          FileName::QuoteExpansion(hasher.finish())
       40 ( 0.00%)      }
        .           
        .               pub fn cli_crate_attr_source_code(src: &str) -> FileName {
        .                   let mut hasher = StableHasher::new();
        .                   src.hash(&mut hasher);
        .                   FileName::CliCrateAttr(hasher.finish())
        .               }
        .           
        .               pub fn doc_test_source_code(path: PathBuf, line: isize) -> FileName {
-- line 403 ----------------------------------------
-- line 423 ----------------------------------------
        .           /// that the length of the span is equal to `span.hi - span.lo`; there may be space in the
        .           /// [`BytePos`] range between files.
        .           ///
        .           /// `SpanData` is public because `Span` uses a thread-local interner and can't be
        .           /// sent to other threads, but some pieces of performance infra run in a separate thread.
        .           /// Using `Span` is generally preferred.
        .           #[derive(Clone, Copy, Hash, PartialEq, Eq)]
        .           pub struct SpanData {
      744 ( 0.00%)      pub lo: BytePos,
      744 ( 0.00%)      pub hi: BytePos,
        .               /// Information about where the macro came from, if this piece of
        .               /// code was created by a macro expansion.
    2,232 ( 0.00%)      pub ctxt: SyntaxContext,
      744 ( 0.00%)      pub parent: Option<LocalDefId>,
        .           }
        .           
        .           // Order spans by position in the file.
        .           impl Ord for SpanData {
        .               fn cmp(&self, other: &Self) -> Ordering {
        .                   let SpanData {
        .                       lo: s_lo,
        .                       hi: s_hi,
-- line 444 ----------------------------------------
-- line 485 ----------------------------------------
        .               }
        .               #[inline]
        .               pub fn with_parent(&self, parent: Option<LocalDefId>) -> Span {
        .                   Span::new(self.lo, self.hi, self.ctxt, parent)
        .               }
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
  114,969 ( 0.00%)          self.lo.0 == 0 && self.hi.0 == 0
        .               }
        .               /// Returns `true` if `self` fully encloses `other`.
        .               pub fn contains(self, other: Self) -> bool {
      393 ( 0.00%)          self.lo <= other.lo && other.hi <= self.hi
        .               }
        .           }
        .           
        .           // The interner is pointed to by a thread local value which is only set on the main thread
        .           // with parallelization is disabled. So we don't allow `Span` to transfer between threads
        .           // to avoid panics and other errors, even though it would be memory safe to do so.
        .           #[cfg(not(parallel_compiler))]
        .           impl !Send for Span {}
        .           #[cfg(not(parallel_compiler))]
        .           impl !Sync for Span {}
        .           
        .           impl PartialOrd for Span {
   36,856 ( 0.00%)      fn partial_cmp(&self, rhs: &Self) -> Option<Ordering> {
   27,642 ( 0.00%)          PartialOrd::partial_cmp(&self.data(), &rhs.data())
   36,856 ( 0.00%)      }
        .           }
        .           impl Ord for Span {
        .               fn cmp(&self, rhs: &Self) -> Ordering {
        .                   Ord::cmp(&self.data(), &rhs.data())
        .               }
        .           }
        .           
        .           /// A collection of `Span`s.
-- line 520 ----------------------------------------
-- line 532 ----------------------------------------
        .           }
        .           
        .           impl Span {
        .               #[inline]
        .               pub fn lo(self) -> BytePos {
        .                   self.data().lo
        .               }
        .               #[inline]
   35,181 ( 0.00%)      pub fn with_lo(self, lo: BytePos) -> Span {
        .                   self.data().with_lo(lo)
   23,454 ( 0.00%)      }
        .               #[inline]
    1,120 ( 0.00%)      pub fn hi(self) -> BytePos {
        .                   self.data().hi
    1,120 ( 0.00%)      }
        .               #[inline]
    4,707 ( 0.00%)      pub fn with_hi(self, hi: BytePos) -> Span {
        .                   self.data().with_hi(hi)
    3,138 ( 0.00%)      }
        .               #[inline]
        .               pub fn ctxt(self) -> SyntaxContext {
        .                   self.data_untracked().ctxt
        .               }
        .               #[inline]
    3,315 ( 0.00%)      pub fn with_ctxt(self, ctxt: SyntaxContext) -> Span {
        .                   self.data_untracked().with_ctxt(ctxt)
    1,989 ( 0.00%)      }
        .               #[inline]
        .               pub fn parent(self) -> Option<LocalDefId> {
        .                   self.data().parent
        .               }
        .               #[inline]
       18 ( 0.00%)      pub fn with_parent(self, ctxt: Option<LocalDefId>) -> Span {
        .                   self.data().with_parent(ctxt)
       12 ( 0.00%)      }
        .           
        .               /// Returns `true` if this is a dummy span with any hygienic context.
        .               #[inline]
        .               pub fn is_dummy(self) -> bool {
        .                   self.data_untracked().is_dummy()
        .               }
        .           
        .               /// Returns `true` if this span comes from a macro or desugaring.
-- line 574 ----------------------------------------
-- line 600 ----------------------------------------
        .               /// Returns a new span representing an empty span at the beginning of this span.
        .               #[inline]
        .               pub fn shrink_to_lo(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_hi(span.lo)
        .               }
        .               /// Returns a new span representing an empty span at the end of this span.
        .               #[inline]
      135 ( 0.00%)      pub fn shrink_to_hi(self) -> Span {
        .                   let span = self.data_untracked();
        .                   span.with_lo(span.hi)
       90 ( 0.00%)      }
        .           
        .               #[inline]
        .               /// Returns `true` if `hi == lo`.
        .               pub fn is_empty(self) -> bool {
        .                   let span = self.data_untracked();
        .                   span.hi == span.lo
        .               }
        .           
        .               /// Returns `self` if `self` is not the dummy span, and `other` otherwise.
        .               pub fn substitute_dummy(self, other: Span) -> Span {
        .                   if self.is_dummy() { other } else { self }
        .               }
        .           
        .               /// Returns `true` if `self` fully encloses `other`.
    1,179 ( 0.00%)      pub fn contains(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.contains(other)
      786 ( 0.00%)      }
        .           
        .               /// Returns `true` if `self` touches `other`.
        .               pub fn overlaps(self, other: Span) -> bool {
        .                   let span = self.data();
        .                   let other = other.data();
        .                   span.lo < other.hi && other.lo < span.hi
        .               }
        .           
-- line 638 ----------------------------------------
-- line 663 ----------------------------------------
        .               /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,
        .               /// if any.
        .               pub fn parent_callsite(self) -> Option<Span> {
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(expn_data.call_site) } else { None }
        .               }
        .           
        .               /// Walk down the expansion ancestors to find a span that's contained within `outer`.
    1,110 ( 0.00%)      pub fn find_ancestor_inside(mut self, outer: Span) -> Option<Span> {
      555 ( 0.00%)          while !outer.contains(self) {
        .                       self = self.parent_callsite()?;
        .                   }
        .                   Some(self)
    1,221 ( 0.00%)      }
        .           
        .               /// Edition of the crate from which this span came.
    8,040 ( 0.00%)      pub fn edition(self) -> edition::Edition {
        .                   self.ctxt().edition()
    5,360 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn rust_2015(self) -> bool {
    1,743 ( 0.00%)          self.edition() == edition::Edition::Edition2015
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2018(self) -> bool {
    1,014 ( 0.00%)          self.edition() >= edition::Edition::Edition2018
        .               }
        .           
        .               #[inline]
        .               pub fn rust_2021(self) -> bool {
    1,076 ( 0.00%)          self.edition() >= edition::Edition::Edition2021
        .               }
        .           
        .               /// Returns the source callee.
        .               ///
        .               /// Returns `None` if the supplied span has no expansion trace,
        .               /// else returns the `ExpnData` for the macro definition
        .               /// corresponding to the source callsite.
        .               pub fn source_callee(self) -> Option<ExpnData> {
-- line 703 ----------------------------------------
-- line 707 ----------------------------------------
        .                   }
        .                   let expn_data = self.ctxt().outer_expn_data();
        .                   if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }
        .               }
        .           
        .               /// Checks if a span is "internal" to a macro in which `#[unstable]`
        .               /// items can be used (that is, a macro marked with
        .               /// `#[allow_internal_unstable]`).
    1,055 ( 0.00%)      pub fn allows_unstable(self, feature: Symbol) -> bool {
      211 ( 0.00%)          self.ctxt()
        .                       .outer_expn_data()
        .                       .allow_internal_unstable
        .                       .map_or(false, |features| features.iter().any(|&f| f == feature))
      844 ( 0.00%)      }
        .           
        .               /// Checks if this span arises from a compiler desugaring of kind `kind`.
    6,622 ( 0.00%)      pub fn is_desugaring(self, kind: DesugaringKind) -> bool {
    5,676 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => k == kind,
        .                       _ => false,
        .                   }
    4,730 ( 0.00%)      }
        .           
        .               /// Returns the compiler desugaring that created this span, or `None`
        .               /// if this span is not from a desugaring.
       40 ( 0.00%)      pub fn desugaring_kind(self) -> Option<DesugaringKind> {
       48 ( 0.00%)          match self.ctxt().outer_expn_data().kind {
        .                       ExpnKind::Desugaring(k) => Some(k),
        .                       _ => None,
        .                   }
       32 ( 0.00%)      }
        .           
        .               /// Checks if a span is "internal" to a macro in which `unsafe`
        .               /// can be used without triggering the `unsafe_code` lint.
        .               //  (that is, a macro marked with `#[allow_internal_unsafe]`).
        .               pub fn allows_unsafe(self) -> bool {
        .                   self.ctxt().outer_expn_data().allow_internal_unsafe
        .               }
        .           
-- line 745 ----------------------------------------
-- line 767 ----------------------------------------
        .           
        .               /// Returns a `Span` that would enclose both `self` and `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^^^^
        .               /// ```
  162,107 ( 0.01%)      pub fn to(self, end: Span) -> Span {
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
   29,225 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
      249 ( 0.00%)              if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
      211 ( 0.00%)              } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       cmp::min(span_data.lo, end_data.lo),
        .                       cmp::max(span_data.hi, end_data.hi),
        .                       if span_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
  101,423 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
  132,633 ( 0.00%)      }
        .           
        .               /// Returns a `Span` between the end of `self` to the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///         ^^^^^^^^^^^^^
        .               /// ```
      385 ( 0.00%)      pub fn between(self, end: Span) -> Span {
        .                   let span = self.data();
        .                   let end = end.data();
        .                   Span::new(
        .                       span.hi,
        .                       end.lo,
        .                       if end.ctxt == SyntaxContext::root() { end.ctxt } else { span.ctxt },
      245 ( 0.00%)              if span.parent == end.parent { span.parent } else { None },
        .                   )
      280 ( 0.00%)      }
        .           
        .               /// Returns a `Span` from the beginning of `self` until the beginning of `end`.
        .               ///
        .               /// ```text
        .               ///     ____             ___
        .               ///     self lorem ipsum end
        .               ///     ^^^^^^^^^^^^^^^^^
        .               /// ```
    1,012 ( 0.00%)      pub fn until(self, end: Span) -> Span {
        .                   // Most of this function's body is copied from `to`.
        .                   // We can't just do `self.to(end.shrink_to_lo())`,
        .                   // because to also does some magic where it uses min/max so
        .                   // it can handle overlapping spans. Some advanced mis-use of
        .                   // `until` with different ctxts makes this visible.
        .                   let span_data = self.data();
        .                   let end_data = end.data();
        .                   // FIXME(jseyfried): `self.ctxt` should always equal `end.ctxt` here (cf. issue #23480).
        .                   // Return the macro span on its own to avoid weird diagnostic output. It is preferable to
        .                   // have an incomplete span than a completely nonsensical one.
      184 ( 0.00%)          if span_data.ctxt != end_data.ctxt {
        .                       if span_data.ctxt == SyntaxContext::root() {
        .                           return end;
        .                       } else if end_data.ctxt == SyntaxContext::root() {
        .                           return self;
        .                       }
        .                       // Both spans fall within a macro.
        .                       // FIXME(estebank): check if it is the *same* macro.
        .                   }
        .                   Span::new(
        .                       span_data.lo,
        .                       end_data.lo,
        .                       if end_data.ctxt == SyntaxContext::root() { end_data.ctxt } else { span_data.ctxt },
      644 ( 0.00%)              if span_data.parent == end_data.parent { span_data.parent } else { None },
        .                   )
      828 ( 0.00%)      }
        .           
      407 ( 0.00%)      pub fn from_inner(self, inner: InnerSpan) -> Span {
        .                   let span = self.data();
        .                   Span::new(
        .                       span.lo + BytePos::from_usize(inner.start),
        .                       span.lo + BytePos::from_usize(inner.end),
        .                       span.ctxt,
        .                       span.parent,
        .                   )
      259 ( 0.00%)      }
        .           
        .               /// Equivalent of `Span::def_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_def_site_ctxt(self, expn_id: ExpnId) -> Span {
    1,184 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Opaque)
        .               }
        .           
        .               /// Equivalent of `Span::call_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_call_site_ctxt(self, expn_id: ExpnId) -> Span {
       12 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::Transparent)
        .               }
        .           
        .               /// Equivalent of `Span::mixed_site` from the proc macro API,
        .               /// except that the location is taken from the `self` span.
        .               pub fn with_mixed_site_ctxt(self, expn_id: ExpnId) -> Span {
        6 ( 0.00%)          self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)
        .               }
        .           
        .               /// Produces a span with the same location as `self` and context produced by a macro with the
        .               /// given ID and transparency, assuming that macro was defined directly and not produced by
        .               /// some other macro (which is the case for built-in and procedural macros).
    7,212 ( 0.00%)      pub fn with_ctxt_from_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   self.with_ctxt(SyntaxContext::root().apply_mark(expn_id, transparency))
    4,207 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn apply_mark(self, expn_id: ExpnId, transparency: Transparency) -> Span {
        .                   let span = self.data();
   28,395 ( 0.00%)          span.with_ctxt(span.ctxt.apply_mark(expn_id, transparency))
        .               }
        .           
        .               #[inline]
        .               pub fn remove_mark(&mut self) -> ExpnId {
       10 ( 0.00%)          let mut span = self.data();
       10 ( 0.00%)          let mark = span.ctxt.remove_mark();
       40 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
        .               pub fn adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.adjust(expn_id);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   27,504 ( 0.00%)      pub fn normalize_to_macros_2_0_and_adjust(&mut self, expn_id: ExpnId) -> Option<ExpnId> {
   18,336 ( 0.00%)          let mut span = self.data();
   15,202 ( 0.00%)          let mark = span.ctxt.normalize_to_macros_2_0_and_adjust(expn_id);
   27,504 ( 0.00%)          *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
   30,482 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn glob_adjust(&mut self, expn_id: ExpnId, glob_span: Span) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
-- line 922 ----------------------------------------
-- line 929 ----------------------------------------
        .               ) -> Option<Option<ExpnId>> {
        .                   let mut span = self.data();
        .                   let mark = span.ctxt.reverse_glob_adjust(expn_id, glob_span);
        .                   *self = Span::new(span.lo, span.hi, span.ctxt, span.parent);
        .                   mark
        .               }
        .           
        .               #[inline]
   21,272 ( 0.00%)      pub fn normalize_to_macros_2_0(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macros_2_0())
   18,613 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn normalize_to_macro_rules(self) -> Span {
        .                   let span = self.data();
        .                   span.with_ctxt(span.ctxt.normalize_to_macro_rules())
        .               }
        .           }
        .           
-- line 948 ----------------------------------------
-- line 958 ----------------------------------------
        .           
        .               /// What label should we attach to this span (if any)?
        .               pub label: Option<String>,
        .           }
        .           
        .           impl Default for Span {
        .               fn default() -> Self {
        .                   DUMMY_SP
      142 ( 0.00%)      }
        .           }
        .           
        .           impl<E: Encoder> Encodable<E> for Span {
        .               default fn encode(&self, s: &mut E) -> Result<(), E::Error> {
        .                   let span = self.data();
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("lo", true, |s| span.lo.encode(s))?;
        .                       s.emit_struct_field("hi", false, |s| span.hi.encode(s))
-- line 974 ----------------------------------------
-- line 990 ----------------------------------------
        .           /// any spans that are debug-printed during the closure's execution.
        .           ///
        .           /// Normally, the global `TyCtxt` is used to retrieve the `SourceMap`
        .           /// (see `rustc_interface::callbacks::span_debug1`). However, some parts
        .           /// of the compiler (e.g. `rustc_parse`) may debug-print `Span`s before
        .           /// a `TyCtxt` is available. In this case, we fall back to
        .           /// the `SourceMap` provided to this function. If that is not available,
        .           /// we fall back to printing the raw `Span` field values.
        9 ( 0.00%)  pub fn with_source_map<T, F: FnOnce() -> T>(source_map: Lrc<SourceMap>, f: F) -> T {
        .               with_session_globals(|session_globals| {
        2 ( 0.00%)          *session_globals.source_map.borrow_mut() = Some(source_map);
        .               });
        .               struct ClearSourceMap;
        .               impl Drop for ClearSourceMap {
        .                   fn drop(&mut self) {
        .                       with_session_globals(|session_globals| {
        1 ( 0.00%)                  session_globals.source_map.borrow_mut().take();
        .                       });
        .                   }
        .               }
        .           
        .               let _guard = ClearSourceMap;
        4 ( 0.00%)      f()
        8 ( 0.00%)  }
        .           
        .           pub fn debug_with_source_map(
        .               span: Span,
        .               f: &mut fmt::Formatter<'_>,
        .               source_map: &SourceMap,
        .           ) -> fmt::Result {
        .               write!(f, "{} ({:?})", source_map.span_to_diagnostic_string(span), span.ctxt())
        .           }
-- line 1021 ----------------------------------------
-- line 1048 ----------------------------------------
        .           
        .           impl MultiSpan {
        .               #[inline]
        .               pub fn new() -> MultiSpan {
        .                   MultiSpan { primary_spans: vec![], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_span(primary_span: Span) -> MultiSpan {
      930 ( 0.00%)          MultiSpan { primary_spans: vec![primary_span], span_labels: vec![] }
        .               }
        .           
        .               pub fn from_spans(mut vec: Vec<Span>) -> MultiSpan {
        .                   vec.sort();
       65 ( 0.00%)          MultiSpan { primary_spans: vec, span_labels: vec![] }
        .               }
        .           
        .               pub fn push_span_label(&mut self, span: Span, label: String) {
        .                   self.span_labels.push((span, label));
        .               }
        .           
        .               /// Selects the first primary span (if any).
        .               pub fn primary_span(&self) -> Option<Span> {
        .                   self.primary_spans.first().cloned()
       52 ( 0.00%)      }
        .           
        .               /// Returns all primary spans.
        .               pub fn primary_spans(&self) -> &[Span] {
        .                   &self.primary_spans
        1 ( 0.00%)      }
        .           
        .               /// Returns `true` if any of the primary spans are displayable.
        .               pub fn has_primary_spans(&self) -> bool {
        .                   self.primary_spans.iter().any(|sp| !sp.is_dummy())
        .               }
        .           
        .               /// Returns `true` if this contains only a dummy primary span with any hygienic context.
        .               pub fn is_dummy(&self) -> bool {
-- line 1084 ----------------------------------------
-- line 1139 ----------------------------------------
        .           
        .               /// Returns `true` if any of the span labels is displayable.
        .               pub fn has_span_labels(&self) -> bool {
        .                   self.span_labels.iter().any(|(sp, _)| !sp.is_dummy())
        .               }
        .           }
        .           
        .           impl From<Span> for MultiSpan {
      930 ( 0.00%)      fn from(span: Span) -> MultiSpan {
        .                   MultiSpan::from_span(span)
      930 ( 0.00%)      }
        .           }
        .           
        .           impl From<Vec<Span>> for MultiSpan {
       65 ( 0.00%)      fn from(spans: Vec<Span>) -> MultiSpan {
       52 ( 0.00%)          MultiSpan::from_spans(spans)
       65 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a multi-byte character in a `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct MultiByteChar {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The number of bytes, `>= 2`.
        .               pub bytes: u8,
        .           }
        .           
        .           /// Identifies an offset of a non-narrow character in a `SourceFile`.
   62,216 ( 0.00%)  #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub enum NonNarrowChar {
        .               /// Represents a zero-width character.
        .               ZeroWidth(BytePos),
        .               /// Represents a wide (full-width) character.
        .               Wide(BytePos),
        .               /// Represents a tab character, represented visually with a width of 4 characters.
        .               Tab(BytePos),
        .           }
-- line 1176 ----------------------------------------
-- line 1189 ----------------------------------------
        .               pub fn pos(&self) -> BytePos {
        .                   match *self {
        .                       NonNarrowChar::ZeroWidth(p) | NonNarrowChar::Wide(p) | NonNarrowChar::Tab(p) => p,
        .                   }
        .               }
        .           
        .               /// Returns the width of the character, 0 (zero-width) or 2 (wide).
        .               pub fn width(&self) -> usize {
    1,062 ( 0.00%)          match *self {
        .                       NonNarrowChar::ZeroWidth(_) => 0,
        .                       NonNarrowChar::Wide(_) => 2,
        .                       NonNarrowChar::Tab(_) => 4,
        .                   }
        .               }
        .           }
        .           
        .           impl Add<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
        .               fn add(self, rhs: BytePos) -> Self {
   52,624 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos + rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos + rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos + rhs),
        .                   }
        .               }
        .           }
        .           
        .           impl Sub<BytePos> for NonNarrowChar {
        .               type Output = Self;
        .           
   13,178 ( 0.00%)      fn sub(self, rhs: BytePos) -> Self {
   52,624 ( 0.00%)          match self {
        .                       NonNarrowChar::ZeroWidth(pos) => NonNarrowChar::ZeroWidth(pos - rhs),
        .                       NonNarrowChar::Wide(pos) => NonNarrowChar::Wide(pos - rhs),
        .                       NonNarrowChar::Tab(pos) => NonNarrowChar::Tab(pos - rhs),
        .                   }
   39,534 ( 0.00%)      }
        .           }
        .           
        .           /// Identifies an offset of a character that was normalized away from `SourceFile`.
        .           #[derive(Copy, Clone, Encodable, Decodable, Eq, PartialEq, Debug)]
        .           pub struct NormalizedPos {
        .               /// The absolute offset of the character in the `SourceMap`.
        .               pub pos: BytePos,
        .               /// The difference between original and normalized string at position.
        .               pub diff: u32,
        .           }
        .           
       18 ( 0.00%)  #[derive(PartialEq, Eq, Clone, Debug)]
        .           pub enum ExternalSource {
        .               /// No external source has to be loaded, since the `SourceFile` represents a local crate.
        .               Unneeded,
        .               Foreign {
        .                   kind: ExternalSourceKind,
        .                   /// This SourceFile's byte-offset within the source_map of its original crate.
        .                   original_start_pos: BytePos,
        .                   /// The end of this SourceFile within the source_map of its original crate.
-- line 1246 ----------------------------------------
-- line 1257 ----------------------------------------
        .               AbsentOk,
        .               /// A failed attempt has been made to load the external source.
        .               AbsentErr,
        .               Unneeded,
        .           }
        .           
        .           impl ExternalSource {
        .               pub fn get_source(&self) -> Option<&Lrc<String>> {
      969 ( 0.00%)          match self {
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::Present(ref src), .. } => Some(src),
        .                       _ => None,
        .                   }
        .               }
        .           }
        .           
        .           #[derive(Debug)]
        .           pub struct OffsetOverflowError;
        .           
    3,170 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]
        .           pub enum SourceFileHashAlgorithm {
        .               Md5,
        .               Sha1,
        .               Sha256,
        .           }
        .           
        .           impl FromStr for SourceFileHashAlgorithm {
        .               type Err = ();
-- line 1283 ----------------------------------------
-- line 1290 ----------------------------------------
        .                       _ => Err(()),
        .                   }
        .               }
        .           }
        .           
        .           rustc_data_structures::impl_stable_hash_via_hash!(SourceFileHashAlgorithm);
        .           
        .           /// The hash of the on-disk source file used for debug info.
       36 ( 0.00%)  #[derive(Copy, Clone, PartialEq, Eq, Debug)]
    6,340 ( 0.00%)  #[derive(HashStable_Generic, Encodable, Decodable)]
        .           pub struct SourceFileHash {
        .               pub kind: SourceFileHashAlgorithm,
        .               value: [u8; 32],
        .           }
        .           
        .           impl SourceFileHash {
        .               pub fn new(kind: SourceFileHashAlgorithm, src: &str) -> SourceFileHash {
        .                   let mut hash = SourceFileHash { kind, value: Default::default() };
        .                   let len = hash.hash_len();
        .                   let value = &mut hash.value[..len];
        .                   let data = src.as_bytes();
        .                   match kind {
        .                       SourceFileHashAlgorithm::Md5 => {
       42 ( 0.00%)                  value.copy_from_slice(&Md5::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha1 => {
        .                           value.copy_from_slice(&Sha1::digest(data));
        .                       }
        .                       SourceFileHashAlgorithm::Sha256 => {
        .                           value.copy_from_slice(&Sha256::digest(data));
        .                       }
        .                   }
-- line 1321 ----------------------------------------
-- line 1324 ----------------------------------------
        .           
        .               /// Check if the stored hash matches the hash of the string.
        .               pub fn matches(&self, src: &str) -> bool {
        .                   Self::new(self.kind, src) == *self
        .               }
        .           
        .               /// The bytes of the hash.
        .               pub fn hash_bytes(&self) -> &[u8] {
      124 ( 0.00%)          let len = self.hash_len();
      124 ( 0.00%)          &self.value[..len]
      124 ( 0.00%)      }
        .           
        .               fn hash_len(&self) -> usize {
      290 ( 0.00%)          match self.kind {
        .                       SourceFileHashAlgorithm::Md5 => 16,
        .                       SourceFileHashAlgorithm::Sha1 => 20,
        .                       SourceFileHashAlgorithm::Sha256 => 32,
        .                   }
        .               }
        .           }
        .           
        .           /// A single source in the [`SourceMap`].
      348 ( 0.00%)  #[derive(Clone)]
        .           pub struct SourceFile {
        .               /// The name of the file that the source came from. Source that doesn't
        .               /// originate from files has names between angle brackets by convention
        .               /// (e.g., `<anon>`).
        .               pub name: FileName,
        .               /// The complete source code.
        6 ( 0.00%)      pub src: Option<Lrc<String>>,
        .               /// The source code's hash.
        .               pub src_hash: SourceFileHash,
        .               /// The external source code (used for external crates, which will have a `None`
        .               /// value as `self.src`.
        .               pub external_src: Lock<ExternalSource>,
        .               /// The start position of this source in the `SourceMap`.
        .               pub start_pos: BytePos,
        .               /// The end position of this source in the `SourceMap`.
-- line 1361 ----------------------------------------
-- line 1364 ----------------------------------------
        .               pub lines: Vec<BytePos>,
        .               /// Locations of multi-byte characters in the source code.
        .               pub multibyte_chars: Vec<MultiByteChar>,
        .               /// Width of characters that are not narrow in the source code.
        .               pub non_narrow_chars: Vec<NonNarrowChar>,
        .               /// Locations of characters removed during normalization.
        .               pub normalized_pos: Vec<NormalizedPos>,
        .               /// A hash of the filename, used for speeding up hashing in incremental compilation.
        6 ( 0.00%)      pub name_hash: u128,
        .               /// Indicates which crate this `SourceFile` was imported from.
        6 ( 0.00%)      pub cnum: CrateNum,
        .           }
        .           
        .           impl<S: Encoder> Encodable<S> for SourceFile {
        .               fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_struct(false, |s| {
        .                       s.emit_struct_field("name", true, |s| self.name.encode(s))?;
        .                       s.emit_struct_field("src_hash", false, |s| self.src_hash.encode(s))?;
        .                       s.emit_struct_field("start_pos", false, |s| self.start_pos.encode(s))?;
        .                       s.emit_struct_field("end_pos", false, |s| self.end_pos.encode(s))?;
        .                       s.emit_struct_field("lines", false, |s| {
        .                           let lines = &self.lines[..];
        .                           // Store the length.
        .                           s.emit_u32(lines.len() as u32)?;
        .           
       24 ( 0.00%)                  if !lines.is_empty() {
        .                               // In order to preserve some space, we exploit the fact that
        .                               // the lines list is sorted and individual lines are
        .                               // probably not that long. Because of that we can store lines
        .                               // as a difference list, using as little space as possible
        .                               // for the differences.
        .                               let max_line_length = if lines.len() == 1 {
        .                                   0
        .                               } else {
-- line 1397 ----------------------------------------
-- line 1399 ----------------------------------------
        .                                       .array_windows()
        .                                       .map(|&[fst, snd]| snd - fst)
        .                                       .map(|bp| bp.to_usize())
        .                                       .max()
        .                                       .unwrap()
        .                               };
        .           
        .                               let bytes_per_diff: u8 = match max_line_length {
       12 ( 0.00%)                          0..=0xFF => 1,
        .                                   0x100..=0xFFFF => 2,
        .                                   _ => 4,
        .                               };
        .           
        .                               // Encode the number of bytes used per diff.
        .                               bytes_per_diff.encode(s)?;
        .           
        .                               // Encode the first element.
        .                               lines[0].encode(s)?;
        .           
        .                               let diff_iter = lines.array_windows().map(|&[fst, snd]| snd - fst);
        .           
       12 ( 0.00%)                      match bytes_per_diff {
        .                                   1 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u8).encode(s)?
        .                                       }
        .                                   }
        .                                   2 => {
        .                                       for diff in diff_iter {
        .                                           (diff.0 as u16).encode(s)?
-- line 1428 ----------------------------------------
-- line 1436 ----------------------------------------
        .                                   _ => unreachable!(),
        .                               }
        .                           }
        .           
        .                           Ok(())
        .                       })?;
        .                       s.emit_struct_field("multibyte_chars", false, |s| self.multibyte_chars.encode(s))?;
        .                       s.emit_struct_field("non_narrow_chars", false, |s| self.non_narrow_chars.encode(s))?;
       18 ( 0.00%)              s.emit_struct_field("name_hash", false, |s| self.name_hash.encode(s))?;
        .                       s.emit_struct_field("normalized_pos", false, |s| self.normalized_pos.encode(s))?;
       66 ( 0.00%)              s.emit_struct_field("cnum", false, |s| self.cnum.encode(s))
        .                   })
        .               }
        .           }
        .           
        .           impl<D: Decoder> Decodable<D> for SourceFile {
   14,265 ( 0.00%)      fn decode(d: &mut D) -> SourceFile {
        .                   d.read_struct(|d| {
        .                       let name: FileName = d.read_struct_field("name", |d| Decodable::decode(d));
        .                       let src_hash: SourceFileHash =
        .                           d.read_struct_field("src_hash", |d| Decodable::decode(d));
        .                       let start_pos: BytePos = d.read_struct_field("start_pos", |d| Decodable::decode(d));
        .                       let end_pos: BytePos = d.read_struct_field("end_pos", |d| Decodable::decode(d));
        .                       let lines: Vec<BytePos> = d.read_struct_field("lines", |d| {
        .                           let num_lines: u32 = Decodable::decode(d);
    1,585 ( 0.00%)                  let mut lines = Vec::with_capacity(num_lines as usize);
        .           
        .                           if num_lines > 0 {
        .                               // Read the number of bytes used per diff.
        .                               let bytes_per_diff: u8 = Decodable::decode(d);
        .           
        .                               // Read the first element.
        .                               let mut line_start: BytePos = Decodable::decode(d);
        .                               lines.push(line_start);
        .           
        .                               for _ in 1..num_lines {
1,487,138 ( 0.05%)                          let diff = match bytes_per_diff {
        .                                       1 => d.read_u8() as u32,
        .                                       2 => d.read_u16() as u32,
        .                                       4 => d.read_u32(),
        .                                       _ => unreachable!(),
        .                                   };
        .           
        .                                   line_start = line_start + BytePos(diff);
        .           
-- line 1480 ----------------------------------------
-- line 1483 ----------------------------------------
        .                           }
        .           
        .                           lines
        .                       });
        .                       let multibyte_chars: Vec<MultiByteChar> =
        .                           d.read_struct_field("multibyte_chars", |d| Decodable::decode(d));
        .                       let non_narrow_chars: Vec<NonNarrowChar> =
        .                           d.read_struct_field("non_narrow_chars", |d| Decodable::decode(d));
    3,170 ( 0.00%)              let name_hash: u128 = d.read_struct_field("name_hash", |d| Decodable::decode(d));
        .                       let normalized_pos: Vec<NormalizedPos> =
        .                           d.read_struct_field("normalized_pos", |d| Decodable::decode(d));
        .                       let cnum: CrateNum = d.read_struct_field("cnum", |d| Decodable::decode(d));
   17,435 ( 0.00%)              SourceFile {
   12,680 ( 0.00%)                  name,
        .                           start_pos,
        .                           end_pos,
        .                           src: None,
    6,340 ( 0.00%)                  src_hash,
        .                           // Unused - the metadata decoder will construct
        .                           // a new SourceFile, filling in `external_src` properly
        .                           external_src: Lock::new(ExternalSource::Unneeded),
    6,340 ( 0.00%)                  lines,
    6,340 ( 0.00%)                  multibyte_chars,
    6,340 ( 0.00%)                  non_narrow_chars,
    6,340 ( 0.00%)                  normalized_pos,
        .                           name_hash,
        .                           cnum,
        .                       }
        .                   })
   14,265 ( 0.00%)      }
        .           }
        .           
        .           impl fmt::Debug for SourceFile {
        .               fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   write!(fmt, "SourceFile({:?})", self.name)
        .               }
        .           }
        .           
        .           impl SourceFile {
      154 ( 0.00%)      pub fn new(
        .                   name: FileName,
        .                   mut src: String,
        .                   start_pos: BytePos,
        .                   hash_kind: SourceFileHashAlgorithm,
        .               ) -> Self {
        .                   // Compute the file hash before any normalization.
        .                   let src_hash = SourceFileHash::new(hash_kind, &src);
       42 ( 0.00%)          let normalized_pos = normalize_src(&mut src, start_pos);
        .           
        .                   let name_hash = {
        .                       let mut hasher: StableHasher = StableHasher::new();
       28 ( 0.00%)              name.hash(&mut hasher);
        .                       hasher.finish::<u128>()
        .                   };
       28 ( 0.00%)          let end_pos = start_pos.to_usize() + src.len();
       42 ( 0.00%)          assert!(end_pos <= u32::MAX as usize);
        .           
      168 ( 0.00%)          let (lines, multibyte_chars, non_narrow_chars) =
       28 ( 0.00%)              analyze_source_file::analyze_source_file(&src, start_pos);
        .           
      238 ( 0.00%)          SourceFile {
        .                       name,
        .                       src: Some(Lrc::new(src)),
      154 ( 0.00%)              src_hash,
        .                       external_src: Lock::new(ExternalSource::Unneeded),
        .                       start_pos,
        .                       end_pos: Pos::from_usize(end_pos),
       56 ( 0.00%)              lines,
       56 ( 0.00%)              multibyte_chars,
       56 ( 0.00%)              non_narrow_chars,
       56 ( 0.00%)              normalized_pos,
        .                       name_hash,
        .                       cnum: LOCAL_CRATE,
        .                   }
      126 ( 0.00%)      }
        .           
        .               /// Returns the `BytePos` of the beginning of the current line.
   27,286 ( 0.00%)      pub fn line_begin_pos(&self, pos: BytePos) -> BytePos {
        .                   let line_index = self.lookup_line(pos).unwrap();
   13,643 ( 0.00%)          self.lines[line_index]
   27,286 ( 0.00%)      }
        .           
        .               /// Add externally loaded source.
        .               /// If the hash of the input doesn't match or no input is supplied via None,
        .               /// it is interpreted as an error and the corresponding enum variant is set.
        .               /// The return value signifies whether some kind of source is present.
      714 ( 0.00%)      pub fn add_external_src<F>(&self, get_src: F) -> bool
        .               where
        .                   F: FnOnce() -> Option<String>,
        .               {
      102 ( 0.00%)          if matches!(
      204 ( 0.00%)              *self.external_src.borrow(),
        .                       ExternalSource::Foreign { kind: ExternalSourceKind::AbsentOk, .. }
        .                   ) {
        .                       let src = get_src();
        .                       let mut external_src = self.external_src.borrow_mut();
        .                       // Check that no-one else have provided the source while we were getting it
        .                       if let ExternalSource::Foreign {
        .                           kind: src_kind @ ExternalSourceKind::AbsentOk, ..
        .                       } = &mut *external_src
-- line 1582 ----------------------------------------
-- line 1592 ----------------------------------------
        .                               *src_kind = ExternalSourceKind::AbsentErr;
        .                           }
        .           
        .                           false
        .                       } else {
        .                           self.src.is_some() || external_src.get_source().is_some()
        .                       }
        .                   } else {
      102 ( 0.00%)              self.src.is_some() || self.external_src.borrow().get_source().is_some()
        .                   }
      918 ( 0.00%)      }
        .           
        .               /// Gets a line from the list of pre-computed line-beginnings.
        .               /// The line number here is 0-based.
        .               pub fn get_line(&self, line_number: usize) -> Option<Cow<'_, str>> {
        .                   fn get_until_newline(src: &str, begin: usize) -> &str {
        .                       // We can't use `lines.get(line_number+1)` because we might
        .                       // be parsing when we call this function and thus the current
        .                       // line is the last one we have line info for.
-- line 1610 ----------------------------------------
-- line 1627 ----------------------------------------
        .                       Some(Cow::Owned(String::from(get_until_newline(src, begin))))
        .                   } else {
        .                       None
        .                   }
        .               }
        .           
        .               pub fn is_real_file(&self) -> bool {
        .                   self.name.is_real()
    3,866 ( 0.00%)      }
        .           
        .               pub fn is_imported(&self) -> bool {
        .                   self.src.is_none()
   18,344 ( 0.00%)      }
        .           
        .               pub fn count_lines(&self) -> usize {
        .                   self.lines.len()
        .               }
        .           
        .               /// Finds the line containing the given position. The return value is the
        .               /// index into the `lines` array of this `SourceFile`, not the 1-based line
        .               /// number. If the source_file is empty or the position is located before the
        .               /// first line, `None` is returned.
        .               pub fn lookup_line(&self, pos: BytePos) -> Option<usize> {
   31,867 ( 0.00%)          match self.lines.binary_search(&pos) {
        .                       Ok(idx) => Some(idx),
        .                       Err(0) => None,
        .                       Err(idx) => Some(idx - 1),
        .                   }
        .               }
        .           
        .               pub fn line_bounds(&self, line_index: usize) -> Range<BytePos> {
   12,929 ( 0.00%)          if self.is_empty() {
        .                       return self.start_pos..self.end_pos;
        .                   }
        .           
    8,408 ( 0.00%)          assert!(line_index < self.lines.len());
   12,093 ( 0.00%)          if line_index == (self.lines.len() - 1) {
      136 ( 0.00%)              self.lines[line_index]..self.end_pos
        .                   } else {
    7,968 ( 0.00%)              self.lines[line_index]..self.lines[line_index + 1]
        .                   }
        .               }
        .           
        .               /// Returns whether or not the file contains the given `SourceMap` byte
        .               /// position. The position one past the end of the file is considered to be
        .               /// contained by the file. This implies that files for which `is_empty`
        .               /// returns true still contain one byte position according to this function.
        .               #[inline]
-- line 1674 ----------------------------------------
-- line 1692 ----------------------------------------
        .                       Err(i) if i == 0 => 0,
        .                       Err(i) => self.normalized_pos[i - 1].diff,
        .                   };
        .           
        .                   BytePos::from_u32(pos.0 - self.start_pos.0 + diff)
        .               }
        .           
        .               /// Converts an absolute `BytePos` to a `CharPos` relative to the `SourceFile`.
      778 ( 0.00%)      pub fn bytepos_to_file_charpos(&self, bpos: BytePos) -> CharPos {
        .                   // The number of extra bytes due to multibyte chars in the `SourceFile`.
        .                   let mut total_extra_bytes = 0;
        .           
    2,334 ( 0.00%)          for mbc in self.multibyte_chars.iter() {
        .                       debug!("{}-byte char at {:?}", mbc.bytes, mbc.pos);
    1,144 ( 0.00%)              if mbc.pos < bpos {
        .                           // Every character is at least one byte, so we only
        .                           // count the actual extra bytes.
    3,372 ( 0.00%)                  total_extra_bytes += mbc.bytes as u32 - 1;
        .                           // We should never see a byte position in the middle of a
        .                           // character.
    2,810 ( 0.00%)                  assert!(bpos.to_u32() >= mbc.pos.to_u32() + mbc.bytes as u32);
        .                       } else {
        .                           break;
        .                       }
        .                   }
        .           
    4,668 ( 0.00%)          assert!(self.start_pos.to_u32() + total_extra_bytes <= bpos.to_u32());
    3,890 ( 0.00%)          CharPos(bpos.to_usize() - self.start_pos.to_usize() - total_extra_bytes as usize)
    1,556 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number and (0-based `CharPos`) column offset, for a
        .               /// given `BytePos`.
    2,723 ( 0.00%)      pub fn lookup_file_pos(&self, pos: BytePos) -> (usize, CharPos) {
      778 ( 0.00%)          let chpos = self.bytepos_to_file_charpos(pos);
      350 ( 0.00%)          match self.lookup_line(pos) {
        .                       Some(a) => {
        .                           let line = a + 1; // Line numbers start at 1
      389 ( 0.00%)                  let linebpos = self.lines[a];
      778 ( 0.00%)                  let linechpos = self.bytepos_to_file_charpos(linebpos);
        .                           let col = chpos - linechpos;
        .                           debug!("byte pos {:?} is on the line at byte pos {:?}", pos, linebpos);
        .                           debug!("char pos {:?} is on the line at char pos {:?}", chpos, linechpos);
        .                           debug!("byte is on line: {}", line);
      389 ( 0.00%)                  assert!(chpos >= linechpos);
        .                           (line, col)
        .                       }
        .                       None => (0, chpos),
        .                   }
    3,112 ( 0.00%)      }
        .           
        .               /// Looks up the file's (1-based) line number, (0-based `CharPos`) column offset, and (0-based)
        .               /// column offset when displayed, for a given `BytePos`.
    3,112 ( 0.00%)      pub fn lookup_file_pos_with_col_display(&self, pos: BytePos) -> (usize, CharPos, usize) {
    1,167 ( 0.00%)          let (line, col_or_chpos) = self.lookup_file_pos(pos);
      778 ( 0.00%)          if line > 0 {
        .                       let col = col_or_chpos;
      389 ( 0.00%)              let linebpos = self.lines[line - 1];
        .                       let col_display = {
        .                           let start_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&linebpos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
      489 ( 0.00%)                  let special_chars = end_width_idx - start_width_idx;
        .                           let non_narrow: usize = self.non_narrow_chars[start_width_idx..end_width_idx]
        .                               .iter()
        .                               .map(|x| x.width())
        .                               .sum();
    1,945 ( 0.00%)                  col.0 - special_chars + non_narrow
        .                       };
        .                       (line, col, col_display)
        .                   } else {
        .                       let chpos = col_or_chpos;
        .                       let col_display = {
        .                           let end_width_idx = self
        .                               .non_narrow_chars
        .                               .binary_search_by_key(&pos, |x| x.pos())
        .                               .unwrap_or_else(|x| x);
        .                           let non_narrow: usize =
        .                               self.non_narrow_chars[0..end_width_idx].iter().map(|x| x.width()).sum();
        .                           chpos.0 - end_width_idx + non_narrow
        .                       };
        .                       (0, chpos, col_display)
        .                   }
    2,723 ( 0.00%)      }
        .           }
        .           
        .           /// Normalizes the source code and records the normalizations.
      140 ( 0.00%)  fn normalize_src(src: &mut String, start_pos: BytePos) -> Vec<NormalizedPos> {
        .               let mut normalized_pos = vec![];
        .               remove_bom(src, &mut normalized_pos);
        .               normalize_newlines(src, &mut normalized_pos);
        .           
        .               // Offset all the positions by start_pos to match the final file positions.
        .               for np in &mut normalized_pos {
        .                   np.pos.0 += start_pos.0;
        .               }
        .           
        .               normalized_pos
      126 ( 0.00%)  }
        .           
        .           /// Removes UTF-8 BOM, if any.
        .           fn remove_bom(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if src.starts_with('\u{feff}') {
        .                   src.drain(..3);
        .                   normalized_pos.push(NormalizedPos { pos: BytePos(0), diff: 3 });
        .               }
        .           }
        .           
        .           /// Replaces `\r\n` with `\n` in-place in `src`.
        .           ///
        .           /// Returns error if there's a lone `\r` in the string.
        .           fn normalize_newlines(src: &mut String, normalized_pos: &mut Vec<NormalizedPos>) {
       14 ( 0.00%)      if !src.as_bytes().contains(&b'\r') {
        .                   return;
        .               }
        .           
        .               // We replace `\r\n` with `\n` in-place, which doesn't break utf-8 encoding.
        .               // While we *can* call `as_mut_vec` and do surgery on the live string
        .               // directly, let's rather steal the contents of `src`. This makes the code
        .               // safe even if a panic occurs.
        .           
-- line 1816 ----------------------------------------
-- line 1877 ----------------------------------------
        .               (
        .                   $(
        .                       $(#[$attr:meta])*
        .                       $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);
        .                   )*
        .               ) => {
        .                   $(
        .                       $(#[$attr])*
   27,559 ( 0.00%)              $vis struct $ident($inner_vis $inner_ty);
        .           
        .                       impl Pos for $ident {
        .                           #[inline(always)]
        .                           fn from_usize(n: usize) -> $ident {
      239 ( 0.00%)                      $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn to_usize(&self) -> usize {
   35,246 ( 0.00%)                      self.0 as usize
        .                           }
        .           
        .                           #[inline(always)]
        .                           fn from_u32(n: u32) -> $ident {
        .                               $ident(n as $inner_ty)
        .                           }
        .           
        .                           #[inline(always)]
-- line 1903 ----------------------------------------
-- line 1906 ----------------------------------------
        .                           }
        .                       }
        .           
        .                       impl Add for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn add(self, rhs: $ident) -> $ident {
3,138,228 ( 0.11%)                      $ident(self.0 + rhs.0)
        .                           }
        .                       }
        .           
        .                       impl Sub for $ident {
        .                           type Output = $ident;
        .           
        .                           #[inline(always)]
        .                           fn sub(self, rhs: $ident) -> $ident {
1,928,886 ( 0.06%)                      $ident(self.0 - rhs.0)
        .                           }
        .                       }
        .                   )*
        .               };
        .           }
        .           
        .           impl_pos! {
        .               /// A byte offset.
-- line 1931 ----------------------------------------
-- line 1939 ----------------------------------------
        .               /// Because of multibyte UTF-8 characters, a byte offset
        .               /// is not equivalent to a character offset. The [`SourceMap`] will convert [`BytePos`]
        .               /// values to `CharPos` values as necessary.
        .               #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]
        .               pub struct CharPos(pub usize);
        .           }
        .           
        .           impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {
   16,300 ( 0.00%)      fn encode(&self, s: &mut S) -> Result<(), S::Error> {
        .                   s.emit_u32(self.0)
   19,560 ( 0.00%)      }
        .           }
        .           
        .           impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {
        .               fn decode(d: &mut D) -> BytePos {
  389,206 ( 0.01%)          BytePos(d.read_u32())
        .               }
        .           }
        .           
        .           // _____________________________________________________________________________
        .           // Loc, SourceFileAndLine, SourceFileAndBytePos
        .           //
        .           
        .           /// A source code location used for error reporting.
-- line 1962 ----------------------------------------
-- line 2037 ----------------------------------------
        .               pub source_len: usize,
        .               pub begin_pos: BytePos,
        .               pub end_pos: BytePos,
        .           }
        .           
        .           /// Range inside of a `Span` used for diagnostics when we only have access to relative positions.
        .           #[derive(Copy, Clone, PartialEq, Eq, Debug)]
        .           pub struct InnerSpan {
        5 ( 0.00%)      pub start: usize,
        .               pub end: usize,
        .           }
        .           
        .           impl InnerSpan {
      236 ( 0.00%)      pub fn new(start: usize, end: usize) -> InnerSpan {
        .                   InnerSpan { start, end }
      118 ( 0.00%)      }
        .           }
        .           
        .           /// Requirements for a `StableHashingContext` to be used in this crate.
        .           ///
        .           /// This is a hack to allow using the [`HashStable_Generic`] derive macro
        .           /// instead of implementing everything in rustc_middle.
        .           pub trait HashStableContext {
        .               fn def_path_hash(&self, def_id: DefId) -> DefPathHash;
-- line 2060 ----------------------------------------
-- line 2079 ----------------------------------------
        .               /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)
        .               /// triple, which stays the same even if the containing `SourceFile` has moved
        .               /// within the `SourceMap`.
        .               ///
        .               /// Also note that we are hashing byte offsets for the column, not unicode
        .               /// codepoint offsets. For the purpose of the hash that's sufficient.
        .               /// Also, hashing filenames is expensive so we avoid doing it twice when the
        .               /// span starts and ends in the same file, which is almost always the case.
  155,729 ( 0.01%)      fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {
        .                   const TAG_VALID_SPAN: u8 = 0;
        .                   const TAG_INVALID_SPAN: u8 = 1;
        .                   const TAG_RELATIVE_SPAN: u8 = 2;
        .           
   28,125 ( 0.00%)          if !ctx.hash_spans() {
        .                       return;
        .                   }
        .           
  127,604 ( 0.00%)          let span = self.data_untracked();
   49,107 ( 0.00%)          span.ctxt.hash_stable(ctx, hasher);
   66,741 ( 0.00%)          span.parent.hash_stable(ctx, hasher);
        .           
   44,905 ( 0.00%)          if span.is_dummy() {
        .                       Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                       return;
        .                   }
        .           
   43,672 ( 0.00%)          if let Some(parent) = span.parent {
        .                       let def_span = ctx.def_span(parent).data_untracked();
        .                       if def_span.contains(span) {
        .                           // This span is enclosed in a definition: only hash the relative position.
        .                           Hash::hash(&TAG_RELATIVE_SPAN, hasher);
        .                           (span.lo - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           (span.hi - def_span.lo).to_u32().hash_stable(ctx, hasher);
        .                           return;
        .                       }
        .                   }
        .           
        .                   // If this is not an empty or invalid span, we want to hash the last
        .                   // position that belongs to it, as opposed to hashing the first
        .                   // position past it.
   87,344 ( 0.00%)          let (file, line_lo, col_lo, line_hi, col_hi) = match ctx.span_data_to_lines_and_cols(&span)
        .                   {
   43,672 ( 0.00%)              Some(pos) => pos,
        .                       None => {
        .                           Hash::hash(&TAG_INVALID_SPAN, hasher);
        .                           return;
        .                       }
        .                   };
        .           
        .                   Hash::hash(&TAG_VALID_SPAN, hasher);
        .                   // We truncate the stable ID hash and line and column numbers. The chances
-- line 2129 ----------------------------------------
-- line 2134 ----------------------------------------
        .                   // hash only the length, for example, then two otherwise equal spans with
        .                   // different end locations will have the same hash. This can cause a problem
        .                   // during incremental compilation wherein a previous result for a query that
        .                   // depends on the end location of a span will be incorrectly reused when the
        .                   // end location of the span it depends on has changed (see issue #74890). A
        .                   // similar analysis applies if some query depends specifically on the length
        .                   // of the span, but we only hash the end location. So hash both.
        .           
   21,836 ( 0.00%)          let col_lo_trunc = (col_lo.0 as u64) & 0xFF;
        .                   let line_lo_trunc = ((line_lo as u64) & 0xFF_FF_FF) << 8;
        .                   let col_hi_trunc = (col_hi.0 as u64) & 0xFF << 32;
        .                   let line_hi_trunc = ((line_hi as u64) & 0xFF_FF_FF) << 40;
        .                   let col_line = col_lo_trunc | line_lo_trunc | col_hi_trunc | line_hi_trunc;
   21,836 ( 0.00%)          let len = (span.hi - span.lo).0;
        .                   Hash::hash(&col_line, hasher);
        .                   Hash::hash(&len, hasher);
  177,976 ( 0.01%)      }
        .           }

2,750,607 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_span/src/lib.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs
--------------------------------------------------------------------------------
Ir               

-- line 10 ----------------------------------------
      .           pub fn move_path_children_matching<'tcx, F>(
      .               move_data: &MoveData<'tcx>,
      .               path: MovePathIndex,
      .               mut cond: F,
      .           ) -> Option<MovePathIndex>
      .           where
      .               F: FnMut(mir::PlaceElem<'tcx>) -> bool,
      .           {
    886 ( 0.00%)      let mut next_child = move_data.move_paths[path].first_child;
  2,614 ( 0.00%)      while let Some(child_index) = next_child {
      .                   let move_path_children = &move_data.move_paths[child_index];
  2,230 ( 0.00%)          if let Some(&elem) = move_path_children.place.projection.last() {
  3,767 ( 0.00%)              if cond(elem) {
      .                           return Some(child_index);
      .                       }
      .                   }
      .                   next_child = move_path_children.next_sibling;
      .               }
      .           
      .               None
      .           }
-- line 30 ----------------------------------------
-- line 48 ----------------------------------------
      .           //
      .           // FIXME: we have to do something for moving slice patterns.
      .           fn place_contents_drop_state_cannot_differ<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               place: mir::Place<'tcx>,
      .           ) -> bool {
      .               let ty = place.ty(body, tcx).ty;
488,830 ( 0.02%)      match ty.kind() {
      .                   ty::Array(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false",
      .                           place, ty
      .                       );
      .                       false
      .                   }
      .                   ty::Slice(..) | ty::Ref(..) | ty::RawPtr(..) => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
457,695 ( 0.02%)          ty::Adt(def, _) if (def.has_dtor(tcx) && !def.is_box()) || def.is_union() => {
      .                       debug!(
      .                           "place_contents_drop_state_cannot_differ place: {:?} ty: {:?} Drop => true",
      .                           place, ty
      .                       );
      .                       true
      .                   }
      .                   _ => false,
      .               }
-- line 79 ----------------------------------------
-- line 83 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               lookup_result: LookupResult,
      .               each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 14,256 ( 0.00%)      match lookup_result {
      .                   LookupResult::Parent(..) => {
      .                       // access to untracked value - do not touch children
      .                   }
      .                   LookupResult::Exact(e) => on_all_children_bits(tcx, body, move_data, e, each_child),
      .               }
      .           }
      .           
      .           pub fn on_all_children_bits<'tcx, F>(
-- line 99 ----------------------------------------
-- line 100 ----------------------------------------
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               move_path_index: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
710,728 ( 0.02%)      fn is_terminal_path<'tcx>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   path: MovePathIndex,
      .               ) -> bool {
177,682 ( 0.01%)          place_contents_drop_state_cannot_differ(tcx, body, move_data.move_paths[path].place)
710,728 ( 0.02%)      }
      .           
873,179 ( 0.03%)      fn on_all_children_bits<'tcx, F>(
      .                   tcx: TyCtxt<'tcx>,
      .                   body: &Body<'tcx>,
      .                   move_data: &MoveData<'tcx>,
      .                   move_path_index: MovePathIndex,
      .                   each_child: &mut F,
      .               ) where
      .                   F: FnMut(MovePathIndex),
      .               {
 18,168 ( 0.00%)          each_child(move_path_index);
      .           
623,838 ( 0.02%)          if is_terminal_path(tcx, body, move_data, move_path_index) {
      .                       return;
      .                   }
      .           
 63,862 ( 0.00%)          let mut next_child_index = move_data.move_paths[move_path_index].first_child;
175,949 ( 0.01%)          while let Some(child_index) = next_child_index {
 74,322 ( 0.00%)              on_all_children_bits(tcx, body, move_data, child_index, each_child);
 12,387 ( 0.00%)              next_child_index = move_data.move_paths[child_index].next_sibling;
      .                   }
693,046 ( 0.02%)      }
443,286 ( 0.01%)      on_all_children_bits(tcx, body, move_data, move_path_index, &mut each_child);
      .           }
      .           
      .           pub fn on_all_drop_children_bits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               path: MovePathIndex,
      .               mut each_child: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 34,141 ( 0.00%)      on_all_children_bits(tcx, body, &ctxt.move_data, path, |child| {
 22,896 ( 0.00%)          let place = &ctxt.move_data.move_paths[path].place;
  5,724 ( 0.00%)          let ty = place.ty(body, tcx).ty;
      .                   debug!("on_all_drop_children_bits({:?}, {:?} : {:?})", path, place, ty);
      .           
  4,353 ( 0.00%)          let erased_ty = tcx.erase_regions(ty);
 35,149 ( 0.00%)          if erased_ty.needs_drop(tcx, ctxt.param_env) {
  5,724 ( 0.00%)              each_child(child);
      .                   } else {
      .                       debug!("on_all_drop_children_bits - skipping")
      .                   }
      .               })
      .           }
      .           
 12,407 ( 0.00%)  pub fn drop_flag_effects_for_function_entry<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
  1,108 ( 0.00%)      for arg in body.args_iter() {
  2,532 ( 0.00%)          let place = mir::Place::from(arg);
  3,798 ( 0.00%)          let lookup_result = move_data.rev_lookup.find(place.as_ref());
      .                   on_lookup_result_bits(tcx, body, move_data, lookup_result, |mpi| {
  1,470 ( 0.00%)              callback(mpi, DropFlagState::Present)
      .                   });
      .               }
  8,864 ( 0.00%)  }
      .           
804,081 ( 0.03%)  pub fn drop_flag_effects_for_location<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               ctxt: &MoveDataParamEnv<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex, DropFlagState),
      .           {
      .               let move_data = &ctxt.move_data;
      .               debug!("drop_flag_effects_for_location({:?})", loc);
      .           
      .               // first, move out of the RHS
 31,876 ( 0.00%)      for mi in &move_data.loc_map[loc] {
182,949 ( 0.01%)          let path = mi.move_path_index(move_data);
      .                   debug!("moving out of path {:?}", move_data.move_paths[path]);
      .           
 54,680 ( 0.00%)          on_all_children_bits(tcx, body, move_data, path, |mpi| callback(mpi, DropFlagState::Absent))
      .               }
      .           
      .               debug!("drop_flag_effects: assignment for location({:?})", loc);
      .           
 18,170 ( 0.00%)      for_location_inits(tcx, body, move_data, loc, |mpi| callback(mpi, DropFlagState::Present));
629,736 ( 0.02%)  }
      .           
      .           pub fn for_location_inits<'tcx, F>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               loc: Location,
      .               mut callback: F,
      .           ) where
      .               F: FnMut(MovePathIndex),
      .           {
 31,876 ( 0.00%)      for ii in &move_data.init_loc_map[loc] {
 90,156 ( 0.00%)          let init = move_data.inits[*ii];
 54,666 ( 0.00%)          match init.kind {
      .                       InitKind::Deep => {
      .                           let path = init.path;
      .           
      .                           on_all_children_bits(tcx, body, move_data, path, &mut callback)
      .                       }
      .                       InitKind::Shallow => {
      .                           let mpi = init.path;
      .                           callback(mpi);
-- line 226 ----------------------------------------
-- line 230 ----------------------------------------
      .               }
      .           }
      .           
      .           /// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a
      .           /// `Downcast` to a variant besides the `active_variant`.
      .           ///
      .           /// NOTE: If there are no move paths corresponding to an inactive variant,
      .           /// `handle_inactive_variant` will not be called for that variant.
 13,272 ( 0.00%)  pub(crate) fn on_all_inactive_variants<'tcx>(
      .               tcx: TyCtxt<'tcx>,
      .               body: &mir::Body<'tcx>,
      .               move_data: &MoveData<'tcx>,
      .               enum_place: mir::Place<'tcx>,
      .               active_variant: VariantIdx,
      .               mut handle_inactive_variant: impl FnMut(MovePathIndex),
      .           ) {
  5,530 ( 0.00%)      let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {
      .                   LookupResult::Exact(mpi) => mpi,
      .                   LookupResult::Parent(_) => return,
      .               };
      .           
      .               let enum_path = &move_data.move_paths[enum_mpi];
  5,846 ( 0.00%)      for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {
      .                   // Because of the way we build the `MoveData` tree, each child should have exactly one more
      .                   // projection than `enum_place`. This additional projection must be a downcast since the
      .                   // base is an enum.
  1,109 ( 0.00%)          let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();
  4,436 ( 0.00%)          assert_eq!(enum_place.projection.len(), base_proj.len());
      .           
  3,327 ( 0.00%)          let variant_idx = match *downcast {
      .                       mir::ProjectionElem::Downcast(_, idx) => idx,
      .                       _ => unreachable!(),
      .                   };
      .           
  1,109 ( 0.00%)          if variant_idx != active_variant {
      .                       on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {
  1,378 ( 0.00%)                  handle_inactive_variant(mpi)
      .                       });
      .                   }
      .               }
  8,848 ( 0.00%)  }

682,615 ( 0.02%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_mir_dataflow/src/drop_flag_effects.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs
--------------------------------------------------------------------------------
Ir                  

-- line 111 ----------------------------------------
         .           const EMPTY: u8 = 0b1111_1111;
         .           
         .           /// Control byte value for a deleted bucket.
         .           const DELETED: u8 = 0b1000_0000;
         .           
         .           /// Checks whether a control byte represents a full bucket (top bit is clear).
         .           #[inline]
         .           fn is_full(ctrl: u8) -> bool {
 2,193,690 ( 0.07%)      ctrl & 0x80 == 0
         .           }
         .           
         .           /// Checks whether a control byte represents a special value (top bit is set).
         .           #[inline]
         .           fn is_special(ctrl: u8) -> bool {
         .               ctrl & 0x80 != 0
         .           }
         .           
         .           /// Checks whether a special control value is EMPTY (just check 1 bit).
         .           #[inline]
         .           fn special_is_empty(ctrl: u8) -> bool {
         .               debug_assert!(is_special(ctrl));
   180,835 ( 0.01%)      ctrl & 0x01 != 0
         .           }
         .           
         .           /// Primary hash function, used to select the initial bucket to probe from.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h1(hash: u64) -> usize {
         .               // On 32-bit platforms we simply ignore the higher hash bits.
         .               hash as usize
-- line 140 ----------------------------------------
-- line 143 ----------------------------------------
         .           /// Secondary hash function, saved in the low 7 bits of the control byte.
         .           #[inline]
         .           #[allow(clippy::cast_possible_truncation)]
         .           fn h2(hash: u64) -> u8 {
         .               // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit
         .               // value, some hash functions (such as FxHash) produce a usize result
         .               // instead, which means that the top 32 bits are 0 on 32-bit platforms.
         .               let hash_len = usize::min(mem::size_of::<usize>(), mem::size_of::<u64>());
34,423,190 ( 1.15%)      let top7 = hash >> (hash_len * 8 - 7);
         .               (top7 & 0x7f) as u8 // truncation
         .           }
         .           
         .           /// Probe sequence based on triangular numbers, which is guaranteed (since our
         .           /// table size is a power of two) to visit every group of elements exactly once.
         .           ///
         .           /// A triangular probe has us jump by 1 more group every time. So first we
         .           /// jump by 1 group (meaning we just continue our linear scan), then 2 groups
-- line 159 ----------------------------------------
-- line 170 ----------------------------------------
         .               #[inline]
         .               fn move_next(&mut self, bucket_mask: usize) {
         .                   // We should have found an empty bucket by now and ended the probe.
         .                   debug_assert!(
         .                       self.stride <= bucket_mask,
         .                       "Went past end of probe sequence"
         .                   );
         .           
   338,526 ( 0.01%)          self.stride += Group::WIDTH;
   338,526 ( 0.01%)          self.pos += self.stride;
   283,391 ( 0.01%)          self.pos &= bucket_mask;
         .               }
         .           }
         .           
         .           /// Returns the number of buckets needed to hold the given number of items,
         .           /// taking the maximum load factor into account.
         .           ///
         .           /// Returns `None` if an overflow occurs.
         .           // Workaround for emscripten bug emscripten-core/emscripten-fastcomp#258
         .           #[cfg_attr(target_os = "emscripten", inline(never))]
         .           #[cfg_attr(not(target_os = "emscripten"), inline)]
         .           fn capacity_to_buckets(cap: usize) -> Option<usize> {
         .               debug_assert_ne!(cap, 0);
         .           
         .               // For small tables we require at least 1 empty bucket so that lookups are
         .               // guaranteed to terminate if an element doesn't exist in the table.
   104,892 ( 0.00%)      if cap < 8 {
         .                   // We don't bother with a table size of 2 buckets since that can only
         .                   // hold a single element. Instead we skip directly to a 4 bucket table
         .                   // which can hold 3 elements.
   194,185 ( 0.01%)          return Some(if cap < 4 { 4 } else { 8 });
         .               }
         .           
         .               // Otherwise require 1/8 buckets to be empty (87.5% load)
         .               //
         .               // Be careful when modifying this, calculate_layout relies on the
         .               // overflow check here.
    81,654 ( 0.00%)      let adjusted_cap = cap.checked_mul(8)? / 7;
         .           
         .               // Any overflows will have been caught by the checked_mul. Also, any
         .               // rounding errors from the division above will be cleaned up by
         .               // next_power_of_two (which can't overflow because of the previous division).
         .               Some(adjusted_cap.next_power_of_two())
         .           }
         .           
         .           /// Returns the maximum effective capacity for the given bucket mask, taking
         .           /// the maximum load factor into account.
         .           #[inline]
         .           fn bucket_mask_to_capacity(bucket_mask: usize) -> usize {
   310,465 ( 0.01%)      if bucket_mask < 8 {
         .                   // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
         .                   // Keep in mind that the bucket mask is one less than the bucket count.
         .                   bucket_mask
         .               } else {
         .                   // For larger tables we reserve 12.5% of the slots as empty.
    93,460 ( 0.00%)          ((bucket_mask + 1) / 8) * 7
         .               }
         .           }
         .           
         .           /// Helper which allows the max calculation for ctrl_align to be statically computed for each T
         .           /// while keeping the rest of `calculate_layout_for` independent of `T`
         .           #[derive(Copy, Clone)]
         .           struct TableLayout {
         .               size: usize,
-- line 233 ----------------------------------------
-- line 246 ----------------------------------------
         .           
         .               #[inline]
         .               fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   let TableLayout { size, ctrl_align } = self;
         .                   // Manual layout calculation since Layout methods are not yet stable.
         .                   let ctrl_offset =
   171,947 ( 0.01%)              size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);
   266,725 ( 0.01%)          let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;
         .           
         .                   Some((
         .                       unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },
         .                       ctrl_offset,
         .                   ))
         .               }
         .           }
         .           
-- line 263 ----------------------------------------
-- line 292 ----------------------------------------
         .               #[inline]
         .               fn clone(&self) -> Self {
         .                   Self { ptr: self.ptr }
         .               }
         .           }
         .           
         .           impl<T> Bucket<T> {
         .               #[inline]
        25 ( 0.00%)      unsafe fn from_base_index(base: NonNull<T>, index: usize) -> Self {
        20 ( 0.00%)          let ptr = if mem::size_of::<T>() == 0 {
         .                       // won't overflow because index must be less than length
         .                       (index + 1) as *mut T
         .                   } else {
        20 ( 0.00%)              base.as_ptr().sub(index)
         .                   };
         5 ( 0.00%)          Self {
        20 ( 0.00%)              ptr: NonNull::new_unchecked(ptr),
         .                   }
        15 ( 0.00%)      }
         .               #[inline]
         .               unsafe fn to_base_index(&self, base: NonNull<T>) -> usize {
         .                   if mem::size_of::<T>() == 0 {
         .                       self.ptr.as_ptr() as usize - 1
         .                   } else {
         .                       offset_from(base.as_ptr(), self.ptr.as_ptr())
         .                   }
         .               }
-- line 318 ----------------------------------------
-- line 337 ----------------------------------------
         .                   }
         .               }
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub unsafe fn drop(&self) {
         .                   self.as_ptr().drop_in_place();
         .               }
         .               #[inline]
         .               pub unsafe fn read(&self) -> T {
       376 ( 0.00%)          self.as_ptr().read()
         .               }
         .               #[inline]
         .               pub unsafe fn write(&self, val: T) {
         .                   self.as_ptr().write(val);
         .               }
         .               #[inline]
         .               pub unsafe fn as_ref<'a>(&self) -> &'a T {
         .                   &*self.as_ptr()
-- line 353 ----------------------------------------
-- line 392 ----------------------------------------
         .           
         .           impl<T> RawTable<T, Global> {
         .               /// Creates a new empty hash table without allocating any memory.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
        30 ( 0.00%)      pub const fn new() -> Self {
        80 ( 0.00%)          Self {
        20 ( 0.00%)              table: RawTableInner::new_in(Global),
         .                       marker: PhantomData,
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               #[cfg(feature = "raw")]
         .               pub fn try_with_capacity(capacity: usize) -> Result<Self, TryReserveError> {
         .                   Self::try_with_capacity_in(capacity, Global)
         .               }
         .           
-- line 413 ----------------------------------------
-- line 421 ----------------------------------------
         .           impl<T, A: Allocator + Clone> RawTable<T, A> {
         .               /// Creates a new empty hash table without allocating any memory, using the
         .               /// given allocator.
         .               ///
         .               /// In effect this returns a table with exactly 1 bucket. However we can
         .               /// leave the data pointer dangling since that bucket is never written to
         .               /// due to our load factor forcing us to always have at least 1 free bucket.
         .               #[inline]
         9 ( 0.00%)      pub fn new_in(alloc: A) -> Self {
     1,344 ( 0.00%)          Self {
         6 ( 0.00%)              table: RawTableInner::new_in(alloc),
         .                       marker: PhantomData,
         .                   }
         6 ( 0.00%)      }
         .           
         .               /// Allocates a new hash table with the given number of buckets.
         .               ///
         .               /// The control bytes are left uninitialized.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   Ok(Self {
       105 ( 0.00%)              table: RawTableInner::new_uninitialized(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           buckets,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 456 ----------------------------------------
-- line 458 ----------------------------------------
         .               /// Attempts to allocate a new hash table with at least enough capacity
         .               /// for inserting the given number of elements without reallocating.
         .               fn fallible_with_capacity(
         .                   alloc: A,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   Ok(Self {
     8,133 ( 0.00%)              table: RawTableInner::fallible_with_capacity(
         .                           alloc,
         .                           TableLayout::new::<T>(),
         .                           capacity,
         .                           fallibility,
         .                       )?,
         .                       marker: PhantomData,
         .                   })
         .               }
-- line 474 ----------------------------------------
-- line 499 ----------------------------------------
         .               /// Deallocates the table without dropping any entries.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn free_buckets(&mut self) {
         .                   self.table.free_buckets(TableLayout::new::<T>());
         .               }
         .           
         .               /// Returns pointer to one past last element of data table.
         .               #[inline]
        10 ( 0.00%)      pub unsafe fn data_end(&self) -> NonNull<T> {
        25 ( 0.00%)          NonNull::new_unchecked(self.table.ctrl.as_ptr().cast())
        10 ( 0.00%)      }
         .           
         .               /// Returns pointer to start of data table.
         .               #[inline]
         .               #[cfg(feature = "nightly")]
         .               pub unsafe fn data_start(&self) -> *mut T {
         .                   self.data_end().as_ptr().wrapping_sub(self.buckets())
         .               }
         .           
-- line 517 ----------------------------------------
-- line 527 ----------------------------------------
         .                   debug_assert_ne!(self.table.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               /// Erases an element from the table without dropping it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[deprecated(since = "0.8.1", note = "use erase or remove instead")]
    19,238 ( 0.00%)      pub unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {
    19,238 ( 0.00%)          let index = self.bucket_index(item);
         .                   self.table.erase(index);
    38,476 ( 0.00%)      }
         .           
         .               /// Erases an element from the table, dropping it in place.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn erase(&mut self, item: Bucket<T>) {
         .                   // Erase the element from the table first since drop might panic.
     8,170 ( 0.00%)          self.erase_no_drop(&item);
         .                   item.drop();
         .               }
         .           
         .               /// Finds and erases an element from the table, dropping it in place.
         .               /// Returns true if an element was found.
         .               #[cfg(feature = "raw")]
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn erase_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> bool {
-- line 554 ----------------------------------------
-- line 563 ----------------------------------------
         .                   }
         .               }
         .           
         .               /// Removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[allow(clippy::needless_pass_by_value)]
         .               #[allow(deprecated)]
         .               pub unsafe fn remove(&mut self, item: Bucket<T>) -> T {
    30,306 ( 0.00%)          self.erase_no_drop(&item);
       105 ( 0.00%)          item.read()
         .               }
         .           
         .               /// Finds and removes an element from the table, returning it.
         .               #[cfg_attr(feature = "inline-more", inline)]
   599,414 ( 0.02%)      pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
     1,270 ( 0.00%)          match self.find(hash, eq) {
     3,123 ( 0.00%)              Some(bucket) => Some(unsafe { self.remove(bucket) }),
    60,168 ( 0.00%)              None => None,
         .                   }
   821,169 ( 0.03%)      }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear_no_drop(&mut self) {
         .                   self.table.clear_no_drop();
         .               }
         .           
         .               /// Removes all elements from the table without freeing the backing memory.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn clear(&mut self) {
         .                   // Ensure that the table is reset even if one of the drops panic
         .                   let mut self_ = guard(self, |self_| self_.clear_no_drop());
         .                   unsafe {
         1 ( 0.00%)              self_.drop_elements();
         .                   }
         .               }
         .           
         7 ( 0.00%)      unsafe fn drop_elements(&mut self) {
    11,528 ( 0.00%)          if mem::needs_drop::<T>() && !self.is_empty() {
         .                       for item in self.iter() {
         .                           item.drop();
         .                       }
         .                   }
         8 ( 0.00%)      }
         .           
         .               /// Shrinks the table to fit `max(self.len(), min_size)` elements.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {
         .                   // Calculate the minimal number of elements that we need to reserve
         .                   // space for.
         .                   let min_size = usize::max(self.table.items, min_size);
         .                   if min_size == 0 {
-- line 615 ----------------------------------------
-- line 641 ----------------------------------------
         .                           }
         .                       }
         .                   }
         .               }
         .           
         .               /// Ensures that at least `additional` items can be inserted into the table
         .               /// without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
        28 ( 0.00%)      pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {
   434,860 ( 0.01%)          if additional > self.table.growth_left {
         .                       // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.
   186,962 ( 0.01%)              if self
         .                           .reserve_rehash(additional, hasher, Fallibility::Infallible)
         .                           .is_err()
         .                       {
         .                           unsafe { hint::unreachable_unchecked() }
         .                       }
         .                   }
        20 ( 0.00%)      }
         .           
         .               /// Tries to ensure that at least `additional` items can be inserted into
         .               /// the table without reallocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               pub fn try_reserve(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
-- line 667 ----------------------------------------
-- line 671 ----------------------------------------
         .                   } else {
         .                       Ok(())
         .                   }
         .               }
         .           
         .               /// Out-of-line slow path for `reserve` and `try_reserve`.
         .               #[cold]
         .               #[inline(never)]
   417,385 ( 0.01%)      fn reserve_rehash(
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
         .               ) -> Result<(), TryReserveError> {
         .                   unsafe {
         .                       self.table.reserve_rehash_inner(
         .                           additional,
-- line 687 ----------------------------------------
-- line 690 ----------------------------------------
         .                           TableLayout::new::<T>(),
         .                           if mem::needs_drop::<T>() {
         .                               Some(mem::transmute(ptr::drop_in_place::<T> as unsafe fn(*mut T)))
         .                           } else {
         .                               None
         .                           },
         .                       )
         .                   }
   263,160 ( 0.01%)      }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
         .               /// current table into it.
         .               fn resize(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: impl Fn(&T) -> u64,
         .                   fallibility: Fallibility,
-- line 706 ----------------------------------------
-- line 714 ----------------------------------------
         .                       )
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns its raw bucket.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 2,831,356 ( 0.09%)      pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {
         .                   unsafe {
         .                       let mut index = self.table.find_insert_slot(hash);
         .           
         .                       // We can avoid growing the table once we have reached our load
         .                       // factor if we are replacing a tombstone. This works since the
         .                       // number of EMPTY slots does not change in this case.
     3,584 ( 0.00%)              let old_ctrl = *self.table.ctrl(index);
 2,053,309 ( 0.07%)              if unlikely(self.table.growth_left == 0 && special_is_empty(old_ctrl)) {
         .                           self.reserve(1, hasher);
         .                           index = self.table.find_insert_slot(hash);
         .                       }
         .           
         .                       self.table.record_item_insert_at(index, old_ctrl, hash);
         .           
         .                       let bucket = self.bucket(index);
         2 ( 0.00%)              bucket.write(value);
         .                       bucket
         .                   }
 2,098,851 ( 0.07%)      }
         .           
         .               /// Attempts to insert a new element without growing the table and return its raw bucket.
         .               ///
         .               /// Returns an `Err` containing the given element if inserting it would require growing the
         .               /// table.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg(feature = "raw")]
-- line 749 ----------------------------------------
-- line 760 ----------------------------------------
         .                       }
         .                   }
         .               }
         .           
         .               /// Inserts a new element into the table, and returns a mutable reference to it.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
 1,057,408 ( 0.04%)      pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {
     1,107 ( 0.00%)          unsafe { self.insert(hash, value, hasher).as_mut() }
   793,056 ( 0.03%)      }
         .           
         .               /// Inserts a new element into the table, without growing the table.
         .               ///
         .               /// There must be enough space in the table to insert the new element.
         .               ///
         .               /// This does not check if the given element already exists in the table.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(any(feature = "raw", feature = "rustc-internal-api"))]
     2,791 ( 0.00%)      pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {
   536,502 ( 0.02%)          let (index, old_ctrl) = self.table.prepare_insert_slot(hash);
     7,570 ( 0.00%)          let bucket = self.table.bucket(index);
         .           
         .                   // If we are replacing a DELETED entry then we don't need to update
         .                   // the load counter.
 1,055,576 ( 0.04%)          self.table.growth_left -= special_is_empty(old_ctrl) as usize;
         .           
         .                   bucket.write(value);
   860,369 ( 0.03%)          self.table.items += 1;
         .                   bucket
     5,517 ( 0.00%)      }
         .           
         .               /// Temporary removes a bucket, applying the given function to the removed
         .               /// element and optionally put back the returned value in the same bucket.
         .               ///
         .               /// Returns `true` if the bucket still contains an element
         .               ///
         .               /// This does not check if the given bucket is actually occupied.
         .               #[cfg_attr(feature = "inline-more", inline)]
-- line 798 ----------------------------------------
-- line 813 ----------------------------------------
         .                       true
         .                   } else {
         .                       false
         .                   }
         .               }
         .           
         .               /// Searches for an element in the table.
         .               #[inline]
    19,182 ( 0.00%)      pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {
     3,314 ( 0.00%)          let result = self.table.find_inner(hash, &mut |index| unsafe {
    26,777 ( 0.00%)              eq(self.bucket(index).as_ref())
       892 ( 0.00%)          });
         .           
         .                   // Avoid `Option::map` because it bloats LLVM IR.
         .                   match result {
       354 ( 0.00%)              Some(index) => Some(unsafe { self.bucket(index) }),
         .                       None => None,
         .                   }
    21,970 ( 0.00%)      }
         .           
         .               /// Gets a reference to an element in the table.
         .               #[inline]
         .               pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    11,348 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_ref() }),
         .                       None => None,
         .                   }
         .               }
         .           
         .               /// Gets a mutable reference to an element in the table.
         .               #[inline]
     5,772 ( 0.00%)      pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {
         .                   // Avoid `Option::map` because it bloats LLVM IR.
    10,054 ( 0.00%)          match self.find(hash, eq) {
         .                       Some(bucket) => Some(unsafe { bucket.as_mut() }),
         .                       None => None,
         .                   }
     6,688 ( 0.00%)      }
         .           
         .               /// Attempts to get mutable references to `N` entries in the table at once.
         .               ///
         .               /// Returns an array of length `N` with the results of each query.
         .               ///
         .               /// At most one mutable reference will be returned to any entry. `None` will be returned if any
         .               /// of the hashes are duplicates. `None` will be returned if the hash is not found.
         .               ///
-- line 859 ----------------------------------------
-- line 913 ----------------------------------------
         .               /// more, but is guaranteed to be able to hold at least this many.
         .               #[inline]
         .               pub fn capacity(&self) -> usize {
         .                   self.table.items + self.table.growth_left
         .               }
         .           
         .               /// Returns the number of elements in the table.
         .               #[inline]
        28 ( 0.00%)      pub fn len(&self) -> usize {
        14 ( 0.00%)          self.table.items
        28 ( 0.00%)      }
         .           
         .               /// Returns `true` if the table contains no elements.
         .               #[inline]
         8 ( 0.00%)      pub fn is_empty(&self) -> bool {
   718,556 ( 0.02%)          self.len() == 0
        16 ( 0.00%)      }
         .           
         .               /// Returns the number of buckets in the table.
         .               #[inline]
         .               pub fn buckets(&self) -> usize {
         .                   self.table.bucket_mask + 1
         .               }
         .           
         .               /// Returns an iterator over every element in the table. It is up to
         .               /// the caller to ensure that the `RawTable` outlives the `RawIter`.
         .               /// Because we cannot make the `next` method unsafe on the `RawIter`
         .               /// struct, we have to make the `iter` method unsafe.
         .               #[inline]
        35 ( 0.00%)      pub unsafe fn iter(&self) -> RawIter<T> {
        35 ( 0.00%)          let data = Bucket::from_base_index(self.data_end(), 0);
        45 ( 0.00%)          RawIter {
        35 ( 0.00%)              iter: RawIterRange::new(self.table.ctrl.as_ptr(), data, self.table.buckets()),
    57,377 ( 0.00%)              items: self.table.items,
         .                   }
        10 ( 0.00%)      }
         .           
         .               /// Returns an iterator over occupied buckets that could match a given hash.
         .               ///
         .               /// `RawTable` only stores 7 bits of the hash value, so this iterator may
         .               /// return items that have a hash value different than the one provided. You
         .               /// should always validate the returned values before using them.
         .               ///
         .               /// It is up to the caller to ensure that the `RawTable` outlives the
-- line 956 ----------------------------------------
-- line 991 ----------------------------------------
         .               }
         .           
         .               /// Returns an iterator which consumes all elements from the table.
         .               ///
         .               /// Iteration starts at the provided iterator's current location.
         .               ///
         .               /// It is up to the caller to ensure that the iterator is valid for this
         .               /// `RawTable` and covers all items that remain in the table.
        35 ( 0.00%)      pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {
        10 ( 0.00%)          debug_assert_eq!(iter.len(), self.len());
         .           
        10 ( 0.00%)          let alloc = self.table.alloc.clone();
     3,769 ( 0.00%)          let allocation = self.into_allocation();
     2,848 ( 0.00%)          RawIntoIter {
     4,675 ( 0.00%)              iter,
        30 ( 0.00%)              allocation,
         .                       marker: PhantomData,
         .                       alloc,
         .                   }
        10 ( 0.00%)      }
         .           
         .               /// Converts the table into a raw allocation. The contents of the table
         .               /// should be dropped using a `RawIter` before freeing the allocation.
         .               #[cfg_attr(feature = "inline-more", inline)]
        30 ( 0.00%)      pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout)> {
     1,329 ( 0.00%)          let alloc = if self.table.is_empty_singleton() {
         5 ( 0.00%)              None
         .                   } else {
         .                       // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                       let (layout, ctrl_offset) = match calculate_layout::<T>(self.table.buckets()) {
         .                           Some(lco) => lco,
         .                           None => unsafe { hint::unreachable_unchecked() },
         .                       };
         .                       Some((
       547 ( 0.00%)                  unsafe { NonNull::new_unchecked(self.table.ctrl.as_ptr().sub(ctrl_offset)) },
         .                           layout,
         .                       ))
         .                   };
        40 ( 0.00%)          mem::forget(self);
         .                   alloc
        10 ( 0.00%)      }
         .           }
         .           
         .           unsafe impl<T, A: Allocator + Clone> Send for RawTable<T, A>
         .           where
         .               T: Send,
         .               A: Send,
         .           {
         .           }
-- line 1039 ----------------------------------------
-- line 1041 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<A> RawTableInner<A> {
         .               #[inline]
        39 ( 0.00%)      const fn new_in(alloc: A) -> Self {
   448,476 ( 0.02%)          Self {
         .                       // Be careful to cast the entire slice to a raw pointer.
        91 ( 0.00%)              ctrl: unsafe { NonNull::new_unchecked(Group::static_empty() as *const _ as *mut u8) },
         .                       bucket_mask: 0,
         .                       items: 0,
         .                       growth_left: 0,
         .                       alloc,
         .                   }
        26 ( 0.00%)      }
         .           }
         .           
         .           impl<A: Allocator + Clone> RawTableInner<A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   269,362 ( 0.01%)      unsafe fn new_uninitialized(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   buckets: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
         .                   debug_assert!(buckets.is_power_of_two());
         .           
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
-- line 1071 ----------------------------------------
-- line 1078 ----------------------------------------
         .                   // exceed `isize::MAX`. We can skip this check on 64-bit systems since
         .                   // such allocations will never succeed anyways.
         .                   //
         .                   // This mirrors what Vec does in the standard library.
         .                   if mem::size_of::<usize>() < 8 && layout.size() > isize::MAX as usize {
         .                       return Err(fallibility.capacity_overflow());
         .                   }
         .           
    79,154 ( 0.00%)          let ptr: NonNull<u8> = match do_alloc(&alloc, layout) {
         .                       Ok(block) => block.cast(),
         .                       Err(_) => return Err(fallibility.alloc_err(layout)),
         .                   };
         .           
         .                   let ctrl = NonNull::new_unchecked(ptr.as_ptr().add(ctrl_offset));
   151,698 ( 0.01%)          Ok(Self {
         .                       ctrl,
    77,750 ( 0.00%)              bucket_mask: buckets - 1,
         .                       items: 0,
         .                       growth_left: bucket_mask_to_capacity(buckets - 1),
         .                       alloc,
         .                   })
   196,430 ( 0.01%)      }
         .           
         .               #[inline]
    31,191 ( 0.00%)      fn fallible_with_capacity(
         .                   alloc: A,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<Self, TryReserveError> {
     7,854 ( 0.00%)          if capacity == 0 {
     4,363 ( 0.00%)              Ok(Self::new_in(alloc))
         .                   } else {
         .                       unsafe {
         .                           let buckets =
         .                               capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;
         .           
   120,841 ( 0.00%)                  let result = Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;
         .                           result.ctrl(0).write_bytes(EMPTY, result.num_ctrl_bytes());
         .           
    18,238 ( 0.00%)                  Ok(result)
         .                       }
         .                   }
    31,191 ( 0.00%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element and sets the hash for that slot.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
   178,094 ( 0.01%)      unsafe fn prepare_insert_slot(&self, hash: u64) -> (usize, u8) {
         .                   let index = self.find_insert_slot(hash);
   178,094 ( 0.01%)          let old_ctrl = *self.ctrl(index);
         .                   self.set_ctrl_h2(index, hash);
         .                   (index, old_ctrl)
   356,188 ( 0.01%)      }
         .           
         .               /// Searches for an empty or deleted bucket which is suitable for inserting
         .               /// a new element.
         .               ///
         .               /// There must be at least 1 empty bucket in the table.
         .               #[inline]
         .               fn find_insert_slot(&self, hash: u64) -> usize {
         .                   let mut probe_seq = self.probe_seq(hash);
         .                   loop {
         .                       unsafe {
         .                           let group = Group::load(self.ctrl(probe_seq.pos));
 1,437,440 ( 0.05%)                  if let Some(bit) = group.match_empty_or_deleted().lowest_set_bit() {
 4,178,810 ( 0.14%)                      let result = (probe_seq.pos + bit) & self.bucket_mask;
         .           
         .                               // In tables smaller than the group width, trailing control
         .                               // bytes outside the range of the table are filled with
         .                               // EMPTY entries. These will unfortunately trigger a
         .                               // match, but once masked may point to a full bucket that
         .                               // is already occupied. We detect this situation here and
         .                               // perform a second scan starting at the beginning of the
         .                               // table. This second scan is guaranteed to find an empty
         .                               // slot (due to the load factor) before hitting the trailing
         .                               // control bytes (containing EMPTY).
 1,905,961 ( 0.06%)                      if unlikely(is_full(*self.ctrl(result))) {
         .                                   debug_assert!(self.bucket_mask < Group::WIDTH);
         .                                   debug_assert_ne!(probe_seq.pos, 0);
         .                                   return Group::load_aligned(self.ctrl(0))
         .                                       .match_empty_or_deleted()
         .                                       .lowest_set_bit_nonzero();
         .                               }
         .           
         .                               return result;
-- line 1165 ----------------------------------------
-- line 1171 ----------------------------------------
         .           
         .               /// Searches for an element in the table. This uses dynamic dispatch to reduce the amount of
         .               /// code generated, but it is eliminated by LLVM optimizations.
         .               #[inline]
         .               fn find_inner(&self, hash: u64, eq: &mut dyn FnMut(usize) -> bool) -> Option<usize> {
         .                   let h2_hash = h2(hash);
         .                   let mut probe_seq = self.probe_seq(hash);
         .           
    86,392 ( 0.00%)          loop {
         .                       let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };
         .           
 3,546,755 ( 0.12%)              for bit in group.match_byte(h2_hash) {
 6,745,114 ( 0.23%)                  let index = (probe_seq.pos + bit) & self.bucket_mask;
         .           
 4,400,778 ( 0.15%)                  if likely(eq(index)) {
         .                               return Some(index);
         .                           }
         .                       }
         .           
 1,180,608 ( 0.04%)              if likely(group.match_empty().any_bit_set()) {
         .                           return None;
         .                       }
         .           
         .                       probe_seq.move_next(self.bucket_mask);
         .                   }
         .               }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_rehash_in_place(&mut self) {
         .                   // Bulk convert all full control bytes to DELETED, and all DELETED
         .                   // control bytes to EMPTY. This effectively frees up all buckets
         .                   // containing a DELETED entry.
         6 ( 0.00%)          for i in (0..self.buckets()).step_by(Group::WIDTH) {
         .                       let group = Group::load_aligned(self.ctrl(i));
         .                       let group = group.convert_special_to_empty_and_full_to_deleted();
         .                       group.store_aligned(self.ctrl(i));
         .                   }
         .           
         .                   // Fix up the trailing control bytes. See the comments in set_ctrl
         .                   // for the handling of tables smaller than the group width.
         6 ( 0.00%)          if self.buckets() < Group::WIDTH {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(Group::WIDTH), self.buckets());
         .                   } else {
         .                       self.ctrl(0)
         .                           .copy_to(self.ctrl(self.buckets()), Group::WIDTH);
         .                   }
         .               }
         .           
-- line 1220 ----------------------------------------
-- line 1225 ----------------------------------------
         .                   Bucket::from_base_index(self.data_end(), index)
         .               }
         .           
         .               #[inline]
         .               unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {
         .                   debug_assert_ne!(self.bucket_mask, 0);
         .                   debug_assert!(index < self.buckets());
         .                   let base: *mut u8 = self.data_end().as_ptr();
 5,344,760 ( 0.18%)          base.sub((index + 1) * size_of)
         .               }
         .           
         .               #[inline]
         .               unsafe fn data_end<T>(&self) -> NonNull<T> {
         .                   NonNull::new_unchecked(self.ctrl.as_ptr().cast())
         .               }
         .           
         .               /// Returns an iterator-like object for a probe sequence on the table.
         .               ///
         .               /// This iterator never terminates, but is guaranteed to visit each bucket
         .               /// group exactly once. The loop using `probe_seq` must terminate upon
         .               /// reaching a group containing an empty bucket.
         .               #[inline]
         .               fn probe_seq(&self, hash: u64) -> ProbeSeq {
         .                   ProbeSeq {
21,942,812 ( 0.73%)              pos: h1(hash) & self.bucket_mask,
         .                       stride: 0,
         .                   }
         .               }
         .           
         .               /// Returns the index of a bucket for which a value must be inserted if there is enough rooom
         .               /// in the table, otherwise returns error
         .               #[cfg(feature = "raw")]
         .               #[inline]
-- line 1257 ----------------------------------------
-- line 1263 ----------------------------------------
         .                   } else {
         .                       self.record_item_insert_at(index, old_ctrl, hash);
         .                       Ok(index)
         .                   }
         .               }
         .           
         .               #[inline]
         .               unsafe fn record_item_insert_at(&mut self, index: usize, old_ctrl: u8, hash: u64) {
 2,570,598 ( 0.09%)          self.growth_left -= special_is_empty(old_ctrl) as usize;
         .                   self.set_ctrl_h2(index, hash);
 2,053,124 ( 0.07%)          self.items += 1;
         .               }
         .           
         .               #[inline]
         .               fn is_in_same_group(&self, i: usize, new_i: usize, hash: u64) -> bool {
         .                   let probe_seq_pos = self.probe_seq(hash).pos;
         .                   let probe_index =
         .                       |pos: usize| (pos.wrapping_sub(probe_seq_pos) & self.bucket_mask) / Group::WIDTH;
        66 ( 0.00%)          probe_index(i) == probe_index(new_i)
         .               }
         .           
         .               /// Sets a control byte to the hash, and possibly also the replicated control byte at
         .               /// the end of the array.
         .               #[inline]
         .               unsafe fn set_ctrl_h2(&self, index: usize, hash: u64) {
         .                   self.set_ctrl(index, h2(hash));
         .               }
-- line 1289 ----------------------------------------
-- line 1312 ----------------------------------------
         .                   // replicate the buckets at the end of the trailing group. For example
         .                   // with 2 buckets and a group size of 4, the control bytes will look
         .                   // like this:
         .                   //
         .                   //     Real    |             Replicated
         .                   // ---------------------------------------------
         .                   // | [A] | [B] | [EMPTY] | [EMPTY] | [A] | [B] |
         .                   // ---------------------------------------------
 4,088,221 ( 0.14%)          let index2 = ((index.wrapping_sub(Group::WIDTH)) & self.bucket_mask) + Group::WIDTH;
         .           
 1,362,211 ( 0.05%)          *self.ctrl(index) = ctrl;
 1,362,401 ( 0.05%)          *self.ctrl(index2) = ctrl;
         .               }
         .           
         .               /// Returns a pointer to a control byte.
         .               #[inline]
         .               unsafe fn ctrl(&self, index: usize) -> *mut u8 {
         .                   debug_assert!(index < self.num_ctrl_bytes());
         .                   self.ctrl.as_ptr().add(index)
         .               }
         .           
         .               #[inline]
        10 ( 0.00%)      fn buckets(&self) -> usize {
   208,392 ( 0.01%)          self.bucket_mask + 1
        10 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn num_ctrl_bytes(&self) -> usize {
   161,627 ( 0.01%)          self.bucket_mask + 1 + Group::WIDTH
         .               }
         .           
         .               #[inline]
        26 ( 0.00%)      fn is_empty_singleton(&self) -> bool {
   864,658 ( 0.03%)          self.bucket_mask == 0
        52 ( 0.00%)      }
         .           
         .               #[allow(clippy::mut_mut)]
         .               #[inline]
         .               unsafe fn prepare_resize(
         .                   &self,
         .                   table_layout: TableLayout,
         .                   capacity: usize,
         .                   fallibility: Fallibility,
         .               ) -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self)>, TryReserveError> {
         .                   debug_assert!(self.items <= capacity);
         .           
         .                   // Allocate and initialize the new table.
     5,625 ( 0.00%)          let mut new_table = RawTableInner::fallible_with_capacity(
         .                       self.alloc.clone(),
         .                       table_layout,
         .                       capacity,
         .                       fallibility,
         .                   )?;
   113,183 ( 0.00%)          new_table.growth_left -= self.items;
         .                   new_table.items = self.items;
         .           
         .                   // The hash function may panic, in which case we simply free the new
         .                   // table without dropping any elements that may have been copied into
         .                   // it.
         .                   //
         .                   // This guard is also used to free the old table on success, see
         .                   // the comment at the bottom of this function.
         .                   Ok(guard(new_table, move |self_| {
    51,280 ( 0.00%)              if !self_.is_empty_singleton() {
         .                           self_.free_buckets(table_layout);
         .                       }
         .                   }))
         .               }
         .           
         .               /// Reserves or rehashes to make room for `additional` more elements.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1383 ----------------------------------------
-- line 1388 ----------------------------------------
         .                   &mut self,
         .                   additional: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .                   drop: Option<fn(*mut u8)>,
         .               ) -> Result<(), TryReserveError> {
         .                   // Avoid `Option::ok_or_else` because it bloats LLVM IR.
   102,568 ( 0.00%)          let new_items = match self.items.checked_add(additional) {
         .                       Some(new_items) => new_items,
         .                       None => return Err(fallibility.capacity_overflow()),
         .                   };
   102,564 ( 0.00%)          let full_capacity = bucket_mask_to_capacity(self.bucket_mask);
   222,009 ( 0.01%)          if new_items <= full_capacity / 2 {
         .                       // Rehash in-place without re-allocating if we have plenty of spare
         .                       // capacity that is locked up due to DELETED entries.
         .                       self.rehash_in_place(hasher, layout.size, drop);
         4 ( 0.00%)              Ok(())
         .                   } else {
         .                       // Otherwise, conservatively resize to at least the next size up
         .                       // to avoid churning deletes into frequent rehashes.
         .                       self.resize_inner(
    51,280 ( 0.00%)                  usize::max(new_items, full_capacity + 1),
         .                           hasher,
         .                           fallibility,
         .                           layout,
         .                       )
         .                   }
         .               }
         .           
         .               /// Allocates a new table of a different size and moves the contents of the
-- line 1418 ----------------------------------------
-- line 1424 ----------------------------------------
         .               #[inline(always)]
         .               unsafe fn resize_inner(
         .                   &mut self,
         .                   capacity: usize,
         .                   hasher: &dyn Fn(&mut Self, usize) -> u64,
         .                   fallibility: Fallibility,
         .                   layout: TableLayout,
         .               ) -> Result<(), TryReserveError> {
    13,978 ( 0.00%)          let mut new_table = self.prepare_resize(layout, capacity, fallibility)?;
         .           
         .                   // Copy all elements to the new table.
         .                   for i in 0..self.buckets() {
   801,010 ( 0.03%)              if !is_full(*self.ctrl(i)) {
         .                           continue;
         .                       }
         .           
         .                       // This may panic.
         .                       let hash = hasher(self, i);
         .           
         .                       // We can use a simpler version of insert() here since:
         .                       // - there are no DELETED entries.
-- line 1444 ----------------------------------------
-- line 1454 ----------------------------------------
         .                   }
         .           
         .                   // We successfully copied all elements without panicking. Now replace
         .                   // self with the new table. The old table will have its memory freed but
         .                   // the items will not be dropped (since they have been moved into the
         .                   // new table).
         .                   mem::swap(self, &mut new_table);
         .           
    51,280 ( 0.00%)          Ok(())
         .               }
         .           
         .               /// Rehashes the contents of the table in place (i.e. without changing the
         .               /// allocation).
         .               ///
         .               /// If `hasher` panics then some the table's contents may be lost.
         .               ///
         .               /// This uses dynamic dispatch to reduce the amount of
-- line 1470 ----------------------------------------
-- line 1496 ----------------------------------------
         .                       }
         .                       self_.growth_left = bucket_mask_to_capacity(self_.bucket_mask) - self_.items;
         .                   });
         .           
         .                   // At this point, DELETED elements are elements that we haven't
         .                   // rehashed yet. Find them and re-insert them at their ideal
         .                   // position.
         .                   'outer: for i in 0..guard.buckets() {
       128 ( 0.00%)              if *guard.ctrl(i) != DELETED {
         .                           continue;
         .                       }
         .           
         .                       let i_p = guard.bucket_ptr(i, size_of);
         .           
         .                       'inner: loop {
         .                           // Hash the current item
         .                           let hash = hasher(*guard, i);
-- line 1512 ----------------------------------------
-- line 1515 ----------------------------------------
         .                           let new_i = guard.find_insert_slot(hash);
         .                           let new_i_p = guard.bucket_ptr(new_i, size_of);
         .           
         .                           // Probing works by scanning through all of the control
         .                           // bytes in groups, which may not be aligned to the group
         .                           // size. If both the new and old position fall within the
         .                           // same unaligned group, then there is no benefit in moving
         .                           // it and we can just continue to the next item.
        22 ( 0.00%)                  if likely(guard.is_in_same_group(i, new_i, hash)) {
         .                               guard.set_ctrl_h2(i, hash);
         .                               continue 'outer;
         .                           }
         .           
         .                           // We are moving the current item to a new position. Write
         .                           // our H2 to the control byte of the new position.
         .                           let prev_ctrl = guard.replace_ctrl_h2(new_i, hash);
         .                           if prev_ctrl == EMPTY {
-- line 1531 ----------------------------------------
-- line 1541 ----------------------------------------
         .                               // swapped into the old slot.
         .                               debug_assert_eq!(prev_ctrl, DELETED);
         .                               ptr::swap_nonoverlapping(i_p, new_i_p, size_of);
         .                               continue 'inner;
         .                           }
         .                       }
         .                   }
         .           
         6 ( 0.00%)          guard.growth_left = bucket_mask_to_capacity(guard.bucket_mask) - guard.items;
         .           
         .                   mem::forget(guard);
         .               }
         .           
         .               #[inline]
         .               unsafe fn free_buckets(&mut self, table_layout: TableLayout) {
         .                   // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.
         .                   let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {
         .                       Some(lco) => lco,
         .                       None => hint::unreachable_unchecked(),
         .                   };
         .                   self.alloc.deallocate(
    32,525 ( 0.00%)              NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)),
         .                       layout,
         .                   );
         .               }
         .           
         .               /// Marks all table buckets as empty without dropping their contents.
         .               #[inline]
         .               fn clear_no_drop(&mut self) {
     6,934 ( 0.00%)          if !self.is_empty_singleton() {
         .                       unsafe {
         .                           self.ctrl(0).write_bytes(EMPTY, self.num_ctrl_bytes());
         .                       }
         .                   }
     8,038 ( 0.00%)          self.items = 0;
     6,994 ( 0.00%)          self.growth_left = bucket_mask_to_capacity(self.bucket_mask);
         .               }
         .           
         .               #[inline]
         .               unsafe fn erase(&mut self, index: usize) {
         .                   debug_assert!(is_full(*self.ctrl(index)));
   124,422 ( 0.00%)          let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;
         .                   let empty_before = Group::load(self.ctrl(index_before)).match_empty();
         .                   let empty_after = Group::load(self.ctrl(index)).match_empty();
         .           
         .                   // If we are inside a continuous block of Group::WIDTH full or deleted
         .                   // cells then a probe window may have seen a full block when trying to
         .                   // insert. We therefore need to keep that block non-empty so that
         .                   // lookups will continue searching to the next probe window.
         .                   //
         .                   // Note that in this context `leading_zeros` refers to the bytes at the
         .                   // end of a group, while `trailing_zeros` refers to the bytes at the
         .                   // beginning of a group.
   497,688 ( 0.02%)          let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {
         .                       DELETED
         .                   } else {
   601,990 ( 0.02%)              self.growth_left += 1;
         .                       EMPTY
         .                   };
         .                   self.set_ctrl(index, ctrl);
   497,688 ( 0.02%)          self.items -= 1;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> Clone for RawTable<T, A> {
     3,536 ( 0.00%)      fn clone(&self) -> Self {
       461 ( 0.00%)          if self.table.is_empty_singleton() {
         .                       Self::new_in(self.table.alloc.clone())
         .                   } else {
         .                       unsafe {
         .                           let mut new_table = ManuallyDrop::new(
         .                               // Avoid `Result::ok_or_else` because it bloats LLVM IR.
         .                               match Self::new_uninitialized(
         .                                   self.table.alloc.clone(),
         .                                   self.table.buckets(),
-- line 1615 ----------------------------------------
-- line 1624 ----------------------------------------
         .                               // We need to free the memory allocated for the new table.
         .                               new_table.free_buckets();
         .                           });
         .           
         .                           // Return the newly created table.
         .                           ManuallyDrop::into_inner(new_table)
         .                       }
         .                   }
     3,978 ( 0.00%)      }
         .           
         .               fn clone_from(&mut self, source: &Self) {
         .                   if source.table.is_empty_singleton() {
         .                       *self = Self::new_in(self.table.alloc.clone());
         .                   } else {
         .                       unsafe {
         .                           // First, drop all our elements without clearing the control bytes.
         .                           self.drop_elements();
-- line 1640 ----------------------------------------
-- line 1687 ----------------------------------------
         .                       .table
         .                       .ctrl(0)
         .                       .copy_to_nonoverlapping(self.table.ctrl(0), self.table.num_ctrl_bytes());
         .                   source
         .                       .data_start()
         .                       .copy_to_nonoverlapping(self.data_start(), self.table.buckets());
         .           
         .                   self.table.items = source.table.items;
        42 ( 0.00%)          self.table.growth_left = source.table.growth_left;
         .               }
         .           }
         .           
         .           impl<T: Clone, A: Allocator + Clone> RawTable<T, A> {
         .               /// Common code for clone and clone_from. Assumes `self.buckets() == source.buckets()`.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               unsafe fn clone_from_impl(&mut self, source: &Self, mut on_panic: impl FnMut(&mut Self)) {
         .                   // Copy the control bytes unchanged. We do this in a single pass
-- line 1703 ----------------------------------------
-- line 1790 ----------------------------------------
         .               fn default() -> Self {
         .                   Self::new_in(Default::default())
         .               }
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
   420,418 ( 0.01%)      fn drop(&mut self) {
   364,650 ( 0.01%)          if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
         .                           self.free_buckets();
         .                       }
         .                   }
   437,010 ( 0.01%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawTable<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   if !self.table.is_empty_singleton() {
         .                       unsafe {
         .                           self.drop_elements();
-- line 1813 ----------------------------------------
-- line 1817 ----------------------------------------
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> IntoIterator for RawTable<T, A> {
         .               type Item = T;
         .               type IntoIter = RawIntoIter<T, A>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     3,744 ( 0.00%)      fn into_iter(self) -> RawIntoIter<T, A> {
         .                   unsafe {
        25 ( 0.00%)              let iter = self.iter();
        75 ( 0.00%)              self.into_iter_from(iter)
         .                   }
     4,665 ( 0.00%)      }
         .           }
         .           
         .           /// Iterator over a sub-range of a table. Unlike `RawIter` this iterator does
         .           /// not track an item count.
         .           pub(crate) struct RawIterRange<T> {
         .               // Mask of full buckets in the current group. Bits are cleared from this
         .               // mask as each element is processed.
         .               current_group: BitMask,
-- line 1838 ----------------------------------------
-- line 1848 ----------------------------------------
         .               end: *const u8,
         .           }
         .           
         .           impl<T> RawIterRange<T> {
         .               /// Returns a `RawIterRange` covering a subset of a table.
         .               ///
         .               /// The control byte address must be aligned to the group size.
         .               #[cfg_attr(feature = "inline-more", inline)]
        60 ( 0.00%)      unsafe fn new(ctrl: *const u8, data: Bucket<T>, len: usize) -> Self {
         .                   debug_assert_ne!(len, 0);
         .                   debug_assert_eq!(ctrl as usize % Group::WIDTH, 0);
         5 ( 0.00%)          let end = ctrl.add(len);
         .           
         .                   // Load the first group and advance ctrl to point to the next group
        30 ( 0.00%)          let current_group = Group::load_aligned(ctrl).match_full();
         5 ( 0.00%)          let next_ctrl = ctrl.add(Group::WIDTH);
         .           
        20 ( 0.00%)          Self {
         .                       current_group,
         .                       data,
         .                       next_ctrl,
         .                       end,
         .                   }
        10 ( 0.00%)      }
         .           
         .               /// Splits a `RawIterRange` into two halves.
         .               ///
         .               /// Returns `None` if the remaining range is smaller than or equal to the
         .               /// group width.
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               #[cfg(feature = "rayon")]
         .               pub(crate) fn split(mut self) -> (Self, Option<RawIterRange<T>>) {
-- line 1879 ----------------------------------------
-- line 1931 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIterRange<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
        20 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
         .                   unsafe {
         .                       loop {
   192,767 ( 0.01%)                  if let Some(index) = self.current_group.lowest_set_bit() {
    21,355 ( 0.00%)                      self.current_group = self.current_group.remove_lowest_bit();
    28,600 ( 0.00%)                      return Some(self.data.next_n(index));
         .                           }
         .           
   136,646 ( 0.00%)                  if self.next_ctrl >= self.end {
         5 ( 0.00%)                      return None;
         .                           }
         .           
         .                           // We might read past self.end up to the next group boundary,
         .                           // but this is fine because it only occurs on tables smaller
         .                           // than the group size where the trailing control bytes are all
         .                           // EMPTY. On larger tables self.end is guaranteed to be aligned
         .                           // to the group size (since tables are power-of-two sized).
     6,611 ( 0.00%)                  self.current_group = Group::load_aligned(self.next_ctrl).match_full();
     2,810 ( 0.00%)                  self.data = self.data.next_n(Group::WIDTH);
    16,024 ( 0.00%)                  self.next_ctrl = self.next_ctrl.add(Group::WIDTH);
         .                       }
         .                   }
        15 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         .                   // We don't have an item count, so just guess based on the range size.
         .                   (
         .                       0,
         .                       Some(unsafe { offset_from(self.end, self.next_ctrl) + Group::WIDTH }),
         .                   )
-- line 1969 ----------------------------------------
-- line 2101 ----------------------------------------
         .                               }
         .                           }
         .                       } else {
         .                           // We must have already iterated past the removed item.
         .                       }
         .                   }
         .               }
         .           
        10 ( 0.00%)      unsafe fn drop_elements(&mut self) {
     2,265 ( 0.00%)          if mem::needs_drop::<T>() && self.len() != 0 {
         .                       for item in self {
         .                           item.drop();
         .                       }
         .                   }
        10 ( 0.00%)      }
         .           }
         .           
         .           impl<T> Clone for RawIter<T> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn clone(&self) -> Self {
         .                   Self {
         .                       iter: self.iter.clone(),
         .                       items: self.items,
-- line 2123 ----------------------------------------
-- line 2124 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T> Iterator for RawIter<T> {
         .               type Item = Bucket<T>;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
    19,787 ( 0.00%)      fn next(&mut self) -> Option<Bucket<T>> {
    47,870 ( 0.00%)          if let Some(b) = self.iter.next() {
   279,799 ( 0.01%)              self.items -= 1;
         .                       Some(b)
         .                   } else {
         .                       // We don't check against items == 0 here to allow the
         .                       // compiler to optimize away the item count entirely if the
         .                       // iterator length is never queried.
         .                       debug_assert_eq!(self.items, 0);
         5 ( 0.00%)              None
         .                   }
    39,559 ( 0.00%)      }
         .           
         .               #[inline]
        15 ( 0.00%)      fn size_hint(&self) -> (usize, Option<usize>) {
        45 ( 0.00%)          (self.items, Some(self.items))
        10 ( 0.00%)      }
         .           }
         .           
         .           impl<T> ExactSizeIterator for RawIter<T> {}
         .           impl<T> FusedIterator for RawIter<T> {}
         .           
         .           /// Iterator which consumes a table and returns elements.
         .           pub struct RawIntoIter<T, A: Allocator + Clone = Global> {
         .               iter: RawIter<T>,
-- line 2156 ----------------------------------------
-- line 2177 ----------------------------------------
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           #[cfg(feature = "nightly")]
         .           unsafe impl<#[may_dangle] T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     2,877 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         5 ( 0.00%)              self.iter.drop_elements();
         .           
         .                       // Free the table
     6,185 ( 0.00%)              if let Some((ptr, layout)) = self.allocation {
         .                           self.alloc.deallocate(ptr, layout);
         .                       }
         .                   }
       356 ( 0.00%)      }
         .           }
         .           #[cfg(not(feature = "nightly"))]
         .           impl<T, A: Allocator + Clone> Drop for RawIntoIter<T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements
         .                       self.iter.drop_elements();
-- line 2203 ----------------------------------------
-- line 2209 ----------------------------------------
         .                   }
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawIntoIter<T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,563 ( 0.00%)      fn next(&mut self) -> Option<T> {
     1,344 ( 0.00%)          unsafe { Some(self.iter.next()?.read()) }
     3,647 ( 0.00%)      }
         .           
         .               #[inline]
         .               fn size_hint(&self) -> (usize, Option<usize>) {
         5 ( 0.00%)          self.iter.size_hint()
         .               }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> ExactSizeIterator for RawIntoIter<T, A> {}
         .           impl<T, A: Allocator + Clone> FusedIterator for RawIntoIter<T, A> {}
         .           
         .           /// Iterator which consumes elements without freeing the table storage.
         .           pub struct RawDrain<'a, T, A: Allocator + Clone = Global> {
-- line 2231 ----------------------------------------
-- line 2259 ----------------------------------------
         .           where
         .               T: Sync,
         .               A: Sync,
         .           {
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Drop for RawDrain<'_, T, A> {
         .               #[cfg_attr(feature = "inline-more", inline)]
     1,928 ( 0.00%)      fn drop(&mut self) {
         .                   unsafe {
         .                       // Drop all remaining elements. Note that this may panic.
         .                       self.iter.drop_elements();
         .           
         .                       // Reset the contents of the table now that all elements have been
         .                       // dropped.
         .                       self.table.clear_no_drop();
         .           
         .                       // Move the now empty table back to its original location.
       241 ( 0.00%)              self.orig_table
         .                           .as_ptr()
         .                           .copy_from_nonoverlapping(&*self.table, 1);
         .                   }
     1,928 ( 0.00%)      }
         .           }
         .           
         .           impl<T, A: Allocator + Clone> Iterator for RawDrain<'_, T, A> {
         .               type Item = T;
         .           
         .               #[cfg_attr(feature = "inline-more", inline)]
         .               fn next(&mut self) -> Option<T> {
         .                   unsafe {
-- line 2289 ----------------------------------------

12,285,900 ( 0.41%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/raw/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs
--------------------------------------------------------------------------------
Ir                 

-- line 186 ----------------------------------------
        .           /// // use the values stored in map
        .           /// ```
        .           pub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator + Clone = Global> {
        .               pub(crate) hash_builder: S,
        .               pub(crate) table: RawTable<(K, V), A>,
        .           }
        .           
        .           impl<K: Clone, V: Clone, S: Clone, A: Allocator + Clone> Clone for HashMap<K, V, S, A> {
      152 ( 0.00%)      fn clone(&self) -> Self {
    2,021 ( 0.00%)          HashMap {
        .                       hash_builder: self.hash_builder.clone(),
      441 ( 0.00%)              table: self.table.clone(),
        .                   }
      171 ( 0.00%)      }
        .           
        .               fn clone_from(&mut self, source: &Self) {
        .                   self.table.clone_from(&source.table);
        .           
        .                   // Update hash_builder only if we successfully cloned all elements.
        .                   self.hash_builder.clone_from(&source.hash_builder);
        .               }
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        8 ( 0.00%)  pub(crate) fn make_hasher<K, Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash,
        .               S: BuildHasher,
        .           {
  122,435 ( 0.00%)      move |val| make_hash::<K, Q, S>(hash_builder, &val.0)
       12 ( 0.00%)  }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  282,231 ( 0.01%)      move |x| k.eq(x.0.borrow())
        .           }
        .           
        .           /// Ensures that a single closure type across uses of this which, in turn prevents multiple
        .           /// instances of any functions like RawTable::reserve from being generated
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_
        .           where
        .               K: Borrow<Q>,
        .               Q: ?Sized + Eq,
        .           {
  266,158 ( 0.01%)      move |x| k.eq(x.borrow())
        .           }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
-- line 248 ----------------------------------------
-- line 251 ----------------------------------------
        .               use core::hash::Hasher;
        .               let mut state = hash_builder.build_hasher();
        .               val.hash(&mut state);
        .               state.finish()
        .           }
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        2 ( 0.00%)  pub(crate) fn make_hash<K, Q, S>(hash_builder: &S, val: &Q) -> u64
        .           where
        .               K: Borrow<Q>,
        .               Q: Hash + ?Sized,
        .               S: BuildHasher,
        .           {
      748 ( 0.00%)      hash_builder.hash_one(val)
        4 ( 0.00%)  }
        .           
        .           #[cfg(not(feature = "nightly"))]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
-- line 274 ----------------------------------------
-- line 280 ----------------------------------------
        .           
        .           #[cfg(feature = "nightly")]
        .           #[cfg_attr(feature = "inline-more", inline)]
        .           pub(crate) fn make_insert_hash<K, S>(hash_builder: &S, val: &K) -> u64
        .           where
        .               K: Hash,
        .               S: BuildHasher,
        .           {
    8,703 ( 0.00%)      hash_builder.hash_one(val)
        .           }
        .           
        .           #[cfg(feature = "ahash")]
        .           impl<K, V> HashMap<K, V, DefaultHashBuilder> {
        .               /// Creates an empty `HashMap`.
        .               ///
        .               /// The hash map is initially created with a capacity of 0, so it will not allocate until it
        .               /// is first inserted into.
-- line 296 ----------------------------------------
-- line 366 ----------------------------------------
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               ///
        .               /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html
        .               #[cfg_attr(feature = "inline-more", inline)]
       52 ( 0.00%)      pub const fn with_hasher(hash_builder: S) -> Self {
   92,684 ( 0.00%)          Self {
        .                       hash_builder,
       20 ( 0.00%)              table: RawTable::new(),
        .                   }
       20 ( 0.00%)      }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
        .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 387 ----------------------------------------
-- line 436 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               /// use hashbrown::hash_map::DefaultHashBuilder;
        .               ///
        .               /// let s = DefaultHashBuilder::default();
        .               /// let mut map = HashMap::with_hasher(s);
        .               /// map.insert(1, 2);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       24 ( 0.00%)      pub fn with_hasher_in(hash_builder: S, alloc: A) -> Self {
      436 ( 0.00%)          Self {
        .                       hash_builder,
        6 ( 0.00%)              table: RawTable::new_in(alloc),
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`
        .               /// to hash the keys. It will be allocated with the given allocator.
        .               ///
        .               /// The hash map will be able to hold at least `capacity` elements without
        .               /// reallocating. If `capacity` is 0, the hash map will not allocate.
        .               ///
        .               /// Warning: `hash_builder` is normally randomly generated, and
-- line 457 ----------------------------------------
-- line 527 ----------------------------------------
        .               /// map.insert("c", 3);
        .               ///
        .               /// for key in map.keys() {
        .               ///     println!("{}", key);
        .               /// }
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn keys(&self) -> Keys<'_, K, V> {
        6 ( 0.00%)          Keys { inner: self.iter() }
        .               }
        .           
        .               /// An iterator visiting all values in arbitrary order.
        .               /// The iterator element type is `&'a V`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 543 ----------------------------------------
-- line 662 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert_eq!(a.len(), 0);
        .               /// a.insert(1, "a");
        .               /// assert_eq!(a.len(), 1);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       20 ( 0.00%)      pub fn len(&self) -> usize {
    7,523 ( 0.00%)          self.table.len()
       20 ( 0.00%)      }
        .           
        .               /// Returns `true` if the map contains no elements.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// assert!(a.is_empty());
        .               /// a.insert(1, "a");
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       20 ( 0.00%)      pub fn is_empty(&self) -> bool {
   48,426 ( 0.00%)          self.len() == 0
       40 ( 0.00%)      }
        .           
        .               /// Clears the map, returning all key-value pairs as an iterator. Keeps the
        .               /// allocated memory for reuse.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
-- line 697 ----------------------------------------
-- line 790 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut a = HashMap::new();
        .               /// a.insert(1, "a");
        .               /// a.clear();
        .               /// assert!(a.is_empty());
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        6 ( 0.00%)      pub fn clear(&mut self) {
        .                   self.table.clear();
        6 ( 0.00%)      }
        .           
        .               /// Creates a consuming iterator visiting all the keys in arbitrary order.
        .               /// The map cannot be used after calling this.
        .               /// The iterator element type is `K`.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
-- line 808 ----------------------------------------
-- line 865 ----------------------------------------
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               /// let mut map: HashMap<&str, i32> = HashMap::new();
        .               /// map.reserve(10);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
       16 ( 0.00%)      pub fn reserve(&mut self, additional: usize) {
       15 ( 0.00%)          self.table
        8 ( 0.00%)              .reserve(additional, make_hasher::<K, _, V, S>(&self.hash_builder));
        8 ( 0.00%)      }
        .           
        .               /// Tries to reserve capacity for at least `additional` more elements to be inserted
        .               /// in the given `HashMap<K,V>`. The collection may reserve more space to avoid
        .               /// frequent reallocations.
        .               ///
        .               /// # Errors
        .               ///
        .               /// If the capacity overflows, or the allocator reports a failure, then an error
-- line 884 ----------------------------------------
-- line 963 ----------------------------------------
        .               /// }
        .               ///
        .               /// assert_eq!(letters[&'s'], 2);
        .               /// assert_eq!(letters[&'t'], 3);
        .               /// assert_eq!(letters[&'u'], 1);
        .               /// assert_eq!(letters.get(&'y'), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
    3,160 ( 0.00%)      pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &key);
        .                   if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {
      740 ( 0.00%)              Entry::Occupied(OccupiedEntry {
        .                           hash,
        .                           key: Some(key),
        .                           elem,
        .                           table: self,
        .                       })
        .                   } else {
    3,210 ( 0.00%)              Entry::Vacant(VacantEntry {
        .                           hash,
        .                           key,
        .                           table: self,
        .                       })
        .                   }
    3,950 ( 0.00%)      }
        .           
        .               /// Gets the given key's corresponding entry by reference in the map for in-place manipulation.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// use hashbrown::HashMap;
        .               ///
-- line 995 ----------------------------------------
-- line 1047 ----------------------------------------
        .               /// ```
        .               #[inline]
        .               pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  396,143 ( 0.01%)          match self.get_inner(k) {
        .                       Some(&(_, ref v)) => Some(v),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
-- line 1063 ----------------------------------------
-- line 1086 ----------------------------------------
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.get_inner(k) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               #[inline]
       20 ( 0.00%)      fn get_inner<Q: ?Sized>(&self, k: &Q) -> Option<&(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
  700,680 ( 0.02%)          if self.table.is_empty() {
        4 ( 0.00%)              None
        .                   } else {
        1 ( 0.00%)              let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
        .                       self.table.get(hash, equivalent_key(k))
        .                   }
       12 ( 0.00%)      }
        .           
        .               /// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.
        .               ///
        .               /// The supplied key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1113 ----------------------------------------
-- line 1155 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.contains_key(&1), true);
        .               /// assert_eq!(map.contains_key(&2), false);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
  286,069 ( 0.01%)      pub fn contains_key<Q: ?Sized>(&self, k: &Q) -> bool
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
       20 ( 0.00%)          self.get_inner(k).is_some()
  354,198 ( 0.01%)      }
        .           
        .               /// Returns a mutable reference to the value corresponding to the key.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
        .               /// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html
-- line 1177 ----------------------------------------
-- line 1185 ----------------------------------------
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// if let Some(x) = map.get_mut(&1) {
        .               ///     *x = "b";
        .               /// }
        .               /// assert_eq!(map[&1], "b");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      276 ( 0.00%)      pub fn get_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
    3,330 ( 0.00%)          match self.get_inner_mut(k) {
        .                       Some(&mut (_, ref mut v)) => Some(v),
        .                       None => None,
        .                   }
      552 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn get_inner_mut<Q: ?Sized>(&mut self, k: &Q) -> Option<&mut (K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
    1,114 ( 0.00%)          if self.table.is_empty() {
        .                       None
        .                   } else {
        .                       let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
    1,824 ( 0.00%)              self.table.get_mut(hash, equivalent_key(k))
        .                   }
        .               }
        .           
        .               /// Attempts to get mutable references to `N` values in the map at once.
        .               ///
        .               /// Returns an array of length `N` with the results of each query. For soundness, at most one
        .               /// mutable reference will be returned to any value. `None` will be returned if any of the
        .               /// keys are duplicates or missing.
-- line 1223 ----------------------------------------
-- line 1495 ----------------------------------------
        .               /// assert_eq!(map.insert(37, "a"), None);
        .               /// assert_eq!(map.is_empty(), false);
        .               ///
        .               /// map.insert(37, "b");
        .               /// assert_eq!(map.insert(37, "c"), Some("b"));
        .               /// assert_eq!(map[&37], "c");
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
3,071,607 ( 0.10%)      pub fn insert(&mut self, k: K, v: V) -> Option<V> {
        .                   let hash = make_insert_hash::<K, S>(&self.hash_builder, &k);
    2,553 ( 0.00%)          if let Some((_, item)) = self.table.get_mut(hash, equivalent_key(&k)) {
        .                       Some(mem::replace(item, v))
        .                   } else {
1,473,306 ( 0.05%)              self.table
1,815,465 ( 0.06%)                  .insert(hash, (k, v), make_hasher::<K, _, V, S>(&self.hash_builder));
  209,162 ( 0.01%)              None
        .                   }
2,777,966 ( 0.09%)      }
        .           
        .               /// Insert a key-value pair into the map without checking
        .               /// if the key already exists in the map.
        .               ///
        .               /// Returns a reference to the key and value just inserted.
        .               ///
        .               /// This operation is safe if a key does not exist in the map.
        .               ///
-- line 1520 ----------------------------------------
-- line 1592 ----------------------------------------
        .               /// use hashbrown::HashMap;
        .               ///
        .               /// let mut map = HashMap::new();
        .               /// map.insert(1, "a");
        .               /// assert_eq!(map.remove(&1), Some("a"));
        .               /// assert_eq!(map.remove(&1), None);
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
   22,762 ( 0.00%)      pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
  664,988 ( 0.02%)          match self.remove_entry(k) {
   18,906 ( 0.00%)              Some((_, v)) => Some(v),
   19,212 ( 0.00%)              None => None,
        .                   }
   52,772 ( 0.00%)      }
        .           
        .               /// Removes a key from the map, returning the stored key and value if the
        .               /// key was previously in the map.
        .               ///
        .               /// The key may be any borrowed form of the map's key type, but
        .               /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for
        .               /// the key type.
        .               ///
-- line 1618 ----------------------------------------
-- line 1631 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn remove_entry<Q: ?Sized>(&mut self, k: &Q) -> Option<(K, V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Hash + Eq,
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.hash_builder, k);
  187,943 ( 0.01%)          self.table.remove_entry(hash, equivalent_key(k))
        .               }
        .           }
        .           
        .           impl<K, V, S, A: Allocator + Clone> HashMap<K, V, S, A> {
        .               /// Creates a raw entry builder for the HashMap.
        .               ///
        .               /// Raw entries provide the lowest level of control for searching and
        .               /// manipulating a map. They must be manually initialized with a hash and
-- line 1647 ----------------------------------------
-- line 1737 ----------------------------------------
        .           
        .           impl<K, V, S, A> Default for HashMap<K, V, S, A>
        .           where
        .               S: Default,
        .               A: Default + Allocator + Clone,
        .           {
        .               /// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.
        .               #[cfg_attr(feature = "inline-more", inline)]
        9 ( 0.00%)      fn default() -> Self {
       33 ( 0.00%)          Self::with_hasher_in(Default::default(), Default::default())
        6 ( 0.00%)      }
        .           }
        .           
        .           impl<K, Q: ?Sized, V, S, A> Index<&Q> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash + Borrow<Q>,
        .               Q: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
-- line 1755 ----------------------------------------
-- line 2069 ----------------------------------------
        .           where
        .               F: FnMut(&K, &mut V) -> bool,
        .               A: Allocator + Clone,
        .           {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<Self::Item> {
      117 ( 0.00%)          self.inner.next(&mut self.f)
        .               }
        .           
        .               #[inline]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   (0, self.inner.iter.size_hint().1)
        .               }
        .           }
        .           
-- line 2085 ----------------------------------------
-- line 2095 ----------------------------------------
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub(super) fn next<F>(&mut self, f: &mut F) -> Option<(K, V)>
        .               where
        .                   F: FnMut(&K, &mut V) -> bool,
        .               {
        .                   unsafe {
        .                       for item in &mut self.iter {
        .                           let &mut (ref key, ref mut value) = item.as_mut();
      300 ( 0.00%)                  if f(key, value) {
       39 ( 0.00%)                      return Some(self.table.remove(item));
        .                           }
        .                       }
        .                   }
        .                   None
        .               }
        .           }
        .           
        .           /// A mutable iterator over the values of a `HashMap`.
-- line 2112 ----------------------------------------
-- line 2209 ----------------------------------------
        .               /// Creates a `RawEntryMut` from the given key and its hash.
        .               #[inline]
        .               #[allow(clippy::wrong_self_convention)]
        .               pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
2,567,760 ( 0.09%)          self.from_hash(hash, equivalent(k))
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilderMut<'a, K, V, S, A> {
        .               /// Creates a `RawEntryMut` from the given hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
6,101,199 ( 0.20%)      pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
        .                   self.search(hash, is_match)
6,766,095 ( 0.23%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>
        .               where
        .                   for<'b> F: FnMut(&'b K) -> bool,
        .               {
  733,316 ( 0.02%)          match self.map.table.find(hash, |(k, _)| is_match(k)) {
3,845,198 ( 0.13%)              Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {
        .                           elem,
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
  452,533 ( 0.02%)              None => RawEntryMut::Vacant(RawVacantEntryMut {
        .                           table: &mut self.map.table,
        .                           hash_builder: &self.map.hash_builder,
        .                       }),
        .                   }
        .               }
        .           }
        .           
        .           impl<'a, K, V, S, A: Allocator + Clone> RawEntryBuilder<'a, K, V, S, A> {
-- line 2251 ----------------------------------------
-- line 2260 ----------------------------------------
        .               {
        .                   let hash = make_hash::<K, Q, S>(&self.map.hash_builder, k);
        .                   self.from_key_hashed_nocheck(hash, k)
        .               }
        .           
        .               /// Access an entry by a key and its hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
  876,756 ( 0.03%)      pub fn from_key_hashed_nocheck<Q: ?Sized>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>
        .               where
        .                   K: Borrow<Q>,
        .                   Q: Eq,
        .               {
1,005,505 ( 0.03%)          self.from_hash(hash, equivalent(k))
1,552,910 ( 0.05%)      }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>
        .               where
        .                   F: FnMut(&K) -> bool,
        .               {
1,179,789 ( 0.04%)          match self.map.table.get(hash, |(k, _)| is_match(k)) {
        .                       Some(&(ref key, ref value)) => Some((key, value)),
        .                       None => None,
        .                   }
        .               }
        .           
        .               /// Access an entry by hash.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::wrong_self_convention)]
-- line 2289 ----------------------------------------
-- line 2624 ----------------------------------------
        .               /// and returns a mutable reference to it.
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               #[allow(clippy::shadow_unrelated)]
        .               pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
  734,813 ( 0.02%)          let &mut (ref mut k, ref mut v) = self.table.insert_entry(
        .                       hash,
        .                       (key, value),
        .                       make_hasher::<K, _, V, S>(self.hash_builder),
        .                   );
        .                   (k, v)
        .               }
        .           
        .               /// Set the value of an entry with a custom hasher function.
-- line 2640 ----------------------------------------
-- line 2974 ----------------------------------------
        .               /// map.insert("a", 1);
        .               /// map.insert("b", 2);
        .               /// map.insert("c", 3);
        .               ///
        .               /// // Not possible with .iter()
        .               /// let vec: Vec<(&str, i32)> = map.into_iter().collect();
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
      378 ( 0.00%)      fn into_iter(self) -> IntoIter<K, V, A> {
   11,412 ( 0.00%)          IntoIter {
    7,864 ( 0.00%)              inner: self.table.into_iter(),
        .                   }
    1,104 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Iter<'a, K, V> {
        .               type Item = (&'a K, &'a V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn next(&mut self) -> Option<(&'a K, &'a V)> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
   62,033 ( 0.00%)          match self.inner.next() {
        .                       Some(x) => unsafe {
        .                           let r = x.as_ref();
      710 ( 0.00%)                  Some((&r.0, &r.1))
        .                       },
        .                       None => None,
        .                   }
        .               }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
      144 ( 0.00%)          self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Iter<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
        .                   self.inner.len()
        .               }
        .           }
-- line 3013 ----------------------------------------
-- line 3050 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<K, V, A: Allocator + Clone> Iterator for IntoIter<K, V, A> {
        .               type Item = (K, V);
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
       20 ( 0.00%)      fn next(&mut self) -> Option<(K, V)> {
    3,631 ( 0.00%)          self.inner.next()
       10 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V, A: Allocator + Clone> ExactSizeIterator for IntoIter<K, V, A> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3068 ----------------------------------------
-- line 3076 ----------------------------------------
        .                   f.debug_list().entries(self.iter()).finish()
        .               }
        .           }
        .           
        .           impl<'a, K, V> Iterator for Keys<'a, K, V> {
        .               type Item = &'a K;
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
      174 ( 0.00%)      fn next(&mut self) -> Option<&'a K> {
        .                   // Avoid `Option::map` because it bloats LLVM IR.
        .                   match self.inner.next() {
        .                       Some((k, _)) => Some(k),
        .                       None => None,
        .                   }
      348 ( 0.00%)      }
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn size_hint(&self) -> (usize, Option<usize>) {
        .                   self.inner.size_hint()
        .               }
        .           }
        .           impl<K, V> ExactSizeIterator for Keys<'_, K, V> {
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               fn len(&self) -> usize {
-- line 3098 ----------------------------------------
-- line 3819 ----------------------------------------
        .               /// ```
        .               #[cfg_attr(feature = "inline-more", inline)]
        .               pub fn insert(self, value: V) -> &'a mut V
        .               where
        .                   K: Hash,
        .                   S: BuildHasher,
        .               {
        .                   let table = &mut self.table.table;
      219 ( 0.00%)          let entry = table.insert_entry(
        .                       self.hash,
        .                       (self.key, value),
        .                       make_hasher::<K, _, V, S>(&self.table.hash_builder),
        .                   );
        .                   &mut entry.1
        .               }
        .           
        .               #[cfg_attr(feature = "inline-more", inline)]
-- line 3835 ----------------------------------------
-- line 4557 ----------------------------------------
        .           /// keys with new values returned from the iterator.
        .           impl<K, V, S, A> Extend<(K, V)> for HashMap<K, V, S, A>
        .           where
        .               K: Eq + Hash,
        .               S: BuildHasher,
        .               A: Allocator + Clone,
        .           {
        .               #[cfg_attr(feature = "inline-more", inline)]
   33,670 ( 0.00%)      fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {
        .                   // Keys may be already present or show multiple times in the iterator.
        .                   // Reserve the entire hint lower bound if the map is empty.
        .                   // Otherwise reserve half the hint (rounded up), so the map
        .                   // will only resize twice in the worst case.
   25,513 ( 0.00%)          let iter = iter.into_iter();
    9,780 ( 0.00%)          let reserve = if self.is_empty() {
       16 ( 0.00%)              iter.size_hint().0
        .                   } else {
      521 ( 0.00%)              (iter.size_hint().0 + 1) / 2
        .                   };
       12 ( 0.00%)          self.reserve(reserve);
       28 ( 0.00%)          iter.for_each(move |(k, v)| {
  242,391 ( 0.01%)              self.insert(k, v);
        .                   });
   27,091 ( 0.00%)      }
        .           
        .               #[inline]
        .               #[cfg(feature = "nightly")]
        .               fn extend_one(&mut self, (k, v): (K, V)) {
        .                   self.insert(k, v);
        .               }
        .           
        .               #[inline]
-- line 4588 ----------------------------------------

2,428,783 ( 0.08%)  <counts for unidentified lines in /usr/home/liquid/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.12.0/src/map.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               /// let a = [1, 2, 3];
        .               /// assert_eq!(a.len(), 3);
        .               /// ```
        .               #[lang = "slice_len_fn"]
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_len", since = "1.39.0")]
        .               #[inline]
        .               // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
    1,896 ( 0.00%)      pub const fn len(&self) -> usize {
        .                   // FIXME: Replace with `crate::ptr::metadata(self)` when that is const-stable.
        .                   // As of this writing this causes a "Const-stable functions can only call other
        .                   // const-stable functions" error.
        .           
        .                   // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
        .                   // and PtrComponents<T> have the same memory layouts. Only std can make this
        .                   // guarantee.
    1,896 ( 0.00%)          unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    1,264 ( 0.00%)      }
        .           
        .               /// Returns `true` if the slice has a length of 0.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let a = [1, 2, 3];
        .               /// assert!(!a.is_empty());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_is_empty", since = "1.39.0")]
        .               #[inline]
        .               pub const fn is_empty(&self) -> bool {
  612,341 ( 0.02%)          self.len() == 0
        .               }
        .           
        .               /// Returns the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 157 ----------------------------------------
-- line 159 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.first());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn first(&self) -> Option<&T> {
    1,717 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the first element of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 175 ----------------------------------------
-- line 178 ----------------------------------------
        .               ///     *first = 5;
        .               /// }
        .               /// assert_eq!(x, &[5, 1, 2]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn first_mut(&mut self) -> Option<&mut T> {
      788 ( 0.00%)          if let [first, ..] = self { Some(first) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &[0, 1, 2];
-- line 194 ----------------------------------------
-- line 197 ----------------------------------------
        .               ///     assert_eq!(first, &0);
        .               ///     assert_eq!(elements, &[1, 2]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_first(&self) -> Option<(&T, &[T])> {
       17 ( 0.00%)          if let [first, tail @ ..] = self { Some((first, tail)) } else { None }
        .               }
        .           
        .               /// Returns the first and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 213 ----------------------------------------
-- line 237 ----------------------------------------
        .               ///     assert_eq!(last, &2);
        .               ///     assert_eq!(elements, &[0, 1]);
        .               /// }
        .               /// ```
        .               #[stable(feature = "slice_splits", since = "1.5.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn split_last(&self) -> Option<(&T, &[T])> {
   13,781 ( 0.00%)          if let [init @ .., last] = self { Some((last, init)) } else { None }
        .               }
        .           
        .               /// Returns the last and all the rest of the elements of the slice, or `None` if it is empty.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 253 ----------------------------------------
-- line 276 ----------------------------------------
        .               ///
        .               /// let w: &[i32] = &[];
        .               /// assert_eq!(None, w.last());
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_first_last_not_mut", since = "1.56.0")]
        .               #[inline]
        .               pub const fn last(&self) -> Option<&T> {
  137,143 ( 0.00%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a mutable pointer to the last item in the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [0, 1, 2];
-- line 292 ----------------------------------------
-- line 295 ----------------------------------------
        .               ///     *last = 10;
        .               /// }
        .               /// assert_eq!(x, &[0, 1, 10]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_slice_first_last", issue = "83570")]
        .               #[inline]
        .               pub const fn last_mut(&mut self) -> Option<&mut T> {
  390,409 ( 0.01%)          if let [.., last] = self { Some(last) } else { None }
        .               }
        .           
        .               /// Returns a reference to an element or subslice depending on the type of
        .               /// index.
        .               ///
        .               /// - If given a position, returns a reference to the element at that
        .               ///   position or `None` if out of bounds.
        .               /// - If given a range, returns the subslice corresponding to that range,
-- line 311 ----------------------------------------
-- line 317 ----------------------------------------
        .               /// let v = [10, 40, 30];
        .               /// assert_eq!(Some(&40), v.get(1));
        .               /// assert_eq!(Some(&[10, 40][..]), v.get(0..2));
        .               /// assert_eq!(None, v.get(3));
        .               /// assert_eq!(None, v.get(0..4));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    2,872 ( 0.00%)      pub fn get<I>(&self, index: I) -> Option<&I::Output>
        .               where
        .                   I: SliceIndex<Self>,
        .               {
      718 ( 0.00%)          index.get(self)
      718 ( 0.00%)      }
        .           
        .               /// Returns a mutable reference to an element or subslice depending on the
        .               /// type of index (see [`get`]) or `None` if the index is out of bounds.
        .               ///
        .               /// [`get`]: slice::get
        .               ///
        .               /// # Examples
        .               ///
-- line 338 ----------------------------------------
-- line 447 ----------------------------------------
        .               ///     }
        .               /// }
        .               /// ```
        .               ///
        .               /// [`as_mut_ptr`]: slice::as_mut_ptr
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_stable(feature = "const_slice_as_ptr", since = "1.32.0")]
        .               #[inline]
   17,592 ( 0.00%)      pub const fn as_ptr(&self) -> *const T {
  706,410 ( 0.02%)          self as *const [T] as *const T
    8,796 ( 0.00%)      }
        .           
        .               /// Returns an unsafe mutable pointer to the slice's buffer.
        .               ///
        .               /// The caller must ensure that the slice outlives the pointer this
        .               /// function returns, or else it will end up pointing to garbage.
        .               ///
        .               /// Modifying the container referenced by this slice may cause its buffer
        .               /// to be reallocated, which would also make any pointers to it invalid.
-- line 465 ----------------------------------------
-- line 475 ----------------------------------------
        .               ///         *x_ptr.add(i) += 2;
        .               ///     }
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
        .               #[inline]
       84 ( 0.00%)      pub const fn as_mut_ptr(&mut self) -> *mut T {
        6 ( 0.00%)          self as *mut [T] as *mut T
       42 ( 0.00%)      }
        .           
        .               /// Returns the two raw pointers spanning the slice.
        .               ///
        .               /// The returned range is half-open, which means that the end pointer
        .               /// points *one past* the last element of the slice. This way, an empty
        .               /// slice is represented by two equal pointers, and the difference between
        .               /// the two pointers represents the size of the slice.
        .               ///
-- line 493 ----------------------------------------
-- line 582 ----------------------------------------
        .               /// v.swap(2, 4);
        .               /// assert!(v == ["a", "b", "e", "d", "c"]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[rustc_const_unstable(feature = "const_swap", issue = "83163")]
        .               #[inline]
        .               #[track_caller]
        .               pub const fn swap(&mut self, a: usize, b: usize) {
   21,620 ( 0.00%)          let _ = &self[a];
   42,306 ( 0.00%)          let _ = &self[b];
        .           
        .                   // SAFETY: we just checked that both `a` and `b` are in bounds
        .                   unsafe { self.swap_unchecked(a, b) }
        .               }
        .           
        .               /// Swaps two elements in the slice, without doing bounds checking.
        .               ///
        .               /// For a safe alternative see [`swap`].
-- line 599 ----------------------------------------
-- line 677 ----------------------------------------
        .           
        .                       // Because this function is first compiled in isolation,
        .                       // this check tells LLVM that the indexing below is
        .                       // in-bounds.  Then after inlining -- once the actual
        .                       // lengths of the slices are known -- it's removed.
        .                       let (a, b) = (&mut a[..n], &mut b[..n]);
        .           
        .                       for i in 0..n {
    5,243 ( 0.00%)                  mem::swap(&mut a[i], &mut b[n - 1 - i]);
        .                       }
        .                   }
        .               }
        .           
        .               /// Returns an iterator over the slice.
        .               ///
        .               /// # Examples
        .               ///
-- line 693 ----------------------------------------
-- line 697 ----------------------------------------
        .               ///
        .               /// assert_eq!(iterator.next(), Some(&1));
        .               /// assert_eq!(iterator.next(), Some(&2));
        .               /// assert_eq!(iterator.next(), Some(&4));
        .               /// assert_eq!(iterator.next(), None);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
    6,882 ( 0.00%)      pub fn iter(&self) -> Iter<'_, T> {
    6,882 ( 0.00%)          Iter::new(self)
    4,588 ( 0.00%)      }
        .           
        .               /// Returns an iterator that allows modifying each value.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let x = &mut [1, 2, 4];
        .               /// for elem in x.iter_mut() {
        .               ///     *elem += 2;
        .               /// }
        .               /// assert_eq!(x, &[3, 4, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
       54 ( 0.00%)      pub fn iter_mut(&mut self) -> IterMut<'_, T> {
       54 ( 0.00%)          IterMut::new(self)
       36 ( 0.00%)      }
        .           
        .               /// Returns an iterator over all contiguous windows of length
        .               /// `size`. The windows overlap. If the slice is shorter than
        .               /// `size`, the iterator returns no values.
        .               ///
        .               /// # Panics
        .               ///
        .               /// Panics if `size` is 0.
-- line 732 ----------------------------------------
-- line 1499 ----------------------------------------
        .               ///     assert_eq!(left, [1, 2, 3, 4, 5, 6]);
        .               ///     assert_eq!(right, []);
        .               /// }
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {
      408 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_unchecked(mid) }
        .               }
        .           
        .               /// Divides one mutable slice into two at an index.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1515 ----------------------------------------
-- line 1530 ----------------------------------------
        .               /// left[1] = 2;
        .               /// right[1] = 4;
        .               /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               #[track_caller]
        .               pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
   22,968 ( 0.00%)          assert!(mid <= self.len());
        .                   // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which
        .                   // fulfills the requirements of `from_raw_parts_mut`.
        .                   unsafe { self.split_at_mut_unchecked(mid) }
        .               }
        .           
        .               /// Divides one slice into two at an index, without doing bounds checking.
        .               ///
        .               /// The first will contain all indices from `[0, mid)` (excluding
-- line 1546 ----------------------------------------
-- line 1628 ----------------------------------------
        .               pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {
        .                   let len = self.len();
        .                   let ptr = self.as_mut_ptr();
        .           
        .                   // SAFETY: Caller has to check that `0 <= mid <= self.len()`.
        .                   //
        .                   // `[ptr; mid]` and `[mid; len]` are not overlapping, so returning a mutable reference
        .                   // is fine.
    3,602 ( 0.00%)          unsafe { (from_raw_parts_mut(ptr, mid), from_raw_parts_mut(ptr.add(mid), len - mid)) }
        .               }
        .           
        .               /// Divides one slice into an array and a remainder slice at an index.
        .               ///
        .               /// The array will contain all indices from `[0, N)` (excluding
        .               /// the index `N` itself) and the slice will contain all
        .               /// indices from `[N, len)` (excluding the index `len` itself).
        .               ///
-- line 1644 ----------------------------------------
-- line 2113 ----------------------------------------
        .               /// assert!(!v.iter().any(|e| e == "hi"));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               #[inline]
        .               pub fn contains(&self, x: &T) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      462 ( 0.00%)          cmp::SliceContains::slice_contains(x, self)
        .               }
        .           
        .               /// Returns `true` if `needle` is a prefix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
-- line 2129 ----------------------------------------
-- line 2137 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v = &[10, 40, 30];
        .               /// assert!(v.starts_with(&[]));
        .               /// let v: &[u8] = &[];
        .               /// assert!(v.starts_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
    1,799 ( 0.00%)      pub fn starts_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      771 ( 0.00%)          let n = needle.len();
  405,327 ( 0.01%)          self.len() >= n && needle == &self[..n]
    1,285 ( 0.00%)      }
        .           
        .               /// Returns `true` if `needle` is a suffix of the slice.
        .               ///
        .               /// # Examples
        .               ///
        .               /// ```
        .               /// let v = [10, 40, 30];
        .               /// assert!(v.ends_with(&[30]));
-- line 2159 ----------------------------------------
-- line 2166 ----------------------------------------
        .               ///
        .               /// ```
        .               /// let v = &[10, 40, 30];
        .               /// assert!(v.ends_with(&[]));
        .               /// let v: &[u8] = &[];
        .               /// assert!(v.ends_with(&[]));
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
      462 ( 0.00%)      pub fn ends_with(&self, needle: &[T]) -> bool
        .               where
        .                   T: PartialEq,
        .               {
      594 ( 0.00%)          let (m, n) = (self.len(), needle.len());
  257,535 ( 0.01%)          m >= n && needle == &self[m - n..]
      330 ( 0.00%)      }
        .           
        .               /// Returns a subslice with the prefix removed.
        .               ///
        .               /// If the slice starts with `prefix`, returns the subslice after the prefix, wrapped in `Some`.
        .               /// If `prefix` is empty, simply returns the original slice.
        .               ///
        .               /// If the slice does not start with `prefix`, returns `None`.
        .               ///
-- line 2188 ----------------------------------------
-- line 2293 ----------------------------------------
        .               /// s.insert(idx, num);
        .               /// assert_eq!(s, [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);
        .               /// ```
        .               #[stable(feature = "rust1", since = "1.0.0")]
        .               pub fn binary_search(&self, x: &T) -> Result<usize, usize>
        .               where
        .                   T: Ord,
        .               {
        3 ( 0.00%)          self.binary_search_by(|p| p.cmp(x))
        .               }
        .           
        .               /// Binary searches this sorted slice with a comparator function.
        .               ///
        .               /// The comparator function should implement an order consistent
        .               /// with the sort order of the underlying slice, returning an
        .               /// order code that indicates whether its argument is `Less`,
        .               /// `Equal` or `Greater` the desired target.
-- line 2309 ----------------------------------------
-- line 2345 ----------------------------------------
        .               #[inline]
        .               pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>
        .               where
        .                   F: FnMut(&'a T) -> Ordering,
        .               {
        .                   let mut size = self.len();
        .                   let mut left = 0;
        .                   let mut right = size;
1,875,211 ( 0.06%)          while left < right {
2,960,802 ( 0.10%)              let mid = left + size / 2;
        .           
        .                       // SAFETY: the call is made safe by the following invariants:
        .                       // - `mid >= 0`
        .                       // - `mid < size`: `mid` is limited by `[left; right)` bound.
  425,790 ( 0.01%)              let cmp = f(unsafe { self.get_unchecked(mid) });
        .           
        .                       // The reason why we use if/else control flow rather than match
        .                       // is because match reorders comparison operations, which is perf sensitive.
        .                       // This is x86 asm for u8: https://rust.godbolt.org/z/8Y8Pra.
  793,847 ( 0.03%)              if cmp == Less {
1,421,740 ( 0.05%)                  left = mid + 1;
  433,029 ( 0.01%)              } else if cmp == Greater {
        .                           right = mid;
        .                       } else {
        .                           // SAFETY: same as the `get_unchecked` above
        .                           unsafe { crate::intrinsics::assume(mid < self.len()) };
        .                           return Ok(mid);
        .                       }
        .           
2,352,329 ( 0.08%)              size = right - left;
        .                   }
        .                   Err(left)
        .               }
        .           
        .               /// Binary searches this sorted slice with a key extraction function.
        .               ///
        .               /// Assumes that the slice is sorted by the key, for instance with
        .               /// [`sort_by_key`] using the same key extraction function.
-- line 2382 ----------------------------------------
-- line 3187 ----------------------------------------
        .               /// assert_eq!(slice, [4, 5, 3, 4, 5]);
        .               /// ```
        .               ///
        .               /// [`clone_from_slice`]: slice::clone_from_slice
        .               /// [`split_at_mut`]: slice::split_at_mut
        .               #[doc(alias = "memcpy")]
        .               #[stable(feature = "copy_from_slice", since = "1.9.0")]
        .               #[track_caller]
       30 ( 0.00%)      pub fn copy_from_slice(&mut self, src: &[T])
        .               where
        .                   T: Copy,
        .               {
        .                   // The panic code path was put into a cold function to not bloat the
        .                   // call site.
        .                   #[inline(never)]
        .                   #[cold]
        .                   #[track_caller]
        .                   fn len_mismatch_fail(dst_len: usize, src_len: usize) -> ! {
        .                       panic!(
        .                           "source slice length ({}) does not match destination slice length ({})",
        .                           src_len, dst_len,
        .                       );
        .                   }
        .           
  107,092 ( 0.00%)          if self.len() != src.len() {
        .                       len_mismatch_fail(self.len(), src.len());
        .                   }
        .           
        .                   // SAFETY: `self` is valid for `self.len()` elements by definition, and `src` was
        .                   // checked to have the same length. The slices cannot overlap because
        .                   // mutable references are exclusive.
        .                   unsafe {
       18 ( 0.00%)              ptr::copy_nonoverlapping(src.as_ptr(), self.as_mut_ptr(), self.len());
        .                   }
        6 ( 0.00%)      }
        .           
        .               /// Copies elements from one part of the slice to another part of itself,
        .               /// using a memmove.
        .               ///
        .               /// `src` is the range within `self` to copy from. `dest` is the starting
        .               /// index of the range within `self` to copy to, which will have the same
        .               /// length as `src`. The two ranges may overlap. The ends of the two ranges
        .               /// must be less than or equal to `self.len()`.
-- line 3229 ----------------------------------------
-- line 3380 ----------------------------------------
        .                       }
        .                       a << k
        .                   }
        .                   let gcd: usize = gcd(mem::size_of::<T>(), mem::size_of::<U>());
        .                   let ts: usize = mem::size_of::<U>() / gcd;
        .                   let us: usize = mem::size_of::<T>() / gcd;
        .           
        .                   // Armed with this knowledge, we can find how many `U`s we can fit!
       14 ( 0.00%)          let us_len = self.len() / ts * us;
        .                   // And how many `T`s will be in the trailing slice!
    8,756 ( 0.00%)          let ts_len = self.len() % ts;
        .                   (us_len, ts_len)
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
        .               /// This method splits the slice into three distinct slices: prefix, correctly aligned middle
        .               /// slice of a new type, and the suffix slice. The method may make the middle slice the greatest
-- line 3398 ----------------------------------------
-- line 3429 ----------------------------------------
        .                       return (self, &[], &[]);
        .                   }
        .           
        .                   // First, find at what point do we split between the first and 2nd slice. Easy with
        .                   // ptr.align_offset.
        .                   let ptr = self.as_ptr();
        .                   // SAFETY: See the `align_to_mut` method for the detailed safety comment.
        .                   let offset = unsafe { crate::ptr::align_offset(ptr, mem::align_of::<U>()) };
    8,756 ( 0.00%)          if offset > self.len() {
        .                       (self, &[], &[])
        .                   } else {
        .                       let (left, rest) = self.split_at(offset);
        .                       let (us_len, ts_len) = rest.align_to_offsets::<U>();
        .                       // SAFETY: now `rest` is definitely aligned, so `from_raw_parts` below is okay,
        .                       // since the caller guarantees that we can transmute `T` to `U` safely.
        .                       unsafe {
        .                           (
        .                               left,
        .                               from_raw_parts(rest.as_ptr() as *const U, us_len),
    8,770 ( 0.00%)                      from_raw_parts(rest.as_ptr().add(rest.len() - ts_len), ts_len),
        .                           )
        .                       }
        .                   }
        .               }
        .           
        .               /// Transmute the slice to a slice of another type, ensuring alignment of the types is
        .               /// maintained.
        .               ///
-- line 3456 ----------------------------------------
-- line 3731 ----------------------------------------
        .               /// let v = [1, 2, 3, 3, 5, 6, 7];
        .               /// let i = v.partition_point(|&x| x < 5);
        .               ///
        .               /// assert_eq!(i, 4);
        .               /// assert!(v[..i].iter().all(|&x| x < 5));
        .               /// assert!(v[i..].iter().all(|&x| !(x < 5)));
        .               /// ```
        .               #[stable(feature = "partition_point", since = "1.52.0")]
       11 ( 0.00%)      pub fn partition_point<P>(&self, mut pred: P) -> usize
        .               where
        .                   P: FnMut(&T) -> bool,
        .               {
        .                   self.binary_search_by(|x| if pred(x) { Less } else { Greater }).unwrap_or_else(|i| i)
       22 ( 0.00%)      }
        .           
        .               /// Removes the subslice corresponding to the given range
        .               /// and returns a reference to it.
        .               ///
        .               /// Returns `None` and does not modify the slice if the given
        .               /// range is out of bounds.
        .               ///
        .               /// Note that this method only accepts one-sided ranges such as
-- line 3752 ----------------------------------------

1,479,932 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/library/core/src/slice/mod.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs
--------------------------------------------------------------------------------
Ir                 

-- line 17 ----------------------------------------
        .                   #[inline]
        .                   pub fn $fn_name(
        .                       out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],
        .                       mut value: $int_ty,
        .                   ) -> &[u8] {
        .                       let mut i = 0;
        .           
        .                       loop {
  477,816 ( 0.02%)                  if value < 0x80 {
        .                               unsafe {
  196,309 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = value as u8;
        .                               }
        .           
  273,754 ( 0.01%)                      i += 1;
        .                               break;
        .                           } else {
        .                               unsafe {
  267,596 ( 0.01%)                          *out.get_unchecked_mut(i).as_mut_ptr() = ((value & 0x7f) | 0x80) as u8;
        .                               }
        .           
   96,222 ( 0.00%)                      value >>= 7;
        .                               i += 1;
        .                           }
        .                       }
        .           
        .                       unsafe { ::std::mem::MaybeUninit::slice_assume_init_ref(&out.get_unchecked(..i)) }
        .                   }
        .               };
        .           }
-- line 45 ----------------------------------------
-- line 53 ----------------------------------------
        .           macro_rules! impl_read_unsigned_leb128 {
        .               ($fn_name:ident, $int_ty:ty) => {
        .                   #[inline]
        .                   pub fn $fn_name(slice: &[u8], position: &mut usize) -> $int_ty {
        .                       // The first iteration of this loop is unpeeled. This is a
        .                       // performance win because this code is hot and integer values less
        .                       // than 128 are very common, typically occurring 50-80% or more of
        .                       // the time, even for u64 and u128.
8,263,600 ( 0.28%)              let byte = slice[*position];
4,131,800 ( 0.14%)              *position += 1;
4,131,800 ( 0.14%)              if (byte & 0x80) == 0 {
    3,968 ( 0.00%)                  return byte as $int_ty;
        .                       }
    3,246 ( 0.00%)              let mut result = (byte & 0x7F) as $int_ty;
        .                       let mut shift = 7;
        .                       loop {
2,761,215 ( 0.09%)                  let byte = slice[*position];
1,813,910 ( 0.06%)                  *position += 1;
1,840,810 ( 0.06%)                  if (byte & 0x80) == 0 {
1,456,656 ( 0.05%)                      result |= (byte as $int_ty) << shift;
        .                               return result;
        .                           } else {
        .                               result |= ((byte & 0x7F) as $int_ty) << shift;
        .                           }
        .                           shift += 7;
        .                       }
        .                   }
        .               };
-- line 80 ----------------------------------------

3,022,384 ( 0.10%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_serialize/src/leb128.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs
--------------------------------------------------------------------------------
Ir                 

-- line 22 ----------------------------------------
        .           
        .           /// An entity in the Rust type system, which can be one of
        .           /// several kinds (types, lifetimes, and consts).
        .           /// To reduce memory usage, a `GenericArg` is an interned pointer,
        .           /// with the lowest 2 bits being reserved for a tag to
        .           /// indicate the type (`Ty`, `Region`, or `Const`) it points to.
        .           #[derive(Copy, Clone, PartialEq, Eq, Hash)]
        .           pub struct GenericArg<'tcx> {
  547,407 ( 0.02%)      ptr: NonZeroUsize,
1,078,341 ( 0.04%)      marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>, &'tcx ty::Const<'tcx>)>,
        .           }
        .           
        .           const TAG_MASK: usize = 0b11;
        .           const TYPE_TAG: usize = 0b00;
        .           const REGION_TAG: usize = 0b01;
        .           const CONST_TAG: usize = 0b10;
        .           
  490,782 ( 0.02%)  #[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]
        .           pub enum GenericArgKind<'tcx> {
        .               Lifetime(ty::Region<'tcx>),
        .               Type(Ty<'tcx>),
        .               Const(&'tcx ty::Const<'tcx>),
        .           }
        .           
        .           impl<'tcx> GenericArgKind<'tcx> {
  126,189 ( 0.00%)      fn pack(self) -> GenericArg<'tcx> {
  126,189 ( 0.00%)          let (tag, ptr) = match self {
        .                       GenericArgKind::Lifetime(lt) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(lt) & TAG_MASK, 0);
        .                           (REGION_TAG, lt as *const _ as usize)
        .                       }
        .                       GenericArgKind::Type(ty) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ty) & TAG_MASK, 0);
-- line 56 ----------------------------------------
-- line 58 ----------------------------------------
        .                       }
        .                       GenericArgKind::Const(ct) => {
        .                           // Ensure we can use the tag bits.
        .                           assert_eq!(mem::align_of_val(ct) & TAG_MASK, 0);
        .                           (CONST_TAG, ct as *const _ as usize)
        .                       }
        .                   };
        .           
  192,979 ( 0.01%)          GenericArg { ptr: unsafe { NonZeroUsize::new_unchecked(ptr | tag) }, marker: PhantomData }
  126,189 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> fmt::Debug for GenericArg<'tcx> {
        .               fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        .                   match self.unpack() {
        .                       GenericArgKind::Lifetime(lt) => lt.fmt(f),
        .                       GenericArgKind::Type(ty) => ty.fmt(f),
        .                       GenericArgKind::Const(ct) => ct.fmt(f),
-- line 75 ----------------------------------------
-- line 85 ----------------------------------------
        .           
        .           impl<'tcx> PartialOrd for GenericArg<'tcx> {
        .               fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {
        .                   Some(self.cmp(&other))
        .               }
        .           }
        .           
        .           impl<'tcx> From<ty::Region<'tcx>> for GenericArg<'tcx> {
   48,582 ( 0.00%)      fn from(r: ty::Region<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Lifetime(r).pack()
   48,582 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> From<Ty<'tcx>> for GenericArg<'tcx> {
  601,219 ( 0.02%)      fn from(ty: Ty<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Type(ty).pack()
  601,219 ( 0.02%)      }
        .           }
        .           
        .           impl<'tcx> From<&'tcx ty::Const<'tcx>> for GenericArg<'tcx> {
        1 ( 0.00%)      fn from(c: &'tcx ty::Const<'tcx>) -> GenericArg<'tcx> {
        .                   GenericArgKind::Const(c).pack()
        1 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> GenericArg<'tcx> {
        .               #[inline]
        .               pub fn unpack(self) -> GenericArgKind<'tcx> {
        .                   let ptr = self.ptr.get();
        .                   unsafe {
5,853,779 ( 0.20%)              match ptr & TAG_MASK {
   47,833 ( 0.00%)                  REGION_TAG => GenericArgKind::Lifetime(&*((ptr & !TAG_MASK) as *const _)),
1,490,799 ( 0.05%)                  TYPE_TAG => GenericArgKind::Type(&*((ptr & !TAG_MASK) as *const _)),
      400 ( 0.00%)                  CONST_TAG => GenericArgKind::Const(&*((ptr & !TAG_MASK) as *const _)),
        .                           _ => intrinsics::unreachable(),
        .                       }
        .                   }
        .               }
        .           
        .               /// Unpack the `GenericArg` as a type when it is known certainly to be a type.
        .               /// This is true in cases where `Substs` is used in places where the kinds are known
        .               /// to be limited (e.g. in tuples, where the only parameters are type parameters).
        .               pub fn expect_ty(self) -> Ty<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Type(ty) => ty,
        .                       _ => bug!("expected a type, but found another kind"),
        .                   }
   40,418 ( 0.00%)      }
        .           
        .               /// Unpack the `GenericArg` as a const when it is known certainly to be a const.
        .               pub fn expect_const(self) -> &'tcx ty::Const<'tcx> {
        .                   match self.unpack() {
        .                       GenericArgKind::Const(c) => c,
        .                       _ => bug!("expected a const, but found another kind"),
        .                   }
        .               }
-- line 140 ----------------------------------------
-- line 170 ----------------------------------------
        .                       GenericArgKind::Type(ty) => ty.visit_with(visitor),
        .                       GenericArgKind::Const(ct) => ct.visit_with(visitor),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx, E: TyEncoder<'tcx>> Encodable<E> for GenericArg<'tcx> {
        .               fn encode(&self, e: &mut E) -> Result<(), E::Error> {
    7,668 ( 0.00%)          self.unpack().encode(e)
        .               }
        .           }
        .           
        .           impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for GenericArg<'tcx> {
  630,945 ( 0.02%)      fn decode(d: &mut D) -> GenericArg<'tcx> {
  630,945 ( 0.02%)          GenericArgKind::decode(d).pack()
        .               }
        .           }
        .           
        .           /// A substitution mapping generic parameters to new values.
        .           pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;
        .           
        .           pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;
        .           
        .           impl<'a, 'tcx> InternalSubsts<'tcx> {
        .               /// Interpret these substitutions as the substitutions of a closure type.
        .               /// Closure substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and closure kind;
        .               /// see `ty::ClosureSubsts` struct for more comments.
    2,577 ( 0.00%)      pub fn as_closure(&'a self) -> ClosureSubsts<'a> {
        .                   ClosureSubsts { substs: self }
    2,577 ( 0.00%)      }
        .           
        .               /// Interpret these substitutions as the substitutions of a generator type.
        .               /// Generator substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the signature and generator kind;
        .               /// see `ty::GeneratorSubsts` struct for more comments.
        .               pub fn as_generator(&'tcx self) -> GeneratorSubsts<'tcx> {
        .                   GeneratorSubsts { substs: self }
        .               }
-- line 208 ----------------------------------------
-- line 211 ----------------------------------------
        .               /// Inline const substitutions have a particular structure controlled by the
        .               /// compiler that encodes information like the inferred type;
        .               /// see `ty::InlineConstSubsts` struct for more comments.
        .               pub fn as_inline_const(&'tcx self) -> InlineConstSubsts<'tcx> {
        .                   InlineConstSubsts { substs: self }
        .               }
        .           
        .               /// Creates an `InternalSubsts` that maps each generic parameter to itself.
    6,910 ( 0.00%)      pub fn identity_for_item(tcx: TyCtxt<'tcx>, def_id: DefId) -> SubstsRef<'tcx> {
    3,416 ( 0.00%)          Self::for_item(tcx, def_id, |param, _| tcx.mk_param_from_def(param))
    6,219 ( 0.00%)      }
        .           
        .               /// Creates an `InternalSubsts` for generic parameter definitions,
        .               /// by calling closures to obtain each kind.
        .               /// The closures get to observe the `InternalSubsts` as they're
        .               /// being built, which can be used to correctly
        .               /// substitute defaults of generic parameters.
   90,291 ( 0.00%)      pub fn for_item<F>(tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   let defs = tcx.generics_of(def_id);
        .                   let count = defs.count();
        .                   let mut substs = SmallVec::with_capacity(count);
   32,581 ( 0.00%)          Self::fill_item(&mut substs, tcx, defs, &mut mk_kind);
   19,856 ( 0.00%)          tcx.intern_substs(&substs)
   90,846 ( 0.00%)      }
        .           
        .               pub fn extend_to<F>(&self, tcx: TyCtxt<'tcx>, def_id: DefId, mut mk_kind: F) -> SubstsRef<'tcx>
        .               where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   Self::for_item(tcx, def_id, |param, substs| {
        .                       self.get(param.index as usize).cloned().unwrap_or_else(|| mk_kind(param, substs))
        .                   })
        .               }
        .           
  120,455 ( 0.00%)      pub fn fill_item<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   tcx: TyCtxt<'tcx>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
   49,631 ( 0.00%)          if let Some(def_id) = defs.parent {
        .                       let parent_defs = tcx.generics_of(def_id);
    6,231 ( 0.00%)              Self::fill_item(substs, tcx, parent_defs, mk_kind);
        .                   }
        .                   Self::fill_single(substs, defs, mk_kind)
   95,960 ( 0.00%)      }
        .           
       48 ( 0.00%)      pub fn fill_single<F>(
        .                   substs: &mut SmallVec<[GenericArg<'tcx>; 8]>,
        .                   defs: &ty::Generics,
        .                   mk_kind: &mut F,
        .               ) where
        .                   F: FnMut(&ty::GenericParamDef, &[GenericArg<'tcx>]) -> GenericArg<'tcx>,
        .               {
        .                   substs.reserve(defs.params.len());
        .                   for param in &defs.params {
        .                       let kind = mk_kind(param, substs);
   88,438 ( 0.00%)              assert_eq!(param.index as usize, substs.len());
        .                       substs.push(kind);
        .                   }
       48 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {
        .                   self.iter()
        .                       .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })
        .               }
        .           
        .               #[inline]
-- line 284 ----------------------------------------
-- line 301 ----------------------------------------
        .               ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {
        .                   self.iter().filter_map(|k| match k.unpack() {
        .                       GenericArgKind::Lifetime(_) => None,
        .                       generic => Some(generic),
        .                   })
        .               }
        .           
        .               #[inline]
       33 ( 0.00%)      pub fn type_at(&self, i: usize) -> Ty<'tcx> {
  205,419 ( 0.01%)          if let GenericArgKind::Type(ty) = self[i].unpack() {
        .                       ty
        .                   } else {
        .                       bug!("expected type for param #{} in {:?}", i, self);
        .                   }
       22 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn region_at(&self, i: usize) -> ty::Region<'tcx> {
        .                   if let GenericArgKind::Lifetime(lt) = self[i].unpack() {
        .                       lt
        .                   } else {
        .                       bug!("expected region for param #{} in {:?}", i, self);
        .                   }
-- line 323 ----------------------------------------
-- line 350 ----------------------------------------
        .               /// impl<U> X<U> for U { fn f<V>() {} }
        .               /// ```
        .               ///
        .               /// * If `self` is `[Self, S, T]`: the identity substs of `f` in the trait.
        .               /// * If `source_ancestor` is the def_id of the trait.
        .               /// * If `target_substs` is `[U]`, the substs for the impl.
        .               /// * Then we will return `[U, T]`, the subst for `f` in the impl that
        .               ///   are needed for it to match the trait.
   15,729 ( 0.00%)      pub fn rebase_onto(
        .                   &self,
        .                   tcx: TyCtxt<'tcx>,
        .                   source_ancestor: DefId,
        .                   target_substs: SubstsRef<'tcx>,
        .               ) -> SubstsRef<'tcx> {
        .                   let defs = tcx.generics_of(source_ancestor);
    4,494 ( 0.00%)          tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))
   17,976 ( 0.00%)      }
        .           
      560 ( 0.00%)      pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {
        .                   tcx.mk_substs(self.iter().take(generics.count()))
    1,120 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {
   63,882 ( 0.00%)      fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(
        .                   self,
        .                   folder: &mut F,
        .               ) -> Result<Self, F::Error> {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // The match arms are in order of frequency. The 1, 2, and 0 cases are
        .                   // typically hit in 90--99.99% of cases. When folding doesn't change
        .                   // the substs, it's faster to reuse the existing substs rather than
        .                   // calling `intern_substs`.
1,922,702 ( 0.06%)          match self.len() {
        .                       1 => {
  328,213 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
1,008,791 ( 0.03%)                  if param0 == self[0] { Ok(self) } else { Ok(folder.tcx().intern_substs(&[param0])) }
        .                       }
        .                       2 => {
  224,804 ( 0.01%)                  let param0 = self[0].try_fold_with(folder)?;
  462,240 ( 0.02%)                  let param1 = self[1].try_fold_with(folder)?;
  429,177 ( 0.01%)                  if param0 == self[0] && param1 == self[1] {
        .                               Ok(self)
        .                           } else {
  329,969 ( 0.01%)                      Ok(folder.tcx().intern_substs(&[param0, param1]))
        .                           }
        .                       }
        .                       0 => Ok(self),
        .                       _ => {
        .                           let params: SmallVec<[_; 8]> =
   84,057 ( 0.00%)                      self.iter().map(|k| k.try_fold_with(folder)).collect::<Result<_, _>>()?;
    7,341 ( 0.00%)                  if params[..] == self[..] {
        .                               Ok(self)
        .                           } else {
   10,386 ( 0.00%)                      Ok(folder.tcx().intern_substs(&params))
        .                           }
        .                       }
        .                   }
   99,480 ( 0.00%)      }
        .           
        .               fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {
  225,592 ( 0.01%)          self.iter().try_for_each(|t| t.visit_with(visitor))
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // Public trait `Subst`
        .           //
        .           // Just call `foo.subst(tcx, substs)` to perform a substitution across
        .           // `foo`. Or use `foo.subst_spanned(tcx, substs, Some(span))` when
-- line 420 ----------------------------------------
-- line 435 ----------------------------------------
        .           
        .           impl<'tcx, T: TypeFoldable<'tcx>> Subst<'tcx> for T {
        .               fn subst_spanned(
        .                   self,
        .                   tcx: TyCtxt<'tcx>,
        .                   substs: &[GenericArg<'tcx>],
        .                   span: Option<Span>,
        .               ) -> T {
  699,749 ( 0.02%)          let mut folder = SubstFolder { tcx, substs, span, binders_passed: 0 };
        .                   self.fold_with(&mut folder)
        .               }
        .           }
        .           
        .           ///////////////////////////////////////////////////////////////////////////
        .           // The actual substitution engine itself is a type folder.
        .           
        .           struct SubstFolder<'a, 'tcx> {
-- line 451 ----------------------------------------
-- line 456 ----------------------------------------
        .               span: Option<Span>,
        .           
        .               /// Number of region binders we have passed through while doing the substitution
        .               binders_passed: u32,
        .           }
        .           
        .           impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {
        .               fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {
  117,921 ( 0.00%)          self.tcx
        .               }
        .           
        .               fn fold_binder<T: TypeFoldable<'tcx>>(
        .                   &mut self,
        .                   t: ty::Binder<'tcx, T>,
        .               ) -> ty::Binder<'tcx, T> {
  132,456 ( 0.00%)          self.binders_passed += 1;
   29,764 ( 0.00%)          let t = t.super_fold_with(self);
  132,456 ( 0.00%)          self.binders_passed -= 1;
        .                   t
        .               }
        .           
  106,416 ( 0.00%)      fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {
        .                   // Note: This routine only handles regions that are bound on
        .                   // type declarations and other outer declarations, not those
        .                   // bound in *fn types*. Region substitution of the bound
        .                   // regions that appear in a function signature is done using
        .                   // the specialized routine `ty::replace_late_regions()`.
   35,472 ( 0.00%)          match *r {
   17,816 ( 0.00%)              ty::ReEarlyBound(data) => {
   17,816 ( 0.00%)                  let rk = self.substs.get(data.index as usize).map(|k| k.unpack());
        .                           match rk {
    8,908 ( 0.00%)                      Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),
        .                               _ => {
        .                                   let span = self.span.unwrap_or(DUMMY_SP);
        .                                   let msg = format!(
        .                                       "Region parameter out of range \
        .                                        when substituting in region {} (index={})",
        .                                       data.name, data.index
        .                                   );
        .                                   span_bug!(span, "{}", msg);
        .                               }
        .                           }
        .                       }
        .                       _ => r,
        .                   }
  124,152 ( 0.00%)      }
        .           
  607,089 ( 0.02%)      fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {
  202,363 ( 0.01%)          if !t.needs_subst() {
        .                       return t;
        .                   }
        .           
  315,134 ( 0.01%)          match *t.kind() {
  504,140 ( 0.02%)              ty::Param(p) => self.ty_for_param(p, t),
  340,434 ( 0.01%)              _ => t.super_fold_with(self),
        .                   }
  728,120 ( 0.02%)      }
        .           
   28,609 ( 0.00%)      fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {
    8,179 ( 0.00%)          if let ty::ConstKind::Param(p) = c.val {
        .                       self.const_for_param(p, c)
        .                   } else {
   36,774 ( 0.00%)              c.super_fold_with(self)
        .                   }
        8 ( 0.00%)      }
        .           
        .               #[inline]
        .               fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {
        .                   c.super_fold_with(self)
        .               }
        .           }
        .           
        .           impl<'a, 'tcx> SubstFolder<'a, 'tcx> {
        .               fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   // Look up the type in the substitutions. It really should be in there.
  201,656 ( 0.01%)          let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ty = match opt_ty {
        .                       Some(GenericArgKind::Type(ty)) => ty,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected type for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting, substs={:?}",
-- line 539 ----------------------------------------
-- line 562 ----------------------------------------
        .               }
        .           
        .               fn const_for_param(
        .                   &self,
        .                   p: ParamConst,
        .                   source_ct: &'tcx ty::Const<'tcx>,
        .               ) -> &'tcx ty::Const<'tcx> {
        .                   // Look up the const in the substitutions. It really should be in there.
        2 ( 0.00%)          let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());
        .                   let ct = match opt_ct {
        .                       Some(GenericArgKind::Const(ct)) => ct,
        .                       Some(kind) => {
        .                           let span = self.span.unwrap_or(DUMMY_SP);
        .                           span_bug!(
        .                               span,
        .                               "expected const for `{:?}` ({:?}/{}) but found {:?} \
        .                                when substituting substs={:?}",
-- line 578 ----------------------------------------
-- line 645 ----------------------------------------
        .               fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {
        .                   debug!(
        .                       "shift_vars(val={:?}, binders_passed={:?}, has_escaping_bound_vars={:?})",
        .                       val,
        .                       self.binders_passed,
        .                       val.has_escaping_bound_vars()
        .                   );
        .           
  349,229 ( 0.01%)          if self.binders_passed == 0 || !val.has_escaping_bound_vars() {
        .                       return val;
        .                   }
        .           
        .                   let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);
        .                   debug!("shift_vars: shifted result = {:?}", result);
        .           
        .                   result
        .               }
        .           
        .               fn shift_region_through_binders(&self, region: ty::Region<'tcx>) -> ty::Region<'tcx> {
   21,958 ( 0.00%)          if self.binders_passed == 0 || !region.has_escaping_bound_vars() {
        .                       return region;
        .                   }
        .                   ty::fold::shift_region(self.tcx, region, self.binders_passed)
        .               }
        .           }
        .           
        .           /// Stores the user-given substs to reach some fully qualified path
        .           /// (e.g., `<T>::Item` or `<T as Trait>::Item`).
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
    2,718 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSubsts<'tcx> {
        .               /// The substitutions for the item as given by the user.
        .               pub substs: SubstsRef<'tcx>,
        .           
        .               /// The self type, in the case of a `<T>::Item` path (when applied
        .               /// to an inherent impl). See `UserSelfTy` below.
    1,096 ( 0.00%)      pub user_self_ty: Option<UserSelfTy<'tcx>>,
        .           }
        .           
        .           /// Specifies the user-given self type. In the case of a path that
        .           /// refers to a member in an inherent impl, this self type is
        .           /// sometimes needed to constrain the type parameters on the impl. For
        .           /// example, in this code:
        .           ///
        .           /// ```
-- line 689 ----------------------------------------
-- line 696 ----------------------------------------
        .           /// self type `Foo<u32>`. Then we can instantiate the parameters of
        .           /// the impl (with the substs from `UserSubsts`) and apply those to
        .           /// the self type, giving `Foo<?A>`. Finally, we unify that with
        .           /// the self type here, which contains `?A` to be `&'static u32`
        .           #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]
        .           #[derive(HashStable, TypeFoldable, Lift)]
        .           pub struct UserSelfTy<'tcx> {
        .               pub impl_def_id: DefId,
      471 ( 0.00%)      pub self_ty: Ty<'tcx>,
        .           }

2,715,773 ( 0.09%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/subst.rs>

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs
--------------------------------------------------------------------------------
Ir                 

-- line 118 ----------------------------------------
        .               stability: InternedSet<'tcx, attr::Stability>,
        .           
        .               /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes
        .               const_stability: InternedSet<'tcx, attr::ConstStability>,
        .           }
        .           
        .           impl<'tcx> CtxtInterners<'tcx> {
        .               fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {
       17 ( 0.00%)          CtxtInterners {
        .                       arena,
        .                       type_: Default::default(),
        .                       type_list: Default::default(),
        .                       substs: Default::default(),
        .                       region: Default::default(),
        .                       poly_existential_predicates: Default::default(),
        .                       canonical_var_infos: Default::default(),
        .                       predicate: Default::default(),
-- line 134 ----------------------------------------
-- line 143 ----------------------------------------
        .                       stability: Default::default(),
        .                       const_stability: Default::default(),
        .                   }
        .               }
        .           
        .               /// Interns a type.
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline(never)]
2,776,976 ( 0.09%)      fn intern_ty(&self, kind: TyKind<'tcx>) -> Ty<'tcx> {
        .                   self.type_
1,735,610 ( 0.06%)              .intern(kind, |kind| {
   93,440 ( 0.00%)                  let flags = super::flags::FlagComputation::for_kind(&kind);
        .           
        .                           let ty_struct = TyS {
  186,880 ( 0.01%)                      kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(ty_struct))
        .                       })
        .                       .0
3,124,098 ( 0.10%)      }
        .           
        .               #[inline(never)]
  658,896 ( 0.02%)      fn intern_predicate(
        .                   &self,
        .                   kind: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> &'tcx PredicateInner<'tcx> {
        .                   self.predicate
  576,534 ( 0.02%)              .intern(kind, |kind| {
  123,786 ( 0.00%)                  let flags = super::flags::FlagComputation::for_predicate(kind);
        .           
        .                           let predicate_struct = PredicateInner {
        .                               kind,
        .                               flags: flags.flags,
        .                               outer_exclusive_binder: flags.outer_exclusive_binder,
        .                           };
        .           
        .                           Interned(self.arena.alloc(predicate_struct))
        .                       })
        .                       .0
  741,258 ( 0.02%)      }
        .           }
        .           
        .           pub struct CommonTypes<'tcx> {
        .               pub unit: Ty<'tcx>,
        .               pub bool: Ty<'tcx>,
        .               pub char: Ty<'tcx>,
        .               pub isize: Ty<'tcx>,
        .               pub i8: Ty<'tcx>,
-- line 193 ----------------------------------------
-- line 237 ----------------------------------------
        .           /// safely used as a key in the maps of a TypeckResults. For that to be
        .           /// the case, the HirId must have the same `owner` as all the other IDs in
        .           /// this table (signified by `hir_owner`). Otherwise the HirId
        .           /// would be in a different frame of reference and using its `local_id`
        .           /// would result in lookup errors, or worse, in silently wrong data being
        .           /// stored/returned.
        .           #[inline]
        .           fn validate_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
   94,998 ( 0.00%)      if hir_id.owner != hir_owner {
        .                   invalid_hir_id_for_typeck_results(hir_owner, hir_id);
        .               }
        .           }
        .           
        .           #[cold]
        .           #[inline(never)]
        .           fn invalid_hir_id_for_typeck_results(hir_owner: LocalDefId, hir_id: hir::HirId) {
        .               ty::tls::with(|tcx| {
-- line 253 ----------------------------------------
-- line 261 ----------------------------------------
        .           }
        .           
        .           impl<'a, V> LocalTableInContext<'a, V> {
        .               pub fn contains_key(&self, id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.data.contains_key(&id.local_id)
        .               }
        .           
   70,616 ( 0.00%)      pub fn get(&self, id: hir::HirId) -> Option<&V> {
   14,030 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
   14,030 ( 0.00%)          self.data.get(&id.local_id)
   56,700 ( 0.00%)      }
        .           
        .               pub fn iter(&self) -> hash_map::Iter<'_, hir::ItemLocalId, V> {
        .                   self.data.iter()
        .               }
        .           }
        .           
        .           impl<'a, V> ::std::ops::Index<hir::HirId> for LocalTableInContext<'a, V> {
        .               type Output = V;
        .           
      684 ( 0.00%)      fn index(&self, key: hir::HirId) -> &V {
        .                   self.get(key).expect("LocalTableInContext: key not found")
      456 ( 0.00%)      }
        .           }
        .           
        .           pub struct LocalTableInContextMut<'a, V> {
        .               hir_owner: LocalDefId,
        .               data: &'a mut ItemLocalMap<V>,
        .           }
        .           
        .           impl<'a, V> LocalTableInContextMut<'a, V> {
-- line 292 ----------------------------------------
-- line 328 ----------------------------------------
        .           /// ```
        .           ///
        .           /// Here, we would store the type `T`, the span of the value `x`, the "scope-span" for
        .           /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.
        .           #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]
        .           #[derive(TypeFoldable)]
        .           pub struct GeneratorInteriorTypeCause<'tcx> {
        .               /// Type of the captured binding.
       61 ( 0.00%)      pub ty: Ty<'tcx>,
        .               /// Span of the binding that was captured.
       24 ( 0.00%)      pub span: Span,
        .               /// Span of the scope of the captured binding.
      120 ( 0.00%)      pub scope_span: Option<Span>,
        .               /// Span of `.await` or `yield` expression.
      120 ( 0.00%)      pub yield_span: Span,
        .               /// Expr which the type evaluated from.
      168 ( 0.00%)      pub expr: Option<hir::HirId>,
        .           }
        .           
        .           #[derive(TyEncodable, TyDecodable, Debug)]
        .           pub struct TypeckResults<'tcx> {
        .               /// The `HirId::owner` all `ItemLocalId`s in this table are relative to.
        .               pub hir_owner: LocalDefId,
        .           
        .               /// Resolved definitions for `<T>::X` associated paths and
-- line 352 ----------------------------------------
-- line 507 ----------------------------------------
        .               pub treat_byte_string_as_slice: ItemLocalSet,
        .           
        .               /// Contains the data for evaluating the effect of feature `capture_disjoint_fields`
        .               /// on closure size.
        .               pub closure_size_eval: FxHashMap<DefId, ClosureSizeProfileData<'tcx>>,
        .           }
        .           
        .           impl<'tcx> TypeckResults<'tcx> {
    1,722 ( 0.00%)      pub fn new(hir_owner: LocalDefId) -> TypeckResults<'tcx> {
   20,377 ( 0.00%)          TypeckResults {
        .                       hir_owner,
        .                       type_dependent_defs: Default::default(),
        .                       field_indices: Default::default(),
        .                       user_provided_types: Default::default(),
        .                       user_provided_sigs: Default::default(),
        .                       node_types: Default::default(),
        .                       node_substs: Default::default(),
        .                       adjustments: Default::default(),
-- line 524 ----------------------------------------
-- line 532 ----------------------------------------
        .                       tainted_by_errors: None,
        .                       concrete_opaque_types: Default::default(),
        .                       closure_min_captures: Default::default(),
        .                       closure_fake_reads: Default::default(),
        .                       generator_interior_types: ty::Binder::dummy(Default::default()),
        .                       treat_byte_string_as_slice: Default::default(),
        .                       closure_size_eval: Default::default(),
        .                   }
    1,722 ( 0.00%)      }
        .           
        .               /// Returns the final resolution of a `QPath` in an `Expr` or `Pat` node.
   21,321 ( 0.00%)      pub fn qpath_res(&self, qpath: &hir::QPath<'_>, id: hir::HirId) -> Res {
   14,214 ( 0.00%)          match *qpath {
   32,280 ( 0.00%)              hir::QPath::Resolved(_, ref path) => path.res,
        .                       hir::QPath::TypeRelative(..) | hir::QPath::LangItem(..) => self
        .                           .type_dependent_def(id)
   10,362 ( 0.00%)                  .map_or(Res::Err, |(kind, def_id)| Res::Def(kind, def_id)),
        .                   }
   35,535 ( 0.00%)      }
        .           
      174 ( 0.00%)      pub fn type_dependent_defs(
        .                   &self,
        .               ) -> LocalTableInContext<'_, Result<(DefKind, DefId), ErrorReported>> {
      869 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.type_dependent_defs }
      174 ( 0.00%)      }
        .           
    2,044 ( 0.00%)      pub fn type_dependent_def(&self, id: HirId) -> Option<(DefKind, DefId)> {
    4,469 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.type_dependent_defs.get(&id.local_id).cloned().and_then(|r| r.ok())
    4,088 ( 0.00%)      }
        .           
    2,792 ( 0.00%)      pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {
        .                   self.type_dependent_def(id).map(|(_, def_id)| def_id)
    2,792 ( 0.00%)      }
        .           
    5,677 ( 0.00%)      pub fn type_dependent_defs_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Result<(DefKind, DefId), ErrorReported>> {
    5,677 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }
    5,677 ( 0.00%)      }
        .           
        .               pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {
      930 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }
      228 ( 0.00%)      }
        .           
        .               pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {
    1,128 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }
      564 ( 0.00%)      }
        .           
        .               pub fn user_provided_types(&self) -> LocalTableInContext<'_, CanonicalUserType<'tcx>> {
    2,756 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.user_provided_types }
    1,378 ( 0.00%)      }
        .           
        .               pub fn user_provided_types_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, CanonicalUserType<'tcx>> {
      676 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.user_provided_types }
      338 ( 0.00%)      }
        .           
        .               pub fn node_types(&self) -> LocalTableInContext<'_, Ty<'tcx>> {
   12,030 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.node_types }
    6,015 ( 0.00%)      }
        .           
        .               pub fn node_types_mut(&mut self) -> LocalTableInContextMut<'_, Ty<'tcx>> {
   20,704 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_types }
   10,352 ( 0.00%)      }
        .           
   98,334 ( 0.00%)      pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {
   16,389 ( 0.00%)          self.node_type_opt(id).unwrap_or_else(|| {
        .                       bug!("node_type: no type for node `{}`", tls::with(|tcx| tcx.hir().node_to_string(id)))
        .                   })
   81,945 ( 0.00%)      }
        .           
   23,388 ( 0.00%)      pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {
   23,388 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_types.get(&id.local_id).cloned()
   46,776 ( 0.00%)      }
        .           
        .               pub fn node_substs_mut(&mut self) -> LocalTableInContextMut<'_, SubstsRef<'tcx>> {
    2,848 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.node_substs }
    1,424 ( 0.00%)      }
        .           
    7,054 ( 0.00%)      pub fn node_substs(&self, id: hir::HirId) -> SubstsRef<'tcx> {
    7,054 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned().unwrap_or_else(|| InternalSubsts::empty())
   14,108 ( 0.00%)      }
        .           
    4,463 ( 0.00%)      pub fn node_substs_opt(&self, id: hir::HirId) -> Option<SubstsRef<'tcx>> {
    4,463 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, id);
        .                   self.node_substs.get(&id.local_id).cloned()
    8,926 ( 0.00%)      }
        .           
        .               // Returns the type of a pattern as a monotype. Like @expr_ty, this function
        .               // doesn't provide type parameter substitutions.
        .               pub fn pat_ty(&self, pat: &hir::Pat<'_>) -> Ty<'tcx> {
    2,280 ( 0.00%)          self.node_type(pat.hir_id)
        .               }
        .           
        .               // Returns the type of an expression as a monotype.
        .               //
        .               // NB (1): This is the PRE-ADJUSTMENT TYPE for the expression.  That is, in
        .               // some cases, we insert `Adjustment` annotations such as auto-deref or
        .               // auto-ref.  The type returned by this function does not consider such
        .               // adjustments.  See `expr_ty_adjusted()` instead.
        .               //
        .               // NB (2): This type doesn't provide type parameter substitutions; e.g., if you
        .               // ask for the type of "id" in "id(3)", it will return "fn(&isize) -> isize"
        .               // instead of "fn(ty) -> T with T = isize".
        .               pub fn expr_ty(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
   18,730 ( 0.00%)          self.node_type(expr.hir_id)
        .               }
        .           
        .               pub fn expr_ty_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
   26,104 ( 0.00%)          self.node_type_opt(expr.hir_id)
        .               }
        .           
        .               pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
    8,812 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.adjustments }
    4,406 ( 0.00%)      }
        .           
        .               pub fn adjustments_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {
   12,548 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.adjustments }
    6,274 ( 0.00%)      }
        .           
    9,679 ( 0.00%)      pub fn expr_adjustments(&self, expr: &hir::Expr<'_>) -> &[ty::adjustment::Adjustment<'tcx>] {
   19,358 ( 0.00%)          validate_hir_id_for_typeck_results(self.hir_owner, expr.hir_id);
        .                   self.adjustments.get(&expr.hir_id.local_id).map_or(&[], |a| &a[..])
   19,358 ( 0.00%)      }
        .           
        .               /// Returns the type of `expr`, considering any `Adjustment`
        .               /// entry recorded for that expression.
      875 ( 0.00%)      pub fn expr_ty_adjusted(&self, expr: &hir::Expr<'_>) -> Ty<'tcx> {
      175 ( 0.00%)          self.expr_adjustments(expr).last().map_or_else(|| self.expr_ty(expr), |adj| adj.target)
      308 ( 0.00%)      }
        .           
    1,490 ( 0.00%)      pub fn expr_ty_adjusted_opt(&self, expr: &hir::Expr<'_>) -> Option<Ty<'tcx>> {
      298 ( 0.00%)          self.expr_adjustments(expr).last().map(|adj| adj.target).or_else(|| self.expr_ty_opt(expr))
      232 ( 0.00%)      }
        .           
      695 ( 0.00%)      pub fn is_method_call(&self, expr: &hir::Expr<'_>) -> bool {
        .                   // Only paths and method calls/overloaded operators have
        .                   // entries in type_dependent_defs, ignore the former here.
    1,390 ( 0.00%)          if let hir::ExprKind::Path(_) = expr.kind {
        .                       return false;
        .                   }
        .           
    1,630 ( 0.00%)          matches!(self.type_dependent_defs().get(expr.hir_id), Some(Ok((DefKind::AssocFn, _))))
    1,390 ( 0.00%)      }
        .           
    4,686 ( 0.00%)      pub fn extract_binding_mode(&self, s: &Session, id: HirId, sp: Span) -> Option<BindingMode> {
        .                   self.pat_binding_modes().get(id).copied().or_else(|| {
        .                       s.delay_span_bug(sp, "missing binding mode");
        .                       None
        .                   })
    6,248 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes(&self) -> LocalTableInContext<'_, BindingMode> {
    4,142 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_binding_modes }
    1,290 ( 0.00%)      }
        .           
        .               pub fn pat_binding_modes_mut(&mut self) -> LocalTableInContextMut<'_, BindingMode> {
    1,892 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_binding_modes }
      946 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
    5,964 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.pat_adjustments }
    2,982 ( 0.00%)      }
        .           
        .               pub fn pat_adjustments_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
    1,566 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.pat_adjustments }
      783 ( 0.00%)      }
        .           
        .               /// For a given closure, returns the iterator of `ty::CapturedPlace`s that are captured
        .               /// by the closure.
    1,248 ( 0.00%)      pub fn closure_min_captures_flattened(
        .                   &self,
        .                   closure_def_id: DefId,
        .               ) -> impl Iterator<Item = &ty::CapturedPlace<'tcx>> {
        .                   self.closure_min_captures
        .                       .get(&closure_def_id)
        .                       .map(|closure_min_captures| closure_min_captures.values().flat_map(|v| v.iter()))
        .                       .into_iter()
        .                       .flatten()
    1,560 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins(&self) -> LocalTableInContext<'_, (Span, HirPlace<'tcx>)> {
      150 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.closure_kind_origins }
       75 ( 0.00%)      }
        .           
        .               pub fn closure_kind_origins_mut(
        .                   &mut self,
        .               ) -> LocalTableInContextMut<'_, (Span, HirPlace<'tcx>)> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.closure_kind_origins }
        .               }
        .           
        .               pub fn liberated_fn_sigs(&self) -> LocalTableInContext<'_, ty::FnSig<'tcx>> {
      606 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.liberated_fn_sigs }
      303 ( 0.00%)      }
        .           
        .               pub fn liberated_fn_sigs_mut(&mut self) -> LocalTableInContextMut<'_, ty::FnSig<'tcx>> {
      456 ( 0.00%)          LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.liberated_fn_sigs }
      228 ( 0.00%)      }
        .           
        .               pub fn fru_field_types(&self) -> LocalTableInContext<'_, Vec<Ty<'tcx>>> {
      150 ( 0.00%)          LocalTableInContext { hir_owner: self.hir_owner, data: &self.fru_field_types }
       75 ( 0.00%)      }
        .           
        .               pub fn fru_field_types_mut(&mut self) -> LocalTableInContextMut<'_, Vec<Ty<'tcx>>> {
        .                   LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.fru_field_types }
        .               }
        .           
        .               pub fn is_coercion_cast(&self, hir_id: hir::HirId) -> bool {
        .                   validate_hir_id_for_typeck_results(self.hir_owner, hir_id);
        .                   self.coercion_casts.contains(&hir_id.local_id)
        .               }
        .           
        .               pub fn set_coercion_cast(&mut self, id: ItemLocalId) {
        .                   self.coercion_casts.insert(id);
        .               }
        .           
        .               pub fn coercion_casts(&self) -> &ItemLocalSet {
       75 ( 0.00%)          &self.coercion_casts
       75 ( 0.00%)      }
        .           }
        .           
        .           impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckResults<'tcx> {
        .               fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {
        .                   let ty::TypeckResults {
        .                       hir_owner,
        .                       ref type_dependent_defs,
        .                       ref field_indices,
-- line 764 ----------------------------------------
-- line 819 ----------------------------------------
        .                   const START_INDEX = 0,
        .               }
        .           }
        .           
        .           /// Mapping of type annotation indices to canonical user type annotations.
        .           pub type CanonicalUserTypeAnnotations<'tcx> =
        .               IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;
        .           
      106 ( 0.00%)  #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]
        .           pub struct CanonicalUserTypeAnnotation<'tcx> {
        .               pub user_ty: CanonicalUserType<'tcx>,
        .               pub span: Span,
      172 ( 0.00%)      pub inferred_ty: Ty<'tcx>,
        .           }
        .           
        .           /// Canonicalized user type annotation.
        .           pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;
        .           
        .           impl<'tcx> CanonicalUserType<'tcx> {
        .               /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,
        .               /// i.e., each thing is mapped to a canonical variable with the same index.
      522 ( 0.00%)      pub fn is_identity(&self) -> bool {
    1,044 ( 0.00%)          match self.value {
        .                       UserType::Ty(_) => false,
        .                       UserType::TypeOf(_, user_substs) => {
      522 ( 0.00%)                  if user_substs.user_self_ty.is_some() {
        .                               return false;
        .                           }
        .           
        .                           iter::zip(user_substs.substs, BoundVar::new(0)..).all(|(kind, cvar)| {
        .                               match kind.unpack() {
    1,174 ( 0.00%)                          GenericArgKind::Type(ty) => match ty.kind() {
        .                                       ty::Bound(debruijn, b) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
      578 ( 0.00%)                                  assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == b.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
        2 ( 0.00%)                          GenericArgKind::Lifetime(r) => match r {
        .                                       ty::ReLateBound(debruijn, br) => {
        .                                           // We only allow a `ty::INNERMOST` index in substitutions.
        .                                           assert_eq!(*debruijn, ty::INNERMOST);
        .                                           cvar == br.var
        .                                       }
        .                                       _ => false,
        .                                   },
        .           
-- line 867 ----------------------------------------
-- line 872 ----------------------------------------
        .                                           cvar == b
        .                                       }
        .                                       _ => false,
        .                                   },
        .                               }
        .                           })
        .                       }
        .                   }
    1,044 ( 0.00%)      }
        .           }
        .           
        .           /// A user-given type annotation attached to a constant. These arise
        .           /// from constants that are named via paths, like `Foo::<A>::new` and
        .           /// so forth.
    1,032 ( 0.00%)  #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]
    6,482 ( 0.00%)  #[derive(HashStable, TypeFoldable, Lift)]
        .           pub enum UserType<'tcx> {
        .               Ty(Ty<'tcx>),
        .           
        .               /// The canonical type is the result of `type_of(def_id)` with the
        .               /// given substitutions applied.
        .               TypeOf(DefId, UserSubsts<'tcx>),
        .           }
        .           
        .           impl<'tcx> CommonTypes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {
      111 ( 0.00%)          let mk = |ty| interners.intern_ty(ty);
        .           
        .                   CommonTypes {
        .                       unit: mk(Tuple(List::empty())),
        .                       bool: mk(Bool),
        .                       char: mk(Char),
        .                       never: mk(Never),
        .                       isize: mk(Int(ty::IntTy::Isize)),
        .                       i8: mk(Int(ty::IntTy::I8)),
-- line 906 ----------------------------------------
-- line 921 ----------------------------------------
        .           
        .                       trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonLifetimes<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {
       67 ( 0.00%)          let mk = |r| interners.region.intern(r, |r| Interned(interners.arena.alloc(r))).0;
        .           
        .                   CommonLifetimes {
        5 ( 0.00%)              re_root_empty: mk(RegionKind::ReEmpty(ty::UniverseIndex::ROOT)),
        5 ( 0.00%)              re_static: mk(RegionKind::ReStatic),
        5 ( 0.00%)              re_erased: mk(RegionKind::ReErased),
        .                   }
        .               }
        .           }
        .           
        .           impl<'tcx> CommonConsts<'tcx> {
        .               fn new(interners: &CtxtInterners<'tcx>, types: &CommonTypes<'tcx>) -> CommonConsts<'tcx> {
        6 ( 0.00%)          let mk_const = |c| interners.const_.intern(c, |c| Interned(interners.arena.alloc(c))).0;
        .           
        .                   CommonConsts {
        .                       unit: mk_const(ty::Const {
        .                           val: ty::ConstKind::Value(ConstValue::Scalar(Scalar::ZST)),
        .                           ty: types.unit,
        .                       }),
        .                   }
        .               }
-- line 949 ----------------------------------------
-- line 1045 ----------------------------------------
        .           
        .               /// Stores memory for globals (statics/consts).
        .               pub(crate) alloc_map: Lock<interpret::AllocMap<'tcx>>,
        .           
        .               output_filenames: Arc<OutputFilenames>,
        .           }
        .           
        .           impl<'tcx> TyCtxt<'tcx> {
    4,800 ( 0.00%)      pub fn typeck_opt_const_arg(
        .                   self,
        .                   def: ty::WithOptConstParam<LocalDefId>,
        .               ) -> &'tcx TypeckResults<'tcx> {
    1,920 ( 0.00%)          if let Some(param_did) = def.const_param_did {
        .                       self.typeck_const_arg((def.did, param_did))
        .                   } else {
        .                       self.typeck(def.did)
        .                   }
    3,840 ( 0.00%)      }
        .           
      348 ( 0.00%)      pub fn alloc_steal_thir(self, thir: Thir<'tcx>) -> &'tcx Steal<Thir<'tcx>> {
      116 ( 0.00%)          self.arena.alloc(Steal::new(thir))
      464 ( 0.00%)      }
        .           
    2,320 ( 0.00%)      pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {
      464 ( 0.00%)          self.arena.alloc(Steal::new(mir))
    3,248 ( 0.00%)      }
        .           
      464 ( 0.00%)      pub fn alloc_steal_promoted(
        .                   self,
        .                   promoted: IndexVec<Promoted, Body<'tcx>>,
        .               ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {
      116 ( 0.00%)          self.arena.alloc(Steal::new(promoted))
      580 ( 0.00%)      }
        .           
    3,510 ( 0.00%)      pub fn alloc_adt_def(
        .                   self,
        .                   did: DefId,
        .                   kind: AdtKind,
        .                   variants: IndexVec<VariantIdx, ty::VariantDef>,
        .                   repr: ReprOptions,
        .               ) -> &'tcx ty::AdtDef {
    6,240 ( 0.00%)          self.intern_adt_def(ty::AdtDef::new(self, did, kind, variants, repr))
    1,560 ( 0.00%)      }
        .           
        .               /// Allocates a read-only byte or string literal for `mir::interpret`.
        .               pub fn allocate_bytes(self, bytes: &[u8]) -> interpret::AllocId {
        .                   // Create an allocation that just contains these bytes.
        .                   let alloc = interpret::Allocation::from_bytes_byte_aligned_immutable(bytes);
        .                   let alloc = self.intern_const_alloc(alloc);
        .                   self.create_memory_alloc(alloc)
        .               }
        .           
        .               /// Returns a range of the start/end indices specified with the
        .               /// `rustc_layout_scalar_valid_range` attribute.
        .               // FIXME(eddyb) this is an awkward spot for this method, maybe move it?
    8,656 ( 0.00%)      pub fn layout_scalar_valid_range(self, def_id: DefId) -> (Bound<u128>, Bound<u128>) {
    4,328 ( 0.00%)          let attrs = self.get_attrs(def_id);
   18,394 ( 0.00%)          let get = |name| {
    4,328 ( 0.00%)              let attr = match attrs.iter().find(|a| a.has_name(name)) {
        .                           Some(attr) => attr,
        .                           None => return Bound::Unbounded,
        .                       };
        .                       debug!("layout_scalar_valid_range: attr={:?}", attr);
      688 ( 0.00%)              if let Some(
        .                           &[
        .                               ast::NestedMetaItem::Literal(ast::Lit {
      344 ( 0.00%)                          kind: ast::LitKind::Int(a, _), ..
        .                               }),
        .                           ],
      172 ( 0.00%)              ) = attr.meta_item_list().as_deref()
        .                       {
        .                           Bound::Included(a)
        .                       } else {
        .                           self.sess
        .                               .delay_span_bug(attr.span, "invalid rustc_layout_scalar_valid_range attribute");
        .                           Bound::Unbounded
        .                       }
   21,640 ( 0.00%)          };
    6,492 ( 0.00%)          (
    6,492 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_start),
    3,246 ( 0.00%)              get(sym::rustc_layout_scalar_valid_range_end),
        .                   )
    8,656 ( 0.00%)      }
        .           
        .               pub fn lift<T: Lift<'tcx>>(self, value: T) -> Option<T::Lifted> {
        .                   value.lift_to_tcx(self)
        .               }
        .           
        .               /// Creates a type context and call the closure with a `TyCtxt` reference
        .               /// to the context. The closure enforces that the type context and any interned
        .               /// value (types, substs, etc.) can only be used while `ty::tls` has a valid
        .               /// reference to the context, to allow formatting values that need it.
       23 ( 0.00%)      pub fn create_global_ctxt(
        .                   s: &'tcx Session,
        .                   lint_store: Lrc<dyn Any + sync::Send + sync::Sync>,
        .                   arena: &'tcx WorkerLocal<Arena<'tcx>>,
        .                   resolutions: ty::ResolverOutputs,
        .                   krate: &'tcx hir::Crate<'tcx>,
        .                   dep_graph: DepGraph,
        .                   on_disk_cache: Option<&'tcx dyn OnDiskCache<'tcx>>,
        .                   queries: &'tcx dyn query::QueryEngine<'tcx>,
        .                   query_kinds: &'tcx [DepKindStruct],
        .                   crate_name: &str,
        .                   output_filenames: OutputFilenames,
        .               ) -> GlobalCtxt<'tcx> {
        1 ( 0.00%)          let data_layout = TargetDataLayout::parse(&s.target).unwrap_or_else(|err| {
        .                       s.fatal(&err);
        .                   });
        .                   let interners = CtxtInterners::new(arena);
        .                   let common_types = CommonTypes::new(&interners);
        .                   let common_lifetimes = CommonLifetimes::new(&interners);
        .                   let common_consts = CommonConsts::new(&interners, &common_types);
        .           
      127 ( 0.00%)          GlobalCtxt {
        .                       sess: s,
        6 ( 0.00%)              lint_store,
        .                       arena,
        2 ( 0.00%)              interners,
        5 ( 0.00%)              dep_graph,
        4 ( 0.00%)              untracked_resolutions: resolutions,
        2 ( 0.00%)              prof: s.prof.clone(),
        .                       types: common_types,
        .                       lifetimes: common_lifetimes,
        .                       consts: common_consts,
        .                       untracked_crate: krate,
        .                       on_disk_cache,
        .                       queries,
        .                       query_caches: query::QueryCaches::default(),
        .                       query_kinds,
        .                       ty_rcache: Default::default(),
        .                       pred_rcache: Default::default(),
        .                       selection_cache: Default::default(),
        .                       evaluation_cache: Default::default(),
        1 ( 0.00%)              crate_name: Symbol::intern(crate_name),
        .                       data_layout,
        .                       alloc_map: Lock::new(interpret::AllocMap::new()),
        .                       output_filenames: Arc::new(output_filenames),
        .                   }
        9 ( 0.00%)      }
        .           
        .               crate fn query_kind(self, k: DepKind) -> &'tcx DepKindStruct {
        .                   &self.query_kinds[k as usize]
        .               }
        .           
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
-- line 1191 ----------------------------------------
-- line 1217 ----------------------------------------
        .                   ty: Ty<'tcx>,
        .                   span: S,
        .                   msg: &str,
        .               ) -> &'tcx Const<'tcx> {
        .                   self.sess.delay_span_bug(span, msg);
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Error(DelaySpanBugEmitted(())), ty })
        .               }
        .           
    8,526 ( 0.00%)      pub fn consider_optimizing<T: Fn() -> String>(self, msg: T) -> bool {
    1,218 ( 0.00%)          let cname = self.crate_name(LOCAL_CRATE);
    9,055 ( 0.00%)          self.sess.consider_optimizing(cname.as_str(), msg)
    9,744 ( 0.00%)      }
        .           
        .               /// Obtain all lang items of this crate and all dependencies (recursively)
  597,744 ( 0.02%)      pub fn lang_items(self) -> &'tcx rustc_hir::lang_items::LanguageItems {
        .                   self.get_lang_items(())
  768,528 ( 0.03%)      }
        .           
        .               /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to
        .               /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.
       63 ( 0.00%)      pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {
        .                   self.all_diagnostic_items(()).name_to_id.get(&name).copied()
       72 ( 0.00%)      }
        .           
        .               /// Obtain the diagnostic item's name
   10,437 ( 0.00%)      pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {
        .                   self.diagnostic_items(id.krate).id_to_name.get(&id).copied()
   11,928 ( 0.00%)      }
        .           
        .               /// Check whether the diagnostic item with the given `name` has the given `DefId`.
   14,434 ( 0.00%)      pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {
        .                   self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)
   16,496 ( 0.00%)      }
        .           
    2,233 ( 0.00%)      pub fn stability(self) -> &'tcx stability::Index<'tcx> {
        .                   self.stability_index(())
    2,871 ( 0.00%)      }
        .           
  111,650 ( 0.00%)      pub fn features(self) -> &'tcx rustc_feature::Features {
        .                   self.features_query(())
  127,600 ( 0.00%)      }
        .           
   31,061 ( 0.00%)      pub fn def_key(self, id: DefId) -> rustc_hir::definitions::DefKey {
        .                   // Accessing the DefKey is ok, since it is part of DefPathHash.
  181,831 ( 0.01%)          if let Some(id) = id.as_local() {
        .                       self.untracked_resolutions.definitions.def_key(id)
        .                   } else {
  278,338 ( 0.01%)              self.untracked_resolutions.cstore.def_key(id)
        .                   }
    4,462 ( 0.00%)      }
        .           
        .               /// Converts a `DefId` into its fully expanded `DefPath` (every
        .               /// `DefId` is really just an interned `DefPath`).
        .               ///
        .               /// Note that if `id` is not local to this crate, the result will
        .               ///  be a non-local `DefPath`.
      118 ( 0.00%)      pub fn def_path(self, id: DefId) -> rustc_hir::definitions::DefPath {
        .                   // Accessing the DefPath is ok, since it is part of DefPathHash.
      177 ( 0.00%)          if let Some(id) = id.as_local() {
       12 ( 0.00%)              self.untracked_resolutions.definitions.def_path(id)
        .                   } else {
      275 ( 0.00%)              self.untracked_resolutions.cstore.def_path(id)
        .                   }
      177 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn def_path_hash(self, def_id: DefId) -> rustc_hir::definitions::DefPathHash {
        .                   // Accessing the DefPathHash is ok, it is incr. comp. stable.
    2,627 ( 0.00%)          if let Some(def_id) = def_id.as_local() {
        .                       self.untracked_resolutions.definitions.def_path_hash(def_id)
        .                   } else {
    4,605 ( 0.00%)              self.untracked_resolutions.cstore.def_path_hash(def_id)
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn stable_crate_id(self, crate_num: CrateNum) -> StableCrateId {
        .                   if crate_num == LOCAL_CRATE {
        .                       self.sess.local_stable_crate_id()
        .                   } else {
-- line 1296 ----------------------------------------
-- line 1353 ----------------------------------------
        .                       &(format!("{:08x}", stable_crate_id.to_u64()))[..4],
        .                       self.def_path(def_id).to_string_no_crate_verbose()
        .                   )
        .               }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn cstore_untracked(self) -> &'tcx ty::CrateStoreDyn {
  122,008 ( 0.00%)          &*self.untracked_resolutions.cstore
   61,004 ( 0.00%)      }
        .           
        .               /// Note that this is *untracked* and should only be used within the query
        .               /// system if the result is otherwise tracked through queries
        .               pub fn definitions_untracked(self) -> &'tcx hir::definitions::Definitions {
        .                   &self.untracked_resolutions.definitions
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_stable_hashing_context(self) -> StableHashingContext<'tcx> {
    3,721 ( 0.00%)          let resolutions = &self.gcx.untracked_resolutions;
   14,886 ( 0.00%)          StableHashingContext::new(self.sess, &resolutions.definitions, &*resolutions.cstore)
        .               }
        .           
        .               #[inline(always)]
        .               pub fn create_no_span_stable_hashing_context(self) -> StableHashingContext<'tcx> {
        .                   let resolutions = &self.gcx.untracked_resolutions;
        .                   StableHashingContext::ignore_spans(
        .                       self.sess,
        .                       &resolutions.definitions,
-- line 1381 ----------------------------------------
-- line 1390 ----------------------------------------
        .               /// If `true`, we should use the MIR-based borrowck, but also
        .               /// fall back on the AST borrowck if the MIR-based one errors.
        .               pub fn migrate_borrowck(self) -> bool {
        .                   self.borrowck_mode().migrate()
        .               }
        .           
        .               /// What mode(s) of borrowck should we run? AST? MIR? both?
        .               /// (Also considers the `#![feature(nll)]` setting.)
      150 ( 0.00%)      pub fn borrowck_mode(self) -> BorrowckMode {
        .                   // Here are the main constraints we need to deal with:
        .                   //
        .                   // 1. An opts.borrowck_mode of `BorrowckMode::Migrate` is
        .                   //    synonymous with no `-Z borrowck=...` flag at all.
        .                   //
        .                   // 2. We want to allow developers on the Nightly channel
        .                   //    to opt back into the "hard error" mode for NLL,
        .                   //    (which they can do via specifying `#![feature(nll)]`
-- line 1406 ----------------------------------------
-- line 1413 ----------------------------------------
        .                   //   errors. (To simplify the code here, it now even overrides
        .                   //   a user's attempt to specify `-Z borrowck=compare`, which
        .                   //   we arguably do not need anymore and should remove.)
        .                   //
        .                   // * Otherwise, if no `-Z borrowck=...` then use migrate mode
        .                   //
        .                   // * Otherwise, use the behavior requested via `-Z borrowck=...`
        .           
      225 ( 0.00%)          if self.features().nll {
        .                       return BorrowckMode::Mir;
        .                   }
        .           
       75 ( 0.00%)          self.sess.opts.borrowck_mode
      300 ( 0.00%)      }
        .           
        .               /// If `true`, we should use lazy normalization for constants, otherwise
        .               /// we still evaluate them eagerly.
        .               #[inline]
        .               pub fn lazy_normalization(self) -> bool {
        1 ( 0.00%)          let features = self.features();
        .                   // Note: We only use lazy normalization for generic const expressions.
        1 ( 0.00%)          features.generic_const_exprs
        .               }
        .           
        .               #[inline]
        .               pub fn local_crate_exports_generics(self) -> bool {
        .                   debug_assert!(self.sess.opts.share_generics());
        .           
      851 ( 0.00%)          self.sess.crate_types().iter().any(|crate_type| {
    1,423 ( 0.00%)              match crate_type {
        .                           CrateType::Executable
        .                           | CrateType::Staticlib
        .                           | CrateType::ProcMacro
        .                           | CrateType::Cdylib => false,
        .           
        .                           // FIXME rust-lang/rust#64319, rust-lang/rust#64872:
        .                           // We want to block export of generics from dylibs,
        .                           // but we must fix rust-lang/rust#65890 before we can
-- line 1450 ----------------------------------------
-- line 1540 ----------------------------------------
        .                       // FIXME(#42706) -- in some cases, we could do better here.
        .                       return true;
        .                   }
        .                   false
        .               }
        .           
        .               /// Determines whether identifiers in the assembly have strict naming rules.
        .               /// Currently, only NVPTX* targets need it.
    3,458 ( 0.00%)      pub fn has_strict_asm_symbol_naming(self) -> bool {
    3,458 ( 0.00%)          self.sess.target.arch.contains("nvptx")
    6,916 ( 0.00%)      }
        .           
        .               /// Returns `&'static core::panic::Location<'static>`.
      390 ( 0.00%)      pub fn caller_location_ty(self) -> Ty<'tcx> {
        .                   self.mk_imm_ref(
       65 ( 0.00%)              self.lifetimes.re_static,
        .                       self.type_of(self.require_lang_item(LangItem::PanicLocation, None))
      130 ( 0.00%)                  .subst(self, self.mk_substs([self.lifetimes.re_static.into()].iter())),
        .                   )
      390 ( 0.00%)      }
        .           
        .               /// Returns a displayable description and article for the given `def_id` (e.g. `("a", "struct")`).
      781 ( 0.00%)      pub fn article_and_description(self, def_id: DefId) -> (&'static str, &'static str) {
      568 ( 0.00%)          match self.def_kind(def_id) {
        .                       DefKind::Generator => match self.generator_kind(def_id).unwrap() {
        .                           rustc_hir::GeneratorKind::Async(..) => ("an", "async closure"),
        .                           rustc_hir::GeneratorKind::Gen => ("a", "generator"),
        .                       },
    1,278 ( 0.00%)              def_kind => (def_kind.article(), def_kind.descr(def_id)),
        .                   }
      639 ( 0.00%)      }
        .           
   19,257 ( 0.00%)      pub fn type_length_limit(self) -> Limit {
        .                   self.limits(()).type_length_limit
   22,008 ( 0.00%)      }
        .           
  291,977 ( 0.01%)      pub fn recursion_limit(self) -> Limit {
        .                   self.limits(()).recursion_limit
  333,688 ( 0.01%)      }
        .           
   36,946 ( 0.00%)      pub fn move_size_limit(self) -> Limit {
        .                   self.limits(()).move_size_limit
   42,224 ( 0.00%)      }
        .           
    1,379 ( 0.00%)      pub fn const_eval_limit(self) -> Limit {
        .                   self.limits(()).const_eval_limit
    1,576 ( 0.00%)      }
        .           
        .               pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {
        .                   iter::once(LOCAL_CRATE)
        .                       .chain(self.crates(()).iter().copied())
        .                       .flat_map(move |cnum| self.traits_in_crate(cnum).iter().copied())
        .               }
        .           }
        .           
-- line 1594 ----------------------------------------
-- line 1614 ----------------------------------------
        .               fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted>;
        .           }
        .           
        .           macro_rules! nop_lift {
        .               ($set:ident; $ty:ty => $lifted:ty) => {
        .                   impl<'a, 'tcx> Lift<'tcx> for $ty {
        .                       type Lifted = $lifted;
        .                       fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {
    3,172 ( 0.00%)                  if tcx.interners.$set.contains_pointer_to(&Interned(self)) {
        .                               Some(unsafe { mem::transmute(self) })
        .                           } else {
        .                               None
        .                           }
        .                       }
        .                   }
        .               };
        .           }
-- line 1630 ----------------------------------------
-- line 1684 ----------------------------------------
        .               /// This is the implicit state of rustc. It contains the current
        .               /// `TyCtxt` and query. It is updated when creating a local interner or
        .               /// executing a new query. Whenever there's a `TyCtxt` value available
        .               /// you should also have access to an `ImplicitCtxt` through the functions
        .               /// in this module.
        .               #[derive(Clone)]
        .               pub struct ImplicitCtxt<'a, 'tcx> {
        .                   /// The current `TyCtxt`.
        2 ( 0.00%)          pub tcx: TyCtxt<'tcx>,
        .           
        .                   /// The current query job, if any. This is updated by `JobOwner::start` in
        .                   /// `ty::query::plumbing` when executing a query.
        .                   pub query: Option<query::QueryJobId<DepKind>>,
        .           
        .                   /// Where to store diagnostics for the current query job, if any.
        .                   /// This is updated by `JobOwner::start` in `ty::query::plumbing` when executing a query.
        .                   pub diagnostics: Option<&'a Lock<ThinVec<Diagnostic>>>,
-- line 1700 ----------------------------------------
-- line 1703 ----------------------------------------
        .                   pub layout_depth: usize,
        .           
        .                   /// The current dep graph task. This is used to add dependencies to queries
        .                   /// when executing them.
        .                   pub task_deps: TaskDepsRef<'a>,
        .               }
        .           
        .               impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {
        5 ( 0.00%)          pub fn new(gcx: &'tcx GlobalCtxt<'tcx>) -> Self {
        .                       let tcx = TyCtxt { gcx };
       25 ( 0.00%)              ImplicitCtxt {
        .                           tcx,
        .                           query: None,
        .                           diagnostics: None,
        .                           layout_depth: 0,
        .                           task_deps: TaskDepsRef::Ignore,
        .                       }
        5 ( 0.00%)          }
        .               }
        .           
        .               /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs
        .               /// to `value` during the call to `f`. It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(parallel_compiler)]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
-- line 1728 ----------------------------------------
-- line 1745 ----------------------------------------
        .           
        .               /// Sets TLV to `value` during the call to `f`.
        .               /// It is restored to its previous value after.
        .               /// This is used to set the pointer to the new `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn set_tlv<F: FnOnce() -> R, R>(value: usize, f: F) -> R {
        .                   let old = get_tlv();
   91,307 ( 0.00%)          let _reset = rustc_data_structures::OnDrop(move || TLV.with(|tlv| tlv.set(old)));
        .                   TLV.with(|tlv| tlv.set(value));
        .                   f()
        .               }
        .           
        .               /// Gets the pointer to the current `ImplicitCtxt`.
        .               #[cfg(not(parallel_compiler))]
        .               #[inline]
        .               fn get_tlv() -> usize {
-- line 1761 ----------------------------------------
-- line 1763 ----------------------------------------
        .               }
        .           
        .               /// Sets `context` as the new current `ImplicitCtxt` for the duration of the function `f`.
        .               #[inline]
        .               pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
        1 ( 0.00%)          set_tlv(context as *const _ as usize, || f(&context))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` in a closure if one is available.
        .               #[inline]
        .               pub fn with_context_opt<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,
        .               {
        .                   let context = get_tlv();
  419,976 ( 0.01%)          if context == 0 {
        .                       f(None)
        .                   } else {
        .                       // We could get an `ImplicitCtxt` pointer from another thread.
        .                       // Ensure that `ImplicitCtxt` is `Sync`.
        .                       sync::assert_sync::<ImplicitCtxt<'_, '_>>();
        .           
        .                       unsafe { f(Some(&*(context as *const ImplicitCtxt<'_, '_>))) }
        .                   }
-- line 1789 ----------------------------------------
-- line 1791 ----------------------------------------
        .           
        .               /// Allows access to the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with_context<F, R>(f: F) -> R
        .               where
        .                   F: for<'a, 'tcx> FnOnce(&ImplicitCtxt<'a, 'tcx>) -> R,
        .               {
    1,354 ( 0.00%)          with_context_opt(|opt_context| f(opt_context.expect("no ImplicitCtxt stored in tls")))
        .               }
        .           
        .               /// Allows access to the current `ImplicitCtxt` whose tcx field is the same as the tcx argument
        .               /// passed in. This means the closure is given an `ImplicitCtxt` with the same `'tcx` lifetime
        .               /// as the `TyCtxt` passed in.
        .               /// This will panic if you pass it a `TyCtxt` which is different from the current
        .               /// `ImplicitCtxt`'s `tcx` field.
        .               #[inline]
        .               pub fn with_related_context<'tcx, F, R>(tcx: TyCtxt<'tcx>, f: F) -> R
        .               where
        .                   F: FnOnce(&ImplicitCtxt<'_, 'tcx>) -> R,
        .               {
        .                   with_context(|context| unsafe {
  204,977 ( 0.01%)              assert!(ptr_eq(context.tcx.gcx, tcx.gcx));
        .                       let context: &ImplicitCtxt<'_, '_> = mem::transmute(context);
  202,030 ( 0.01%)              f(context)
        .                   })
        .               }
        .           
        .               /// Allows access to the `TyCtxt` in the current `ImplicitCtxt`.
        .               /// Panics if there is no `ImplicitCtxt` available.
        .               #[inline]
        .               pub fn with<F, R>(f: F) -> R
        .               where
-- line 1823 ----------------------------------------
-- line 1981 ----------------------------------------
        .               fn into_pointer(&self) -> *const () {
        .                   self.0 as *const _ as *const ()
        .               }
        .           }
        .           
        .           #[allow(rustc::usage_of_ty_tykind)]
        .           impl<'tcx> Borrow<TyKind<'tcx>> for Interned<'tcx, TyS<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {
  308,831 ( 0.01%)          &self.0.kind()
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind() == other.0.kind()
-- line 1997 ----------------------------------------
-- line 1998 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, TyS<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, TyS<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
  175,192 ( 0.01%)          self.0.kind().hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx> Borrow<Binder<'tcx, PredicateKind<'tcx>>> for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn borrow<'a>(&'a self) -> &'a Binder<'tcx, PredicateKind<'tcx>> {
   64,152 ( 0.00%)          &self.0.kind
        .               }
        .           }
        .           
        .           impl<'tcx> PartialEq for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn eq(&self, other: &Interned<'tcx, PredicateInner<'tcx>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0.kind == other.0.kind
-- line 2020 ----------------------------------------
-- line 2021 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx> Eq for Interned<'tcx, PredicateInner<'tcx>> {}
        .           
        .           impl<'tcx> Hash for Interned<'tcx, PredicateInner<'tcx>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   28,668 ( 0.00%)          self.0.kind.hash(s)
        .               }
        .           }
        .           
        .           impl<'tcx, T> Borrow<[T]> for Interned<'tcx, List<T>> {
        .               fn borrow<'a>(&'a self) -> &'a [T] {
  350,126 ( 0.01%)          &self.0[..]
        .               }
        .           }
        .           
        .           impl<'tcx, T: PartialEq> PartialEq for Interned<'tcx, List<T>> {
        .               fn eq(&self, other: &Interned<'tcx, List<T>>) -> bool {
        .                   // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals
        .                   // `x == y`.
        .                   self.0[..] == other.0[..]
-- line 2043 ----------------------------------------
-- line 2044 ----------------------------------------
        .               }
        .           }
        .           
        .           impl<'tcx, T: Eq> Eq for Interned<'tcx, List<T>> {}
        .           
        .           impl<'tcx, T: Hash> Hash for Interned<'tcx, List<T>> {
        .               fn hash<H: Hasher>(&self, s: &mut H) {
        .                   // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.
   66,472 ( 0.00%)          self.0[..].hash(s)
        .               }
        .           }
        .           
        .           macro_rules! direct_interners {
        .               ($($name:ident: $method:ident($ty:ty),)+) => {
        .                   $(impl<'tcx> Borrow<$ty> for Interned<'tcx, $ty> {
        .                       fn borrow<'a>(&'a self) -> &'a $ty {
   53,834 ( 0.00%)                  &self.0
        .                       }
        .                   }
        .           
        .                   impl<'tcx> PartialEq for Interned<'tcx, $ty> {
        .                       fn eq(&self, other: &Self) -> bool {
        .                           // The `Borrow` trait requires that `x.borrow() == y.borrow()`
        .                           // equals `x == y`.
        .                           self.0 == other.0
-- line 2068 ----------------------------------------
-- line 2070 ----------------------------------------
        .                   }
        .           
        .                   impl<'tcx> Eq for Interned<'tcx, $ty> {}
        .           
        .                   impl<'tcx> Hash for Interned<'tcx, $ty> {
        .                       fn hash<H: Hasher>(&self, s: &mut H) {
        .                           // The `Borrow` trait requires that `x.borrow().hash(s) ==
        .                           // x.hash(s)`.
   37,138 ( 0.00%)                  self.0.hash(s)
        .                       }
        .                   }
        .           
        .                   impl<'tcx> TyCtxt<'tcx> {
  502,181 ( 0.02%)              pub fn $method(self, v: $ty) -> &'tcx $ty {
  261,358 ( 0.01%)                  self.interners.$name.intern(v, |v| {
    9,416 ( 0.00%)                      Interned(self.interners.arena.alloc(v))
        .                           }).0
  560,970 ( 0.02%)              }
        .                   })+
        .               }
        .           }
        .           
        .           direct_interners! {
        .               region: mk_region(RegionKind),
        .               const_: mk_const(Const<'tcx>),
        .               const_allocation: intern_const_alloc(Allocation),
-- line 2095 ----------------------------------------
-- line 2097 ----------------------------------------
        .               adt_def: intern_adt_def(AdtDef),
        .               stability: intern_stability(attr::Stability),
        .               const_stability: intern_const_stability(attr::ConstStability),
        .           }
        .           
        .           macro_rules! slice_interners {
        .               ($($field:ident: $method:ident($ty:ty)),+ $(,)?) => (
        .                   impl<'tcx> TyCtxt<'tcx> {
3,976,225 ( 0.13%)              $(pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {
        .                           self.interners.$field.intern_ref(v, || {
        .                               Interned(List::from_arena(&*self.arena, v))
        .                           }).0
3,564,279 ( 0.12%)              })+
        .                   }
        .               );
        .           }
        .           
        .           slice_interners!(
        .               type_list: _intern_type_list(Ty<'tcx>),
        .               substs: _intern_substs(GenericArg<'tcx>),
        .               canonical_var_infos: _intern_canonical_var_infos(CanonicalVarInfo<'tcx>),
-- line 2117 ----------------------------------------
-- line 2129 ----------------------------------------
        .               /// unsafe.
        .               pub fn safe_to_unsafe_fn_ty(self, sig: PolyFnSig<'tcx>) -> Ty<'tcx> {
        .                   assert_eq!(sig.unsafety(), hir::Unsafety::Normal);
        .                   self.mk_fn_ptr(sig.map_bound(|sig| ty::FnSig { unsafety: hir::Unsafety::Unsafe, ..sig }))
        .               }
        .           
        .               /// Given the def_id of a Trait `trait_def_id` and the name of an associated item `assoc_name`
        .               /// returns true if the `trait_def_id` defines an associated item of name `assoc_name`.
      108 ( 0.00%)      pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {
        .                   self.super_traits_of(trait_def_id).any(|trait_did| {
        .                       self.associated_items(trait_did)
        .                           .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)
        .                           .is_some()
        .                   })
       81 ( 0.00%)      }
        .           
        .               /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)
        .               /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used
        .               /// to identify which traits may define a given associated type to help avoid cycle errors.
        .               /// Returns a `DefId` iterator.
        .               fn super_traits_of(self, trait_def_id: DefId) -> impl Iterator<Item = DefId> + 'tcx {
        .                   let mut set = FxHashSet::default();
       18 ( 0.00%)          let mut stack = vec![trait_def_id];
        .           
        .                   set.insert(trait_def_id);
        .           
       81 ( 0.00%)          iter::from_fn(move || -> Option<DefId> {
       22 ( 0.00%)              let trait_did = stack.pop()?;
       11 ( 0.00%)              let generic_predicates = self.super_predicates_of(trait_did);
        .           
        .                       for (predicate, _) in generic_predicates.predicates {
       15 ( 0.00%)                  if let ty::PredicateKind::Trait(data) = predicate.kind().skip_binder() {
       10 ( 0.00%)                      if set.insert(data.def_id()) {
        .                                   stack.push(data.def_id());
        .                               }
        .                           }
        .                       }
        .           
        .                       Some(trait_did)
        .                   })
        .               }
-- line 2169 ----------------------------------------
-- line 2188 ----------------------------------------
        .                       self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)
        .                   })
        .               }
        .           
        .               /// Same a `self.mk_region(kind)`, but avoids accessing the interners if
        .               /// `*r == kind`.
        .               #[inline]
        .               pub fn reuse_or_mk_region(self, r: Region<'tcx>, kind: RegionKind) -> Region<'tcx> {
   50,576 ( 0.00%)          if *r == kind { r } else { self.mk_region(kind) }
        .               }
        .           
        .               #[allow(rustc::usage_of_ty_tykind)]
        .               #[inline]
        .               pub fn mk_ty(self, st: TyKind<'tcx>) -> Ty<'tcx> {
2,436,509 ( 0.08%)          self.interners.intern_ty(st)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_predicate(self, binder: Binder<'tcx, PredicateKind<'tcx>>) -> Predicate<'tcx> {
  888,007 ( 0.03%)          let inner = self.interners.intern_predicate(binder);
        .                   Predicate { inner }
        .               }
        .           
        .               #[inline]
1,317,112 ( 0.04%)      pub fn reuse_or_mk_predicate(
        .                   self,
        .                   pred: Predicate<'tcx>,
        .                   binder: Binder<'tcx, PredicateKind<'tcx>>,
        .               ) -> Predicate<'tcx> {
  108,723 ( 0.00%)          if pred.kind() != binder { self.mk_predicate(binder) } else { pred }
1,317,112 ( 0.04%)      }
        .           
        .               pub fn mk_mach_int(self, tm: IntTy) -> Ty<'tcx> {
        .                   match tm {
        .                       IntTy::Isize => self.types.isize,
        .                       IntTy::I8 => self.types.i8,
        .                       IntTy::I16 => self.types.i16,
        .                       IntTy::I32 => self.types.i32,
        .                       IntTy::I64 => self.types.i64,
        .                       IntTy::I128 => self.types.i128,
        .                   }
        .               }
        .           
        .               pub fn mk_mach_uint(self, tm: UintTy) -> Ty<'tcx> {
       32 ( 0.00%)          match tm {
        .                       UintTy::Usize => self.types.usize,
        .                       UintTy::U8 => self.types.u8,
        .                       UintTy::U16 => self.types.u16,
        .                       UintTy::U32 => self.types.u32,
        .                       UintTy::U64 => self.types.u64,
        .                       UintTy::U128 => self.types.u128,
        .                   }
       32 ( 0.00%)      }
        .           
        .               pub fn mk_mach_float(self, tm: FloatTy) -> Ty<'tcx> {
        .                   match tm {
        .                       FloatTy::F32 => self.types.f32,
        .                       FloatTy::F64 => self.types.f64,
        .                   }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_static_str(self) -> Ty<'tcx> {
      332 ( 0.00%)          self.mk_imm_ref(self.lifetimes.re_static, self.types.str_)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_adt(self, def: &'tcx AdtDef, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   // Take a copy of substs so that we own the vectors inside.
        .                   self.mk_ty(Adt(def, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_foreign(self, def_id: DefId) -> Ty<'tcx> {
        .                   self.mk_ty(Foreign(def_id))
        .               }
        .           
      216 ( 0.00%)      fn mk_generic_adt(self, wrapper_def_id: DefId, ty_param: Ty<'tcx>) -> Ty<'tcx> {
        .                   let adt_def = self.adt_def(wrapper_def_id);
        .                   let substs =
      373 ( 0.00%)              InternalSubsts::for_item(self, wrapper_def_id, |param, substs| match param.kind {
        .                           GenericParamDefKind::Lifetime | GenericParamDefKind::Const { .. } => bug!(),
       11 ( 0.00%)                  GenericParamDefKind::Type { has_default, .. } => {
       76 ( 0.00%)                      if param.index == 0 {
        .                                   ty_param.into()
        .                               } else {
       11 ( 0.00%)                          assert!(has_default);
       33 ( 0.00%)                          self.type_of(param.def_id).subst(self, substs).into()
        .                               }
        .                           }
        .                       });
       27 ( 0.00%)          self.mk_ty(Adt(adt_def, substs))
      216 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_box(self, ty: Ty<'tcx>) -> Ty<'tcx> {
       55 ( 0.00%)          let def_id = self.require_lang_item(LangItem::OwnedBox, None);
       72 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {
        .                   let def_id = self.lang_items().require(item).ok()?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
-- line 2293 ----------------------------------------
-- line 2295 ----------------------------------------
        .               pub fn mk_diagnostic_item(self, ty: Ty<'tcx>, name: Symbol) -> Option<Ty<'tcx>> {
        .                   let def_id = self.get_diagnostic_item(name)?;
        .                   Some(self.mk_generic_adt(def_id, ty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_maybe_uninit(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   let def_id = self.require_lang_item(LangItem::MaybeUninit, None);
       48 ( 0.00%)          self.mk_generic_adt(def_id, ty)
        .               }
        .           
        .               #[inline]
        .               pub fn mk_ptr(self, tm: TypeAndMut<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(RawPtr(tm))
        .               }
        .           
        .               #[inline]
-- line 2311 ----------------------------------------
-- line 2329 ----------------------------------------
        .               }
        .           
        .               #[inline]
        .               pub fn mk_imm_ptr(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ptr(TypeAndMut { ty, mutbl: hir::Mutability::Not })
        .               }
        .           
        .               #[inline]
    3,237 ( 0.00%)      pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {
        .                   self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))
    3,360 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_slice(self, ty: Ty<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Slice(ty))
        .               }
        .           
        .               #[inline]
        .               pub fn intern_tup(self, ts: &[Ty<'tcx>]) -> Ty<'tcx> {
      524 ( 0.00%)          let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
      815 ( 0.00%)          self.mk_ty(Tuple(self.intern_substs(&kinds)))
        .               }
        .           
        .               pub fn mk_tup<I: InternAs<[Ty<'tcx>], Ty<'tcx>>>(self, iter: I) -> I::Output {
   41,262 ( 0.00%)          iter.intern_with(|ts| {
    8,159 ( 0.00%)              let kinds: Vec<_> = ts.iter().map(|&t| GenericArg::from(t)).collect();
   36,798 ( 0.00%)              self.mk_ty(Tuple(self.intern_substs(&kinds)))
   37,125 ( 0.00%)          })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_unit(self) -> Ty<'tcx> {
      805 ( 0.00%)          self.types.unit
        .               }
        .           
        .               #[inline]
        .               pub fn mk_diverging_default(self) -> Ty<'tcx> {
        .                   if self.features().never_type_fallback { self.types.never } else { self.types.unit }
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_def(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(FnDef(def_id, substs))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_fn_ptr(self, fty: PolyFnSig<'tcx>) -> Ty<'tcx> {
    5,696 ( 0.00%)          self.mk_ty(FnPtr(fty))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_dynamic(
        .                   self,
        .                   obj: &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   reg: ty::Region<'tcx>,
        .               ) -> Ty<'tcx> {
-- line 2384 ----------------------------------------
-- line 2412 ----------------------------------------
        .           
        .               #[inline]
        .               pub fn mk_ty_var(self, v: TyVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(TyVar(v))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_var(self, v: ConstVid<'tcx>, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        6 ( 0.00%)          self.mk_const(ty::Const { val: ty::ConstKind::Infer(InferConst::Var(v)), ty })
        .               }
        .           
        .               #[inline]
        .               pub fn mk_int_var(self, v: IntVid) -> Ty<'tcx> {
        .                   self.mk_ty_infer(IntVar(v))
        .               }
        .           
        .               #[inline]
-- line 2428 ----------------------------------------
-- line 2445 ----------------------------------------
        .                   self.mk_ty(Param(ParamTy { index, name }))
        .               }
        .           
        .               #[inline]
        .               pub fn mk_const_param(self, index: u32, name: Symbol, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {
        .                   self.mk_const(ty::Const { val: ty::ConstKind::Param(ParamConst { index, name }), ty })
        .               }
        .           
    9,072 ( 0.00%)      pub fn mk_param_from_def(self, param: &ty::GenericParamDef) -> GenericArg<'tcx> {
    6,448 ( 0.00%)          match param.kind {
        .                       GenericParamDefKind::Lifetime => {
       96 ( 0.00%)                  self.mk_region(ty::ReEarlyBound(param.to_early_bound_region_data())).into()
        .                       }
    2,560 ( 0.00%)              GenericParamDefKind::Type { .. } => self.mk_ty_param(param.index, param.name).into(),
        .                       GenericParamDefKind::Const { .. } => {
        .                           self.mk_const_param(param.index, param.name, self.type_of(param.def_id)).into()
        .                       }
        .                   }
    9,072 ( 0.00%)      }
        .           
        .               #[inline]
        .               pub fn mk_opaque(self, def_id: DefId, substs: SubstsRef<'tcx>) -> Ty<'tcx> {
        .                   self.mk_ty(Opaque(def_id, substs))
        .               }
        .           
      937 ( 0.00%)      pub fn mk_place_field(self, place: Place<'tcx>, f: Field, ty: Ty<'tcx>) -> Place<'tcx> {
      937 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Field(f, ty))
    1,874 ( 0.00%)      }
        .           
       57 ( 0.00%)      pub fn mk_place_deref(self, place: Place<'tcx>) -> Place<'tcx> {
      171 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Deref)
      114 ( 0.00%)      }
        .           
      202 ( 0.00%)      pub fn mk_place_downcast(
        .                   self,
        .                   place: Place<'tcx>,
        .                   adt_def: &'tcx AdtDef,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
      202 ( 0.00%)          self.mk_place_elem(
        .                       place,
      404 ( 0.00%)              PlaceElem::Downcast(Some(adt_def.variants[variant_index].name), variant_index),
        .                   )
      404 ( 0.00%)      }
        .           
       62 ( 0.00%)      pub fn mk_place_downcast_unnamed(
        .                   self,
        .                   place: Place<'tcx>,
        .                   variant_index: VariantIdx,
        .               ) -> Place<'tcx> {
       62 ( 0.00%)          self.mk_place_elem(place, PlaceElem::Downcast(None, variant_index))
      124 ( 0.00%)      }
        .           
        .               pub fn mk_place_index(self, place: Place<'tcx>, index: Local) -> Place<'tcx> {
        .                   self.mk_place_elem(place, PlaceElem::Index(index))
        .               }
        .           
        .               /// This method copies `Place`'s projection, add an element and reintern it. Should not be used
        .               /// to build a full `Place` it's just a convenient way to grab a projection and modify it in
        .               /// flight.
   13,986 ( 0.00%)      pub fn mk_place_elem(self, place: Place<'tcx>, elem: PlaceElem<'tcx>) -> Place<'tcx> {
        .                   let mut projection = place.projection.to_vec();
        .                   projection.push(elem);
        .           
        .                   Place { local: place.local, projection: self.intern_place_elems(&projection) }
   15,540 ( 0.00%)      }
        .           
   34,090 ( 0.00%)      pub fn intern_poly_existential_predicates(
        .                   self,
        .                   eps: &[ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .               ) -> &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {
    4,944 ( 0.00%)          assert!(!eps.is_empty());
        .                   assert!(
        .                       eps.array_windows()
   35,609 ( 0.00%)                  .all(|[a, b]| a.skip_binder().stable_cmp(self, &b.skip_binder())
        .                               != Ordering::Greater)
        .                   );
   19,776 ( 0.00%)          self._intern_poly_existential_predicates(eps)
   38,960 ( 0.00%)      }
        .           
        .               pub fn intern_predicates(self, preds: &[Predicate<'tcx>]) -> &'tcx List<Predicate<'tcx>> {
        .                   // FIXME consider asking the input slice to be sorted to avoid
        .                   // re-interning permutations, in which case that would be asserted
        .                   // here.
    6,609 ( 0.00%)          if preds.is_empty() {
        .                       // The macro-generated method below asserts we don't intern an empty slice.
        .                       List::empty()
        .                   } else {
    4,143 ( 0.00%)              self._intern_predicates(preds)
        .                   }
    5,048 ( 0.00%)      }
        .           
        .               pub fn intern_type_list(self, ts: &[Ty<'tcx>]) -> &'tcx List<Ty<'tcx>> {
   36,773 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_type_list(ts) }
    2,934 ( 0.00%)      }
        .           
        .               pub fn intern_substs(self, ts: &[GenericArg<'tcx>]) -> &'tcx List<GenericArg<'tcx>> {
  729,356 ( 0.02%)          if ts.is_empty() { List::empty() } else { self._intern_substs(ts) }
   81,632 ( 0.00%)      }
        .           
        .               pub fn intern_projs(self, ps: &[ProjectionKind]) -> &'tcx List<ProjectionKind> {
        .                   if ps.is_empty() { List::empty() } else { self._intern_projs(ps) }
        .               }
        .           
        .               pub fn intern_place_elems(self, ts: &[PlaceElem<'tcx>]) -> &'tcx List<PlaceElem<'tcx>> {
   17,663 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_place_elems(ts) }
   15,498 ( 0.00%)      }
        .           
        .               pub fn intern_canonical_var_infos(
        .                   self,
        .                   ts: &[CanonicalVarInfo<'tcx>],
        .               ) -> CanonicalVarInfos<'tcx> {
   13,856 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_canonical_var_infos(ts) }
    3,656 ( 0.00%)      }
        .           
        .               pub fn intern_bound_variable_kinds(
        .                   self,
        .                   ts: &[ty::BoundVariableKind],
        .               ) -> &'tcx List<ty::BoundVariableKind> {
   15,667 ( 0.00%)          if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }
   25,612 ( 0.00%)      }
        .           
        .               pub fn mk_fn_sig<I>(
        .                   self,
        .                   inputs: I,
        .                   output: I::Item,
        .                   c_variadic: bool,
        .                   unsafety: hir::Unsafety,
        .                   abi: abi::Abi,
        .               ) -> <I::Item as InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>::Output
        .               where
        .                   I: Iterator<Item: InternIteratorElement<Ty<'tcx>, ty::FnSig<'tcx>>>,
        .               {
        .                   inputs.chain(iter::once(output)).intern_with(|xs| ty::FnSig {
    1,258 ( 0.00%)              inputs_and_output: self.intern_type_list(xs),
      213 ( 0.00%)              c_variadic,
      302 ( 0.00%)              unsafety,
      248 ( 0.00%)              abi,
      340 ( 0.00%)          })
        .               }
        .           
        .               pub fn mk_poly_existential_predicates<
        .                   I: InternAs<
        .                       [ty::Binder<'tcx, ExistentialPredicate<'tcx>>],
        .                       &'tcx List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>>,
        .                   >,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
   18,545 ( 0.00%)          iter.intern_with(|xs| self.intern_poly_existential_predicates(xs))
        .               }
        .           
        .               pub fn mk_predicates<I: InternAs<[Predicate<'tcx>], &'tcx List<Predicate<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
       56 ( 0.00%)          iter.intern_with(|xs| self.intern_predicates(xs))
        .               }
        .           
        .               pub fn mk_type_list<I: InternAs<[Ty<'tcx>], &'tcx List<Ty<'tcx>>>>(self, iter: I) -> I::Output {
   35,551 ( 0.00%)          iter.intern_with(|xs| self.intern_type_list(xs))
        .               }
        .           
      123 ( 0.00%)      pub fn mk_substs<I: InternAs<[GenericArg<'tcx>], &'tcx List<GenericArg<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
1,238,730 ( 0.04%)          iter.intern_with(|xs| self.intern_substs(xs))
      164 ( 0.00%)      }
        .           
        .               pub fn mk_place_elems<I: InternAs<[PlaceElem<'tcx>], &'tcx List<PlaceElem<'tcx>>>>(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  122,463 ( 0.00%)          iter.intern_with(|xs| self.intern_place_elems(xs))
        .               }
        .           
   12,248 ( 0.00%)      pub fn mk_substs_trait(self, self_ty: Ty<'tcx>, rest: &[GenericArg<'tcx>]) -> SubstsRef<'tcx> {
        .                   self.mk_substs(iter::once(self_ty.into()).chain(rest.iter().cloned()))
   24,496 ( 0.00%)      }
        .           
        .               pub fn mk_bound_variable_kinds<
        .                   I: InternAs<[ty::BoundVariableKind], &'tcx List<ty::BoundVariableKind>>,
        .               >(
        .                   self,
        .                   iter: I,
        .               ) -> I::Output {
  104,287 ( 0.00%)          iter.intern_with(|xs| self.intern_bound_variable_kinds(xs))
        .               }
        .           
        .               /// Walks upwards from `id` to find a node which might change lint levels with attributes.
        .               /// It stops at `bound` and just returns it if reached.
   51,506 ( 0.00%)      pub fn maybe_lint_level_root_bounded(self, mut id: HirId, bound: HirId) -> HirId {
   51,506 ( 0.00%)          let hir = self.hir();
        .                   loop {
  131,256 ( 0.00%)              if id == bound {
        .                           return bound;
        .                       }
        .           
  183,426 ( 0.01%)              if hir.attrs(id).iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some()) {
        .                           return id;
        .                       }
        .                       let next = hir.get_parent_node(id);
  109,182 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
   73,580 ( 0.00%)      }
        .           
    3,456 ( 0.00%)      pub fn lint_level_at_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   mut id: hir::HirId,
        .               ) -> (Level, LintLevelSource) {
        .                   let sets = self.lint_levels(());
        .                   loop {
   29,574 ( 0.00%)              if let Some(pair) = sets.level_and_source(lint, id, self.sess) {
        .                           return pair;
        .                       }
    2,614 ( 0.00%)              let next = self.hir().get_parent_node(id);
    7,842 ( 0.00%)              if next == id {
        .                           bug!("lint traversal reached the root of the crate");
        .                       }
        .                       id = next;
        .                   }
    3,456 ( 0.00%)      }
        .           
      182 ( 0.00%)      pub fn struct_span_lint_hir(
        .                   self,
        .                   lint: &'static Lint,
        .                   hir_id: HirId,
        .                   span: impl Into<MultiSpan>,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
    1,066 ( 0.00%)          let (level, src) = self.lint_level_at_node(lint, hir_id);
      330 ( 0.00%)          struct_lint_level(self.sess, lint, level, src, Some(span.into()), decorate);
      104 ( 0.00%)      }
        .           
        .               pub fn struct_lint_node(
        .                   self,
        .                   lint: &'static Lint,
        .                   id: HirId,
        .                   decorate: impl for<'a> FnOnce(LintDiagnosticBuilder<'a>),
        .               ) {
        .                   let (level, src) = self.lint_level_at_node(lint, id);
        .                   struct_lint_level(self.sess, lint, level, src, None, decorate);
        .               }
        .           
    2,814 ( 0.00%)      pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {
      804 ( 0.00%)          let map = self.in_scope_traits_map(id.owner)?;
        .                   let candidates = map.get(&id.local_id)?;
      804 ( 0.00%)          Some(&*candidates)
    3,216 ( 0.00%)      }
        .           
    2,926 ( 0.00%)      pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {
        .                   debug!(?id, "named_region");
        .                   self.named_region_map(id.owner).and_then(|map| map.get(&id.local_id).cloned())
    3,762 ( 0.00%)      }
        .           
       54 ( 0.00%)      pub fn is_late_bound(self, id: HirId) -> bool {
        .                   self.is_late_bound_map(id.owner)
        5 ( 0.00%)              .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))
       48 ( 0.00%)      }
        .           
    3,640 ( 0.00%)      pub fn object_lifetime_defaults(self, id: HirId) -> Option<Vec<ObjectLifetimeDefault>> {
        .                   self.object_lifetime_defaults_map(id.owner)
    4,680 ( 0.00%)      }
        .           
    3,789 ( 0.00%)      pub fn late_bound_vars(self, id: HirId) -> &'tcx List<ty::BoundVariableKind> {
        .                   self.mk_bound_variable_kinds(
        .                       self.late_bound_vars_map(id.owner)
        .                           .and_then(|map| map.get(&id.local_id).cloned())
        .                           .unwrap_or_else(|| {
        .                               bug!("No bound vars found for {:?} ({:?})", self.hir().node_to_string(id), id)
        .                           })
        .                           .iter(),
        .                   )
    3,789 ( 0.00%)      }
        .           
        .               pub fn lifetime_scope(self, id: HirId) -> Option<LifetimeScopeForPath> {
        .                   self.lifetime_scope_map(id.owner).and_then(|mut map| map.remove(&id.local_id))
        .               }
        .           
        .               /// Whether the `def_id` counts as const fn in the current crate, considering all active
        .               /// feature gates
      280 ( 0.00%)      pub fn is_const_fn(self, def_id: DefId) -> bool {
       28 ( 0.00%)          if self.is_const_fn_raw(def_id) {
       29 ( 0.00%)              match self.lookup_const_stability(def_id) {
        4 ( 0.00%)                  Some(stability) if stability.level.is_unstable() => {
        .                               // has a `rustc_const_unstable` attribute, check whether the user enabled the
        .                               // corresponding feature gate.
        .                               self.features()
        .                                   .declared_lib_features
        .                                   .iter()
        .                                   .any(|&(sym, _)| sym == stability.feature)
        .                           }
        .                           // functions without const stability are either stable user written
        .                           // const fn or the user is using feature gates and we thus don't
        .                           // care what they do
        .                           _ => true,
        .                       }
        .                   } else {
        .                       false
        .                   }
      252 ( 0.00%)      }
        .           }
        .           
        .           impl<'tcx> TyCtxtAt<'tcx> {
        .               /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.
        .               #[track_caller]
        .               pub fn ty_error(self) -> Ty<'tcx> {
        .                   self.tcx.ty_error_with_message(self.span, "TyKind::Error constructed but no error reported")
        .               }
-- line 2759 ----------------------------------------
-- line 2774 ----------------------------------------
        .           }
        .           
        .           impl<I, T, R, E> InternAs<[T], R> for I
        .           where
        .               E: InternIteratorElement<T, R>,
        .               I: Iterator<Item = E>,
        .           {
        .               type Output = E::Output;
  709,160 ( 0.02%)      fn intern_with<F>(self, f: F) -> Self::Output
        .               where
        .                   F: FnOnce(&[T]) -> R,
        .               {
2,065,737 ( 0.07%)          E::intern_with(self, f)
  647,046 ( 0.02%)      }
        .           }
        .           
        .           pub trait InternIteratorElement<T, R>: Sized {
        .               type Output;
        .               fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output;
        .           }
        .           
        .           impl<T, R> InternIteratorElement<T, R> for T {
        .               type Output = R;
  242,711 ( 0.01%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`.
  550,080 ( 0.02%)          match iter.size_hint() {
        .                       (0, Some(0)) => {
       15 ( 0.00%)                  assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
        .                           let t0 = iter.next().unwrap();
        2 ( 0.00%)                  assert!(iter.next().is_none());
   57,880 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
        .                           let t0 = iter.next().unwrap();
        .                           let t1 = iter.next().unwrap();
      127 ( 0.00%)                  assert!(iter.next().is_none());
   71,007 ( 0.00%)                  f(&[t0, t1])
        .                       }
      360 ( 0.00%)              _ => f(&iter.collect::<SmallVec<[_; 8]>>()),
        .                   }
  165,469 ( 0.01%)      }
        .           }
        .           
        .           impl<'a, T, R> InternIteratorElement<T, R> for &'a T
        .           where
        .               T: Clone + 'a,
        .           {
        .               type Output = R;
    2,981 ( 0.00%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {
        .                   // This code isn't hot.
      136 ( 0.00%)          f(&iter.cloned().collect::<SmallVec<[_; 8]>>())
    2,512 ( 0.00%)      }
        .           }
        .           
        .           impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {
        .               type Output = Result<R, E>;
  719,353 ( 0.02%)      fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(
        .                   mut iter: I,
        .                   f: F,
        .               ) -> Self::Output {
        .                   // This code is hot enough that it's worth specializing for the most
        .                   // common length lists, to avoid the overhead of `SmallVec` creation.
        .                   // Lengths 0, 1, and 2 typically account for ~95% of cases. If
        .                   // `size_hint` is incorrect a panic will occur via an `unwrap` or an
        .                   // `assert`, unless a failure happens first, in which case the result
        .                   // will be an error anyway.
  549,006 ( 0.02%)          Ok(match iter.size_hint() {
        .                       (0, Some(0)) => {
        .                           assert!(iter.next().is_none());
        .                           f(&[])
        .                       }
        .                       (1, Some(1)) => {
      345 ( 0.00%)                  let t0 = iter.next().unwrap()?;
        .                           assert!(iter.next().is_none());
   34,897 ( 0.00%)                  f(&[t0])
        .                       }
        .                       (2, Some(2)) => {
   14,189 ( 0.00%)                  let t0 = iter.next().unwrap()?;
   14,189 ( 0.00%)                  let t1 = iter.next().unwrap()?;
    7,356 ( 0.00%)                  assert!(iter.next().is_none());
   87,226 ( 0.00%)                  f(&[t0, t1])
        .                       }
   23,315 ( 0.00%)              _ => f(&iter.collect::<Result<SmallVec<[_; 8]>, _>>()?),
        .                   })
  802,888 ( 0.03%)      }
        .           }
        .           
        .           // We are comparing types with different invariant lifetimes, so `ptr::eq`
        .           // won't work for us.
        .           fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {
  204,977 ( 0.01%)      t as *const () == u as *const ()
        .           }
        .           
        .           pub fn provide(providers: &mut ty::query::Providers) {
        2 ( 0.00%)      providers.in_scope_traits_map =
        .                   |tcx, id| tcx.hir_crate(()).owners[id].as_ref().map(|owner_info| &owner_info.trait_map);
        3 ( 0.00%)      providers.resolutions = |tcx, ()| &tcx.untracked_resolutions;
        2 ( 0.00%)      providers.module_reexports =
        .                   |tcx, id| tcx.resolutions(()).reexport_map.get(&id).map(|v| &v[..]);
        2 ( 0.00%)      providers.crate_name = |tcx, id| {
        1 ( 0.00%)          assert_eq!(id, LOCAL_CRATE);
        1 ( 0.00%)          tcx.crate_name
        .               };
        2 ( 0.00%)      providers.maybe_unused_trait_import =
        .                   |tcx, id| tcx.resolutions(()).maybe_unused_trait_imports.contains(&id);
        2 ( 0.00%)      providers.maybe_unused_extern_crates =
        .                   |tcx, ()| &tcx.resolutions(()).maybe_unused_extern_crates[..];
        2 ( 0.00%)      providers.names_imported_by_glob_use = |tcx, id| {
        .                   tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())
        .               };
        .           
       11 ( 0.00%)      providers.lookup_stability = |tcx, id| tcx.stability().local_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_const_stability =
       27 ( 0.00%)          |tcx, id| tcx.stability().local_const_stability(id.expect_local());
        2 ( 0.00%)      providers.lookup_deprecation_entry =
    2,512 ( 0.00%)          |tcx, id| tcx.stability().local_deprecation_entry(id.expect_local());
        2 ( 0.00%)      providers.extern_mod_stmt_cnum =
        .                   |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();
        3 ( 0.00%)      providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();
        3 ( 0.00%)      providers.features_query = |tcx, ()| tcx.sess.features_untracked();
        2 ( 0.00%)      providers.is_panic_runtime = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::panic_runtime)
        .               };
        2 ( 0.00%)      providers.is_compiler_builtins = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        7 ( 0.00%)          tcx.sess.contains_name(tcx.hir().krate_attrs(), sym::compiler_builtins)
        .               };
        2 ( 0.00%)      providers.has_panic_handler = |tcx, cnum| {
        1 ( 0.00%)          assert_eq!(cnum, LOCAL_CRATE);
        .                   // We want to check if the panic handler was defined in this crate
        3 ( 0.00%)          tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())
        .               };
        .           }

1,561,396 ( 0.05%)  <counts for unidentified lines in /usr/home/liquid/rust/worktree-benchmarking/compiler/rustc_middle/src/ty/context.rs>

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/dl-lookup.c
  ./elf/do-rel.h
  ./malloc/malloc.c
  ./stdlib/msort.c
  ./string/../sysdeps/x86_64/multiarch/memcmp-avx2-movbe.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S
  /tmp/gcc-build/x86_64-unknown-linux-gnu/libstdc++-v3/libsupc++/../../../../gcc-5.5.0/libstdc++-v3/libsupc++/new_op.cc

--------------------------------------------------------------------------------
Ir                   
--------------------------------------------------------------------------------
474,869,674 (15.90%)  events annotated

